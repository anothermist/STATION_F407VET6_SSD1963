
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f70c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033578  0801f8a0  0801f8a0  0002f8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052e18  08052e18  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08052e18  08052e18  00062e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052e20  08052e20  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052e20  08052e20  00062e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08052e24  08052e24  00062e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08052e28  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          000007e8  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20000a20  20000a20  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cea5  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034df  00000000  00000000  0008d10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  000905f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a4cc  00000000  00000000  000906b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd61  00000000  00000000  000aab7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a8dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e04  00000000  00000000  0017a930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00025050  00000000  00000000  00181734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f884 	.word	0x0801f884

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801f884 	.word	0x0801f884

080001d0 <AT24XX_IsConnected>:
#include "at24.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d ffe7 	bl	800e1b0 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00d f83c 	bl	800d2a4 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fefe 	bl	8007034 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00d f911 	bl	800d498 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f019 fa4c 	bl	80197cc <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 ff63 	bl	801920c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01e fafb 	bl	801e950 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f019 f909 	bl	8019578 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f019 fbfb 	bl	8019b68 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f019 f896 	bl	80194c8 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f019 f87d 	bl	80194a4 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01e fb4b 	bl	801ea50 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00b fbd3 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b fcc6 	bl	800bda8 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00b fb5b 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00b fc4e 	bl	800bda8 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00b fabe 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00b fbb2 	bl	800bda8 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00b f9da 	bl	800bbae <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00b f9ce 	bl	800bbae <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00b f9c2 	bl	800bbae <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00b f9b8 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00b faad 	bl	800bda8 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00b f98a 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00b fa7f 	bl	800bda8 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00b f926 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00b fa1b 	bl	800bda8 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00b f913 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00b fa07 	bl	800bda8 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 fd6c 	bl	8019578 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f018 fbab 	bl	801920c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 fe85 	bl	80197cc <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d ffbb 	bl	801ea50 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 fd48 	bl	8019578 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 fd40 	bl	8019578 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 fe61 	bl	80197cc <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f018 fb74 	bl	8019208 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 fd23 	bl	8019578 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f018 fb67 	bl	801920c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 fce8 	bl	8019578 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f018 fb27 	bl	801920c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 fe01 	bl	80197cc <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 fccf 	bl	8019578 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 fcc6 	bl	8019578 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d ff26 	bl	801ea50 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f018 fcb3 	bl	8019578 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f018 faf2 	bl	801920c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 fdcc 	bl	80197cc <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a ff4e 	bl	800bbae <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00b f842 	bl	800bda8 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002bc 	.word	0x200002bc
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f018 fa6a 	bl	8019484 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f018 fad9 	bl	8019578 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f018 fa67 	bl	80194a4 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f018 f915 	bl	801920c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a fdbb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	200002bc 	.word	0x200002bc

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a fd9b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	200002bc 	.word	0x200002bc

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a fd7b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	200002bc 	.word	0x200002bc

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a fd5b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	200002bc 	.word	0x200002bc

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a fd3b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	200002bc 	.word	0x200002bc

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a fd1b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	200002bc 	.word	0x200002bc

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a fcfb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	200002bc 	.word	0x200002bc

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a fcdb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	200002bc 	.word	0x200002bc

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a fcbb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	200002bc 	.word	0x200002bc

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f00a fc9b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	200002bc 	.word	0x200002bc

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f00a fc7b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	200002bc 	.word	0x200002bc

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f00a fc5b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	200002bc 	.word	0x200002bc

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f00a fc3b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	200002bc 	.word	0x200002bc

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f00a fc1b 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	200002bc 	.word	0x200002bc

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f00a fbfb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	200002bc 	.word	0x200002bc

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f00a fbdb 	bl	800bbae <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	200002bc 	.word	0x200002bc

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	0805269c 	.word	0x0805269c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01d fa0d 	bl	801e950 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 fe63 	bl	8019208 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f018 fa81 	bl	8019a5c <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 fe4f 	bl	801920c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 ff6f 	bl	80194a4 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 ff60 	bl	80194a4 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 fe0c 	bl	8019208 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f018 fb1e 	bl	8019c38 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 ff5b 	bl	801950c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 ff8c 	bl	8019578 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01d f96e 	bl	801e950 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f018 fadc 	bl	8019c38 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 ff3e 	bl	801950c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 ff6f 	bl	8019578 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 fdb0 	bl	801920c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01d f948 	bl	801e950 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f018 fab6 	bl	8019c38 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f018 fac8 	bl	8019c74 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 ff08 	bl	801950c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 ff39 	bl	8019578 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01d f91b 	bl	801e950 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 fd70 	bl	8019208 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f018 fa82 	bl	8019c38 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 feb1 	bl	801950c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 fd2a 	bl	8019208 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f018 f803 	bl	80197cc <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fec6 	bl	8019578 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f018 f9b8 	bl	8019b68 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f017 fe0b 	bl	80194a4 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f014 fcbb 	bl	80162b0 <HAL_UART_Receive_IT>
		//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	20000974 	.word	0x20000974
 800194c:	20000975 	.word	0x20000975
 8001950:	20000964 	.word	0x20000964
 8001954:	200004d8 	.word	0x200004d8

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0b7      	sub	sp, #220	; 0xdc
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f005 fa83 	bl	8006e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f001 ff3f 	bl	80037e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 f8fd 	bl	8003b64 <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 f9d5 	bl	8003d18 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f001 ffd7 	bl	8003920 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 f8a5 	bl	8003ac0 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 f86d 	bl	8003a54 <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f835 	bl	80039e8 <MX_SPI2_Init>
  MX_DMA_Init();
 800197e:	f002 f8c9 	bl	8003b14 <MX_DMA_Init>
  MX_DAC_Init();
 8001982:	f001 ff99 	bl	80038b8 <MX_DAC_Init>
  MX_SPI1_Init();
 8001986:	f001 fff9 	bl	800397c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 800198a:	f003 fce1 	bl	8005350 <LCD_Init>
	XPT2046_Init();
 800198e:	f005 f976 	bl	8006c7e <XPT2046_Init>
	BME280_Init();
 8001992:	f7fe ff23 	bl	80007dc <BME280_Init>
	W25Q_Init();
 8001996:	f004 ff05 	bl	80067a4 <W25Q_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800199a:	23ff      	movs	r3, #255	; 0xff
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80019a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f002 fafd 	bl	8003fa8 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019b6:	f240 321e 	movw	r2, #798	; 0x31e
 80019ba:	2101      	movs	r1, #1
 80019bc:	2001      	movs	r0, #1
 80019be:	f002 faf3 	bl	8003fa8 <LCD_Rect_Fill>

//	W25Q_Erase_Sector(2);

	uint8_t flashIN[] = "SAVE OK \r\n";
 80019c2:	4aac      	ldr	r2, [pc, #688]	; (8001c74 <main+0x31c>)
 80019c4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ca:	c303      	stmia	r3!, {r0, r1}
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	3302      	adds	r3, #2
 80019d0:	0c12      	lsrs	r2, r2, #16
 80019d2:	701a      	strb	r2, [r3, #0]
	W25Q_Save_Page(15, flashIN, 10);
 80019d4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019d8:	220a      	movs	r2, #10
 80019da:	4619      	mov	r1, r3
 80019dc:	200f      	movs	r0, #15
 80019de:	f005 f8fb 	bl	8006bd8 <W25Q_Save_Page>

	uint8_t flashOUT[10] = {0};
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80019e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	809a      	strh	r2, [r3, #4]
	W25Q_Load_Page(15, flashOUT, 10);
 80019f2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80019f6:	220a      	movs	r2, #10
 80019f8:	4619      	mov	r1, r3
 80019fa:	200f      	movs	r0, #15
 80019fc:	f005 f900 	bl	8006c00 <W25Q_Load_Page>
	HAL_UART_Transmit(&huart1, flashOUT, sizeof(flashOUT), 100);
 8001a00:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001a04:	2364      	movs	r3, #100	; 0x64
 8001a06:	220a      	movs	r2, #10
 8001a08:	489b      	ldr	r0, [pc, #620]	; (8001c78 <main+0x320>)
 8001a0a:	f014 fad8 	bl	8015fbe <HAL_UART_Transmit>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8001a14:	e027      	b.n	8001a66 <main+0x10e>
 8001a16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a1a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fc33 	bl	8000290 <AT24XX_Read>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fc27 	bl	8000290 <AT24XX_Read>
 8001a42:	4603      	mov	r3, r0
 8001a44:	4619      	mov	r1, r3
 8001a46:	4620      	mov	r0, r4
 8001a48:	f7ff ff48 	bl	80018dc <byteS>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a54:	b211      	sxth	r1, r2
 8001a56:	4a89      	ldr	r2, [pc, #548]	; (8001c7c <main+0x324>)
 8001a58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a60:	3301      	adds	r3, #1
 8001a62:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8001a66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8001a6a:	2b9a      	cmp	r3, #154	; 0x9a
 8001a6c:	d9d3      	bls.n	8001a16 <main+0xbe>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8001a74:	e027      	b.n	8001ac6 <main+0x16e>
 8001a76:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001a7a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7fe fc03 	bl	8000290 <AT24XX_Read>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461c      	mov	r4, r3
 8001a8e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fbf7 	bl	8000290 <AT24XX_Read>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff ff18 	bl	80018dc <byteS>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001ab4:	b211      	sxth	r1, r2
 8001ab6:	4a72      	ldr	r2, [pc, #456]	; (8001c80 <main+0x328>)
 8001ab8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001abc:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8001ac6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8001aca:	2b9a      	cmp	r3, #154	; 0x9a
 8001acc:	d9d3      	bls.n	8001a76 <main+0x11e>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001ace:	2300      	movs	r3, #0
 8001ad0:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8001ad4:	e027      	b.n	8001b26 <main+0x1ce>
 8001ad6:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001ada:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fbd3 	bl	8000290 <AT24XX_Read>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461c      	mov	r4, r3
 8001aee:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7fe fbc7 	bl	8000290 <AT24XX_Read>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4619      	mov	r1, r3
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff fee8 	bl	80018dc <byteS>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001b14:	b211      	sxth	r1, r2
 8001b16:	4a5b      	ldr	r2, [pc, #364]	; (8001c84 <main+0x32c>)
 8001b18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001b1c:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8001b26:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	; 0xca
 8001b2a:	2b9a      	cmp	r3, #154	; 0x9a
 8001b2c:	d9d3      	bls.n	8001ad6 <main+0x17e>


	//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001b2e:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <main+0x330>)
 8001b30:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b36:	c303      	stmia	r3!, {r0, r1}
 8001b38:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001b3a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	220a      	movs	r2, #10
 8001b42:	484d      	ldr	r0, [pc, #308]	; (8001c78 <main+0x320>)
 8001b44:	f014 fa3b 	bl	8015fbe <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001b48:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <main+0x334>)
 8001b4a:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001b4e:	461d      	mov	r5, r3
 8001b50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b54:	682b      	ldr	r3, [r5, #0]
 8001b56:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001b58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b5c:	2214      	movs	r2, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4845      	ldr	r0, [pc, #276]	; (8001c78 <main+0x320>)
 8001b62:	f014 fb60 	bl	8016226 <HAL_UART_Transmit_IT>

	//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
	//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001b66:	2210      	movs	r2, #16
 8001b68:	4949      	ldr	r1, [pc, #292]	; (8001c90 <main+0x338>)
 8001b6a:	4843      	ldr	r0, [pc, #268]	; (8001c78 <main+0x320>)
 8001b6c:	f014 fba0 	bl	80162b0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001b70:	2120      	movs	r1, #32
 8001b72:	4848      	ldr	r0, [pc, #288]	; (8001c94 <main+0x33c>)
 8001b74:	f009 fe12 	bl	800b79c <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d12c      	bne.n	8001bd8 <main+0x280>

			uint16_t touchX = getX();
 8001b7e:	f005 f93f 	bl	8006e00 <getX>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			uint16_t touchY = getY();
 8001b88:	f005 f954 	bl	8006e34 <getY>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			if (touchX && touchY && touchX != 0x0DB)
 8001b92:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d012      	beq.n	8001bc0 <main+0x268>
 8001b9a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00e      	beq.n	8001bc0 <main+0x268>
 8001ba2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8001ba6:	2bdb      	cmp	r3, #219	; 0xdb
 8001ba8:	d00a      	beq.n	8001bc0 <main+0x268>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001baa:	f8b7 109e 	ldrh.w	r1, [r7, #158]	; 0x9e
 8001bae:	f8b7 00a0 	ldrh.w	r0, [r7, #160]	; 0xa0
 8001bb2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f002 f9f4 	bl	8003fa8 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2180      	movs	r1, #128	; 0x80
 8001bc4:	4834      	ldr	r0, [pc, #208]	; (8001c98 <main+0x340>)
 8001bc6:	f009 fe01 	bl	800b7cc <HAL_GPIO_WritePin>
			touchX = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			touchY = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8001bd6:	e004      	b.n	8001be2 <main+0x28a>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	482e      	ldr	r0, [pc, #184]	; (8001c98 <main+0x340>)
 8001bde:	f009 fdf5 	bl	800b7cc <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001be2:	f7ff f8e9 	bl	8000db8 <DS3231_getSec>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b2c      	ldr	r3, [pc, #176]	; (8001c9c <main+0x344>)
 8001bec:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <main+0x348>)
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <main+0x344>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d0ba      	beq.n	8001b70 <main+0x218>

			rtcMin = DS3231_getMin();
 8001bfa:	f7ff f8eb 	bl	8000dd4 <DS3231_getMin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <main+0x34c>)
 8001c04:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <main+0x350>)
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2208      	movs	r2, #8
 8001c12:	2123      	movs	r1, #35	; 0x23
 8001c14:	20aa      	movs	r0, #170	; 0xaa
 8001c16:	f002 fe0b 	bl	8004830 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <main+0x350>)
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2301      	movs	r3, #1
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2208      	movs	r2, #8
 8001c26:	214b      	movs	r1, #75	; 0x4b
 8001c28:	20aa      	movs	r0, #170	; 0xaa
 8001c2a:	f002 fe01 	bl	8004830 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <main+0x344>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d037      	beq.n	8001cac <main+0x354>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <main+0x350>)
 8001c3e:	9301      	str	r3, [sp, #4]
 8001c40:	2301      	movs	r3, #1
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	2301      	movs	r3, #1
 8001c46:	2207      	movs	r2, #7
 8001c48:	2123      	movs	r1, #35	; 0x23
 8001c4a:	20aa      	movs	r0, #170	; 0xaa
 8001c4c:	f002 fdf0 	bl	8004830 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <main+0x350>)
 8001c52:	9301      	str	r3, [sp, #4]
 8001c54:	2301      	movs	r3, #1
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2207      	movs	r2, #7
 8001c5c:	214b      	movs	r1, #75	; 0x4b
 8001c5e:	20aa      	movs	r0, #170	; 0xaa
 8001c60:	f002 fde6 	bl	8004830 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6a:	480a      	ldr	r0, [pc, #40]	; (8001c94 <main+0x33c>)
 8001c6c:	f009 fdae 	bl	800b7cc <HAL_GPIO_WritePin>
 8001c70:	e036      	b.n	8001ce0 <main+0x388>
 8001c72:	bf00      	nop
 8001c74:	08052708 	.word	0x08052708
 8001c78:	200004d8 	.word	0x200004d8
 8001c7c:	200005bc 	.word	0x200005bc
 8001c80:	200006f4 	.word	0x200006f4
 8001c84:	2000082c 	.word	0x2000082c
 8001c88:	08052714 	.word	0x08052714
 8001c8c:	08052720 	.word	0x08052720
 8001c90:	20000975 	.word	0x20000975
 8001c94:	40020800 	.word	0x40020800
 8001c98:	40020000 	.word	0x40020000
 8001c9c:	2000056d 	.word	0x2000056d
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	2000056e 	.word	0x2000056e
 8001ca8:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001cac:	2300      	movs	r3, #0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	2123      	movs	r1, #35	; 0x23
 8001cba:	20aa      	movs	r0, #170	; 0xaa
 8001cbc:	f002 fdb8 	bl	8004830 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2301      	movs	r3, #1
 8001cca:	2207      	movs	r2, #7
 8001ccc:	214b      	movs	r1, #75	; 0x4b
 8001cce:	20aa      	movs	r0, #170	; 0xaa
 8001cd0:	f002 fdae 	bl	8004830 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cda:	48bb      	ldr	r0, [pc, #748]	; (8001fc8 <main+0x670>)
 8001cdc:	f009 fd76 	bl	800b7cc <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001ce0:	4bba      	ldr	r3, [pc, #744]	; (8001fcc <main+0x674>)
 8001ce2:	781a      	ldrb	r2, [r3, #0]
 8001ce4:	4bba      	ldr	r3, [pc, #744]	; (8001fd0 <main+0x678>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f001 808c 	beq.w	8002e06 <main+0x14ae>

				rtcHrs = DS3231_getHrs();
 8001cee:	f7ff f87f 	bl	8000df0 <DS3231_getHrs>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4bb7      	ldr	r3, [pc, #732]	; (8001fd4 <main+0x67c>)
 8001cf8:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001cfa:	4bb4      	ldr	r3, [pc, #720]	; (8001fcc <main+0x674>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d04:	49b4      	ldr	r1, [pc, #720]	; (8001fd8 <main+0x680>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f019 f816 	bl	801ad38 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d0c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d10:	2300      	movs	r3, #0
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	2301      	movs	r3, #1
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	4bb0      	ldr	r3, [pc, #704]	; (8001fdc <main+0x684>)
 8001d1a:	2164      	movs	r1, #100	; 0x64
 8001d1c:	20b2      	movs	r0, #178	; 0xb2
 8001d1e:	f003 fa9d 	bl	800525c <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001d22:	4bab      	ldr	r3, [pc, #684]	; (8001fd0 <main+0x678>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d2c:	49aa      	ldr	r1, [pc, #680]	; (8001fd8 <main+0x680>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f019 f802 	bl	801ad38 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d34:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d38:	4ba9      	ldr	r3, [pc, #676]	; (8001fe0 <main+0x688>)
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	4ba6      	ldr	r3, [pc, #664]	; (8001fdc <main+0x684>)
 8001d42:	2164      	movs	r1, #100	; 0x64
 8001d44:	20b2      	movs	r0, #178	; 0xb2
 8001d46:	f003 fa89 	bl	800525c <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001d4a:	4ba6      	ldr	r3, [pc, #664]	; (8001fe4 <main+0x68c>)
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	4ba1      	ldr	r3, [pc, #644]	; (8001fd4 <main+0x67c>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	f000 80fb 	beq.w	8001f4e <main+0x5f6>

					rtcDay = DS3231_getDay();
 8001d58:	f7ff f858 	bl	8000e0c <DS3231_getDay>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	4ba1      	ldr	r3, [pc, #644]	; (8001fe8 <main+0x690>)
 8001d62:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001d64:	f7ff f860 	bl	8000e28 <DS3231_getDate>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <main+0x694>)
 8001d6e:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001d70:	f7ff f868 	bl	8000e44 <DS3231_getMonth>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b9d      	ldr	r3, [pc, #628]	; (8001ff0 <main+0x698>)
 8001d7a:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001d7c:	f7ff f870 	bl	8000e60 <DS3231_getYear>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461a      	mov	r2, r3
 8001d84:	4b9b      	ldr	r3, [pc, #620]	; (8001ff4 <main+0x69c>)
 8001d86:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001d88:	4b96      	ldr	r3, [pc, #600]	; (8001fe4 <main+0x68c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d92:	4991      	ldr	r1, [pc, #580]	; (8001fd8 <main+0x680>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f018 ffcf 	bl	801ad38 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2301      	movs	r3, #1
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <main+0x684>)
 8001da8:	2164      	movs	r1, #100	; 0x64
 8001daa:	2000      	movs	r0, #0
 8001dac:	f003 fa56 	bl	800525c <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001db0:	4b88      	ldr	r3, [pc, #544]	; (8001fd4 <main+0x67c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dba:	4987      	ldr	r1, [pc, #540]	; (8001fd8 <main+0x680>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f018 ffbb 	bl	801ad38 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001dc2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001dc6:	4b86      	ldr	r3, [pc, #536]	; (8001fe0 <main+0x688>)
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	2301      	movs	r3, #1
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4b83      	ldr	r3, [pc, #524]	; (8001fdc <main+0x684>)
 8001dd0:	2164      	movs	r1, #100	; 0x64
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f003 fa42 	bl	800525c <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8001dd8:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <main+0x6a0>)
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <main+0x690>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f000 80a8 	beq.w	8001f36 <main+0x5de>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8001de6:	4b80      	ldr	r3, [pc, #512]	; (8001fe8 <main+0x690>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	1d5a      	adds	r2, r3, #5
 8001dec:	4b83      	ldr	r3, [pc, #524]	; (8001ffc <main+0x6a4>)
 8001dee:	fb83 1302 	smull	r1, r3, r3, r2
 8001df2:	4413      	add	r3, r2
 8001df4:	1099      	asrs	r1, r3, #2
 8001df6:	17d3      	asrs	r3, r2, #31
 8001df8:	1ac9      	subs	r1, r1, r3
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	1a5b      	subs	r3, r3, r1
 8001e00:	1ad1      	subs	r1, r2, r3
 8001e02:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <main+0x6a8>)
 8001e04:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4b7c      	ldr	r3, [pc, #496]	; (8002004 <main+0x6ac>)
 8001e12:	218c      	movs	r1, #140	; 0x8c
 8001e14:	2005      	movs	r0, #5
 8001e16:	f003 fa21 	bl	800525c <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8001e1a:	4b73      	ldr	r3, [pc, #460]	; (8001fe8 <main+0x690>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	1d9a      	adds	r2, r3, #6
 8001e20:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <main+0x6a4>)
 8001e22:	fb83 1302 	smull	r1, r3, r3, r2
 8001e26:	4413      	add	r3, r2
 8001e28:	1099      	asrs	r1, r3, #2
 8001e2a:	17d3      	asrs	r3, r2, #31
 8001e2c:	1ac9      	subs	r1, r1, r3
 8001e2e:	460b      	mov	r3, r1
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	1a5b      	subs	r3, r3, r1
 8001e34:	1ad1      	subs	r1, r2, r3
 8001e36:	4b72      	ldr	r3, [pc, #456]	; (8002000 <main+0x6a8>)
 8001e38:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e3c:	23ff      	movs	r3, #255	; 0xff
 8001e3e:	9301      	str	r3, [sp, #4]
 8001e40:	2301      	movs	r3, #1
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	4b6f      	ldr	r3, [pc, #444]	; (8002004 <main+0x6ac>)
 8001e46:	218c      	movs	r1, #140	; 0x8c
 8001e48:	2005      	movs	r0, #5
 8001e4a:	f003 fa07 	bl	800525c <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8001e4e:	4b68      	ldr	r3, [pc, #416]	; (8001ff0 <main+0x698>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	f103 010a 	add.w	r1, r3, #10
 8001e56:	4b6c      	ldr	r3, [pc, #432]	; (8002008 <main+0x6b0>)
 8001e58:	fb83 2301 	smull	r2, r3, r3, r1
 8001e5c:	105a      	asrs	r2, r3, #1
 8001e5e:	17cb      	asrs	r3, r1, #31
 8001e60:	1ad2      	subs	r2, r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	1aca      	subs	r2, r1, r3
 8001e6c:	4b67      	ldr	r3, [pc, #412]	; (800200c <main+0x6b4>)
 8001e6e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e72:	2300      	movs	r3, #0
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2301      	movs	r3, #1
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	4b62      	ldr	r3, [pc, #392]	; (8002004 <main+0x6ac>)
 8001e7c:	218c      	movs	r1, #140	; 0x8c
 8001e7e:	2096      	movs	r0, #150	; 0x96
 8001e80:	f003 f9ec 	bl	800525c <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <main+0x698>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f103 010b 	add.w	r1, r3, #11
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <main+0x6b0>)
 8001e8e:	fb83 2301 	smull	r2, r3, r3, r1
 8001e92:	105a      	asrs	r2, r3, #1
 8001e94:	17cb      	asrs	r3, r1, #31
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	1aca      	subs	r2, r1, r3
 8001ea2:	4b5a      	ldr	r3, [pc, #360]	; (800200c <main+0x6b4>)
 8001ea4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4b54      	ldr	r3, [pc, #336]	; (8002004 <main+0x6ac>)
 8001eb4:	218c      	movs	r1, #140	; 0x8c
 8001eb6:	2096      	movs	r0, #150	; 0x96
 8001eb8:	f003 f9d0 	bl	800525c <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8001ebc:	4b54      	ldr	r3, [pc, #336]	; (8002010 <main+0x6b8>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b54      	ldr	r3, [pc, #336]	; (8002014 <main+0x6bc>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <main+0x6c0>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4951      	ldr	r1, [pc, #324]	; (800201c <main+0x6c4>)
 8001ed6:	f018 ff2f 	bl	801ad38 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8001eda:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001ede:	2300      	movs	r3, #0
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <main+0x6ac>)
 8001ee8:	218c      	movs	r1, #140	; 0x8c
 8001eea:	20fa      	movs	r0, #250	; 0xfa
 8001eec:	f003 f9b6 	bl	800525c <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8001ef0:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <main+0x694>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	; (8001ff0 <main+0x698>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	4619      	mov	r1, r3
 8001efc:	4b3d      	ldr	r3, [pc, #244]	; (8001ff4 <main+0x69c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	460b      	mov	r3, r1
 8001f08:	4944      	ldr	r1, [pc, #272]	; (800201c <main+0x6c4>)
 8001f0a:	f018 ff15 	bl	801ad38 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8001f0e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8001f12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f16:	9301      	str	r3, [sp, #4]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	4b39      	ldr	r3, [pc, #228]	; (8002004 <main+0x6ac>)
 8001f1e:	218c      	movs	r1, #140	; 0x8c
 8001f20:	20fa      	movs	r0, #250	; 0xfa
 8001f22:	f003 f99b 	bl	800525c <LCD_Font>

						rtcDayLast = rtcDay;
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <main+0x690>)
 8001f28:	781a      	ldrb	r2, [r3, #0]
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <main+0x6a0>)
 8001f2c:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <main+0x694>)
 8001f30:	781a      	ldrb	r2, [r3, #0]
 8001f32:	4b37      	ldr	r3, [pc, #220]	; (8002010 <main+0x6b8>)
 8001f34:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <main+0x698>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <main+0x6bc>)
 8001f3c:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8001f3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ff4 <main+0x69c>)
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	4b35      	ldr	r3, [pc, #212]	; (8002018 <main+0x6c0>)
 8001f44:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <main+0x67c>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <main+0x68c>)
 8001f4c:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <main+0x678>)
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <main+0x674>)
 8001f54:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5a:	f7fe fa45 	bl	80003e8 <BME280_getTemperature>
 8001f5e:	ee10 3a10 	vmov	r3, s0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f017 fab0 	bl	80194c8 <__aeabi_f2d>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	492c      	ldr	r1, [pc, #176]	; (8002020 <main+0x6c8>)
 8001f6e:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8001f72:	f04f 30ff 	mov.w	r0, #4294967295
 8001f76:	f7fe faaf 	bl	80004d8 <BME280_getHumidity>
 8001f7a:	ee10 3a10 	vmov	r3, s0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f017 faa2 	bl	80194c8 <__aeabi_f2d>
 8001f84:	4602      	mov	r2, r0
 8001f86:	460b      	mov	r3, r1
 8001f88:	4926      	ldr	r1, [pc, #152]	; (8002024 <main+0x6cc>)
 8001f8a:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8001f8e:	f7fe fb43 	bl	8000618 <BME280_getPressure>
 8001f92:	eef0 7a40 	vmov.f32	s15, s0
 8001f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9a:	ee17 3a90 	vmov	r3, s15
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <main+0x6d0>)
 8001fa2:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <main+0x6d0>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001fac:	f240 872b 	bls.w	8002e06 <main+0x14ae>
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <main+0x6d0>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	f240 424b 	movw	r2, #1099	; 0x44b
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	f200 8724 	bhi.w	8002e06 <main+0x14ae>
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <main+0x6c8>)
 8001fc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc4:	e032      	b.n	800202c <main+0x6d4>
 8001fc6:	bf00      	nop
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	20000001 	.word	0x20000001
 8001fd0:	2000056e 	.word	0x2000056e
 8001fd4:	2000056f 	.word	0x2000056f
 8001fd8:	080526ac 	.word	0x080526ac
 8001fdc:	08052668 	.word	0x08052668
 8001fe0:	00ffa500 	.word	0x00ffa500
 8001fe4:	20000002 	.word	0x20000002
 8001fe8:	20000570 	.word	0x20000570
 8001fec:	20000571 	.word	0x20000571
 8001ff0:	20000572 	.word	0x20000572
 8001ff4:	20000573 	.word	0x20000573
 8001ff8:	20000574 	.word	0x20000574
 8001ffc:	92492493 	.word	0x92492493
 8002000:	20000008 	.word	0x20000008
 8002004:	08029fd0 	.word	0x08029fd0
 8002008:	2aaaaaab 	.word	0x2aaaaaab
 800200c:	20000024 	.word	0x20000024
 8002010:	20000575 	.word	0x20000575
 8002014:	20000576 	.word	0x20000576
 8002018:	20000577 	.word	0x20000577
 800201c:	080526b4 	.word	0x080526b4
 8002020:	20000578 	.word	0x20000578
 8002024:	20000588 	.word	0x20000588
 8002028:	200005b8 	.word	0x200005b8
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b8a      	ldr	r3, [pc, #552]	; (800225c <main+0x904>)
 8002032:	f017 fd13 	bl	8019a5c <__aeabi_dcmplt>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 86e4 	beq.w	8002e06 <main+0x14ae>
 800203e:	4b88      	ldr	r3, [pc, #544]	; (8002260 <main+0x908>)
 8002040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b86      	ldr	r3, [pc, #536]	; (8002264 <main+0x90c>)
 800204a:	f017 fd25 	bl	8019a98 <__aeabi_dcmpgt>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 86d8 	beq.w	8002e06 <main+0x14ae>
 8002056:	4b84      	ldr	r3, [pc, #528]	; (8002268 <main+0x910>)
 8002058:	e9d3 0100 	ldrd	r0, r1, [r3]
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	f017 fd18 	bl	8019a98 <__aeabi_dcmpgt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 86cb 	beq.w	8002e06 <main+0x14ae>
 8002070:	4b7d      	ldr	r3, [pc, #500]	; (8002268 <main+0x910>)
 8002072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	4b7c      	ldr	r3, [pc, #496]	; (800226c <main+0x914>)
 800207c:	f017 fcee 	bl	8019a5c <__aeabi_dcmplt>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 86bf 	beq.w	8002e06 <main+0x14ae>

					if (temperature != temperatureLast) {
 8002088:	4b75      	ldr	r3, [pc, #468]	; (8002260 <main+0x908>)
 800208a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208e:	4b78      	ldr	r3, [pc, #480]	; (8002270 <main+0x918>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f017 fcd8 	bl	8019a48 <__aeabi_dcmpeq>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8120 	bne.w	80022e0 <main+0x988>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80020a0:	4b73      	ldr	r3, [pc, #460]	; (8002270 <main+0x918>)
 80020a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b72      	ldr	r3, [pc, #456]	; (8002274 <main+0x91c>)
 80020ac:	f017 fcea 	bl	8019a84 <__aeabi_dcmpge>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <main+0x78c>
 80020b6:	4b6e      	ldr	r3, [pc, #440]	; (8002270 <main+0x918>)
 80020b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	f017 fcca 	bl	8019a5c <__aeabi_dcmplt>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01c      	beq.n	8002108 <main+0x7b0>
 80020ce:	4b68      	ldr	r3, [pc, #416]	; (8002270 <main+0x918>)
 80020d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b67      	ldr	r3, [pc, #412]	; (8002278 <main+0x920>)
 80020da:	f017 fcdd 	bl	8019a98 <__aeabi_dcmpgt>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d011      	beq.n	8002108 <main+0x7b0>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80020e4:	4b62      	ldr	r3, [pc, #392]	; (8002270 <main+0x918>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	4638      	mov	r0, r7
 80020ec:	4963      	ldr	r1, [pc, #396]	; (800227c <main+0x924>)
 80020ee:	f018 fe23 	bl	801ad38 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80020f2:	463a      	mov	r2, r7
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2301      	movs	r3, #1
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	4b60      	ldr	r3, [pc, #384]	; (8002280 <main+0x928>)
 80020fe:	21bb      	movs	r1, #187	; 0xbb
 8002100:	2001      	movs	r0, #1
 8002102:	f003 f8ab 	bl	800525c <LCD_Font>
 8002106:	e04c      	b.n	80021a2 <main+0x84a>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <main+0x918>)
 800210a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b58      	ldr	r3, [pc, #352]	; (8002274 <main+0x91c>)
 8002114:	f017 fca2 	bl	8019a5c <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01d      	beq.n	800215a <main+0x802>
 800211e:	4b54      	ldr	r3, [pc, #336]	; (8002270 <main+0x918>)
 8002120:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	f017 fcb4 	bl	8019a98 <__aeabi_dcmpgt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d011      	beq.n	800215a <main+0x802>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002136:	4b4e      	ldr	r3, [pc, #312]	; (8002270 <main+0x918>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	4638      	mov	r0, r7
 800213e:	494f      	ldr	r1, [pc, #316]	; (800227c <main+0x924>)
 8002140:	f018 fdfa 	bl	801ad38 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002144:	463a      	mov	r2, r7
 8002146:	2300      	movs	r3, #0
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2301      	movs	r3, #1
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <main+0x928>)
 8002150:	21bb      	movs	r1, #187	; 0xbb
 8002152:	201b      	movs	r0, #27
 8002154:	f003 f882 	bl	800525c <LCD_Font>
 8002158:	e023      	b.n	80021a2 <main+0x84a>
						}
						else if (temperatureLast <= -10) {
 800215a:	4b45      	ldr	r3, [pc, #276]	; (8002270 <main+0x918>)
 800215c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	4b44      	ldr	r3, [pc, #272]	; (8002278 <main+0x920>)
 8002166:	f017 fc83 	bl	8019a70 <__aeabi_dcmple>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d018      	beq.n	80021a2 <main+0x84a>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 8002170:	4b3f      	ldr	r3, [pc, #252]	; (8002270 <main+0x918>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f017 fcad 	bl	8019ad8 <__aeabi_d2iz>
 800217e:	4603      	mov	r3, r0
 8002180:	b25b      	sxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	463b      	mov	r3, r7
 8002186:	493f      	ldr	r1, [pc, #252]	; (8002284 <main+0x92c>)
 8002188:	4618      	mov	r0, r3
 800218a:	f018 fdd5 	bl	801ad38 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800218e:	463a      	mov	r2, r7
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2301      	movs	r3, #1
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	4b39      	ldr	r3, [pc, #228]	; (8002280 <main+0x928>)
 800219a:	21bb      	movs	r1, #187	; 0xbb
 800219c:	2001      	movs	r0, #1
 800219e:	f003 f85d 	bl	800525c <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80021a2:	4b2f      	ldr	r3, [pc, #188]	; (8002260 <main+0x908>)
 80021a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <main+0x91c>)
 80021ae:	f017 fc69 	bl	8019a84 <__aeabi_dcmpge>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d116      	bne.n	80021e6 <main+0x88e>
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <main+0x908>)
 80021ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	f017 fc49 	bl	8019a5c <__aeabi_dcmplt>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01c      	beq.n	800220a <main+0x8b2>
 80021d0:	4b23      	ldr	r3, [pc, #140]	; (8002260 <main+0x908>)
 80021d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	4b27      	ldr	r3, [pc, #156]	; (8002278 <main+0x920>)
 80021dc:	f017 fc5c 	bl	8019a98 <__aeabi_dcmpgt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d011      	beq.n	800220a <main+0x8b2>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80021e6:	4b1e      	ldr	r3, [pc, #120]	; (8002260 <main+0x908>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	4638      	mov	r0, r7
 80021ee:	4923      	ldr	r1, [pc, #140]	; (800227c <main+0x924>)
 80021f0:	f018 fda2 	bl	801ad38 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80021f4:	463a      	mov	r2, r7
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <main+0x930>)
 80021f8:	9301      	str	r3, [sp, #4]
 80021fa:	2301      	movs	r3, #1
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	4b20      	ldr	r3, [pc, #128]	; (8002280 <main+0x928>)
 8002200:	21bb      	movs	r1, #187	; 0xbb
 8002202:	2001      	movs	r0, #1
 8002204:	f003 f82a 	bl	800525c <LCD_Font>
 8002208:	e064      	b.n	80022d4 <main+0x97c>
						}
						else if (temperature < 10 && temperature > 0) {
 800220a:	4b15      	ldr	r3, [pc, #84]	; (8002260 <main+0x908>)
 800220c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b17      	ldr	r3, [pc, #92]	; (8002274 <main+0x91c>)
 8002216:	f017 fc21 	bl	8019a5c <__aeabi_dcmplt>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d035      	beq.n	800228c <main+0x934>
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <main+0x908>)
 8002222:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	f04f 0300 	mov.w	r3, #0
 800222e:	f017 fc33 	bl	8019a98 <__aeabi_dcmpgt>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d029      	beq.n	800228c <main+0x934>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <main+0x908>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	4638      	mov	r0, r7
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <main+0x924>)
 8002242:	f018 fd79 	bl	801ad38 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002246:	463a      	mov	r2, r7
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <main+0x930>)
 800224a:	9301      	str	r3, [sp, #4]
 800224c:	2301      	movs	r3, #1
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <main+0x928>)
 8002252:	21bb      	movs	r1, #187	; 0xbb
 8002254:	201b      	movs	r0, #27
 8002256:	f003 f801 	bl	800525c <LCD_Font>
 800225a:	e03b      	b.n	80022d4 <main+0x97c>
 800225c:	40554000 	.word	0x40554000
 8002260:	20000578 	.word	0x20000578
 8002264:	c0440000 	.word	0xc0440000
 8002268:	20000588 	.word	0x20000588
 800226c:	40590000 	.word	0x40590000
 8002270:	20000580 	.word	0x20000580
 8002274:	40240000 	.word	0x40240000
 8002278:	c0240000 	.word	0xc0240000
 800227c:	080526c4 	.word	0x080526c4
 8002280:	08029fd0 	.word	0x08029fd0
 8002284:	080526cc 	.word	0x080526cc
 8002288:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 800228c:	4bb5      	ldr	r3, [pc, #724]	; (8002564 <main+0xc0c>)
 800228e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	4bb4      	ldr	r3, [pc, #720]	; (8002568 <main+0xc10>)
 8002298:	f017 fbea 	bl	8019a70 <__aeabi_dcmple>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d018      	beq.n	80022d4 <main+0x97c>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80022a2:	4bb0      	ldr	r3, [pc, #704]	; (8002564 <main+0xc0c>)
 80022a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f017 fc14 	bl	8019ad8 <__aeabi_d2iz>
 80022b0:	4603      	mov	r3, r0
 80022b2:	b25b      	sxtb	r3, r3
 80022b4:	461a      	mov	r2, r3
 80022b6:	463b      	mov	r3, r7
 80022b8:	49ac      	ldr	r1, [pc, #688]	; (800256c <main+0xc14>)
 80022ba:	4618      	mov	r0, r3
 80022bc:	f018 fd3c 	bl	801ad38 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80022c0:	463a      	mov	r2, r7
 80022c2:	4bab      	ldr	r3, [pc, #684]	; (8002570 <main+0xc18>)
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	2301      	movs	r3, #1
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	4baa      	ldr	r3, [pc, #680]	; (8002574 <main+0xc1c>)
 80022cc:	21bb      	movs	r1, #187	; 0xbb
 80022ce:	2001      	movs	r0, #1
 80022d0:	f002 ffc4 	bl	800525c <LCD_Font>
						}

						temperatureLast = temperature;
 80022d4:	4ba3      	ldr	r3, [pc, #652]	; (8002564 <main+0xc0c>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	49a7      	ldr	r1, [pc, #668]	; (8002578 <main+0xc20>)
 80022dc:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80022e0:	4ba6      	ldr	r3, [pc, #664]	; (800257c <main+0xc24>)
 80022e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e6:	4ba6      	ldr	r3, [pc, #664]	; (8002580 <main+0xc28>)
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f017 fbac 	bl	8019a48 <__aeabi_dcmpeq>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d15b      	bne.n	80023ae <main+0xa56>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80022f6:	4ba2      	ldr	r3, [pc, #648]	; (8002580 <main+0xc28>)
 80022f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fc:	f107 0008 	add.w	r0, r7, #8
 8002300:	49a0      	ldr	r1, [pc, #640]	; (8002584 <main+0xc2c>)
 8002302:	f018 fd19 	bl	801ad38 <siprintf>
						if (humidityLast >= 10)
 8002306:	4b9e      	ldr	r3, [pc, #632]	; (8002580 <main+0xc28>)
 8002308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b9d      	ldr	r3, [pc, #628]	; (8002588 <main+0xc30>)
 8002312:	f017 fbb7 	bl	8019a84 <__aeabi_dcmpge>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <main+0x9dc>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800231c:	f107 0208 	add.w	r2, r7, #8
 8002320:	2300      	movs	r3, #0
 8002322:	9301      	str	r3, [sp, #4]
 8002324:	2301      	movs	r3, #1
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	4b92      	ldr	r3, [pc, #584]	; (8002574 <main+0xc1c>)
 800232a:	21bb      	movs	r1, #187	; 0xbb
 800232c:	20a0      	movs	r0, #160	; 0xa0
 800232e:	f002 ff95 	bl	800525c <LCD_Font>
 8002332:	e00a      	b.n	800234a <main+0x9f2>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002334:	f107 0208 	add.w	r2, r7, #8
 8002338:	2300      	movs	r3, #0
 800233a:	9301      	str	r3, [sp, #4]
 800233c:	2301      	movs	r3, #1
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	4b8c      	ldr	r3, [pc, #560]	; (8002574 <main+0xc1c>)
 8002342:	21bb      	movs	r1, #187	; 0xbb
 8002344:	20ba      	movs	r0, #186	; 0xba
 8002346:	f002 ff89 	bl	800525c <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800234a:	4b8c      	ldr	r3, [pc, #560]	; (800257c <main+0xc24>)
 800234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002350:	f107 0008 	add.w	r0, r7, #8
 8002354:	498b      	ldr	r1, [pc, #556]	; (8002584 <main+0xc2c>)
 8002356:	f018 fcef 	bl	801ad38 <siprintf>
						if (humidity >= 10)
 800235a:	4b88      	ldr	r3, [pc, #544]	; (800257c <main+0xc24>)
 800235c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002360:	f04f 0200 	mov.w	r2, #0
 8002364:	4b88      	ldr	r3, [pc, #544]	; (8002588 <main+0xc30>)
 8002366:	f017 fb8d 	bl	8019a84 <__aeabi_dcmpge>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00c      	beq.n	800238a <main+0xa32>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002370:	f107 0208 	add.w	r2, r7, #8
 8002374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2301      	movs	r3, #1
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	4b7d      	ldr	r3, [pc, #500]	; (8002574 <main+0xc1c>)
 8002380:	21bb      	movs	r1, #187	; 0xbb
 8002382:	20a0      	movs	r0, #160	; 0xa0
 8002384:	f002 ff6a 	bl	800525c <LCD_Font>
 8002388:	e00b      	b.n	80023a2 <main+0xa4a>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800238a:	f107 0208 	add.w	r2, r7, #8
 800238e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2301      	movs	r3, #1
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4b76      	ldr	r3, [pc, #472]	; (8002574 <main+0xc1c>)
 800239a:	21bb      	movs	r1, #187	; 0xbb
 800239c:	20ba      	movs	r0, #186	; 0xba
 800239e:	f002 ff5d 	bl	800525c <LCD_Font>

						humidityLast = humidity;
 80023a2:	4b76      	ldr	r3, [pc, #472]	; (800257c <main+0xc24>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	4975      	ldr	r1, [pc, #468]	; (8002580 <main+0xc28>)
 80023aa:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <main+0xc34>)
 80023b0:	881a      	ldrh	r2, [r3, #0]
 80023b2:	4b77      	ldr	r3, [pc, #476]	; (8002590 <main+0xc38>)
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d065      	beq.n	8002486 <main+0xb2e>

						char weatherPrintP[11];

						if (pressureLast >= 1000) {
 80023ba:	4b74      	ldr	r3, [pc, #464]	; (800258c <main+0xc34>)
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023c2:	d315      	bcc.n	80023f0 <main+0xa98>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 80023c4:	4b71      	ldr	r3, [pc, #452]	; (800258c <main+0xc34>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	461a      	mov	r2, r3
 80023ca:	f107 0310 	add.w	r3, r7, #16
 80023ce:	4971      	ldr	r1, [pc, #452]	; (8002594 <main+0xc3c>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f018 fcb1 	bl	801ad38 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023d6:	f107 0210 	add.w	r2, r7, #16
 80023da:	2300      	movs	r3, #0
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2301      	movs	r3, #1
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	4b64      	ldr	r3, [pc, #400]	; (8002574 <main+0xc1c>)
 80023e4:	21bb      	movs	r1, #187	; 0xbb
 80023e6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80023ea:	f002 ff37 	bl	800525c <LCD_Font>
 80023ee:	e014      	b.n	800241a <main+0xac2>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 80023f0:	4b66      	ldr	r3, [pc, #408]	; (800258c <main+0xc34>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	461a      	mov	r2, r3
 80023f6:	f107 0310 	add.w	r3, r7, #16
 80023fa:	4967      	ldr	r1, [pc, #412]	; (8002598 <main+0xc40>)
 80023fc:	4618      	mov	r0, r3
 80023fe:	f018 fc9b 	bl	801ad38 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002402:	f107 0210 	add.w	r2, r7, #16
 8002406:	2300      	movs	r3, #0
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	2301      	movs	r3, #1
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4b59      	ldr	r3, [pc, #356]	; (8002574 <main+0xc1c>)
 8002410:	21bb      	movs	r1, #187	; 0xbb
 8002412:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002416:	f002 ff21 	bl	800525c <LCD_Font>
						}

						pressureLast = pressure;
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <main+0xc38>)
 800241c:	881a      	ldrh	r2, [r3, #0]
 800241e:	4b5b      	ldr	r3, [pc, #364]	; (800258c <main+0xc34>)
 8002420:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) {
 8002422:	4b5a      	ldr	r3, [pc, #360]	; (800258c <main+0xc34>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800242a:	d316      	bcc.n	800245a <main+0xb02>
							sprintf(weatherPrintP, "%02dP", pressureLast);
 800242c:	4b57      	ldr	r3, [pc, #348]	; (800258c <main+0xc34>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	f107 0310 	add.w	r3, r7, #16
 8002436:	4957      	ldr	r1, [pc, #348]	; (8002594 <main+0xc3c>)
 8002438:	4618      	mov	r0, r3
 800243a:	f018 fc7d 	bl	801ad38 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800243e:	f107 0210 	add.w	r2, r7, #16
 8002442:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	2301      	movs	r3, #1
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	4b49      	ldr	r3, [pc, #292]	; (8002574 <main+0xc1c>)
 800244e:	21bb      	movs	r1, #187	; 0xbb
 8002450:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002454:	f002 ff02 	bl	800525c <LCD_Font>
 8002458:	e015      	b.n	8002486 <main+0xb2e>
						}
						else {
							sprintf(weatherPrintP, " %02dP", pressureLast);
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <main+0xc34>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	461a      	mov	r2, r3
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	494c      	ldr	r1, [pc, #304]	; (8002598 <main+0xc40>)
 8002466:	4618      	mov	r0, r3
 8002468:	f018 fc66 	bl	801ad38 <siprintf>
							LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800246c:	f107 0210 	add.w	r2, r7, #16
 8002470:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002474:	9301      	str	r3, [sp, #4]
 8002476:	2301      	movs	r3, #1
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4b3e      	ldr	r3, [pc, #248]	; (8002574 <main+0xc1c>)
 800247c:	21bb      	movs	r1, #187	; 0xbb
 800247e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002482:	f002 feeb 	bl	800525c <LCD_Font>
						}
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002486:	2000      	movs	r0, #0
 8002488:	f7fd ff02 	bl	8000290 <AT24XX_Read>
 800248c:	4603      	mov	r3, r0
 800248e:	461a      	mov	r2, r3
 8002490:	4b42      	ldr	r3, [pc, #264]	; (800259c <main+0xc44>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	f000 81dd 	beq.w	8002854 <main+0xefc>

						AT24XX_Update(0, rtcHrs);
 800249a:	4b40      	ldr	r3, [pc, #256]	; (800259c <main+0xc44>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	4619      	mov	r1, r3
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fd ff1f 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80024a6:	2300      	movs	r3, #0
 80024a8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 80024ac:	e027      	b.n	80024fe <main+0xba6>
 80024ae:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80024b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd fee7 	bl	8000290 <AT24XX_Read>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461c      	mov	r4, r3
 80024c6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd fedb 	bl	8000290 <AT24XX_Read>
 80024da:	4603      	mov	r3, r0
 80024dc:	4619      	mov	r1, r3
 80024de:	4620      	mov	r0, r4
 80024e0:	f7ff f9fc 	bl	80018dc <byteS>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461a      	mov	r2, r3
 80024e8:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80024ec:	b211      	sxth	r1, r2
 80024ee:	4a2c      	ldr	r2, [pc, #176]	; (80025a0 <main+0xc48>)
 80024f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024f4:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 80024f8:	3301      	adds	r3, #1
 80024fa:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 80024fe:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
 8002502:	2b9a      	cmp	r3, #154	; 0x9a
 8002504:	d9d3      	bls.n	80024ae <main+0xb56>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8002506:	239a      	movs	r3, #154	; 0x9a
 8002508:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800250c:	e00f      	b.n	800252e <main+0xbd6>
 800250e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002512:	1e5a      	subs	r2, r3, #1
 8002514:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002518:	4921      	ldr	r1, [pc, #132]	; (80025a0 <main+0xc48>)
 800251a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800251e:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <main+0xc48>)
 8002520:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002524:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002528:	3b01      	subs	r3, #1
 800252a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800252e:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1eb      	bne.n	800250e <main+0xbb6>
						hT[0] = (uint16_t) (temperature * 10);
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <main+0xc0c>)
 8002538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <main+0xc30>)
 8002542:	f017 f819 	bl	8019578 <__aeabi_dmul>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f017 faeb 	bl	8019b28 <__aeabi_d2uiz>
 8002552:	4603      	mov	r3, r0
 8002554:	b29b      	uxth	r3, r3
 8002556:	b21a      	sxth	r2, r3
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <main+0xc48>)
 800255a:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 800255c:	2300      	movs	r3, #0
 800255e:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8002562:	e04e      	b.n	8002602 <main+0xcaa>
 8002564:	20000578 	.word	0x20000578
 8002568:	c0240000 	.word	0xc0240000
 800256c:	080526cc 	.word	0x080526cc
 8002570:	00ffa500 	.word	0x00ffa500
 8002574:	08029fd0 	.word	0x08029fd0
 8002578:	20000580 	.word	0x20000580
 800257c:	20000588 	.word	0x20000588
 8002580:	20000590 	.word	0x20000590
 8002584:	080526d4 	.word	0x080526d4
 8002588:	40240000 	.word	0x40240000
 800258c:	200005ba 	.word	0x200005ba
 8002590:	200005b8 	.word	0x200005b8
 8002594:	080526dc 	.word	0x080526dc
 8002598:	080526e4 	.word	0x080526e4
 800259c:	2000056f 	.word	0x2000056f
 80025a0:	200005bc 	.word	0x200005bc
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80025a4:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80025a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	b29c      	uxth	r4, r3
 80025b2:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80025b6:	4a86      	ldr	r2, [pc, #536]	; (80027d0 <main+0xe78>)
 80025b8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff f970 	bl	80018a4 <byteL>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4619      	mov	r1, r3
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7fd fe8b 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80025ce:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80025da:	b29c      	uxth	r4, r3
 80025dc:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80025e0:	4a7b      	ldr	r2, [pc, #492]	; (80027d0 <main+0xe78>)
 80025e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff f968 	bl	80018be <byteH>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4619      	mov	r1, r3
 80025f2:	4620      	mov	r0, r4
 80025f4:	f7fd fe76 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80025f8:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 80025fc:	3301      	adds	r3, #1
 80025fe:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8002602:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
 8002606:	2b9a      	cmp	r3, #154	; 0x9a
 8002608:	d9cc      	bls.n	80025a4 <main+0xc4c>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800260a:	2300      	movs	r3, #0
 800260c:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002610:	e027      	b.n	8002662 <main+0xd0a>
 8002612:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002616:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800261a:	b29b      	uxth	r3, r3
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fe35 	bl	8000290 <AT24XX_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	461c      	mov	r4, r3
 800262a:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	b29b      	uxth	r3, r3
 8002632:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7fd fe29 	bl	8000290 <AT24XX_Read>
 800263e:	4603      	mov	r3, r0
 8002640:	4619      	mov	r1, r3
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff f94a 	bl	80018dc <byteS>
 8002648:	4603      	mov	r3, r0
 800264a:	461a      	mov	r2, r3
 800264c:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002650:	b211      	sxth	r1, r2
 8002652:	4a60      	ldr	r2, [pc, #384]	; (80027d4 <main+0xe7c>)
 8002654:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002658:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 800265c:	3301      	adds	r3, #1
 800265e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8002662:	f8b7 30c2 	ldrh.w	r3, [r7, #194]	; 0xc2
 8002666:	2b9a      	cmp	r3, #154	; 0x9a
 8002668:	d9d3      	bls.n	8002612 <main+0xcba>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 800266a:	239a      	movs	r3, #154	; 0x9a
 800266c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8002670:	e00f      	b.n	8002692 <main+0xd3a>
 8002672:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002676:	1e5a      	subs	r2, r3, #1
 8002678:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800267c:	4955      	ldr	r1, [pc, #340]	; (80027d4 <main+0xe7c>)
 800267e:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8002682:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <main+0xe7c>)
 8002684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002688:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 800268c:	3b01      	subs	r3, #1
 800268e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8002692:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1eb      	bne.n	8002672 <main+0xd1a>
						hH[0] = (uint16_t) (humidity * 10);
 800269a:	4b4f      	ldr	r3, [pc, #316]	; (80027d8 <main+0xe80>)
 800269c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b4d      	ldr	r3, [pc, #308]	; (80027dc <main+0xe84>)
 80026a6:	f016 ff67 	bl	8019578 <__aeabi_dmul>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f017 fa39 	bl	8019b28 <__aeabi_d2uiz>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b21a      	sxth	r2, r3
 80026bc:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <main+0xe7c>)
 80026be:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80026c6:	e02e      	b.n	8002726 <main+0xdce>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80026c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026cc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	b29c      	uxth	r4, r3
 80026d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026da:	4a3e      	ldr	r2, [pc, #248]	; (80027d4 <main+0xe7c>)
 80026dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f8de 	bl	80018a4 <byteL>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4619      	mov	r1, r3
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7fd fdf9 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80026f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 80026fe:	b29c      	uxth	r4, r3
 8002700:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002704:	4a33      	ldr	r2, [pc, #204]	; (80027d4 <main+0xe7c>)
 8002706:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff f8d6 	bl	80018be <byteH>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f7fd fde4 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800271c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002720:	3301      	adds	r3, #1
 8002722:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8002726:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800272a:	2b9a      	cmp	r3, #154	; 0x9a
 800272c:	d9cc      	bls.n	80026c8 <main+0xd70>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 800272e:	2300      	movs	r3, #0
 8002730:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8002734:	e027      	b.n	8002786 <main+0xe2e>
 8002736:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800273a:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 800273e:	b29b      	uxth	r3, r3
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fda3 	bl	8000290 <AT24XX_Read>
 800274a:	4603      	mov	r3, r0
 800274c:	461c      	mov	r4, r3
 800274e:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	b29b      	uxth	r3, r3
 8002756:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800275a:	b29b      	uxth	r3, r3
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fd97 	bl	8000290 <AT24XX_Read>
 8002762:	4603      	mov	r3, r0
 8002764:	4619      	mov	r1, r3
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff f8b8 	bl	80018dc <byteS>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002774:	b211      	sxth	r1, r2
 8002776:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <main+0xe88>)
 8002778:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800277c:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8002780:	3301      	adds	r3, #1
 8002782:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8002786:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 800278a:	2b9a      	cmp	r3, #154	; 0x9a
 800278c:	d9d3      	bls.n	8002736 <main+0xdde>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 800278e:	239a      	movs	r3, #154	; 0x9a
 8002790:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8002794:	e00f      	b.n	80027b6 <main+0xe5e>
 8002796:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800279a:	1e5a      	subs	r2, r3, #1
 800279c:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80027a0:	490f      	ldr	r1, [pc, #60]	; (80027e0 <main+0xe88>)
 80027a2:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	; (80027e0 <main+0xe88>)
 80027a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80027ac:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80027b0:	3b01      	subs	r3, #1
 80027b2:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80027b6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1eb      	bne.n	8002796 <main+0xe3e>
						hP[0] = (uint16_t)pressure;
 80027be:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <main+0xe8c>)
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <main+0xe88>)
 80027c6:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80027ce:	e03a      	b.n	8002846 <main+0xeee>
 80027d0:	200005bc 	.word	0x200005bc
 80027d4:	200006f4 	.word	0x200006f4
 80027d8:	20000588 	.word	0x20000588
 80027dc:	40240000 	.word	0x40240000
 80027e0:	2000082c 	.word	0x2000082c
 80027e4:	200005b8 	.word	0x200005b8
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80027e8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80027ec:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	b29c      	uxth	r4, r3
 80027f6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80027fa:	4abc      	ldr	r2, [pc, #752]	; (8002aec <main+0x1194>)
 80027fc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff f84e 	bl	80018a4 <byteL>
 8002808:	4603      	mov	r3, r0
 800280a:	4619      	mov	r1, r3
 800280c:	4620      	mov	r0, r4
 800280e:	f7fd fd69 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002812:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	b29b      	uxth	r3, r3
 800281a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 800281e:	b29c      	uxth	r4, r3
 8002820:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002824:	4ab1      	ldr	r2, [pc, #708]	; (8002aec <main+0x1194>)
 8002826:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff f846 	bl	80018be <byteH>
 8002832:	4603      	mov	r3, r0
 8002834:	4619      	mov	r1, r3
 8002836:	4620      	mov	r0, r4
 8002838:	f7fd fd54 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800283c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8002840:	3301      	adds	r3, #1
 8002842:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8002846:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 800284a:	2b9a      	cmp	r3, #154	; 0x9a
 800284c:	d9cc      	bls.n	80027e8 <main+0xe90>
						}

						viewGraphs = 0;
 800284e:	4ba8      	ldr	r3, [pc, #672]	; (8002af0 <main+0x1198>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002854:	23ff      	movs	r3, #255	; 0xff
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2301      	movs	r3, #1
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2381      	movs	r3, #129	; 0x81
 800285e:	229d      	movs	r2, #157	; 0x9d
 8002860:	21bd      	movs	r1, #189	; 0xbd
 8002862:	2002      	movs	r0, #2
 8002864:	f001 fd46 	bl	80042f4 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002868:	4ba2      	ldr	r3, [pc, #648]	; (8002af4 <main+0x119c>)
 800286a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4ba1      	ldr	r3, [pc, #644]	; (8002af8 <main+0x11a0>)
 8002874:	f016 fe80 	bl	8019578 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f017 f92a 	bl	8019ad8 <__aeabi_d2iz>
 8002884:	4603      	mov	r3, r0
 8002886:	b21b      	sxth	r3, r3
 8002888:	b298      	uxth	r0, r3
 800288a:	2380      	movs	r3, #128	; 0x80
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002894:	21e2      	movs	r1, #226	; 0xe2
 8002896:	f7fe ffd9 	bl	800184c <map>
 800289a:	ec53 2b10 	vmov	r2, r3, d0
 800289e:	4610      	mov	r0, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f017 f919 	bl	8019ad8 <__aeabi_d2iz>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap < 0) valMap = 0;
 80028ac:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da02      	bge.n	80028ba <main+0xf62>
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap > 127) valMap = 127;
 80028ba:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80028be:	2b7f      	cmp	r3, #127	; 0x7f
 80028c0:	dd02      	ble.n	80028c8 <main+0xf70>
 80028c2:	237f      	movs	r3, #127	; 0x7f
 80028c4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80028c8:	2300      	movs	r3, #0
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	2301      	movs	r3, #1
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f240 133d 	movw	r3, #317	; 0x13d
 80028d4:	229e      	movs	r2, #158	; 0x9e
 80028d6:	21bf      	movs	r1, #191	; 0xbf
 80028d8:	209e      	movs	r0, #158	; 0x9e
 80028da:	f001 fba3 	bl	8004024 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028de:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d023      	beq.n	800292e <main+0xfd6>
 80028e6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80028ea:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028ee:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028f0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80028f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002902:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002906:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 800290a:	b2db      	uxtb	r3, r3
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	b2db      	uxtb	r3, r3
 8002910:	461a      	mov	r2, r3
 8002912:	2100      	movs	r1, #0
 8002914:	f001 fa65 	bl	8003de2 <RGB>
 8002918:	4603      	mov	r3, r0
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	2301      	movs	r3, #1
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	f240 133d 	movw	r3, #317	; 0x13d
 8002924:	229e      	movs	r2, #158	; 0x9e
 8002926:	4621      	mov	r1, r4
 8002928:	209e      	movs	r0, #158	; 0x9e
 800292a:	f001 fb7b 	bl	8004024 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 800292e:	23ff      	movs	r3, #255	; 0xff
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2301      	movs	r3, #1
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2381      	movs	r3, #129	; 0x81
 8002938:	229d      	movs	r2, #157	; 0x9d
 800293a:	21bd      	movs	r1, #189	; 0xbd
 800293c:	20a1      	movs	r0, #161	; 0xa1
 800293e:	f001 fcd9 	bl	80042f4 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002942:	4b6e      	ldr	r3, [pc, #440]	; (8002afc <main+0x11a4>)
 8002944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	4b6a      	ldr	r3, [pc, #424]	; (8002af8 <main+0x11a0>)
 800294e:	f016 fe13 	bl	8019578 <__aeabi_dmul>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4610      	mov	r0, r2
 8002958:	4619      	mov	r1, r3
 800295a:	f017 f8bd 	bl	8019ad8 <__aeabi_d2iz>
 800295e:	4603      	mov	r3, r0
 8002960:	b21b      	sxth	r3, r3
 8002962:	b298      	uxth	r0, r3
 8002964:	2380      	movs	r3, #128	; 0x80
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2300      	movs	r3, #0
 800296a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800296e:	2150      	movs	r1, #80	; 0x50
 8002970:	f7fe ff6c 	bl	800184c <map>
 8002974:	ec53 2b10 	vmov	r2, r3, d0
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	f017 f8ac 	bl	8019ad8 <__aeabi_d2iz>
 8002980:	4603      	mov	r3, r0
 8002982:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap < 0) valMap = 0;
 8002986:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 800298a:	2b00      	cmp	r3, #0
 800298c:	da02      	bge.n	8002994 <main+0x103c>
 800298e:	2300      	movs	r3, #0
 8002990:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap > 127) valMap = 127;
 8002994:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002998:	2b7f      	cmp	r3, #127	; 0x7f
 800299a:	dd02      	ble.n	80029a2 <main+0x104a>
 800299c:	237f      	movs	r3, #127	; 0x7f
 800299e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 80029a2:	2300      	movs	r3, #0
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	2301      	movs	r3, #1
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	f240 133d 	movw	r3, #317	; 0x13d
 80029ae:	f240 123d 	movw	r2, #317	; 0x13d
 80029b2:	21bf      	movs	r1, #191	; 0xbf
 80029b4:	f240 103d 	movw	r0, #317	; 0x13d
 80029b8:	f001 fb34 	bl	8004024 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029bc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d025      	beq.n	8002a10 <main+0x10b8>
 80029c4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80029c8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80029cc:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029ce:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80029d2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029e0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80029e4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	2100      	movs	r1, #0
 80029f2:	f001 f9f6 	bl	8003de2 <RGB>
 80029f6:	4603      	mov	r3, r0
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2301      	movs	r3, #1
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f240 133d 	movw	r3, #317	; 0x13d
 8002a02:	f240 123d 	movw	r2, #317	; 0x13d
 8002a06:	4621      	mov	r1, r4
 8002a08:	f240 103d 	movw	r0, #317	; 0x13d
 8002a0c:	f001 fb0a 	bl	8004024 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002a10:	23ff      	movs	r3, #255	; 0xff
 8002a12:	9301      	str	r3, [sp, #4]
 8002a14:	2301      	movs	r3, #1
 8002a16:	9300      	str	r3, [sp, #0]
 8002a18:	2381      	movs	r3, #129	; 0x81
 8002a1a:	229d      	movs	r2, #157	; 0x9d
 8002a1c:	21bd      	movs	r1, #189	; 0xbd
 8002a1e:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002a22:	f001 fc67 	bl	80042f4 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <main+0x11a8>)
 8002a28:	8818      	ldrh	r0, [r3, #0]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2300      	movs	r3, #0
 8002a30:	f240 4229 	movw	r2, #1065	; 0x429
 8002a34:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002a38:	f7fe ff08 	bl	800184c <map>
 8002a3c:	ec53 2b10 	vmov	r2, r3, d0
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f017 f848 	bl	8019ad8 <__aeabi_d2iz>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap < 0) valMap = 0;
 8002a4e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	da02      	bge.n	8002a5c <main+0x1104>
 8002a56:	2300      	movs	r3, #0
 8002a58:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					if (valMap > 127) valMap = 127;
 8002a5c:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002a60:	2b7f      	cmp	r3, #127	; 0x7f
 8002a62:	dd02      	ble.n	8002a6a <main+0x1112>
 8002a64:	237f      	movs	r3, #127	; 0x7f
 8002a66:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	9301      	str	r3, [sp, #4]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	f240 133d 	movw	r3, #317	; 0x13d
 8002a76:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a7a:	21bf      	movs	r1, #191	; 0xbf
 8002a7c:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002a80:	f001 fad0 	bl	8004024 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a84:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d025      	beq.n	8002ad8 <main+0x1180>
 8002a8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002a90:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a94:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a96:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002a9a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002aa8:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002aac:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	f001 f992 	bl	8003de2 <RGB>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	9301      	str	r3, [sp, #4]
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	f240 133d 	movw	r3, #317	; 0x13d
 8002aca:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002ace:	4621      	mov	r1, r4
 8002ad0:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002ad4:	f001 faa6 	bl	8004024 <LCD_Line>

					if (!viewGraphs) {
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <main+0x1198>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 8192 	bne.w	8002e06 <main+0x14ae>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8002ae8:	e07b      	b.n	8002be2 <main+0x128a>
 8002aea:	bf00      	nop
 8002aec:	2000082c 	.word	0x2000082c
 8002af0:	2000056c 	.word	0x2000056c
 8002af4:	20000578 	.word	0x20000578
 8002af8:	40240000 	.word	0x40240000
 8002afc:	20000588 	.word	0x20000588
 8002b00:	200005b8 	.word	0x200005b8
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002b04:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002b08:	4ab3      	ldr	r2, [pc, #716]	; (8002dd8 <main+0x1480>)
 8002b0a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b0e:	b298      	uxth	r0, r3
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	9300      	str	r3, [sp, #0]
 8002b14:	2300      	movs	r3, #0
 8002b16:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002b1a:	21e2      	movs	r1, #226	; 0xe2
 8002b1c:	f7fe fe96 	bl	800184c <map>
 8002b20:	ec53 2b10 	vmov	r2, r3, d0
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f016 ffd6 	bl	8019ad8 <__aeabi_d2iz>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap < 0) valMap = 0;
 8002b32:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da02      	bge.n	8002b40 <main+0x11e8>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap > 127) valMap = 127;
 8002b40:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002b44:	2b7f      	cmp	r3, #127	; 0x7f
 8002b46:	dd02      	ble.n	8002b4e <main+0x11f6>
 8002b48:	237f      	movs	r3, #127	; 0x7f
 8002b4a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002b4e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002b52:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b56:	b298      	uxth	r0, r3
 8002b58:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002b5c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	2300      	movs	r3, #0
 8002b64:	9301      	str	r3, [sp, #4]
 8002b66:	2301      	movs	r3, #1
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f240 133d 	movw	r3, #317	; 0x13d
 8002b6e:	21bf      	movs	r1, #191	; 0xbf
 8002b70:	f001 fa58 	bl	8004024 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b74:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d02d      	beq.n	8002bd8 <main+0x1280>
 8002b7c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002b80:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b84:	b29c      	uxth	r4, r3
 8002b86:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002b8a:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b8e:	b29d      	uxth	r5, r3
 8002b90:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002b94:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b98:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b9a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002b9e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002bac:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002bb0:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	f001 f910 	bl	8003de2 <RGB>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f240 133d 	movw	r3, #317	; 0x13d
 8002bce:	4632      	mov	r2, r6
 8002bd0:	4629      	mov	r1, r5
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f001 fa26 	bl	8004024 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002bd8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002bdc:	3301      	adds	r3, #1
 8002bde:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8002be2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8002be6:	2b9a      	cmp	r3, #154	; 0x9a
 8002be8:	d98c      	bls.n	8002b04 <main+0x11ac>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002bea:	2300      	movs	r3, #0
 8002bec:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8002bf0:	e06e      	b.n	8002cd0 <main+0x1378>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002bf2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002bf6:	4a79      	ldr	r2, [pc, #484]	; (8002ddc <main+0x1484>)
 8002bf8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002bfc:	b298      	uxth	r0, r3
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	2300      	movs	r3, #0
 8002c04:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002c08:	2150      	movs	r1, #80	; 0x50
 8002c0a:	f7fe fe1f 	bl	800184c <map>
 8002c0e:	ec53 2b10 	vmov	r2, r3, d0
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	f016 ff5f 	bl	8019ad8 <__aeabi_d2iz>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap < 0) valMap = 0;
 8002c20:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	da02      	bge.n	8002c2e <main+0x12d6>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap > 127) valMap = 127;
 8002c2e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002c32:	2b7f      	cmp	r3, #127	; 0x7f
 8002c34:	dd02      	ble.n	8002c3c <main+0x12e4>
 8002c36:	237f      	movs	r3, #127	; 0x7f
 8002c38:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002c3c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002c40:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c44:	b298      	uxth	r0, r3
 8002c46:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002c4a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	2300      	movs	r3, #0
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2301      	movs	r3, #1
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	f240 133d 	movw	r3, #317	; 0x13d
 8002c5c:	21bf      	movs	r1, #191	; 0xbf
 8002c5e:	f001 f9e1 	bl	8004024 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c62:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d02d      	beq.n	8002cc6 <main+0x136e>
 8002c6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002c6e:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c72:	b29c      	uxth	r4, r3
 8002c74:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002c78:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c7c:	b29d      	uxth	r5, r3
 8002c7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002c82:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c86:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c88:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002c8c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c9a:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002c9e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2100      	movs	r1, #0
 8002cac:	f001 f899 	bl	8003de2 <RGB>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f240 133d 	movw	r3, #317	; 0x13d
 8002cbc:	4632      	mov	r2, r6
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f001 f9af 	bl	8004024 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002cc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8002cd0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002cd4:	2b9a      	cmp	r3, #154	; 0x9a
 8002cd6:	d98c      	bls.n	8002bf2 <main+0x129a>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8002cde:	e073      	b.n	8002dc8 <main+0x1470>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002ce0:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	; (8002de0 <main+0x1488>)
 8002ce6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cea:	b298      	uxth	r0, r3
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f240 4229 	movw	r2, #1065	; 0x429
 8002cf6:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002cfa:	f7fe fda7 	bl	800184c <map>
 8002cfe:	ec53 2b10 	vmov	r2, r3, d0
 8002d02:	4610      	mov	r0, r2
 8002d04:	4619      	mov	r1, r3
 8002d06:	f016 fee7 	bl	8019ad8 <__aeabi_d2iz>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap < 0) valMap = 0;
 8002d10:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	da02      	bge.n	8002d1e <main+0x13c6>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							if (valMap > 127) valMap = 127;
 8002d1e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002d22:	2b7f      	cmp	r3, #127	; 0x7f
 8002d24:	dd02      	ble.n	8002d2c <main+0x13d4>
 8002d26:	237f      	movs	r3, #127	; 0x7f
 8002d28:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002d2c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002d30:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d34:	3301      	adds	r3, #1
 8002d36:	b298      	uxth	r0, r3
 8002d38:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002d3c:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d40:	3301      	adds	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	2300      	movs	r3, #0
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f240 133d 	movw	r3, #317	; 0x13d
 8002d50:	21bf      	movs	r1, #191	; 0xbf
 8002d52:	f001 f967 	bl	8004024 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d56:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d02f      	beq.n	8002dbe <main+0x1466>
 8002d5e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002d62:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d66:	3301      	adds	r3, #1
 8002d68:	b29c      	uxth	r4, r3
 8002d6a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8002d6e:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d72:	b29d      	uxth	r5, r3
 8002d74:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002d78:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d80:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002d84:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d92:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8002d96:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	2100      	movs	r1, #0
 8002da4:	f001 f81d 	bl	8003de2 <RGB>
 8002da8:	4603      	mov	r3, r0
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	2301      	movs	r3, #1
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	f240 133d 	movw	r3, #317	; 0x13d
 8002db4:	4632      	mov	r2, r6
 8002db6:	4629      	mov	r1, r5
 8002db8:	4620      	mov	r0, r4
 8002dba:	f001 f933 	bl	8004024 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002dbe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8002dc8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002dcc:	2b9a      	cmp	r3, #154	; 0x9a
 8002dce:	d987      	bls.n	8002ce0 <main+0x1388>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dd6:	e00e      	b.n	8002df6 <main+0x149e>
 8002dd8:	200005bc 	.word	0x200005bc
 8002ddc:	200006f4 	.word	0x200006f4
 8002de0:	2000082c 	.word	0x2000082c
 8002de4:	4a87      	ldr	r2, [pc, #540]	; (8003004 <main+0x16ac>)
 8002de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dea:	6353      	str	r3, [r2, #52]	; 0x34
 8002dec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002df0:	3301      	adds	r3, #1
 8002df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d9f1      	bls.n	8002de4 <main+0x148c>
						viewGraphs = 1;
 8002e00:	4b81      	ldr	r3, [pc, #516]	; (8003008 <main+0x16b0>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8002e06:	4b81      	ldr	r3, [pc, #516]	; (800300c <main+0x16b4>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 8385 	beq.w	800351a <main+0x1bc2>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8002e10:	2202      	movs	r2, #2
 8002e12:	497f      	ldr	r1, [pc, #508]	; (8003010 <main+0x16b8>)
 8002e14:	487f      	ldr	r0, [pc, #508]	; (8003014 <main+0x16bc>)
 8002e16:	f01b fd8b 	bl	801e930 <memcmp>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d17c      	bne.n	8002f1a <main+0x15c2>

					char val[2];

					val[0] = rx_buffer[2];
 8002e20:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <main+0x16bc>)
 8002e22:	789b      	ldrb	r3, [r3, #2]
 8002e24:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[3];
 8002e26:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <main+0x16bc>)
 8002e28:	78db      	ldrb	r3, [r3, #3]
 8002e2a:	777b      	strb	r3, [r7, #29]
					DS3231_setHrs(atoi(val));
 8002e2c:	f107 031c 	add.w	r3, r7, #28
 8002e30:	4618      	mov	r0, r3
 8002e32:	f017 f8ca 	bl	8019fca <atoi>
 8002e36:	4603      	mov	r3, r0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f924 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8002e40:	4b74      	ldr	r3, [pc, #464]	; (8003014 <main+0x16bc>)
 8002e42:	791b      	ldrb	r3, [r3, #4]
 8002e44:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[5];
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <main+0x16bc>)
 8002e48:	795b      	ldrb	r3, [r3, #5]
 8002e4a:	777b      	strb	r3, [r7, #29]
					DS3231_setMin(atoi(val));
 8002e4c:	f107 031c 	add.w	r3, r7, #28
 8002e50:	4618      	mov	r0, r3
 8002e52:	f017 f8ba 	bl	8019fca <atoi>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f8f4 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	773b      	strb	r3, [r7, #28]
					val[1] = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	777b      	strb	r3, [r7, #29]
					DS3231_setSec(atoi(val));
 8002e68:	f107 031c 	add.w	r3, r7, #28
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f017 f8ac 	bl	8019fca <atoi>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fe f8c6 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8002e7c:	4b65      	ldr	r3, [pc, #404]	; (8003014 <main+0x16bc>)
 8002e7e:	799b      	ldrb	r3, [r3, #6]
 8002e80:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[7];
 8002e82:	4b64      	ldr	r3, [pc, #400]	; (8003014 <main+0x16bc>)
 8002e84:	79db      	ldrb	r3, [r3, #7]
 8002e86:	777b      	strb	r3, [r7, #29]
					DS3231_setDate(atoi(val));
 8002e88:	f107 031c 	add.w	r3, r7, #28
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f017 f89c 	bl	8019fca <atoi>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f936 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8002e9c:	4b5d      	ldr	r3, [pc, #372]	; (8003014 <main+0x16bc>)
 8002e9e:	7a1b      	ldrb	r3, [r3, #8]
 8002ea0:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[9];
 8002ea2:	4b5c      	ldr	r3, [pc, #368]	; (8003014 <main+0x16bc>)
 8002ea4:	7a5b      	ldrb	r3, [r3, #9]
 8002ea6:	777b      	strb	r3, [r7, #29]
					DS3231_setMonth(atoi(val));
 8002ea8:	f107 031c 	add.w	r3, r7, #28
 8002eac:	4618      	mov	r0, r3
 8002eae:	f017 f88c 	bl	8019fca <atoi>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fe f946 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8002ebc:	4b55      	ldr	r3, [pc, #340]	; (8003014 <main+0x16bc>)
 8002ebe:	7a9b      	ldrb	r3, [r3, #10]
 8002ec0:	773b      	strb	r3, [r7, #28]
					val[1] = rx_buffer[11];
 8002ec2:	4b54      	ldr	r3, [pc, #336]	; (8003014 <main+0x16bc>)
 8002ec4:	7adb      	ldrb	r3, [r3, #11]
 8002ec6:	777b      	strb	r3, [r7, #29]
					DS3231_setYear(atoi(val));
 8002ec8:	f107 031c 	add.w	r3, r7, #28
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f017 f87c 	bl	8019fca <atoi>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe f956 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <main+0x16bc>)
 8002ede:	7b1b      	ldrb	r3, [r3, #12]
 8002ee0:	777b      	strb	r3, [r7, #29]
					DS3231_setDay(atoi(val));
 8002ee2:	f107 031c 	add.w	r3, r7, #28
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f017 f86f 	bl	8019fca <atoi>
 8002eec:	4603      	mov	r3, r0
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe f8e9 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002efc:	e008      	b.n	8002f10 <main+0x15b8>
 8002efe:	4a41      	ldr	r2, [pc, #260]	; (8003004 <main+0x16ac>)
 8002f00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f04:	6353      	str	r3, [r2, #52]	; 0x34
 8002f06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d9f1      	bls.n	8002efe <main+0x15a6>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	493e      	ldr	r1, [pc, #248]	; (8003018 <main+0x16c0>)
 8002f1e:	483d      	ldr	r0, [pc, #244]	; (8003014 <main+0x16bc>)
 8002f20:	f01b fd06 	bl	801e930 <memcmp>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d122      	bne.n	8002f70 <main+0x1618>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002f30:	e00a      	b.n	8002f48 <main+0x15f0>
 8002f32:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd f9d3 	bl	80002e4 <AT24XX_Update>
 8002f3e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002f42:	3301      	adds	r3, #1
 8002f44:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002f48:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f50:	d3ef      	bcc.n	8002f32 <main+0x15da>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <main+0x16c4>)
 8002f54:	f107 0420 	add.w	r4, r7, #32
 8002f58:	461d      	mov	r5, r3
 8002f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f5e:	682b      	ldr	r3, [r5, #0]
 8002f60:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002f62:	f107 0120 	add.w	r1, r7, #32
 8002f66:	2364      	movs	r3, #100	; 0x64
 8002f68:	2214      	movs	r2, #20
 8002f6a:	482d      	ldr	r0, [pc, #180]	; (8003020 <main+0x16c8>)
 8002f6c:	f013 f827 	bl	8015fbe <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8002f70:	2202      	movs	r2, #2
 8002f72:	492c      	ldr	r1, [pc, #176]	; (8003024 <main+0x16cc>)
 8002f74:	4827      	ldr	r0, [pc, #156]	; (8003014 <main+0x16bc>)
 8002f76:	f01b fcdb 	bl	801e930 <memcmp>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f040 82b7 	bne.w	80034f0 <main+0x1b98>

					char valT[4] = { 0 };
 8002f82:	2300      	movs	r3, #0
 8002f84:	647b      	str	r3, [r7, #68]	; 0x44

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8002f8c:	e00f      	b.n	8002fae <main+0x1656>
 8002f8e:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002f92:	1c9a      	adds	r2, r3, #2
 8002f94:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002f98:	491e      	ldr	r1, [pc, #120]	; (8003014 <main+0x16bc>)
 8002f9a:	5c8a      	ldrb	r2, [r1, r2]
 8002f9c:	33d0      	adds	r3, #208	; 0xd0
 8002f9e:	443b      	add	r3, r7
 8002fa0:	f803 2c8c 	strb.w	r2, [r3, #-140]
 8002fa4:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5
 8002fae:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d9eb      	bls.n	8002f8e <main+0x1636>

					temperatureRemote = atoi(valT);
 8002fb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f017 f805 	bl	8019fca <atoi>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f016 fa6e 	bl	80194a4 <__aeabi_i2d>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4916      	ldr	r1, [pc, #88]	; (8003028 <main+0x16d0>)
 8002fce:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8002fd2:	4b15      	ldr	r3, [pc, #84]	; (8003028 <main+0x16d0>)
 8002fd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fd8:	f04f 0200 	mov.w	r2, #0
 8002fdc:	4b13      	ldr	r3, [pc, #76]	; (800302c <main+0x16d4>)
 8002fde:	f016 fbf5 	bl	80197cc <__aeabi_ddiv>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4910      	ldr	r1, [pc, #64]	; (8003028 <main+0x16d0>)
 8002fe8:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8002fec:	4b10      	ldr	r3, [pc, #64]	; (8003030 <main+0x16d8>)
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8003000:	e028      	b.n	8003054 <main+0x16fc>
 8003002:	bf00      	nop
 8003004:	40010000 	.word	0x40010000
 8003008:	2000056c 	.word	0x2000056c
 800300c:	20000974 	.word	0x20000974
 8003010:	080526ec 	.word	0x080526ec
 8003014:	20000964 	.word	0x20000964
 8003018:	080526f0 	.word	0x080526f0
 800301c:	08052734 	.word	0x08052734
 8003020:	200004d8 	.word	0x200004d8
 8003024:	080526f4 	.word	0x080526f4
 8003028:	20000598 	.word	0x20000598
 800302c:	40240000 	.word	0x40240000
 8003030:	08052674 	.word	0x08052674
 8003034:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003038:	1d9a      	adds	r2, r3, #6
 800303a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800303e:	499d      	ldr	r1, [pc, #628]	; (80032b4 <main+0x195c>)
 8003040:	5c8a      	ldrb	r2, [r1, r2]
 8003042:	33d0      	adds	r3, #208	; 0xd0
 8003044:	443b      	add	r3, r7
 8003046:	f803 2c90 	strb.w	r2, [r3, #-144]
 800304a:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 800304e:	3301      	adds	r3, #1
 8003050:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
 8003054:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8003058:	2b02      	cmp	r3, #2
 800305a:	d9eb      	bls.n	8003034 <main+0x16dc>

					humidityRemote = atoi(valH);
 800305c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003060:	4618      	mov	r0, r3
 8003062:	f016 ffb2 	bl	8019fca <atoi>
 8003066:	4603      	mov	r3, r0
 8003068:	4618      	mov	r0, r3
 800306a:	f016 fa1b 	bl	80194a4 <__aeabi_i2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4991      	ldr	r1, [pc, #580]	; (80032b8 <main+0x1960>)
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 8003078:	4b8f      	ldr	r3, [pc, #572]	; (80032b8 <main+0x1960>)
 800307a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800307e:	f04f 0200 	mov.w	r2, #0
 8003082:	4b8e      	ldr	r3, [pc, #568]	; (80032bc <main+0x1964>)
 8003084:	f016 fba2 	bl	80197cc <__aeabi_ddiv>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	498a      	ldr	r1, [pc, #552]	; (80032b8 <main+0x1960>)
 800308e:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003092:	4b8b      	ldr	r3, [pc, #556]	; (80032c0 <main+0x1968>)
 8003094:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003098:	4b8a      	ldr	r3, [pc, #552]	; (80032c4 <main+0x196c>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f016 fcd3 	bl	8019a48 <__aeabi_dcmpeq>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d115      	bne.n	80030d4 <main+0x177c>
 80030a8:	4b85      	ldr	r3, [pc, #532]	; (80032c0 <main+0x1968>)
 80030aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ae:	f04f 0200 	mov.w	r2, #0
 80030b2:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <main+0x1970>)
 80030b4:	f016 fcd2 	bl	8019a5c <__aeabi_dcmplt>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <main+0x177c>
 80030be:	4b80      	ldr	r3, [pc, #512]	; (80032c0 <main+0x1968>)
 80030c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	4b80      	ldr	r3, [pc, #512]	; (80032cc <main+0x1974>)
 80030ca:	f016 fce5 	bl	8019a98 <__aeabi_dcmpgt>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d118      	bne.n	8003106 <main+0x17ae>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030d4:	4b78      	ldr	r3, [pc, #480]	; (80032b8 <main+0x1960>)
 80030d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030da:	4b7d      	ldr	r3, [pc, #500]	; (80032d0 <main+0x1978>)
 80030dc:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80030e0:	f016 fcb2 	bl	8019a48 <__aeabi_dcmpeq>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8202 	bne.w	80034f0 <main+0x1b98>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030ec:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <main+0x1960>)
 80030ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	f016 fccd 	bl	8019a98 <__aeabi_dcmpgt>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 81f5 	beq.w	80034f0 <main+0x1b98>

						remoteSensorLastUpdate = 0;
 8003106:	4b73      	ldr	r3, [pc, #460]	; (80032d4 <main+0x197c>)
 8003108:	2200      	movs	r2, #0
 800310a:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 800310c:	4b72      	ldr	r3, [pc, #456]	; (80032d8 <main+0x1980>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003116:	4971      	ldr	r1, [pc, #452]	; (80032dc <main+0x1984>)
 8003118:	4618      	mov	r0, r3
 800311a:	f017 fe0d 	bl	801ad38 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800311e:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003122:	2300      	movs	r3, #0
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2301      	movs	r3, #1
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	4b6d      	ldr	r3, [pc, #436]	; (80032e0 <main+0x1988>)
 800312c:	2128      	movs	r1, #40	; 0x28
 800312e:	f240 1077 	movw	r0, #375	; 0x177
 8003132:	f002 f893 	bl	800525c <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 8003136:	4b63      	ldr	r3, [pc, #396]	; (80032c4 <main+0x196c>)
 8003138:	e9d3 0100 	ldrd	r0, r1, [r3]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	4b68      	ldr	r3, [pc, #416]	; (80032e4 <main+0x198c>)
 8003142:	f016 fc95 	bl	8019a70 <__aeabi_dcmple>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d014      	beq.n	8003176 <main+0x181e>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800314c:	4b5d      	ldr	r3, [pc, #372]	; (80032c4 <main+0x196c>)
 800314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003152:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003156:	4964      	ldr	r1, [pc, #400]	; (80032e8 <main+0x1990>)
 8003158:	f017 fdee 	bl	801ad38 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800315c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003160:	2300      	movs	r3, #0
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	2301      	movs	r3, #1
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	4b5d      	ldr	r3, [pc, #372]	; (80032e0 <main+0x1988>)
 800316a:	215a      	movs	r1, #90	; 0x5a
 800316c:	f240 1061 	movw	r0, #353	; 0x161
 8003170:	f002 f874 	bl	800525c <LCD_Font>
 8003174:	e076      	b.n	8003264 <main+0x190c>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003176:	4b53      	ldr	r3, [pc, #332]	; (80032c4 <main+0x196c>)
 8003178:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	f016 fc6a 	bl	8019a5c <__aeabi_dcmplt>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d01f      	beq.n	80031ce <main+0x1876>
 800318e:	4b4d      	ldr	r3, [pc, #308]	; (80032c4 <main+0x196c>)
 8003190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003194:	f04f 0200 	mov.w	r2, #0
 8003198:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <main+0x198c>)
 800319a:	f016 fc7d 	bl	8019a98 <__aeabi_dcmpgt>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d014      	beq.n	80031ce <main+0x1876>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80031a4:	4b47      	ldr	r3, [pc, #284]	; (80032c4 <main+0x196c>)
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80031ae:	494e      	ldr	r1, [pc, #312]	; (80032e8 <main+0x1990>)
 80031b0:	f017 fdc2 	bl	801ad38 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80031b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80031b8:	2300      	movs	r3, #0
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	2301      	movs	r3, #1
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4b47      	ldr	r3, [pc, #284]	; (80032e0 <main+0x1988>)
 80031c2:	215a      	movs	r1, #90	; 0x5a
 80031c4:	f240 1081 	movw	r0, #385	; 0x181
 80031c8:	f002 f848 	bl	800525c <LCD_Font>
 80031cc:	e04a      	b.n	8003264 <main+0x190c>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80031ce:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <main+0x196c>)
 80031d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	f016 fc5c 	bl	8019a98 <__aeabi_dcmpgt>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01f      	beq.n	8003226 <main+0x18ce>
 80031e6:	4b37      	ldr	r3, [pc, #220]	; (80032c4 <main+0x196c>)
 80031e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	4b32      	ldr	r3, [pc, #200]	; (80032bc <main+0x1964>)
 80031f2:	f016 fc33 	bl	8019a5c <__aeabi_dcmplt>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d014      	beq.n	8003226 <main+0x18ce>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80031fc:	4b31      	ldr	r3, [pc, #196]	; (80032c4 <main+0x196c>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003206:	4939      	ldr	r1, [pc, #228]	; (80032ec <main+0x1994>)
 8003208:	f017 fd96 	bl	801ad38 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800320c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003210:	2300      	movs	r3, #0
 8003212:	9301      	str	r3, [sp, #4]
 8003214:	2301      	movs	r3, #1
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	4b31      	ldr	r3, [pc, #196]	; (80032e0 <main+0x1988>)
 800321a:	215a      	movs	r1, #90	; 0x5a
 800321c:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003220:	f002 f81c 	bl	800525c <LCD_Font>
 8003224:	e01e      	b.n	8003264 <main+0x190c>
						}
						else if (temperatureRemoteLast >= 10) {
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <main+0x196c>)
 8003228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <main+0x1964>)
 8003232:	f016 fc27 	bl	8019a84 <__aeabi_dcmpge>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <main+0x190c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800323c:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <main+0x196c>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003246:	4929      	ldr	r1, [pc, #164]	; (80032ec <main+0x1994>)
 8003248:	f017 fd76 	bl	801ad38 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800324c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003250:	2300      	movs	r3, #0
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2301      	movs	r3, #1
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <main+0x1988>)
 800325a:	215a      	movs	r1, #90	; 0x5a
 800325c:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003260:	f001 fffc 	bl	800525c <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <main+0x1968>)
 8003266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326a:	4916      	ldr	r1, [pc, #88]	; (80032c4 <main+0x196c>)
 800326c:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <main+0x196c>)
 8003272:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <main+0x198c>)
 800327c:	f016 fbf8 	bl	8019a70 <__aeabi_dcmple>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d034      	beq.n	80032f0 <main+0x1998>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003286:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <main+0x196c>)
 8003288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003290:	4915      	ldr	r1, [pc, #84]	; (80032e8 <main+0x1990>)
 8003292:	f017 fd51 	bl	801ad38 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003296:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800329a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	2301      	movs	r3, #1
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <main+0x1988>)
 80032a6:	215a      	movs	r1, #90	; 0x5a
 80032a8:	f240 1061 	movw	r0, #353	; 0x161
 80032ac:	f001 ffd6 	bl	800525c <LCD_Font>
 80032b0:	e098      	b.n	80033e4 <main+0x1a8c>
 80032b2:	bf00      	nop
 80032b4:	20000964 	.word	0x20000964
 80032b8:	200005a8 	.word	0x200005a8
 80032bc:	40240000 	.word	0x40240000
 80032c0:	20000598 	.word	0x20000598
 80032c4:	200005a0 	.word	0x200005a0
 80032c8:	40554000 	.word	0x40554000
 80032cc:	c0440000 	.word	0xc0440000
 80032d0:	200005b0 	.word	0x200005b0
 80032d4:	20000004 	.word	0x20000004
 80032d8:	20000000 	.word	0x20000000
 80032dc:	080526ac 	.word	0x080526ac
 80032e0:	08029fd0 	.word	0x08029fd0
 80032e4:	c0240000 	.word	0xc0240000
 80032e8:	080526f8 	.word	0x080526f8
 80032ec:	08052700 	.word	0x08052700
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80032f0:	4bac      	ldr	r3, [pc, #688]	; (80035a4 <main+0x1c4c>)
 80032f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	f016 fbad 	bl	8019a5c <__aeabi_dcmplt>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <main+0x19f2>
 8003308:	4ba6      	ldr	r3, [pc, #664]	; (80035a4 <main+0x1c4c>)
 800330a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	4ba5      	ldr	r3, [pc, #660]	; (80035a8 <main+0x1c50>)
 8003314:	f016 fbc0 	bl	8019a98 <__aeabi_dcmpgt>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d015      	beq.n	800334a <main+0x19f2>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800331e:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <main+0x1c4c>)
 8003320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003324:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003328:	49a0      	ldr	r1, [pc, #640]	; (80035ac <main+0x1c54>)
 800332a:	f017 fd05 	bl	801ad38 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800332e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003332:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	4b9c      	ldr	r3, [pc, #624]	; (80035b0 <main+0x1c58>)
 800333e:	215a      	movs	r1, #90	; 0x5a
 8003340:	f240 1081 	movw	r0, #385	; 0x181
 8003344:	f001 ff8a 	bl	800525c <LCD_Font>
 8003348:	e04c      	b.n	80033e4 <main+0x1a8c>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800334a:	4b96      	ldr	r3, [pc, #600]	; (80035a4 <main+0x1c4c>)
 800334c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	f016 fb9e 	bl	8019a98 <__aeabi_dcmpgt>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <main+0x1a4c>
 8003362:	4b90      	ldr	r3, [pc, #576]	; (80035a4 <main+0x1c4c>)
 8003364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	4b91      	ldr	r3, [pc, #580]	; (80035b4 <main+0x1c5c>)
 800336e:	f016 fb75 	bl	8019a5c <__aeabi_dcmplt>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d015      	beq.n	80033a4 <main+0x1a4c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003378:	4b8a      	ldr	r3, [pc, #552]	; (80035a4 <main+0x1c4c>)
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003382:	498d      	ldr	r1, [pc, #564]	; (80035b8 <main+0x1c60>)
 8003384:	f017 fcd8 	bl	801ad38 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003388:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800338c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	2301      	movs	r3, #1
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	4b86      	ldr	r3, [pc, #536]	; (80035b0 <main+0x1c58>)
 8003398:	215a      	movs	r1, #90	; 0x5a
 800339a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800339e:	f001 ff5d 	bl	800525c <LCD_Font>
 80033a2:	e01f      	b.n	80033e4 <main+0x1a8c>
						}
						else if (temperatureRemoteLast >= 10) {
 80033a4:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <main+0x1c4c>)
 80033a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	4b81      	ldr	r3, [pc, #516]	; (80035b4 <main+0x1c5c>)
 80033b0:	f016 fb68 	bl	8019a84 <__aeabi_dcmpge>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d014      	beq.n	80033e4 <main+0x1a8c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80033ba:	4b7a      	ldr	r3, [pc, #488]	; (80035a4 <main+0x1c4c>)
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80033c4:	497c      	ldr	r1, [pc, #496]	; (80035b8 <main+0x1c60>)
 80033c6:	f017 fcb7 	bl	801ad38 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80033ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80033ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2301      	movs	r3, #1
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	4b75      	ldr	r3, [pc, #468]	; (80035b0 <main+0x1c58>)
 80033da:	215a      	movs	r1, #90	; 0x5a
 80033dc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80033e0:	f001 ff3c 	bl	800525c <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80033e4:	4b75      	ldr	r3, [pc, #468]	; (80035bc <main+0x1c64>)
 80033e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	4b71      	ldr	r3, [pc, #452]	; (80035b4 <main+0x1c5c>)
 80033f0:	f016 fb48 	bl	8019a84 <__aeabi_dcmpge>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d014      	beq.n	8003424 <main+0x1acc>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <main+0x1c64>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003404:	4969      	ldr	r1, [pc, #420]	; (80035ac <main+0x1c54>)
 8003406:	f017 fc97 	bl	801ad38 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800340a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800340e:	2300      	movs	r3, #0
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	2301      	movs	r3, #1
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <main+0x1c58>)
 8003418:	2128      	movs	r1, #40	; 0x28
 800341a:	f240 1073 	movw	r0, #371	; 0x173
 800341e:	f001 ff1d 	bl	800525c <LCD_Font>
 8003422:	e01e      	b.n	8003462 <main+0x1b0a>
						}
						else if (humidityRemoteLast < 10) {
 8003424:	4b65      	ldr	r3, [pc, #404]	; (80035bc <main+0x1c64>)
 8003426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342a:	f04f 0200 	mov.w	r2, #0
 800342e:	4b61      	ldr	r3, [pc, #388]	; (80035b4 <main+0x1c5c>)
 8003430:	f016 fb14 	bl	8019a5c <__aeabi_dcmplt>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d013      	beq.n	8003462 <main+0x1b0a>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <main+0x1c64>)
 800343c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003440:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003444:	4959      	ldr	r1, [pc, #356]	; (80035ac <main+0x1c54>)
 8003446:	f017 fc77 	bl	801ad38 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800344a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800344e:	2300      	movs	r3, #0
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2301      	movs	r3, #1
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4b56      	ldr	r3, [pc, #344]	; (80035b0 <main+0x1c58>)
 8003458:	2128      	movs	r1, #40	; 0x28
 800345a:	f240 1093 	movw	r0, #403	; 0x193
 800345e:	f001 fefd 	bl	800525c <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <main+0x1c68>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	4954      	ldr	r1, [pc, #336]	; (80035bc <main+0x1c64>)
 800346a:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 800346e:	4b53      	ldr	r3, [pc, #332]	; (80035bc <main+0x1c64>)
 8003470:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	4b4e      	ldr	r3, [pc, #312]	; (80035b4 <main+0x1c5c>)
 800347a:	f016 fb03 	bl	8019a84 <__aeabi_dcmpge>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <main+0x1b58>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003484:	4b4d      	ldr	r3, [pc, #308]	; (80035bc <main+0x1c64>)
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800348e:	4947      	ldr	r1, [pc, #284]	; (80035ac <main+0x1c54>)
 8003490:	f017 fc52 	bl	801ad38 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003494:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003498:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	2301      	movs	r3, #1
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4b43      	ldr	r3, [pc, #268]	; (80035b0 <main+0x1c58>)
 80034a4:	2128      	movs	r1, #40	; 0x28
 80034a6:	f240 1073 	movw	r0, #371	; 0x173
 80034aa:	f001 fed7 	bl	800525c <LCD_Font>
 80034ae:	e01f      	b.n	80034f0 <main+0x1b98>
						}
						else if (humidityRemoteLast < 10) {
 80034b0:	4b42      	ldr	r3, [pc, #264]	; (80035bc <main+0x1c64>)
 80034b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	4b3e      	ldr	r3, [pc, #248]	; (80035b4 <main+0x1c5c>)
 80034bc:	f016 face 	bl	8019a5c <__aeabi_dcmplt>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d014      	beq.n	80034f0 <main+0x1b98>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80034c6:	4b3d      	ldr	r3, [pc, #244]	; (80035bc <main+0x1c64>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80034d0:	4936      	ldr	r1, [pc, #216]	; (80035ac <main+0x1c54>)
 80034d2:	f017 fc31 	bl	801ad38 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80034d6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80034da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	2301      	movs	r3, #1
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4b32      	ldr	r3, [pc, #200]	; (80035b0 <main+0x1c58>)
 80034e6:	2128      	movs	r1, #40	; 0x28
 80034e8:	f240 1093 	movw	r0, #403	; 0x193
 80034ec:	f001 feb6 	bl	800525c <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80034f0:	4b34      	ldr	r3, [pc, #208]	; (80035c4 <main+0x1c6c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 80034fc:	e009      	b.n	8003512 <main+0x1bba>
 80034fe:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003502:	4a31      	ldr	r2, [pc, #196]	; (80035c8 <main+0x1c70>)
 8003504:	2100      	movs	r1, #0
 8003506:	54d1      	strb	r1, [r2, r3]
 8003508:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800350c:	3301      	adds	r3, #1
 800350e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8003512:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8003516:	2b0f      	cmp	r3, #15
 8003518:	d9f1      	bls.n	80034fe <main+0x1ba6>
			}

			remoteSensorLastUpdate++;
 800351a:	4b2c      	ldr	r3, [pc, #176]	; (80035cc <main+0x1c74>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	b29a      	uxth	r2, r3
 8003522:	4b2a      	ldr	r3, [pc, #168]	; (80035cc <main+0x1c74>)
 8003524:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <main+0x1c74>)
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	f240 813e 	bls.w	80037ac <main+0x1e54>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <main+0x1c4c>)
 8003532:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	f016 fa83 	bl	8019a48 <__aeabi_dcmpeq>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8107 	bne.w	8003758 <main+0x1e00>
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <main+0x1c64>)
 800354c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	f016 fa76 	bl	8019a48 <__aeabi_dcmpeq>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 80fa 	bne.w	8003758 <main+0x1e00>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8003564:	4b0f      	ldr	r3, [pc, #60]	; (80035a4 <main+0x1c4c>)
 8003566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <main+0x1c50>)
 8003570:	f016 fa7e 	bl	8019a70 <__aeabi_dcmple>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d02a      	beq.n	80035d0 <main+0x1c78>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800357a:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <main+0x1c4c>)
 800357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003580:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003584:	4909      	ldr	r1, [pc, #36]	; (80035ac <main+0x1c54>)
 8003586:	f017 fbd7 	bl	801ad38 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800358a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2301      	movs	r3, #1
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <main+0x1c58>)
 8003598:	215a      	movs	r1, #90	; 0x5a
 800359a:	f240 1061 	movw	r0, #353	; 0x161
 800359e:	f001 fe5d 	bl	800525c <LCD_Font>
 80035a2:	e08c      	b.n	80036be <main+0x1d66>
 80035a4:	200005a0 	.word	0x200005a0
 80035a8:	c0240000 	.word	0xc0240000
 80035ac:	080526f8 	.word	0x080526f8
 80035b0:	08029fd0 	.word	0x08029fd0
 80035b4:	40240000 	.word	0x40240000
 80035b8:	08052700 	.word	0x08052700
 80035bc:	200005b0 	.word	0x200005b0
 80035c0:	200005a8 	.word	0x200005a8
 80035c4:	20000974 	.word	0x20000974
 80035c8:	20000964 	.word	0x20000964
 80035cc:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035d0:	4b79      	ldr	r3, [pc, #484]	; (80037b8 <main+0x1e60>)
 80035d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f016 fa3d 	bl	8019a5c <__aeabi_dcmplt>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d01f      	beq.n	8003628 <main+0x1cd0>
 80035e8:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <main+0x1e60>)
 80035ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	4b72      	ldr	r3, [pc, #456]	; (80037bc <main+0x1e64>)
 80035f4:	f016 fa50 	bl	8019a98 <__aeabi_dcmpgt>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d014      	beq.n	8003628 <main+0x1cd0>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80035fe:	4b6e      	ldr	r3, [pc, #440]	; (80037b8 <main+0x1e60>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003608:	496d      	ldr	r1, [pc, #436]	; (80037c0 <main+0x1e68>)
 800360a:	f017 fb95 	bl	801ad38 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800360e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003612:	2300      	movs	r3, #0
 8003614:	9301      	str	r3, [sp, #4]
 8003616:	2301      	movs	r3, #1
 8003618:	9300      	str	r3, [sp, #0]
 800361a:	4b6a      	ldr	r3, [pc, #424]	; (80037c4 <main+0x1e6c>)
 800361c:	215a      	movs	r1, #90	; 0x5a
 800361e:	f240 1081 	movw	r0, #385	; 0x181
 8003622:	f001 fe1b 	bl	800525c <LCD_Font>
 8003626:	e04a      	b.n	80036be <main+0x1d66>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003628:	4b63      	ldr	r3, [pc, #396]	; (80037b8 <main+0x1e60>)
 800362a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	f016 fa2f 	bl	8019a98 <__aeabi_dcmpgt>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01f      	beq.n	8003680 <main+0x1d28>
 8003640:	4b5d      	ldr	r3, [pc, #372]	; (80037b8 <main+0x1e60>)
 8003642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	4b5f      	ldr	r3, [pc, #380]	; (80037c8 <main+0x1e70>)
 800364c:	f016 fa06 	bl	8019a5c <__aeabi_dcmplt>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <main+0x1d28>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003656:	4b58      	ldr	r3, [pc, #352]	; (80037b8 <main+0x1e60>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003660:	495a      	ldr	r1, [pc, #360]	; (80037cc <main+0x1e74>)
 8003662:	f017 fb69 	bl	801ad38 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003666:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800366a:	2300      	movs	r3, #0
 800366c:	9301      	str	r3, [sp, #4]
 800366e:	2301      	movs	r3, #1
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4b54      	ldr	r3, [pc, #336]	; (80037c4 <main+0x1e6c>)
 8003674:	215a      	movs	r1, #90	; 0x5a
 8003676:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800367a:	f001 fdef 	bl	800525c <LCD_Font>
 800367e:	e01e      	b.n	80036be <main+0x1d66>
					}
					else if (temperatureRemoteLast >= 10) {
 8003680:	4b4d      	ldr	r3, [pc, #308]	; (80037b8 <main+0x1e60>)
 8003682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b4f      	ldr	r3, [pc, #316]	; (80037c8 <main+0x1e70>)
 800368c:	f016 f9fa 	bl	8019a84 <__aeabi_dcmpge>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d013      	beq.n	80036be <main+0x1d66>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003696:	4b48      	ldr	r3, [pc, #288]	; (80037b8 <main+0x1e60>)
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80036a0:	494a      	ldr	r1, [pc, #296]	; (80037cc <main+0x1e74>)
 80036a2:	f017 fb49 	bl	801ad38 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80036a6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80036aa:	2300      	movs	r3, #0
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	2301      	movs	r3, #1
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	4b44      	ldr	r3, [pc, #272]	; (80037c4 <main+0x1e6c>)
 80036b4:	215a      	movs	r1, #90	; 0x5a
 80036b6:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80036ba:	f001 fdcf 	bl	800525c <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 80036be:	4b44      	ldr	r3, [pc, #272]	; (80037d0 <main+0x1e78>)
 80036c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	4b3f      	ldr	r3, [pc, #252]	; (80037c8 <main+0x1e70>)
 80036ca:	f016 f9db 	bl	8019a84 <__aeabi_dcmpge>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d014      	beq.n	80036fe <main+0x1da6>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036d4:	4b3e      	ldr	r3, [pc, #248]	; (80037d0 <main+0x1e78>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80036de:	4938      	ldr	r1, [pc, #224]	; (80037c0 <main+0x1e68>)
 80036e0:	f017 fb2a 	bl	801ad38 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80036e8:	2300      	movs	r3, #0
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	2301      	movs	r3, #1
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	4b34      	ldr	r3, [pc, #208]	; (80037c4 <main+0x1e6c>)
 80036f2:	2128      	movs	r1, #40	; 0x28
 80036f4:	f240 1073 	movw	r0, #371	; 0x173
 80036f8:	f001 fdb0 	bl	800525c <LCD_Font>
 80036fc:	e01e      	b.n	800373c <main+0x1de4>
					}
					else if (humidityRemoteLast < 10) {
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <main+0x1e78>)
 8003700:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	4b2f      	ldr	r3, [pc, #188]	; (80037c8 <main+0x1e70>)
 800370a:	f016 f9a7 	bl	8019a5c <__aeabi_dcmplt>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d013      	beq.n	800373c <main+0x1de4>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003714:	4b2e      	ldr	r3, [pc, #184]	; (80037d0 <main+0x1e78>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800371e:	4928      	ldr	r1, [pc, #160]	; (80037c0 <main+0x1e68>)
 8003720:	f017 fb0a 	bl	801ad38 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003724:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003728:	2300      	movs	r3, #0
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2301      	movs	r3, #1
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	4b24      	ldr	r3, [pc, #144]	; (80037c4 <main+0x1e6c>)
 8003732:	2128      	movs	r1, #40	; 0x28
 8003734:	f240 1093 	movw	r0, #403	; 0x193
 8003738:	f001 fd90 	bl	800525c <LCD_Font>
					}

					temperatureRemoteLast = 0;
 800373c:	491e      	ldr	r1, [pc, #120]	; (80037b8 <main+0x1e60>)
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 800374a:	4921      	ldr	r1, [pc, #132]	; (80037d0 <main+0x1e78>)
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 8003758:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <main+0x1e7c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003762:	491d      	ldr	r1, [pc, #116]	; (80037d8 <main+0x1e80>)
 8003764:	4618      	mov	r0, r3
 8003766:	f017 fae7 	bl	801ad38 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800376a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800376e:	2300      	movs	r3, #0
 8003770:	9301      	str	r3, [sp, #4]
 8003772:	2301      	movs	r3, #1
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <main+0x1e6c>)
 8003778:	2128      	movs	r1, #40	; 0x28
 800377a:	f240 1077 	movw	r0, #375	; 0x177
 800377e:	f001 fd6d 	bl	800525c <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003782:	4b16      	ldr	r3, [pc, #88]	; (80037dc <main+0x1e84>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800378c:	4912      	ldr	r1, [pc, #72]	; (80037d8 <main+0x1e80>)
 800378e:	4618      	mov	r0, r3
 8003790:	f017 fad2 	bl	801ad38 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003794:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003798:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <main+0x1e88>)
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2301      	movs	r3, #1
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	4b08      	ldr	r3, [pc, #32]	; (80037c4 <main+0x1e6c>)
 80037a2:	2128      	movs	r1, #40	; 0x28
 80037a4:	f240 1077 	movw	r0, #375	; 0x177
 80037a8:	f001 fd58 	bl	800525c <LCD_Font>
			}
			rtcSecLast = rtcSec;
 80037ac:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <main+0x1e84>)
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	4b08      	ldr	r3, [pc, #32]	; (80037d4 <main+0x1e7c>)
 80037b2:	701a      	strb	r2, [r3, #0]
	{
 80037b4:	f7fe b9dc 	b.w	8001b70 <main+0x218>
 80037b8:	200005a0 	.word	0x200005a0
 80037bc:	c0240000 	.word	0xc0240000
 80037c0:	080526f8 	.word	0x080526f8
 80037c4:	08029fd0 	.word	0x08029fd0
 80037c8:	40240000 	.word	0x40240000
 80037cc:	08052700 	.word	0x08052700
 80037d0:	200005b0 	.word	0x200005b0
 80037d4:	20000000 	.word	0x20000000
 80037d8:	080526ac 	.word	0x080526ac
 80037dc:	2000056d 	.word	0x2000056d
 80037e0:	00ffa500 	.word	0x00ffa500

080037e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b094      	sub	sp, #80	; 0x50
 80037e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ea:	f107 0320 	add.w	r3, r7, #32
 80037ee:	2230      	movs	r2, #48	; 0x30
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f016 fc18 	bl	801a028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]
 8003802:	609a      	str	r2, [r3, #8]
 8003804:	60da      	str	r2, [r3, #12]
 8003806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	4b28      	ldr	r3, [pc, #160]	; (80038b0 <SystemClock_Config+0xcc>)
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	4a27      	ldr	r2, [pc, #156]	; (80038b0 <SystemClock_Config+0xcc>)
 8003812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003816:	6413      	str	r3, [r2, #64]	; 0x40
 8003818:	4b25      	ldr	r3, [pc, #148]	; (80038b0 <SystemClock_Config+0xcc>)
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003820:	607b      	str	r3, [r7, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
 8003828:	4b22      	ldr	r3, [pc, #136]	; (80038b4 <SystemClock_Config+0xd0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <SystemClock_Config+0xd0>)
 800382e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <SystemClock_Config+0xd0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003840:	2301      	movs	r3, #1
 8003842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003844:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800384a:	2302      	movs	r3, #2
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800384e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003854:	2304      	movs	r3, #4
 8003856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003858:	23a8      	movs	r3, #168	; 0xa8
 800385a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800385c:	2302      	movs	r3, #2
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003860:	2307      	movs	r3, #7
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003864:	f107 0320 	add.w	r3, r7, #32
 8003868:	4618      	mov	r0, r3
 800386a:	f00e fc03 	bl	8012074 <HAL_RCC_OscConfig>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003874:	f000 fab0 	bl	8003dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003878:	230f      	movs	r3, #15
 800387a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800387c:	2302      	movs	r3, #2
 800387e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003884:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800388a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800388e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003890:	f107 030c 	add.w	r3, r7, #12
 8003894:	2105      	movs	r1, #5
 8003896:	4618      	mov	r0, r3
 8003898:	f00e fe64 	bl	8012564 <HAL_RCC_ClockConfig>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038a2:	f000 fa99 	bl	8003dd8 <Error_Handler>
  }
}
 80038a6:	bf00      	nop
 80038a8:	3750      	adds	r7, #80	; 0x50
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000

080038b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80038be:	463b      	mov	r3, r7
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038c6:	4b14      	ldr	r3, [pc, #80]	; (8003918 <MX_DAC_Init+0x60>)
 80038c8:	4a14      	ldr	r2, [pc, #80]	; (800391c <MX_DAC_Init+0x64>)
 80038ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038cc:	4812      	ldr	r0, [pc, #72]	; (8003918 <MX_DAC_Init+0x60>)
 80038ce:	f003 ffec 	bl	80078aa <HAL_DAC_Init>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038d8:	f000 fa7e 	bl	8003dd8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038dc:	2300      	movs	r3, #0
 80038de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038e4:	463b      	mov	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	4619      	mov	r1, r3
 80038ea:	480b      	ldr	r0, [pc, #44]	; (8003918 <MX_DAC_Init+0x60>)
 80038ec:	f004 fa61 	bl	8007db2 <HAL_DAC_ConfigChannel>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038f6:	f000 fa6f 	bl	8003dd8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80038fa:	463b      	mov	r3, r7
 80038fc:	2210      	movs	r2, #16
 80038fe:	4619      	mov	r1, r3
 8003900:	4805      	ldr	r0, [pc, #20]	; (8003918 <MX_DAC_Init+0x60>)
 8003902:	f004 fa56 	bl	8007db2 <HAL_DAC_ConfigChannel>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 800390c:	f000 fa64 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003910:	bf00      	nop
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	200002a8 	.word	0x200002a8
 800391c:	40007400 	.word	0x40007400

08003920 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <MX_I2C1_Init+0x50>)
 8003926:	4a13      	ldr	r2, [pc, #76]	; (8003974 <MX_I2C1_Init+0x54>)
 8003928:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800392a:	4b11      	ldr	r3, [pc, #68]	; (8003970 <MX_I2C1_Init+0x50>)
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <MX_I2C1_Init+0x58>)
 800392e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <MX_I2C1_Init+0x50>)
 8003932:	2200      	movs	r2, #0
 8003934:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003936:	4b0e      	ldr	r3, [pc, #56]	; (8003970 <MX_I2C1_Init+0x50>)
 8003938:	2200      	movs	r2, #0
 800393a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800393c:	4b0c      	ldr	r3, [pc, #48]	; (8003970 <MX_I2C1_Init+0x50>)
 800393e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003942:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <MX_I2C1_Init+0x50>)
 8003946:	2200      	movs	r2, #0
 8003948:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <MX_I2C1_Init+0x50>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003950:	4b07      	ldr	r3, [pc, #28]	; (8003970 <MX_I2C1_Init+0x50>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <MX_I2C1_Init+0x50>)
 8003958:	2200      	movs	r2, #0
 800395a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800395c:	4804      	ldr	r0, [pc, #16]	; (8003970 <MX_I2C1_Init+0x50>)
 800395e:	f007 ffb4 	bl	800b8ca <HAL_I2C_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003968:	f000 fa36 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	bd80      	pop	{r7, pc}
 8003970:	200002bc 	.word	0x200002bc
 8003974:	40005400 	.word	0x40005400
 8003978:	000186a0 	.word	0x000186a0

0800397c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003980:	4b17      	ldr	r3, [pc, #92]	; (80039e0 <MX_SPI1_Init+0x64>)
 8003982:	4a18      	ldr	r2, [pc, #96]	; (80039e4 <MX_SPI1_Init+0x68>)
 8003984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003986:	4b16      	ldr	r3, [pc, #88]	; (80039e0 <MX_SPI1_Init+0x64>)
 8003988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800398c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800398e:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <MX_SPI1_Init+0x64>)
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <MX_SPI1_Init+0x64>)
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_SPI1_Init+0x64>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039b4:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039bc:	2200      	movs	r2, #0
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c0:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80039c6:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039c8:	220a      	movs	r2, #10
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80039cc:	4804      	ldr	r0, [pc, #16]	; (80039e0 <MX_SPI1_Init+0x64>)
 80039ce:	f00f fbe9 	bl	80131a4 <HAL_SPI_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80039d8:	f000 f9fe 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80039dc:	bf00      	nop
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000310 	.word	0x20000310
 80039e4:	40013000 	.word	0x40013000

080039e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <MX_SPI2_Init+0x64>)
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <MX_SPI2_Init+0x68>)
 80039f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80039f2:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <MX_SPI2_Init+0x64>)
 80039f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80039fa:	4b14      	ldr	r3, [pc, #80]	; (8003a4c <MX_SPI2_Init+0x64>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a06:	4b11      	ldr	r3, [pc, #68]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a0c:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a12:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a1c:	2238      	movs	r2, #56	; 0x38
 8003a1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a26:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2c:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a34:	220a      	movs	r2, #10
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a38:	4804      	ldr	r0, [pc, #16]	; (8003a4c <MX_SPI2_Init+0x64>)
 8003a3a:	f00f fbb3 	bl	80131a4 <HAL_SPI_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003a44:	f000 f9c8 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000368 	.word	0x20000368
 8003a50:	40003800 	.word	0x40003800

08003a54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003a58:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <MX_SPI3_Init+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003a5e:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003a66:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a80:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a86:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a88:	2238      	movs	r2, #56	; 0x38
 8003a8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a98:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003aa0:	220a      	movs	r2, #10
 8003aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003aa4:	4804      	ldr	r0, [pc, #16]	; (8003ab8 <MX_SPI3_Init+0x64>)
 8003aa6:	f00f fb7d 	bl	80131a4 <HAL_SPI_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003ab0:	f000 f992 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003ab4:	bf00      	nop
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	200003c0 	.word	0x200003c0
 8003abc:	40003c00 	.word	0x40003c00

08003ac0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ac6:	4a12      	ldr	r2, [pc, #72]	; (8003b10 <MX_USART1_UART_Init+0x50>)
 8003ac8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003acc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ad0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ade:	4b0b      	ldr	r3, [pc, #44]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ae4:	4b09      	ldr	r3, [pc, #36]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003af0:	4b06      	ldr	r3, [pc, #24]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003af6:	4805      	ldr	r0, [pc, #20]	; (8003b0c <MX_USART1_UART_Init+0x4c>)
 8003af8:	f012 f8ba 	bl	8015c70 <HAL_UART_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003b02:	f000 f969 	bl	8003dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b06:	bf00      	nop
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	200004d8 	.word	0x200004d8
 8003b10:	40011000 	.word	0x40011000

08003b14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <MX_DMA_Init+0x4c>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <MX_DMA_Init+0x4c>)
 8003b24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <MX_DMA_Init+0x4c>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	200e      	movs	r0, #14
 8003b3c:	f003 fd71 	bl	8007622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003b40:	200e      	movs	r0, #14
 8003b42:	f003 fd8a 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003b46:	2200      	movs	r2, #0
 8003b48:	2100      	movs	r1, #0
 8003b4a:	200f      	movs	r0, #15
 8003b4c:	f003 fd69 	bl	8007622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b50:	200f      	movs	r0, #15
 8003b52:	f003 fd82 	bl	800765a <HAL_NVIC_EnableIRQ>

}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	40023800 	.word	0x40023800

08003b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08c      	sub	sp, #48	; 0x30
 8003b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	609a      	str	r2, [r3, #8]
 8003b76:	60da      	str	r2, [r3, #12]
 8003b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	4b60      	ldr	r3, [pc, #384]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003b84:	f043 0310 	orr.w	r3, r3, #16
 8003b88:	6313      	str	r3, [r2, #48]	; 0x30
 8003b8a:	4b5d      	ldr	r3, [pc, #372]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a58      	ldr	r2, [pc, #352]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003ba0:	f043 0304 	orr.w	r3, r3, #4
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b56      	ldr	r3, [pc, #344]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b52      	ldr	r3, [pc, #328]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4a51      	ldr	r2, [pc, #324]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4b4f      	ldr	r3, [pc, #316]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4b4b      	ldr	r3, [pc, #300]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4b48      	ldr	r3, [pc, #288]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	4b44      	ldr	r3, [pc, #272]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a43      	ldr	r2, [pc, #268]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b41      	ldr	r3, [pc, #260]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	4b3d      	ldr	r3, [pc, #244]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a3c      	ldr	r2, [pc, #240]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b3a      	ldr	r3, [pc, #232]	; (8003d00 <MX_GPIO_Init+0x19c>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003c22:	2201      	movs	r2, #1
 8003c24:	2140      	movs	r1, #64	; 0x40
 8003c26:	4837      	ldr	r0, [pc, #220]	; (8003d04 <MX_GPIO_Init+0x1a0>)
 8003c28:	f007 fdd0 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2180      	movs	r1, #128	; 0x80
 8003c30:	4834      	ldr	r0, [pc, #208]	; (8003d04 <MX_GPIO_Init+0x1a0>)
 8003c32:	f007 fdcb 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_SET);
 8003c36:	2201      	movs	r2, #1
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4833      	ldr	r0, [pc, #204]	; (8003d08 <MX_GPIO_Init+0x1a4>)
 8003c3c:	f007 fdc6 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003c40:	2200      	movs	r2, #0
 8003c42:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003c46:	4831      	ldr	r0, [pc, #196]	; (8003d0c <MX_GPIO_Init+0x1a8>)
 8003c48:	f007 fdc0 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2104      	movs	r1, #4
 8003c50:	482f      	ldr	r0, [pc, #188]	; (8003d10 <MX_GPIO_Init+0x1ac>)
 8003c52:	f007 fdbb 	bl	800b7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003c56:	2318      	movs	r3, #24
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c62:	f107 031c 	add.w	r3, r7, #28
 8003c66:	4619      	mov	r1, r3
 8003c68:	482a      	ldr	r0, [pc, #168]	; (8003d14 <MX_GPIO_Init+0x1b0>)
 8003c6a:	f007 faff 	bl	800b26c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003c6e:	23c0      	movs	r3, #192	; 0xc0
 8003c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c72:	2301      	movs	r3, #1
 8003c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c7e:	f107 031c 	add.w	r3, r7, #28
 8003c82:	4619      	mov	r1, r3
 8003c84:	481f      	ldr	r0, [pc, #124]	; (8003d04 <MX_GPIO_Init+0x1a0>)
 8003c86:	f007 faf1 	bl	800b26c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003c8a:	2320      	movs	r3, #32
 8003c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003c96:	f107 031c 	add.w	r3, r7, #28
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	481b      	ldr	r0, [pc, #108]	; (8003d0c <MX_GPIO_Init+0x1a8>)
 8003c9e:	f007 fae5 	bl	800b26c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003caa:	2301      	movs	r3, #1
 8003cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003cb2:	f107 031c 	add.w	r3, r7, #28
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4813      	ldr	r0, [pc, #76]	; (8003d08 <MX_GPIO_Init+0x1a4>)
 8003cba:	f007 fad7 	bl	800b26c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd0:	f107 031c 	add.w	r3, r7, #28
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	480d      	ldr	r0, [pc, #52]	; (8003d0c <MX_GPIO_Init+0x1a8>)
 8003cd8:	f007 fac8 	bl	800b26c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003cdc:	2304      	movs	r3, #4
 8003cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4807      	ldr	r0, [pc, #28]	; (8003d10 <MX_GPIO_Init+0x1ac>)
 8003cf4:	f007 faba 	bl	800b26c <HAL_GPIO_Init>

}
 8003cf8:	bf00      	nop
 8003cfa:	3730      	adds	r7, #48	; 0x30
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020000 	.word	0x40020000
 8003d08:	40020400 	.word	0x40020400
 8003d0c:	40020800 	.word	0x40020800
 8003d10:	40020c00 	.word	0x40020c00
 8003d14:	40021000 	.word	0x40021000

08003d18 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b088      	sub	sp, #32
 8003d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	60da      	str	r2, [r3, #12]
 8003d2a:	611a      	str	r2, [r3, #16]
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003d36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003d38:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d3a:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <MX_FSMC_Init+0xbc>)
 8003d3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003d3e:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003d44:	4b22      	ldr	r3, [pc, #136]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d52:	2210      	movs	r2, #16
 8003d54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003d5c:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003d68:	4b19      	ldr	r3, [pc, #100]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003d76:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003d7c:	4b14      	ldr	r3, [pc, #80]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003d82:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003d94:	2302      	movs	r3, #2
 8003d96:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003d98:	230f      	movs	r3, #15
 8003d9a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8003d9c:	2305      	movs	r3, #5
 8003d9e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003da4:	2310      	movs	r3, #16
 8003da6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003da8:	2311      	movs	r3, #17
 8003daa:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003db0:	1d3b      	adds	r3, r7, #4
 8003db2:	2200      	movs	r2, #0
 8003db4:	4619      	mov	r1, r3
 8003db6:	4806      	ldr	r0, [pc, #24]	; (8003dd0 <MX_FSMC_Init+0xb8>)
 8003db8:	f011 fcb0 	bl	801571c <HAL_SRAM_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003dc2:	f000 f809 	bl	8003dd8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003dc6:	bf00      	nop
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	2000051c 	.word	0x2000051c
 8003dd4:	a0000104 	.word	0xa0000104

08003dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
}
 8003dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003de0:	e7fe      	b.n	8003de0 <Error_Handler+0x8>

08003de2 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	460b      	mov	r3, r1
 8003dee:	71bb      	strb	r3, [r7, #6]
 8003df0:	4613      	mov	r3, r2
 8003df2:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	041a      	lsls	r2, r3, #16
 8003df8:	79bb      	ldrb	r3, [r7, #6]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	441a      	add	r2, r3
 8003dfe:	797b      	ldrb	r3, [r7, #5]
 8003e00:	4413      	add	r3, r2
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	4603      	mov	r3, r0
 8003e16:	6039      	str	r1, [r7, #0]
 8003e18:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	0c1b      	lsrs	r3, r3, #16
 8003e1e:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <H24_RGB565+0x4a>
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	08db      	lsrs	r3, r3, #3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	02db      	lsls	r3, r3, #11
 8003e38:	b21a      	sxth	r2, r3
 8003e3a:	7bbb      	ldrb	r3, [r7, #14]
 8003e3c:	089b      	lsrs	r3, r3, #2
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	015b      	lsls	r3, r3, #5
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	b21a      	sxth	r2, r3
 8003e48:	7b7b      	ldrb	r3, [r7, #13]
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b21b      	sxth	r3, r3
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	e012      	b.n	8003e7e <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8003e58:	7b7b      	ldrb	r3, [r7, #13]
 8003e5a:	08db      	lsrs	r3, r3, #3
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	02db      	lsls	r3, r3, #11
 8003e60:	b21a      	sxth	r2, r3
 8003e62:	7bbb      	ldrb	r3, [r7, #14]
 8003e64:	089b      	lsrs	r3, r3, #2
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	015b      	lsls	r3, r3, #5
 8003e6a:	b21b      	sxth	r3, r3
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	b21a      	sxth	r2, r3
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	08db      	lsrs	r3, r3, #3
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	b21b      	sxth	r3, r3
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	b21b      	sxth	r3, r3
 8003e7c:	b29b      	uxth	r3, r3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8003e94:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003e98:	88fb      	ldrh	r3, [r7, #6]
 8003e9a:	8013      	strh	r3, [r2, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73fb      	strb	r3, [r7, #15]
 8003eb6:	e005      	b.n	8003ec4 <LCD_Send_Dat+0x1c>
	DAT = dat;
 8003eb8:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <LCD_Send_Dat+0x30>)
 8003eba:	88fb      	ldrh	r3, [r7, #6]
 8003ebc:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f6      	beq.n	8003eb8 <LCD_Send_Dat+0x10>
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	60080000 	.word	0x60080000

08003edc <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4623      	mov	r3, r4
 8003eec:	80fb      	strh	r3, [r7, #6]
 8003eee:	4603      	mov	r3, r0
 8003ef0:	80bb      	strh	r3, [r7, #4]
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	807b      	strh	r3, [r7, #2]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8003efa:	202a      	movs	r0, #42	; 0x2a
 8003efc:	f7ff ffc5 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	0a1b      	lsrs	r3, r3, #8
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff ffce 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8003f0c:	88bb      	ldrh	r3, [r7, #4]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ffc8 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8003f18:	883b      	ldrh	r3, [r7, #0]
 8003f1a:	0a1b      	lsrs	r3, r3, #8
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff ffc2 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8003f24:	883b      	ldrh	r3, [r7, #0]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ffbc 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8003f30:	202b      	movs	r0, #43	; 0x2b
 8003f32:	f7ff ffaa 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8003f36:	88fb      	ldrh	r3, [r7, #6]
 8003f38:	0a1b      	lsrs	r3, r3, #8
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ffb3 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ffad 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff ffa7 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8003f5a:	887b      	ldrh	r3, [r7, #2]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ffa1 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8003f66:	202c      	movs	r0, #44	; 0x2c
 8003f68:	f7ff ff8f 	bl	8003e8a <LCD_Send_Cmd>
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd90      	pop	{r4, r7, pc}

08003f74 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	603a      	str	r2, [r7, #0]
 8003f7e:	80fb      	strh	r3, [r7, #6]
 8003f80:	460b      	mov	r3, r1
 8003f82:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 8003f84:	88bb      	ldrh	r3, [r7, #4]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	88b9      	ldrh	r1, [r7, #4]
 8003f8a:	88f8      	ldrh	r0, [r7, #6]
 8003f8c:	f7ff ffa6 	bl	8003edc <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8003f90:	6839      	ldr	r1, [r7, #0]
 8003f92:	2001      	movs	r0, #1
 8003f94:	f7ff ff3b 	bl	8003e0e <H24_RGB565>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff ff84 	bl	8003ea8 <LCD_Send_Dat>
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8003fa8:	b590      	push	{r4, r7, lr}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	80fb      	strh	r3, [r7, #6]
 8003fba:	4603      	mov	r3, r0
 8003fbc:	80bb      	strh	r3, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	807b      	strh	r3, [r7, #2]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	883a      	ldrh	r2, [r7, #0]
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8003fd4:	88ba      	ldrh	r2, [r7, #4]
 8003fd6:	883b      	ldrh	r3, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29c      	uxth	r4, r3
 8003fe0:	88fa      	ldrh	r2, [r7, #6]
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	88f9      	ldrh	r1, [r7, #6]
 8003fee:	88b8      	ldrh	r0, [r7, #4]
 8003ff0:	4622      	mov	r2, r4
 8003ff2:	f7ff ff73 	bl	8003edc <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	e00a      	b.n	8004012 <LCD_Rect_Fill+0x6a>
 8003ffc:	6a39      	ldr	r1, [r7, #32]
 8003ffe:	2001      	movs	r0, #1
 8004000:	f7ff ff05 	bl	8003e0e <H24_RGB565>
 8004004:	4603      	mov	r3, r0
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff4e 	bl	8003ea8 <LCD_Send_Dat>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	3301      	adds	r3, #1
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	429a      	cmp	r2, r3
 8004018:	d3f0      	bcc.n	8003ffc <LCD_Rect_Fill+0x54>
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bd90      	pop	{r4, r7, pc}

08004024 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8004024:	b590      	push	{r4, r7, lr}
 8004026:	b08b      	sub	sp, #44	; 0x2c
 8004028:	af02      	add	r7, sp, #8
 800402a:	4604      	mov	r4, r0
 800402c:	4608      	mov	r0, r1
 800402e:	4611      	mov	r1, r2
 8004030:	461a      	mov	r2, r3
 8004032:	4623      	mov	r3, r4
 8004034:	80fb      	strh	r3, [r7, #6]
 8004036:	4603      	mov	r3, r0
 8004038:	80bb      	strh	r3, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	807b      	strh	r3, [r7, #2]
 800403e:	4613      	mov	r3, r2
 8004040:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bfb8      	it	lt
 800404c:	425b      	neglt	r3, r3
 800404e:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8004050:	883a      	ldrh	r2, [r7, #0]
 8004052:	88bb      	ldrh	r3, [r7, #4]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	bfb8      	it	lt
 800405a:	425b      	neglt	r3, r3
 800405c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800405e:	88fa      	ldrh	r2, [r7, #6]
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	429a      	cmp	r2, r3
 8004064:	d201      	bcs.n	800406a <LCD_Line+0x46>
 8004066:	2301      	movs	r3, #1
 8004068:	e001      	b.n	800406e <LCD_Line+0x4a>
 800406a:	f04f 33ff 	mov.w	r3, #4294967295
 800406e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8004070:	88ba      	ldrh	r2, [r7, #4]
 8004072:	883b      	ldrh	r3, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d201      	bcs.n	800407c <LCD_Line+0x58>
 8004078:	2301      	movs	r3, #1
 800407a:	e001      	b.n	8004080 <LCD_Line+0x5c>
 800407c:	f04f 33ff 	mov.w	r3, #4294967295
 8004080:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 800408e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004092:	b29a      	uxth	r2, r3
 8004094:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004098:	b29c      	uxth	r4, r3
 800409a:	88b9      	ldrh	r1, [r7, #4]
 800409c:	88f8      	ldrh	r0, [r7, #6]
 800409e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	4623      	mov	r3, r4
 80040a4:	f7ff ff80 	bl	8003fa8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d103      	bne.n	80040b8 <LCD_Line+0x94>
 80040b0:	88ba      	ldrh	r2, [r7, #4]
 80040b2:	883b      	ldrh	r3, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d01e      	beq.n	80040f6 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	425b      	negs	r3, r3
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	dd08      	ble.n	80040da <LCD_Line+0xb6>
		{
			error -= deltaY;
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	88fb      	ldrh	r3, [r7, #6]
 80040d6:	4413      	add	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	429a      	cmp	r2, r3
 80040e0:	dad5      	bge.n	800408e <LCD_Line+0x6a>
		{
			error += deltaX;
 80040e2:	69fa      	ldr	r2, [r7, #28]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	4413      	add	r3, r2
 80040e8:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	88bb      	ldrh	r3, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 80040f4:	e7cb      	b.n	800408e <LCD_Line+0x6a>
		break;
 80040f6:	bf00      	nop
		}
	}
}
 80040f8:	bf00      	nop
 80040fa:	3724      	adds	r7, #36	; 0x24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd90      	pop	{r4, r7, pc}

08004100 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af02      	add	r7, sp, #8
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	80fb      	strh	r3, [r7, #6]
 8004112:	4603      	mov	r3, r0
 8004114:	80bb      	strh	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	807b      	strh	r3, [r7, #2]
 800411a:	4613      	mov	r3, r2
 800411c:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 800411e:	883c      	ldrh	r4, [r7, #0]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	88b9      	ldrh	r1, [r7, #4]
 8004124:	88f8      	ldrh	r0, [r7, #6]
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	4623      	mov	r3, r4
 8004132:	f7ff ff77 	bl	8004024 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 8004136:	8bbc      	ldrh	r4, [r7, #28]
 8004138:	8b3a      	ldrh	r2, [r7, #24]
 800413a:	8839      	ldrh	r1, [r7, #0]
 800413c:	8878      	ldrh	r0, [r7, #2]
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	4623      	mov	r3, r4
 800414a:	f7ff ff6b 	bl	8004024 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 800414e:	88bc      	ldrh	r4, [r7, #4]
 8004150:	88fa      	ldrh	r2, [r7, #6]
 8004152:	8bb9      	ldrh	r1, [r7, #28]
 8004154:	8b38      	ldrh	r0, [r7, #24]
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4623      	mov	r3, r4
 8004162:	f7ff ff5f 	bl	8004024 <LCD_Line>
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b08d      	sub	sp, #52	; 0x34
 8004172:	af02      	add	r7, sp, #8
 8004174:	4604      	mov	r4, r0
 8004176:	4608      	mov	r0, r1
 8004178:	4611      	mov	r1, r2
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	80fb      	strh	r3, [r7, #6]
 8004180:	4603      	mov	r3, r0
 8004182:	80bb      	strh	r3, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800418c:	2300      	movs	r3, #0
 800418e:	823b      	strh	r3, [r7, #16]
 8004190:	2300      	movs	r3, #0
 8004192:	81fb      	strh	r3, [r7, #14]
 8004194:	2300      	movs	r3, #0
 8004196:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004198:	2300      	movs	r3, #0
 800419a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800419c:	2300      	movs	r3, #0
 800419e:	847b      	strh	r3, [r7, #34]	; 0x22
 80041a0:	2300      	movs	r3, #0
 80041a2:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80041a4:	2300      	movs	r3, #0
 80041a6:	83fb      	strh	r3, [r7, #30]
 80041a8:	2300      	movs	r3, #0
 80041aa:	83bb      	strh	r3, [r7, #28]
 80041ac:	2300      	movs	r3, #0
 80041ae:	837b      	strh	r3, [r7, #26]
 80041b0:	2300      	movs	r3, #0
 80041b2:	833b      	strh	r3, [r7, #24]
 80041b4:	2300      	movs	r3, #0
 80041b6:	82fb      	strh	r3, [r7, #22]
 80041b8:	2300      	movs	r3, #0
 80041ba:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	88fb      	ldrh	r3, [r7, #6]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	bfb8      	it	lt
 80041ca:	425b      	neglt	r3, r3
 80041cc:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80041ce:	883a      	ldrh	r2, [r7, #0]
 80041d0:	88bb      	ldrh	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bfb8      	it	lt
 80041d8:	425b      	neglt	r3, r3
 80041da:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 80041e0:	88bb      	ldrh	r3, [r7, #4]
 80041e2:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 80041e4:	887a      	ldrh	r2, [r7, #2]
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d304      	bcc.n	80041f6 <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 80041ec:	2301      	movs	r3, #1
 80041ee:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80041f0:	2301      	movs	r3, #1
 80041f2:	843b      	strh	r3, [r7, #32]
 80041f4:	e005      	b.n	8004202 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 80041f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041fa:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80041fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004200:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8004202:	883a      	ldrh	r2, [r7, #0]
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	429a      	cmp	r2, r3
 8004208:	d304      	bcc.n	8004214 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 800420a:	2301      	movs	r3, #1
 800420c:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800420e:	2301      	movs	r3, #1
 8004210:	83bb      	strh	r3, [r7, #28]
 8004212:	e005      	b.n	8004220 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004218:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800421a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800421e:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004220:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004224:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004228:	429a      	cmp	r2, r3
 800422a:	db10      	blt.n	800424e <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004234:	8a3b      	ldrh	r3, [r7, #16]
 8004236:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004238:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800423c:	0fda      	lsrs	r2, r3, #31
 800423e:	4413      	add	r3, r2
 8004240:	105b      	asrs	r3, r3, #1
 8004242:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004244:	89fb      	ldrh	r3, [r7, #14]
 8004246:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004248:	8a3b      	ldrh	r3, [r7, #16]
 800424a:	82bb      	strh	r3, [r7, #20]
 800424c:	e00f      	b.n	800426e <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8004252:	2300      	movs	r3, #0
 8004254:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8004256:	89fb      	ldrh	r3, [r7, #14]
 8004258:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800425a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800425e:	0fda      	lsrs	r2, r3, #31
 8004260:	4413      	add	r3, r2
 8004262:	105b      	asrs	r3, r3, #1
 8004264:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8004266:	8a3b      	ldrh	r3, [r7, #16]
 8004268:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800426a:	89fb      	ldrh	r3, [r7, #14]
 800426c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800426e:	2300      	movs	r3, #0
 8004270:	827b      	strh	r3, [r7, #18]
 8004272:	e034      	b.n	80042de <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 8004274:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004276:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004278:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800427a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800427c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	2301      	movs	r3, #1
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	4623      	mov	r3, r4
 8004286:	f7ff fecd 	bl	8004024 <LCD_Line>

		num += numadd;
 800428a:	8b3a      	ldrh	r2, [r7, #24]
 800428c:	8afb      	ldrh	r3, [r7, #22]
 800428e:	4413      	add	r3, r2
 8004290:	b29b      	uxth	r3, r3
 8004292:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 8004294:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004298:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800429c:	429a      	cmp	r2, r3
 800429e:	db0e      	blt.n	80042be <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80042a0:	8b3a      	ldrh	r2, [r7, #24]
 80042a2:	8b7b      	ldrh	r3, [r7, #26]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80042aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80042ae:	4413      	add	r3, r2
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80042b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042b6:	8bfb      	ldrh	r3, [r7, #30]
 80042b8:	4413      	add	r3, r2
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80042be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80042c0:	8c3b      	ldrh	r3, [r7, #32]
 80042c2:	4413      	add	r3, r2
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80042c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80042ca:	8bbb      	ldrh	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80042d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3301      	adds	r3, #1
 80042da:	b29b      	uxth	r3, r3
 80042dc:	827b      	strh	r3, [r7, #18]
 80042de:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80042e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	ddc4      	ble.n	8004274 <LCD_Triangle_Fill+0x106>
	}
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	372c      	adds	r7, #44	; 0x2c
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd90      	pop	{r4, r7, pc}

080042f4 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 80042f4:	b590      	push	{r4, r7, lr}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	4604      	mov	r4, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4623      	mov	r3, r4
 8004304:	80fb      	strh	r3, [r7, #6]
 8004306:	4603      	mov	r3, r0
 8004308:	80bb      	strh	r3, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	807b      	strh	r3, [r7, #2]
 800430e:	4613      	mov	r3, r2
 8004310:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004312:	88fa      	ldrh	r2, [r7, #6]
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	4413      	add	r3, r2
 8004318:	b29a      	uxth	r2, r3
 800431a:	88bc      	ldrh	r4, [r7, #4]
 800431c:	88b9      	ldrh	r1, [r7, #4]
 800431e:	88f8      	ldrh	r0, [r7, #6]
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	7e3b      	ldrb	r3, [r7, #24]
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	4623      	mov	r3, r4
 800432a:	f7ff fe7b 	bl	8004024 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800432e:	88ba      	ldrh	r2, [r7, #4]
 8004330:	883b      	ldrh	r3, [r7, #0]
 8004332:	4413      	add	r3, r2
 8004334:	b299      	uxth	r1, r3
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	4413      	add	r3, r2
 800433c:	b29c      	uxth	r4, r3
 800433e:	88ba      	ldrh	r2, [r7, #4]
 8004340:	883b      	ldrh	r3, [r7, #0]
 8004342:	4413      	add	r3, r2
 8004344:	b29a      	uxth	r2, r3
 8004346:	88f8      	ldrh	r0, [r7, #6]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	9301      	str	r3, [sp, #4]
 800434c:	7e3b      	ldrb	r3, [r7, #24]
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	4622      	mov	r2, r4
 8004354:	f7ff fe66 	bl	8004024 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004358:	88ba      	ldrh	r2, [r7, #4]
 800435a:	883b      	ldrh	r3, [r7, #0]
 800435c:	4413      	add	r3, r2
 800435e:	b29c      	uxth	r4, r3
 8004360:	88fa      	ldrh	r2, [r7, #6]
 8004362:	88b9      	ldrh	r1, [r7, #4]
 8004364:	88f8      	ldrh	r0, [r7, #6]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	7e3b      	ldrb	r3, [r7, #24]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	4623      	mov	r3, r4
 8004370:	f7ff fe58 	bl	8004024 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004374:	88fa      	ldrh	r2, [r7, #6]
 8004376:	887b      	ldrh	r3, [r7, #2]
 8004378:	4413      	add	r3, r2
 800437a:	b298      	uxth	r0, r3
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	887b      	ldrh	r3, [r7, #2]
 8004380:	4413      	add	r3, r2
 8004382:	b29c      	uxth	r4, r3
 8004384:	88ba      	ldrh	r2, [r7, #4]
 8004386:	883b      	ldrh	r3, [r7, #0]
 8004388:	4413      	add	r3, r2
 800438a:	b29a      	uxth	r2, r3
 800438c:	88b9      	ldrh	r1, [r7, #4]
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	7e3b      	ldrb	r3, [r7, #24]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4613      	mov	r3, r2
 8004398:	4622      	mov	r2, r4
 800439a:	f7ff fe43 	bl	8004024 <LCD_Line>
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd90      	pop	{r4, r7, pc}

080043a6 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80043a6:	b590      	push	{r4, r7, lr}
 80043a8:	b08b      	sub	sp, #44	; 0x2c
 80043aa:	af02      	add	r7, sp, #8
 80043ac:	4604      	mov	r4, r0
 80043ae:	4608      	mov	r0, r1
 80043b0:	4611      	mov	r1, r2
 80043b2:	461a      	mov	r2, r3
 80043b4:	4623      	mov	r3, r4
 80043b6:	80fb      	strh	r3, [r7, #6]
 80043b8:	4603      	mov	r3, r0
 80043ba:	80bb      	strh	r3, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	807b      	strh	r3, [r7, #2]
 80043c0:	4613      	mov	r3, r2
 80043c2:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 80043c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043c8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043cc:	fb02 f303 	mul.w	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80043d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80043d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 80043ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8101 	beq.w	80045f8 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80043f6:	2300      	movs	r3, #0
 80043f8:	83fb      	strh	r3, [r7, #30]
 80043fa:	883b      	ldrh	r3, [r7, #0]
 80043fc:	83bb      	strh	r3, [r7, #28]
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	005a      	lsls	r2, r3, #1
 8004402:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f1c3 0301 	rsb	r3, r3, #1
 800440c:	6979      	ldr	r1, [r7, #20]
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	4413      	add	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
 8004416:	e062      	b.n	80044de <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004418:	88fa      	ldrh	r2, [r7, #6]
 800441a:	8bfb      	ldrh	r3, [r7, #30]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	b298      	uxth	r0, r3
 8004420:	88ba      	ldrh	r2, [r7, #4]
 8004422:	8bbb      	ldrh	r3, [r7, #28]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	b299      	uxth	r1, r3
 8004428:	88fa      	ldrh	r2, [r7, #6]
 800442a:	8bfb      	ldrh	r3, [r7, #30]
 800442c:	4413      	add	r3, r2
 800442e:	b29a      	uxth	r2, r3
 8004430:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004434:	b29b      	uxth	r3, r3
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	b29b      	uxth	r3, r3
 800443a:	3301      	adds	r3, #1
 800443c:	b29c      	uxth	r4, r3
 800443e:	88ba      	ldrh	r2, [r7, #4]
 8004440:	8bbb      	ldrh	r3, [r7, #28]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b29a      	uxth	r2, r3
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	9301      	str	r3, [sp, #4]
 800444a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4613      	mov	r3, r2
 8004452:	4622      	mov	r2, r4
 8004454:	f7ff fde6 	bl	8004024 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004458:	88fa      	ldrh	r2, [r7, #6]
 800445a:	8bfb      	ldrh	r3, [r7, #30]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	b298      	uxth	r0, r3
 8004460:	88ba      	ldrh	r2, [r7, #4]
 8004462:	8bbb      	ldrh	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	b299      	uxth	r1, r3
 8004468:	88fa      	ldrh	r2, [r7, #6]
 800446a:	8bfb      	ldrh	r3, [r7, #30]
 800446c:	4413      	add	r3, r2
 800446e:	b29a      	uxth	r2, r3
 8004470:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004474:	b29b      	uxth	r3, r3
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	b29b      	uxth	r3, r3
 800447a:	3301      	adds	r3, #1
 800447c:	b29c      	uxth	r4, r3
 800447e:	88ba      	ldrh	r2, [r7, #4]
 8004480:	8bbb      	ldrh	r3, [r7, #28]
 8004482:	4413      	add	r3, r2
 8004484:	b29a      	uxth	r2, r3
 8004486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800448e:	9300      	str	r3, [sp, #0]
 8004490:	4613      	mov	r3, r2
 8004492:	4622      	mov	r2, r4
 8004494:	f7ff fdc6 	bl	8004024 <LCD_Line>
			if (s >= 0)
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	db0f      	blt.n	80044be <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 800449e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044a2:	f1c3 0301 	rsb	r3, r3, #1
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	fb02 f303 	mul.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4413      	add	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
				y--;
 80044b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 80044be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	3306      	adds	r3, #6
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80044d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	83fb      	strh	r3, [r7, #30]
 80044de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	fb03 f202 	mul.w	r2, r3, r2
 80044e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044ec:	6979      	ldr	r1, [r7, #20]
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	429a      	cmp	r2, r3
 80044f4:	dd90      	ble.n	8004418 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80044f6:	887b      	ldrh	r3, [r7, #2]
 80044f8:	83fb      	strh	r3, [r7, #30]
 80044fa:	2300      	movs	r3, #0
 80044fc:	83bb      	strh	r3, [r7, #28]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005a      	lsls	r2, r3, #1
 8004502:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	f1c3 0301 	rsb	r3, r3, #1
 800450c:	6939      	ldr	r1, [r7, #16]
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	4413      	add	r3, r2
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	e062      	b.n	80045de <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004518:	88fa      	ldrh	r2, [r7, #6]
 800451a:	8bfb      	ldrh	r3, [r7, #30]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	b298      	uxth	r0, r3
 8004520:	88ba      	ldrh	r2, [r7, #4]
 8004522:	8bbb      	ldrh	r3, [r7, #28]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	b299      	uxth	r1, r3
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	8bfb      	ldrh	r3, [r7, #30]
 800452c:	4413      	add	r3, r2
 800452e:	b29a      	uxth	r2, r3
 8004530:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004534:	b29b      	uxth	r3, r3
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	b29b      	uxth	r3, r3
 800453a:	3301      	adds	r3, #1
 800453c:	b29c      	uxth	r4, r3
 800453e:	88ba      	ldrh	r2, [r7, #4]
 8004540:	8bbb      	ldrh	r3, [r7, #28]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	b29a      	uxth	r2, r3
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	9301      	str	r3, [sp, #4]
 800454a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	4622      	mov	r2, r4
 8004554:	f7ff fd66 	bl	8004024 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	8bfb      	ldrh	r3, [r7, #30]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	b298      	uxth	r0, r3
 8004560:	88ba      	ldrh	r2, [r7, #4]
 8004562:	8bbb      	ldrh	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	b299      	uxth	r1, r3
 8004568:	88fa      	ldrh	r2, [r7, #6]
 800456a:	8bfb      	ldrh	r3, [r7, #30]
 800456c:	4413      	add	r3, r2
 800456e:	b29a      	uxth	r2, r3
 8004570:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004574:	b29b      	uxth	r3, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	b29b      	uxth	r3, r3
 800457a:	3301      	adds	r3, #1
 800457c:	b29c      	uxth	r4, r3
 800457e:	88ba      	ldrh	r2, [r7, #4]
 8004580:	8bbb      	ldrh	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	b29a      	uxth	r2, r3
 8004586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	4622      	mov	r2, r4
 8004594:	f7ff fd46 	bl	8004024 <LCD_Line>
			if (s >= 0)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	db0f      	blt.n	80045be <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 800459e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045a2:	f1c3 0301 	rsb	r3, r3, #1
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	fb02 f303 	mul.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4413      	add	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
				x--;
 80045b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 80045be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	3306      	adds	r3, #6
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	4413      	add	r3, r2
 80045d0:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80045d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	83bb      	strh	r3, [r7, #28]
 80045de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	fb03 f202 	mul.w	r2, r3, r2
 80045e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045ec:	6939      	ldr	r1, [r7, #16]
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	429a      	cmp	r2, r3
 80045f4:	dd90      	ble.n	8004518 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 80045f6:	e117      	b.n	8004828 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80045f8:	2300      	movs	r3, #0
 80045fa:	83fb      	strh	r3, [r7, #30]
 80045fc:	883b      	ldrh	r3, [r7, #0]
 80045fe:	83bb      	strh	r3, [r7, #28]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	005a      	lsls	r2, r3, #1
 8004604:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004608:	005b      	lsls	r3, r3, #1
 800460a:	f1c3 0301 	rsb	r3, r3, #1
 800460e:	6979      	ldr	r1, [r7, #20]
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e06e      	b.n	80046f8 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	8bfb      	ldrh	r3, [r7, #30]
 800461e:	4413      	add	r3, r2
 8004620:	b298      	uxth	r0, r3
 8004622:	88ba      	ldrh	r2, [r7, #4]
 8004624:	8bbb      	ldrh	r3, [r7, #28]
 8004626:	4413      	add	r3, r2
 8004628:	b299      	uxth	r1, r3
 800462a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800462e:	b29a      	uxth	r2, r3
 8004630:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004634:	b29c      	uxth	r4, r3
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	4623      	mov	r3, r4
 800463c:	f7ff fcb4 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004640:	88fa      	ldrh	r2, [r7, #6]
 8004642:	8bfb      	ldrh	r3, [r7, #30]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	b298      	uxth	r0, r3
 8004648:	88ba      	ldrh	r2, [r7, #4]
 800464a:	8bbb      	ldrh	r3, [r7, #28]
 800464c:	4413      	add	r3, r2
 800464e:	b299      	uxth	r1, r3
 8004650:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004654:	b29a      	uxth	r2, r3
 8004656:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800465a:	b29c      	uxth	r4, r3
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	4623      	mov	r3, r4
 8004662:	f7ff fca1 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	8bfb      	ldrh	r3, [r7, #30]
 800466a:	4413      	add	r3, r2
 800466c:	b298      	uxth	r0, r3
 800466e:	88ba      	ldrh	r2, [r7, #4]
 8004670:	8bbb      	ldrh	r3, [r7, #28]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	b299      	uxth	r1, r3
 8004676:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800467a:	b29a      	uxth	r2, r3
 800467c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004680:	b29c      	uxth	r4, r3
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	4623      	mov	r3, r4
 8004688:	f7ff fc8e 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	8bfb      	ldrh	r3, [r7, #30]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b298      	uxth	r0, r3
 8004694:	88ba      	ldrh	r2, [r7, #4]
 8004696:	8bbb      	ldrh	r3, [r7, #28]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	b299      	uxth	r1, r3
 800469c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046a6:	b29c      	uxth	r4, r3
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	4623      	mov	r3, r4
 80046ae:	f7ff fc7b 	bl	8003fa8 <LCD_Rect_Fill>
			if (s >= 0)
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	db0f      	blt.n	80046d8 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 80046b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046bc:	f1c3 0301 	rsb	r3, r3, #1
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	4413      	add	r3, r2
 80046ca:	61bb      	str	r3, [r7, #24]
				y--;
 80046cc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 80046d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	3306      	adds	r3, #6
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4413      	add	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80046ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3301      	adds	r3, #1
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	83fb      	strh	r3, [r7, #30]
 80046f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	fb03 f202 	mul.w	r2, r3, r2
 8004702:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	fb01 f303 	mul.w	r3, r1, r3
 800470c:	429a      	cmp	r2, r3
 800470e:	dd84      	ble.n	800461a <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	83fb      	strh	r3, [r7, #30]
 8004714:	2300      	movs	r3, #0
 8004716:	83bb      	strh	r3, [r7, #28]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	005a      	lsls	r2, r3, #1
 800471c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	f1c3 0301 	rsb	r3, r3, #1
 8004726:	6939      	ldr	r1, [r7, #16]
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
 8004730:	e06e      	b.n	8004810 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	8bfb      	ldrh	r3, [r7, #30]
 8004736:	4413      	add	r3, r2
 8004738:	b298      	uxth	r0, r3
 800473a:	88ba      	ldrh	r2, [r7, #4]
 800473c:	8bbb      	ldrh	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	b299      	uxth	r1, r3
 8004742:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004746:	b29a      	uxth	r2, r3
 8004748:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800474c:	b29c      	uxth	r4, r3
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4623      	mov	r3, r4
 8004754:	f7ff fc28 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	8bfb      	ldrh	r3, [r7, #30]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	b298      	uxth	r0, r3
 8004760:	88ba      	ldrh	r2, [r7, #4]
 8004762:	8bbb      	ldrh	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	b299      	uxth	r1, r3
 8004768:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800476c:	b29a      	uxth	r2, r3
 800476e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004772:	b29c      	uxth	r4, r3
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	4623      	mov	r3, r4
 800477a:	f7ff fc15 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	8bfb      	ldrh	r3, [r7, #30]
 8004782:	4413      	add	r3, r2
 8004784:	b298      	uxth	r0, r3
 8004786:	88ba      	ldrh	r2, [r7, #4]
 8004788:	8bbb      	ldrh	r3, [r7, #28]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	b299      	uxth	r1, r3
 800478e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004792:	b29a      	uxth	r2, r3
 8004794:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004798:	b29c      	uxth	r4, r3
 800479a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4623      	mov	r3, r4
 80047a0:	f7ff fc02 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	8bfb      	ldrh	r3, [r7, #30]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	b298      	uxth	r0, r3
 80047ac:	88ba      	ldrh	r2, [r7, #4]
 80047ae:	8bbb      	ldrh	r3, [r7, #28]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	b299      	uxth	r1, r3
 80047b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047be:	b29c      	uxth	r4, r3
 80047c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4623      	mov	r3, r4
 80047c6:	f7ff fbef 	bl	8003fa8 <LCD_Rect_Fill>
			if (s >= 0)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	db0f      	blt.n	80047f0 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 80047d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047d4:	f1c3 0301 	rsb	r3, r3, #1
 80047d8:	68ba      	ldr	r2, [r7, #8]
 80047da:	fb02 f303 	mul.w	r3, r2, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4413      	add	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
				x--;
 80047e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 80047f0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	3306      	adds	r3, #6
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4413      	add	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004804:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004808:	b29b      	uxth	r3, r3
 800480a:	3301      	adds	r3, #1
 800480c:	b29b      	uxth	r3, r3
 800480e:	83bb      	strh	r3, [r7, #28]
 8004810:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	fb03 f202 	mul.w	r2, r3, r2
 800481a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800481e:	6939      	ldr	r1, [r7, #16]
 8004820:	fb01 f303 	mul.w	r3, r1, r3
 8004824:	429a      	cmp	r2, r3
 8004826:	dd84      	ble.n	8004732 <LCD_Ellipse+0x38c>
}
 8004828:	bf00      	nop
 800482a:	3724      	adds	r7, #36	; 0x24
 800482c:	46bd      	mov	sp, r7
 800482e:	bd90      	pop	{r4, r7, pc}

08004830 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af02      	add	r7, sp, #8
 8004836:	4604      	mov	r4, r0
 8004838:	4608      	mov	r0, r1
 800483a:	4611      	mov	r1, r2
 800483c:	461a      	mov	r2, r3
 800483e:	4623      	mov	r3, r4
 8004840:	80fb      	strh	r3, [r7, #6]
 8004842:	4603      	mov	r3, r0
 8004844:	80bb      	strh	r3, [r7, #4]
 8004846:	460b      	mov	r3, r1
 8004848:	70fb      	strb	r3, [r7, #3]
 800484a:	4613      	mov	r3, r2
 800484c:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004852:	78fb      	ldrb	r3, [r7, #3]
 8004854:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	f1c3 0301 	rsb	r3, r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800485e:	e0fc      	b.n	8004a5a <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004860:	78bb      	ldrb	r3, [r7, #2]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d136      	bne.n	80048d4 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	b29b      	uxth	r3, r3
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	b298      	uxth	r0, r3
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	b29b      	uxth	r3, r3
 8004874:	88ba      	ldrh	r2, [r7, #4]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	b299      	uxth	r1, r3
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	b29b      	uxth	r3, r3
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	b29b      	uxth	r3, r3
 8004882:	3301      	adds	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	b29b      	uxth	r3, r3
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	b29b      	uxth	r3, r3
 800488e:	3301      	adds	r3, #1
 8004890:	b29c      	uxth	r4, r3
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4623      	mov	r3, r4
 8004898:	f7ff fb86 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	b29b      	uxth	r3, r3
 80048a0:	88fa      	ldrh	r2, [r7, #6]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	b298      	uxth	r0, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	88ba      	ldrh	r2, [r7, #4]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	b299      	uxth	r1, r3
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	005b      	lsls	r3, r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3301      	adds	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3301      	adds	r3, #1
 80048c6:	b29c      	uxth	r4, r3
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	4623      	mov	r3, r4
 80048ce:	f7ff fb6b 	bl	8003fa8 <LCD_Rect_Fill>
 80048d2:	e0a7      	b.n	8004a24 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	4413      	add	r3, r2
 80048dc:	b298      	uxth	r0, r3
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	88bb      	ldrh	r3, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	b299      	uxth	r1, r3
 80048e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048f2:	b29c      	uxth	r4, r3
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4623      	mov	r3, r4
 80048fa:	f7ff fb55 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	b29a      	uxth	r2, r3
 8004902:	88fb      	ldrh	r3, [r7, #6]
 8004904:	4413      	add	r3, r2
 8004906:	b298      	uxth	r0, r3
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	b29a      	uxth	r2, r3
 800490c:	88bb      	ldrh	r3, [r7, #4]
 800490e:	4413      	add	r3, r2
 8004910:	b299      	uxth	r1, r3
 8004912:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004916:	b29a      	uxth	r2, r3
 8004918:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800491c:	b29c      	uxth	r4, r3
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	4623      	mov	r3, r4
 8004924:	f7ff fb40 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	b29b      	uxth	r3, r3
 800492c:	88fa      	ldrh	r2, [r7, #6]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	b298      	uxth	r0, r3
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	b29a      	uxth	r2, r3
 8004936:	88bb      	ldrh	r3, [r7, #4]
 8004938:	4413      	add	r3, r2
 800493a:	b299      	uxth	r1, r3
 800493c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004940:	b29a      	uxth	r2, r3
 8004942:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004946:	b29c      	uxth	r4, r3
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	4623      	mov	r3, r4
 800494e:	f7ff fb2b 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	b29b      	uxth	r3, r3
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	b298      	uxth	r0, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	b29a      	uxth	r2, r3
 8004960:	88bb      	ldrh	r3, [r7, #4]
 8004962:	4413      	add	r3, r2
 8004964:	b299      	uxth	r1, r3
 8004966:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800496a:	b29a      	uxth	r2, r3
 800496c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004970:	b29c      	uxth	r4, r3
 8004972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	4623      	mov	r3, r4
 8004978:	f7ff fb16 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	b29a      	uxth	r2, r3
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	4413      	add	r3, r2
 8004984:	b298      	uxth	r0, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	b29b      	uxth	r3, r3
 800498a:	88ba      	ldrh	r2, [r7, #4]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	b299      	uxth	r1, r3
 8004990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004994:	b29a      	uxth	r2, r3
 8004996:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800499a:	b29c      	uxth	r4, r3
 800499c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	4623      	mov	r3, r4
 80049a2:	f7ff fb01 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	4413      	add	r3, r2
 80049ae:	b298      	uxth	r0, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	88ba      	ldrh	r2, [r7, #4]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b299      	uxth	r1, r3
 80049ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049be:	b29a      	uxth	r2, r3
 80049c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049c4:	b29c      	uxth	r4, r3
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	4623      	mov	r3, r4
 80049cc:	f7ff faec 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	88fa      	ldrh	r2, [r7, #6]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	b298      	uxth	r0, r3
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	b29b      	uxth	r3, r3
 80049de:	88ba      	ldrh	r2, [r7, #4]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	b299      	uxth	r1, r3
 80049e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049ee:	b29c      	uxth	r4, r3
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	9300      	str	r3, [sp, #0]
 80049f4:	4623      	mov	r3, r4
 80049f6:	f7ff fad7 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	88fa      	ldrh	r2, [r7, #6]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	b298      	uxth	r0, r3
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	88ba      	ldrh	r2, [r7, #4]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	b299      	uxth	r1, r3
 8004a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a18:	b29c      	uxth	r4, r3
 8004a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	4623      	mov	r3, r4
 8004a20:	f7ff fac2 	bl	8003fa8 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	da09      	bge.n	8004a3e <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1cda      	adds	r2, r3, #3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4413      	add	r3, r2
 8004a34:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	617b      	str	r3, [r7, #20]
 8004a3c:	e00d      	b.n	8004a5a <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1d5a      	adds	r2, r3, #5
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1acb      	subs	r3, r1, r3
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]
			a_++;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	3301      	adds	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
			b_--;
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	f77f aefe 	ble.w	8004860 <LCD_Circle+0x30>
		}
	}
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	371c      	adds	r7, #28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd90      	pop	{r4, r7, pc}

08004a6e <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004a6e:	b590      	push	{r4, r7, lr}
 8004a70:	b089      	sub	sp, #36	; 0x24
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	4604      	mov	r4, r0
 8004a76:	4608      	mov	r0, r1
 8004a78:	4611      	mov	r1, r2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	4623      	mov	r3, r4
 8004a7e:	80fb      	strh	r3, [r7, #6]
 8004a80:	4603      	mov	r3, r0
 8004a82:	80bb      	strh	r3, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	f1c3 0301 	rsb	r3, r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004a96:	2301      	movs	r3, #1
 8004a98:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	03d2      	lsls	r2, r2, #15
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004aac:	887b      	ldrh	r3, [r7, #2]
 8004aae:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004ab0:	e0cd      	b.n	8004c4e <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004ab2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	db0e      	blt.n	8004ad8 <LCD_Circle_Helper+0x6a>
			y--;
 8004aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004ac6:	8a7b      	ldrh	r3, [r7, #18]
 8004ac8:	3302      	adds	r3, #2
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004ace:	8afa      	ldrh	r2, [r7, #22]
 8004ad0:	8a7b      	ldrh	r3, [r7, #18]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004ad8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004ae4:	8abb      	ldrh	r3, [r7, #20]
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004aec:	8afa      	ldrh	r2, [r7, #22]
 8004aee:	8abb      	ldrh	r3, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004af6:	787b      	ldrb	r3, [r7, #1]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d025      	beq.n	8004b4c <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004b00:	88fa      	ldrh	r2, [r7, #6]
 8004b02:	8a3b      	ldrh	r3, [r7, #16]
 8004b04:	4413      	add	r3, r2
 8004b06:	b298      	uxth	r0, r3
 8004b08:	88ba      	ldrh	r2, [r7, #4]
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	b299      	uxth	r1, r3
 8004b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b1a:	b29c      	uxth	r4, r3
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	4623      	mov	r3, r4
 8004b22:	f7ff fa41 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004b26:	88fa      	ldrh	r2, [r7, #6]
 8004b28:	89fb      	ldrh	r3, [r7, #14]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	b298      	uxth	r0, r3
 8004b2e:	88ba      	ldrh	r2, [r7, #4]
 8004b30:	8a3b      	ldrh	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	b299      	uxth	r1, r3
 8004b36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b40:	b29c      	uxth	r4, r3
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4623      	mov	r3, r4
 8004b48:	f7ff fa2e 	bl	8003fa8 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004b4c:	787b      	ldrb	r3, [r7, #1]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004b56:	88fa      	ldrh	r2, [r7, #6]
 8004b58:	8a3b      	ldrh	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	b298      	uxth	r0, r3
 8004b5e:	88ba      	ldrh	r2, [r7, #4]
 8004b60:	89fb      	ldrh	r3, [r7, #14]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	b299      	uxth	r1, r3
 8004b66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b70:	b29c      	uxth	r4, r3
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	4623      	mov	r3, r4
 8004b78:	f7ff fa16 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004b7c:	88fa      	ldrh	r2, [r7, #6]
 8004b7e:	89fb      	ldrh	r3, [r7, #14]
 8004b80:	4413      	add	r3, r2
 8004b82:	b298      	uxth	r0, r3
 8004b84:	88ba      	ldrh	r2, [r7, #4]
 8004b86:	8a3b      	ldrh	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b299      	uxth	r1, r3
 8004b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b96:	b29c      	uxth	r4, r3
 8004b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9a:	9300      	str	r3, [sp, #0]
 8004b9c:	4623      	mov	r3, r4
 8004b9e:	f7ff fa03 	bl	8003fa8 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004ba2:	787b      	ldrb	r3, [r7, #1]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d025      	beq.n	8004bf8 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004bac:	88fa      	ldrh	r2, [r7, #6]
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	b298      	uxth	r0, r3
 8004bb4:	88ba      	ldrh	r2, [r7, #4]
 8004bb6:	8a3b      	ldrh	r3, [r7, #16]
 8004bb8:	4413      	add	r3, r2
 8004bba:	b299      	uxth	r1, r3
 8004bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bc6:	b29c      	uxth	r4, r3
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	4623      	mov	r3, r4
 8004bce:	f7ff f9eb 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	8a3b      	ldrh	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	b298      	uxth	r0, r3
 8004bda:	88ba      	ldrh	r2, [r7, #4]
 8004bdc:	89fb      	ldrh	r3, [r7, #14]
 8004bde:	4413      	add	r3, r2
 8004be0:	b299      	uxth	r1, r3
 8004be2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bec:	b29c      	uxth	r4, r3
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	f7ff f9d8 	bl	8003fa8 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004bf8:	787b      	ldrb	r3, [r7, #1]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d025      	beq.n	8004c4e <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	89fb      	ldrh	r3, [r7, #14]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b298      	uxth	r0, r3
 8004c0a:	88ba      	ldrh	r2, [r7, #4]
 8004c0c:	8a3b      	ldrh	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	b299      	uxth	r1, r3
 8004c12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c1c:	b29c      	uxth	r4, r3
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4623      	mov	r3, r4
 8004c24:	f7ff f9c0 	bl	8003fa8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004c28:	88fa      	ldrh	r2, [r7, #6]
 8004c2a:	8a3b      	ldrh	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b298      	uxth	r0, r3
 8004c30:	88ba      	ldrh	r2, [r7, #4]
 8004c32:	89fb      	ldrh	r3, [r7, #14]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	b299      	uxth	r1, r3
 8004c38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c42:	b29c      	uxth	r4, r3
 8004c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	4623      	mov	r3, r4
 8004c4a:	f7ff f9ad 	bl	8003fa8 <LCD_Rect_Fill>
	while (x < y) {
 8004c4e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004c52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	f6ff af2b 	blt.w	8004ab2 <LCD_Circle_Helper+0x44>
		}
	}
}
 8004c5c:	bf00      	nop
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd90      	pop	{r4, r7, pc}

08004c66 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004c66:	b590      	push	{r4, r7, lr}
 8004c68:	b085      	sub	sp, #20
 8004c6a:	af02      	add	r7, sp, #8
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	4608      	mov	r0, r1
 8004c70:	4611      	mov	r1, r2
 8004c72:	461a      	mov	r2, r3
 8004c74:	4623      	mov	r3, r4
 8004c76:	80fb      	strh	r3, [r7, #6]
 8004c78:	4603      	mov	r3, r0
 8004c7a:	80bb      	strh	r3, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	807b      	strh	r3, [r7, #2]
 8004c80:	4613      	mov	r3, r2
 8004c82:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004c84:	8b3a      	ldrh	r2, [r7, #24]
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	4413      	add	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	b298      	uxth	r0, r3
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	887b      	ldrh	r3, [r7, #2]
 8004c94:	4413      	add	r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	7f3b      	ldrb	r3, [r7, #28]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	4413      	add	r3, r2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	8b3b      	ldrh	r3, [r7, #24]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b02      	subs	r3, #2
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	88bc      	ldrh	r4, [r7, #4]
 8004cac:	88b9      	ldrh	r1, [r7, #4]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	7f3b      	ldrb	r3, [r7, #28]
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	f7ff f9b4 	bl	8004024 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004cbc:	8b3a      	ldrh	r2, [r7, #24]
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	b298      	uxth	r0, r3
 8004cc8:	88ba      	ldrh	r2, [r7, #4]
 8004cca:	883b      	ldrh	r3, [r7, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b299      	uxth	r1, r3
 8004cd4:	88fa      	ldrh	r2, [r7, #6]
 8004cd6:	887b      	ldrh	r3, [r7, #2]
 8004cd8:	4413      	add	r3, r2
 8004cda:	b29a      	uxth	r2, r3
 8004cdc:	7f3b      	ldrb	r3, [r7, #28]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	8b3b      	ldrh	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b02      	subs	r3, #2
 8004cec:	b29c      	uxth	r4, r3
 8004cee:	88ba      	ldrh	r2, [r7, #4]
 8004cf0:	883b      	ldrh	r3, [r7, #0]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	7f3b      	ldrb	r3, [r7, #28]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	4613      	mov	r3, r2
 8004d04:	4622      	mov	r2, r4
 8004d06:	f7ff f98d 	bl	8004024 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004d0a:	8b3a      	ldrh	r2, [r7, #24]
 8004d0c:	88bb      	ldrh	r3, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	3302      	adds	r3, #2
 8004d14:	b299      	uxth	r1, r3
 8004d16:	88ba      	ldrh	r2, [r7, #4]
 8004d18:	883b      	ldrh	r3, [r7, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	7f3b      	ldrb	r3, [r7, #28]
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	8b3b      	ldrh	r3, [r7, #24]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	3b02      	subs	r3, #2
 8004d2e:	b29c      	uxth	r4, r3
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	88f8      	ldrh	r0, [r7, #6]
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	7f3b      	ldrb	r3, [r7, #28]
 8004d3a:	9300      	str	r3, [sp, #0]
 8004d3c:	4623      	mov	r3, r4
 8004d3e:	f7ff f971 	bl	8004024 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004d42:	88fa      	ldrh	r2, [r7, #6]
 8004d44:	887b      	ldrh	r3, [r7, #2]
 8004d46:	4413      	add	r3, r2
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b298      	uxth	r0, r3
 8004d4e:	8b3a      	ldrh	r2, [r7, #24]
 8004d50:	88bb      	ldrh	r3, [r7, #4]
 8004d52:	4413      	add	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3302      	adds	r3, #2
 8004d58:	b299      	uxth	r1, r3
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	4413      	add	r3, r2
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29c      	uxth	r4, r3
 8004d66:	88ba      	ldrh	r2, [r7, #4]
 8004d68:	883b      	ldrh	r3, [r7, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	7f3b      	ldrb	r3, [r7, #28]
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	8b3b      	ldrh	r3, [r7, #24]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b02      	subs	r3, #2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	9301      	str	r3, [sp, #4]
 8004d84:	7f3b      	ldrb	r3, [r7, #28]
 8004d86:	9300      	str	r3, [sp, #0]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	f7ff f94a 	bl	8004024 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8004d90:	8b3a      	ldrh	r2, [r7, #24]
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	4413      	add	r3, r2
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3302      	adds	r3, #2
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	b218      	sxth	r0, r3
 8004d9e:	8b3a      	ldrh	r2, [r7, #24]
 8004da0:	88bb      	ldrh	r3, [r7, #4]
 8004da2:	4413      	add	r3, r2
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	3302      	adds	r3, #2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	b219      	sxth	r1, r3
 8004dac:	8b3b      	ldrh	r3, [r7, #24]
 8004dae:	3302      	adds	r3, #2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b21a      	sxth	r2, r3
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	7f3b      	ldrb	r3, [r7, #28]
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f7ff fe56 	bl	8004a6e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	8b3b      	ldrh	r3, [r7, #24]
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b03      	subs	r3, #3
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	b218      	sxth	r0, r3
 8004dd6:	8b3a      	ldrh	r2, [r7, #24]
 8004dd8:	88bb      	ldrh	r3, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	3302      	adds	r3, #2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	b219      	sxth	r1, r3
 8004de4:	8b3b      	ldrh	r3, [r7, #24]
 8004de6:	3302      	adds	r3, #2
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b21a      	sxth	r2, r3
 8004dec:	6a3b      	ldr	r3, [r7, #32]
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	7f3b      	ldrb	r3, [r7, #28]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2302      	movs	r3, #2
 8004df6:	f7ff fe3a 	bl	8004a6e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8004dfa:	88fa      	ldrh	r2, [r7, #6]
 8004dfc:	887b      	ldrh	r3, [r7, #2]
 8004dfe:	4413      	add	r3, r2
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	8b3b      	ldrh	r3, [r7, #24]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3b03      	subs	r3, #3
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	b218      	sxth	r0, r3
 8004e0e:	88ba      	ldrh	r2, [r7, #4]
 8004e10:	883b      	ldrh	r3, [r7, #0]
 8004e12:	4413      	add	r3, r2
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	8b3b      	ldrh	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b03      	subs	r3, #3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	b219      	sxth	r1, r3
 8004e22:	8b3b      	ldrh	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b21a      	sxth	r2, r3
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	7f3b      	ldrb	r3, [r7, #28]
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2304      	movs	r3, #4
 8004e34:	f7ff fe1b 	bl	8004a6e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8004e38:	8b3a      	ldrh	r2, [r7, #24]
 8004e3a:	88fb      	ldrh	r3, [r7, #6]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3302      	adds	r3, #2
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b218      	sxth	r0, r3
 8004e46:	88ba      	ldrh	r2, [r7, #4]
 8004e48:	883b      	ldrh	r3, [r7, #0]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	b29a      	uxth	r2, r3
 8004e4e:	8b3b      	ldrh	r3, [r7, #24]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b03      	subs	r3, #3
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	b219      	sxth	r1, r3
 8004e5a:	8b3b      	ldrh	r3, [r7, #24]
 8004e5c:	3302      	adds	r3, #2
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	b21a      	sxth	r2, r3
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	7f3b      	ldrb	r3, [r7, #28]
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	f7ff fdff 	bl	8004a6e <LCD_Circle_Helper>
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd90      	pop	{r4, r7, pc}

08004e78 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8004e78:	b590      	push	{r4, r7, lr}
 8004e7a:	b089      	sub	sp, #36	; 0x24
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	4604      	mov	r4, r0
 8004e80:	4608      	mov	r0, r1
 8004e82:	4611      	mov	r1, r2
 8004e84:	461a      	mov	r2, r3
 8004e86:	4623      	mov	r3, r4
 8004e88:	80fb      	strh	r3, [r7, #6]
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	80bb      	strh	r3, [r7, #4]
 8004e8e:	460b      	mov	r3, r1
 8004e90:	807b      	strh	r3, [r7, #2]
 8004e92:	4613      	mov	r3, r2
 8004e94:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	f1c3 0301 	rsb	r3, r3, #1
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004ea4:	887b      	ldrh	r3, [r7, #2]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	03d2      	lsls	r2, r2, #15
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004eba:	e0ab      	b.n	8005014 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8004ebc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	db0e      	blt.n	8004ee2 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8004ec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004ed0:	8a7b      	ldrh	r3, [r7, #18]
 8004ed2:	3302      	adds	r3, #2
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004ed8:	8afa      	ldrh	r2, [r7, #22]
 8004eda:	8a7b      	ldrh	r3, [r7, #18]
 8004edc:	4413      	add	r3, r2
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004ee2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3301      	adds	r3, #1
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004eee:	8abb      	ldrh	r3, [r7, #20]
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004ef6:	8afa      	ldrh	r2, [r7, #22]
 8004ef8:	8abb      	ldrh	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8004f00:	787b      	ldrb	r3, [r7, #1]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d03f      	beq.n	8004f8a <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8004f0a:	88fa      	ldrh	r2, [r7, #6]
 8004f0c:	8a3b      	ldrh	r3, [r7, #16]
 8004f0e:	4413      	add	r3, r2
 8004f10:	b298      	uxth	r0, r3
 8004f12:	88ba      	ldrh	r2, [r7, #4]
 8004f14:	89fb      	ldrh	r3, [r7, #14]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	b299      	uxth	r1, r3
 8004f1a:	88fa      	ldrh	r2, [r7, #6]
 8004f1c:	8a3b      	ldrh	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	b29c      	uxth	r4, r3
 8004f22:	88ba      	ldrh	r2, [r7, #4]
 8004f24:	89fb      	ldrh	r3, [r7, #14]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	89fb      	ldrh	r3, [r7, #14]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	4413      	add	r3, r2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f36:	4413      	add	r3, r2
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	4613      	mov	r3, r2
 8004f44:	4622      	mov	r2, r4
 8004f46:	f7ff f86d 	bl	8004024 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8004f4a:	88fa      	ldrh	r2, [r7, #6]
 8004f4c:	89fb      	ldrh	r3, [r7, #14]
 8004f4e:	4413      	add	r3, r2
 8004f50:	b298      	uxth	r0, r3
 8004f52:	88ba      	ldrh	r2, [r7, #4]
 8004f54:	8a3b      	ldrh	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	b299      	uxth	r1, r3
 8004f5a:	88fa      	ldrh	r2, [r7, #6]
 8004f5c:	89fb      	ldrh	r3, [r7, #14]
 8004f5e:	4413      	add	r3, r2
 8004f60:	b29c      	uxth	r4, r3
 8004f62:	88ba      	ldrh	r2, [r7, #4]
 8004f64:	8a3b      	ldrh	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	8a3b      	ldrh	r3, [r7, #16]
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f76:	4413      	add	r3, r2
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	4622      	mov	r2, r4
 8004f86:	f7ff f84d 	bl	8004024 <LCD_Line>
		}
		if (cornername & 0x2) {
 8004f8a:	787b      	ldrb	r3, [r7, #1]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d03f      	beq.n	8005014 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	8a3b      	ldrh	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	b298      	uxth	r0, r3
 8004f9c:	88ba      	ldrh	r2, [r7, #4]
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	b299      	uxth	r1, r3
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	8a3b      	ldrh	r3, [r7, #16]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29c      	uxth	r4, r3
 8004fac:	88ba      	ldrh	r2, [r7, #4]
 8004fae:	89fb      	ldrh	r3, [r7, #14]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004fc0:	4413      	add	r3, r2
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	9301      	str	r3, [sp, #4]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	4622      	mov	r2, r4
 8004fd0:	f7ff f828 	bl	8004024 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8004fd4:	88fa      	ldrh	r2, [r7, #6]
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	b298      	uxth	r0, r3
 8004fdc:	88ba      	ldrh	r2, [r7, #4]
 8004fde:	8a3b      	ldrh	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	b299      	uxth	r1, r3
 8004fe4:	88fa      	ldrh	r2, [r7, #6]
 8004fe6:	89fb      	ldrh	r3, [r7, #14]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	b29c      	uxth	r4, r3
 8004fec:	88ba      	ldrh	r2, [r7, #4]
 8004fee:	8a3b      	ldrh	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	8a3b      	ldrh	r3, [r7, #16]
 8004ff6:	005b      	lsls	r3, r3, #1
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005000:	4413      	add	r3, r2
 8005002:	b29a      	uxth	r2, r3
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	2301      	movs	r3, #1
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	4613      	mov	r3, r2
 800500e:	4622      	mov	r2, r4
 8005010:	f7ff f808 	bl	8004024 <LCD_Line>
	while (x < y) {
 8005014:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005018:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800501c:	429a      	cmp	r2, r3
 800501e:	f6ff af4d 	blt.w	8004ebc <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	371c      	adds	r7, #28
 8005028:	46bd      	mov	sp, r7
 800502a:	bd90      	pop	{r4, r7, pc}

0800502c <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 800502c:	b590      	push	{r4, r7, lr}
 800502e:	b085      	sub	sp, #20
 8005030:	af02      	add	r7, sp, #8
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	4611      	mov	r1, r2
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	80fb      	strh	r3, [r7, #6]
 800503e:	4603      	mov	r3, r0
 8005040:	80bb      	strh	r3, [r7, #4]
 8005042:	460b      	mov	r3, r1
 8005044:	807b      	strh	r3, [r7, #2]
 8005046:	4613      	mov	r3, r2
 8005048:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	8b3b      	ldrh	r3, [r7, #24]
 800504e:	4413      	add	r3, r2
 8005050:	b298      	uxth	r0, r3
 8005052:	8b3b      	ldrh	r3, [r7, #24]
 8005054:	005b      	lsls	r3, r3, #1
 8005056:	b29b      	uxth	r3, r3
 8005058:	887a      	ldrh	r2, [r7, #2]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	b29a      	uxth	r2, r3
 800505e:	883c      	ldrh	r4, [r7, #0]
 8005060:	88b9      	ldrh	r1, [r7, #4]
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4623      	mov	r3, r4
 8005068:	f7fe ff9e 	bl	8003fa8 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	887b      	ldrh	r3, [r7, #2]
 8005070:	4413      	add	r3, r2
 8005072:	b29a      	uxth	r2, r3
 8005074:	8b3b      	ldrh	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	b29b      	uxth	r3, r3
 800507a:	3b01      	subs	r3, #1
 800507c:	b29b      	uxth	r3, r3
 800507e:	b218      	sxth	r0, r3
 8005080:	88ba      	ldrh	r2, [r7, #4]
 8005082:	8b3b      	ldrh	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	b219      	sxth	r1, r3
 800508a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800508e:	8b3b      	ldrh	r3, [r7, #24]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b29b      	uxth	r3, r3
 8005094:	883a      	ldrh	r2, [r7, #0]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29b      	uxth	r3, r3
 800509e:	b21b      	sxth	r3, r3
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	9201      	str	r2, [sp, #4]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2301      	movs	r3, #1
 80050a8:	4622      	mov	r2, r4
 80050aa:	f7ff fee5 	bl	8004e78 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 80050ae:	88fa      	ldrh	r2, [r7, #6]
 80050b0:	8b3b      	ldrh	r3, [r7, #24]
 80050b2:	4413      	add	r3, r2
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	b218      	sxth	r0, r3
 80050b8:	88ba      	ldrh	r2, [r7, #4]
 80050ba:	8b3b      	ldrh	r3, [r7, #24]
 80050bc:	4413      	add	r3, r2
 80050be:	b29b      	uxth	r3, r3
 80050c0:	b219      	sxth	r1, r3
 80050c2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 80050c6:	8b3b      	ldrh	r3, [r7, #24]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	883a      	ldrh	r2, [r7, #0]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	3b01      	subs	r3, #1
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	b21b      	sxth	r3, r3
 80050d8:	69fa      	ldr	r2, [r7, #28]
 80050da:	9201      	str	r2, [sp, #4]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2302      	movs	r3, #2
 80050e0:	4622      	mov	r2, r4
 80050e2:	f7ff fec9 	bl	8004e78 <LCD_Circle_Fill_Helper>
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd90      	pop	{r4, r7, pc}

080050ee <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 80050ee:	b590      	push	{r4, r7, lr}
 80050f0:	b08b      	sub	sp, #44	; 0x2c
 80050f2:	af02      	add	r7, sp, #8
 80050f4:	60ba      	str	r2, [r7, #8]
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	4603      	mov	r3, r0
 80050fa:	81fb      	strh	r3, [r7, #14]
 80050fc:	460b      	mov	r3, r1
 80050fe:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 800510c:	2300      	movs	r3, #0
 800510e:	777b      	strb	r3, [r7, #29]
 8005110:	2300      	movs	r3, #0
 8005112:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005118:	2300      	movs	r3, #0
 800511a:	763b      	strb	r3, [r7, #24]
 800511c:	e093      	b.n	8005246 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800511e:	2300      	movs	r3, #0
 8005120:	767b      	strb	r3, [r7, #25]
 8005122:	e052      	b.n	80051ca <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005124:	7f3b      	ldrb	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800512a:	8bfb      	ldrh	r3, [r7, #30]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	83fa      	strh	r2, [r7, #30]
 8005130:	461a      	mov	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	4413      	add	r3, r2
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800513e:	7f7a      	ldrb	r2, [r7, #29]
 8005140:	7f3b      	ldrb	r3, [r7, #28]
 8005142:	4013      	ands	r3, r2
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <LCD_Char+0x64>
			{
				set_pixels++;
 800514a:	8b7b      	ldrh	r3, [r7, #26]
 800514c:	3301      	adds	r3, #1
 800514e:	837b      	strh	r3, [r7, #26]
 8005150:	e035      	b.n	80051be <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8005152:	8b7b      	ldrh	r3, [r7, #26]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d032      	beq.n	80051be <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800515e:	461a      	mov	r2, r3
 8005160:	7e7b      	ldrb	r3, [r7, #25]
 8005162:	441a      	add	r2, r3
 8005164:	8b7b      	ldrh	r3, [r7, #26]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	b29a      	uxth	r2, r3
 800516a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800516e:	b29b      	uxth	r3, r3
 8005170:	fb12 f303 	smulbb	r3, r2, r3
 8005174:	b29a      	uxth	r2, r3
 8005176:	89fb      	ldrh	r3, [r7, #14]
 8005178:	4413      	add	r3, r2
 800517a:	b298      	uxth	r0, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005182:	461a      	mov	r2, r3
 8005184:	7e3b      	ldrb	r3, [r7, #24]
 8005186:	4413      	add	r3, r2
 8005188:	b29a      	uxth	r2, r3
 800518a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800518e:	b29b      	uxth	r3, r3
 8005190:	fb12 f303 	smulbb	r3, r2, r3
 8005194:	b29a      	uxth	r2, r3
 8005196:	89bb      	ldrh	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	b299      	uxth	r1, r3
 800519c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	8b7a      	ldrh	r2, [r7, #26]
 80051a4:	fb12 f303 	smulbb	r3, r2, r3
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051ae:	b29c      	uxth	r4, r3
 80051b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4623      	mov	r3, r4
 80051b6:	f7fe fef7 	bl	8003fa8 <LCD_Rect_Fill>
				set_pixels = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80051be:	7f3b      	ldrb	r3, [r7, #28]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80051c4:	7e7b      	ldrb	r3, [r7, #25]
 80051c6:	3301      	adds	r3, #1
 80051c8:	767b      	strb	r3, [r7, #25]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	789b      	ldrb	r3, [r3, #2]
 80051ce:	7e7a      	ldrb	r2, [r7, #25]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3a7      	bcc.n	8005124 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80051d4:	8b7b      	ldrh	r3, [r7, #26]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d032      	beq.n	8005240 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80051e0:	461a      	mov	r2, r3
 80051e2:	7e7b      	ldrb	r3, [r7, #25]
 80051e4:	441a      	add	r2, r3
 80051e6:	8b7b      	ldrh	r3, [r7, #26]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	fb12 f303 	smulbb	r3, r2, r3
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	89fb      	ldrh	r3, [r7, #14]
 80051fa:	4413      	add	r3, r2
 80051fc:	b298      	uxth	r0, r3
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005204:	461a      	mov	r2, r3
 8005206:	7e3b      	ldrb	r3, [r7, #24]
 8005208:	4413      	add	r3, r2
 800520a:	b29a      	uxth	r2, r3
 800520c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005210:	b29b      	uxth	r3, r3
 8005212:	fb12 f303 	smulbb	r3, r2, r3
 8005216:	b29a      	uxth	r2, r3
 8005218:	89bb      	ldrh	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	b299      	uxth	r1, r3
 800521e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005222:	b29b      	uxth	r3, r3
 8005224:	8b7a      	ldrh	r2, [r7, #26]
 8005226:	fb12 f303 	smulbb	r3, r2, r3
 800522a:	b29a      	uxth	r2, r3
 800522c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005230:	b29c      	uxth	r4, r3
 8005232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	4623      	mov	r3, r4
 8005238:	f7fe feb6 	bl	8003fa8 <LCD_Rect_Fill>
			set_pixels = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005240:	7e3b      	ldrb	r3, [r7, #24]
 8005242:	3301      	adds	r3, #1
 8005244:	763b      	strb	r3, [r7, #24]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	78db      	ldrb	r3, [r3, #3]
 800524a:	7e3a      	ldrb	r2, [r7, #24]
 800524c:	429a      	cmp	r2, r3
 800524e:	f4ff af66 	bcc.w	800511e <LCD_Char+0x30>
		}
	}
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	3724      	adds	r7, #36	; 0x24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd90      	pop	{r4, r7, pc}

0800525c <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800525c:	b590      	push	{r4, r7, lr}
 800525e:	b08f      	sub	sp, #60	; 0x3c
 8005260:	af02      	add	r7, sp, #8
 8005262:	60ba      	str	r2, [r7, #8]
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	4603      	mov	r3, r0
 8005268:	81fb      	strh	r3, [r7, #14]
 800526a:	460b      	mov	r3, r1
 800526c:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800526e:	89fb      	ldrh	r3, [r7, #14]
 8005270:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8005272:	89bb      	ldrh	r3, [r7, #12]
 8005274:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8005276:	f107 031c 	add.w	r3, r7, #28
 800527a:	220c      	movs	r2, #12
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4618      	mov	r0, r3
 8005280:	f017 fe3a 	bl	801cef8 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005284:	2300      	movs	r3, #0
 8005286:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005288:	e056      	b.n	8005338 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 800528a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	4413      	add	r3, r2
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8005296:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800529a:	2b0a      	cmp	r3, #10
 800529c:	d10f      	bne.n	80052be <LCD_Font+0x62>
		{
			cursor_x = x;
 800529e:	89fb      	ldrh	r3, [r7, #14]
 80052a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80052a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	fb12 f303 	smulbb	r3, r2, r3
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052b6:	4413      	add	r3, r2
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052bc:	e039      	b.n	8005332 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80052be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80052c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d333      	bcc.n	8005332 <LCD_Font+0xd6>
 80052ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052ce:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d82d      	bhi.n	8005332 <LCD_Font+0xd6>
 80052d6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052da:	2b0d      	cmp	r3, #13
 80052dc:	d029      	beq.n	8005332 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80052de:	6a3a      	ldr	r2, [r7, #32]
 80052e0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80052e4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80052e8:	1a5b      	subs	r3, r3, r1
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	18d1      	adds	r1, r2, r3
 80052ee:	f107 0314 	add.w	r3, r7, #20
 80052f2:	2208      	movs	r2, #8
 80052f4:	4618      	mov	r0, r3
 80052f6:	f017 fdff 	bl	801cef8 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 80052fa:	f107 041c 	add.w	r4, r7, #28
 80052fe:	f107 0214 	add.w	r2, r7, #20
 8005302:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005306:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800530a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800530c:	9301      	str	r3, [sp, #4]
 800530e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	4623      	mov	r3, r4
 8005316:	f7ff feea 	bl	80050ee <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800531a:	7e3b      	ldrb	r3, [r7, #24]
 800531c:	b29a      	uxth	r2, r3
 800531e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005322:	b29b      	uxth	r3, r3
 8005324:	fb12 f303 	smulbb	r3, r2, r3
 8005328:	b29a      	uxth	r2, r3
 800532a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800532c:	4413      	add	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005332:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005334:	3301      	adds	r3, #1
 8005336:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005338:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f013 ff06 	bl	801914c <strlen>
 8005340:	4603      	mov	r3, r0
 8005342:	429c      	cmp	r4, r3
 8005344:	d3a1      	bcc.n	800528a <LCD_Font+0x2e>
		}
	}
}
 8005346:	bf00      	nop
 8005348:	bf00      	nop
 800534a:	3734      	adds	r7, #52	; 0x34
 800534c:	46bd      	mov	sp, r7
 800534e:	bd90      	pop	{r4, r7, pc}

08005350 <LCD_Init>:

void LCD_Init(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005354:	2096      	movs	r0, #150	; 0x96
 8005356:	f001 fe6d 	bl	8007034 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 800535a:	2001      	movs	r0, #1
 800535c:	f7fe fd95 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 8005360:	2029      	movs	r0, #41	; 0x29
 8005362:	f7fe fd92 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8005366:	20e2      	movs	r0, #226	; 0xe2
 8005368:	f7fe fd8f 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 800536c:	201d      	movs	r0, #29
 800536e:	f7fe fd9b 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 8005372:	2002      	movs	r0, #2
 8005374:	f7fe fd98 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8005378:	20ff      	movs	r0, #255	; 0xff
 800537a:	f7fe fd95 	bl	8003ea8 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 800537e:	20e0      	movs	r0, #224	; 0xe0
 8005380:	f7fe fd83 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 8005384:	2001      	movs	r0, #1
 8005386:	f7fe fd8f 	bl	8003ea8 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 800538a:	2078      	movs	r0, #120	; 0x78
 800538c:	f001 fe52 	bl	8007034 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 8005390:	20e0      	movs	r0, #224	; 0xe0
 8005392:	f7fe fd7a 	bl	8003e8a <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 8005396:	2003      	movs	r0, #3
 8005398:	f7fe fd86 	bl	8003ea8 <LCD_Send_Dat>
	HAL_Delay(120);
 800539c:	2078      	movs	r0, #120	; 0x78
 800539e:	f001 fe49 	bl	8007034 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80053a2:	2001      	movs	r0, #1
 80053a4:	f7fe fd71 	bl	8003e8a <LCD_Send_Cmd>
	HAL_Delay(120);
 80053a8:	2078      	movs	r0, #120	; 0x78
 80053aa:	f001 fe43 	bl	8007034 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80053ae:	20e6      	movs	r0, #230	; 0xe6
 80053b0:	f7fe fd6b 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80053b4:	2003      	movs	r0, #3
 80053b6:	f7fe fd77 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80053ba:	2085      	movs	r0, #133	; 0x85
 80053bc:	f7fe fd74 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 80053c0:	201d      	movs	r0, #29
 80053c2:	f7fe fd71 	bl	8003ea8 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80053c6:	20b0      	movs	r0, #176	; 0xb0
 80053c8:	f7fe fd5f 	bl	8003e8a <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80053cc:	20ae      	movs	r0, #174	; 0xae
 80053ce:	f7fe fd6b 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80053d2:	2020      	movs	r0, #32
 80053d4:	f7fe fd68 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80053d8:	2003      	movs	r0, #3
 80053da:	f7fe fd65 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80053de:	201f      	movs	r0, #31
 80053e0:	f7fe fd62 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 80053e4:	2001      	movs	r0, #1
 80053e6:	f7fe fd5f 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 80053ea:	20df      	movs	r0, #223	; 0xdf
 80053ec:	f7fe fd5c 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 80053f0:	202d      	movs	r0, #45	; 0x2d
 80053f2:	f7fe fd59 	bl	8003ea8 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 80053f6:	20b4      	movs	r0, #180	; 0xb4
 80053f8:	f7fe fd47 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 80053fc:	2003      	movs	r0, #3
 80053fe:	f7fe fd53 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005402:	20a0      	movs	r0, #160	; 0xa0
 8005404:	f7fe fd50 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8005408:	2000      	movs	r0, #0
 800540a:	f7fe fd4d 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 800540e:	202e      	movs	r0, #46	; 0x2e
 8005410:	f7fe fd4a 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005414:	2030      	movs	r0, #48	; 0x30
 8005416:	f7fe fd47 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800541a:	2000      	movs	r0, #0
 800541c:	f7fe fd44 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005420:	200f      	movs	r0, #15
 8005422:	f7fe fd41 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8005426:	2000      	movs	r0, #0
 8005428:	f7fe fd3e 	bl	8003ea8 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 800542c:	20b6      	movs	r0, #182	; 0xb6
 800542e:	f7fe fd2c 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8005432:	2002      	movs	r0, #2
 8005434:	f7fe fd38 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005438:	200d      	movs	r0, #13
 800543a:	f7fe fd35 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 800543e:	2000      	movs	r0, #0
 8005440:	f7fe fd32 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005444:	2010      	movs	r0, #16
 8005446:	f7fe fd2f 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 800544a:	2010      	movs	r0, #16
 800544c:	f7fe fd2c 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8005450:	2008      	movs	r0, #8
 8005452:	f7fe fd29 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8005456:	2000      	movs	r0, #0
 8005458:	f7fe fd26 	bl	8003ea8 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 800545c:	20be      	movs	r0, #190	; 0xbe
 800545e:	f7fe fd14 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8005462:	2008      	movs	r0, #8
 8005464:	f7fe fd20 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8005468:	20ff      	movs	r0, #255	; 0xff
 800546a:	f7fe fd1d 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 800546e:	2001      	movs	r0, #1
 8005470:	f7fe fd1a 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8005474:	2036      	movs	r0, #54	; 0x36
 8005476:	f7fe fd08 	bl	8003e8a <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 800547a:	2003      	movs	r0, #3
 800547c:	f7fe fd14 	bl	8003ea8 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 8005480:	20f0      	movs	r0, #240	; 0xf0
 8005482:	f7fe fd02 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 8005486:	2003      	movs	r0, #3
 8005488:	f7fe fd0e 	bl	8003ea8 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 800548c:	2029      	movs	r0, #41	; 0x29
 800548e:	f7fe fcfc 	bl	8003e8a <LCD_Send_Cmd>
}
 8005492:	bf00      	nop
 8005494:	bd80      	pop	{r7, pc}

08005496 <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b082      	sub	sp, #8
 800549a:	af00      	add	r7, sp, #0
 800549c:	4603      	mov	r3, r0
 800549e:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80054a0:	20be      	movs	r0, #190	; 0xbe
 80054a2:	f7fe fcf2 	bl	8003e8a <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80054a6:	2008      	movs	r0, #8
 80054a8:	f7fe fcfe 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe fcf9 	bl	8003ea8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 80054b6:	2001      	movs	r0, #1
 80054b8:	f7fe fcf6 	bl	8003ea8 <LCD_Send_Dat>
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ca:	2300      	movs	r3, #0
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_MspInit+0x4c>)
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	4a0f      	ldr	r2, [pc, #60]	; (8005510 <HAL_MspInit+0x4c>)
 80054d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d8:	6453      	str	r3, [r2, #68]	; 0x44
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <HAL_MspInit+0x4c>)
 80054dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	607b      	str	r3, [r7, #4]
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_MspInit+0x4c>)
 80054ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <HAL_MspInit+0x4c>)
 80054f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f4:	6413      	str	r3, [r2, #64]	; 0x40
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_MspInit+0x4c>)
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40023800 	.word	0x40023800

08005514 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b08a      	sub	sp, #40	; 0x28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800551c:	f107 0314 	add.w	r3, r7, #20
 8005520:	2200      	movs	r2, #0
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	605a      	str	r2, [r3, #4]
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	60da      	str	r2, [r3, #12]
 800552a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <HAL_DAC_MspInit+0x7c>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d127      	bne.n	8005586 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_DAC_MspInit+0x80>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a15      	ldr	r2, [pc, #84]	; (8005594 <HAL_DAC_MspInit+0x80>)
 8005540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <HAL_DAC_MspInit+0x80>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554e:	60fb      	str	r3, [r7, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <HAL_DAC_MspInit+0x80>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <HAL_DAC_MspInit+0x80>)
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b0c      	ldr	r3, [pc, #48]	; (8005594 <HAL_DAC_MspInit+0x80>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800556e:	2330      	movs	r3, #48	; 0x30
 8005570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005572:	2303      	movs	r3, #3
 8005574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005576:	2300      	movs	r3, #0
 8005578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	4805      	ldr	r0, [pc, #20]	; (8005598 <HAL_DAC_MspInit+0x84>)
 8005582:	f005 fe73 	bl	800b26c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005586:	bf00      	nop
 8005588:	3728      	adds	r7, #40	; 0x28
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40007400 	.word	0x40007400
 8005594:	40023800 	.word	0x40023800
 8005598:	40020000 	.word	0x40020000

0800559c <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <HAL_DAC_MspDeInit+0x30>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d109      	bne.n	80055c2 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 80055ae:	4b08      	ldr	r3, [pc, #32]	; (80055d0 <HAL_DAC_MspDeInit+0x34>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b2:	4a07      	ldr	r2, [pc, #28]	; (80055d0 <HAL_DAC_MspDeInit+0x34>)
 80055b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80055b8:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 80055ba:	2130      	movs	r1, #48	; 0x30
 80055bc:	4805      	ldr	r0, [pc, #20]	; (80055d4 <HAL_DAC_MspDeInit+0x38>)
 80055be:	f005 fff1 	bl	800b5a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	40007400 	.word	0x40007400
 80055d0:	40023800 	.word	0x40023800
 80055d4:	40020000 	.word	0x40020000

080055d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b08a      	sub	sp, #40	; 0x28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a21      	ldr	r2, [pc, #132]	; (800567c <HAL_I2C_MspInit+0xa4>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d13b      	bne.n	8005672 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055fa:	2300      	movs	r3, #0
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	4b20      	ldr	r3, [pc, #128]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	4a1f      	ldr	r2, [pc, #124]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	6313      	str	r3, [r2, #48]	; 0x30
 800560a:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005616:	23c0      	movs	r3, #192	; 0xc0
 8005618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800561a:	2312      	movs	r3, #18
 800561c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005622:	2303      	movs	r3, #3
 8005624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005626:	2304      	movs	r3, #4
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800562a:	f107 0314 	add.w	r3, r7, #20
 800562e:	4619      	mov	r1, r3
 8005630:	4814      	ldr	r0, [pc, #80]	; (8005684 <HAL_I2C_MspInit+0xac>)
 8005632:	f005 fe1b 	bl	800b26c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	4a10      	ldr	r2, [pc, #64]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 8005640:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005644:	6413      	str	r3, [r2, #64]	; 0x40
 8005646:	4b0e      	ldr	r3, [pc, #56]	; (8005680 <HAL_I2C_MspInit+0xa8>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8005652:	2200      	movs	r2, #0
 8005654:	2100      	movs	r1, #0
 8005656:	201f      	movs	r0, #31
 8005658:	f001 ffe3 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800565c:	201f      	movs	r0, #31
 800565e:	f001 fffc 	bl	800765a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8005662:	2200      	movs	r2, #0
 8005664:	2100      	movs	r1, #0
 8005666:	2020      	movs	r0, #32
 8005668:	f001 ffdb 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800566c:	2020      	movs	r0, #32
 800566e:	f001 fff4 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005672:	bf00      	nop
 8005674:	3728      	adds	r7, #40	; 0x28
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40005400 	.word	0x40005400
 8005680:	40023800 	.word	0x40023800
 8005684:	40020400 	.word	0x40020400

08005688 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a0d      	ldr	r2, [pc, #52]	; (80056cc <HAL_I2C_MspDeInit+0x44>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d113      	bne.n	80056c2 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800569a:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <HAL_I2C_MspDeInit+0x48>)
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	4a0c      	ldr	r2, [pc, #48]	; (80056d0 <HAL_I2C_MspDeInit+0x48>)
 80056a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80056a6:	2140      	movs	r1, #64	; 0x40
 80056a8:	480a      	ldr	r0, [pc, #40]	; (80056d4 <HAL_I2C_MspDeInit+0x4c>)
 80056aa:	f005 ff7b 	bl	800b5a4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80056ae:	2180      	movs	r1, #128	; 0x80
 80056b0:	4808      	ldr	r0, [pc, #32]	; (80056d4 <HAL_I2C_MspDeInit+0x4c>)
 80056b2:	f005 ff77 	bl	800b5a4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80056b6:	201f      	movs	r0, #31
 80056b8:	f001 ffdd 	bl	8007676 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80056bc:	2020      	movs	r0, #32
 80056be:	f001 ffda 	bl	8007676 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	40005400 	.word	0x40005400
 80056d0:	40023800 	.word	0x40023800
 80056d4:	40020400 	.word	0x40020400

080056d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08e      	sub	sp, #56	; 0x38
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	605a      	str	r2, [r3, #4]
 80056ea:	609a      	str	r2, [r3, #8]
 80056ec:	60da      	str	r2, [r3, #12]
 80056ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a89      	ldr	r2, [pc, #548]	; (800591c <HAL_SPI_MspInit+0x244>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d12c      	bne.n	8005754 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	4b88      	ldr	r3, [pc, #544]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005702:	4a87      	ldr	r2, [pc, #540]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005708:	6453      	str	r3, [r2, #68]	; 0x44
 800570a:	4b85      	ldr	r3, [pc, #532]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571e:	4a80      	ldr	r2, [pc, #512]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005720:	f043 0302 	orr.w	r3, r3, #2
 8005724:	6313      	str	r3, [r2, #48]	; 0x30
 8005726:	4b7e      	ldr	r3, [pc, #504]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8005732:	2338      	movs	r3, #56	; 0x38
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005736:	2302      	movs	r3, #2
 8005738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800573a:	2300      	movs	r3, #0
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800573e:	2303      	movs	r3, #3
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005742:	2305      	movs	r3, #5
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800574a:	4619      	mov	r1, r3
 800574c:	4875      	ldr	r0, [pc, #468]	; (8005924 <HAL_SPI_MspInit+0x24c>)
 800574e:	f005 fd8d 	bl	800b26c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005752:	e0de      	b.n	8005912 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a73      	ldr	r2, [pc, #460]	; (8005928 <HAL_SPI_MspInit+0x250>)
 800575a:	4293      	cmp	r3, r2
 800575c:	f040 8088 	bne.w	8005870 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005760:	2300      	movs	r3, #0
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	4b6e      	ldr	r3, [pc, #440]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	4a6d      	ldr	r2, [pc, #436]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800576a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800576e:	6413      	str	r3, [r2, #64]	; 0x40
 8005770:	4b6b      	ldr	r3, [pc, #428]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800577c:	2300      	movs	r3, #0
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	4b67      	ldr	r3, [pc, #412]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	4a66      	ldr	r2, [pc, #408]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005786:	f043 0302 	orr.w	r3, r3, #2
 800578a:	6313      	str	r3, [r2, #48]	; 0x30
 800578c:	4b64      	ldr	r3, [pc, #400]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005798:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579e:	2302      	movs	r3, #2
 80057a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057a6:	2303      	movs	r3, #3
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80057aa:	2305      	movs	r3, #5
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b2:	4619      	mov	r1, r3
 80057b4:	485b      	ldr	r0, [pc, #364]	; (8005924 <HAL_SPI_MspInit+0x24c>)
 80057b6:	f005 fd59 	bl	800b26c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80057ba:	4b5c      	ldr	r3, [pc, #368]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057bc:	4a5c      	ldr	r2, [pc, #368]	; (8005930 <HAL_SPI_MspInit+0x258>)
 80057be:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80057c0:	4b5a      	ldr	r3, [pc, #360]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057c6:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057c8:	2240      	movs	r2, #64	; 0x40
 80057ca:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057cc:	4b57      	ldr	r3, [pc, #348]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057d2:	4b56      	ldr	r3, [pc, #344]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057d8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057da:	4b54      	ldr	r3, [pc, #336]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057dc:	2200      	movs	r2, #0
 80057de:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057e0:	4b52      	ldr	r3, [pc, #328]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80057e6:	4b51      	ldr	r3, [pc, #324]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80057ec:	4b4f      	ldr	r3, [pc, #316]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057f2:	4b4e      	ldr	r3, [pc, #312]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80057f8:	484c      	ldr	r0, [pc, #304]	; (800592c <HAL_SPI_MspInit+0x254>)
 80057fa:	f002 fcf1 	bl	80081e0 <HAL_DMA_Init>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005804:	f7fe fae8 	bl	8003dd8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a48      	ldr	r2, [pc, #288]	; (800592c <HAL_SPI_MspInit+0x254>)
 800580c:	649a      	str	r2, [r3, #72]	; 0x48
 800580e:	4a47      	ldr	r2, [pc, #284]	; (800592c <HAL_SPI_MspInit+0x254>)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005814:	4b47      	ldr	r3, [pc, #284]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005816:	4a48      	ldr	r2, [pc, #288]	; (8005938 <HAL_SPI_MspInit+0x260>)
 8005818:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800581a:	4b46      	ldr	r3, [pc, #280]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 800581c:	2200      	movs	r2, #0
 800581e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005820:	4b44      	ldr	r3, [pc, #272]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005822:	2200      	movs	r2, #0
 8005824:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005826:	4b43      	ldr	r3, [pc, #268]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005828:	2200      	movs	r2, #0
 800582a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800582c:	4b41      	ldr	r3, [pc, #260]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 800582e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005832:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005834:	4b3f      	ldr	r3, [pc, #252]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005836:	2200      	movs	r2, #0
 8005838:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800583a:	4b3e      	ldr	r3, [pc, #248]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 800583c:	2200      	movs	r2, #0
 800583e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005840:	4b3c      	ldr	r3, [pc, #240]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005842:	2200      	movs	r2, #0
 8005844:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005846:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005848:	2200      	movs	r2, #0
 800584a:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800584c:	4b39      	ldr	r3, [pc, #228]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 800584e:	2200      	movs	r2, #0
 8005850:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005852:	4838      	ldr	r0, [pc, #224]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005854:	f002 fcc4 	bl	80081e0 <HAL_DMA_Init>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 800585e:	f7fe fabb 	bl	8003dd8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a33      	ldr	r2, [pc, #204]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 8005866:	64da      	str	r2, [r3, #76]	; 0x4c
 8005868:	4a32      	ldr	r2, [pc, #200]	; (8005934 <HAL_SPI_MspInit+0x25c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800586e:	e050      	b.n	8005912 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a31      	ldr	r2, [pc, #196]	; (800593c <HAL_SPI_MspInit+0x264>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d14b      	bne.n	8005912 <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	4b28      	ldr	r3, [pc, #160]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4a27      	ldr	r2, [pc, #156]	; (8005920 <HAL_SPI_MspInit+0x248>)
 8005884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005888:	6413      	str	r3, [r2, #64]	; 0x40
 800588a:	4b25      	ldr	r3, [pc, #148]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005892:	61bb      	str	r3, [r7, #24]
 8005894:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
 800589a:	4b21      	ldr	r3, [pc, #132]	; (8005920 <HAL_SPI_MspInit+0x248>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	4a20      	ldr	r2, [pc, #128]	; (8005920 <HAL_SPI_MspInit+0x248>)
 80058a0:	f043 0301 	orr.w	r3, r3, #1
 80058a4:	6313      	str	r3, [r2, #48]	; 0x30
 80058a6:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <HAL_SPI_MspInit+0x248>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	623b      	str	r3, [r7, #32]
 80058b6:	4b1a      	ldr	r3, [pc, #104]	; (8005920 <HAL_SPI_MspInit+0x248>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	4a19      	ldr	r2, [pc, #100]	; (8005920 <HAL_SPI_MspInit+0x248>)
 80058bc:	f043 0304 	orr.w	r3, r3, #4
 80058c0:	6313      	str	r3, [r2, #48]	; 0x30
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <HAL_SPI_MspInit+0x248>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	f003 0304 	and.w	r3, r3, #4
 80058ca:	623b      	str	r3, [r7, #32]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058d4:	2302      	movs	r3, #2
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d8:	2300      	movs	r3, #0
 80058da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058dc:	2303      	movs	r3, #3
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80058e0:	2306      	movs	r3, #6
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058e8:	4619      	mov	r1, r3
 80058ea:	4815      	ldr	r0, [pc, #84]	; (8005940 <HAL_SPI_MspInit+0x268>)
 80058ec:	f005 fcbe 	bl	800b26c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80058f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80058f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f6:	2302      	movs	r3, #2
 80058f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fa:	2300      	movs	r3, #0
 80058fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058fe:	2303      	movs	r3, #3
 8005900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005902:	2306      	movs	r3, #6
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590a:	4619      	mov	r1, r3
 800590c:	480d      	ldr	r0, [pc, #52]	; (8005944 <HAL_SPI_MspInit+0x26c>)
 800590e:	f005 fcad 	bl	800b26c <HAL_GPIO_Init>
}
 8005912:	bf00      	nop
 8005914:	3738      	adds	r7, #56	; 0x38
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40013000 	.word	0x40013000
 8005920:	40023800 	.word	0x40023800
 8005924:	40020400 	.word	0x40020400
 8005928:	40003800 	.word	0x40003800
 800592c:	20000418 	.word	0x20000418
 8005930:	40026070 	.word	0x40026070
 8005934:	20000478 	.word	0x20000478
 8005938:	40026058 	.word	0x40026058
 800593c:	40003c00 	.word	0x40003c00
 8005940:	40020000 	.word	0x40020000
 8005944:	40020800 	.word	0x40020800

08005948 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <HAL_SPI_MspDeInit+0x90>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d10a      	bne.n	8005970 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800595a:	4b20      	ldr	r3, [pc, #128]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 8005960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005964:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005966:	2138      	movs	r1, #56	; 0x38
 8005968:	481d      	ldr	r0, [pc, #116]	; (80059e0 <HAL_SPI_MspDeInit+0x98>)
 800596a:	f005 fe1b 	bl	800b5a4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800596e:	e02f      	b.n	80059d0 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <HAL_SPI_MspDeInit+0x9c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d115      	bne.n	80059a6 <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	4a17      	ldr	r2, [pc, #92]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 8005980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005984:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005986:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800598a:	4815      	ldr	r0, [pc, #84]	; (80059e0 <HAL_SPI_MspDeInit+0x98>)
 800598c:	f005 fe0a 	bl	800b5a4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005994:	4618      	mov	r0, r3
 8005996:	f002 fcd1 	bl	800833c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 fccc 	bl	800833c <HAL_DMA_DeInit>
}
 80059a4:	e014      	b.n	80059d0 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <HAL_SPI_MspDeInit+0xa0>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d10f      	bne.n	80059d0 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 80059b0:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	4a09      	ldr	r2, [pc, #36]	; (80059dc <HAL_SPI_MspDeInit+0x94>)
 80059b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059ba:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 80059bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059c0:	480a      	ldr	r0, [pc, #40]	; (80059ec <HAL_SPI_MspDeInit+0xa4>)
 80059c2:	f005 fdef 	bl	800b5a4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 80059c6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80059ca:	4809      	ldr	r0, [pc, #36]	; (80059f0 <HAL_SPI_MspDeInit+0xa8>)
 80059cc:	f005 fdea 	bl	800b5a4 <HAL_GPIO_DeInit>
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40013000 	.word	0x40013000
 80059dc:	40023800 	.word	0x40023800
 80059e0:	40020400 	.word	0x40020400
 80059e4:	40003800 	.word	0x40003800
 80059e8:	40003c00 	.word	0x40003c00
 80059ec:	40020000 	.word	0x40020000
 80059f0:	40020800 	.word	0x40020800

080059f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	; 0x28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_UART_MspInit+0x94>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d134      	bne.n	8005a80 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60fb      	str	r3, [r7, #12]
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a20:	f043 0310 	orr.w	r3, r3, #16
 8005a24:	6453      	str	r3, [r2, #68]	; 0x44
 8005a26:	4b19      	ldr	r3, [pc, #100]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	4b15      	ldr	r3, [pc, #84]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a3c:	f043 0301 	orr.w	r3, r3, #1
 8005a40:	6313      	str	r3, [r2, #48]	; 0x30
 8005a42:	4b12      	ldr	r3, [pc, #72]	; (8005a8c <HAL_UART_MspInit+0x98>)
 8005a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	613b      	str	r3, [r7, #16]
 8005a4c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005a4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005a60:	2307      	movs	r3, #7
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a64:	f107 0314 	add.w	r3, r7, #20
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4809      	ldr	r0, [pc, #36]	; (8005a90 <HAL_UART_MspInit+0x9c>)
 8005a6c:	f005 fbfe 	bl	800b26c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005a70:	2200      	movs	r2, #0
 8005a72:	2100      	movs	r1, #0
 8005a74:	2025      	movs	r0, #37	; 0x25
 8005a76:	f001 fdd4 	bl	8007622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005a7a:	2025      	movs	r0, #37	; 0x25
 8005a7c:	f001 fded 	bl	800765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005a80:	bf00      	nop
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	40011000 	.word	0x40011000
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	40020000 	.word	0x40020000

08005a94 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <HAL_UART_MspDeInit+0x38>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10d      	bne.n	8005ac2 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <HAL_UART_MspDeInit+0x3c>)
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_UART_MspDeInit+0x3c>)
 8005aac:	f023 0310 	bic.w	r3, r3, #16
 8005ab0:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005ab2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ab6:	4807      	ldr	r0, [pc, #28]	; (8005ad4 <HAL_UART_MspDeInit+0x40>)
 8005ab8:	f005 fd74 	bl	800b5a4 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005abc:	2025      	movs	r0, #37	; 0x25
 8005abe:	f001 fdda 	bl	8007676 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40011000 	.word	0x40011000
 8005ad0:	40023800 	.word	0x40023800
 8005ad4:	40020000 	.word	0x40020000

08005ad8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005ade:	1d3b      	adds	r3, r7, #4
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005aec:	4b1c      	ldr	r3, [pc, #112]	; (8005b60 <HAL_FSMC_MspInit+0x88>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d131      	bne.n	8005b58 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005af4:	4b1a      	ldr	r3, [pc, #104]	; (8005b60 <HAL_FSMC_MspInit+0x88>)
 8005af6:	2201      	movs	r2, #1
 8005af8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005afa:	2300      	movs	r3, #0
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4b19      	ldr	r3, [pc, #100]	; (8005b64 <HAL_FSMC_MspInit+0x8c>)
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_FSMC_MspInit+0x8c>)
 8005b04:	f043 0301 	orr.w	r3, r3, #1
 8005b08:	6393      	str	r3, [r2, #56]	; 0x38
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <HAL_FSMC_MspInit+0x8c>)
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005b16:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005b1a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b24:	2303      	movs	r3, #3
 8005b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b28:	230c      	movs	r3, #12
 8005b2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	4619      	mov	r1, r3
 8005b30:	480d      	ldr	r0, [pc, #52]	; (8005b68 <HAL_FSMC_MspInit+0x90>)
 8005b32:	f005 fb9b 	bl	800b26c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005b36:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005b3a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b44:	2303      	movs	r3, #3
 8005b46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005b48:	230c      	movs	r3, #12
 8005b4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b4c:	1d3b      	adds	r3, r7, #4
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4806      	ldr	r0, [pc, #24]	; (8005b6c <HAL_FSMC_MspInit+0x94>)
 8005b52:	f005 fb8b 	bl	800b26c <HAL_GPIO_Init>
 8005b56:	e000      	b.n	8005b5a <HAL_FSMC_MspInit+0x82>
    return;
 8005b58:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	20000978 	.word	0x20000978
 8005b64:	40023800 	.word	0x40023800
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40020c00 	.word	0x40020c00

08005b70 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005b78:	f7ff ffae 	bl	8005ad8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005b7c:	bf00      	nop
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_FSMC_MspDeInit+0x38>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d113      	bne.n	8005bb8 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005b90:	4b0a      	ldr	r3, [pc, #40]	; (8005bbc <HAL_FSMC_MspDeInit+0x38>)
 8005b92:	2201      	movs	r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005b96:	4b0a      	ldr	r3, [pc, #40]	; (8005bc0 <HAL_FSMC_MspDeInit+0x3c>)
 8005b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9a:	4a09      	ldr	r2, [pc, #36]	; (8005bc0 <HAL_FSMC_MspDeInit+0x3c>)
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005ba2:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005ba6:	4807      	ldr	r0, [pc, #28]	; (8005bc4 <HAL_FSMC_MspDeInit+0x40>)
 8005ba8:	f005 fcfc 	bl	800b5a4 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005bac:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005bb0:	4805      	ldr	r0, [pc, #20]	; (8005bc8 <HAL_FSMC_MspDeInit+0x44>)
 8005bb2:	f005 fcf7 	bl	800b5a4 <HAL_GPIO_DeInit>
 8005bb6:	e000      	b.n	8005bba <HAL_FSMC_MspDeInit+0x36>
    return;
 8005bb8:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	2000097c 	.word	0x2000097c
 8005bc0:	40023800 	.word	0x40023800
 8005bc4:	40021000 	.word	0x40021000
 8005bc8:	40020c00 	.word	0x40020c00

08005bcc <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005bd4:	f7ff ffd6 	bl	8005b84 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005be0:	b480      	push	{r7}
 8005be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005be4:	e7fe      	b.n	8005be4 <NMI_Handler+0x4>

08005be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005be6:	b480      	push	{r7}
 8005be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005bea:	e7fe      	b.n	8005bea <HardFault_Handler+0x4>

08005bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005bf0:	e7fe      	b.n	8005bf0 <MemManage_Handler+0x4>

08005bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005bf2:	b480      	push	{r7}
 8005bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005bf6:	e7fe      	b.n	8005bf6 <BusFault_Handler+0x4>

08005bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005bfc:	e7fe      	b.n	8005bfc <UsageFault_Handler+0x4>

08005bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c10:	bf00      	nop
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c1a:	b480      	push	{r7}
 8005c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c1e:	bf00      	nop
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c2c:	f001 f9a2 	bl	8006f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005c38:	4802      	ldr	r0, [pc, #8]	; (8005c44 <DMA1_Stream3_IRQHandler+0x10>)
 8005c3a:	f002 fde1 	bl	8008800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005c3e:	bf00      	nop
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000478 	.word	0x20000478

08005c48 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005c4c:	4802      	ldr	r0, [pc, #8]	; (8005c58 <DMA1_Stream4_IRQHandler+0x10>)
 8005c4e:	f002 fdd7 	bl	8008800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005c52:	bf00      	nop
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	20000418 	.word	0x20000418

08005c5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005c60:	4802      	ldr	r0, [pc, #8]	; (8005c6c <I2C1_EV_IRQHandler+0x10>)
 8005c62:	f009 fccb 	bl	800f5fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005c66:	bf00      	nop
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	200002bc 	.word	0x200002bc

08005c70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005c74:	4802      	ldr	r0, [pc, #8]	; (8005c80 <I2C1_ER_IRQHandler+0x10>)
 8005c76:	f009 fe32 	bl	800f8de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200002bc 	.word	0x200002bc

08005c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005c88:	4802      	ldr	r0, [pc, #8]	; (8005c94 <USART1_IRQHandler+0x10>)
 8005c8a:	f011 fb8b 	bl	80173a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005c8e:	bf00      	nop
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200004d8 	.word	0x200004d8

08005c98 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005c98:	b480      	push	{r7}
 8005c9a:	af00      	add	r7, sp, #0
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <_getpid>:

int _getpid(void)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	af00      	add	r7, sp, #0
	return 1;
 8005caa:	2301      	movs	r3, #1
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <_kill>:

int _kill(int pid, int sig)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005cc0:	f014 f988 	bl	8019fd4 <__errno>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2216      	movs	r2, #22
 8005cc8:	601a      	str	r2, [r3, #0]
	return -1;
 8005cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <_exit>:

void _exit (int status)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005cde:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7ff ffe7 	bl	8005cb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005ce8:	e7fe      	b.n	8005ce8 <_exit+0x12>

08005cea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b086      	sub	sp, #24
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e00a      	b.n	8005d12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005cfc:	f3af 8000 	nop.w
 8005d00:	4601      	mov	r1, r0
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	60ba      	str	r2, [r7, #8]
 8005d08:	b2ca      	uxtb	r2, r1
 8005d0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	dbf0      	blt.n	8005cfc <_read+0x12>
	}

return len;
 8005d1a:	687b      	ldr	r3, [r7, #4]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	617b      	str	r3, [r7, #20]
 8005d34:	e009      	b.n	8005d4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	1c5a      	adds	r2, r3, #1
 8005d3a:	60ba      	str	r2, [r7, #8]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	3301      	adds	r3, #1
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	dbf1      	blt.n	8005d36 <_write+0x12>
	}
	return len;
 8005d52:	687b      	ldr	r3, [r7, #4]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3718      	adds	r7, #24
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <_close>:

int _close(int file)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	return -1;
 8005d64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d84:	605a      	str	r2, [r3, #4]
	return 0;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <_isatty>:

int _isatty(int file)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
	return 1;
 8005d9c:	2301      	movs	r3, #1
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b085      	sub	sp, #20
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
	return 0;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <_open>:

int _open(char *path, int flags, ...)
{
 8005dc4:	b40e      	push	{r1, r2, r3}
 8005dc6:	b480      	push	{r7}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005dce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	b003      	add	sp, #12
 8005dde:	4770      	bx	lr

08005de0 <_wait>:

int _wait(int *status)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8005de8:	f014 f8f4 	bl	8019fd4 <__errno>
 8005dec:	4603      	mov	r3, r0
 8005dee:	220a      	movs	r2, #10
 8005df0:	601a      	str	r2, [r3, #0]
	return -1;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <_unlink>:

int _unlink(char *name)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8005e06:	f014 f8e5 	bl	8019fd4 <__errno>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	601a      	str	r2, [r3, #0]
	return -1;
 8005e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <_times>:

int _times(struct tms *buf)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	return -1;
 8005e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <_stat>:

int _stat(char *file, struct stat *st)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e44:	605a      	str	r2, [r3, #4]
	return 0;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <_link>:

int _link(char *old, char *new)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8005e5e:	f014 f8b9 	bl	8019fd4 <__errno>
 8005e62:	4603      	mov	r3, r0
 8005e64:	221f      	movs	r2, #31
 8005e66:	601a      	str	r2, [r3, #0]
	return -1;
 8005e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <_fork>:

int _fork(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8005e78:	f014 f8ac 	bl	8019fd4 <__errno>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	220b      	movs	r2, #11
 8005e80:	601a      	str	r2, [r3, #0]
	return -1;
 8005e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	60b9      	str	r1, [r7, #8]
 8005e94:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8005e96:	f014 f89d 	bl	8019fd4 <__errno>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	220c      	movs	r2, #12
 8005e9e:	601a      	str	r2, [r3, #0]
	return -1;
 8005ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005eb4:	4a14      	ldr	r2, [pc, #80]	; (8005f08 <_sbrk+0x5c>)
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <_sbrk+0x60>)
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ec0:	4b13      	ldr	r3, [pc, #76]	; (8005f10 <_sbrk+0x64>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ec8:	4b11      	ldr	r3, [pc, #68]	; (8005f10 <_sbrk+0x64>)
 8005eca:	4a12      	ldr	r2, [pc, #72]	; (8005f14 <_sbrk+0x68>)
 8005ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <_sbrk+0x64>)
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d207      	bcs.n	8005eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005edc:	f014 f87a 	bl	8019fd4 <__errno>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	220c      	movs	r2, #12
 8005ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	e009      	b.n	8005f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005eec:	4b08      	ldr	r3, [pc, #32]	; (8005f10 <_sbrk+0x64>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005ef2:	4b07      	ldr	r3, [pc, #28]	; (8005f10 <_sbrk+0x64>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4413      	add	r3, r2
 8005efa:	4a05      	ldr	r2, [pc, #20]	; (8005f10 <_sbrk+0x64>)
 8005efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20020000 	.word	0x20020000
 8005f0c:	00000800 	.word	0x00000800
 8005f10:	20000984 	.word	0x20000984
 8005f14:	20000a20 	.word	0x20000a20

08005f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <SystemInit+0x20>)
 8005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f22:	4a05      	ldr	r2, [pc, #20]	; (8005f38 <SystemInit+0x20>)
 8005f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005f2c:	bf00      	nop
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	e000ed00 	.word	0xe000ed00

08005f3c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005f42:	2300      	movs	r3, #0
 8005f44:	613b      	str	r3, [r7, #16]
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	2302      	movs	r3, #2
 8005f54:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005f56:	4b34      	ldr	r3, [pc, #208]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f003 030c 	and.w	r3, r3, #12
 8005f5e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d011      	beq.n	8005f8a <SystemCoreClockUpdate+0x4e>
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	2b08      	cmp	r3, #8
 8005f6a:	d844      	bhi.n	8005ff6 <SystemCoreClockUpdate+0xba>
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <SystemCoreClockUpdate+0x3e>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d004      	beq.n	8005f82 <SystemCoreClockUpdate+0x46>
 8005f78:	e03d      	b.n	8005ff6 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005f7a:	4b2c      	ldr	r3, [pc, #176]	; (800602c <SystemCoreClockUpdate+0xf0>)
 8005f7c:	4a2c      	ldr	r2, [pc, #176]	; (8006030 <SystemCoreClockUpdate+0xf4>)
 8005f7e:	601a      	str	r2, [r3, #0]
      break;
 8005f80:	e03d      	b.n	8005ffe <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005f82:	4b2a      	ldr	r3, [pc, #168]	; (800602c <SystemCoreClockUpdate+0xf0>)
 8005f84:	4a2b      	ldr	r2, [pc, #172]	; (8006034 <SystemCoreClockUpdate+0xf8>)
 8005f86:	601a      	str	r2, [r3, #0]
      break;
 8005f88:	e039      	b.n	8005ffe <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005f8a:	4b27      	ldr	r3, [pc, #156]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	0d9b      	lsrs	r3, r3, #22
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f9e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00c      	beq.n	8005fc0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005fa6:	4a23      	ldr	r2, [pc, #140]	; (8006034 <SystemCoreClockUpdate+0xf8>)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005fb0:	6852      	ldr	r2, [r2, #4]
 8005fb2:	0992      	lsrs	r2, r2, #6
 8005fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e00b      	b.n	8005fd8 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <SystemCoreClockUpdate+0xf4>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc8:	4a17      	ldr	r2, [pc, #92]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005fca:	6852      	ldr	r2, [r2, #4]
 8005fcc:	0992      	lsrs	r2, r2, #6
 8005fce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
 8005fd6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	0c1b      	lsrs	r3, r3, #16
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	4a0e      	ldr	r2, [pc, #56]	; (800602c <SystemCoreClockUpdate+0xf0>)
 8005ff2:	6013      	str	r3, [r2, #0]
      break;
 8005ff4:	e003      	b.n	8005ffe <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	; (800602c <SystemCoreClockUpdate+0xf0>)
 8005ff8:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <SystemCoreClockUpdate+0xf4>)
 8005ffa:	601a      	str	r2, [r3, #0]
      break;
 8005ffc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <SystemCoreClockUpdate+0xec>)
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	091b      	lsrs	r3, r3, #4
 8006004:	f003 030f 	and.w	r3, r3, #15
 8006008:	4a0b      	ldr	r2, [pc, #44]	; (8006038 <SystemCoreClockUpdate+0xfc>)
 800600a:	5cd3      	ldrb	r3, [r2, r3]
 800600c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800600e:	4b07      	ldr	r3, [pc, #28]	; (800602c <SystemCoreClockUpdate+0xf0>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	4a04      	ldr	r2, [pc, #16]	; (800602c <SystemCoreClockUpdate+0xf0>)
 800601a:	6013      	str	r3, [r2, #0]
}
 800601c:	bf00      	nop
 800601e:	371c      	adds	r7, #28
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr
 8006028:	40023800 	.word	0x40023800
 800602c:	20000058 	.word	0x20000058
 8006030:	00f42400 	.word	0x00f42400
 8006034:	007a1200 	.word	0x007a1200
 8006038:	08052678 	.word	0x08052678

0800603c <W25Q_Reset>:
#endif

w25_info_t  w25_info;
uint8_t buf[64] = {0};

void W25Q_Reset (void) {
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006040:	2200      	movs	r2, #0
 8006042:	2101      	movs	r1, #1
 8006044:	480b      	ldr	r0, [pc, #44]	; (8006074 <W25Q_Reset+0x38>)
 8006046:	f005 fbc1 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_ENABLE_RESET;
 800604a:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <W25Q_Reset+0x3c>)
 800604c:	2266      	movs	r2, #102	; 0x66
 800604e:	701a      	strb	r2, [r3, #0]
	buf[1] = W25Q_RESET;
 8006050:	4b09      	ldr	r3, [pc, #36]	; (8006078 <W25Q_Reset+0x3c>)
 8006052:	2299      	movs	r2, #153	; 0x99
 8006054:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 8006056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800605a:	2202      	movs	r2, #2
 800605c:	4906      	ldr	r1, [pc, #24]	; (8006078 <W25Q_Reset+0x3c>)
 800605e:	4807      	ldr	r0, [pc, #28]	; (800607c <W25Q_Reset+0x40>)
 8006060:	f00d f951 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006064:	2201      	movs	r2, #1
 8006066:	2101      	movs	r1, #1
 8006068:	4802      	ldr	r0, [pc, #8]	; (8006074 <W25Q_Reset+0x38>)
 800606a:	f005 fbaf 	bl	800b7cc <HAL_GPIO_WritePin>
}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40020400 	.word	0x40020400
 8006078:	200009ac 	.word	0x200009ac
 800607c:	20000310 	.word	0x20000310

08006080 <W25Q_Write_Enable>:

void W25Q_Write_Enable(void) {
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006084:	2200      	movs	r2, #0
 8006086:	2101      	movs	r1, #1
 8006088:	4809      	ldr	r0, [pc, #36]	; (80060b0 <W25Q_Write_Enable+0x30>)
 800608a:	f005 fb9f 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_ENABLE;
 800608e:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <W25Q_Write_Enable+0x34>)
 8006090:	2206      	movs	r2, #6
 8006092:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006098:	2201      	movs	r2, #1
 800609a:	4906      	ldr	r1, [pc, #24]	; (80060b4 <W25Q_Write_Enable+0x34>)
 800609c:	4806      	ldr	r0, [pc, #24]	; (80060b8 <W25Q_Write_Enable+0x38>)
 800609e:	f00d f932 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80060a2:	2201      	movs	r2, #1
 80060a4:	2101      	movs	r1, #1
 80060a6:	4802      	ldr	r0, [pc, #8]	; (80060b0 <W25Q_Write_Enable+0x30>)
 80060a8:	f005 fb90 	bl	800b7cc <HAL_GPIO_WritePin>
}
 80060ac:	bf00      	nop
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	40020400 	.word	0x40020400
 80060b4:	200009ac 	.word	0x200009ac
 80060b8:	20000310 	.word	0x20000310

080060bc <W25Q_Write_Disable>:

void W25Q_Write_Disable(void) {
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80060c0:	2200      	movs	r2, #0
 80060c2:	2101      	movs	r1, #1
 80060c4:	4809      	ldr	r0, [pc, #36]	; (80060ec <W25Q_Write_Disable+0x30>)
 80060c6:	f005 fb81 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_DISABLE;
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <W25Q_Write_Disable+0x34>)
 80060cc:	2204      	movs	r2, #4
 80060ce:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80060d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060d4:	2201      	movs	r2, #1
 80060d6:	4906      	ldr	r1, [pc, #24]	; (80060f0 <W25Q_Write_Disable+0x34>)
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <W25Q_Write_Disable+0x38>)
 80060da:	f00d f914 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80060de:	2201      	movs	r2, #1
 80060e0:	2101      	movs	r1, #1
 80060e2:	4802      	ldr	r0, [pc, #8]	; (80060ec <W25Q_Write_Disable+0x30>)
 80060e4:	f005 fb72 	bl	800b7cc <HAL_GPIO_WritePin>
}
 80060e8:	bf00      	nop
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	40020400 	.word	0x40020400
 80060f0:	200009ac 	.word	0x200009ac
 80060f4:	20000310 	.word	0x20000310

080060f8 <W25Q_Set_Block_Protect>:

void W25Q_Set_Block_Protect(uint8_t val) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	71fb      	strb	r3, [r7, #7]
	buf[0] = 0x50;
 8006102:	4b1a      	ldr	r3, [pc, #104]	; (800616c <W25Q_Set_Block_Protect+0x74>)
 8006104:	2250      	movs	r2, #80	; 0x50
 8006106:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006108:	2200      	movs	r2, #0
 800610a:	2101      	movs	r1, #1
 800610c:	4818      	ldr	r0, [pc, #96]	; (8006170 <W25Q_Set_Block_Protect+0x78>)
 800610e:	f005 fb5d 	bl	800b7cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006116:	2201      	movs	r2, #1
 8006118:	4914      	ldr	r1, [pc, #80]	; (800616c <W25Q_Set_Block_Protect+0x74>)
 800611a:	4816      	ldr	r0, [pc, #88]	; (8006174 <W25Q_Set_Block_Protect+0x7c>)
 800611c:	f00d f8f3 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006120:	2201      	movs	r2, #1
 8006122:	2101      	movs	r1, #1
 8006124:	4812      	ldr	r0, [pc, #72]	; (8006170 <W25Q_Set_Block_Protect+0x78>)
 8006126:	f005 fb51 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_WRITE_STATUS_1;
 800612a:	4b10      	ldr	r3, [pc, #64]	; (800616c <W25Q_Set_Block_Protect+0x74>)
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
	buf[1] = ((val & 0x0F) << 2);
 8006130:	79fb      	ldrb	r3, [r7, #7]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800613a:	b2da      	uxtb	r2, r3
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <W25Q_Set_Block_Protect+0x74>)
 800613e:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006140:	2200      	movs	r2, #0
 8006142:	2101      	movs	r1, #1
 8006144:	480a      	ldr	r0, [pc, #40]	; (8006170 <W25Q_Set_Block_Protect+0x78>)
 8006146:	f005 fb41 	bl	800b7cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 2, 1000);
 800614a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800614e:	2202      	movs	r2, #2
 8006150:	4906      	ldr	r1, [pc, #24]	; (800616c <W25Q_Set_Block_Protect+0x74>)
 8006152:	4808      	ldr	r0, [pc, #32]	; (8006174 <W25Q_Set_Block_Protect+0x7c>)
 8006154:	f00d f8d7 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006158:	2201      	movs	r2, #1
 800615a:	2101      	movs	r1, #1
 800615c:	4804      	ldr	r0, [pc, #16]	; (8006170 <W25Q_Set_Block_Protect+0x78>)
 800615e:	f005 fb35 	bl	800b7cc <HAL_GPIO_WritePin>
}
 8006162:	bf00      	nop
 8006164:	3708      	adds	r7, #8
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	200009ac 	.word	0x200009ac
 8006170:	40020400 	.word	0x40020400
 8006174:	20000310 	.word	0x20000310

08006178 <W25Q_Wait_Write_End>:

void W25Q_Wait_Write_End(void) {
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
	HAL_Delay(1);
 800617c:	2001      	movs	r0, #1
 800617e:	f000 ff59 	bl	8007034 <HAL_Delay>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006182:	2200      	movs	r2, #0
 8006184:	2101      	movs	r1, #1
 8006186:	4815      	ldr	r0, [pc, #84]	; (80061dc <W25Q_Wait_Write_End+0x64>)
 8006188:	f005 fb20 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ_STATUS_1;
 800618c:	4b14      	ldr	r3, [pc, #80]	; (80061e0 <W25Q_Wait_Write_End+0x68>)
 800618e:	2205      	movs	r2, #5
 8006190:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 8006192:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006196:	2201      	movs	r2, #1
 8006198:	4911      	ldr	r1, [pc, #68]	; (80061e0 <W25Q_Wait_Write_End+0x68>)
 800619a:	4812      	ldr	r0, [pc, #72]	; (80061e4 <W25Q_Wait_Write_End+0x6c>)
 800619c:	f00d f8b3 	bl	8013306 <HAL_SPI_Transmit>
	do {
		HAL_SPI_Receive (&W25Q_SPI, buf, 1, 1000);
 80061a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80061a4:	2201      	movs	r2, #1
 80061a6:	490e      	ldr	r1, [pc, #56]	; (80061e0 <W25Q_Wait_Write_End+0x68>)
 80061a8:	480e      	ldr	r0, [pc, #56]	; (80061e4 <W25Q_Wait_Write_End+0x6c>)
 80061aa:	f00d f9e8 	bl	801357e <HAL_SPI_Receive>
		w25_info.StatusRegister1 = buf[0];
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <W25Q_Wait_Write_End+0x68>)
 80061b0:	781a      	ldrb	r2, [r3, #0]
 80061b2:	4b0d      	ldr	r3, [pc, #52]	; (80061e8 <W25Q_Wait_Write_End+0x70>)
 80061b4:	f883 2020 	strb.w	r2, [r3, #32]
		HAL_Delay(1);
 80061b8:	2001      	movs	r0, #1
 80061ba:	f000 ff3b 	bl	8007034 <HAL_Delay>
	}
	while((w25_info.StatusRegister1 & 0x01) == 0x01);
 80061be:	4b0a      	ldr	r3, [pc, #40]	; (80061e8 <W25Q_Wait_Write_End+0x70>)
 80061c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e9      	bne.n	80061a0 <W25Q_Wait_Write_End+0x28>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80061cc:	2201      	movs	r2, #1
 80061ce:	2101      	movs	r1, #1
 80061d0:	4802      	ldr	r0, [pc, #8]	; (80061dc <W25Q_Wait_Write_End+0x64>)
 80061d2:	f005 fafb 	bl	800b7cc <HAL_GPIO_WritePin>
}
 80061d6:	bf00      	nop
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	40020400 	.word	0x40020400
 80061e0:	200009ac 	.word	0x200009ac
 80061e4:	20000310 	.word	0x20000310
 80061e8:	20000988 	.word	0x20000988

080061ec <W25Q_Erase_Sector>:

void W25Q_Erase_Sector(uint32_t addr) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 80061f4:	f7ff ffc0 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80061f8:	2000      	movs	r0, #0
 80061fa:	f7ff ff7d 	bl	80060f8 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.SectorSize;
 80061fe:	4b2a      	ldr	r3, [pc, #168]	; (80062a8 <W25Q_Erase_Sector+0xbc>)
 8006200:	689a      	ldr	r2, [r3, #8]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	fb02 f303 	mul.w	r3, r2, r3
 8006208:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 800620a:	f7ff ff39 	bl	8006080 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800620e:	2200      	movs	r2, #0
 8006210:	2101      	movs	r1, #1
 8006212:	4826      	ldr	r0, [pc, #152]	; (80062ac <W25Q_Erase_Sector+0xc0>)
 8006214:	f005 fada 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_SECTOR_ERASE;
 8006218:	4b25      	ldr	r3, [pc, #148]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 800621a:	2220      	movs	r2, #32
 800621c:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 800621e:	4b22      	ldr	r3, [pc, #136]	; (80062a8 <W25Q_Erase_Sector+0xbc>)
 8006220:	7fdb      	ldrb	r3, [r3, #31]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d01a      	beq.n	800625c <W25Q_Erase_Sector+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	0e1b      	lsrs	r3, r3, #24
 800622a:	b2da      	uxtb	r2, r3
 800622c:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 800622e:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	0c1b      	lsrs	r3, r3, #16
 8006234:	b2da      	uxtb	r2, r3
 8006236:	4b1e      	ldr	r3, [pc, #120]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006238:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b2da      	uxtb	r2, r3
 8006240:	4b1b      	ldr	r3, [pc, #108]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006242:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 800624a:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 800624c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006250:	2205      	movs	r2, #5
 8006252:	4917      	ldr	r1, [pc, #92]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006254:	4817      	ldr	r0, [pc, #92]	; (80062b4 <W25Q_Erase_Sector+0xc8>)
 8006256:	f00d f856 	bl	8013306 <HAL_SPI_Transmit>
 800625a:	e014      	b.n	8006286 <W25Q_Erase_Sector+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	0c1b      	lsrs	r3, r3, #16
 8006260:	b2da      	uxtb	r2, r3
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006264:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	b2da      	uxtb	r2, r3
 800626c:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 800626e:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	b2da      	uxtb	r2, r3
 8006274:	4b0e      	ldr	r3, [pc, #56]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006276:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800627c:	2204      	movs	r2, #4
 800627e:	490c      	ldr	r1, [pc, #48]	; (80062b0 <W25Q_Erase_Sector+0xc4>)
 8006280:	480c      	ldr	r0, [pc, #48]	; (80062b4 <W25Q_Erase_Sector+0xc8>)
 8006282:	f00d f840 	bl	8013306 <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006286:	2201      	movs	r2, #1
 8006288:	2101      	movs	r1, #1
 800628a:	4808      	ldr	r0, [pc, #32]	; (80062ac <W25Q_Erase_Sector+0xc0>)
 800628c:	f005 fa9e 	bl	800b7cc <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006290:	f7ff ff72 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006294:	f7ff ff12 	bl	80060bc <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006298:	200f      	movs	r0, #15
 800629a:	f7ff ff2d 	bl	80060f8 <W25Q_Set_Block_Protect>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000988 	.word	0x20000988
 80062ac:	40020400 	.word	0x40020400
 80062b0:	200009ac 	.word	0x200009ac
 80062b4:	20000310 	.word	0x20000310

080062b8 <W25Q_Erase_Block>:

void W25Q_Erase_Block(uint32_t addr) {
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	W25Q_Wait_Write_End();
 80062c0:	f7ff ff5a 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80062c4:	2000      	movs	r0, #0
 80062c6:	f7ff ff17 	bl	80060f8 <W25Q_Set_Block_Protect>
	addr = addr * w25_info.BlockSize;
 80062ca:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <W25Q_Erase_Block+0xbc>)
 80062cc:	691a      	ldr	r2, [r3, #16]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	fb02 f303 	mul.w	r3, r2, r3
 80062d4:	607b      	str	r3, [r7, #4]
	W25Q_Write_Enable();
 80062d6:	f7ff fed3 	bl	8006080 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80062da:	2200      	movs	r2, #0
 80062dc:	2101      	movs	r1, #1
 80062de:	4826      	ldr	r0, [pc, #152]	; (8006378 <W25Q_Erase_Block+0xc0>)
 80062e0:	f005 fa74 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_BLOCK_ERASE;
 80062e4:	4b25      	ldr	r3, [pc, #148]	; (800637c <W25Q_Erase_Block+0xc4>)
 80062e6:	22d8      	movs	r2, #216	; 0xd8
 80062e8:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 80062ea:	4b22      	ldr	r3, [pc, #136]	; (8006374 <W25Q_Erase_Block+0xbc>)
 80062ec:	7fdb      	ldrb	r3, [r3, #31]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d01a      	beq.n	8006328 <W25Q_Erase_Block+0x70>
	{
		buf[1] = (addr >> 24) & 0xFF;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0e1b      	lsrs	r3, r3, #24
 80062f6:	b2da      	uxtb	r2, r3
 80062f8:	4b20      	ldr	r3, [pc, #128]	; (800637c <W25Q_Erase_Block+0xc4>)
 80062fa:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	b2da      	uxtb	r2, r3
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <W25Q_Erase_Block+0xc4>)
 8006304:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	0a1b      	lsrs	r3, r3, #8
 800630a:	b2da      	uxtb	r2, r3
 800630c:	4b1b      	ldr	r3, [pc, #108]	; (800637c <W25Q_Erase_Block+0xc4>)
 800630e:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <W25Q_Erase_Block+0xc4>)
 8006316:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800631c:	2205      	movs	r2, #5
 800631e:	4917      	ldr	r1, [pc, #92]	; (800637c <W25Q_Erase_Block+0xc4>)
 8006320:	4817      	ldr	r0, [pc, #92]	; (8006380 <W25Q_Erase_Block+0xc8>)
 8006322:	f00c fff0 	bl	8013306 <HAL_SPI_Transmit>
 8006326:	e014      	b.n	8006352 <W25Q_Erase_Block+0x9a>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	b2da      	uxtb	r2, r3
 800632e:	4b13      	ldr	r3, [pc, #76]	; (800637c <W25Q_Erase_Block+0xc4>)
 8006330:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0a1b      	lsrs	r3, r3, #8
 8006336:	b2da      	uxtb	r2, r3
 8006338:	4b10      	ldr	r3, [pc, #64]	; (800637c <W25Q_Erase_Block+0xc4>)
 800633a:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	4b0e      	ldr	r3, [pc, #56]	; (800637c <W25Q_Erase_Block+0xc4>)
 8006342:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006344:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006348:	2204      	movs	r2, #4
 800634a:	490c      	ldr	r1, [pc, #48]	; (800637c <W25Q_Erase_Block+0xc4>)
 800634c:	480c      	ldr	r0, [pc, #48]	; (8006380 <W25Q_Erase_Block+0xc8>)
 800634e:	f00c ffda 	bl	8013306 <HAL_SPI_Transmit>
	}
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006352:	2201      	movs	r2, #1
 8006354:	2101      	movs	r1, #1
 8006356:	4808      	ldr	r0, [pc, #32]	; (8006378 <W25Q_Erase_Block+0xc0>)
 8006358:	f005 fa38 	bl	800b7cc <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800635c:	f7ff ff0c 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 8006360:	f7ff feac 	bl	80060bc <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006364:	200f      	movs	r0, #15
 8006366:	f7ff fec7 	bl	80060f8 <W25Q_Set_Block_Protect>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000988 	.word	0x20000988
 8006378:	40020400 	.word	0x40020400
 800637c:	200009ac 	.word	0x200009ac
 8006380:	20000310 	.word	0x20000310

08006384 <W25Q_Erase_Chip>:

void W25Q_Erase_Chip(void) {
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
	W25Q_Wait_Write_End();
 8006388:	f7ff fef6 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 800638c:	2000      	movs	r0, #0
 800638e:	f7ff feb3 	bl	80060f8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 8006392:	f7ff fe75 	bl	8006080 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006396:	2200      	movs	r2, #0
 8006398:	2101      	movs	r1, #1
 800639a:	480d      	ldr	r0, [pc, #52]	; (80063d0 <W25Q_Erase_Chip+0x4c>)
 800639c:	f005 fa16 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_CHIP_ERASE;
 80063a0:	4b0c      	ldr	r3, [pc, #48]	; (80063d4 <W25Q_Erase_Chip+0x50>)
 80063a2:	22c7      	movs	r2, #199	; 0xc7
 80063a4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 80063a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063aa:	2201      	movs	r2, #1
 80063ac:	4909      	ldr	r1, [pc, #36]	; (80063d4 <W25Q_Erase_Chip+0x50>)
 80063ae:	480a      	ldr	r0, [pc, #40]	; (80063d8 <W25Q_Erase_Chip+0x54>)
 80063b0:	f00c ffa9 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 80063b4:	2201      	movs	r2, #1
 80063b6:	2101      	movs	r1, #1
 80063b8:	4805      	ldr	r0, [pc, #20]	; (80063d0 <W25Q_Erase_Chip+0x4c>)
 80063ba:	f005 fa07 	bl	800b7cc <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 80063be:	f7ff fedb 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 80063c2:	f7ff fe7b 	bl	80060bc <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 80063c6:	200f      	movs	r0, #15
 80063c8:	f7ff fe96 	bl	80060f8 <W25Q_Set_Block_Protect>
}
 80063cc:	bf00      	nop
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40020400 	.word	0x40020400
 80063d4:	200009ac 	.word	0x200009ac
 80063d8:	20000310 	.word	0x20000310

080063dc <W25Q_Write_Data>:

void W25Q_Write_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
	W25Q_Wait_Write_End();
 80063e8:	f7ff fec6 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 80063ec:	2000      	movs	r0, #0
 80063ee:	f7ff fe83 	bl	80060f8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 80063f2:	f7ff fe45 	bl	8006080 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80063f6:	2200      	movs	r2, #0
 80063f8:	2101      	movs	r1, #1
 80063fa:	4829      	ldr	r0, [pc, #164]	; (80064a0 <W25Q_Write_Data+0xc4>)
 80063fc:	f005 f9e6 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 8006400:	4b28      	ldr	r3, [pc, #160]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006402:	2202      	movs	r2, #2
 8006404:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 8006406:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <W25Q_Write_Data+0xcc>)
 8006408:	7fdb      	ldrb	r3, [r3, #31]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01a      	beq.n	8006444 <W25Q_Write_Data+0x68>
	{
		buf[1] = (addr >> 24) & 0xFF;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	0e1b      	lsrs	r3, r3, #24
 8006412:	b2da      	uxtb	r2, r3
 8006414:	4b23      	ldr	r3, [pc, #140]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006416:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 16) & 0xFF;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	0c1b      	lsrs	r3, r3, #16
 800641c:	b2da      	uxtb	r2, r3
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006420:	709a      	strb	r2, [r3, #2]
		buf[3] = (addr >> 8) & 0xFF;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	0a1b      	lsrs	r3, r3, #8
 8006426:	b2da      	uxtb	r2, r3
 8006428:	4b1e      	ldr	r3, [pc, #120]	; (80064a4 <W25Q_Write_Data+0xc8>)
 800642a:	70da      	strb	r2, [r3, #3]
		buf[4] = addr & 0xFF;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006432:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006438:	2205      	movs	r2, #5
 800643a:	491a      	ldr	r1, [pc, #104]	; (80064a4 <W25Q_Write_Data+0xc8>)
 800643c:	481b      	ldr	r0, [pc, #108]	; (80064ac <W25Q_Write_Data+0xd0>)
 800643e:	f00c ff62 	bl	8013306 <HAL_SPI_Transmit>
 8006442:	e014      	b.n	800646e <W25Q_Write_Data+0x92>
	}
	else
	{
		buf[1] = (addr >> 16) & 0xFF;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	0c1b      	lsrs	r3, r3, #16
 8006448:	b2da      	uxtb	r2, r3
 800644a:	4b16      	ldr	r3, [pc, #88]	; (80064a4 <W25Q_Write_Data+0xc8>)
 800644c:	705a      	strb	r2, [r3, #1]
		buf[2] = (addr >> 8) & 0xFF;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	0a1b      	lsrs	r3, r3, #8
 8006452:	b2da      	uxtb	r2, r3
 8006454:	4b13      	ldr	r3, [pc, #76]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006456:	709a      	strb	r2, [r3, #2]
		buf[3] = addr & 0xFF;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <W25Q_Write_Data+0xc8>)
 800645e:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006464:	2204      	movs	r2, #4
 8006466:	490f      	ldr	r1, [pc, #60]	; (80064a4 <W25Q_Write_Data+0xc8>)
 8006468:	4810      	ldr	r0, [pc, #64]	; (80064ac <W25Q_Write_Data+0xd0>)
 800646a:	f00c ff4c 	bl	8013306 <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	b29a      	uxth	r2, r3
 8006472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	480c      	ldr	r0, [pc, #48]	; (80064ac <W25Q_Write_Data+0xd0>)
 800647a:	f00c ff44 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800647e:	2201      	movs	r2, #1
 8006480:	2101      	movs	r1, #1
 8006482:	4807      	ldr	r0, [pc, #28]	; (80064a0 <W25Q_Write_Data+0xc4>)
 8006484:	f005 f9a2 	bl	800b7cc <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 8006488:	f7ff fe76 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 800648c:	f7ff fe16 	bl	80060bc <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 8006490:	200f      	movs	r0, #15
 8006492:	f7ff fe31 	bl	80060f8 <W25Q_Set_Block_Protect>
}
 8006496:	bf00      	nop
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40020400 	.word	0x40020400
 80064a4:	200009ac 	.word	0x200009ac
 80064a8:	20000988 	.word	0x20000988
 80064ac:	20000310 	.word	0x20000310

080064b0 <W25Q_Write_Page>:

void W25Q_Write_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 80064be:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <W25Q_Write_Page+0x104>)
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d902      	bls.n	80064d0 <W25Q_Write_Page+0x20>
		sz=w25_info.PageSize;
 80064ca:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <W25Q_Write_Page+0x104>)
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	4413      	add	r3, r2
 80064d6:	4a37      	ldr	r2, [pc, #220]	; (80065b4 <W25Q_Write_Page+0x104>)
 80064d8:	8812      	ldrh	r2, [r2, #0]
 80064da:	4293      	cmp	r3, r2
 80064dc:	d905      	bls.n	80064ea <W25Q_Write_Page+0x3a>
		sz = w25_info.PageSize - offset;
 80064de:	4b35      	ldr	r3, [pc, #212]	; (80065b4 <W25Q_Write_Page+0x104>)
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	461a      	mov	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 80064ea:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <W25Q_Write_Page+0x104>)
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	60bb      	str	r3, [r7, #8]

	W25Q_Wait_Write_End();
 80064fc:	f7ff fe3c 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Set_Block_Protect(0x00);
 8006500:	2000      	movs	r0, #0
 8006502:	f7ff fdf9 	bl	80060f8 <W25Q_Set_Block_Protect>
	W25Q_Write_Enable();
 8006506:	f7ff fdbb 	bl	8006080 <W25Q_Write_Enable>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 800650a:	2200      	movs	r2, #0
 800650c:	2101      	movs	r1, #1
 800650e:	482a      	ldr	r0, [pc, #168]	; (80065b8 <W25Q_Write_Page+0x108>)
 8006510:	f005 f95c 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_PAGE_PROGRAMM;
 8006514:	4b29      	ldr	r3, [pc, #164]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006516:	2202      	movs	r2, #2
 8006518:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 800651a:	4b26      	ldr	r3, [pc, #152]	; (80065b4 <W25Q_Write_Page+0x104>)
 800651c:	7fdb      	ldrb	r3, [r3, #31]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d01a      	beq.n	8006558 <W25Q_Write_Page+0xa8>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	0e1b      	lsrs	r3, r3, #24
 8006526:	b2da      	uxtb	r2, r3
 8006528:	4b24      	ldr	r3, [pc, #144]	; (80065bc <W25Q_Write_Page+0x10c>)
 800652a:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	0c1b      	lsrs	r3, r3, #16
 8006530:	b2da      	uxtb	r2, r3
 8006532:	4b22      	ldr	r3, [pc, #136]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006534:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	0a1b      	lsrs	r3, r3, #8
 800653a:	b2da      	uxtb	r2, r3
 800653c:	4b1f      	ldr	r3, [pc, #124]	; (80065bc <W25Q_Write_Page+0x10c>)
 800653e:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b1d      	ldr	r3, [pc, #116]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006546:	711a      	strb	r2, [r3, #4]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800654c:	2205      	movs	r2, #5
 800654e:	491b      	ldr	r1, [pc, #108]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006550:	481b      	ldr	r0, [pc, #108]	; (80065c0 <W25Q_Write_Page+0x110>)
 8006552:	f00c fed8 	bl	8013306 <HAL_SPI_Transmit>
 8006556:	e014      	b.n	8006582 <W25Q_Write_Page+0xd2>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	0c1b      	lsrs	r3, r3, #16
 800655c:	b2da      	uxtb	r2, r3
 800655e:	4b17      	ldr	r3, [pc, #92]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006560:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	0a1b      	lsrs	r3, r3, #8
 8006566:	b2da      	uxtb	r2, r3
 8006568:	4b14      	ldr	r3, [pc, #80]	; (80065bc <W25Q_Write_Page+0x10c>)
 800656a:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	b2da      	uxtb	r2, r3
 8006570:	4b12      	ldr	r3, [pc, #72]	; (80065bc <W25Q_Write_Page+0x10c>)
 8006572:	70da      	strb	r2, [r3, #3]
		HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 8006574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006578:	2204      	movs	r2, #4
 800657a:	4910      	ldr	r1, [pc, #64]	; (80065bc <W25Q_Write_Page+0x10c>)
 800657c:	4810      	ldr	r0, [pc, #64]	; (80065c0 <W25Q_Write_Page+0x110>)
 800657e:	f00c fec2 	bl	8013306 <HAL_SPI_Transmit>
	}
	HAL_SPI_Transmit (&W25Q_SPI, data, sz, 1000);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	b29a      	uxth	r2, r3
 8006586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	480c      	ldr	r0, [pc, #48]	; (80065c0 <W25Q_Write_Page+0x110>)
 800658e:	f00c feba 	bl	8013306 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006592:	2201      	movs	r2, #1
 8006594:	2101      	movs	r1, #1
 8006596:	4808      	ldr	r0, [pc, #32]	; (80065b8 <W25Q_Write_Page+0x108>)
 8006598:	f005 f918 	bl	800b7cc <HAL_GPIO_WritePin>
	W25Q_Wait_Write_End();
 800659c:	f7ff fdec 	bl	8006178 <W25Q_Wait_Write_End>
	W25Q_Write_Disable();
 80065a0:	f7ff fd8c 	bl	80060bc <W25Q_Write_Disable>
	W25Q_Set_Block_Protect(0x0F);
 80065a4:	200f      	movs	r0, #15
 80065a6:	f7ff fda7 	bl	80060f8 <W25Q_Set_Block_Protect>
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000988 	.word	0x20000988
 80065b8:	40020400 	.word	0x40020400
 80065bc:	200009ac 	.word	0x200009ac
 80065c0:	20000310 	.word	0x20000310

080065c4 <W25Q_Read_Data>:

void W25Q_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80065d0:	2200      	movs	r2, #0
 80065d2:	2101      	movs	r1, #1
 80065d4:	4815      	ldr	r0, [pc, #84]	; (800662c <W25Q_Read_Data+0x68>)
 80065d6:	f005 f8f9 	bl	800b7cc <HAL_GPIO_WritePin>
	buf[0] = W25Q_READ;
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <W25Q_Read_Data+0x6c>)
 80065dc:	2203      	movs	r2, #3
 80065de:	701a      	strb	r2, [r3, #0]
	buf[1] = (addr >> 16) & 0xFF;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	0c1b      	lsrs	r3, r3, #16
 80065e4:	b2da      	uxtb	r2, r3
 80065e6:	4b12      	ldr	r3, [pc, #72]	; (8006630 <W25Q_Read_Data+0x6c>)
 80065e8:	705a      	strb	r2, [r3, #1]
	buf[2] = (addr >> 8) & 0xFF;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	0a1b      	lsrs	r3, r3, #8
 80065ee:	b2da      	uxtb	r2, r3
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <W25Q_Read_Data+0x6c>)
 80065f2:	709a      	strb	r2, [r3, #2]
	buf[3] = addr & 0xFF;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	4b0d      	ldr	r3, [pc, #52]	; (8006630 <W25Q_Read_Data+0x6c>)
 80065fa:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit (&W25Q_SPI, buf, 4, 1000);
 80065fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006600:	2204      	movs	r2, #4
 8006602:	490b      	ldr	r1, [pc, #44]	; (8006630 <W25Q_Read_Data+0x6c>)
 8006604:	480b      	ldr	r0, [pc, #44]	; (8006634 <W25Q_Read_Data+0x70>)
 8006606:	f00c fe7e 	bl	8013306 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	b29a      	uxth	r2, r3
 800660e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	4807      	ldr	r0, [pc, #28]	; (8006634 <W25Q_Read_Data+0x70>)
 8006616:	f00c ffb2 	bl	801357e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 800661a:	2201      	movs	r2, #1
 800661c:	2101      	movs	r1, #1
 800661e:	4803      	ldr	r0, [pc, #12]	; (800662c <W25Q_Read_Data+0x68>)
 8006620:	f005 f8d4 	bl	800b7cc <HAL_GPIO_WritePin>
}
 8006624:	bf00      	nop
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40020400 	.word	0x40020400
 8006630:	200009ac 	.word	0x200009ac
 8006634:	20000310 	.word	0x20000310

08006638 <W25Q_Read_Page>:

void W25Q_Read_Page(uint8_t* data, uint32_t page_addr, uint32_t offset, uint32_t sz) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
	if(sz > w25_info.PageSize)
 8006646:	4b3b      	ldr	r3, [pc, #236]	; (8006734 <W25Q_Read_Page+0xfc>)
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4293      	cmp	r3, r2
 8006650:	d902      	bls.n	8006658 <W25Q_Read_Page+0x20>
		sz=w25_info.PageSize;
 8006652:	4b38      	ldr	r3, [pc, #224]	; (8006734 <W25Q_Read_Page+0xfc>)
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	603b      	str	r3, [r7, #0]
	if((offset+sz) > w25_info.PageSize)
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	4413      	add	r3, r2
 800665e:	4a35      	ldr	r2, [pc, #212]	; (8006734 <W25Q_Read_Page+0xfc>)
 8006660:	8812      	ldrh	r2, [r2, #0]
 8006662:	4293      	cmp	r3, r2
 8006664:	d905      	bls.n	8006672 <W25Q_Read_Page+0x3a>
		sz = w25_info.PageSize - offset;
 8006666:	4b33      	ldr	r3, [pc, #204]	; (8006734 <W25Q_Read_Page+0xfc>)
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	603b      	str	r3, [r7, #0]
	page_addr = page_addr * w25_info.PageSize + offset;
 8006672:	4b30      	ldr	r3, [pc, #192]	; (8006734 <W25Q_Read_Page+0xfc>)
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	4413      	add	r3, r2
 8006682:	60bb      	str	r3, [r7, #8]
	buf[0] = W25Q_FAST_READ;
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <W25Q_Read_Page+0x100>)
 8006686:	220b      	movs	r2, #11
 8006688:	701a      	strb	r2, [r3, #0]
	if(w25_info.high_cap)
 800668a:	4b2a      	ldr	r3, [pc, #168]	; (8006734 <W25Q_Read_Page+0xfc>)
 800668c:	7fdb      	ldrb	r3, [r3, #31]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d022      	beq.n	80066d8 <W25Q_Read_Page+0xa0>
	{
		buf[1] = (page_addr >> 24) & 0xFF;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	0e1b      	lsrs	r3, r3, #24
 8006696:	b2da      	uxtb	r2, r3
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <W25Q_Read_Page+0x100>)
 800669a:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 16) & 0xFF;
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4b25      	ldr	r3, [pc, #148]	; (8006738 <W25Q_Read_Page+0x100>)
 80066a4:	709a      	strb	r2, [r3, #2]
		buf[3] = (page_addr >> 8) & 0xFF;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	0a1b      	lsrs	r3, r3, #8
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <W25Q_Read_Page+0x100>)
 80066ae:	70da      	strb	r2, [r3, #3]
		buf[4] = page_addr & 0xFF;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <W25Q_Read_Page+0x100>)
 80066b6:	711a      	strb	r2, [r3, #4]
		buf[5] = 0;
 80066b8:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <W25Q_Read_Page+0x100>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	715a      	strb	r2, [r3, #5]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80066be:	2200      	movs	r2, #0
 80066c0:	2101      	movs	r1, #1
 80066c2:	481e      	ldr	r0, [pc, #120]	; (800673c <W25Q_Read_Page+0x104>)
 80066c4:	f005 f882 	bl	800b7cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 6, 1000);
 80066c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80066cc:	2206      	movs	r2, #6
 80066ce:	491a      	ldr	r1, [pc, #104]	; (8006738 <W25Q_Read_Page+0x100>)
 80066d0:	481b      	ldr	r0, [pc, #108]	; (8006740 <W25Q_Read_Page+0x108>)
 80066d2:	f00c fe18 	bl	8013306 <HAL_SPI_Transmit>
 80066d6:	e01c      	b.n	8006712 <W25Q_Read_Page+0xda>
	}
	else
	{
		buf[1] = (page_addr >> 16) & 0xFF;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	0c1b      	lsrs	r3, r3, #16
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <W25Q_Read_Page+0x100>)
 80066e0:	705a      	strb	r2, [r3, #1]
		buf[2] = (page_addr >> 8) & 0xFF;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	0a1b      	lsrs	r3, r3, #8
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b13      	ldr	r3, [pc, #76]	; (8006738 <W25Q_Read_Page+0x100>)
 80066ea:	709a      	strb	r2, [r3, #2]
		buf[3] = page_addr & 0xFF;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b11      	ldr	r3, [pc, #68]	; (8006738 <W25Q_Read_Page+0x100>)
 80066f2:	70da      	strb	r2, [r3, #3]
		buf[4] = 0;
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <W25Q_Read_Page+0x100>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 80066fa:	2200      	movs	r2, #0
 80066fc:	2101      	movs	r1, #1
 80066fe:	480f      	ldr	r0, [pc, #60]	; (800673c <W25Q_Read_Page+0x104>)
 8006700:	f005 f864 	bl	800b7cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit (&W25Q_SPI, buf, 5, 1000);
 8006704:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006708:	2205      	movs	r2, #5
 800670a:	490b      	ldr	r1, [pc, #44]	; (8006738 <W25Q_Read_Page+0x100>)
 800670c:	480c      	ldr	r0, [pc, #48]	; (8006740 <W25Q_Read_Page+0x108>)
 800670e:	f00c fdfa 	bl	8013306 <HAL_SPI_Transmit>
	}
	HAL_SPI_Receive (&W25Q_SPI, data, sz, 1000);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	b29a      	uxth	r2, r3
 8006716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800671a:	68f9      	ldr	r1, [r7, #12]
 800671c:	4808      	ldr	r0, [pc, #32]	; (8006740 <W25Q_Read_Page+0x108>)
 800671e:	f00c ff2e 	bl	801357e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006722:	2201      	movs	r2, #1
 8006724:	2101      	movs	r1, #1
 8006726:	4805      	ldr	r0, [pc, #20]	; (800673c <W25Q_Read_Page+0x104>)
 8006728:	f005 f850 	bl	800b7cc <HAL_GPIO_WritePin>
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000988 	.word	0x20000988
 8006738:	200009ac 	.word	0x200009ac
 800673c:	40020400 	.word	0x40020400
 8006740:	20000310 	.word	0x20000310

08006744 <W25Q_Read_ID>:

uint32_t W25Q_Read_ID(void) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	buf[0] = W25Q_GET_JEDEC_ID;
 800674a:	4b13      	ldr	r3, [pc, #76]	; (8006798 <W25Q_Read_ID+0x54>)
 800674c:	229f      	movs	r2, #159	; 0x9f
 800674e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_RESET);
 8006750:	2200      	movs	r2, #0
 8006752:	2101      	movs	r1, #1
 8006754:	4811      	ldr	r0, [pc, #68]	; (800679c <W25Q_Read_ID+0x58>)
 8006756:	f005 f839 	bl	800b7cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&W25Q_SPI, buf, 1, 1000);
 800675a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800675e:	2201      	movs	r2, #1
 8006760:	490d      	ldr	r1, [pc, #52]	; (8006798 <W25Q_Read_ID+0x54>)
 8006762:	480f      	ldr	r0, [pc, #60]	; (80067a0 <W25Q_Read_ID+0x5c>)
 8006764:	f00c fdcf 	bl	8013306 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&W25Q_SPI, dt, 3, 1000);
 8006768:	1d39      	adds	r1, r7, #4
 800676a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676e:	2203      	movs	r2, #3
 8006770:	480b      	ldr	r0, [pc, #44]	; (80067a0 <W25Q_Read_ID+0x5c>)
 8006772:	f00c ff04 	bl	801357e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(W25Q_NSS_PORT, W25Q_NSS_PIN, GPIO_PIN_SET);
 8006776:	2201      	movs	r2, #1
 8006778:	2101      	movs	r1, #1
 800677a:	4808      	ldr	r0, [pc, #32]	; (800679c <W25Q_Read_ID+0x58>)
 800677c:	f005 f826 	bl	800b7cc <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 8006780:	793b      	ldrb	r3, [r7, #4]
 8006782:	041a      	lsls	r2, r3, #16
 8006784:	797b      	ldrb	r3, [r7, #5]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	4313      	orrs	r3, r2
 800678a:	79ba      	ldrb	r2, [r7, #6]
 800678c:	4313      	orrs	r3, r2
 800678e:	bf00      	nop
}
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200009ac 	.word	0x200009ac
 800679c:	40020400 	.word	0x40020400
 80067a0:	20000310 	.word	0x20000310

080067a4 <W25Q_Init>:

void W25Q_Init(void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b08a      	sub	sp, #40	; 0x28
 80067a8:	af00      	add	r7, sp, #0
	unsigned int id = W25Q_Read_ID();
 80067aa:	f7ff ffcb 	bl	8006744 <W25Q_Read_ID>
 80067ae:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(100);
 80067b0:	2064      	movs	r0, #100	; 0x64
 80067b2:	f000 fc3f 	bl	8007034 <HAL_Delay>
	W25Q_Reset();
 80067b6:	f7ff fc41 	bl	800603c <W25Q_Reset>
	HAL_Delay(100);
 80067ba:	2064      	movs	r0, #100	; 0x64
 80067bc:	f000 fc3a 	bl	8007034 <HAL_Delay>
	id &= 0x0000FFFF;
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
	w25_info.high_cap = 0;
 80067c6:	4b85      	ldr	r3, [pc, #532]	; (80069dc <W25Q_Init+0x238>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	77da      	strb	r2, [r3, #31]
	switch(id)
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80067d2:	3b11      	subs	r3, #17
 80067d4:	2b09      	cmp	r3, #9
 80067d6:	f200 81e7 	bhi.w	8006ba8 <W25Q_Init+0x404>
 80067da:	a201      	add	r2, pc, #4	; (adr r2, 80067e0 <W25Q_Init+0x3c>)
 80067dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e0:	08006863 	.word	0x08006863
 80067e4:	0800685b 	.word	0x0800685b
 80067e8:	08006853 	.word	0x08006853
 80067ec:	0800684b 	.word	0x0800684b
 80067f0:	08006843 	.word	0x08006843
 80067f4:	0800683b 	.word	0x0800683b
 80067f8:	08006833 	.word	0x08006833
 80067fc:	08006829 	.word	0x08006829
 8006800:	08006819 	.word	0x08006819
 8006804:	08006809 	.word	0x08006809
	{
	case 0x401A:
		w25_info.high_cap=1;
 8006808:	4b74      	ldr	r3, [pc, #464]	; (80069dc <W25Q_Init+0x238>)
 800680a:	2201      	movs	r2, #1
 800680c:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=1024;
 800680e:	4b73      	ldr	r3, [pc, #460]	; (80069dc <W25Q_Init+0x238>)
 8006810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006814:	615a      	str	r2, [r3, #20]
		break;
 8006816:	e028      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4019:
		w25_info.high_cap=1;
 8006818:	4b70      	ldr	r3, [pc, #448]	; (80069dc <W25Q_Init+0x238>)
 800681a:	2201      	movs	r2, #1
 800681c:	77da      	strb	r2, [r3, #31]
		w25_info.BlockCount=512;
 800681e:	4b6f      	ldr	r3, [pc, #444]	; (80069dc <W25Q_Init+0x238>)
 8006820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006824:	615a      	str	r2, [r3, #20]
		break;
 8006826:	e020      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4018:
		w25_info.BlockCount=256;
 8006828:	4b6c      	ldr	r3, [pc, #432]	; (80069dc <W25Q_Init+0x238>)
 800682a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682e:	615a      	str	r2, [r3, #20]
		break;
 8006830:	e01b      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4017:
		w25_info.BlockCount=128;
 8006832:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <W25Q_Init+0x238>)
 8006834:	2280      	movs	r2, #128	; 0x80
 8006836:	615a      	str	r2, [r3, #20]
		break;
 8006838:	e017      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4016:
		w25_info.BlockCount=64;
 800683a:	4b68      	ldr	r3, [pc, #416]	; (80069dc <W25Q_Init+0x238>)
 800683c:	2240      	movs	r2, #64	; 0x40
 800683e:	615a      	str	r2, [r3, #20]
		break;
 8006840:	e013      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4015:
		w25_info.BlockCount=32;
 8006842:	4b66      	ldr	r3, [pc, #408]	; (80069dc <W25Q_Init+0x238>)
 8006844:	2220      	movs	r2, #32
 8006846:	615a      	str	r2, [r3, #20]
		break;
 8006848:	e00f      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4014:
		w25_info.BlockCount=16;
 800684a:	4b64      	ldr	r3, [pc, #400]	; (80069dc <W25Q_Init+0x238>)
 800684c:	2210      	movs	r2, #16
 800684e:	615a      	str	r2, [r3, #20]
		break;
 8006850:	e00b      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4013:
		w25_info.BlockCount=8;
 8006852:	4b62      	ldr	r3, [pc, #392]	; (80069dc <W25Q_Init+0x238>)
 8006854:	2208      	movs	r2, #8
 8006856:	615a      	str	r2, [r3, #20]
		break;
 8006858:	e007      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4012:
		w25_info.BlockCount=4;
 800685a:	4b60      	ldr	r3, [pc, #384]	; (80069dc <W25Q_Init+0x238>)
 800685c:	2204      	movs	r2, #4
 800685e:	615a      	str	r2, [r3, #20]
		break;
 8006860:	e003      	b.n	800686a <W25Q_Init+0xc6>
	case 0x4011:
		w25_info.BlockCount=2;
 8006862:	4b5e      	ldr	r3, [pc, #376]	; (80069dc <W25Q_Init+0x238>)
 8006864:	2202      	movs	r2, #2
 8006866:	615a      	str	r2, [r3, #20]
		break;
 8006868:	bf00      	nop
	default:
		return;
	}
	w25_info.PageSize=256;
 800686a:	4b5c      	ldr	r3, [pc, #368]	; (80069dc <W25Q_Init+0x238>)
 800686c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006870:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8006872:	4b5a      	ldr	r3, [pc, #360]	; (80069dc <W25Q_Init+0x238>)
 8006874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006878:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 800687a:	4b58      	ldr	r3, [pc, #352]	; (80069dc <W25Q_Init+0x238>)
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	011b      	lsls	r3, r3, #4
 8006880:	4a56      	ldr	r2, [pc, #344]	; (80069dc <W25Q_Init+0x238>)
 8006882:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8006884:	4b55      	ldr	r3, [pc, #340]	; (80069dc <W25Q_Init+0x238>)
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4a54      	ldr	r2, [pc, #336]	; (80069dc <W25Q_Init+0x238>)
 800688a:	6892      	ldr	r2, [r2, #8]
 800688c:	fb02 f303 	mul.w	r3, r2, r3
 8006890:	4a52      	ldr	r2, [pc, #328]	; (80069dc <W25Q_Init+0x238>)
 8006892:	8812      	ldrh	r2, [r2, #0]
 8006894:	fbb3 f3f2 	udiv	r3, r3, r2
 8006898:	4a50      	ldr	r2, [pc, #320]	; (80069dc <W25Q_Init+0x238>)
 800689a:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 800689c:	4b4f      	ldr	r3, [pc, #316]	; (80069dc <W25Q_Init+0x238>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	4a4e      	ldr	r2, [pc, #312]	; (80069dc <W25Q_Init+0x238>)
 80068a4:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 80068a6:	4b4d      	ldr	r3, [pc, #308]	; (80069dc <W25Q_Init+0x238>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	4a4c      	ldr	r2, [pc, #304]	; (80069dc <W25Q_Init+0x238>)
 80068ac:	6892      	ldr	r2, [r2, #8]
 80068ae:	fb02 f303 	mul.w	r3, r2, r3
 80068b2:	0a9b      	lsrs	r3, r3, #10
 80068b4:	4a49      	ldr	r2, [pc, #292]	; (80069dc <W25Q_Init+0x238>)
 80068b6:	6193      	str	r3, [r2, #24]

#if (INIT_DEBUG == 1)
	char str1[30];
	sprintf(str1,"ID:0x%X\r\n",id);
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	4948      	ldr	r1, [pc, #288]	; (80069e0 <W25Q_Init+0x23c>)
 80068be:	4618      	mov	r0, r3
 80068c0:	f014 fa3a 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1, strlen(str1), 0x1000);
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	4618      	mov	r0, r3
 80068c8:	f012 fc40 	bl	801914c <strlen>
 80068cc:	4603      	mov	r3, r0
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	1d39      	adds	r1, r7, #4
 80068d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068d6:	4843      	ldr	r0, [pc, #268]	; (80069e4 <W25Q_Init+0x240>)
 80068d8:	f00f fb71 	bl	8015fbe <HAL_UART_Transmit>

	w25_info.high_cap = 0;
 80068dc:	4b3f      	ldr	r3, [pc, #252]	; (80069dc <W25Q_Init+0x238>)
 80068de:	2200      	movs	r2, #0
 80068e0:	77da      	strb	r2, [r3, #31]

	switch(id)
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80068e8:	3b11      	subs	r3, #17
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	f200 8090 	bhi.w	8006a10 <W25Q_Init+0x26c>
 80068f0:	a201      	add	r2, pc, #4	; (adr r2, 80068f8 <W25Q_Init+0x154>)
 80068f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	080069c9 	.word	0x080069c9
 80068fc:	080069b7 	.word	0x080069b7
 8006900:	080069a5 	.word	0x080069a5
 8006904:	08006993 	.word	0x08006993
 8006908:	08006981 	.word	0x08006981
 800690c:	0800696f 	.word	0x0800696f
 8006910:	0800695d 	.word	0x0800695d
 8006914:	08006949 	.word	0x08006949
 8006918:	08006935 	.word	0x08006935
 800691c:	08006921 	.word	0x08006921
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 8006920:	4b2e      	ldr	r3, [pc, #184]	; (80069dc <W25Q_Init+0x238>)
 8006922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006926:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 8006928:	1d3b      	adds	r3, r7, #4
 800692a:	492f      	ldr	r1, [pc, #188]	; (80069e8 <W25Q_Init+0x244>)
 800692c:	4618      	mov	r0, r3
 800692e:	f014 fa03 	bl	801ad38 <siprintf>
		break;
 8006932:	e07f      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4019:
		w25_info.BlockCount=512;
 8006934:	4b29      	ldr	r3, [pc, #164]	; (80069dc <W25Q_Init+0x238>)
 8006936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 800693c:	1d3b      	adds	r3, r7, #4
 800693e:	492b      	ldr	r1, [pc, #172]	; (80069ec <W25Q_Init+0x248>)
 8006940:	4618      	mov	r0, r3
 8006942:	f014 f9f9 	bl	801ad38 <siprintf>
		break;
 8006946:	e075      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4018:
		w25_info.BlockCount=256;
 8006948:	4b24      	ldr	r3, [pc, #144]	; (80069dc <W25Q_Init+0x238>)
 800694a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800694e:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8006950:	1d3b      	adds	r3, r7, #4
 8006952:	4927      	ldr	r1, [pc, #156]	; (80069f0 <W25Q_Init+0x24c>)
 8006954:	4618      	mov	r0, r3
 8006956:	f014 f9ef 	bl	801ad38 <siprintf>
		break;
 800695a:	e06b      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4017:
		w25_info.BlockCount=128;
 800695c:	4b1f      	ldr	r3, [pc, #124]	; (80069dc <W25Q_Init+0x238>)
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8006962:	1d3b      	adds	r3, r7, #4
 8006964:	4923      	ldr	r1, [pc, #140]	; (80069f4 <W25Q_Init+0x250>)
 8006966:	4618      	mov	r0, r3
 8006968:	f014 f9e6 	bl	801ad38 <siprintf>
		break;
 800696c:	e062      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4016:
		w25_info.BlockCount=64;
 800696e:	4b1b      	ldr	r3, [pc, #108]	; (80069dc <W25Q_Init+0x238>)
 8006970:	2240      	movs	r2, #64	; 0x40
 8006972:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8006974:	1d3b      	adds	r3, r7, #4
 8006976:	4920      	ldr	r1, [pc, #128]	; (80069f8 <W25Q_Init+0x254>)
 8006978:	4618      	mov	r0, r3
 800697a:	f014 f9dd 	bl	801ad38 <siprintf>
		break;
 800697e:	e059      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4015:
		w25_info.BlockCount=32;
 8006980:	4b16      	ldr	r3, [pc, #88]	; (80069dc <W25Q_Init+0x238>)
 8006982:	2220      	movs	r2, #32
 8006984:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8006986:	1d3b      	adds	r3, r7, #4
 8006988:	491c      	ldr	r1, [pc, #112]	; (80069fc <W25Q_Init+0x258>)
 800698a:	4618      	mov	r0, r3
 800698c:	f014 f9d4 	bl	801ad38 <siprintf>
		break;
 8006990:	e050      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4014:
		w25_info.BlockCount=16;
 8006992:	4b12      	ldr	r3, [pc, #72]	; (80069dc <W25Q_Init+0x238>)
 8006994:	2210      	movs	r2, #16
 8006996:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8006998:	1d3b      	adds	r3, r7, #4
 800699a:	4919      	ldr	r1, [pc, #100]	; (8006a00 <W25Q_Init+0x25c>)
 800699c:	4618      	mov	r0, r3
 800699e:	f014 f9cb 	bl	801ad38 <siprintf>
		break;
 80069a2:	e047      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4013:
		w25_info.BlockCount=8;
 80069a4:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <W25Q_Init+0x238>)
 80069a6:	2208      	movs	r2, #8
 80069a8:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 80069aa:	1d3b      	adds	r3, r7, #4
 80069ac:	4915      	ldr	r1, [pc, #84]	; (8006a04 <W25Q_Init+0x260>)
 80069ae:	4618      	mov	r0, r3
 80069b0:	f014 f9c2 	bl	801ad38 <siprintf>
		break;
 80069b4:	e03e      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4012:
		w25_info.BlockCount=4;
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <W25Q_Init+0x238>)
 80069b8:	2204      	movs	r2, #4
 80069ba:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 80069bc:	1d3b      	adds	r3, r7, #4
 80069be:	4912      	ldr	r1, [pc, #72]	; (8006a08 <W25Q_Init+0x264>)
 80069c0:	4618      	mov	r0, r3
 80069c2:	f014 f9b9 	bl	801ad38 <siprintf>
		break;
 80069c6:	e035      	b.n	8006a34 <W25Q_Init+0x290>
	case 0x4011:
		w25_info.BlockCount=2;
 80069c8:	4b04      	ldr	r3, [pc, #16]	; (80069dc <W25Q_Init+0x238>)
 80069ca:	2202      	movs	r2, #2
 80069cc:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	490e      	ldr	r1, [pc, #56]	; (8006a0c <W25Q_Init+0x268>)
 80069d2:	4618      	mov	r0, r3
 80069d4:	f014 f9b0 	bl	801ad38 <siprintf>
		break;
 80069d8:	e02c      	b.n	8006a34 <W25Q_Init+0x290>
 80069da:	bf00      	nop
 80069dc:	20000988 	.word	0x20000988
 80069e0:	08052794 	.word	0x08052794
 80069e4:	200004d8 	.word	0x200004d8
 80069e8:	080527a0 	.word	0x080527a0
 80069ec:	080527b8 	.word	0x080527b8
 80069f0:	080527d0 	.word	0x080527d0
 80069f4:	080527e8 	.word	0x080527e8
 80069f8:	08052800 	.word	0x08052800
 80069fc:	08052818 	.word	0x08052818
 8006a00:	08052830 	.word	0x08052830
 8006a04:	08052848 	.word	0x08052848
 8006a08:	08052860 	.word	0x08052860
 8006a0c:	08052878 	.word	0x08052878
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8006a10:	1d3b      	adds	r3, r7, #4
 8006a12:	4967      	ldr	r1, [pc, #412]	; (8006bb0 <W25Q_Init+0x40c>)
 8006a14:	4618      	mov	r0, r3
 8006a16:	f014 f98f 	bl	801ad38 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006a1a:	1d3b      	adds	r3, r7, #4
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f012 fb95 	bl	801914c <strlen>
 8006a22:	4603      	mov	r3, r0
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	1d39      	adds	r1, r7, #4
 8006a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a2c:	4861      	ldr	r0, [pc, #388]	; (8006bb4 <W25Q_Init+0x410>)
 8006a2e:	f00f fac6 	bl	8015fbe <HAL_UART_Transmit>
		break;
 8006a32:	bf00      	nop
	}

	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006a34:	1d3b      	adds	r3, r7, #4
 8006a36:	4618      	mov	r0, r3
 8006a38:	f012 fb88 	bl	801914c <strlen>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	b29a      	uxth	r2, r3
 8006a40:	1d39      	adds	r1, r7, #4
 8006a42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a46:	485b      	ldr	r0, [pc, #364]	; (8006bb4 <W25Q_Init+0x410>)
 8006a48:	f00f fab9 	bl	8015fbe <HAL_UART_Transmit>
	w25_info.PageSize=256;
 8006a4c:	4b5a      	ldr	r3, [pc, #360]	; (8006bb8 <W25Q_Init+0x414>)
 8006a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a52:	801a      	strh	r2, [r3, #0]
	w25_info.SectorSize=0x1000;
 8006a54:	4b58      	ldr	r3, [pc, #352]	; (8006bb8 <W25Q_Init+0x414>)
 8006a56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a5a:	609a      	str	r2, [r3, #8]
	w25_info.SectorCount=w25_info.BlockCount*16;
 8006a5c:	4b56      	ldr	r3, [pc, #344]	; (8006bb8 <W25Q_Init+0x414>)
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4a55      	ldr	r2, [pc, #340]	; (8006bb8 <W25Q_Init+0x414>)
 8006a64:	60d3      	str	r3, [r2, #12]
	w25_info.PageCount=(w25_info.SectorCount*w25_info.SectorSize)/w25_info.PageSize;
 8006a66:	4b54      	ldr	r3, [pc, #336]	; (8006bb8 <W25Q_Init+0x414>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	4a53      	ldr	r2, [pc, #332]	; (8006bb8 <W25Q_Init+0x414>)
 8006a6c:	6892      	ldr	r2, [r2, #8]
 8006a6e:	fb02 f303 	mul.w	r3, r2, r3
 8006a72:	4a51      	ldr	r2, [pc, #324]	; (8006bb8 <W25Q_Init+0x414>)
 8006a74:	8812      	ldrh	r2, [r2, #0]
 8006a76:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a7a:	4a4f      	ldr	r2, [pc, #316]	; (8006bb8 <W25Q_Init+0x414>)
 8006a7c:	6053      	str	r3, [r2, #4]
	w25_info.BlockSize=w25_info.SectorSize*16;
 8006a7e:	4b4e      	ldr	r3, [pc, #312]	; (8006bb8 <W25Q_Init+0x414>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	4a4c      	ldr	r2, [pc, #304]	; (8006bb8 <W25Q_Init+0x414>)
 8006a86:	6113      	str	r3, [r2, #16]
	w25_info.NumKB=(w25_info.SectorCount*w25_info.SectorSize)/1024;
 8006a88:	4b4b      	ldr	r3, [pc, #300]	; (8006bb8 <W25Q_Init+0x414>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	4a4a      	ldr	r2, [pc, #296]	; (8006bb8 <W25Q_Init+0x414>)
 8006a8e:	6892      	ldr	r2, [r2, #8]
 8006a90:	fb02 f303 	mul.w	r3, r2, r3
 8006a94:	0a9b      	lsrs	r3, r3, #10
 8006a96:	4a48      	ldr	r2, [pc, #288]	; (8006bb8 <W25Q_Init+0x414>)
 8006a98:	6193      	str	r3, [r2, #24]
	sprintf(str1,"Page Size: %d Bytes\r\n",(unsigned int)w25_info.PageSize);
 8006a9a:	4b47      	ldr	r3, [pc, #284]	; (8006bb8 <W25Q_Init+0x414>)
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	1d3b      	adds	r3, r7, #4
 8006aa2:	4946      	ldr	r1, [pc, #280]	; (8006bbc <W25Q_Init+0x418>)
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f014 f947 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	4618      	mov	r0, r3
 8006aae:	f012 fb4d 	bl	801914c <strlen>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	1d39      	adds	r1, r7, #4
 8006ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006abc:	483d      	ldr	r0, [pc, #244]	; (8006bb4 <W25Q_Init+0x410>)
 8006abe:	f00f fa7e 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Page Count: %u\r\n",(unsigned int)w25_info.PageCount);
 8006ac2:	4b3d      	ldr	r3, [pc, #244]	; (8006bb8 <W25Q_Init+0x414>)
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	493d      	ldr	r1, [pc, #244]	; (8006bc0 <W25Q_Init+0x41c>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f014 f934 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006ad0:	1d3b      	adds	r3, r7, #4
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f012 fb3a 	bl	801914c <strlen>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	1d39      	adds	r1, r7, #4
 8006ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae2:	4834      	ldr	r0, [pc, #208]	; (8006bb4 <W25Q_Init+0x410>)
 8006ae4:	f00f fa6b 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Sector Size: %u Bytes\r\n",(unsigned int)w25_info.SectorSize);
 8006ae8:	4b33      	ldr	r3, [pc, #204]	; (8006bb8 <W25Q_Init+0x414>)
 8006aea:	689a      	ldr	r2, [r3, #8]
 8006aec:	1d3b      	adds	r3, r7, #4
 8006aee:	4935      	ldr	r1, [pc, #212]	; (8006bc4 <W25Q_Init+0x420>)
 8006af0:	4618      	mov	r0, r3
 8006af2:	f014 f921 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006af6:	1d3b      	adds	r3, r7, #4
 8006af8:	4618      	mov	r0, r3
 8006afa:	f012 fb27 	bl	801914c <strlen>
 8006afe:	4603      	mov	r3, r0
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	1d39      	adds	r1, r7, #4
 8006b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b08:	482a      	ldr	r0, [pc, #168]	; (8006bb4 <W25Q_Init+0x410>)
 8006b0a:	f00f fa58 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Sector Count: %u\r\n",(unsigned int)w25_info.SectorCount);
 8006b0e:	4b2a      	ldr	r3, [pc, #168]	; (8006bb8 <W25Q_Init+0x414>)
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	1d3b      	adds	r3, r7, #4
 8006b14:	492c      	ldr	r1, [pc, #176]	; (8006bc8 <W25Q_Init+0x424>)
 8006b16:	4618      	mov	r0, r3
 8006b18:	f014 f90e 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006b1c:	1d3b      	adds	r3, r7, #4
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f012 fb14 	bl	801914c <strlen>
 8006b24:	4603      	mov	r3, r0
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	1d39      	adds	r1, r7, #4
 8006b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b2e:	4821      	ldr	r0, [pc, #132]	; (8006bb4 <W25Q_Init+0x410>)
 8006b30:	f00f fa45 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Block Size: %u Bytes\r\n",(unsigned int)w25_info.BlockSize);
 8006b34:	4b20      	ldr	r3, [pc, #128]	; (8006bb8 <W25Q_Init+0x414>)
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	1d3b      	adds	r3, r7, #4
 8006b3a:	4924      	ldr	r1, [pc, #144]	; (8006bcc <W25Q_Init+0x428>)
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f014 f8fb 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006b42:	1d3b      	adds	r3, r7, #4
 8006b44:	4618      	mov	r0, r3
 8006b46:	f012 fb01 	bl	801914c <strlen>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	1d39      	adds	r1, r7, #4
 8006b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b54:	4817      	ldr	r0, [pc, #92]	; (8006bb4 <W25Q_Init+0x410>)
 8006b56:	f00f fa32 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <W25Q_Init+0x414>)
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	1d3b      	adds	r3, r7, #4
 8006b60:	491b      	ldr	r1, [pc, #108]	; (8006bd0 <W25Q_Init+0x42c>)
 8006b62:	4618      	mov	r0, r3
 8006b64:	f014 f8e8 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006b68:	1d3b      	adds	r3, r7, #4
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f012 faee 	bl	801914c <strlen>
 8006b70:	4603      	mov	r3, r0
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	1d39      	adds	r1, r7, #4
 8006b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7a:	480e      	ldr	r0, [pc, #56]	; (8006bb4 <W25Q_Init+0x410>)
 8006b7c:	f00f fa1f 	bl	8015fbe <HAL_UART_Transmit>
	sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
 8006b80:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <W25Q_Init+0x414>)
 8006b82:	699a      	ldr	r2, [r3, #24]
 8006b84:	1d3b      	adds	r3, r7, #4
 8006b86:	4913      	ldr	r1, [pc, #76]	; (8006bd4 <W25Q_Init+0x430>)
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f014 f8d5 	bl	801ad38 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
 8006b8e:	1d3b      	adds	r3, r7, #4
 8006b90:	4618      	mov	r0, r3
 8006b92:	f012 fadb 	bl	801914c <strlen>
 8006b96:	4603      	mov	r3, r0
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	1d39      	adds	r1, r7, #4
 8006b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ba0:	4804      	ldr	r0, [pc, #16]	; (8006bb4 <W25Q_Init+0x410>)
 8006ba2:	f00f fa0c 	bl	8015fbe <HAL_UART_Transmit>
 8006ba6:	e000      	b.n	8006baa <W25Q_Init+0x406>
		return;
 8006ba8:	bf00      	nop
#endif
}
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	08052890 	.word	0x08052890
 8006bb4:	200004d8 	.word	0x200004d8
 8006bb8:	20000988 	.word	0x20000988
 8006bbc:	080528a4 	.word	0x080528a4
 8006bc0:	080528bc 	.word	0x080528bc
 8006bc4:	080528d0 	.word	0x080528d0
 8006bc8:	080528e8 	.word	0x080528e8
 8006bcc:	080528fc 	.word	0x080528fc
 8006bd0:	08052914 	.word	0x08052914
 8006bd4:	08052928 	.word	0x08052928

08006bd8 <W25Q_Save_Page>:

void W25Q_Save_Page(uint32_t pagenum, uint8_t* data, uint32_t sz) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
	W25Q_Erase_Sector(pagenum);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fb01 	bl	80061ec <W25Q_Erase_Sector>
	W25Q_Write_Data(pagenum * 4096, data, sz);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	031b      	lsls	r3, r3, #12
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	68b9      	ldr	r1, [r7, #8]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fbf2 	bl	80063dc <W25Q_Write_Data>
}
 8006bf8:	bf00      	nop
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <W25Q_Load_Page>:

void W25Q_Load_Page(uint32_t pagenum, uint8_t* data, uint32_t sz) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
	W25Q_Read_Data(pagenum * 4096, data, sz);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	031b      	lsls	r3, r3, #12
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7ff fcd5 	bl	80065c4 <W25Q_Read_Data>
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b087      	sub	sp, #28
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	ed87 0a05 	vstr	s0, [r7, #20]
 8006c2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8006c30:	ed87 1a03 	vstr	s2, [r7, #12]
 8006c34:	edc7 1a02 	vstr	s3, [r7, #8]
 8006c38:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006c3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006c40:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006c48:	edd7 6a01 	vldr	s13, [r7, #4]
 8006c4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006c54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006c58:	ed97 7a03 	vldr	s14, [r7, #12]
 8006c5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006c60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c68:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006c70:	eeb0 0a67 	vmov.f32	s0, s15
 8006c74:	371c      	adds	r7, #28
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <XPT2046_Init>:

void XPT2046_Init(void)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c86:	2201      	movs	r2, #1
 8006c88:	2180      	movs	r1, #128	; 0x80
 8006c8a:	4809      	ldr	r0, [pc, #36]	; (8006cb0 <XPT2046_Init+0x32>)
 8006c8c:	f00c fb3b 	bl	8013306 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006c90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c94:	2201      	movs	r2, #1
 8006c96:	2100      	movs	r1, #0
 8006c98:	4805      	ldr	r0, [pc, #20]	; (8006cb0 <XPT2046_Init+0x32>)
 8006c9a:	f00c fb34 	bl	8013306 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8006c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4802      	ldr	r0, [pc, #8]	; (8006cb0 <XPT2046_Init+0x32>)
 8006ca8:	f00c fb2d 	bl	8013306 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8006cac:	bf00      	nop
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000368 	.word	0x20000368

08006cb4 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	f000 f9b8 	bl	8007034 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006cc4:	1df9      	adds	r1, r7, #7
 8006cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cca:	2201      	movs	r2, #1
 8006ccc:	4814      	ldr	r0, [pc, #80]	; (8006d20 <getRaw+0x6c>)
 8006cce:	f00c fb1a 	bl	8013306 <HAL_SPI_Transmit>
	address = 0x00;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006cd6:	f107 020b 	add.w	r2, r7, #11
 8006cda:	1df9      	adds	r1, r7, #7
 8006cdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	480e      	ldr	r0, [pc, #56]	; (8006d20 <getRaw+0x6c>)
 8006ce6:	f00c fd5b 	bl	80137a0 <HAL_SPI_TransmitReceive>
	MSB = data;   
 8006cea:	7afb      	ldrb	r3, [r7, #11]
 8006cec:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006cf2:	f107 020b 	add.w	r2, r7, #11
 8006cf6:	1df9      	adds	r1, r7, #7
 8006cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4807      	ldr	r0, [pc, #28]	; (8006d20 <getRaw+0x6c>)
 8006d02:	f00c fd4d 	bl	80137a0 <HAL_SPI_TransmitReceive>
	LSB = data;
 8006d06:	7afb      	ldrb	r3, [r7, #11]
 8006d08:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8006d0a:	89fb      	ldrh	r3, [r7, #14]
 8006d0c:	021a      	lsls	r2, r3, #8
 8006d0e:	89bb      	ldrh	r3, [r7, #12]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	10db      	asrs	r3, r3, #3
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	bf00      	nop
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000368 	.word	0x20000368

08006d24 <X>:

inline static uint16_t X(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8006d2a:	20d0      	movs	r0, #208	; 0xd0
 8006d2c:	f7ff ffc2 	bl	8006cb4 <getRaw>
 8006d30:	4603      	mov	r3, r0
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006d88 <X+0x64>
 8006d3e:	eddf 1a13 	vldr	s3, [pc, #76]	; 8006d8c <X+0x68>
 8006d42:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006d90 <X+0x6c>
 8006d46:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006d94 <X+0x70>
 8006d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d4e:	f7ff ff68 	bl	8006c22 <remap>
 8006d52:	eef0 7a40 	vmov.f32	s15, s0
 8006d56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d5a:	ee17 3a90 	vmov	r3, s15
 8006d5e:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 8006d66:	3303      	adds	r3, #3
 8006d68:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8006d6a:	88fb      	ldrh	r3, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d006      	beq.n	8006d7e <X+0x5a>
 8006d70:	88fb      	ldrh	r3, [r7, #6]
 8006d72:	f240 321e 	movw	r2, #798	; 0x31e
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d801      	bhi.n	8006d7e <X+0x5a>
 8006d7a:	88fb      	ldrh	r3, [r7, #6]
 8006d7c:	e000      	b.n	8006d80 <X+0x5c>
	else return 0;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	4447c000 	.word	0x4447c000
 8006d8c:	00000000 	.word	0x00000000
 8006d90:	457a0000 	.word	0x457a0000
 8006d94:	43480000 	.word	0x43480000

08006d98 <Y>:

inline static uint16_t Y(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8006d9e:	2090      	movs	r0, #144	; 0x90
 8006da0:	f7ff ff88 	bl	8006cb4 <getRaw>
 8006da4:	4603      	mov	r3, r0
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006df0 <Y+0x58>
 8006db2:	eddf 1a10 	vldr	s3, [pc, #64]	; 8006df4 <Y+0x5c>
 8006db6:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006df8 <Y+0x60>
 8006dba:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006dfc <Y+0x64>
 8006dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006dc2:	f7ff ff2e 	bl	8006c22 <remap>
 8006dc6:	eef0 7a40 	vmov.f32	s15, s0
 8006dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dce:	ee17 3a90 	vmov	r3, s15
 8006dd2:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d005      	beq.n	8006de6 <Y+0x4e>
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006de0:	d801      	bhi.n	8006de6 <Y+0x4e>
 8006de2:	88fb      	ldrh	r3, [r7, #6]
 8006de4:	e000      	b.n	8006de8 <Y+0x50>
	else return 0;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3708      	adds	r7, #8
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	43ef8000 	.word	0x43ef8000
 8006df4:	00000000 	.word	0x00000000
 8006df8:	456d8000 	.word	0x456d8000
 8006dfc:	43480000 	.word	0x43480000

08006e00 <getX>:

uint16_t getX(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8006e06:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <getX+0x30>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8006e0c:	e007      	b.n	8006e1e <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8006e0e:	f7ff ff89 	bl	8006d24 <X>
 8006e12:	4603      	mov	r3, r0
 8006e14:	80bb      	strh	r3, [r7, #4]
 8006e16:	f7ff ff85 	bl	8006d24 <X>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8006e1e:	88ba      	ldrh	r2, [r7, #4]
 8006e20:	88fb      	ldrh	r3, [r7, #6]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d1f3      	bne.n	8006e0e <getX+0xe>
		}
		return x[0];
 8006e26:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3708      	adds	r7, #8
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	08052690 	.word	0x08052690

08006e34 <getY>:

uint16_t getY(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8006e3a:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <getY+0x30>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8006e40:	e007      	b.n	8006e52 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8006e42:	f7ff ffa9 	bl	8006d98 <Y>
 8006e46:	4603      	mov	r3, r0
 8006e48:	80bb      	strh	r3, [r7, #4]
 8006e4a:	f7ff ffa5 	bl	8006d98 <Y>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8006e52:	88ba      	ldrh	r2, [r7, #4]
 8006e54:	88fb      	ldrh	r3, [r7, #6]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d1f3      	bne.n	8006e42 <getY+0xe>
		}
		return y[0];
 8006e5a:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	08052690 	.word	0x08052690

08006e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ea8 <HAL_Init+0x40>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <HAL_Init+0x40>)
 8006e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e78:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <HAL_Init+0x40>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a0a      	ldr	r2, [pc, #40]	; (8006ea8 <HAL_Init+0x40>)
 8006e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e84:	4b08      	ldr	r3, [pc, #32]	; (8006ea8 <HAL_Init+0x40>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a07      	ldr	r2, [pc, #28]	; (8006ea8 <HAL_Init+0x40>)
 8006e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e90:	2003      	movs	r0, #3
 8006e92:	f000 fbbb 	bl	800760c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e96:	2000      	movs	r0, #0
 8006e98:	f000 f83b 	bl	8006f12 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e9c:	f7fe fb12 	bl	80054c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023c00 	.word	0x40023c00

08006eac <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006eb0:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <HAL_DeInit+0x54>)
 8006eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006eb8:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <HAL_DeInit+0x54>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8006ebe:	4b10      	ldr	r3, [pc, #64]	; (8006f00 <HAL_DeInit+0x54>)
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006ec6:	4b0e      	ldr	r3, [pc, #56]	; (8006f00 <HAL_DeInit+0x54>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <HAL_DeInit+0x54>)
 8006ece:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006ed4:	4b0a      	ldr	r3, [pc, #40]	; (8006f00 <HAL_DeInit+0x54>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006eda:	4b09      	ldr	r3, [pc, #36]	; (8006f00 <HAL_DeInit+0x54>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006ee2:	4b07      	ldr	r3, [pc, #28]	; (8006f00 <HAL_DeInit+0x54>)
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006ee8:	4b05      	ldr	r3, [pc, #20]	; (8006f00 <HAL_DeInit+0x54>)
 8006eea:	f04f 32ff 	mov.w	r2, #4294967295
 8006eee:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006ef0:	4b03      	ldr	r3, [pc, #12]	; (8006f00 <HAL_DeInit+0x54>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006ef6:	f000 f805 	bl	8006f04 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	40023800 	.word	0x40023800

08006f04 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f12:	b580      	push	{r7, lr}
 8006f14:	b082      	sub	sp, #8
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <HAL_InitTick+0x56>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <HAL_InitTick+0x5a>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	4619      	mov	r1, r3
 8006f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f28:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fbb2 	bl	800769a <HAL_SYSTICK_Config>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e00e      	b.n	8006f5e <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b0f      	cmp	r3, #15
 8006f44:	d80a      	bhi.n	8006f5c <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006f46:	2200      	movs	r2, #0
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4e:	f000 fb68 	bl	8007622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006f52:	4a07      	ldr	r2, [pc, #28]	; (8006f70 <HAL_InitTick+0x5e>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000058 	.word	0x20000058
 8006f6c:	20000060 	.word	0x20000060
 8006f70:	2000005c 	.word	0x2000005c

08006f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f78:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_IncTick+0x20>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	4b06      	ldr	r3, [pc, #24]	; (8006f98 <HAL_IncTick+0x24>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4413      	add	r3, r2
 8006f84:	4a04      	ldr	r2, [pc, #16]	; (8006f98 <HAL_IncTick+0x24>)
 8006f86:	6013      	str	r3, [r2, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000060 	.word	0x20000060
 8006f98:	200009ec 	.word	0x200009ec

08006f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8006fa0:	4b03      	ldr	r3, [pc, #12]	; (8006fb0 <HAL_GetTick+0x14>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	200009ec 	.word	0x200009ec

08006fb4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_GetTickPrio+0x14>)
 8006fba:	681b      	ldr	r3, [r3, #0]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	2000005c 	.word	0x2000005c

08006fcc <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006fda:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <HAL_SetTickFreq+0x48>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	79fa      	ldrb	r2, [r7, #7]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d012      	beq.n	800700a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <HAL_SetTickFreq+0x48>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <HAL_SetTickFreq+0x48>)
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006ff0:	4b09      	ldr	r3, [pc, #36]	; (8007018 <HAL_SetTickFreq+0x4c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff ff8c 	bl	8006f12 <HAL_InitTick>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8007004:	4a03      	ldr	r2, [pc, #12]	; (8007014 <HAL_SetTickFreq+0x48>)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20000060 	.word	0x20000060
 8007018:	2000005c 	.word	0x2000005c

0800701c <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800701c:	b480      	push	{r7}
 800701e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007020:	4b03      	ldr	r3, [pc, #12]	; (8007030 <HAL_GetTickFreq+0x14>)
 8007022:	781b      	ldrb	r3, [r3, #0]
}
 8007024:	4618      	mov	r0, r3
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000060 	.word	0x20000060

08007034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800703c:	f7ff ffae 	bl	8006f9c <HAL_GetTick>
 8007040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d005      	beq.n	800705a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <HAL_Delay+0x44>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	461a      	mov	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	4413      	add	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800705a:	bf00      	nop
 800705c:	f7ff ff9e 	bl	8006f9c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d8f7      	bhi.n	800705c <HAL_Delay+0x28>
  {
  }
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000060 	.word	0x20000060

0800707c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_SuspendTick+0x1c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a04      	ldr	r2, [pc, #16]	; (8007098 <HAL_SuspendTick+0x1c>)
 8007086:	f023 0302 	bic.w	r3, r3, #2
 800708a:	6013      	str	r3, [r2, #0]
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	e000e010 	.word	0xe000e010

0800709c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80070a0:	4b05      	ldr	r3, [pc, #20]	; (80070b8 <HAL_ResumeTick+0x1c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a04      	ldr	r2, [pc, #16]	; (80070b8 <HAL_ResumeTick+0x1c>)
 80070a6:	f043 0302 	orr.w	r3, r3, #2
 80070aa:	6013      	str	r3, [r2, #0]
}
 80070ac:	bf00      	nop
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	e000e010 	.word	0xe000e010

080070bc <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 80070bc:	b480      	push	{r7}
 80070be:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 80070c0:	4b02      	ldr	r3, [pc, #8]	; (80070cc <HAL_GetHalVersion+0x10>)
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr
 80070cc:	01070d00 	.word	0x01070d00

080070d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80070d0:	b480      	push	{r7}
 80070d2:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <HAL_GetREVID+0x14>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	0c1b      	lsrs	r3, r3, #16
}
 80070da:	4618      	mov	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	e0042000 	.word	0xe0042000

080070e8 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80070ec:	4b04      	ldr	r3, [pc, #16]	; (8007100 <HAL_GetDEVID+0x18>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	e0042000 	.word	0xe0042000

08007104 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6053      	str	r3, [r2, #4]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e0042000 	.word	0xe0042000

08007124 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8007124:	b480      	push	{r7}
 8007126:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	4a04      	ldr	r2, [pc, #16]	; (8007140 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800712e:	f023 0301 	bic.w	r3, r3, #1
 8007132:	6053      	str	r3, [r2, #4]
}
 8007134:	bf00      	nop
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	e0042000 	.word	0xe0042000

08007144 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007148:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a04      	ldr	r2, [pc, #16]	; (8007160 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800714e:	f043 0302 	orr.w	r3, r3, #2
 8007152:	6053      	str	r3, [r2, #4]
}
 8007154:	bf00      	nop
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	e0042000 	.word	0xe0042000

08007164 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007168:	4b05      	ldr	r3, [pc, #20]	; (8007180 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	4a04      	ldr	r2, [pc, #16]	; (8007180 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800716e:	f023 0302 	bic.w	r3, r3, #2
 8007172:	6053      	str	r3, [r2, #4]
}
 8007174:	bf00      	nop
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	e0042000 	.word	0xe0042000

08007184 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8007184:	b480      	push	{r7}
 8007186:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8007188:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	4a04      	ldr	r2, [pc, #16]	; (80071a0 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800718e:	f043 0304 	orr.w	r3, r3, #4
 8007192:	6053      	str	r3, [r2, #4]
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	e0042000 	.word	0xe0042000

080071a4 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80071ae:	f023 0304 	bic.w	r3, r3, #4
 80071b2:	6053      	str	r3, [r2, #4]
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	e0042000 	.word	0xe0042000

080071c4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 80071c8:	4b03      	ldr	r3, [pc, #12]	; (80071d8 <HAL_EnableCompensationCell+0x14>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]
}
 80071ce:	bf00      	nop
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	42270400 	.word	0x42270400

080071dc <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <HAL_DisableCompensationCell+0x14>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	42270400 	.word	0x42270400

080071f4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80071f4:	b480      	push	{r7}
 80071f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80071f8:	4b03      	ldr	r3, [pc, #12]	; (8007208 <HAL_GetUIDw0+0x14>)
 80071fa:	681b      	ldr	r3, [r3, #0]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	1fff7a10 	.word	0x1fff7a10

0800720c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800720c:	b480      	push	{r7}
 800720e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8007210:	4b03      	ldr	r3, [pc, #12]	; (8007220 <HAL_GetUIDw1+0x14>)
 8007212:	681b      	ldr	r3, [r3, #0]
}
 8007214:	4618      	mov	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	1fff7a14 	.word	0x1fff7a14

08007224 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8007224:	b480      	push	{r7}
 8007226:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8007228:	4b03      	ldr	r3, [pc, #12]	; (8007238 <HAL_GetUIDw2+0x14>)
 800722a:	681b      	ldr	r3, [r3, #0]
}
 800722c:	4618      	mov	r0, r3
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	1fff7a18 	.word	0x1fff7a18

0800723c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800724c:	4b0c      	ldr	r3, [pc, #48]	; (8007280 <__NVIC_SetPriorityGrouping+0x44>)
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007258:	4013      	ands	r3, r2
 800725a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800726c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800726e:	4a04      	ldr	r2, [pc, #16]	; (8007280 <__NVIC_SetPriorityGrouping+0x44>)
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	60d3      	str	r3, [r2, #12]
}
 8007274:	bf00      	nop
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr
 8007280:	e000ed00 	.word	0xe000ed00

08007284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007284:	b480      	push	{r7}
 8007286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007288:	4b04      	ldr	r3, [pc, #16]	; (800729c <__NVIC_GetPriorityGrouping+0x18>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	f003 0307 	and.w	r3, r3, #7
}
 8007292:	4618      	mov	r0, r3
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr
 800729c:	e000ed00 	.word	0xe000ed00

080072a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	4603      	mov	r3, r0
 80072a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	db0b      	blt.n	80072ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	f003 021f 	and.w	r2, r3, #31
 80072b8:	4907      	ldr	r1, [pc, #28]	; (80072d8 <__NVIC_EnableIRQ+0x38>)
 80072ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	2001      	movs	r0, #1
 80072c2:	fa00 f202 	lsl.w	r2, r0, r2
 80072c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	e000e100 	.word	0xe000e100

080072dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	db12      	blt.n	8007314 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	f003 021f 	and.w	r2, r3, #31
 80072f4:	490a      	ldr	r1, [pc, #40]	; (8007320 <__NVIC_DisableIRQ+0x44>)
 80072f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	2001      	movs	r0, #1
 80072fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007302:	3320      	adds	r3, #32
 8007304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007308:	f3bf 8f4f 	dsb	sy
}
 800730c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800730e:	f3bf 8f6f 	isb	sy
}
 8007312:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	e000e100 	.word	0xe000e100

08007324 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	4603      	mov	r3, r0
 800732c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800732e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007332:	2b00      	cmp	r3, #0
 8007334:	db0e      	blt.n	8007354 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8007336:	4a0b      	ldr	r2, [pc, #44]	; (8007364 <__NVIC_GetPendingIRQ+0x40>)
 8007338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	3340      	adds	r3, #64	; 0x40
 8007340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	fa22 f303 	lsr.w	r3, r2, r3
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	e000      	b.n	8007356 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8007354:	2300      	movs	r3, #0
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	e000e100 	.word	0xe000e100

08007368 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	4603      	mov	r3, r0
 8007370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007376:	2b00      	cmp	r3, #0
 8007378:	db0c      	blt.n	8007394 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	f003 021f 	and.w	r2, r3, #31
 8007380:	4907      	ldr	r1, [pc, #28]	; (80073a0 <__NVIC_SetPendingIRQ+0x38>)
 8007382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	2001      	movs	r0, #1
 800738a:	fa00 f202 	lsl.w	r2, r0, r2
 800738e:	3340      	adds	r3, #64	; 0x40
 8007390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	e000e100 	.word	0xe000e100

080073a4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4603      	mov	r3, r0
 80073ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	db0c      	blt.n	80073d0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80073b6:	79fb      	ldrb	r3, [r7, #7]
 80073b8:	f003 021f 	and.w	r2, r3, #31
 80073bc:	4907      	ldr	r1, [pc, #28]	; (80073dc <__NVIC_ClearPendingIRQ+0x38>)
 80073be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073c2:	095b      	lsrs	r3, r3, #5
 80073c4:	2001      	movs	r0, #1
 80073c6:	fa00 f202 	lsl.w	r2, r0, r2
 80073ca:	3360      	adds	r3, #96	; 0x60
 80073cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	e000e100 	.word	0xe000e100

080073e0 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80073ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	db0e      	blt.n	8007410 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80073f2:	4a0b      	ldr	r2, [pc, #44]	; (8007420 <__NVIC_GetActive+0x40>)
 80073f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80073f8:	095b      	lsrs	r3, r3, #5
 80073fa:	3380      	adds	r3, #128	; 0x80
 80073fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	fa22 f303 	lsr.w	r3, r2, r3
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	e000      	b.n	8007412 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8007410:	2300      	movs	r3, #0
  }
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	e000e100 	.word	0xe000e100

08007424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	6039      	str	r1, [r7, #0]
 800742e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007434:	2b00      	cmp	r3, #0
 8007436:	db0a      	blt.n	800744e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	b2da      	uxtb	r2, r3
 800743c:	490c      	ldr	r1, [pc, #48]	; (8007470 <__NVIC_SetPriority+0x4c>)
 800743e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007442:	0112      	lsls	r2, r2, #4
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	440b      	add	r3, r1
 8007448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800744c:	e00a      	b.n	8007464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	b2da      	uxtb	r2, r3
 8007452:	4908      	ldr	r1, [pc, #32]	; (8007474 <__NVIC_SetPriority+0x50>)
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	3b04      	subs	r3, #4
 800745c:	0112      	lsls	r2, r2, #4
 800745e:	b2d2      	uxtb	r2, r2
 8007460:	440b      	add	r3, r1
 8007462:	761a      	strb	r2, [r3, #24]
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	e000e100 	.word	0xe000e100
 8007474:	e000ed00 	.word	0xe000ed00

08007478 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8007482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007486:	2b00      	cmp	r3, #0
 8007488:	db09      	blt.n	800749e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 800748a:	4a0d      	ldr	r2, [pc, #52]	; (80074c0 <__NVIC_GetPriority+0x48>)
 800748c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007490:	4413      	add	r3, r2
 8007492:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8007496:	b2db      	uxtb	r3, r3
 8007498:	091b      	lsrs	r3, r3, #4
 800749a:	b2db      	uxtb	r3, r3
 800749c:	e009      	b.n	80074b2 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800749e:	4a09      	ldr	r2, [pc, #36]	; (80074c4 <__NVIC_GetPriority+0x4c>)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	3b04      	subs	r3, #4
 80074a8:	4413      	add	r3, r2
 80074aa:	7e1b      	ldrb	r3, [r3, #24]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	091b      	lsrs	r3, r3, #4
 80074b0:	b2db      	uxtb	r3, r3
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	e000e100 	.word	0xe000e100
 80074c4:	e000ed00 	.word	0xe000ed00

080074c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b089      	sub	sp, #36	; 0x24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f1c3 0307 	rsb	r3, r3, #7
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	bf28      	it	cs
 80074e6:	2304      	movcs	r3, #4
 80074e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3304      	adds	r3, #4
 80074ee:	2b06      	cmp	r3, #6
 80074f0:	d902      	bls.n	80074f8 <NVIC_EncodePriority+0x30>
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	3b03      	subs	r3, #3
 80074f6:	e000      	b.n	80074fa <NVIC_EncodePriority+0x32>
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	43da      	mvns	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	401a      	ands	r2, r3
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007510:	f04f 31ff 	mov.w	r1, #4294967295
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	fa01 f303 	lsl.w	r3, r1, r3
 800751a:	43d9      	mvns	r1, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007520:	4313      	orrs	r3, r2
         );
}
 8007522:	4618      	mov	r0, r3
 8007524:	3724      	adds	r7, #36	; 0x24
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 800752e:	b480      	push	{r7}
 8007530:	b089      	sub	sp, #36	; 0x24
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	60b9      	str	r1, [r7, #8]
 8007538:	607a      	str	r2, [r7, #4]
 800753a:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	f1c3 0307 	rsb	r3, r3, #7
 800754a:	2b04      	cmp	r3, #4
 800754c:	bf28      	it	cs
 800754e:	2304      	movcs	r3, #4
 8007550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	3304      	adds	r3, #4
 8007556:	2b06      	cmp	r3, #6
 8007558:	d902      	bls.n	8007560 <NVIC_DecodePriority+0x32>
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	3b03      	subs	r3, #3
 800755e:	e000      	b.n	8007562 <NVIC_DecodePriority+0x34>
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	40da      	lsrs	r2, r3
 800756a:	f04f 31ff 	mov.w	r1, #4294967295
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	43db      	mvns	r3, r3
 8007576:	401a      	ands	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 800757c:	f04f 32ff 	mov.w	r2, #4294967295
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	401a      	ands	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	3724      	adds	r7, #36	; 0x24
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800759c:	b480      	push	{r7}
 800759e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80075a0:	f3bf 8f4f 	dsb	sy
}
 80075a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80075a6:	4b06      	ldr	r3, [pc, #24]	; (80075c0 <__NVIC_SystemReset+0x24>)
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80075ae:	4904      	ldr	r1, [pc, #16]	; (80075c0 <__NVIC_SystemReset+0x24>)
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <__NVIC_SystemReset+0x28>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80075b6:	f3bf 8f4f 	dsb	sy
}
 80075ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80075bc:	bf00      	nop
 80075be:	e7fd      	b.n	80075bc <__NVIC_SystemReset+0x20>
 80075c0:	e000ed00 	.word	0xe000ed00
 80075c4:	05fa0004 	.word	0x05fa0004

080075c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3b01      	subs	r3, #1
 80075d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075d8:	d301      	bcc.n	80075de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075da:	2301      	movs	r3, #1
 80075dc:	e00f      	b.n	80075fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075de:	4a0a      	ldr	r2, [pc, #40]	; (8007608 <SysTick_Config+0x40>)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075e6:	210f      	movs	r1, #15
 80075e8:	f04f 30ff 	mov.w	r0, #4294967295
 80075ec:	f7ff ff1a 	bl	8007424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075f0:	4b05      	ldr	r3, [pc, #20]	; (8007608 <SysTick_Config+0x40>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075f6:	4b04      	ldr	r3, [pc, #16]	; (8007608 <SysTick_Config+0x40>)
 80075f8:	2207      	movs	r2, #7
 80075fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075fc:	2300      	movs	r3, #0
}
 80075fe:	4618      	mov	r0, r3
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop
 8007608:	e000e010 	.word	0xe000e010

0800760c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fe11 	bl	800723c <__NVIC_SetPriorityGrouping>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	4603      	mov	r3, r0
 800762a:	60b9      	str	r1, [r7, #8]
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007630:	2300      	movs	r3, #0
 8007632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007634:	f7ff fe26 	bl	8007284 <__NVIC_GetPriorityGrouping>
 8007638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68b9      	ldr	r1, [r7, #8]
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f7ff ff42 	bl	80074c8 <NVIC_EncodePriority>
 8007644:	4602      	mov	r2, r0
 8007646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800764a:	4611      	mov	r1, r2
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fee9 	bl	8007424 <__NVIC_SetPriority>
}
 8007652:	bf00      	nop
 8007654:	3718      	adds	r7, #24
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	4603      	mov	r3, r0
 8007662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007668:	4618      	mov	r0, r3
 800766a:	f7ff fe19 	bl	80072a0 <__NVIC_EnableIRQ>
}
 800766e:	bf00      	nop
 8007670:	3708      	adds	r7, #8
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	4603      	mov	r3, r0
 800767e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007684:	4618      	mov	r0, r3
 8007686:	f7ff fe29 	bl	80072dc <__NVIC_DisableIRQ>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007696:	f7ff ff81 	bl	800759c <__NVIC_SystemReset>

0800769a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7ff ff90 	bl	80075c8 <SysTick_Config>
 80076a8:	4603      	mov	r3, r0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80076b2:	b480      	push	{r7}
 80076b4:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80076b6:	f3bf 8f5f 	dmb	sy
}
 80076ba:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <HAL_MPU_Disable+0x26>)
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	4a05      	ldr	r2, [pc, #20]	; (80076d8 <HAL_MPU_Disable+0x26>)
 80076c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c6:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 80076c8:	4b04      	ldr	r3, [pc, #16]	; (80076dc <HAL_MPU_Disable+0x2a>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	605a      	str	r2, [r3, #4]
}
 80076ce:	bf00      	nop
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	e000ed00 	.word	0xe000ed00
 80076dc:	e000ed90 	.word	0xe000ed90

080076e0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80076e8:	4a0b      	ldr	r2, [pc, #44]	; (8007718 <HAL_MPU_Enable+0x38>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80076f2:	4b0a      	ldr	r3, [pc, #40]	; (800771c <HAL_MPU_Enable+0x3c>)
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <HAL_MPU_Enable+0x3c>)
 80076f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076fc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80076fe:	f3bf 8f4f 	dsb	sy
}
 8007702:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007704:	f3bf 8f6f 	isb	sy
}
 8007708:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	e000ed90 	.word	0xe000ed90
 800771c:	e000ed00 	.word	0xe000ed00

08007720 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	785a      	ldrb	r2, [r3, #1]
 800772c:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <HAL_MPU_ConfigRegion+0x84>)
 800772e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d029      	beq.n	800778c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8007738:	4a1a      	ldr	r2, [pc, #104]	; (80077a4 <HAL_MPU_ConfigRegion+0x84>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	7b1b      	ldrb	r3, [r3, #12]
 8007744:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7adb      	ldrb	r3, [r3, #11]
 800774a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800774c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	7a9b      	ldrb	r3, [r3, #10]
 8007752:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007754:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	7b5b      	ldrb	r3, [r3, #13]
 800775a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800775c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	7b9b      	ldrb	r3, [r3, #14]
 8007762:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007764:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7bdb      	ldrb	r3, [r3, #15]
 800776a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800776c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	7a5b      	ldrb	r3, [r3, #9]
 8007772:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8007774:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7a1b      	ldrb	r3, [r3, #8]
 800777a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800777c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007784:	4a07      	ldr	r2, [pc, #28]	; (80077a4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007786:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007788:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 800778a:	e005      	b.n	8007798 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <HAL_MPU_ConfigRegion+0x84>)
 800778e:	2200      	movs	r2, #0
 8007790:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8007792:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <HAL_MPU_ConfigRegion+0x84>)
 8007794:	2200      	movs	r2, #0
 8007796:	611a      	str	r2, [r3, #16]
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr
 80077a4:	e000ed90 	.word	0xe000ed90

080077a8 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 80077ac:	f7ff fd6a 	bl	8007284 <__NVIC_GetPriorityGrouping>
 80077b0:	4603      	mov	r3, r0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	bd80      	pop	{r7, pc}

080077b6 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 80077b6:	b580      	push	{r7, lr}
 80077b8:	b084      	sub	sp, #16
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80077c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff fe54 	bl	8007478 <__NVIC_GetPriority>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	f7ff feaa 	bl	800752e <NVIC_DecodePriority>
}
 80077da:	bf00      	nop
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4603      	mov	r3, r0
 80077ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80077ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7ff fdb9 	bl	8007368 <__NVIC_SetPendingIRQ>
}
 80077f6:	bf00      	nop
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b082      	sub	sp, #8
 8007802:	af00      	add	r7, sp, #0
 8007804:	4603      	mov	r3, r0
 8007806:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8007808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fd89 	bl	8007324 <__NVIC_GetPendingIRQ>
 8007812:	4603      	mov	r3, r0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3708      	adds	r7, #8
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	4603      	mov	r3, r0
 8007824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800782a:	4618      	mov	r0, r3
 800782c:	f7ff fdba 	bl	80073a4 <__NVIC_ClearPendingIRQ>
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8007842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff fdca 	bl	80073e0 <__NVIC_GetActive>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b04      	cmp	r3, #4
 8007862:	d106      	bne.n	8007872 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a08      	ldr	r2, [pc, #32]	; (800788c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007870:	e005      	b.n	800787e <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007872:	4b06      	ldr	r3, [pc, #24]	; (800788c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a05      	ldr	r2, [pc, #20]	; (800788c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8007878:	f023 0304 	bic.w	r3, r3, #4
 800787c:	6013      	str	r3, [r2, #0]
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000e010 	.word	0xe000e010

08007890 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8007894:	f000 f802 	bl	800789c <HAL_SYSTICK_Callback>
}
 8007898:	bf00      	nop
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80078a0:	bf00      	nop
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e014      	b.n	80078e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	791b      	ldrb	r3, [r3, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fd fe21 	bl	8005514 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e00f      	b.n	8007920 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fd fe48 	bl	800559c <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	795b      	ldrb	r3, [r3, #5]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d101      	bne.n	800793e <HAL_DAC_Start+0x16>
 800793a:	2302      	movs	r3, #2
 800793c:	e040      	b.n	80079c0 <HAL_DAC_Start+0x98>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2202      	movs	r2, #2
 8007948:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6819      	ldr	r1, [r3, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2201      	movs	r2, #1
 8007958:	409a      	lsls	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10f      	bne.n	8007988 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007972:	2b3c      	cmp	r3, #60	; 0x3c
 8007974:	d11d      	bne.n	80079b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0201 	orr.w	r2, r2, #1
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e014      	b.n	80079b2 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	213c      	movs	r1, #60	; 0x3c
 800799a:	fa01 f303 	lsl.w	r3, r1, r3
 800799e:	429a      	cmp	r2, r3
 80079a0:	d107      	bne.n	80079b2 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685a      	ldr	r2, [r3, #4]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0202 	orr.w	r2, r2, #2
 80079b0:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6819      	ldr	r1, [r3, #0]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	f003 0310 	and.w	r3, r3, #16
 80079e2:	2201      	movs	r2, #1
 80079e4:	fa02 f303 	lsl.w	r3, r2, r3
 80079e8:	43da      	mvns	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	400a      	ands	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2201      	movs	r2, #1
 80079f6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	795b      	ldrb	r3, [r3, #5]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_DAC_Start_DMA+0x22>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e0ab      	b.n	8007b80 <HAL_DAC_Start_DMA+0x17a>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2202      	movs	r2, #2
 8007a32:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d12f      	bne.n	8007a9a <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	4a52      	ldr	r2, [pc, #328]	; (8007b88 <HAL_DAC_Start_DMA+0x182>)
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	4a51      	ldr	r2, [pc, #324]	; (8007b8c <HAL_DAC_Start_DMA+0x186>)
 8007a48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4a50      	ldr	r2, [pc, #320]	; (8007b90 <HAL_DAC_Start_DMA+0x18a>)
 8007a50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a60:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d013      	beq.n	8007a90 <HAL_DAC_Start_DMA+0x8a>
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d845      	bhi.n	8007afa <HAL_DAC_Start_DMA+0xf4>
 8007a6e:	6a3b      	ldr	r3, [r7, #32]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_DAC_Start_DMA+0x76>
 8007a74:	6a3b      	ldr	r3, [r7, #32]
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d005      	beq.n	8007a86 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007a7a:	e03e      	b.n	8007afa <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3308      	adds	r3, #8
 8007a82:	613b      	str	r3, [r7, #16]
        break;
 8007a84:	e03c      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	330c      	adds	r3, #12
 8007a8c:	613b      	str	r3, [r7, #16]
        break;
 8007a8e:	e037      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3310      	adds	r3, #16
 8007a96:	613b      	str	r3, [r7, #16]
        break;
 8007a98:	e032      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	4a3d      	ldr	r2, [pc, #244]	; (8007b94 <HAL_DAC_Start_DMA+0x18e>)
 8007aa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	4a3c      	ldr	r2, [pc, #240]	; (8007b98 <HAL_DAC_Start_DMA+0x192>)
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4a3b      	ldr	r2, [pc, #236]	; (8007b9c <HAL_DAC_Start_DMA+0x196>)
 8007ab0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007ac0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d013      	beq.n	8007af0 <HAL_DAC_Start_DMA+0xea>
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	d817      	bhi.n	8007afe <HAL_DAC_Start_DMA+0xf8>
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_DAC_Start_DMA+0xd6>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	2b04      	cmp	r3, #4
 8007ad8:	d005      	beq.n	8007ae6 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007ada:	e010      	b.n	8007afe <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	613b      	str	r3, [r7, #16]
        break;
 8007ae4:	e00c      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3318      	adds	r3, #24
 8007aec:	613b      	str	r3, [r7, #16]
        break;
 8007aee:	e007      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	331c      	adds	r3, #28
 8007af6:	613b      	str	r3, [r7, #16]
        break;
 8007af8:	e002      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007afa:	bf00      	nop
 8007afc:	e000      	b.n	8007b00 <HAL_DAC_Start_DMA+0xfa>
        break;
 8007afe:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d111      	bne.n	8007b2a <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b14:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6898      	ldr	r0, [r3, #8]
 8007b1a:	6879      	ldr	r1, [r7, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	f000 fca5 	bl	800846e <HAL_DMA_Start_IT>
 8007b24:	4603      	mov	r3, r0
 8007b26:	75fb      	strb	r3, [r7, #23]
 8007b28:	e010      	b.n	8007b4c <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007b38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	68d8      	ldr	r0, [r3, #12]
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	f000 fc93 	bl	800846e <HAL_DMA_Start_IT>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10c      	bne.n	8007b72 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2201      	movs	r2, #1
 8007b66:	409a      	lsls	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	e005      	b.n	8007b7e <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	08007e83 	.word	0x08007e83
 8007b8c:	08007ea5 	.word	0x08007ea5
 8007b90:	08007ec1 	.word	0x08007ec1
 8007b94:	08008175 	.word	0x08008175
 8007b98:	08008197 	.word	0x08008197
 8007b9c:	080081b3 	.word	0x080081b3

08007ba0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	6819      	ldr	r1, [r3, #0]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43da      	mvns	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	400a      	ands	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6819      	ldr	r1, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43da      	mvns	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	400a      	ands	r2, r1
 8007be2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10d      	bne.n	8007c06 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fc95 	bl	800851e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c02:	601a      	str	r2, [r3, #0]
 8007c04:	e00c      	b.n	8007c20 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fc87 	bl	800851e <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007c1e:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3708      	adds	r7, #8
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c46:	d120      	bne.n	8007c8a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c56:	d118      	bne.n	8007c8a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f043 0201 	orr.w	r2, r3, #1
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007c82:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f870 	bl	8007d6a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c98:	d120      	bne.n	8007cdc <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d118      	bne.n	8007cdc <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2204      	movs	r2, #4
 8007cae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	f043 0202 	orr.w	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007cc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007cd4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa28 	bl	800812c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8007cdc:	bf00      	nop
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
 8007cf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	3308      	adds	r3, #8
 8007d0a:	617b      	str	r3, [r7, #20]
 8007d0c:	e004      	b.n	8007d18 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007d0e:	697a      	ldr	r2, [r7, #20]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4413      	add	r3, r2
 8007d14:	3314      	adds	r3, #20
 8007d16:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	371c      	adds	r7, #28
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b083      	sub	sp, #12
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007d36:	bf00      	nop
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d42:	b480      	push	{r7}
 8007d44:	b083      	sub	sp, #12
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007d4a:	bf00      	nop
 8007d4c:	370c      	adds	r7, #12
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b083      	sub	sp, #12
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007d6a:	b480      	push	{r7}
 8007d6c:	b083      	sub	sp, #12
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007d72:	bf00      	nop
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d104      	bne.n	8007d9c <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e003      	b.n	8007da4 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da2:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007da4:	68fb      	ldr	r3, [r7, #12]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b087      	sub	sp, #28
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	795b      	ldrb	r3, [r3, #5]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d101      	bne.n	8007dca <HAL_DAC_ConfigChannel+0x18>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e03c      	b.n	8007e44 <HAL_DAC_ConfigChannel+0x92>
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2201      	movs	r2, #1
 8007dce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2202      	movs	r2, #2
 8007dd4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f003 0310 	and.w	r3, r3, #16
 8007de4:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	43db      	mvns	r3, r3
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4013      	ands	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6819      	ldr	r1, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	22c0      	movs	r2, #192	; 0xc0
 8007e28:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2c:	43da      	mvns	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	400a      	ands	r2, r1
 8007e34:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	371c      	adds	r7, #28
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	b2db      	uxtb	r3, r3
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr

08007e6a <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff ff4c 	bl	8007d2e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	711a      	strb	r2, [r3, #4]
}
 8007e9c:	bf00      	nop
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff ff45 	bl	8007d42 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007eb8:	bf00      	nop
 8007eba:	3710      	adds	r7, #16
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f043 0204 	orr.w	r2, r3, #4
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff ff3b 	bl	8007d56 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	711a      	strb	r2, [r3, #4]
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	795b      	ldrb	r3, [r3, #5]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_DACEx_DualStart+0x18>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e03b      	b.n	8007f7e <HAL_DACEx_DualStart+0x90>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f042 0201 	orr.w	r2, r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f30:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007f3c:	2b3c      	cmp	r3, #60	; 0x3c
 8007f3e:	d103      	bne.n	8007f48 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007f52:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8007f56:	d103      	bne.n	8007f60 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f043 0302 	orr.w	r3, r3, #2
 8007f5e:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	6859      	ldr	r1, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2200      	movs	r2, #0
 8007f7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b083      	sub	sp, #12
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0201 	bic.w	r2, r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fb0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b085      	sub	sp, #20
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	795b      	ldrb	r3, [r3, #5]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d101      	bne.n	8007fde <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007fda:	2302      	movs	r3, #2
 8007fdc:	e024      	b.n	8008028 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2202      	movs	r2, #2
 8007fe8:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	ea02 0103 	and.w	r1, r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f003 0310 	and.w	r3, r3, #16
 8008010:	409a      	lsls	r2, r3
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2201      	movs	r2, #1
 800801e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	795b      	ldrb	r3, [r3, #5]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d101      	bne.n	800804c <HAL_DACEx_NoiseWaveGenerate+0x18>
 8008048:	2302      	movs	r3, #2
 800804a:	e024      	b.n	8008096 <HAL_DACEx_NoiseWaveGenerate+0x62>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2202      	movs	r2, #2
 8008056:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f003 0310 	and.w	r3, r3, #16
 8008064:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8008068:	fa01 f303 	lsl.w	r3, r1, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	ea02 0103 	and.w	r1, r2, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f003 0310 	and.w	r3, r3, #16
 800807e:	409a      	lsls	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2201      	movs	r2, #1
 800808c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b087      	sub	sp, #28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b08      	cmp	r3, #8
 80080b4:	d105      	bne.n	80080c2 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e004      	b.n	80080cc <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	041b      	lsls	r3, r3, #16
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	4413      	add	r3, r2
 80080d8:	3320      	adds	r3, #32
 80080da:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	371c      	adds	r7, #28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 8008148:	2300      	movs	r3, #0
 800814a:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	4313      	orrs	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	041b      	lsls	r3, r3, #16
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	4313      	orrs	r3, r2
 8008164:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 8008166:	68fb      	ldr	r3, [r7, #12]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008180:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff ffb4 	bl	80080f0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2201      	movs	r2, #1
 800818c:	711a      	strb	r2, [r3, #4]
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f7ff ffad 	bl	8008104 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80081aa:	bf00      	nop
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b084      	sub	sp, #16
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f043 0204 	orr.w	r2, r3, #4
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f7ff ffa3 	bl	8008118 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	711a      	strb	r2, [r3, #4]
}
 80081d8:	bf00      	nop
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80081ec:	f7fe fed6 	bl	8006f9c <HAL_GetTick>
 80081f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	e099      	b.n	8008330 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800821c:	e00f      	b.n	800823e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800821e:	f7fe febd 	bl	8006f9c <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b05      	cmp	r3, #5
 800822a:	d908      	bls.n	800823e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2203      	movs	r2, #3
 8008236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e078      	b.n	8008330 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b00      	cmp	r3, #0
 800824a:	d1e8      	bne.n	800821e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	4b38      	ldr	r3, [pc, #224]	; (8008338 <HAL_DMA_Init+0x158>)
 8008258:	4013      	ands	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800826a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	4313      	orrs	r3, r2
 800828e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008294:	2b04      	cmp	r3, #4
 8008296:	d107      	bne.n	80082a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	4313      	orrs	r3, r2
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	f023 0307 	bic.w	r3, r3, #7
 80082be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c4:	697a      	ldr	r2, [r7, #20]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	d117      	bne.n	8008302 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00e      	beq.n	8008302 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fd4d 	bl	8008d84 <DMA_CheckFifoParam>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2240      	movs	r2, #64	; 0x40
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80082fe:	2301      	movs	r3, #1
 8008300:	e016      	b.n	8008330 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 fd05 	bl	8008d1a <DMA_CalcBaseAndBitshift>
 8008310:	4603      	mov	r3, r0
 8008312:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008318:	223f      	movs	r2, #63	; 0x3f
 800831a:	409a      	lsls	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3718      	adds	r7, #24
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	f010803f 	.word	0xf010803f

0800833c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e050      	b.n	80083f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b02      	cmp	r3, #2
 8008358:	d101      	bne.n	800835e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
 800835c:	e048      	b.n	80083f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2200      	movs	r2, #0
 8008394:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2221      	movs	r2, #33	; 0x21
 800839c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fcbb 	bl	8008d1a <DMA_CalcBaseAndBitshift>
 80083a4:	4603      	mov	r3, r0
 80083a6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	223f      	movs	r2, #63	; 0x3f
 80083d2:	409a      	lsls	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008406:	2300      	movs	r3, #0
 8008408:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_DMA_Start+0x20>
 8008414:	2302      	movs	r3, #2
 8008416:	e026      	b.n	8008466 <HAL_DMA_Start+0x6e>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	d115      	bne.n	8008458 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2202      	movs	r2, #2
 8008430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	68b9      	ldr	r1, [r7, #8]
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f000 fc3c 	bl	8008cbe <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f042 0201 	orr.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e005      	b.n	8008464 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008460:	2302      	movs	r3, #2
 8008462:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8008464:	7dfb      	ldrb	r3, [r7, #23]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	60b9      	str	r1, [r7, #8]
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008484:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_DMA_Start_IT+0x26>
 8008490:	2302      	movs	r3, #2
 8008492:	e040      	b.n	8008516 <HAL_DMA_Start_IT+0xa8>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d12f      	bne.n	8008508 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	68b9      	ldr	r1, [r7, #8]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	f000 fbfe 	bl	8008cbe <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c6:	223f      	movs	r2, #63	; 0x3f
 80084c8:	409a      	lsls	r2, r3
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f042 0216 	orr.w	r2, r2, #22
 80084dc:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f042 0208 	orr.w	r2, r2, #8
 80084f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	e005      	b.n	8008514 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008510:	2302      	movs	r3, #2
 8008512:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008514:	7dfb      	ldrb	r3, [r7, #23]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800852c:	f7fe fd36 	bl	8006f9c <HAL_GetTick>
 8008530:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b02      	cmp	r3, #2
 800853c:	d008      	beq.n	8008550 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2280      	movs	r2, #128	; 0x80
 8008542:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e052      	b.n	80085f6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	681a      	ldr	r2, [r3, #0]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f022 0216 	bic.w	r2, r2, #22
 800855e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	695a      	ldr	r2, [r3, #20]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800856e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	2b00      	cmp	r3, #0
 8008576:	d103      	bne.n	8008580 <HAL_DMA_Abort+0x62>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857c:	2b00      	cmp	r3, #0
 800857e:	d007      	beq.n	8008590 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0208 	bic.w	r2, r2, #8
 800858e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0201 	bic.w	r2, r2, #1
 800859e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085a0:	e013      	b.n	80085ca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085a2:	f7fe fcfb 	bl	8006f9c <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b05      	cmp	r3, #5
 80085ae:	d90c      	bls.n	80085ca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2203      	movs	r2, #3
 80085ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	e015      	b.n	80085f6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0301 	and.w	r3, r3, #1
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e4      	bne.n	80085a2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085dc:	223f      	movs	r2, #63	; 0x3f
 80085de:	409a      	lsls	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d004      	beq.n	800861c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2280      	movs	r2, #128	; 0x80
 8008616:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e00c      	b.n	8008636 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2205      	movs	r2, #5
 8008620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f022 0201 	bic.w	r2, r2, #1
 8008632:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b08a      	sub	sp, #40	; 0x28
 8008646:	af00      	add	r7, sp, #0
 8008648:	60f8      	str	r0, [r7, #12]
 800864a:	460b      	mov	r3, r1
 800864c:	607a      	str	r2, [r7, #4]
 800864e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8008650:	2300      	movs	r3, #0
 8008652:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8008654:	f7fe fca2 	bl	8006f9c <HAL_GetTick>
 8008658:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008660:	b2db      	uxtb	r3, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d008      	beq.n	8008678 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2280      	movs	r2, #128	; 0x80
 800866a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e0bf      	b.n	80087f8 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800868c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e0b2      	b.n	80087f8 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8008692:	7afb      	ldrb	r3, [r7, #11]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d106      	bne.n	80086a6 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800869c:	2220      	movs	r2, #32
 800869e:	fa02 f303 	lsl.w	r3, r2, r3
 80086a2:	627b      	str	r3, [r7, #36]	; 0x24
 80086a4:	e005      	b.n	80086b2 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086aa:	2210      	movs	r2, #16
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b6:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80086be:	e05a      	b.n	8008776 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d017      	beq.n	80086f8 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <HAL_DMA_PollForTransfer+0x9c>
 80086ce:	f7fe fc65 	bl	8006f9c <HAL_GetTick>
 80086d2:	4602      	mov	r2, r0
 80086d4:	69bb      	ldr	r3, [r7, #24]
 80086d6:	1ad3      	subs	r3, r2, r3
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d20c      	bcs.n	80086f8 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e07f      	b.n	80087f8 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008702:	2208      	movs	r2, #8
 8008704:	409a      	lsls	r2, r3
 8008706:	6a3b      	ldr	r3, [r7, #32]
 8008708:	4013      	ands	r3, r2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00b      	beq.n	8008726 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008712:	f043 0201 	orr.w	r2, r3, #1
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871e:	2208      	movs	r2, #8
 8008720:	409a      	lsls	r2, r3
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872a:	2201      	movs	r2, #1
 800872c:	409a      	lsls	r2, r3
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	4013      	ands	r3, r2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f043 0202 	orr.w	r2, r3, #2
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008746:	2201      	movs	r2, #1
 8008748:	409a      	lsls	r2, r3
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008752:	2204      	movs	r2, #4
 8008754:	409a      	lsls	r2, r3
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00b      	beq.n	8008776 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	f043 0204 	orr.w	r2, r3, #4
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800876e:	2204      	movs	r2, #4
 8008770:	409a      	lsls	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8008776:	6a3a      	ldr	r2, [r7, #32]
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	4013      	ands	r3, r2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d105      	bne.n	800878c <HAL_DMA_PollForTransfer+0x14a>
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d099      	beq.n	80086c0 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008790:	2b00      	cmp	r3, #0
 8008792:	d018      	beq.n	80087c6 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d012      	beq.n	80087c6 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f7ff febc 	bl	800851e <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087aa:	2230      	movs	r2, #48	; 0x30
 80087ac:	409a      	lsls	r2, r3
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e018      	b.n	80087f8 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10e      	bne.n	80087ea <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d0:	2230      	movs	r2, #48	; 0x30
 80087d2:	409a      	lsls	r2, r3
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80087e8:	e005      	b.n	80087f6 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ee:	2210      	movs	r2, #16
 80087f0:	409a      	lsls	r2, r3
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 80087f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3728      	adds	r7, #40	; 0x28
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800880c:	4b8e      	ldr	r3, [pc, #568]	; (8008a48 <HAL_DMA_IRQHandler+0x248>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a8e      	ldr	r2, [pc, #568]	; (8008a4c <HAL_DMA_IRQHandler+0x24c>)
 8008812:	fba2 2303 	umull	r2, r3, r2, r3
 8008816:	0a9b      	lsrs	r3, r3, #10
 8008818:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800881e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882a:	2208      	movs	r2, #8
 800882c:	409a      	lsls	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	4013      	ands	r3, r2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d01a      	beq.n	800886c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0304 	and.w	r3, r3, #4
 8008840:	2b00      	cmp	r3, #0
 8008842:	d013      	beq.n	800886c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0204 	bic.w	r2, r2, #4
 8008852:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008858:	2208      	movs	r2, #8
 800885a:	409a      	lsls	r2, r3
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008864:	f043 0201 	orr.w	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008870:	2201      	movs	r2, #1
 8008872:	409a      	lsls	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4013      	ands	r3, r2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d012      	beq.n	80088a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00b      	beq.n	80088a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800888e:	2201      	movs	r2, #1
 8008890:	409a      	lsls	r2, r3
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889a:	f043 0202 	orr.w	r2, r3, #2
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a6:	2204      	movs	r2, #4
 80088a8:	409a      	lsls	r2, r3
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	4013      	ands	r3, r2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d012      	beq.n	80088d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0302 	and.w	r3, r3, #2
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d00b      	beq.n	80088d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c4:	2204      	movs	r2, #4
 80088c6:	409a      	lsls	r2, r3
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d0:	f043 0204 	orr.w	r2, r3, #4
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088dc:	2210      	movs	r2, #16
 80088de:	409a      	lsls	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	4013      	ands	r3, r2
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d043      	beq.n	8008970 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0308 	and.w	r3, r3, #8
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d03c      	beq.n	8008970 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088fa:	2210      	movs	r2, #16
 80088fc:	409a      	lsls	r2, r3
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800890c:	2b00      	cmp	r3, #0
 800890e:	d018      	beq.n	8008942 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d108      	bne.n	8008930 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d024      	beq.n	8008970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	4798      	blx	r3
 800892e:	e01f      	b.n	8008970 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01b      	beq.n	8008970 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
 8008940:	e016      	b.n	8008970 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800894c:	2b00      	cmp	r3, #0
 800894e:	d107      	bne.n	8008960 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0208 	bic.w	r2, r2, #8
 800895e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008964:	2b00      	cmp	r3, #0
 8008966:	d003      	beq.n	8008970 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008974:	2220      	movs	r2, #32
 8008976:	409a      	lsls	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4013      	ands	r3, r2
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 808f 	beq.w	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 8087 	beq.w	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008996:	2220      	movs	r2, #32
 8008998:	409a      	lsls	r2, r3
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089a4:	b2db      	uxtb	r3, r3
 80089a6:	2b05      	cmp	r3, #5
 80089a8:	d136      	bne.n	8008a18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0216 	bic.w	r2, r2, #22
 80089b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	695a      	ldr	r2, [r3, #20]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d103      	bne.n	80089da <HAL_DMA_IRQHandler+0x1da>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d007      	beq.n	80089ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0208 	bic.w	r2, r2, #8
 80089e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ee:	223f      	movs	r2, #63	; 0x3f
 80089f0:	409a      	lsls	r2, r3
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d07e      	beq.n	8008b0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
        }
        return;
 8008a16:	e079      	b.n	8008b0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d01d      	beq.n	8008a62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10d      	bne.n	8008a50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d031      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
 8008a44:	e02c      	b.n	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
 8008a46:	bf00      	nop
 8008a48:	20000058 	.word	0x20000058
 8008a4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d023      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	4798      	blx	r3
 8008a60:	e01e      	b.n	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10f      	bne.n	8008a90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f022 0210 	bic.w	r2, r2, #16
 8008a7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d032      	beq.n	8008b0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aac:	f003 0301 	and.w	r3, r3, #1
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d022      	beq.n	8008afa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2205      	movs	r2, #5
 8008ab8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	60bb      	str	r3, [r7, #8]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d307      	bcc.n	8008ae8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1f2      	bne.n	8008acc <HAL_DMA_IRQHandler+0x2cc>
 8008ae6:	e000      	b.n	8008aea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008ae8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d005      	beq.n	8008b0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
 8008b0a:	e000      	b.n	8008b0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8008b0c:	bf00      	nop
    }
  }
}
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8008b14:	b480      	push	{r7}
 8008b16:	b087      	sub	sp, #28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8008b22:	2300      	movs	r3, #0
 8008b24:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d101      	bne.n	8008b34 <HAL_DMA_RegisterCallback+0x20>
 8008b30:	2302      	movs	r3, #2
 8008b32:	e03c      	b.n	8008bae <HAL_DMA_RegisterCallback+0x9a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d129      	bne.n	8008b9c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8008b48:	7afb      	ldrb	r3, [r7, #11]
 8008b4a:	2b05      	cmp	r3, #5
 8008b4c:	d829      	bhi.n	8008ba2 <HAL_DMA_RegisterCallback+0x8e>
 8008b4e:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <HAL_DMA_RegisterCallback+0x40>)
 8008b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b54:	08008b6d 	.word	0x08008b6d
 8008b58:	08008b75 	.word	0x08008b75
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008b85 	.word	0x08008b85
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b95 	.word	0x08008b95
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008b72:	e017      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008b7a:	e013      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008b82:	e00f      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008b8a:	e00b      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008b92:	e007      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b9a:	e003      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	75fb      	strb	r3, [r7, #23]
 8008ba0:	e000      	b.n	8008ba4 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008ba2:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	371c      	adds	r7, #28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_DMA_UnRegisterCallback+0x1e>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e052      	b.n	8008c7e <HAL_DMA_UnRegisterCallback+0xc4>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d141      	bne.n	8008c70 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	2b06      	cmp	r3, #6
 8008bf0:	d83b      	bhi.n	8008c6a <HAL_DMA_UnRegisterCallback+0xb0>
 8008bf2:	a201      	add	r2, pc, #4	; (adr r2, 8008bf8 <HAL_DMA_UnRegisterCallback+0x3e>)
 8008bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf8:	08008c15 	.word	0x08008c15
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	08008c3d 	.word	0x08008c3d
 8008c10:	08008c45 	.word	0x08008c45
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008c1a:	e02b      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008c22:	e027      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008c2a:	e023      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8008c32:	e01f      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008c3a:	e01b      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008c42:	e017      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8008c68:	e004      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6e:	e001      	b.n	8008c74 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8008c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7e:	4618      	mov	r0, r3
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b083      	sub	sp, #12
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c98:	b2db      	uxtb	r3, r3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	370c      	adds	r7, #12
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b085      	sub	sp, #20
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
 8008cca:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008cda:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b40      	cmp	r3, #64	; 0x40
 8008cea:	d108      	bne.n	8008cfe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008cfc:	e007      	b.n	8008d0e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]
}
 8008d0e:	bf00      	nop
 8008d10:	3714      	adds	r7, #20
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b085      	sub	sp, #20
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	3b10      	subs	r3, #16
 8008d2a:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <DMA_CalcBaseAndBitshift+0x62>)
 8008d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d30:	091b      	lsrs	r3, r3, #4
 8008d32:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d34:	4a12      	ldr	r2, [pc, #72]	; (8008d80 <DMA_CalcBaseAndBitshift+0x66>)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4413      	add	r3, r2
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2b03      	cmp	r3, #3
 8008d46:	d909      	bls.n	8008d5c <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d50:	f023 0303 	bic.w	r3, r3, #3
 8008d54:	1d1a      	adds	r2, r3, #4
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	659a      	str	r2, [r3, #88]	; 0x58
 8008d5a:	e007      	b.n	8008d6c <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d64:	f023 0303 	bic.w	r3, r3, #3
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	aaaaaaab 	.word	0xaaaaaaab
 8008d80:	08052694 	.word	0x08052694

08008d84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d11f      	bne.n	8008dde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2b03      	cmp	r3, #3
 8008da2:	d856      	bhi.n	8008e52 <DMA_CheckFifoParam+0xce>
 8008da4:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <DMA_CheckFifoParam+0x28>)
 8008da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008daa:	bf00      	nop
 8008dac:	08008dbd 	.word	0x08008dbd
 8008db0:	08008dcf 	.word	0x08008dcf
 8008db4:	08008dbd 	.word	0x08008dbd
 8008db8:	08008e53 	.word	0x08008e53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d046      	beq.n	8008e56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008dcc:	e043      	b.n	8008e56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008dd6:	d140      	bne.n	8008e5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ddc:	e03d      	b.n	8008e5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008de6:	d121      	bne.n	8008e2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d837      	bhi.n	8008e5e <DMA_CheckFifoParam+0xda>
 8008dee:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <DMA_CheckFifoParam+0x70>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e05 	.word	0x08008e05
 8008df8:	08008e0b 	.word	0x08008e0b
 8008dfc:	08008e05 	.word	0x08008e05
 8008e00:	08008e1d 	.word	0x08008e1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	73fb      	strb	r3, [r7, #15]
      break;
 8008e08:	e030      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d025      	beq.n	8008e62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e1a:	e022      	b.n	8008e62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e24:	d11f      	bne.n	8008e66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e2a:	e01c      	b.n	8008e66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d903      	bls.n	8008e3a <DMA_CheckFifoParam+0xb6>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d003      	beq.n	8008e40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e38:	e018      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e3e:	e015      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00e      	beq.n	8008e6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e50:	e00b      	b.n	8008e6a <DMA_CheckFifoParam+0xe6>
      break;
 8008e52:	bf00      	nop
 8008e54:	e00a      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;
 8008e56:	bf00      	nop
 8008e58:	e008      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;
 8008e5a:	bf00      	nop
 8008e5c:	e006      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;
 8008e5e:	bf00      	nop
 8008e60:	e004      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;
 8008e62:	bf00      	nop
 8008e64:	e002      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;   
 8008e66:	bf00      	nop
 8008e68:	e000      	b.n	8008e6c <DMA_CheckFifoParam+0xe8>
      break;
 8008e6a:	bf00      	nop
    }
  } 
  
  return status; 
 8008e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3714      	adds	r7, #20
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b086      	sub	sp, #24
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b80      	cmp	r3, #128	; 0x80
 8008e92:	d106      	bne.n	8008ea2 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e9a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	75fb      	strb	r3, [r7, #23]
 8008ea0:	e031      	b.n	8008f06 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_DMAEx_MultiBufferStart+0x36>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e02b      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d11e      	bne.n	8008f02 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008eda:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	683a      	ldr	r2, [r7, #0]
 8008ee2:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	68b9      	ldr	r1, [r7, #8]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f001 f972 	bl	800a1d4 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f042 0201 	orr.w	r2, r2, #1
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e001      	b.n	8008f06 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 8008f02:	2302      	movs	r3, #2
 8008f04:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	2b80      	cmp	r3, #128	; 0x80
 8008f28:	d106      	bne.n	8008f38 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	f001 b911 	b.w	800a15a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d007      	beq.n	8008f50 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d003      	beq.n	8008f50 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d105      	bne.n	8008f5c <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2240      	movs	r2, #64	; 0x40
 8008f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f001 b8ff 	b.w	800a15a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d102      	bne.n	8008f6c <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8008f66:	2302      	movs	r3, #2
 8008f68:	f001 b8f7 	b.w	800a15a <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	f041 80e5 	bne.w	800a14c <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2202      	movs	r2, #2
 8008f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008f9e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	683a      	ldr	r2, [r7, #0]
 8008fa6:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008fa8:	6a3b      	ldr	r3, [r7, #32]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	68b9      	ldr	r1, [r7, #8]
 8008fae:	68f8      	ldr	r0, [r7, #12]
 8008fb0:	f001 f910 	bl	800a1d4 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	4b8d      	ldr	r3, [pc, #564]	; (80091f0 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d960      	bls.n	8009082 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a8b      	ldr	r2, [pc, #556]	; (80091f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d057      	beq.n	800907a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a8a      	ldr	r2, [pc, #552]	; (80091f8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d050      	beq.n	8009076 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a88      	ldr	r2, [pc, #544]	; (80091fc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d049      	beq.n	8009072 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a87      	ldr	r2, [pc, #540]	; (8009200 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d042      	beq.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a85      	ldr	r2, [pc, #532]	; (8009204 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d03a      	beq.n	8009068 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a84      	ldr	r2, [pc, #528]	; (8009208 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d032      	beq.n	8009062 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a82      	ldr	r2, [pc, #520]	; (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d02a      	beq.n	800905c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a81      	ldr	r2, [pc, #516]	; (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d022      	beq.n	8009056 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a7f      	ldr	r2, [pc, #508]	; (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01a      	beq.n	8009050 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a7e      	ldr	r2, [pc, #504]	; (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d012      	beq.n	800904a <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a7c      	ldr	r2, [pc, #496]	; (800921c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d00a      	beq.n	8009044 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a7b      	ldr	r2, [pc, #492]	; (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d102      	bne.n	800903e <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8009038:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800903c:	e01e      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800903e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009042:	e01b      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009044:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009048:	e018      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800904a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800904e:	e015      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009054:	e012      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800905a:	e00f      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800905c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009060:	e00c      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009066:	e009      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800906c:	e006      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800906e:	2320      	movs	r3, #32
 8009070:	e004      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009072:	2320      	movs	r3, #32
 8009074:	e002      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8009076:	2320      	movs	r3, #32
 8009078:	e000      	b.n	800907c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800907a:	2320      	movs	r3, #32
 800907c:	4a69      	ldr	r2, [pc, #420]	; (8009224 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800907e:	60d3      	str	r3, [r2, #12]
 8009080:	e14f      	b.n	8009322 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	4b67      	ldr	r3, [pc, #412]	; (8009228 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800908a:	429a      	cmp	r2, r3
 800908c:	d960      	bls.n	8009150 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a58      	ldr	r2, [pc, #352]	; (80091f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d057      	beq.n	8009148 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a56      	ldr	r2, [pc, #344]	; (80091f8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d050      	beq.n	8009144 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a55      	ldr	r2, [pc, #340]	; (80091fc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d049      	beq.n	8009140 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a53      	ldr	r2, [pc, #332]	; (8009200 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d042      	beq.n	800913c <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a52      	ldr	r2, [pc, #328]	; (8009204 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d03a      	beq.n	8009136 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a50      	ldr	r2, [pc, #320]	; (8009208 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d032      	beq.n	8009130 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a4f      	ldr	r2, [pc, #316]	; (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d02a      	beq.n	800912a <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a4d      	ldr	r2, [pc, #308]	; (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d022      	beq.n	8009124 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a4c      	ldr	r2, [pc, #304]	; (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d01a      	beq.n	800911e <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a4a      	ldr	r2, [pc, #296]	; (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d012      	beq.n	8009118 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a49      	ldr	r2, [pc, #292]	; (800921c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d00a      	beq.n	8009112 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a47      	ldr	r2, [pc, #284]	; (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d102      	bne.n	800910c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8009106:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800910a:	e01e      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800910c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009110:	e01b      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009112:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009116:	e018      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009118:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800911c:	e015      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800911e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009122:	e012      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009124:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009128:	e00f      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800912a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800912e:	e00c      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009130:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009134:	e009      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800913a:	e006      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800913c:	2320      	movs	r3, #32
 800913e:	e004      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009140:	2320      	movs	r3, #32
 8009142:	e002      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009144:	2320      	movs	r3, #32
 8009146:	e000      	b.n	800914a <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8009148:	2320      	movs	r3, #32
 800914a:	4a36      	ldr	r2, [pc, #216]	; (8009224 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800914c:	6093      	str	r3, [r2, #8]
 800914e:	e0e8      	b.n	8009322 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	461a      	mov	r2, r3
 8009156:	4b35      	ldr	r3, [pc, #212]	; (800922c <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8009158:	429a      	cmp	r2, r3
 800915a:	f240 8082 	bls.w	8009262 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a24      	ldr	r2, [pc, #144]	; (80091f4 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d078      	beq.n	800925a <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a22      	ldr	r2, [pc, #136]	; (80091f8 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d071      	beq.n	8009256 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a21      	ldr	r2, [pc, #132]	; (80091fc <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d06a      	beq.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a1f      	ldr	r2, [pc, #124]	; (8009200 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d063      	beq.n	800924e <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d05b      	beq.n	8009248 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a1c      	ldr	r2, [pc, #112]	; (8009208 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d053      	beq.n	8009242 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a1b      	ldr	r2, [pc, #108]	; (800920c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d04b      	beq.n	800923c <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a19      	ldr	r2, [pc, #100]	; (8009210 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d043      	beq.n	8009236 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a18      	ldr	r2, [pc, #96]	; (8009214 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d03b      	beq.n	8009230 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a16      	ldr	r2, [pc, #88]	; (8009218 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d012      	beq.n	80091e8 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a15      	ldr	r2, [pc, #84]	; (800921c <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00a      	beq.n	80091e2 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a13      	ldr	r2, [pc, #76]	; (8009220 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d102      	bne.n	80091dc <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80091d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091da:	e03f      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091e0:	e03c      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091e6:	e039      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80091ec:	e036      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80091ee:	bf00      	nop
 80091f0:	40026458 	.word	0x40026458
 80091f4:	40026010 	.word	0x40026010
 80091f8:	40026410 	.word	0x40026410
 80091fc:	40026070 	.word	0x40026070
 8009200:	40026470 	.word	0x40026470
 8009204:	40026028 	.word	0x40026028
 8009208:	40026428 	.word	0x40026428
 800920c:	40026088 	.word	0x40026088
 8009210:	40026488 	.word	0x40026488
 8009214:	40026040 	.word	0x40026040
 8009218:	40026440 	.word	0x40026440
 800921c:	400260a0 	.word	0x400260a0
 8009220:	400264a0 	.word	0x400264a0
 8009224:	40026400 	.word	0x40026400
 8009228:	400260b8 	.word	0x400260b8
 800922c:	40026058 	.word	0x40026058
 8009230:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009234:	e012      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009236:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800923a:	e00f      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800923c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009240:	e00c      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009246:	e009      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009248:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800924c:	e006      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800924e:	2320      	movs	r3, #32
 8009250:	e004      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009252:	2320      	movs	r3, #32
 8009254:	e002      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8009256:	2320      	movs	r3, #32
 8009258:	e000      	b.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800925a:	2320      	movs	r3, #32
 800925c:	4a8c      	ldr	r2, [pc, #560]	; (8009490 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800925e:	60d3      	str	r3, [r2, #12]
 8009260:	e05f      	b.n	8009322 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a8b      	ldr	r2, [pc, #556]	; (8009494 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d057      	beq.n	800931c <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a89      	ldr	r2, [pc, #548]	; (8009498 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d050      	beq.n	8009318 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a88      	ldr	r2, [pc, #544]	; (800949c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d049      	beq.n	8009314 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a86      	ldr	r2, [pc, #536]	; (80094a0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d042      	beq.n	8009310 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a85      	ldr	r2, [pc, #532]	; (80094a4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d03a      	beq.n	800930a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a83      	ldr	r2, [pc, #524]	; (80094a8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d032      	beq.n	8009304 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a82      	ldr	r2, [pc, #520]	; (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d02a      	beq.n	80092fe <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a80      	ldr	r2, [pc, #512]	; (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d022      	beq.n	80092f8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a7f      	ldr	r2, [pc, #508]	; (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d01a      	beq.n	80092f2 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a7d      	ldr	r2, [pc, #500]	; (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d012      	beq.n	80092ec <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a7c      	ldr	r2, [pc, #496]	; (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d00a      	beq.n	80092e6 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a7a      	ldr	r2, [pc, #488]	; (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d102      	bne.n	80092e0 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80092da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092de:	e01e      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092e4:	e01b      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092ea:	e018      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092f0:	e015      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80092f6:	e012      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092fc:	e00f      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80092fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009302:	e00c      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009308:	e009      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800930a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800930e:	e006      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009310:	2320      	movs	r3, #32
 8009312:	e004      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009314:	2320      	movs	r3, #32
 8009316:	e002      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8009318:	2320      	movs	r3, #32
 800931a:	e000      	b.n	800931e <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800931c:	2320      	movs	r3, #32
 800931e:	4a5c      	ldr	r2, [pc, #368]	; (8009490 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8009320:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	4b66      	ldr	r3, [pc, #408]	; (80094c4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 800932a:	429a      	cmp	r2, r3
 800932c:	d960      	bls.n	80093f0 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a58      	ldr	r2, [pc, #352]	; (8009494 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d057      	beq.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a56      	ldr	r2, [pc, #344]	; (8009498 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d050      	beq.n	80093e4 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a55      	ldr	r2, [pc, #340]	; (800949c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d049      	beq.n	80093e0 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a53      	ldr	r2, [pc, #332]	; (80094a0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d042      	beq.n	80093dc <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a52      	ldr	r2, [pc, #328]	; (80094a4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d03a      	beq.n	80093d6 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a50      	ldr	r2, [pc, #320]	; (80094a8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d032      	beq.n	80093d0 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a4f      	ldr	r2, [pc, #316]	; (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d02a      	beq.n	80093ca <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a4d      	ldr	r2, [pc, #308]	; (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d022      	beq.n	80093c4 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a4c      	ldr	r2, [pc, #304]	; (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d01a      	beq.n	80093be <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a4a      	ldr	r2, [pc, #296]	; (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d012      	beq.n	80093b8 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a49      	ldr	r2, [pc, #292]	; (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d00a      	beq.n	80093b2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a47      	ldr	r2, [pc, #284]	; (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d102      	bne.n	80093ac <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 80093a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093aa:	e01e      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80093b0:	e01b      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093b6:	e018      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093bc:	e015      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093c2:	e012      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093c8:	e00f      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ce:	e00c      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093d4:	e009      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093da:	e006      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093dc:	2310      	movs	r3, #16
 80093de:	e004      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093e0:	2310      	movs	r3, #16
 80093e2:	e002      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093e4:	2310      	movs	r3, #16
 80093e6:	e000      	b.n	80093ea <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80093e8:	2310      	movs	r3, #16
 80093ea:	4a37      	ldr	r2, [pc, #220]	; (80094c8 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80093ec:	60d3      	str	r3, [r2, #12]
 80093ee:	e14f      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	4b35      	ldr	r3, [pc, #212]	; (80094cc <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80093f8:	429a      	cmp	r2, r3
 80093fa:	f240 8082 	bls.w	8009502 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a24      	ldr	r2, [pc, #144]	; (8009494 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d078      	beq.n	80094fa <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a22      	ldr	r2, [pc, #136]	; (8009498 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d071      	beq.n	80094f6 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a21      	ldr	r2, [pc, #132]	; (800949c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d06a      	beq.n	80094f2 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d063      	beq.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a1e      	ldr	r2, [pc, #120]	; (80094a4 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d05b      	beq.n	80094e8 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a1c      	ldr	r2, [pc, #112]	; (80094a8 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d053      	beq.n	80094e2 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d04b      	beq.n	80094dc <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d043      	beq.n	80094d6 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d03b      	beq.n	80094d0 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a16      	ldr	r2, [pc, #88]	; (80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d012      	beq.n	8009488 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a15      	ldr	r2, [pc, #84]	; (80094bc <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d00a      	beq.n	8009482 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a13      	ldr	r2, [pc, #76]	; (80094c0 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d102      	bne.n	800947c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8009476:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800947a:	e03f      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800947c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009480:	e03c      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009482:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009486:	e039      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8009488:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800948c:	e036      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800948e:	bf00      	nop
 8009490:	40026000 	.word	0x40026000
 8009494:	40026010 	.word	0x40026010
 8009498:	40026410 	.word	0x40026410
 800949c:	40026070 	.word	0x40026070
 80094a0:	40026470 	.word	0x40026470
 80094a4:	40026028 	.word	0x40026028
 80094a8:	40026428 	.word	0x40026428
 80094ac:	40026088 	.word	0x40026088
 80094b0:	40026488 	.word	0x40026488
 80094b4:	40026040 	.word	0x40026040
 80094b8:	40026440 	.word	0x40026440
 80094bc:	400260a0 	.word	0x400260a0
 80094c0:	400264a0 	.word	0x400264a0
 80094c4:	40026458 	.word	0x40026458
 80094c8:	40026400 	.word	0x40026400
 80094cc:	400260b8 	.word	0x400260b8
 80094d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094d4:	e012      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094da:	e00f      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e0:	e00c      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e6:	e009      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094ec:	e006      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094ee:	2310      	movs	r3, #16
 80094f0:	e004      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094f2:	2310      	movs	r3, #16
 80094f4:	e002      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094f6:	2310      	movs	r3, #16
 80094f8:	e000      	b.n	80094fc <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80094fa:	2310      	movs	r3, #16
 80094fc:	4a8c      	ldr	r2, [pc, #560]	; (8009730 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80094fe:	6093      	str	r3, [r2, #8]
 8009500:	e0c6      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	461a      	mov	r2, r3
 8009508:	4b8a      	ldr	r3, [pc, #552]	; (8009734 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 800950a:	429a      	cmp	r2, r3
 800950c:	d960      	bls.n	80095d0 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a89      	ldr	r2, [pc, #548]	; (8009738 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d057      	beq.n	80095c8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a87      	ldr	r2, [pc, #540]	; (800973c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d050      	beq.n	80095c4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a86      	ldr	r2, [pc, #536]	; (8009740 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d049      	beq.n	80095c0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a84      	ldr	r2, [pc, #528]	; (8009744 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d042      	beq.n	80095bc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a83      	ldr	r2, [pc, #524]	; (8009748 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d03a      	beq.n	80095b6 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a81      	ldr	r2, [pc, #516]	; (800974c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d032      	beq.n	80095b0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a80      	ldr	r2, [pc, #512]	; (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d02a      	beq.n	80095aa <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a7e      	ldr	r2, [pc, #504]	; (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d022      	beq.n	80095a4 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a7d      	ldr	r2, [pc, #500]	; (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d01a      	beq.n	800959e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a7b      	ldr	r2, [pc, #492]	; (800975c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d012      	beq.n	8009598 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a7a      	ldr	r2, [pc, #488]	; (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00a      	beq.n	8009592 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a78      	ldr	r2, [pc, #480]	; (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d102      	bne.n	800958c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8009586:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800958a:	e01e      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800958c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009590:	e01b      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009592:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009596:	e018      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8009598:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800959c:	e015      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800959e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095a2:	e012      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095a8:	e00f      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ae:	e00c      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095b4:	e009      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ba:	e006      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095bc:	2310      	movs	r3, #16
 80095be:	e004      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095c0:	2310      	movs	r3, #16
 80095c2:	e002      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095c4:	2310      	movs	r3, #16
 80095c6:	e000      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80095c8:	2310      	movs	r3, #16
 80095ca:	4a67      	ldr	r2, [pc, #412]	; (8009768 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80095cc:	60d3      	str	r3, [r2, #12]
 80095ce:	e05f      	b.n	8009690 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a58      	ldr	r2, [pc, #352]	; (8009738 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d057      	beq.n	800968a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a57      	ldr	r2, [pc, #348]	; (800973c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d050      	beq.n	8009686 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a55      	ldr	r2, [pc, #340]	; (8009740 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d049      	beq.n	8009682 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a54      	ldr	r2, [pc, #336]	; (8009744 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d042      	beq.n	800967e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a52      	ldr	r2, [pc, #328]	; (8009748 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d03a      	beq.n	8009678 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a51      	ldr	r2, [pc, #324]	; (800974c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d032      	beq.n	8009672 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a4f      	ldr	r2, [pc, #316]	; (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d02a      	beq.n	800966c <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a4e      	ldr	r2, [pc, #312]	; (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d022      	beq.n	8009666 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a4c      	ldr	r2, [pc, #304]	; (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d01a      	beq.n	8009660 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a4b      	ldr	r2, [pc, #300]	; (800975c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d012      	beq.n	800965a <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a49      	ldr	r2, [pc, #292]	; (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00a      	beq.n	8009654 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a48      	ldr	r2, [pc, #288]	; (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d102      	bne.n	800964e <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8009648:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800964c:	e01e      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800964e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009652:	e01b      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009654:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009658:	e018      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800965a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800965e:	e015      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009664:	e012      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800966a:	e00f      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800966c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009670:	e00c      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009676:	e009      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800967c:	e006      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800967e:	2310      	movs	r3, #16
 8009680:	e004      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009682:	2310      	movs	r3, #16
 8009684:	e002      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8009686:	2310      	movs	r3, #16
 8009688:	e000      	b.n	800968c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800968a:	2310      	movs	r3, #16
 800968c:	4a36      	ldr	r2, [pc, #216]	; (8009768 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800968e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	4b35      	ldr	r3, [pc, #212]	; (800976c <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8009698:	429a      	cmp	r2, r3
 800969a:	f240 8082 	bls.w	80097a2 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a25      	ldr	r2, [pc, #148]	; (8009738 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d078      	beq.n	800979a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a23      	ldr	r2, [pc, #140]	; (800973c <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d071      	beq.n	8009796 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a22      	ldr	r2, [pc, #136]	; (8009740 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d06a      	beq.n	8009792 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a20      	ldr	r2, [pc, #128]	; (8009744 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d063      	beq.n	800978e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d05b      	beq.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1d      	ldr	r2, [pc, #116]	; (800974c <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d053      	beq.n	8009782 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a1c      	ldr	r2, [pc, #112]	; (8009750 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d04b      	beq.n	800977c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1a      	ldr	r2, [pc, #104]	; (8009754 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d043      	beq.n	8009776 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a19      	ldr	r2, [pc, #100]	; (8009758 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d03b      	beq.n	8009770 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a17      	ldr	r2, [pc, #92]	; (800975c <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d012      	beq.n	8009728 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a16      	ldr	r2, [pc, #88]	; (8009760 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00a      	beq.n	8009722 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a14      	ldr	r2, [pc, #80]	; (8009764 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d102      	bne.n	800971c <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8009716:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800971a:	e03f      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800971c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009720:	e03c      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009722:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009726:	e039      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800972c:	e036      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800972e:	bf00      	nop
 8009730:	40026400 	.word	0x40026400
 8009734:	40026058 	.word	0x40026058
 8009738:	40026010 	.word	0x40026010
 800973c:	40026410 	.word	0x40026410
 8009740:	40026070 	.word	0x40026070
 8009744:	40026470 	.word	0x40026470
 8009748:	40026028 	.word	0x40026028
 800974c:	40026428 	.word	0x40026428
 8009750:	40026088 	.word	0x40026088
 8009754:	40026488 	.word	0x40026488
 8009758:	40026040 	.word	0x40026040
 800975c:	40026440 	.word	0x40026440
 8009760:	400260a0 	.word	0x400260a0
 8009764:	400264a0 	.word	0x400264a0
 8009768:	40026000 	.word	0x40026000
 800976c:	40026458 	.word	0x40026458
 8009770:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009774:	e012      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800977a:	e00f      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800977c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009780:	e00c      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009786:	e009      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800978c:	e006      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800978e:	2308      	movs	r3, #8
 8009790:	e004      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009792:	2308      	movs	r3, #8
 8009794:	e002      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8009796:	2308      	movs	r3, #8
 8009798:	e000      	b.n	800979c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800979a:	2308      	movs	r3, #8
 800979c:	4a8c      	ldr	r2, [pc, #560]	; (80099d0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800979e:	60d3      	str	r3, [r2, #12]
 80097a0:	e14e      	b.n	8009a40 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b8a      	ldr	r3, [pc, #552]	; (80099d4 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d960      	bls.n	8009870 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a89      	ldr	r2, [pc, #548]	; (80099d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d057      	beq.n	8009868 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a87      	ldr	r2, [pc, #540]	; (80099dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d050      	beq.n	8009864 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a86      	ldr	r2, [pc, #536]	; (80099e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d049      	beq.n	8009860 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a84      	ldr	r2, [pc, #528]	; (80099e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d042      	beq.n	800985c <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a83      	ldr	r2, [pc, #524]	; (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d03a      	beq.n	8009856 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a81      	ldr	r2, [pc, #516]	; (80099ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d032      	beq.n	8009850 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a80      	ldr	r2, [pc, #512]	; (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d02a      	beq.n	800984a <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a7e      	ldr	r2, [pc, #504]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d022      	beq.n	8009844 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a7d      	ldr	r2, [pc, #500]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d01a      	beq.n	800983e <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a7b      	ldr	r2, [pc, #492]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d012      	beq.n	8009838 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a7a      	ldr	r2, [pc, #488]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d00a      	beq.n	8009832 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a78      	ldr	r2, [pc, #480]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d102      	bne.n	800982c <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8009826:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800982a:	e01e      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800982c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009830:	e01b      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009832:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009836:	e018      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009838:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800983c:	e015      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800983e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009842:	e012      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009848:	e00f      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800984a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800984e:	e00c      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009850:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009854:	e009      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009856:	f44f 7300 	mov.w	r3, #512	; 0x200
 800985a:	e006      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800985c:	2308      	movs	r3, #8
 800985e:	e004      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009860:	2308      	movs	r3, #8
 8009862:	e002      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009864:	2308      	movs	r3, #8
 8009866:	e000      	b.n	800986a <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8009868:	2308      	movs	r3, #8
 800986a:	4a59      	ldr	r2, [pc, #356]	; (80099d0 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800986c:	6093      	str	r3, [r2, #8]
 800986e:	e0e7      	b.n	8009a40 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	4b64      	ldr	r3, [pc, #400]	; (8009a08 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8009878:	429a      	cmp	r2, r3
 800987a:	d960      	bls.n	800993e <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a55      	ldr	r2, [pc, #340]	; (80099d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d057      	beq.n	8009936 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a54      	ldr	r2, [pc, #336]	; (80099dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d050      	beq.n	8009932 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a52      	ldr	r2, [pc, #328]	; (80099e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d049      	beq.n	800992e <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a51      	ldr	r2, [pc, #324]	; (80099e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d042      	beq.n	800992a <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a4f      	ldr	r2, [pc, #316]	; (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d03a      	beq.n	8009924 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a4e      	ldr	r2, [pc, #312]	; (80099ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d032      	beq.n	800991e <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a4c      	ldr	r2, [pc, #304]	; (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d02a      	beq.n	8009918 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a4b      	ldr	r2, [pc, #300]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d022      	beq.n	8009912 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a49      	ldr	r2, [pc, #292]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d01a      	beq.n	800990c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a48      	ldr	r2, [pc, #288]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d012      	beq.n	8009906 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a46      	ldr	r2, [pc, #280]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00a      	beq.n	8009900 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a45      	ldr	r2, [pc, #276]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d102      	bne.n	80098fa <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80098f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80098f8:	e01e      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80098fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098fe:	e01b      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009900:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009904:	e018      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009906:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800990a:	e015      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800990c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009910:	e012      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009916:	e00f      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800991c:	e00c      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800991e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009922:	e009      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009924:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009928:	e006      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800992a:	2308      	movs	r3, #8
 800992c:	e004      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800992e:	2308      	movs	r3, #8
 8009930:	e002      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009932:	2308      	movs	r3, #8
 8009934:	e000      	b.n	8009938 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8009936:	2308      	movs	r3, #8
 8009938:	4a34      	ldr	r2, [pc, #208]	; (8009a0c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800993a:	60d3      	str	r3, [r2, #12]
 800993c:	e080      	b.n	8009a40 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a25      	ldr	r2, [pc, #148]	; (80099d8 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d078      	beq.n	8009a3a <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a23      	ldr	r2, [pc, #140]	; (80099dc <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d071      	beq.n	8009a36 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a22      	ldr	r2, [pc, #136]	; (80099e0 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d06a      	beq.n	8009a32 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a20      	ldr	r2, [pc, #128]	; (80099e4 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d063      	beq.n	8009a2e <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a1f      	ldr	r2, [pc, #124]	; (80099e8 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d05b      	beq.n	8009a28 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a1d      	ldr	r2, [pc, #116]	; (80099ec <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d053      	beq.n	8009a22 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a1c      	ldr	r2, [pc, #112]	; (80099f0 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d04b      	beq.n	8009a1c <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d043      	beq.n	8009a16 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d03b      	beq.n	8009a10 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a17      	ldr	r2, [pc, #92]	; (80099fc <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d012      	beq.n	80099c8 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a16      	ldr	r2, [pc, #88]	; (8009a00 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d00a      	beq.n	80099c2 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a14      	ldr	r2, [pc, #80]	; (8009a04 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d102      	bne.n	80099bc <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80099b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099ba:	e03f      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80099c0:	e03c      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099c6:	e039      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80099cc:	e036      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80099ce:	bf00      	nop
 80099d0:	40026400 	.word	0x40026400
 80099d4:	400260b8 	.word	0x400260b8
 80099d8:	40026010 	.word	0x40026010
 80099dc:	40026410 	.word	0x40026410
 80099e0:	40026070 	.word	0x40026070
 80099e4:	40026470 	.word	0x40026470
 80099e8:	40026028 	.word	0x40026028
 80099ec:	40026428 	.word	0x40026428
 80099f0:	40026088 	.word	0x40026088
 80099f4:	40026488 	.word	0x40026488
 80099f8:	40026040 	.word	0x40026040
 80099fc:	40026440 	.word	0x40026440
 8009a00:	400260a0 	.word	0x400260a0
 8009a04:	400264a0 	.word	0x400264a0
 8009a08:	40026058 	.word	0x40026058
 8009a0c:	40026000 	.word	0x40026000
 8009a10:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009a14:	e012      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a1a:	e00f      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a20:	e00c      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a26:	e009      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a2c:	e006      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a2e:	2308      	movs	r3, #8
 8009a30:	e004      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a32:	2308      	movs	r3, #8
 8009a34:	e002      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a36:	2308      	movs	r3, #8
 8009a38:	e000      	b.n	8009a3c <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	4a8a      	ldr	r2, [pc, #552]	; (8009c68 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8009a3e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	461a      	mov	r2, r3
 8009a46:	4b89      	ldr	r3, [pc, #548]	; (8009c6c <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d960      	bls.n	8009b0e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a87      	ldr	r2, [pc, #540]	; (8009c70 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d057      	beq.n	8009b06 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a86      	ldr	r2, [pc, #536]	; (8009c74 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d050      	beq.n	8009b02 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a84      	ldr	r2, [pc, #528]	; (8009c78 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d049      	beq.n	8009afe <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a83      	ldr	r2, [pc, #524]	; (8009c7c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d042      	beq.n	8009afa <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a81      	ldr	r2, [pc, #516]	; (8009c80 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d03a      	beq.n	8009af4 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a80      	ldr	r2, [pc, #512]	; (8009c84 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d032      	beq.n	8009aee <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a7e      	ldr	r2, [pc, #504]	; (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d02a      	beq.n	8009ae8 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a7d      	ldr	r2, [pc, #500]	; (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d022      	beq.n	8009ae2 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a7b      	ldr	r2, [pc, #492]	; (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d01a      	beq.n	8009adc <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a7a      	ldr	r2, [pc, #488]	; (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d012      	beq.n	8009ad6 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a78      	ldr	r2, [pc, #480]	; (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d00a      	beq.n	8009ad0 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a77      	ldr	r2, [pc, #476]	; (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d102      	bne.n	8009aca <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009ac4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ac8:	e01e      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009aca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ace:	e01b      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009ad0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ad4:	e018      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009ad6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ada:	e015      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009adc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ae0:	e012      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ae6:	e00f      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aec:	e00c      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009aee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009af2:	e009      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009af8:	e006      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009afa:	2304      	movs	r3, #4
 8009afc:	e004      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009afe:	2304      	movs	r3, #4
 8009b00:	e002      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009b02:	2304      	movs	r3, #4
 8009b04:	e000      	b.n	8009b08 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009b06:	2304      	movs	r3, #4
 8009b08:	4a65      	ldr	r2, [pc, #404]	; (8009ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009b0a:	60d3      	str	r3, [r2, #12]
 8009b0c:	e150      	b.n	8009db0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	4b63      	ldr	r3, [pc, #396]	; (8009ca4 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d960      	bls.n	8009bdc <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a54      	ldr	r2, [pc, #336]	; (8009c70 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d057      	beq.n	8009bd4 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a52      	ldr	r2, [pc, #328]	; (8009c74 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d050      	beq.n	8009bd0 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a51      	ldr	r2, [pc, #324]	; (8009c78 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d049      	beq.n	8009bcc <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a4f      	ldr	r2, [pc, #316]	; (8009c7c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d042      	beq.n	8009bc8 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a4e      	ldr	r2, [pc, #312]	; (8009c80 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d03a      	beq.n	8009bc2 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a4c      	ldr	r2, [pc, #304]	; (8009c84 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d032      	beq.n	8009bbc <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a4b      	ldr	r2, [pc, #300]	; (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d02a      	beq.n	8009bb6 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a49      	ldr	r2, [pc, #292]	; (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d022      	beq.n	8009bb0 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a48      	ldr	r2, [pc, #288]	; (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d01a      	beq.n	8009baa <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a46      	ldr	r2, [pc, #280]	; (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d012      	beq.n	8009ba4 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a45      	ldr	r2, [pc, #276]	; (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d00a      	beq.n	8009b9e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a43      	ldr	r2, [pc, #268]	; (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d102      	bne.n	8009b98 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009b92:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b96:	e01e      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b9c:	e01b      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009b9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ba2:	e018      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009ba4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009ba8:	e015      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009baa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009bae:	e012      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bb4:	e00f      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bba:	e00c      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc0:	e009      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bc6:	e006      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bc8:	2304      	movs	r3, #4
 8009bca:	e004      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	e002      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	e000      	b.n	8009bd6 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	4a32      	ldr	r2, [pc, #200]	; (8009ca0 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009bd8:	6093      	str	r3, [r2, #8]
 8009bda:	e0e9      	b.n	8009db0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	461a      	mov	r2, r3
 8009be2:	4b31      	ldr	r3, [pc, #196]	; (8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8009be4:	429a      	cmp	r2, r3
 8009be6:	f240 8083 	bls.w	8009cf0 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a20      	ldr	r2, [pc, #128]	; (8009c70 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d079      	beq.n	8009ce8 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d072      	beq.n	8009ce4 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a1d      	ldr	r2, [pc, #116]	; (8009c78 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d06b      	beq.n	8009ce0 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a1b      	ldr	r2, [pc, #108]	; (8009c7c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d064      	beq.n	8009cdc <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a1a      	ldr	r2, [pc, #104]	; (8009c80 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d05c      	beq.n	8009cd6 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a18      	ldr	r2, [pc, #96]	; (8009c84 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d054      	beq.n	8009cd0 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a17      	ldr	r2, [pc, #92]	; (8009c88 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d04c      	beq.n	8009cca <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a15      	ldr	r2, [pc, #84]	; (8009c8c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d044      	beq.n	8009cc4 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a14      	ldr	r2, [pc, #80]	; (8009c90 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d03c      	beq.n	8009cbe <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a12      	ldr	r2, [pc, #72]	; (8009c94 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d034      	beq.n	8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a11      	ldr	r2, [pc, #68]	; (8009c98 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d02c      	beq.n	8009cb2 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a0f      	ldr	r2, [pc, #60]	; (8009c9c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d124      	bne.n	8009cac <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8009c62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c66:	e040      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009c68:	40026000 	.word	0x40026000
 8009c6c:	40026458 	.word	0x40026458
 8009c70:	40026010 	.word	0x40026010
 8009c74:	40026410 	.word	0x40026410
 8009c78:	40026070 	.word	0x40026070
 8009c7c:	40026470 	.word	0x40026470
 8009c80:	40026028 	.word	0x40026028
 8009c84:	40026428 	.word	0x40026428
 8009c88:	40026088 	.word	0x40026088
 8009c8c:	40026488 	.word	0x40026488
 8009c90:	40026040 	.word	0x40026040
 8009c94:	40026440 	.word	0x40026440
 8009c98:	400260a0 	.word	0x400260a0
 8009c9c:	400264a0 	.word	0x400264a0
 8009ca0:	40026400 	.word	0x40026400
 8009ca4:	400260b8 	.word	0x400260b8
 8009ca8:	40026058 	.word	0x40026058
 8009cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009cb0:	e01b      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cb2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cb6:	e018      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cb8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cbc:	e015      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009cc2:	e012      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc8:	e00f      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cce:	e00c      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cd4:	e009      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cda:	e006      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009cdc:	2304      	movs	r3, #4
 8009cde:	e004      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009ce0:	2304      	movs	r3, #4
 8009ce2:	e002      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009ce4:	2304      	movs	r3, #4
 8009ce6:	e000      	b.n	8009cea <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009ce8:	2304      	movs	r3, #4
 8009cea:	4a8b      	ldr	r2, [pc, #556]	; (8009f18 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009cec:	60d3      	str	r3, [r2, #12]
 8009cee:	e05f      	b.n	8009db0 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a89      	ldr	r2, [pc, #548]	; (8009f1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d057      	beq.n	8009daa <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a88      	ldr	r2, [pc, #544]	; (8009f20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d050      	beq.n	8009da6 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a86      	ldr	r2, [pc, #536]	; (8009f24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d049      	beq.n	8009da2 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a85      	ldr	r2, [pc, #532]	; (8009f28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d042      	beq.n	8009d9e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a83      	ldr	r2, [pc, #524]	; (8009f2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d03a      	beq.n	8009d98 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a82      	ldr	r2, [pc, #520]	; (8009f30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d032      	beq.n	8009d92 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a80      	ldr	r2, [pc, #512]	; (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d02a      	beq.n	8009d8c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a7f      	ldr	r2, [pc, #508]	; (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d022      	beq.n	8009d86 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a7d      	ldr	r2, [pc, #500]	; (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d01a      	beq.n	8009d80 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a7c      	ldr	r2, [pc, #496]	; (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d012      	beq.n	8009d7a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a7a      	ldr	r2, [pc, #488]	; (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d00a      	beq.n	8009d74 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a79      	ldr	r2, [pc, #484]	; (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d102      	bne.n	8009d6e <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8009d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d6c:	e01e      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d72:	e01b      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d78:	e018      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d7a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d7e:	e015      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d84:	e012      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d8a:	e00f      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d90:	e00c      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d96:	e009      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d9c:	e006      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009d9e:	2304      	movs	r3, #4
 8009da0:	e004      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009da2:	2304      	movs	r3, #4
 8009da4:	e002      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009da6:	2304      	movs	r3, #4
 8009da8:	e000      	b.n	8009dac <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009daa:	2304      	movs	r3, #4
 8009dac:	4a5a      	ldr	r2, [pc, #360]	; (8009f18 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8009dae:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	461a      	mov	r2, r3
 8009db6:	4b65      	ldr	r3, [pc, #404]	; (8009f4c <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d95c      	bls.n	8009e76 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a56      	ldr	r2, [pc, #344]	; (8009f1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d053      	beq.n	8009e6e <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a55      	ldr	r2, [pc, #340]	; (8009f20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d04c      	beq.n	8009e6a <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a53      	ldr	r2, [pc, #332]	; (8009f24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d045      	beq.n	8009e66 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a52      	ldr	r2, [pc, #328]	; (8009f28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d03e      	beq.n	8009e62 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a50      	ldr	r2, [pc, #320]	; (8009f2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d037      	beq.n	8009e5e <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a4f      	ldr	r2, [pc, #316]	; (8009f30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d030      	beq.n	8009e5a <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a4d      	ldr	r2, [pc, #308]	; (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d029      	beq.n	8009e56 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a4c      	ldr	r2, [pc, #304]	; (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d022      	beq.n	8009e52 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a4a      	ldr	r2, [pc, #296]	; (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d01a      	beq.n	8009e4c <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a49      	ldr	r2, [pc, #292]	; (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d012      	beq.n	8009e46 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a47      	ldr	r2, [pc, #284]	; (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d00a      	beq.n	8009e40 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a46      	ldr	r2, [pc, #280]	; (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d102      	bne.n	8009e3a <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8009e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e38:	e01a      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e3e:	e017      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e44:	e014      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e4a:	e011      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e50:	e00e      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e52:	2340      	movs	r3, #64	; 0x40
 8009e54:	e00c      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e56:	2340      	movs	r3, #64	; 0x40
 8009e58:	e00a      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e5a:	2340      	movs	r3, #64	; 0x40
 8009e5c:	e008      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e5e:	2340      	movs	r3, #64	; 0x40
 8009e60:	e006      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e62:	2301      	movs	r3, #1
 8009e64:	e004      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e66:	2301      	movs	r3, #1
 8009e68:	e002      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e000      	b.n	8009e70 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4a37      	ldr	r2, [pc, #220]	; (8009f50 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009e72:	60d3      	str	r3, [r2, #12]
 8009e74:	e141      	b.n	800a0fa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	4b35      	ldr	r3, [pc, #212]	; (8009f54 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d97c      	bls.n	8009f7c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a25      	ldr	r2, [pc, #148]	; (8009f1c <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d073      	beq.n	8009f74 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a23      	ldr	r2, [pc, #140]	; (8009f20 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d06c      	beq.n	8009f70 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a22      	ldr	r2, [pc, #136]	; (8009f24 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d065      	beq.n	8009f6c <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a20      	ldr	r2, [pc, #128]	; (8009f28 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d05e      	beq.n	8009f68 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d057      	beq.n	8009f64 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a1d      	ldr	r2, [pc, #116]	; (8009f30 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d050      	beq.n	8009f60 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1c      	ldr	r2, [pc, #112]	; (8009f34 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d049      	beq.n	8009f5c <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a1a      	ldr	r2, [pc, #104]	; (8009f38 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d042      	beq.n	8009f58 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d01a      	beq.n	8009f12 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a17      	ldr	r2, [pc, #92]	; (8009f40 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d012      	beq.n	8009f0c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a16      	ldr	r2, [pc, #88]	; (8009f44 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00a      	beq.n	8009f06 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a14      	ldr	r2, [pc, #80]	; (8009f48 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d102      	bne.n	8009f00 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009efa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009efe:	e03a      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009f04:	e037      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f0a:	e034      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f10:	e031      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f16:	e02e      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f18:	40026000 	.word	0x40026000
 8009f1c:	40026010 	.word	0x40026010
 8009f20:	40026410 	.word	0x40026410
 8009f24:	40026070 	.word	0x40026070
 8009f28:	40026470 	.word	0x40026470
 8009f2c:	40026028 	.word	0x40026028
 8009f30:	40026428 	.word	0x40026428
 8009f34:	40026088 	.word	0x40026088
 8009f38:	40026488 	.word	0x40026488
 8009f3c:	40026040 	.word	0x40026040
 8009f40:	40026440 	.word	0x40026440
 8009f44:	400260a0 	.word	0x400260a0
 8009f48:	400264a0 	.word	0x400264a0
 8009f4c:	40026458 	.word	0x40026458
 8009f50:	40026400 	.word	0x40026400
 8009f54:	400260b8 	.word	0x400260b8
 8009f58:	2340      	movs	r3, #64	; 0x40
 8009f5a:	e00c      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f5c:	2340      	movs	r3, #64	; 0x40
 8009f5e:	e00a      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	e008      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f64:	2340      	movs	r3, #64	; 0x40
 8009f66:	e006      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e004      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e002      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e000      	b.n	8009f76 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4a7b      	ldr	r2, [pc, #492]	; (800a164 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009f78:	6093      	str	r3, [r2, #8]
 8009f7a:	e0be      	b.n	800a0fa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	4b79      	ldr	r3, [pc, #484]	; (800a168 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d95c      	bls.n	800a042 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a77      	ldr	r2, [pc, #476]	; (800a16c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d053      	beq.n	800a03a <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a76      	ldr	r2, [pc, #472]	; (800a170 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d04c      	beq.n	800a036 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a74      	ldr	r2, [pc, #464]	; (800a174 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d045      	beq.n	800a032 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a73      	ldr	r2, [pc, #460]	; (800a178 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d03e      	beq.n	800a02e <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a71      	ldr	r2, [pc, #452]	; (800a17c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d037      	beq.n	800a02a <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a70      	ldr	r2, [pc, #448]	; (800a180 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d030      	beq.n	800a026 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a6e      	ldr	r2, [pc, #440]	; (800a184 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d029      	beq.n	800a022 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a6d      	ldr	r2, [pc, #436]	; (800a188 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d022      	beq.n	800a01e <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a6b      	ldr	r2, [pc, #428]	; (800a18c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d01a      	beq.n	800a018 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a6a      	ldr	r2, [pc, #424]	; (800a190 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d012      	beq.n	800a012 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a68      	ldr	r2, [pc, #416]	; (800a194 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00a      	beq.n	800a00c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4a67      	ldr	r2, [pc, #412]	; (800a198 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d102      	bne.n	800a006 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800a000:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a004:	e01a      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a006:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a00a:	e017      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a00c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a010:	e014      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a016:	e011      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a01c:	e00e      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a01e:	2340      	movs	r3, #64	; 0x40
 800a020:	e00c      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a022:	2340      	movs	r3, #64	; 0x40
 800a024:	e00a      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a026:	2340      	movs	r3, #64	; 0x40
 800a028:	e008      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a02a:	2340      	movs	r3, #64	; 0x40
 800a02c:	e006      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a02e:	2301      	movs	r3, #1
 800a030:	e004      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a032:	2301      	movs	r3, #1
 800a034:	e002      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4a57      	ldr	r2, [pc, #348]	; (800a19c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800a03e:	60d3      	str	r3, [r2, #12]
 800a040:	e05b      	b.n	800a0fa <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a49      	ldr	r2, [pc, #292]	; (800a16c <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d053      	beq.n	800a0f4 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a47      	ldr	r2, [pc, #284]	; (800a170 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d04c      	beq.n	800a0f0 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a46      	ldr	r2, [pc, #280]	; (800a174 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d045      	beq.n	800a0ec <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a44      	ldr	r2, [pc, #272]	; (800a178 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d03e      	beq.n	800a0e8 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a43      	ldr	r2, [pc, #268]	; (800a17c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d037      	beq.n	800a0e4 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a41      	ldr	r2, [pc, #260]	; (800a180 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d030      	beq.n	800a0e0 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a40      	ldr	r2, [pc, #256]	; (800a184 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d029      	beq.n	800a0dc <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a3e      	ldr	r2, [pc, #248]	; (800a188 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d022      	beq.n	800a0d8 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a3d      	ldr	r2, [pc, #244]	; (800a18c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d01a      	beq.n	800a0d2 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a3b      	ldr	r2, [pc, #236]	; (800a190 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d012      	beq.n	800a0cc <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a3a      	ldr	r2, [pc, #232]	; (800a194 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d00a      	beq.n	800a0c6 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a38      	ldr	r2, [pc, #224]	; (800a198 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d102      	bne.n	800a0c0 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800a0ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0be:	e01a      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0c4:	e017      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0ca:	e014      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0d0:	e011      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a0d6:	e00e      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0d8:	2340      	movs	r3, #64	; 0x40
 800a0da:	e00c      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	e00a      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0e0:	2340      	movs	r3, #64	; 0x40
 800a0e2:	e008      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0e4:	2340      	movs	r3, #64	; 0x40
 800a0e6:	e006      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e004      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e002      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e000      	b.n	800a0f6 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4a29      	ldr	r2, [pc, #164]	; (800a19c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800a0f8:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f042 0216 	orr.w	r2, r2, #22
 800a108:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	695a      	ldr	r2, [r3, #20]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a118:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d103      	bne.n	800a12a <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a126:	2b00      	cmp	r3, #0
 800a128:	d007      	beq.n	800a13a <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f042 0208 	orr.w	r2, r2, #8
 800a138:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f042 0201 	orr.w	r2, r2, #1
 800a148:	601a      	str	r2, [r3, #0]
 800a14a:	e005      	b.n	800a158 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a154:	2302      	movs	r3, #2
 800a156:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	40026400 	.word	0x40026400
 800a168:	40026058 	.word	0x40026058
 800a16c:	40026010 	.word	0x40026010
 800a170:	40026410 	.word	0x40026410
 800a174:	40026070 	.word	0x40026070
 800a178:	40026470 	.word	0x40026470
 800a17c:	40026028 	.word	0x40026028
 800a180:	40026428 	.word	0x40026428
 800a184:	40026088 	.word	0x40026088
 800a188:	40026488 	.word	0x40026488
 800a18c:	40026040 	.word	0x40026040
 800a190:	40026440 	.word	0x40026440
 800a194:	400260a0 	.word	0x400260a0
 800a198:	400264a0 	.word	0x400264a0
 800a19c:	40026000 	.word	0x40026000

0800a1a0 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d104      	bne.n	800a1be <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	60da      	str	r2, [r3, #12]
 800a1bc:	e003      	b.n	800a1c6 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68ba      	ldr	r2, [r7, #8]
 800a1c4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	60f8      	str	r0, [r7, #12]
 800a1dc:	60b9      	str	r1, [r7, #8]
 800a1de:	607a      	str	r2, [r7, #4]
 800a1e0:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	2b40      	cmp	r3, #64	; 0x40
 800a1f0:	d108      	bne.n	800a204 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a202:	e007      	b.n	800a214 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	68ba      	ldr	r2, [r7, #8]
 800a20a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	60da      	str	r2, [r3, #12]
}
 800a214:	bf00      	nop
 800a216:	3714      	adds	r7, #20
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800a220:	b480      	push	{r7}
 800a222:	b087      	sub	sp, #28
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d002      	beq.n	800a236 <HAL_EXTI_SetConfigLine+0x16>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d101      	bne.n	800a23a <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800a236:	2301      	movs	r3, #1
 800a238:	e08f      	b.n	800a35a <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 031f 	and.w	r3, r3, #31
 800a24a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a24c:	2201      	movs	r2, #1
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d052      	beq.n	800a308 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0301 	and.w	r3, r3, #1
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d006      	beq.n	800a27c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 800a26e:	4b3e      	ldr	r3, [pc, #248]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a270:	689a      	ldr	r2, [r3, #8]
 800a272:	493d      	ldr	r1, [pc, #244]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	4313      	orrs	r3, r2
 800a278:	608b      	str	r3, [r1, #8]
 800a27a:	e006      	b.n	800a28a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 800a27c:	4b3a      	ldr	r3, [pc, #232]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a27e:	689a      	ldr	r2, [r3, #8]
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	43db      	mvns	r3, r3
 800a284:	4938      	ldr	r1, [pc, #224]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a286:	4013      	ands	r3, r2
 800a288:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f003 0302 	and.w	r3, r3, #2
 800a292:	2b00      	cmp	r3, #0
 800a294:	d006      	beq.n	800a2a4 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 800a296:	4b34      	ldr	r3, [pc, #208]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	4933      	ldr	r1, [pc, #204]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	60cb      	str	r3, [r1, #12]
 800a2a2:	e006      	b.n	800a2b2 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 800a2a4:	4b30      	ldr	r3, [pc, #192]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a2a6:	68da      	ldr	r2, [r3, #12]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	43db      	mvns	r3, r3
 800a2ac:	492e      	ldr	r1, [pc, #184]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a2ba:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a2be:	d123      	bne.n	800a308 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a2c0:	4a2a      	ldr	r2, [pc, #168]	; (800a36c <HAL_EXTI_SetConfigLine+0x14c>)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	089b      	lsrs	r3, r3, #2
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2cc:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	f003 0303 	and.w	r3, r3, #3
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	220f      	movs	r2, #15
 800a2d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2dc:	43db      	mvns	r3, r3
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4013      	ands	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68da      	ldr	r2, [r3, #12]
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	f003 0303 	and.w	r3, r3, #3
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800a2fa:	491c      	ldr	r1, [pc, #112]	; (800a36c <HAL_EXTI_SetConfigLine+0x14c>)
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	089b      	lsrs	r3, r3, #2
 800a300:	3302      	adds	r3, #2
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 800a314:	4b14      	ldr	r3, [pc, #80]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4913      	ldr	r1, [pc, #76]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	600b      	str	r3, [r1, #0]
 800a320:	e006      	b.n	800a330 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800a322:	4b11      	ldr	r3, [pc, #68]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	43db      	mvns	r3, r3
 800a32a:	490f      	ldr	r1, [pc, #60]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	f003 0302 	and.w	r3, r3, #2
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 800a33c:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	4909      	ldr	r1, [pc, #36]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	e006      	b.n	800a358 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a34c:	685a      	ldr	r2, [r3, #4]
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	43db      	mvns	r3, r3
 800a352:	4905      	ldr	r1, [pc, #20]	; (800a368 <HAL_EXTI_SetConfigLine+0x148>)
 800a354:	4013      	ands	r3, r2
 800a356:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	371c      	adds	r7, #28
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	40013c00 	.word	0x40013c00
 800a36c:	40013800 	.word	0x40013800

0800a370 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d002      	beq.n	800a386 <HAL_EXTI_GetConfigLine+0x16>
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e061      	b.n	800a44e <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681a      	ldr	r2, [r3, #0]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 031f 	and.w	r3, r3, #31
 800a39a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a39c:	2201      	movs	r2, #1
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3a4:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 800a3a6:	4b2d      	ldr	r3, [pc, #180]	; (800a45c <HAL_EXTI_GetConfigLine+0xec>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d003      	beq.n	800a3ba <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	605a      	str	r2, [r3, #4]
 800a3b8:	e002      	b.n	800a3c0 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 800a3c0:	4b26      	ldr	r3, [pc, #152]	; (800a45c <HAL_EXTI_GetConfigLine+0xec>)
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	4013      	ands	r3, r2
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d005      	beq.n	800a3d8 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	f043 0202 	orr.w	r2, r3, #2
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d02d      	beq.n	800a44c <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800a3f0:	4b1a      	ldr	r3, [pc, #104]	; (800a45c <HAL_EXTI_GetConfigLine+0xec>)
 800a3f2:	689a      	ldr	r2, [r3, #8]
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d002      	beq.n	800a402 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	2201      	movs	r2, #1
 800a400:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800a402:	4b16      	ldr	r3, [pc, #88]	; (800a45c <HAL_EXTI_GetConfigLine+0xec>)
 800a404:	68da      	ldr	r2, [r3, #12]
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	4013      	ands	r3, r2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f043 0202 	orr.w	r2, r3, #2
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a422:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a426:	d111      	bne.n	800a44c <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a428:	4a0d      	ldr	r2, [pc, #52]	; (800a460 <HAL_EXTI_GetConfigLine+0xf0>)
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	3302      	adds	r3, #2
 800a430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a434:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	43db      	mvns	r3, r3
 800a43a:	f003 0303 	and.w	r3, r3, #3
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	fa02 f303 	lsl.w	r3, r2, r3
 800a446:	0e1a      	lsrs	r2, r3, #24
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40013c00 	.word	0x40013c00
 800a460:	40013800 	.word	0x40013800

0800a464 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e04c      	b.n	800a510 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 031f 	and.w	r3, r3, #31
 800a47e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a480:	2201      	movs	r2, #1
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	fa02 f303 	lsl.w	r3, r2, r3
 800a488:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 800a48a:	4b24      	ldr	r3, [pc, #144]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	43db      	mvns	r3, r3
 800a492:	4922      	ldr	r1, [pc, #136]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a494:	4013      	ands	r3, r2
 800a496:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 800a498:	4b20      	ldr	r3, [pc, #128]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a49a:	685a      	ldr	r2, [r3, #4]
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	43db      	mvns	r3, r3
 800a4a0:	491e      	ldr	r1, [pc, #120]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a4a2:	4013      	ands	r3, r2
 800a4a4:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d02d      	beq.n	800a50e <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 800a4b2:	4b1a      	ldr	r3, [pc, #104]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a4b4:	689a      	ldr	r2, [r3, #8]
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	43db      	mvns	r3, r3
 800a4ba:	4918      	ldr	r1, [pc, #96]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a4bc:	4013      	ands	r3, r2
 800a4be:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 800a4c0:	4b16      	ldr	r3, [pc, #88]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	43db      	mvns	r3, r3
 800a4c8:	4914      	ldr	r1, [pc, #80]	; (800a51c <HAL_EXTI_ClearConfigLine+0xb8>)
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800a4d6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800a4da:	d118      	bne.n	800a50e <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800a4dc:	4a10      	ldr	r2, [pc, #64]	; (800a520 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a4de:	697b      	ldr	r3, [r7, #20]
 800a4e0:	089b      	lsrs	r3, r3, #2
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e8:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f003 0303 	and.w	r3, r3, #3
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	220f      	movs	r2, #15
 800a4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f8:	43db      	mvns	r3, r3
 800a4fa:	68fa      	ldr	r2, [r7, #12]
 800a4fc:	4013      	ands	r3, r2
 800a4fe:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800a500:	4907      	ldr	r1, [pc, #28]	; (800a520 <HAL_EXTI_ClearConfigLine+0xbc>)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	089b      	lsrs	r3, r3, #2
 800a506:	3302      	adds	r3, #2
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	40013c00 	.word	0x40013c00
 800a520:	40013800 	.word	0x40013800

0800a524 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a524:	b480      	push	{r7}
 800a526:	b087      	sub	sp, #28
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	460b      	mov	r3, r1
 800a52e:	607a      	str	r2, [r7, #4]
 800a530:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a536:	7afb      	ldrb	r3, [r7, #11]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d103      	bne.n	800a544 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	605a      	str	r2, [r3, #4]
      break;
 800a542:	e002      	b.n	800a54a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	75fb      	strb	r3, [r7, #23]
      break;
 800a548:	bf00      	nop
  }

  return status;
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	371c      	adds	r7, #28
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	e003      	b.n	800a574 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a572:	2300      	movs	r3, #0
  }
}
 800a574:	4618      	mov	r0, r3
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 031f 	and.w	r3, r3, #31
 800a590:	2201      	movs	r2, #1
 800a592:	fa02 f303 	lsl.w	r3, r2, r3
 800a596:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a598:	4b0a      	ldr	r3, [pc, #40]	; (800a5c4 <HAL_EXTI_IRQHandler+0x44>)
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d009      	beq.n	800a5bc <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a5a8:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <HAL_EXTI_IRQHandler+0x44>)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d002      	beq.n	800a5bc <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	4798      	blx	r3
    }
  }
}
 800a5bc:	bf00      	nop
 800a5be:	3710      	adds	r7, #16
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	40013c00 	.word	0x40013c00

0800a5c8 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f003 031f 	and.w	r3, r3, #31
 800a5da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 800a5dc:	2201      	movs	r2, #1
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800a5e6:	4b07      	ldr	r3, [pc, #28]	; (800a604 <HAL_EXTI_GetPending+0x3c>)
 800a5e8:	695a      	ldr	r2, [r3, #20]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	401a      	ands	r2, r3
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f4:	60fb      	str	r3, [r7, #12]
  return regval;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	371c      	adds	r7, #28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr
 800a604:	40013c00 	.word	0x40013c00

0800a608 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800a608:	b480      	push	{r7}
 800a60a:	b085      	sub	sp, #20
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	2201      	movs	r2, #1
 800a61c:	fa02 f303 	lsl.w	r3, r2, r3
 800a620:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800a622:	4a04      	ldr	r2, [pc, #16]	; (800a634 <HAL_EXTI_ClearPending+0x2c>)
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6153      	str	r3, [r2, #20]
}
 800a628:	bf00      	nop
 800a62a:	3714      	adds	r7, #20
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr
 800a634:	40013c00 	.word	0x40013c00

0800a638 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f003 031f 	and.w	r3, r3, #31
 800a648:	2201      	movs	r2, #1
 800a64a:	fa02 f303 	lsl.w	r3, r2, r3
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 800a650:	4a04      	ldr	r2, [pc, #16]	; (800a664 <HAL_EXTI_GenerateSWI+0x2c>)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6113      	str	r3, [r2, #16]
}
 800a656:	bf00      	nop
 800a658:	3714      	adds	r7, #20
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	40013c00 	.word	0x40013c00

0800a668 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b086      	sub	sp, #24
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a67a:	4b23      	ldr	r3, [pc, #140]	; (800a708 <HAL_FLASH_Program+0xa0>)
 800a67c:	7e1b      	ldrb	r3, [r3, #24]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <HAL_FLASH_Program+0x1e>
 800a682:	2302      	movs	r3, #2
 800a684:	e03b      	b.n	800a6fe <HAL_FLASH_Program+0x96>
 800a686:	4b20      	ldr	r3, [pc, #128]	; (800a708 <HAL_FLASH_Program+0xa0>)
 800a688:	2201      	movs	r2, #1
 800a68a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a68c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a690:	f000 f9be 	bl	800aa10 <FLASH_WaitForLastOperation>
 800a694:	4603      	mov	r3, r0
 800a696:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d12b      	bne.n	800a6f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d105      	bne.n	800a6b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a6a4:	783b      	ldrb	r3, [r7, #0]
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	68b8      	ldr	r0, [r7, #8]
 800a6aa:	f000 fa69 	bl	800ab80 <FLASH_Program_Byte>
 800a6ae:	e016      	b.n	800a6de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d105      	bne.n	800a6c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a6b6:	883b      	ldrh	r3, [r7, #0]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68b8      	ldr	r0, [r7, #8]
 800a6bc:	f000 fa3c 	bl	800ab38 <FLASH_Program_HalfWord>
 800a6c0:	e00d      	b.n	800a6de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	2b02      	cmp	r3, #2
 800a6c6:	d105      	bne.n	800a6d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	68b8      	ldr	r0, [r7, #8]
 800a6ce:	f000 fa11 	bl	800aaf4 <FLASH_Program_Word>
 800a6d2:	e004      	b.n	800a6de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a6d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6d8:	68b8      	ldr	r0, [r7, #8]
 800a6da:	f000 f9d9 	bl	800aa90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a6de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6e2:	f000 f995 	bl	800aa10 <FLASH_WaitForLastOperation>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a6ea:	4b08      	ldr	r3, [pc, #32]	; (800a70c <HAL_FLASH_Program+0xa4>)
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	4a07      	ldr	r2, [pc, #28]	; (800a70c <HAL_FLASH_Program+0xa4>)
 800a6f0:	f023 0301 	bic.w	r3, r3, #1
 800a6f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a6f6:	4b04      	ldr	r3, [pc, #16]	; (800a708 <HAL_FLASH_Program+0xa0>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3718      	adds	r7, #24
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	200009f0 	.word	0x200009f0
 800a70c:	40023c00 	.word	0x40023c00

0800a710 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800a71e:	2300      	movs	r3, #0
 800a720:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a722:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <HAL_FLASH_Program_IT+0x94>)
 800a724:	7e1b      	ldrb	r3, [r3, #24]
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <HAL_FLASH_Program_IT+0x1e>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e035      	b.n	800a79a <HAL_FLASH_Program_IT+0x8a>
 800a72e:	4b1d      	ldr	r3, [pc, #116]	; (800a7a4 <HAL_FLASH_Program_IT+0x94>)
 800a730:	2201      	movs	r2, #1
 800a732:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a734:	4b1c      	ldr	r3, [pc, #112]	; (800a7a8 <HAL_FLASH_Program_IT+0x98>)
 800a736:	691b      	ldr	r3, [r3, #16]
 800a738:	4a1b      	ldr	r2, [pc, #108]	; (800a7a8 <HAL_FLASH_Program_IT+0x98>)
 800a73a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a73e:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a740:	4b19      	ldr	r3, [pc, #100]	; (800a7a8 <HAL_FLASH_Program_IT+0x98>)
 800a742:	691b      	ldr	r3, [r3, #16]
 800a744:	4a18      	ldr	r2, [pc, #96]	; (800a7a8 <HAL_FLASH_Program_IT+0x98>)
 800a746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a74a:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800a74c:	4b15      	ldr	r3, [pc, #84]	; (800a7a4 <HAL_FLASH_Program_IT+0x94>)
 800a74e:	2203      	movs	r2, #3
 800a750:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 800a752:	4a14      	ldr	r2, [pc, #80]	; (800a7a4 <HAL_FLASH_Program_IT+0x94>)
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d105      	bne.n	800a76a <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a75e:	783b      	ldrb	r3, [r7, #0]
 800a760:	4619      	mov	r1, r3
 800a762:	68b8      	ldr	r0, [r7, #8]
 800a764:	f000 fa0c 	bl	800ab80 <FLASH_Program_Byte>
 800a768:	e016      	b.n	800a798 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d105      	bne.n	800a77c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a770:	883b      	ldrh	r3, [r7, #0]
 800a772:	4619      	mov	r1, r3
 800a774:	68b8      	ldr	r0, [r7, #8]
 800a776:	f000 f9df 	bl	800ab38 <FLASH_Program_HalfWord>
 800a77a:	e00d      	b.n	800a798 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d105      	bne.n	800a78e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	4619      	mov	r1, r3
 800a786:	68b8      	ldr	r0, [r7, #8]
 800a788:	f000 f9b4 	bl	800aaf4 <FLASH_Program_Word>
 800a78c:	e004      	b.n	800a798 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 800a78e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a792:	68b8      	ldr	r0, [r7, #8]
 800a794:	f000 f97c 	bl	800aa90 <FLASH_Program_DoubleWord>
  }

  return status;
 800a798:	7dfb      	ldrb	r3, [r7, #23]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3718      	adds	r7, #24
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200009f0 	.word	0x200009f0
 800a7a8:	40023c00 	.word	0x40023c00

0800a7ac <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a7b6:	4b4b      	ldr	r3, [pc, #300]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d020      	beq.n	800a804 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a7c2:	4b49      	ldr	r3, [pc, #292]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d107      	bne.n	800a7dc <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 800a7cc:	4b46      	ldr	r3, [pc, #280]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800a7d2:	4b45      	ldr	r3, [pc, #276]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	60da      	str	r2, [r3, #12]
 800a7da:	e00b      	b.n	800a7f4 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 800a7dc:	4b42      	ldr	r3, [pc, #264]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d103      	bne.n	800a7ee <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 800a7e6:	4b40      	ldr	r3, [pc, #256]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	607b      	str	r3, [r7, #4]
 800a7ec:	e002      	b.n	800a7f4 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800a7ee:	4b3e      	ldr	r3, [pc, #248]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 800a7f4:	f000 f9e6 	bl	800abc4 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f881 	bl	800a900 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a7fe:	4b3a      	ldr	r3, [pc, #232]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a800:	2200      	movs	r2, #0
 800a802:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a804:	4b37      	ldr	r3, [pc, #220]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d04a      	beq.n	800a8a6 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a810:	4b34      	ldr	r3, [pc, #208]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a812:	2201      	movs	r2, #1
 800a814:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800a816:	4b34      	ldr	r3, [pc, #208]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	b2db      	uxtb	r3, r3
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d12d      	bne.n	800a87c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800a820:	4b31      	ldr	r3, [pc, #196]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	3b01      	subs	r3, #1
 800a826:	4a30      	ldr	r2, [pc, #192]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a828:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800a82a:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d015      	beq.n	800a85e <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800a832:	4b2d      	ldr	r3, [pc, #180]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 f857 	bl	800a8ec <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800a83e:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	3301      	adds	r3, #1
 800a844:	4a28      	ldr	r2, [pc, #160]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a846:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 800a848:	4b27      	ldr	r3, [pc, #156]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 800a84e:	4b26      	ldr	r3, [pc, #152]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a850:	7a1b      	ldrb	r3, [r3, #8]
 800a852:	b2db      	uxtb	r3, r3
 800a854:	4619      	mov	r1, r3
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 fb84 	bl	800af64 <FLASH_Erase_Sector>
 800a85c:	e023      	b.n	800a8a6 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 800a85e:	f04f 33ff 	mov.w	r3, #4294967295
 800a862:	607b      	str	r3, [r7, #4]
 800a864:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a86a:	4b1f      	ldr	r3, [pc, #124]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a870:	f000 fcb6 	bl	800b1e0 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f839 	bl	800a8ec <HAL_FLASH_EndOfOperationCallback>
 800a87a:	e014      	b.n	800a8a6 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 800a87c:	4b1a      	ldr	r3, [pc, #104]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b02      	cmp	r3, #2
 800a884:	d107      	bne.n	800a896 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 800a886:	f000 fcab 	bl	800b1e0 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 800a88a:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 f82c 	bl	800a8ec <HAL_FLASH_EndOfOperationCallback>
 800a894:	e004      	b.n	800a8a0 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800a896:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f826 	bl	800a8ec <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800a8a0:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800a8a6:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d114      	bne.n	800a8da <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	4a0b      	ldr	r2, [pc, #44]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8ba:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	4a08      	ldr	r2, [pc, #32]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8c6:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800a8c8:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	4a05      	ldr	r2, [pc, #20]	; (800a8e4 <HAL_FLASH_IRQHandler+0x138>)
 800a8ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a8d2:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800a8d4:	4b04      	ldr	r3, [pc, #16]	; (800a8e8 <HAL_FLASH_IRQHandler+0x13c>)
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	761a      	strb	r2, [r3, #24]
  }
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	40023c00 	.word	0x40023c00
 800a8e8:	200009f0 	.word	0x200009f0

0800a8ec <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800a900:	b480      	push	{r7}
 800a902:	b083      	sub	sp, #12
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a91e:	4b0b      	ldr	r3, [pc, #44]	; (800a94c <HAL_FLASH_Unlock+0x38>)
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	da0b      	bge.n	800a93e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a926:	4b09      	ldr	r3, [pc, #36]	; (800a94c <HAL_FLASH_Unlock+0x38>)
 800a928:	4a09      	ldr	r2, [pc, #36]	; (800a950 <HAL_FLASH_Unlock+0x3c>)
 800a92a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a92c:	4b07      	ldr	r3, [pc, #28]	; (800a94c <HAL_FLASH_Unlock+0x38>)
 800a92e:	4a09      	ldr	r2, [pc, #36]	; (800a954 <HAL_FLASH_Unlock+0x40>)
 800a930:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <HAL_FLASH_Unlock+0x38>)
 800a934:	691b      	ldr	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	da01      	bge.n	800a93e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a93e:	79fb      	ldrb	r3, [r7, #7]
}
 800a940:	4618      	mov	r0, r3
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	40023c00 	.word	0x40023c00
 800a950:	45670123 	.word	0x45670123
 800a954:	cdef89ab 	.word	0xcdef89ab

0800a958 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a958:	b480      	push	{r7}
 800a95a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <HAL_FLASH_Lock+0x1c>)
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	4a04      	ldr	r2, [pc, #16]	; (800a974 <HAL_FLASH_Lock+0x1c>)
 800a962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a966:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	40023c00 	.word	0x40023c00

0800a978 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a978:	b480      	push	{r7}
 800a97a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a97c:	4b09      	ldr	r3, [pc, #36]	; (800a9a4 <HAL_FLASH_OB_Unlock+0x2c>)
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f003 0301 	and.w	r3, r3, #1
 800a984:	2b00      	cmp	r3, #0
 800a986:	d007      	beq.n	800a998 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <HAL_FLASH_OB_Unlock+0x2c>)
 800a98a:	4a07      	ldr	r2, [pc, #28]	; (800a9a8 <HAL_FLASH_OB_Unlock+0x30>)
 800a98c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <HAL_FLASH_OB_Unlock+0x2c>)
 800a990:	4a06      	ldr	r2, [pc, #24]	; (800a9ac <HAL_FLASH_OB_Unlock+0x34>)
 800a992:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a994:	2300      	movs	r3, #0
 800a996:	e000      	b.n	800a99a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	40023c00 	.word	0x40023c00
 800a9a8:	08192a3b 	.word	0x08192a3b
 800a9ac:	4c5d6e7f 	.word	0x4c5d6e7f

0800a9b0 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <HAL_FLASH_OB_Lock+0x1c>)
 800a9b6:	695b      	ldr	r3, [r3, #20]
 800a9b8:	4a04      	ldr	r2, [pc, #16]	; (800a9cc <HAL_FLASH_OB_Lock+0x1c>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr
 800a9cc:	40023c00 	.word	0x40023c00

0800a9d0 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a9d4:	4b07      	ldr	r3, [pc, #28]	; (800a9f4 <HAL_FLASH_OB_Launch+0x24>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	4a06      	ldr	r2, [pc, #24]	; (800a9f4 <HAL_FLASH_OB_Launch+0x24>)
 800a9dc:	f043 0302 	orr.w	r3, r3, #2
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a9e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a9e8:	f000 f812 	bl	800aa10 <FLASH_WaitForLastOperation>
 800a9ec:	4603      	mov	r3, r0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	40023c14 	.word	0x40023c14

0800a9f8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a9f8:	b480      	push	{r7}
 800a9fa:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a9fc:	4b03      	ldr	r3, [pc, #12]	; (800aa0c <HAL_FLASH_GetError+0x14>)
 800a9fe:	69db      	ldr	r3, [r3, #28]
}  
 800aa00:	4618      	mov	r0, r3
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	200009f0 	.word	0x200009f0

0800aa10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aa1c:	4b1a      	ldr	r3, [pc, #104]	; (800aa88 <FLASH_WaitForLastOperation+0x78>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800aa22:	f7fc fabb 	bl	8006f9c <HAL_GetTick>
 800aa26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800aa28:	e010      	b.n	800aa4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d00c      	beq.n	800aa4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d007      	beq.n	800aa48 <FLASH_WaitForLastOperation+0x38>
 800aa38:	f7fc fab0 	bl	8006f9c <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d201      	bcs.n	800aa4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e019      	b.n	800aa80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800aa4c:	4b0f      	ldr	r3, [pc, #60]	; (800aa8c <FLASH_WaitForLastOperation+0x7c>)
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e8      	bne.n	800aa2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800aa58:	4b0c      	ldr	r3, [pc, #48]	; (800aa8c <FLASH_WaitForLastOperation+0x7c>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f003 0301 	and.w	r3, r3, #1
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d002      	beq.n	800aa6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800aa64:	4b09      	ldr	r3, [pc, #36]	; (800aa8c <FLASH_WaitForLastOperation+0x7c>)
 800aa66:	2201      	movs	r2, #1
 800aa68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800aa6a:	4b08      	ldr	r3, [pc, #32]	; (800aa8c <FLASH_WaitForLastOperation+0x7c>)
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d003      	beq.n	800aa7e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800aa76:	f000 f8a5 	bl	800abc4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
  
}  
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	200009f0 	.word	0x200009f0
 800aa8c:	40023c00 	.word	0x40023c00

0800aa90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa9c:	4b14      	ldr	r3, [pc, #80]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aaa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaa6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800aaa8:	4b11      	ldr	r3, [pc, #68]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aaaa:	691b      	ldr	r3, [r3, #16]
 800aaac:	4a10      	ldr	r2, [pc, #64]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aaae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aab2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aab4:	4b0e      	ldr	r3, [pc, #56]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	4a0d      	ldr	r2, [pc, #52]	; (800aaf0 <FLASH_Program_DoubleWord+0x60>)
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800aac6:	f3bf 8f6f 	isb	sy
}
 800aaca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800aacc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aad0:	f04f 0200 	mov.w	r2, #0
 800aad4:	f04f 0300 	mov.w	r3, #0
 800aad8:	000a      	movs	r2, r1
 800aada:	2300      	movs	r3, #0
 800aadc:	68f9      	ldr	r1, [r7, #12]
 800aade:	3104      	adds	r1, #4
 800aae0:	4613      	mov	r3, r2
 800aae2:	600b      	str	r3, [r1, #0]
}
 800aae4:	bf00      	nop
 800aae6:	3714      	adds	r7, #20
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40023c00 	.word	0x40023c00

0800aaf4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aafe:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	4a0c      	ldr	r2, [pc, #48]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ab0a:	4b0a      	ldr	r3, [pc, #40]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	4a09      	ldr	r2, [pc, #36]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab14:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab16:	4b07      	ldr	r3, [pc, #28]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	4a06      	ldr	r2, [pc, #24]	; (800ab34 <FLASH_Program_Word+0x40>)
 800ab1c:	f043 0301 	orr.w	r3, r3, #1
 800ab20:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	683a      	ldr	r2, [r7, #0]
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr
 800ab34:	40023c00 	.word	0x40023c00

0800ab38 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ab44:	4b0d      	ldr	r3, [pc, #52]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	4a0c      	ldr	r2, [pc, #48]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	4a09      	ldr	r2, [pc, #36]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab5c:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	4a06      	ldr	r2, [pc, #24]	; (800ab7c <FLASH_Program_HalfWord+0x44>)
 800ab62:	f043 0301 	orr.w	r3, r3, #1
 800ab66:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	887a      	ldrh	r2, [r7, #2]
 800ab6c:	801a      	strh	r2, [r3, #0]
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	40023c00 	.word	0x40023c00

0800ab80 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	460b      	mov	r3, r1
 800ab8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ab8c:	4b0c      	ldr	r3, [pc, #48]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	4a0b      	ldr	r2, [pc, #44]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800ab92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ab98:	4b09      	ldr	r3, [pc, #36]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800ab9a:	4a09      	ldr	r2, [pc, #36]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aba0:	4b07      	ldr	r3, [pc, #28]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a06      	ldr	r2, [pc, #24]	; (800abc0 <FLASH_Program_Byte+0x40>)
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	78fa      	ldrb	r2, [r7, #3]
 800abb0:	701a      	strb	r2, [r3, #0]
}
 800abb2:	bf00      	nop
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	40023c00 	.word	0x40023c00

0800abc4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800abc4:	b480      	push	{r7}
 800abc6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800abc8:	4b27      	ldr	r3, [pc, #156]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f003 0310 	and.w	r3, r3, #16
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d008      	beq.n	800abe6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800abd4:	4b25      	ldr	r3, [pc, #148]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	f043 0310 	orr.w	r3, r3, #16
 800abdc:	4a23      	ldr	r2, [pc, #140]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800abde:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800abe0:	4b21      	ldr	r3, [pc, #132]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800abe2:	2210      	movs	r2, #16
 800abe4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800abe6:	4b20      	ldr	r3, [pc, #128]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800abe8:	68db      	ldr	r3, [r3, #12]
 800abea:	f003 0320 	and.w	r3, r3, #32
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d008      	beq.n	800ac04 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800abf2:	4b1e      	ldr	r3, [pc, #120]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800abf4:	69db      	ldr	r3, [r3, #28]
 800abf6:	f043 0308 	orr.w	r3, r3, #8
 800abfa:	4a1c      	ldr	r2, [pc, #112]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800abfc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800abfe:	4b1a      	ldr	r3, [pc, #104]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac00:	2220      	movs	r2, #32
 800ac02:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ac04:	4b18      	ldr	r3, [pc, #96]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d008      	beq.n	800ac22 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ac10:	4b16      	ldr	r3, [pc, #88]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac12:	69db      	ldr	r3, [r3, #28]
 800ac14:	f043 0304 	orr.w	r3, r3, #4
 800ac18:	4a14      	ldr	r2, [pc, #80]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ac1c:	4b12      	ldr	r3, [pc, #72]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac1e:	2240      	movs	r2, #64	; 0x40
 800ac20:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ac22:	4b11      	ldr	r3, [pc, #68]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d008      	beq.n	800ac40 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	f043 0302 	orr.w	r3, r3, #2
 800ac36:	4a0d      	ldr	r2, [pc, #52]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac38:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ac3a:	4b0b      	ldr	r3, [pc, #44]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac3c:	2280      	movs	r2, #128	; 0x80
 800ac3e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ac40:	4b09      	ldr	r3, [pc, #36]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0302 	and.w	r3, r3, #2
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d008      	beq.n	800ac5e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ac4c:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	f043 0320 	orr.w	r3, r3, #32
 800ac54:	4a05      	ldr	r2, [pc, #20]	; (800ac6c <FLASH_SetErrorCode+0xa8>)
 800ac56:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ac58:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <FLASH_SetErrorCode+0xa4>)
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	60da      	str	r2, [r3, #12]
  }
}
 800ac5e:	bf00      	nop
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr
 800ac68:	40023c00 	.word	0x40023c00
 800ac6c:	200009f0 	.word	0x200009f0

0800ac70 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ac82:	4b31      	ldr	r3, [pc, #196]	; (800ad48 <HAL_FLASHEx_Erase+0xd8>)
 800ac84:	7e1b      	ldrb	r3, [r3, #24]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d101      	bne.n	800ac8e <HAL_FLASHEx_Erase+0x1e>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	e058      	b.n	800ad40 <HAL_FLASHEx_Erase+0xd0>
 800ac8e:	4b2e      	ldr	r3, [pc, #184]	; (800ad48 <HAL_FLASHEx_Erase+0xd8>)
 800ac90:	2201      	movs	r2, #1
 800ac92:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac94:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac98:	f7ff feba 	bl	800aa10 <FLASH_WaitForLastOperation>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d148      	bne.n	800ad38 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	f04f 32ff 	mov.w	r2, #4294967295
 800acac:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d115      	bne.n	800ace2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	b2da      	uxtb	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4619      	mov	r1, r3
 800acc2:	4610      	mov	r0, r2
 800acc4:	f000 f92b 	bl	800af1e <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800acc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800accc:	f7ff fea0 	bl	800aa10 <FLASH_WaitForLastOperation>
 800acd0:	4603      	mov	r3, r0
 800acd2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800acd4:	4b1d      	ldr	r3, [pc, #116]	; (800ad4c <HAL_FLASHEx_Erase+0xdc>)
 800acd6:	691b      	ldr	r3, [r3, #16]
 800acd8:	4a1c      	ldr	r2, [pc, #112]	; (800ad4c <HAL_FLASHEx_Erase+0xdc>)
 800acda:	f023 0304 	bic.w	r3, r3, #4
 800acde:	6113      	str	r3, [r2, #16]
 800ace0:	e028      	b.n	800ad34 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	60bb      	str	r3, [r7, #8]
 800ace8:	e01c      	b.n	800ad24 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	691b      	ldr	r3, [r3, #16]
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	68b8      	ldr	r0, [r7, #8]
 800acf4:	f000 f936 	bl	800af64 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800acf8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800acfc:	f7ff fe88 	bl	800aa10 <FLASH_WaitForLastOperation>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ad04:	4b11      	ldr	r3, [pc, #68]	; (800ad4c <HAL_FLASHEx_Erase+0xdc>)
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	4a10      	ldr	r2, [pc, #64]	; (800ad4c <HAL_FLASHEx_Erase+0xdc>)
 800ad0a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ad0e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d003      	beq.n	800ad1e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	601a      	str	r2, [r3, #0]
          break;
 800ad1c:	e00a      	b.n	800ad34 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	3301      	adds	r3, #1
 800ad22:	60bb      	str	r3, [r7, #8]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	68da      	ldr	r2, [r3, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d3da      	bcc.n	800acea <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800ad34:	f000 fa54 	bl	800b1e0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ad38:	4b03      	ldr	r3, [pc, #12]	; (800ad48 <HAL_FLASHEx_Erase+0xd8>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	761a      	strb	r2, [r3, #24]

  return status;
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	200009f0 	.word	0x200009f0
 800ad4c:	40023c00 	.word	0x40023c00

0800ad50 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad5c:	4b25      	ldr	r3, [pc, #148]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad5e:	7e1b      	ldrb	r3, [r3, #24]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_FLASHEx_Erase_IT+0x18>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e040      	b.n	800adea <HAL_FLASHEx_Erase_IT+0x9a>
 800ad68:	4b22      	ldr	r3, [pc, #136]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800ad6e:	4b22      	ldr	r3, [pc, #136]	; (800adf8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	4a21      	ldr	r2, [pc, #132]	; (800adf8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad78:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800ad7a:	4b1f      	ldr	r3, [pc, #124]	; (800adf8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	4a1e      	ldr	r2, [pc, #120]	; (800adf8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ad84:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800ad86:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <HAL_FLASHEx_Erase_IT+0xa8>)
 800ad88:	22f3      	movs	r2, #243	; 0xf3
 800ad8a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d110      	bne.n	800adb6 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800ad94:	4b17      	ldr	r3, [pc, #92]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800ad96:	2202      	movs	r2, #2
 800ad98:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	4a15      	ldr	r2, [pc, #84]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800ada0:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	b2da      	uxtb	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	4619      	mov	r1, r3
 800adae:	4610      	mov	r0, r2
 800adb0:	f000 f8b5 	bl	800af1e <FLASH_MassErase>
 800adb4:	e018      	b.n	800ade8 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800adb6:	4b0f      	ldr	r3, [pc, #60]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800adb8:	2201      	movs	r2, #1
 800adba:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	4a0c      	ldr	r2, [pc, #48]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800adc2:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	4a0a      	ldr	r2, [pc, #40]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800adca:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	b2da      	uxtb	r2, r3
 800add2:	4b08      	ldr	r3, [pc, #32]	; (800adf4 <HAL_FLASHEx_Erase_IT+0xa4>)
 800add4:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689a      	ldr	r2, [r3, #8]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	4619      	mov	r1, r3
 800ade2:	4610      	mov	r0, r2
 800ade4:	f000 f8be 	bl	800af64 <FLASH_Erase_Sector>
  }

  return status;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	200009f0 	.word	0x200009f0
 800adf8:	40023c00 	.word	0x40023c00

0800adfc <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae08:	4b32      	ldr	r3, [pc, #200]	; (800aed4 <HAL_FLASHEx_OBProgram+0xd8>)
 800ae0a:	7e1b      	ldrb	r3, [r3, #24]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d101      	bne.n	800ae14 <HAL_FLASHEx_OBProgram+0x18>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e05b      	b.n	800aecc <HAL_FLASHEx_OBProgram+0xd0>
 800ae14:	4b2f      	ldr	r3, [pc, #188]	; (800aed4 <HAL_FLASHEx_OBProgram+0xd8>)
 800ae16:	2201      	movs	r2, #1
 800ae18:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d018      	beq.n	800ae58 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685b      	ldr	r3, [r3, #4]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d10a      	bne.n	800ae44 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	689a      	ldr	r2, [r3, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	4619      	mov	r1, r3
 800ae38:	4610      	mov	r0, r2
 800ae3a:	f000 f8db 	bl	800aff4 <FLASH_OB_EnableWRP>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73fb      	strb	r3, [r7, #15]
 800ae42:	e009      	b.n	800ae58 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689a      	ldr	r2, [r3, #8]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 f8f2 	bl	800b038 <FLASH_OB_DisableWRP>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f000 f904 	bl	800b078 <FLASH_OB_RDP_LevelConfig>
 800ae70:	4603      	mov	r3, r0
 800ae72:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d013      	beq.n	800aea8 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	7e1b      	ldrb	r3, [r3, #24]
 800ae84:	f003 0320 	and.w	r3, r3, #32
 800ae88:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ae8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae92:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800ae98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f000 f904 	bl	800b0ac <FLASH_OB_UserConfig>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d007      	beq.n	800aec4 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	4618      	mov	r0, r3
 800aebc:	f000 f926 	bl	800b10c <FLASH_OB_BOR_LevelConfig>
 800aec0:	4603      	mov	r3, r0
 800aec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aec4:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <HAL_FLASHEx_OBProgram+0xd8>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	761a      	strb	r2, [r3, #24]

  return status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	200009f0 	.word	0x200009f0

0800aed8 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b082      	sub	sp, #8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	220f      	movs	r2, #15
 800aee4:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800aee6:	f000 f93f 	bl	800b168 <FLASH_OB_GetWRP>
 800aeea:	4603      	mov	r3, r0
 800aeec:	461a      	mov	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800aef2:	f000 f945 	bl	800b180 <FLASH_OB_GetRDP>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800aefe:	f000 f923 	bl	800b148 <FLASH_OB_GetUser>
 800af02:	4603      	mov	r3, r0
 800af04:	461a      	mov	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800af0a:	f000 f959 	bl	800b1c0 <FLASH_OB_GetBOR>
 800af0e:	4603      	mov	r3, r0
 800af10:	461a      	mov	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	615a      	str	r2, [r3, #20]
}
 800af16:	bf00      	nop
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	4603      	mov	r3, r0
 800af26:	6039      	str	r1, [r7, #0]
 800af28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af2a:	4b0d      	ldr	r3, [pc, #52]	; (800af60 <FLASH_MassErase+0x42>)
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	4a0c      	ldr	r2, [pc, #48]	; (800af60 <FLASH_MassErase+0x42>)
 800af30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <FLASH_MassErase+0x42>)
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	4a09      	ldr	r2, [pc, #36]	; (800af60 <FLASH_MassErase+0x42>)
 800af3c:	f043 0304 	orr.w	r3, r3, #4
 800af40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800af42:	4b07      	ldr	r3, [pc, #28]	; (800af60 <FLASH_MassErase+0x42>)
 800af44:	691a      	ldr	r2, [r3, #16]
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	021b      	lsls	r3, r3, #8
 800af4a:	4313      	orrs	r3, r2
 800af4c:	4a04      	ldr	r2, [pc, #16]	; (800af60 <FLASH_MassErase+0x42>)
 800af4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af52:	6113      	str	r3, [r2, #16]
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr
 800af60:	40023c00 	.word	0x40023c00

0800af64 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800af64:	b480      	push	{r7}
 800af66:	b085      	sub	sp, #20
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	460b      	mov	r3, r1
 800af6e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800af70:	2300      	movs	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800af74:	78fb      	ldrb	r3, [r7, #3]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d102      	bne.n	800af80 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800af7a:	2300      	movs	r3, #0
 800af7c:	60fb      	str	r3, [r7, #12]
 800af7e:	e010      	b.n	800afa2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800af80:	78fb      	ldrb	r3, [r7, #3]
 800af82:	2b01      	cmp	r3, #1
 800af84:	d103      	bne.n	800af8e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800af86:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af8a:	60fb      	str	r3, [r7, #12]
 800af8c:	e009      	b.n	800afa2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af8e:	78fb      	ldrb	r3, [r7, #3]
 800af90:	2b02      	cmp	r3, #2
 800af92:	d103      	bne.n	800af9c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800af94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af98:	60fb      	str	r3, [r7, #12]
 800af9a:	e002      	b.n	800afa2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800af9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afa0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afa2:	4b13      	ldr	r3, [pc, #76]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	4a12      	ldr	r2, [pc, #72]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800afae:	4b10      	ldr	r3, [pc, #64]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afb0:	691a      	ldr	r2, [r3, #16]
 800afb2:	490f      	ldr	r1, [pc, #60]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800afba:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	4a0c      	ldr	r2, [pc, #48]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afc0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800afc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800afc6:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afc8:	691a      	ldr	r2, [r3, #16]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	00db      	lsls	r3, r3, #3
 800afce:	4313      	orrs	r3, r2
 800afd0:	4a07      	ldr	r2, [pc, #28]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afd2:	f043 0302 	orr.w	r3, r3, #2
 800afd6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800afd8:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	4a04      	ldr	r2, [pc, #16]	; (800aff0 <FLASH_Erase_Sector+0x8c>)
 800afde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe2:	6113      	str	r3, [r2, #16]
}
 800afe4:	bf00      	nop
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr
 800aff0:	40023c00 	.word	0x40023c00

0800aff4 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b002:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b006:	f7ff fd03 	bl	800aa10 <FLASH_WaitForLastOperation>
 800b00a:	4603      	mov	r3, r0
 800b00c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10a      	bne.n	800b02a <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800b014:	4b07      	ldr	r3, [pc, #28]	; (800b034 <FLASH_OB_EnableWRP+0x40>)
 800b016:	881b      	ldrh	r3, [r3, #0]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	43db      	mvns	r3, r3
 800b020:	b29b      	uxth	r3, r3
 800b022:	4904      	ldr	r1, [pc, #16]	; (800b034 <FLASH_OB_EnableWRP+0x40>)
 800b024:	4013      	ands	r3, r2
 800b026:	b29b      	uxth	r3, r3
 800b028:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b02a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	40023c16 	.word	0x40023c16

0800b038 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b046:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b04a:	f7ff fce1 	bl	800aa10 <FLASH_WaitForLastOperation>
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d108      	bne.n	800b06a <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800b058:	4b06      	ldr	r3, [pc, #24]	; (800b074 <FLASH_OB_DisableWRP+0x3c>)
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	b29b      	uxth	r3, r3
 800b062:	4904      	ldr	r1, [pc, #16]	; (800b074 <FLASH_OB_DisableWRP+0x3c>)
 800b064:	4313      	orrs	r3, r2
 800b066:	b29b      	uxth	r3, r3
 800b068:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800b06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	40023c16 	.word	0x40023c16

0800b078 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	4603      	mov	r3, r0
 800b080:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b086:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b08a:	f7ff fcc1 	bl	800aa10 <FLASH_WaitForLastOperation>
 800b08e:	4603      	mov	r3, r0
 800b090:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800b092:	7bfb      	ldrb	r3, [r7, #15]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d102      	bne.n	800b09e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800b098:	4a03      	ldr	r2, [pc, #12]	; (800b0a8 <FLASH_OB_RDP_LevelConfig+0x30>)
 800b09a:	79fb      	ldrb	r3, [r7, #7]
 800b09c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3710      	adds	r7, #16
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	40023c15 	.word	0x40023c15

0800b0ac <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	71fb      	strb	r3, [r7, #7]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	71bb      	strb	r3, [r7, #6]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800b0be:	23ff      	movs	r3, #255	; 0xff
 800b0c0:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b0c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b0ca:	f7ff fca1 	bl	800aa10 <FLASH_WaitForLastOperation>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800b0d2:	7bbb      	ldrb	r3, [r7, #14]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d111      	bne.n	800b0fc <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800b0d8:	4b0b      	ldr	r3, [pc, #44]	; (800b108 <FLASH_OB_UserConfig+0x5c>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	b2db      	uxtb	r3, r3
 800b0de:	f003 031f 	and.w	r3, r3, #31
 800b0e2:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800b0e4:	79ba      	ldrb	r2, [r7, #6]
 800b0e6:	7bfb      	ldrb	r3, [r7, #15]
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	797b      	ldrb	r3, [r7, #5]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	4905      	ldr	r1, [pc, #20]	; (800b108 <FLASH_OB_UserConfig+0x5c>)
 800b0f4:	79fb      	ldrb	r3, [r7, #7]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800b0fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	40023c14 	.word	0x40023c14

0800b10c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4a09      	ldr	r2, [pc, #36]	; (800b144 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b11e:	f023 030c 	bic.w	r3, r3, #12
 800b122:	b2db      	uxtb	r3, r3
 800b124:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800b126:	4b07      	ldr	r3, [pc, #28]	; (800b144 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b128:	781b      	ldrb	r3, [r3, #0]
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	4905      	ldr	r1, [pc, #20]	; (800b144 <FLASH_OB_BOR_LevelConfig+0x38>)
 800b12e:	79fb      	ldrb	r3, [r7, #7]
 800b130:	4313      	orrs	r3, r2
 800b132:	b2db      	uxtb	r3, r3
 800b134:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800b136:	2300      	movs	r3, #0

}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	40023c14 	.word	0x40023c14

0800b148 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800b148:	b480      	push	{r7}
 800b14a:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800b14c:	4b05      	ldr	r3, [pc, #20]	; (800b164 <FLASH_OB_GetUser+0x1c>)
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	f023 031f 	bic.w	r3, r3, #31
 800b156:	b2db      	uxtb	r3, r3
}
 800b158:	4618      	mov	r0, r3
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr
 800b162:	bf00      	nop
 800b164:	40023c00 	.word	0x40023c00

0800b168 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800b168:	b480      	push	{r7}
 800b16a:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800b16c:	4b03      	ldr	r3, [pc, #12]	; (800b17c <FLASH_OB_GetWRP+0x14>)
 800b16e:	881b      	ldrh	r3, [r3, #0]
 800b170:	b29b      	uxth	r3, r3
}
 800b172:	4618      	mov	r0, r3
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	40023c16 	.word	0x40023c16

0800b180 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800b186:	23aa      	movs	r3, #170	; 0xaa
 800b188:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800b18a:	4b0c      	ldr	r3, [pc, #48]	; (800b1bc <FLASH_OB_GetRDP+0x3c>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2bcc      	cmp	r3, #204	; 0xcc
 800b192:	d102      	bne.n	800b19a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800b194:	23cc      	movs	r3, #204	; 0xcc
 800b196:	71fb      	strb	r3, [r7, #7]
 800b198:	e009      	b.n	800b1ae <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800b19a:	4b08      	ldr	r3, [pc, #32]	; (800b1bc <FLASH_OB_GetRDP+0x3c>)
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2baa      	cmp	r3, #170	; 0xaa
 800b1a2:	d102      	bne.n	800b1aa <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800b1a4:	23aa      	movs	r3, #170	; 0xaa
 800b1a6:	71fb      	strb	r3, [r7, #7]
 800b1a8:	e001      	b.n	800b1ae <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800b1aa:	2355      	movs	r3, #85	; 0x55
 800b1ac:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800b1ae:	79fb      	ldrb	r3, [r7, #7]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	370c      	adds	r7, #12
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	40023c15 	.word	0x40023c15

0800b1c0 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <FLASH_OB_GetBOR+0x1c>)
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	f003 030c 	and.w	r3, r3, #12
 800b1ce:	b2db      	uxtb	r3, r3
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	40023c14 	.word	0x40023c14

0800b1e0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800b1e4:	4b20      	ldr	r3, [pc, #128]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d017      	beq.n	800b220 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b1f0:	4b1d      	ldr	r3, [pc, #116]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a1c      	ldr	r2, [pc, #112]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b1f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1fa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b1fc:	4b1a      	ldr	r3, [pc, #104]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a19      	ldr	r2, [pc, #100]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b202:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	4b17      	ldr	r3, [pc, #92]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a16      	ldr	r2, [pc, #88]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b20e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b212:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b214:	4b14      	ldr	r3, [pc, #80]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a13      	ldr	r2, [pc, #76]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b21a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b21e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b220:	4b11      	ldr	r3, [pc, #68]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d017      	beq.n	800b25c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a0d      	ldr	r2, [pc, #52]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b236:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b238:	4b0b      	ldr	r3, [pc, #44]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a0a      	ldr	r2, [pc, #40]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b23e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b242:	6013      	str	r3, [r2, #0]
 800b244:	4b08      	ldr	r3, [pc, #32]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a07      	ldr	r2, [pc, #28]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b24a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b24e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a04      	ldr	r2, [pc, #16]	; (800b268 <FLASH_FlushCaches+0x88>)
 800b256:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b25a:	6013      	str	r3, [r2, #0]
  }
}
 800b25c:	bf00      	nop
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	40023c00 	.word	0x40023c00

0800b26c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b089      	sub	sp, #36	; 0x24
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b276:	2300      	movs	r3, #0
 800b278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b27a:	2300      	movs	r3, #0
 800b27c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b27e:	2300      	movs	r3, #0
 800b280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b282:	2300      	movs	r3, #0
 800b284:	61fb      	str	r3, [r7, #28]
 800b286:	e16b      	b.n	800b560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b288:	2201      	movs	r2, #1
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	fa02 f303 	lsl.w	r3, r2, r3
 800b290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4013      	ands	r3, r2
 800b29a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b29c:	693a      	ldr	r2, [r7, #16]
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	f040 815a 	bne.w	800b55a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d005      	beq.n	800b2be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d130      	bne.n	800b320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	2203      	movs	r2, #3
 800b2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ce:	43db      	mvns	r3, r3
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	68da      	ldr	r2, [r3, #12]
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	005b      	lsls	r3, r3, #1
 800b2de:	fa02 f303 	lsl.w	r3, r2, r3
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b2fc:	43db      	mvns	r3, r3
 800b2fe:	69ba      	ldr	r2, [r7, #24]
 800b300:	4013      	ands	r3, r2
 800b302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	091b      	lsrs	r3, r3, #4
 800b30a:	f003 0201 	and.w	r2, r3, #1
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	fa02 f303 	lsl.w	r3, r2, r3
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	4313      	orrs	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	69ba      	ldr	r2, [r7, #24]
 800b31e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f003 0303 	and.w	r3, r3, #3
 800b328:	2b03      	cmp	r3, #3
 800b32a:	d017      	beq.n	800b35c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b332:	69fb      	ldr	r3, [r7, #28]
 800b334:	005b      	lsls	r3, r3, #1
 800b336:	2203      	movs	r2, #3
 800b338:	fa02 f303 	lsl.w	r3, r2, r3
 800b33c:	43db      	mvns	r3, r3
 800b33e:	69ba      	ldr	r2, [r7, #24]
 800b340:	4013      	ands	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	689a      	ldr	r2, [r3, #8]
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	fa02 f303 	lsl.w	r3, r2, r3
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	4313      	orrs	r3, r2
 800b354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	f003 0303 	and.w	r3, r3, #3
 800b364:	2b02      	cmp	r3, #2
 800b366:	d123      	bne.n	800b3b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	08da      	lsrs	r2, r3, #3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3208      	adds	r2, #8
 800b370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	f003 0307 	and.w	r3, r3, #7
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	220f      	movs	r2, #15
 800b380:	fa02 f303 	lsl.w	r3, r2, r3
 800b384:	43db      	mvns	r3, r3
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	4013      	ands	r3, r2
 800b38a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	691a      	ldr	r2, [r3, #16]
 800b390:	69fb      	ldr	r3, [r7, #28]
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	fa02 f303 	lsl.w	r3, r2, r3
 800b39c:	69ba      	ldr	r2, [r7, #24]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	08da      	lsrs	r2, r3, #3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	3208      	adds	r2, #8
 800b3aa:	69b9      	ldr	r1, [r7, #24]
 800b3ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	2203      	movs	r2, #3
 800b3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	69ba      	ldr	r2, [r7, #24]
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	f003 0203 	and.w	r2, r3, #3
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	005b      	lsls	r3, r3, #1
 800b3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	69ba      	ldr	r2, [r7, #24]
 800b3e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	f000 80b4 	beq.w	800b55a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
 800b3f6:	4b60      	ldr	r3, [pc, #384]	; (800b578 <HAL_GPIO_Init+0x30c>)
 800b3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3fa:	4a5f      	ldr	r2, [pc, #380]	; (800b578 <HAL_GPIO_Init+0x30c>)
 800b3fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b400:	6453      	str	r3, [r2, #68]	; 0x44
 800b402:	4b5d      	ldr	r3, [pc, #372]	; (800b578 <HAL_GPIO_Init+0x30c>)
 800b404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b40a:	60fb      	str	r3, [r7, #12]
 800b40c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b40e:	4a5b      	ldr	r2, [pc, #364]	; (800b57c <HAL_GPIO_Init+0x310>)
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	089b      	lsrs	r3, r3, #2
 800b414:	3302      	adds	r3, #2
 800b416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b41a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	f003 0303 	and.w	r3, r3, #3
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	220f      	movs	r2, #15
 800b426:	fa02 f303 	lsl.w	r3, r2, r3
 800b42a:	43db      	mvns	r3, r3
 800b42c:	69ba      	ldr	r2, [r7, #24]
 800b42e:	4013      	ands	r3, r2
 800b430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a52      	ldr	r2, [pc, #328]	; (800b580 <HAL_GPIO_Init+0x314>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d02b      	beq.n	800b492 <HAL_GPIO_Init+0x226>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a51      	ldr	r2, [pc, #324]	; (800b584 <HAL_GPIO_Init+0x318>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d025      	beq.n	800b48e <HAL_GPIO_Init+0x222>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a50      	ldr	r2, [pc, #320]	; (800b588 <HAL_GPIO_Init+0x31c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d01f      	beq.n	800b48a <HAL_GPIO_Init+0x21e>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a4f      	ldr	r2, [pc, #316]	; (800b58c <HAL_GPIO_Init+0x320>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d019      	beq.n	800b486 <HAL_GPIO_Init+0x21a>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a4e      	ldr	r2, [pc, #312]	; (800b590 <HAL_GPIO_Init+0x324>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d013      	beq.n	800b482 <HAL_GPIO_Init+0x216>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a4d      	ldr	r2, [pc, #308]	; (800b594 <HAL_GPIO_Init+0x328>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d00d      	beq.n	800b47e <HAL_GPIO_Init+0x212>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a4c      	ldr	r2, [pc, #304]	; (800b598 <HAL_GPIO_Init+0x32c>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d007      	beq.n	800b47a <HAL_GPIO_Init+0x20e>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a4b      	ldr	r2, [pc, #300]	; (800b59c <HAL_GPIO_Init+0x330>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d101      	bne.n	800b476 <HAL_GPIO_Init+0x20a>
 800b472:	2307      	movs	r3, #7
 800b474:	e00e      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b476:	2308      	movs	r3, #8
 800b478:	e00c      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b47a:	2306      	movs	r3, #6
 800b47c:	e00a      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b47e:	2305      	movs	r3, #5
 800b480:	e008      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b482:	2304      	movs	r3, #4
 800b484:	e006      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b486:	2303      	movs	r3, #3
 800b488:	e004      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b48a:	2302      	movs	r3, #2
 800b48c:	e002      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b48e:	2301      	movs	r3, #1
 800b490:	e000      	b.n	800b494 <HAL_GPIO_Init+0x228>
 800b492:	2300      	movs	r3, #0
 800b494:	69fa      	ldr	r2, [r7, #28]
 800b496:	f002 0203 	and.w	r2, r2, #3
 800b49a:	0092      	lsls	r2, r2, #2
 800b49c:	4093      	lsls	r3, r2
 800b49e:	69ba      	ldr	r2, [r7, #24]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b4a4:	4935      	ldr	r1, [pc, #212]	; (800b57c <HAL_GPIO_Init+0x310>)
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	089b      	lsrs	r3, r3, #2
 800b4aa:	3302      	adds	r3, #2
 800b4ac:	69ba      	ldr	r2, [r7, #24]
 800b4ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b4b2:	4b3b      	ldr	r3, [pc, #236]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	43db      	mvns	r3, r3
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	4013      	ands	r3, r2
 800b4c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d003      	beq.n	800b4d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b4ce:	69ba      	ldr	r2, [r7, #24]
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b4d6:	4a32      	ldr	r2, [pc, #200]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b4dc:	4b30      	ldr	r3, [pc, #192]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	43db      	mvns	r3, r3
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	4013      	ands	r3, r2
 800b4ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b500:	4a27      	ldr	r2, [pc, #156]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b506:	4b26      	ldr	r3, [pc, #152]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	43db      	mvns	r3, r3
 800b510:	69ba      	ldr	r2, [r7, #24]
 800b512:	4013      	ands	r3, r2
 800b514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b52a:	4a1d      	ldr	r2, [pc, #116]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b52c:	69bb      	ldr	r3, [r7, #24]
 800b52e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b530:	4b1b      	ldr	r3, [pc, #108]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	43db      	mvns	r3, r3
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4013      	ands	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	4313      	orrs	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b554:	4a12      	ldr	r2, [pc, #72]	; (800b5a0 <HAL_GPIO_Init+0x334>)
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	3301      	adds	r3, #1
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	2b0f      	cmp	r3, #15
 800b564:	f67f ae90 	bls.w	800b288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b568:	bf00      	nop
 800b56a:	bf00      	nop
 800b56c:	3724      	adds	r7, #36	; 0x24
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr
 800b576:	bf00      	nop
 800b578:	40023800 	.word	0x40023800
 800b57c:	40013800 	.word	0x40013800
 800b580:	40020000 	.word	0x40020000
 800b584:	40020400 	.word	0x40020400
 800b588:	40020800 	.word	0x40020800
 800b58c:	40020c00 	.word	0x40020c00
 800b590:	40021000 	.word	0x40021000
 800b594:	40021400 	.word	0x40021400
 800b598:	40021800 	.word	0x40021800
 800b59c:	40021c00 	.word	0x40021c00
 800b5a0:	40013c00 	.word	0x40013c00

0800b5a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b087      	sub	sp, #28
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	e0cd      	b.n	800b75c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	f040 80bd 	bne.w	800b756 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b5dc:	4a65      	ldr	r2, [pc, #404]	; (800b774 <HAL_GPIO_DeInit+0x1d0>)
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	089b      	lsrs	r3, r3, #2
 800b5e2:	3302      	adds	r3, #2
 800b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f003 0303 	and.w	r3, r3, #3
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	220f      	movs	r2, #15
 800b5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	4a5d      	ldr	r2, [pc, #372]	; (800b778 <HAL_GPIO_DeInit+0x1d4>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d02b      	beq.n	800b65e <HAL_GPIO_DeInit+0xba>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	4a5c      	ldr	r2, [pc, #368]	; (800b77c <HAL_GPIO_DeInit+0x1d8>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d025      	beq.n	800b65a <HAL_GPIO_DeInit+0xb6>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	4a5b      	ldr	r2, [pc, #364]	; (800b780 <HAL_GPIO_DeInit+0x1dc>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d01f      	beq.n	800b656 <HAL_GPIO_DeInit+0xb2>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	4a5a      	ldr	r2, [pc, #360]	; (800b784 <HAL_GPIO_DeInit+0x1e0>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d019      	beq.n	800b652 <HAL_GPIO_DeInit+0xae>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a59      	ldr	r2, [pc, #356]	; (800b788 <HAL_GPIO_DeInit+0x1e4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d013      	beq.n	800b64e <HAL_GPIO_DeInit+0xaa>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a58      	ldr	r2, [pc, #352]	; (800b78c <HAL_GPIO_DeInit+0x1e8>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d00d      	beq.n	800b64a <HAL_GPIO_DeInit+0xa6>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a57      	ldr	r2, [pc, #348]	; (800b790 <HAL_GPIO_DeInit+0x1ec>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d007      	beq.n	800b646 <HAL_GPIO_DeInit+0xa2>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a56      	ldr	r2, [pc, #344]	; (800b794 <HAL_GPIO_DeInit+0x1f0>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d101      	bne.n	800b642 <HAL_GPIO_DeInit+0x9e>
 800b63e:	2307      	movs	r3, #7
 800b640:	e00e      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b642:	2308      	movs	r3, #8
 800b644:	e00c      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b646:	2306      	movs	r3, #6
 800b648:	e00a      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b64a:	2305      	movs	r3, #5
 800b64c:	e008      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b64e:	2304      	movs	r3, #4
 800b650:	e006      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b652:	2303      	movs	r3, #3
 800b654:	e004      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b656:	2302      	movs	r3, #2
 800b658:	e002      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b65a:	2301      	movs	r3, #1
 800b65c:	e000      	b.n	800b660 <HAL_GPIO_DeInit+0xbc>
 800b65e:	2300      	movs	r3, #0
 800b660:	697a      	ldr	r2, [r7, #20]
 800b662:	f002 0203 	and.w	r2, r2, #3
 800b666:	0092      	lsls	r2, r2, #2
 800b668:	4093      	lsls	r3, r2
 800b66a:	68ba      	ldr	r2, [r7, #8]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d132      	bne.n	800b6d6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b670:	4b49      	ldr	r3, [pc, #292]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	43db      	mvns	r3, r3
 800b678:	4947      	ldr	r1, [pc, #284]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b67a:	4013      	ands	r3, r2
 800b67c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b67e:	4b46      	ldr	r3, [pc, #280]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b680:	685a      	ldr	r2, [r3, #4]
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	43db      	mvns	r3, r3
 800b686:	4944      	ldr	r1, [pc, #272]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b688:	4013      	ands	r3, r2
 800b68a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b68c:	4b42      	ldr	r3, [pc, #264]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b68e:	689a      	ldr	r2, [r3, #8]
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	43db      	mvns	r3, r3
 800b694:	4940      	ldr	r1, [pc, #256]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b696:	4013      	ands	r3, r2
 800b698:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b69a:	4b3f      	ldr	r3, [pc, #252]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b69c:	68da      	ldr	r2, [r3, #12]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	43db      	mvns	r3, r3
 800b6a2:	493d      	ldr	r1, [pc, #244]	; (800b798 <HAL_GPIO_DeInit+0x1f4>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	f003 0303 	and.w	r3, r3, #3
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	220f      	movs	r2, #15
 800b6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b6b8:	4a2e      	ldr	r2, [pc, #184]	; (800b774 <HAL_GPIO_DeInit+0x1d0>)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	089b      	lsrs	r3, r3, #2
 800b6be:	3302      	adds	r3, #2
 800b6c0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	43da      	mvns	r2, r3
 800b6c8:	482a      	ldr	r0, [pc, #168]	; (800b774 <HAL_GPIO_DeInit+0x1d0>)
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	089b      	lsrs	r3, r3, #2
 800b6ce:	400a      	ands	r2, r1
 800b6d0:	3302      	adds	r3, #2
 800b6d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	2103      	movs	r1, #3
 800b6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6e4:	43db      	mvns	r3, r3
 800b6e6:	401a      	ands	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	08da      	lsrs	r2, r3, #3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	3208      	adds	r2, #8
 800b6f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	f003 0307 	and.w	r3, r3, #7
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	220f      	movs	r2, #15
 800b702:	fa02 f303 	lsl.w	r3, r2, r3
 800b706:	43db      	mvns	r3, r3
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	08d2      	lsrs	r2, r2, #3
 800b70c:	4019      	ands	r1, r3
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	3208      	adds	r2, #8
 800b712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	005b      	lsls	r3, r3, #1
 800b71e:	2103      	movs	r1, #3
 800b720:	fa01 f303 	lsl.w	r3, r1, r3
 800b724:	43db      	mvns	r3, r3
 800b726:	401a      	ands	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	2101      	movs	r1, #1
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	fa01 f303 	lsl.w	r3, r1, r3
 800b738:	43db      	mvns	r3, r3
 800b73a:	401a      	ands	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	689a      	ldr	r2, [r3, #8]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	2103      	movs	r1, #3
 800b74a:	fa01 f303 	lsl.w	r3, r1, r3
 800b74e:	43db      	mvns	r3, r3
 800b750:	401a      	ands	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	3301      	adds	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	2b0f      	cmp	r3, #15
 800b760:	f67f af2e 	bls.w	800b5c0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b764:	bf00      	nop
 800b766:	bf00      	nop
 800b768:	371c      	adds	r7, #28
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	40013800 	.word	0x40013800
 800b778:	40020000 	.word	0x40020000
 800b77c:	40020400 	.word	0x40020400
 800b780:	40020800 	.word	0x40020800
 800b784:	40020c00 	.word	0x40020c00
 800b788:	40021000 	.word	0x40021000
 800b78c:	40021400 	.word	0x40021400
 800b790:	40021800 	.word	0x40021800
 800b794:	40021c00 	.word	0x40021c00
 800b798:	40013c00 	.word	0x40013c00

0800b79c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	691a      	ldr	r2, [r3, #16]
 800b7ac:	887b      	ldrh	r3, [r7, #2]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	73fb      	strb	r3, [r7, #15]
 800b7b8:	e001      	b.n	800b7be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3714      	adds	r7, #20
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	807b      	strh	r3, [r7, #2]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b7dc:	787b      	ldrb	r3, [r7, #1]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b7e2:	887a      	ldrh	r2, [r7, #2]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b7e8:	e003      	b.n	800b7f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b7ea:	887b      	ldrh	r3, [r7, #2]
 800b7ec:	041a      	lsls	r2, r3, #16
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	619a      	str	r2, [r3, #24]
}
 800b7f2:	bf00      	nop
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
 800b806:	460b      	mov	r3, r1
 800b808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	695b      	ldr	r3, [r3, #20]
 800b80e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b810:	887a      	ldrh	r2, [r7, #2]
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	4013      	ands	r3, r2
 800b816:	041a      	lsls	r2, r3, #16
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	43d9      	mvns	r1, r3
 800b81c:	887b      	ldrh	r3, [r7, #2]
 800b81e:	400b      	ands	r3, r1
 800b820:	431a      	orrs	r2, r3
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	619a      	str	r2, [r3, #24]
}
 800b826:	bf00      	nop
 800b828:	3714      	adds	r7, #20
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr

0800b832 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b832:	b480      	push	{r7}
 800b834:	b085      	sub	sp, #20
 800b836:	af00      	add	r7, sp, #0
 800b838:	6078      	str	r0, [r7, #4]
 800b83a:	460b      	mov	r3, r1
 800b83c:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800b83e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b842:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800b844:	887a      	ldrh	r2, [r7, #2]
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4313      	orrs	r3, r2
 800b84a:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800b852:	887a      	ldrh	r2, [r7, #2]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	69db      	ldr	r3, [r3, #28]
 800b862:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	69db      	ldr	r3, [r3, #28]
 800b868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800b870:	2300      	movs	r3, #0
 800b872:	e000      	b.n	800b876 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
  }
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b082      	sub	sp, #8
 800b886:	af00      	add	r7, sp, #0
 800b888:	4603      	mov	r3, r0
 800b88a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b88c:	4b08      	ldr	r3, [pc, #32]	; (800b8b0 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b88e:	695a      	ldr	r2, [r3, #20]
 800b890:	88fb      	ldrh	r3, [r7, #6]
 800b892:	4013      	ands	r3, r2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b898:	4a05      	ldr	r2, [pc, #20]	; (800b8b0 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800b89a:	88fb      	ldrh	r3, [r7, #6]
 800b89c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b89e:	88fb      	ldrh	r3, [r7, #6]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f000 f807 	bl	800b8b4 <HAL_GPIO_EXTI_Callback>
  }
}
 800b8a6:	bf00      	nop
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40013c00 	.word	0x40013c00

0800b8b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b8be:	bf00      	nop
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e12b      	b.n	800bb34 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d106      	bne.n	800b8f6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7f9 fe71 	bl	80055d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2224      	movs	r2, #36	; 0x24
 800b8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f022 0201 	bic.w	r2, r2, #1
 800b90c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b91c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b92c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b92e:	f007 f891 	bl	8012a54 <HAL_RCC_GetPCLK1Freq>
 800b932:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	4a80      	ldr	r2, [pc, #512]	; (800bb3c <HAL_I2C_Init+0x272>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d807      	bhi.n	800b94e <HAL_I2C_Init+0x84>
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	4a7f      	ldr	r2, [pc, #508]	; (800bb40 <HAL_I2C_Init+0x276>)
 800b942:	4293      	cmp	r3, r2
 800b944:	bf94      	ite	ls
 800b946:	2301      	movls	r3, #1
 800b948:	2300      	movhi	r3, #0
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	e006      	b.n	800b95c <HAL_I2C_Init+0x92>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	4a7c      	ldr	r2, [pc, #496]	; (800bb44 <HAL_I2C_Init+0x27a>)
 800b952:	4293      	cmp	r3, r2
 800b954:	bf94      	ite	ls
 800b956:	2301      	movls	r3, #1
 800b958:	2300      	movhi	r3, #0
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d001      	beq.n	800b964 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	e0e7      	b.n	800bb34 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	4a78      	ldr	r2, [pc, #480]	; (800bb48 <HAL_I2C_Init+0x27e>)
 800b968:	fba2 2303 	umull	r2, r3, r2, r3
 800b96c:	0c9b      	lsrs	r3, r3, #18
 800b96e:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68ba      	ldr	r2, [r7, #8]
 800b980:	430a      	orrs	r2, r1
 800b982:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	6a1b      	ldr	r3, [r3, #32]
 800b98a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	4a6a      	ldr	r2, [pc, #424]	; (800bb3c <HAL_I2C_Init+0x272>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d802      	bhi.n	800b99e <HAL_I2C_Init+0xd4>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	3301      	adds	r3, #1
 800b99c:	e009      	b.n	800b9b2 <HAL_I2C_Init+0xe8>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b9a4:	fb02 f303 	mul.w	r3, r2, r3
 800b9a8:	4a68      	ldr	r2, [pc, #416]	; (800bb4c <HAL_I2C_Init+0x282>)
 800b9aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ae:	099b      	lsrs	r3, r3, #6
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	6812      	ldr	r2, [r2, #0]
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b9c4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	495b      	ldr	r1, [pc, #364]	; (800bb3c <HAL_I2C_Init+0x272>)
 800b9ce:	428b      	cmp	r3, r1
 800b9d0:	d819      	bhi.n	800ba06 <HAL_I2C_Init+0x13c>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	1e59      	subs	r1, r3, #1
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9e0:	1c59      	adds	r1, r3, #1
 800b9e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b9e6:	400b      	ands	r3, r1
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00a      	beq.n	800ba02 <HAL_I2C_Init+0x138>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	1e59      	subs	r1, r3, #1
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	685b      	ldr	r3, [r3, #4]
 800b9f4:	005b      	lsls	r3, r3, #1
 800b9f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba00:	e051      	b.n	800baa6 <HAL_I2C_Init+0x1dc>
 800ba02:	2304      	movs	r3, #4
 800ba04:	e04f      	b.n	800baa6 <HAL_I2C_Init+0x1dc>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d111      	bne.n	800ba32 <HAL_I2C_Init+0x168>
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	1e58      	subs	r0, r3, #1
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6859      	ldr	r1, [r3, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	005b      	lsls	r3, r3, #1
 800ba1a:	440b      	add	r3, r1
 800ba1c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba20:	3301      	adds	r3, #1
 800ba22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	bf0c      	ite	eq
 800ba2a:	2301      	moveq	r3, #1
 800ba2c:	2300      	movne	r3, #0
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	e012      	b.n	800ba58 <HAL_I2C_Init+0x18e>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	1e58      	subs	r0, r3, #1
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	440b      	add	r3, r1
 800ba40:	0099      	lsls	r1, r3, #2
 800ba42:	440b      	add	r3, r1
 800ba44:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba48:	3301      	adds	r3, #1
 800ba4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bf0c      	ite	eq
 800ba52:	2301      	moveq	r3, #1
 800ba54:	2300      	movne	r3, #0
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <HAL_I2C_Init+0x196>
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e022      	b.n	800baa6 <HAL_I2C_Init+0x1dc>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10e      	bne.n	800ba86 <HAL_I2C_Init+0x1bc>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	1e58      	subs	r0, r3, #1
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6859      	ldr	r1, [r3, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	440b      	add	r3, r1
 800ba76:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba84:	e00f      	b.n	800baa6 <HAL_I2C_Init+0x1dc>
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	1e58      	subs	r0, r3, #1
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6859      	ldr	r1, [r3, #4]
 800ba8e:	460b      	mov	r3, r1
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	440b      	add	r3, r1
 800ba94:	0099      	lsls	r1, r3, #2
 800ba96:	440b      	add	r3, r1
 800ba98:	fbb0 f3f3 	udiv	r3, r0, r3
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800baa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	6809      	ldr	r1, [r1, #0]
 800baaa:	4313      	orrs	r3, r2
 800baac:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	69da      	ldr	r2, [r3, #28]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	431a      	orrs	r2, r3
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	430a      	orrs	r2, r1
 800bac8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800bad4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6911      	ldr	r1, [r2, #16]
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	68d2      	ldr	r2, [r2, #12]
 800bae0:	4311      	orrs	r1, r2
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	6812      	ldr	r2, [r2, #0]
 800bae6:	430b      	orrs	r3, r1
 800bae8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	695a      	ldr	r2, [r3, #20]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	431a      	orrs	r2, r3
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	430a      	orrs	r2, r1
 800bb04:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f042 0201 	orr.w	r2, r2, #1
 800bb14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2220      	movs	r2, #32
 800bb20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	000186a0 	.word	0x000186a0
 800bb40:	001e847f 	.word	0x001e847f
 800bb44:	003d08ff 	.word	0x003d08ff
 800bb48:	431bde83 	.word	0x431bde83
 800bb4c:	10624dd3 	.word	0x10624dd3

0800bb50 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e021      	b.n	800bba6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2224      	movs	r2, #36	; 0x24
 800bb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f022 0201 	bic.w	r2, r2, #1
 800bb78:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7f9 fd84 	bl	8005688 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b088      	sub	sp, #32
 800bbb2:	af02      	add	r7, sp, #8
 800bbb4:	60f8      	str	r0, [r7, #12]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	460b      	mov	r3, r1
 800bbbc:	817b      	strh	r3, [r7, #10]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bbc2:	f7fb f9eb 	bl	8006f9c <HAL_GetTick>
 800bbc6:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b20      	cmp	r3, #32
 800bbd2:	f040 80e0 	bne.w	800bd96 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	2319      	movs	r3, #25
 800bbdc:	2201      	movs	r2, #1
 800bbde:	4970      	ldr	r1, [pc, #448]	; (800bda0 <HAL_I2C_Master_Transmit+0x1f2>)
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f005 fd97 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800bbec:	2302      	movs	r3, #2
 800bbee:	e0d3      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d101      	bne.n	800bbfe <HAL_I2C_Master_Transmit+0x50>
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	e0cc      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0301 	and.w	r3, r3, #1
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d007      	beq.n	800bc24 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f042 0201 	orr.w	r2, r2, #1
 800bc22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc32:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2221      	movs	r2, #33	; 0x21
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2210      	movs	r2, #16
 800bc40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	893a      	ldrh	r2, [r7, #8]
 800bc54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	4a50      	ldr	r2, [pc, #320]	; (800bda4 <HAL_I2C_Master_Transmit+0x1f6>)
 800bc64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800bc66:	8979      	ldrh	r1, [r7, #10]
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	6a3a      	ldr	r2, [r7, #32]
 800bc6c:	68f8      	ldr	r0, [r7, #12]
 800bc6e:	f005 f8c9 	bl	8010e04 <I2C_MasterRequestWrite>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d001      	beq.n	800bc7c <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	e08d      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	613b      	str	r3, [r7, #16]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	699b      	ldr	r3, [r3, #24]
 800bc8e:	613b      	str	r3, [r7, #16]
 800bc90:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800bc92:	e066      	b.n	800bd62 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	6a39      	ldr	r1, [r7, #32]
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f005 fe11 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d00d      	beq.n	800bcc0 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	d107      	bne.n	800bcbc <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bcba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e06b      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcc4:	781a      	ldrb	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd0:	1c5a      	adds	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bce8:	3b01      	subs	r3, #1
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	695b      	ldr	r3, [r3, #20]
 800bcf6:	f003 0304 	and.w	r3, r3, #4
 800bcfa:	2b04      	cmp	r3, #4
 800bcfc:	d11b      	bne.n	800bd36 <HAL_I2C_Master_Transmit+0x188>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d017      	beq.n	800bd36 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd0a:	781a      	ldrb	r2, [r3, #0]
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd16:	1c5a      	adds	r2, r3, #1
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	3b01      	subs	r3, #1
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	6a39      	ldr	r1, [r7, #32]
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f005 fe01 	bl	8011942 <I2C_WaitOnBTFFlagUntilTimeout>
 800bd40:	4603      	mov	r3, r0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00d      	beq.n	800bd62 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d107      	bne.n	800bd5e <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	681a      	ldr	r2, [r3, #0]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e01a      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d194      	bne.n	800bc94 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	2220      	movs	r2, #32
 800bd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e000      	b.n	800bd98 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800bd96:	2302      	movs	r3, #2
  }
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	00100002 	.word	0x00100002
 800bda4:	ffff0000 	.word	0xffff0000

0800bda8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08c      	sub	sp, #48	; 0x30
 800bdac:	af02      	add	r7, sp, #8
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	817b      	strh	r3, [r7, #10]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bdbc:	f7fb f8ee 	bl	8006f9c <HAL_GetTick>
 800bdc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	2b20      	cmp	r3, #32
 800bdcc:	f040 820b 	bne.w	800c1e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	2319      	movs	r3, #25
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	497c      	ldr	r1, [pc, #496]	; (800bfcc <HAL_I2C_Master_Receive+0x224>)
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f005 fc9a 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800bde6:	2302      	movs	r3, #2
 800bde8:	e1fe      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d101      	bne.n	800bdf8 <HAL_I2C_Master_Receive+0x50>
 800bdf4:	2302      	movs	r3, #2
 800bdf6:	e1f7      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f003 0301 	and.w	r3, r3, #1
 800be0a:	2b01      	cmp	r3, #1
 800be0c:	d007      	beq.n	800be1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f042 0201 	orr.w	r2, r2, #1
 800be1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2222      	movs	r2, #34	; 0x22
 800be32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2210      	movs	r2, #16
 800be3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	2200      	movs	r2, #0
 800be42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	893a      	ldrh	r2, [r7, #8]
 800be4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be54:	b29a      	uxth	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	4a5c      	ldr	r2, [pc, #368]	; (800bfd0 <HAL_I2C_Master_Receive+0x228>)
 800be5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800be60:	8979      	ldrh	r1, [r7, #10]
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f005 f84e 	bl	8010f08 <I2C_MasterRequestRead>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	e1b8      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d113      	bne.n	800bea6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be7e:	2300      	movs	r3, #0
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	e18c      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d11b      	bne.n	800bee6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bebe:	2300      	movs	r3, #0
 800bec0:	61bb      	str	r3, [r7, #24]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	61bb      	str	r3, [r7, #24]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	61bb      	str	r3, [r7, #24]
 800bed2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	e16c      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beea:	2b02      	cmp	r3, #2
 800beec:	d11b      	bne.n	800bf26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800befc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf0e:	2300      	movs	r3, #0
 800bf10:	61fb      	str	r3, [r7, #28]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	695b      	ldr	r3, [r3, #20]
 800bf18:	61fb      	str	r3, [r7, #28]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	699b      	ldr	r3, [r3, #24]
 800bf20:	61fb      	str	r3, [r7, #28]
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	e14c      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf36:	2300      	movs	r3, #0
 800bf38:	623b      	str	r3, [r7, #32]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	695b      	ldr	r3, [r3, #20]
 800bf40:	623b      	str	r3, [r7, #32]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	623b      	str	r3, [r7, #32]
 800bf4a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800bf4c:	e138      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	f200 80f1 	bhi.w	800c13a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d123      	bne.n	800bfa8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f005 fd9d 	bl	8011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e139      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	691a      	ldr	r2, [r3, #16]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7e:	b2d2      	uxtb	r2, r2
 800bf80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf90:	3b01      	subs	r3, #1
 800bf92:	b29a      	uxth	r2, r3
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	b29a      	uxth	r2, r3
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bfa6:	e10b      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d14e      	bne.n	800c04e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	9300      	str	r3, [sp, #0]
 800bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	4906      	ldr	r1, [pc, #24]	; (800bfd4 <HAL_I2C_Master_Receive+0x22c>)
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f005 fbaa 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d008      	beq.n	800bfd8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e10e      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
 800bfca:	bf00      	nop
 800bfcc:	00100002 	.word	0x00100002
 800bfd0:	ffff0000 	.word	0xffff0000
 800bfd4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfe6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	691a      	ldr	r2, [r3, #16]
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff2:	b2d2      	uxtb	r2, r2
 800bff4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffa:	1c5a      	adds	r2, r3, #1
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c004:	3b01      	subs	r3, #1
 800c006:	b29a      	uxth	r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691a      	ldr	r2, [r3, #16]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c024:	b2d2      	uxtb	r2, r2
 800c026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c02c:	1c5a      	adds	r2, r3, #1
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c036:	3b01      	subs	r3, #1
 800c038:	b29a      	uxth	r2, r3
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c04c:	e0b8      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c054:	2200      	movs	r2, #0
 800c056:	4966      	ldr	r1, [pc, #408]	; (800c1f0 <HAL_I2C_Master_Receive+0x448>)
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f005 fb5b 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b00      	cmp	r3, #0
 800c062:	d001      	beq.n	800c068 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e0bf      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	691a      	ldr	r2, [r3, #16]
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c094:	3b01      	subs	r3, #1
 800c096:	b29a      	uxth	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	3b01      	subs	r3, #1
 800c0a4:	b29a      	uxth	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	9300      	str	r3, [sp, #0]
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	494f      	ldr	r1, [pc, #316]	; (800c1f0 <HAL_I2C_Master_Receive+0x448>)
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	f005 fb2d 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e091      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	681a      	ldr	r2, [r3, #0]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	691a      	ldr	r2, [r3, #16]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0de:	b2d2      	uxtb	r2, r2
 800c0e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0f0:	3b01      	subs	r3, #1
 800c0f2:	b29a      	uxth	r2, r3
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	691a      	ldr	r2, [r3, #16]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c110:	b2d2      	uxtb	r2, r2
 800c112:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c118:	1c5a      	adds	r2, r3, #1
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c122:	3b01      	subs	r3, #1
 800c124:	b29a      	uxth	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c12e:	b29b      	uxth	r3, r3
 800c130:	3b01      	subs	r3, #1
 800c132:	b29a      	uxth	r2, r3
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c138:	e042      	b.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c13a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f005 fcb0 	bl	8011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d001      	beq.n	800c14e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800c14a:	2301      	movs	r3, #1
 800c14c:	e04c      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	691a      	ldr	r2, [r3, #16]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c160:	1c5a      	adds	r2, r3, #1
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c16a:	3b01      	subs	r3, #1
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c176:	b29b      	uxth	r3, r3
 800c178:	3b01      	subs	r3, #1
 800c17a:	b29a      	uxth	r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d118      	bne.n	800c1c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691a      	ldr	r2, [r3, #16]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c198:	b2d2      	uxtb	r2, r2
 800c19a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	3b01      	subs	r3, #1
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f47f aec2 	bne.w	800bf4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2220      	movs	r2, #32
 800c1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e000      	b.n	800c1e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800c1e6:	2302      	movs	r3, #2
  }
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3728      	adds	r7, #40	; 0x28
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	00010004 	.word	0x00010004

0800c1f4 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	; 0x28
 800c1f8:	af02      	add	r7, sp, #8
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	603b      	str	r3, [r7, #0]
 800c200:	4613      	mov	r3, r2
 800c202:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c204:	f7fa feca 	bl	8006f9c <HAL_GetTick>
 800c208:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c210:	b2db      	uxtb	r3, r3
 800c212:	2b20      	cmp	r3, #32
 800c214:	f040 80fb 	bne.w	800c40e <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d002      	beq.n	800c224 <HAL_I2C_Slave_Transmit+0x30>
 800c21e:	88fb      	ldrh	r3, [r7, #6]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	e0f3      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c22e:	2b01      	cmp	r3, #1
 800c230:	d101      	bne.n	800c236 <HAL_I2C_Slave_Transmit+0x42>
 800c232:	2302      	movs	r3, #2
 800c234:	e0ec      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	2201      	movs	r2, #1
 800c23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d007      	beq.n	800c25c <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 0201 	orr.w	r2, r2, #1
 800c25a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c26a:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2221      	movs	r2, #33	; 0x21
 800c270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	68ba      	ldr	r2, [r7, #8]
 800c286:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	88fa      	ldrh	r2, [r7, #6]
 800c28c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c292:	b29a      	uxth	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	4a5f      	ldr	r2, [pc, #380]	; (800c418 <HAL_I2C_Slave_Transmit+0x224>)
 800c29c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2ac:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c2ae:	69fb      	ldr	r3, [r7, #28]
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	4959      	ldr	r1, [pc, #356]	; (800c41c <HAL_I2C_Slave_Transmit+0x228>)
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f005 fa2b 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e0a3      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	617b      	str	r3, [r7, #20]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	699b      	ldr	r3, [r3, #24]
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c2e6:	d165      	bne.n	800c3b4 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	9300      	str	r3, [sp, #0]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	494a      	ldr	r1, [pc, #296]	; (800c41c <HAL_I2C_Slave_Transmit+0x228>)
 800c2f2:	68f8      	ldr	r0, [r7, #12]
 800c2f4:	f005 fa0e 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d001      	beq.n	800c302 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800c2fe:	2301      	movs	r3, #1
 800c300:	e086      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c302:	2300      	movs	r3, #0
 800c304:	61bb      	str	r3, [r7, #24]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	695b      	ldr	r3, [r3, #20]
 800c30c:	61bb      	str	r3, [r7, #24]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	61bb      	str	r3, [r7, #24]
 800c316:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800c318:	e04c      	b.n	800c3b4 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c31a:	69fa      	ldr	r2, [r7, #28]
 800c31c:	6839      	ldr	r1, [r7, #0]
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f005 face 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800c324:	4603      	mov	r3, r0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d009      	beq.n	800c33e <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c338:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e068      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c342:	781a      	ldrb	r2, [r3, #0]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c34e:	1c5a      	adds	r2, r3, #1
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c358:	b29b      	uxth	r3, r3
 800c35a:	3b01      	subs	r3, #1
 800c35c:	b29a      	uxth	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c366:	3b01      	subs	r3, #1
 800c368:	b29a      	uxth	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	695b      	ldr	r3, [r3, #20]
 800c374:	f003 0304 	and.w	r3, r3, #4
 800c378:	2b04      	cmp	r3, #4
 800c37a:	d11b      	bne.n	800c3b4 <HAL_I2C_Slave_Transmit+0x1c0>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c380:	2b00      	cmp	r3, #0
 800c382:	d017      	beq.n	800c3b4 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	781a      	ldrb	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1ae      	bne.n	800c31a <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	9300      	str	r3, [sp, #0]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	f005 f9a3 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d001      	beq.n	800c3d8 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e01b      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c3e0:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2220      	movs	r2, #32
 800c3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c40a:	2300      	movs	r3, #0
 800c40c:	e000      	b.n	800c410 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800c40e:	2302      	movs	r3, #2
  }
}
 800c410:	4618      	mov	r0, r3
 800c412:	3720      	adds	r7, #32
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	ffff0000 	.word	0xffff0000
 800c41c:	00010002 	.word	0x00010002

0800c420 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b08a      	sub	sp, #40	; 0x28
 800c424:	af02      	add	r7, sp, #8
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	603b      	str	r3, [r7, #0]
 800c42c:	4613      	mov	r3, r2
 800c42e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c430:	f7fa fdb4 	bl	8006f9c <HAL_GetTick>
 800c434:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c43c:	b2db      	uxtb	r3, r3
 800c43e:	2b20      	cmp	r3, #32
 800c440:	f040 80ee 	bne.w	800c620 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <HAL_I2C_Slave_Receive+0x30>
 800c44a:	88fb      	ldrh	r3, [r7, #6]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800c450:	2301      	movs	r3, #1
 800c452:	e0e6      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d101      	bne.n	800c462 <HAL_I2C_Slave_Receive+0x42>
 800c45e:	2302      	movs	r3, #2
 800c460:	e0df      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	2201      	movs	r2, #1
 800c466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 0301 	and.w	r3, r3, #1
 800c474:	2b01      	cmp	r3, #1
 800c476:	d007      	beq.n	800c488 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0201 	orr.w	r2, r2, #1
 800c486:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c496:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2222      	movs	r2, #34	; 0x22
 800c49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2220      	movs	r2, #32
 800c4a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	68ba      	ldr	r2, [r7, #8]
 800c4b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	88fa      	ldrh	r2, [r7, #6]
 800c4b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4be:	b29a      	uxth	r2, r3
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	4a59      	ldr	r2, [pc, #356]	; (800c62c <HAL_I2C_Slave_Receive+0x20c>)
 800c4c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c4d8:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	4953      	ldr	r1, [pc, #332]	; (800c630 <HAL_I2C_Slave_Receive+0x210>)
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f005 f915 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e096      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	617b      	str	r3, [r7, #20]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	617b      	str	r3, [r7, #20]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	699b      	ldr	r3, [r3, #24]
 800c506:	617b      	str	r3, [r7, #20]
 800c508:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800c50a:	e04e      	b.n	800c5aa <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c50c:	69fa      	ldr	r2, [r7, #28]
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	68f8      	ldr	r0, [r7, #12]
 800c512:	f005 fac7 	bl	8011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c516:	4603      	mov	r3, r0
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d009      	beq.n	800c530 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c52a:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e078      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	691a      	ldr	r2, [r3, #16]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53a:	b2d2      	uxtb	r2, r2
 800c53c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c54c:	3b01      	subs	r3, #1
 800c54e:	b29a      	uxth	r2, r3
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c558:	b29b      	uxth	r3, r3
 800c55a:	3b01      	subs	r3, #1
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	695b      	ldr	r3, [r3, #20]
 800c568:	f003 0304 	and.w	r3, r3, #4
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	d11c      	bne.n	800c5aa <HAL_I2C_Slave_Receive+0x18a>
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c574:	2b00      	cmp	r3, #0
 800c576:	d018      	beq.n	800c5aa <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	691a      	ldr	r2, [r3, #16]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c582:	b2d2      	uxtb	r2, r2
 800c584:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	1c5a      	adds	r2, r3, #1
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c594:	3b01      	subs	r3, #1
 800c596:	b29a      	uxth	r2, r3
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	3b01      	subs	r3, #1
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d1ac      	bne.n	800c50c <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c5b2:	69fa      	ldr	r2, [r7, #28]
 800c5b4:	6839      	ldr	r1, [r7, #0]
 800c5b6:	68f8      	ldr	r0, [r7, #12]
 800c5b8:	f005 fa04 	bl	80119c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c5d0:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e025      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	61bb      	str	r3, [r7, #24]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	695b      	ldr	r3, [r3, #20]
 800c5e0:	61bb      	str	r3, [r7, #24]
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f042 0201 	orr.w	r2, r2, #1
 800c5f0:	601a      	str	r2, [r3, #0]
 800c5f2:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2220      	movs	r2, #32
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c61c:	2300      	movs	r3, #0
 800c61e:	e000      	b.n	800c622 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800c620:	2302      	movs	r3, #2
  }
}
 800c622:	4618      	mov	r0, r3
 800c624:	3720      	adds	r7, #32
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	ffff0000 	.word	0xffff0000
 800c630:	00010002 	.word	0x00010002

0800c634 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	607a      	str	r2, [r7, #4]
 800c63e:	461a      	mov	r2, r3
 800c640:	460b      	mov	r3, r1
 800c642:	817b      	strh	r3, [r7, #10]
 800c644:	4613      	mov	r3, r2
 800c646:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c648:	2300      	movs	r3, #0
 800c64a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b20      	cmp	r3, #32
 800c656:	f040 8085 	bne.w	800c764 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c65a:	4b46      	ldr	r3, [pc, #280]	; (800c774 <HAL_I2C_Master_Transmit_IT+0x140>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	08db      	lsrs	r3, r3, #3
 800c660:	4a45      	ldr	r2, [pc, #276]	; (800c778 <HAL_I2C_Master_Transmit_IT+0x144>)
 800c662:	fba2 2303 	umull	r2, r3, r2, r3
 800c666:	0a1a      	lsrs	r2, r3, #8
 800c668:	4613      	mov	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4413      	add	r3, r2
 800c66e:	009a      	lsls	r2, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	3b01      	subs	r3, #1
 800c678:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d116      	bne.n	800c6ae <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2200      	movs	r2, #0
 800c684:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	2220      	movs	r2, #32
 800c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69a:	f043 0220 	orr.w	r2, r3, #32
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	e05b      	b.n	800c766 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	699b      	ldr	r3, [r3, #24]
 800c6b4:	f003 0302 	and.w	r3, r3, #2
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d0db      	beq.n	800c674 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d101      	bne.n	800c6ca <HAL_I2C_Master_Transmit_IT+0x96>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e04d      	b.n	800c766 <HAL_I2C_Master_Transmit_IT+0x132>
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d007      	beq.n	800c6f0 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	681a      	ldr	r2, [r3, #0]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f042 0201 	orr.w	r2, r2, #1
 800c6ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2221      	movs	r2, #33	; 0x21
 800c704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2210      	movs	r2, #16
 800c70c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	893a      	ldrh	r2, [r7, #8]
 800c720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c726:	b29a      	uxth	r2, r3
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	4a13      	ldr	r2, [pc, #76]	; (800c77c <HAL_I2C_Master_Transmit_IT+0x148>)
 800c730:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c732:	897a      	ldrh	r2, [r7, #10]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	685a      	ldr	r2, [r3, #4]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c74e:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c75e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	e000      	b.n	800c766 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800c764:	2302      	movs	r3, #2
  }
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop
 800c774:	20000058 	.word	0x20000058
 800c778:	14f8b589 	.word	0x14f8b589
 800c77c:	ffff0000 	.word	0xffff0000

0800c780 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c780:	b480      	push	{r7}
 800c782:	b087      	sub	sp, #28
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	607a      	str	r2, [r7, #4]
 800c78a:	461a      	mov	r2, r3
 800c78c:	460b      	mov	r3, r1
 800c78e:	817b      	strh	r3, [r7, #10]
 800c790:	4613      	mov	r3, r2
 800c792:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	2b20      	cmp	r3, #32
 800c7a2:	f040 808d 	bne.w	800c8c0 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c7a6:	4b4a      	ldr	r3, [pc, #296]	; (800c8d0 <HAL_I2C_Master_Receive_IT+0x150>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	08db      	lsrs	r3, r3, #3
 800c7ac:	4a49      	ldr	r2, [pc, #292]	; (800c8d4 <HAL_I2C_Master_Receive_IT+0x154>)
 800c7ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c7b2:	0a1a      	lsrs	r2, r3, #8
 800c7b4:	4613      	mov	r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	4413      	add	r3, r2
 800c7ba:	009a      	lsls	r2, r3, #2
 800c7bc:	4413      	add	r3, r2
 800c7be:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d116      	bne.n	800c7fa <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2220      	movs	r2, #32
 800c7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e6:	f043 0220 	orr.w	r2, r3, #32
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e063      	b.n	800c8c2 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b02      	cmp	r3, #2
 800c806:	d0db      	beq.n	800c7c0 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d101      	bne.n	800c816 <HAL_I2C_Master_Receive_IT+0x96>
 800c812:	2302      	movs	r3, #2
 800c814:	e055      	b.n	800c8c2 <HAL_I2C_Master_Receive_IT+0x142>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2201      	movs	r2, #1
 800c81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 0301 	and.w	r3, r3, #1
 800c828:	2b01      	cmp	r3, #1
 800c82a:	d007      	beq.n	800c83c <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0201 	orr.w	r2, r2, #1
 800c83a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c84a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2222      	movs	r2, #34	; 0x22
 800c850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2210      	movs	r2, #16
 800c858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	893a      	ldrh	r2, [r7, #8]
 800c86c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c872:	b29a      	uxth	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	4a17      	ldr	r2, [pc, #92]	; (800c8d8 <HAL_I2C_Master_Receive_IT+0x158>)
 800c87c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c87e:	897a      	ldrh	r2, [r7, #10]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2200      	movs	r2, #0
 800c888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c89a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8aa:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c8ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	e000      	b.n	800c8c2 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800c8c0:	2302      	movs	r3, #2
  }
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	20000058 	.word	0x20000058
 800c8d4:	14f8b589 	.word	0x14f8b589
 800c8d8:	ffff0000 	.word	0xffff0000

0800c8dc <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b20      	cmp	r3, #32
 800c8f4:	d158      	bne.n	800c9a8 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <HAL_I2C_Slave_Transmit_IT+0x26>
 800c8fc:	88fb      	ldrh	r3, [r7, #6]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e051      	b.n	800c9aa <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d101      	bne.n	800c914 <HAL_I2C_Slave_Transmit_IT+0x38>
 800c910:	2302      	movs	r3, #2
 800c912:	e04a      	b.n	800c9aa <HAL_I2C_Slave_Transmit_IT+0xce>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b01      	cmp	r3, #1
 800c928:	d007      	beq.n	800c93a <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f042 0201 	orr.w	r2, r2, #1
 800c938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c948:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	2221      	movs	r2, #33	; 0x21
 800c94e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2220      	movs	r2, #32
 800c956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	68ba      	ldr	r2, [r7, #8]
 800c964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	88fa      	ldrh	r2, [r7, #6]
 800c96a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4a0f      	ldr	r2, [pc, #60]	; (800c9b8 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c97a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c98a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2200      	movs	r2, #0
 800c990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c9a2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	e000      	b.n	800c9aa <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c9a8:	2302      	movs	r3, #2
  }
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3714      	adds	r7, #20
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	ffff0000 	.word	0xffff0000

0800c9bc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9d0:	b2db      	uxtb	r3, r3
 800c9d2:	2b20      	cmp	r3, #32
 800c9d4:	d158      	bne.n	800ca88 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d002      	beq.n	800c9e2 <HAL_I2C_Slave_Receive_IT+0x26>
 800c9dc:	88fb      	ldrh	r3, [r7, #6]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e051      	b.n	800ca8a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d101      	bne.n	800c9f4 <HAL_I2C_Slave_Receive_IT+0x38>
 800c9f0:	2302      	movs	r3, #2
 800c9f2:	e04a      	b.n	800ca8a <HAL_I2C_Slave_Receive_IT+0xce>
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 0301 	and.w	r3, r3, #1
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d007      	beq.n	800ca1a <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f042 0201 	orr.w	r2, r2, #1
 800ca18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ca28:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2222      	movs	r2, #34	; 0x22
 800ca2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2220      	movs	r2, #32
 800ca36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	88fa      	ldrh	r2, [r7, #6]
 800ca4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca50:	b29a      	uxth	r2, r3
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	4a0f      	ldr	r2, [pc, #60]	; (800ca98 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800ca5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ca6a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ca82:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ca84:	2300      	movs	r3, #0
 800ca86:	e000      	b.n	800ca8a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800ca88:	2302      	movs	r3, #2
  }
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3714      	adds	r7, #20
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca94:	4770      	bx	lr
 800ca96:	bf00      	nop
 800ca98:	ffff0000 	.word	0xffff0000

0800ca9c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	607a      	str	r2, [r7, #4]
 800caa6:	461a      	mov	r2, r3
 800caa8:	460b      	mov	r3, r1
 800caaa:	817b      	strh	r3, [r7, #10]
 800caac:	4613      	mov	r3, r2
 800caae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b20      	cmp	r3, #32
 800cabe:	f040 810d 	bne.w	800ccdc <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cac2:	4b89      	ldr	r3, [pc, #548]	; (800cce8 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	08db      	lsrs	r3, r3, #3
 800cac8:	4a88      	ldr	r2, [pc, #544]	; (800ccec <HAL_I2C_Master_Transmit_DMA+0x250>)
 800caca:	fba2 2303 	umull	r2, r3, r2, r3
 800cace:	0a1a      	lsrs	r2, r3, #8
 800cad0:	4613      	mov	r3, r2
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	4413      	add	r3, r2
 800cad6:	009a      	lsls	r2, r3, #2
 800cad8:	4413      	add	r3, r2
 800cada:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	3b01      	subs	r3, #1
 800cae0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800cae2:	693b      	ldr	r3, [r7, #16]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d116      	bne.n	800cb16 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2220      	movs	r2, #32
 800caf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb02:	f043 0220 	orr.w	r2, r3, #32
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e0e3      	b.n	800ccde <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f003 0302 	and.w	r3, r3, #2
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d0db      	beq.n	800cadc <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d101      	bne.n	800cb32 <HAL_I2C_Master_Transmit_DMA+0x96>
 800cb2e:	2302      	movs	r3, #2
 800cb30:	e0d5      	b.n	800ccde <HAL_I2C_Master_Transmit_DMA+0x242>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2201      	movs	r2, #1
 800cb36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0301 	and.w	r3, r3, #1
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d007      	beq.n	800cb58 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681a      	ldr	r2, [r3, #0]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f042 0201 	orr.w	r2, r2, #1
 800cb56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2221      	movs	r2, #33	; 0x21
 800cb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2210      	movs	r2, #16
 800cb74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	893a      	ldrh	r2, [r7, #8]
 800cb88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	4a56      	ldr	r2, [pc, #344]	; (800ccf0 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800cb98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cb9a:	897a      	ldrh	r2, [r7, #10]
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d07b      	beq.n	800cca0 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d02a      	beq.n	800cc06 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb4:	4a4f      	ldr	r2, [pc, #316]	; (800ccf4 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800cbb6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbbc:	4a4e      	ldr	r2, [pc, #312]	; (800ccf8 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800cbbe:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbcc:	2200      	movs	r2, #0
 800cbce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbdc:	2200      	movs	r2, #0
 800cbde:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe8:	4619      	mov	r1, r3
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	3310      	adds	r3, #16
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbf6:	f7fb fc3a 	bl	800846e <HAL_DMA_Start_IT>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cbfe:	7dfb      	ldrb	r3, [r7, #23]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d139      	bne.n	800cc78 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800cc04:	e013      	b.n	800cc2e <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2200      	movs	r2, #0
 800cc26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e057      	b.n	800ccde <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	685a      	ldr	r2, [r3, #4]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cc44:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	685a      	ldr	r2, [r3, #4]
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc54:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cc64:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	e02f      	b.n	800ccd8 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8c:	f043 0210 	orr.w	r2, r3, #16
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	e01e      	b.n	800ccde <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccae:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccbe:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ccd6:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	e000      	b.n	800ccde <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800ccdc:	2302      	movs	r3, #2
  }
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3718      	adds	r7, #24
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	20000058 	.word	0x20000058
 800ccec:	14f8b589 	.word	0x14f8b589
 800ccf0:	ffff0000 	.word	0xffff0000
 800ccf4:	080113a1 	.word	0x080113a1
 800ccf8:	0801154b 	.word	0x0801154b

0800ccfc <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	607a      	str	r2, [r7, #4]
 800cd06:	461a      	mov	r2, r3
 800cd08:	460b      	mov	r3, r1
 800cd0a:	817b      	strh	r3, [r7, #10]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800cd10:	2300      	movs	r3, #0
 800cd12:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b20      	cmp	r3, #32
 800cd1e:	f040 810d 	bne.w	800cf3c <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cd22:	4b89      	ldr	r3, [pc, #548]	; (800cf48 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	08db      	lsrs	r3, r3, #3
 800cd28:	4a88      	ldr	r2, [pc, #544]	; (800cf4c <HAL_I2C_Master_Receive_DMA+0x250>)
 800cd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2e:	0a1a      	lsrs	r2, r3, #8
 800cd30:	4613      	mov	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	009a      	lsls	r2, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d116      	bne.n	800cd76 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2220      	movs	r2, #32
 800cd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd62:	f043 0220 	orr.w	r2, r3, #32
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	e0e3      	b.n	800cf3e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	699b      	ldr	r3, [r3, #24]
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d0db      	beq.n	800cd3c <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d101      	bne.n	800cd92 <HAL_I2C_Master_Receive_DMA+0x96>
 800cd8e:	2302      	movs	r3, #2
 800cd90:	e0d5      	b.n	800cf3e <HAL_I2C_Master_Receive_DMA+0x242>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d007      	beq.n	800cdb8 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f042 0201 	orr.w	r2, r2, #1
 800cdb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681a      	ldr	r2, [r3, #0]
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2222      	movs	r2, #34	; 0x22
 800cdcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2210      	movs	r2, #16
 800cdd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	2200      	movs	r2, #0
 800cddc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	893a      	ldrh	r2, [r7, #8]
 800cde8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	4a56      	ldr	r2, [pc, #344]	; (800cf50 <HAL_I2C_Master_Receive_DMA+0x254>)
 800cdf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cdfa:	897a      	ldrh	r2, [r7, #10]
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d07b      	beq.n	800cf00 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d02a      	beq.n	800ce66 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce14:	4a4f      	ldr	r2, [pc, #316]	; (800cf54 <HAL_I2C_Master_Receive_DMA+0x258>)
 800ce16:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce1c:	4a4e      	ldr	r2, [pc, #312]	; (800cf58 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800ce1e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce24:	2200      	movs	r2, #0
 800ce26:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce34:	2200      	movs	r2, #0
 800ce36:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	3310      	adds	r3, #16
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce50:	461a      	mov	r2, r3
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce56:	f7fb fb0a 	bl	800846e <HAL_DMA_Start_IT>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ce5e:	7dfb      	ldrb	r3, [r7, #23]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d139      	bne.n	800ced8 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800ce64:	e013      	b.n	800ce8e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2220      	movs	r2, #32
 800ce6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2200      	movs	r2, #0
 800ce86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	e057      	b.n	800cf3e <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681a      	ldr	r2, [r3, #0]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ce9c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ceac:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800cec4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ced4:	605a      	str	r2, [r3, #4]
 800ced6:	e02f      	b.n	800cf38 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2220      	movs	r2, #32
 800cedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2200      	movs	r2, #0
 800cee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceec:	f043 0210 	orr.w	r2, r3, #16
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2200      	movs	r2, #0
 800cef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cefc:	2301      	movs	r3, #1
 800cefe:	e01e      	b.n	800cf3e <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cf16:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800cf26:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf36:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	e000      	b.n	800cf3e <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800cf3c:	2302      	movs	r3, #2
  }
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20000058 	.word	0x20000058
 800cf4c:	14f8b589 	.word	0x14f8b589
 800cf50:	ffff0000 	.word	0xffff0000
 800cf54:	080113a1 	.word	0x080113a1
 800cf58:	0801154b 	.word	0x0801154b

0800cf5c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b086      	sub	sp, #24
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	f040 80b8 	bne.w	800d0e8 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d002      	beq.n	800cf84 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800cf7e:	88fb      	ldrh	r3, [r7, #6]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d101      	bne.n	800cf88 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e0b0      	b.n	800d0ea <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d101      	bne.n	800cf96 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800cf92:	2302      	movs	r3, #2
 800cf94:	e0a9      	b.n	800d0ea <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d007      	beq.n	800cfbc <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f042 0201 	orr.w	r2, r2, #1
 800cfba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	681a      	ldr	r2, [r3, #0]
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cfca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2221      	movs	r2, #33	; 0x21
 800cfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2220      	movs	r2, #32
 800cfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	88fa      	ldrh	r2, [r7, #6]
 800cfec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cff2:	b29a      	uxth	r2, r3
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	4a3e      	ldr	r2, [pc, #248]	; (800d0f4 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800cffc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d002:	2b00      	cmp	r3, #0
 800d004:	d02a      	beq.n	800d05c <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d00a:	4a3b      	ldr	r2, [pc, #236]	; (800d0f8 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800d00c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d012:	4a3a      	ldr	r2, [pc, #232]	; (800d0fc <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800d014:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d01a:	2200      	movs	r2, #0
 800d01c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d022:	2200      	movs	r2, #0
 800d024:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02a:	2200      	movs	r2, #0
 800d02c:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d032:	2200      	movs	r2, #0
 800d034:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03e:	4619      	mov	r1, r3
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	3310      	adds	r3, #16
 800d046:	461a      	mov	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d04c:	f7fb fa0f 	bl	800846e <HAL_DMA_Start_IT>
 800d050:	4603      	mov	r3, r0
 800d052:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800d054:	7dfb      	ldrb	r3, [r7, #23]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d132      	bne.n	800d0c0 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800d05a:	e013      	b.n	800d084 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2228      	movs	r2, #40	; 0x28
 800d060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d070:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2200      	movs	r2, #0
 800d07c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e032      	b.n	800d0ea <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d092:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d0aa:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	685a      	ldr	r2, [r3, #4]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d0ba:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e014      	b.n	800d0ea <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2220      	movs	r2, #32
 800d0c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d4:	f043 0210 	orr.w	r2, r3, #16
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e000      	b.n	800d0ea <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800d0e8:	2302      	movs	r3, #2
  }
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	ffff0000 	.word	0xffff0000
 800d0f8:	080113a1 	.word	0x080113a1
 800d0fc:	0801154b 	.word	0x0801154b

0800d100 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b086      	sub	sp, #24
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	4613      	mov	r3, r2
 800d10c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d114:	b2db      	uxtb	r3, r3
 800d116:	2b20      	cmp	r3, #32
 800d118:	f040 80b8 	bne.w	800d28c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <HAL_I2C_Slave_Receive_DMA+0x28>
 800d122:	88fb      	ldrh	r3, [r7, #6]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d101      	bne.n	800d12c <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800d128:	2301      	movs	r3, #1
 800d12a:	e0b0      	b.n	800d28e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d132:	2b01      	cmp	r3, #1
 800d134:	d101      	bne.n	800d13a <HAL_I2C_Slave_Receive_DMA+0x3a>
 800d136:	2302      	movs	r3, #2
 800d138:	e0a9      	b.n	800d28e <HAL_I2C_Slave_Receive_DMA+0x18e>
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2201      	movs	r2, #1
 800d13e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f003 0301 	and.w	r3, r3, #1
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d007      	beq.n	800d160 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f042 0201 	orr.w	r2, r2, #1
 800d15e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d16e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	2222      	movs	r2, #34	; 0x22
 800d174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2220      	movs	r2, #32
 800d17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	2200      	movs	r2, #0
 800d184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	88fa      	ldrh	r2, [r7, #6]
 800d190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d196:	b29a      	uxth	r2, r3
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	4a3e      	ldr	r2, [pc, #248]	; (800d298 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800d1a0:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d02a      	beq.n	800d200 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ae:	4a3b      	ldr	r2, [pc, #236]	; (800d29c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800d1b0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b6:	4a3a      	ldr	r2, [pc, #232]	; (800d2a0 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800d1b8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	2200      	movs	r2, #0
 800d1c0:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	3310      	adds	r3, #16
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1f0:	f7fb f93d 	bl	800846e <HAL_DMA_Start_IT>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800d1f8:	7dfb      	ldrb	r3, [r7, #23]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d132      	bne.n	800d264 <HAL_I2C_Slave_Receive_DMA+0x164>
 800d1fe:	e013      	b.n	800d228 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2228      	movs	r2, #40	; 0x28
 800d204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d214:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800d224:	2301      	movs	r3, #1
 800d226:	e032      	b.n	800d28e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d236:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d24e:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d25e:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	e014      	b.n	800d28e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	2220      	movs	r2, #32
 800d268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d278:	f043 0210 	orr.w	r2, r3, #16
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d288:	2301      	movs	r3, #1
 800d28a:	e000      	b.n	800d28e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800d28c:	2302      	movs	r3, #2
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	ffff0000 	.word	0xffff0000
 800d29c:	080113a1 	.word	0x080113a1
 800d2a0:	0801154b 	.word	0x0801154b

0800d2a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b088      	sub	sp, #32
 800d2a8:	af02      	add	r7, sp, #8
 800d2aa:	60f8      	str	r0, [r7, #12]
 800d2ac:	4608      	mov	r0, r1
 800d2ae:	4611      	mov	r1, r2
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	817b      	strh	r3, [r7, #10]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	813b      	strh	r3, [r7, #8]
 800d2ba:	4613      	mov	r3, r2
 800d2bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d2be:	f7f9 fe6d 	bl	8006f9c <HAL_GetTick>
 800d2c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b20      	cmp	r3, #32
 800d2ce:	f040 80d9 	bne.w	800d484 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	9300      	str	r3, [sp, #0]
 800d2d6:	2319      	movs	r3, #25
 800d2d8:	2201      	movs	r2, #1
 800d2da:	496d      	ldr	r1, [pc, #436]	; (800d490 <HAL_I2C_Mem_Write+0x1ec>)
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	f004 fa19 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	e0cc      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d101      	bne.n	800d2fa <HAL_I2C_Mem_Write+0x56>
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	e0c5      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 0301 	and.w	r3, r3, #1
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d007      	beq.n	800d320 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f042 0201 	orr.w	r2, r2, #1
 800d31e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	681a      	ldr	r2, [r3, #0]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d32e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	2221      	movs	r2, #33	; 0x21
 800d334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	2240      	movs	r2, #64	; 0x40
 800d33c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2200      	movs	r2, #0
 800d344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6a3a      	ldr	r2, [r7, #32]
 800d34a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d356:	b29a      	uxth	r2, r3
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	4a4d      	ldr	r2, [pc, #308]	; (800d494 <HAL_I2C_Mem_Write+0x1f0>)
 800d360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d362:	88f8      	ldrh	r0, [r7, #6]
 800d364:	893a      	ldrh	r2, [r7, #8]
 800d366:	8979      	ldrh	r1, [r7, #10]
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	9301      	str	r3, [sp, #4]
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	4603      	mov	r3, r0
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f003 fe96 	bl	80110a4 <I2C_RequestMemoryWrite>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d052      	beq.n	800d424 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d37e:	2301      	movs	r3, #1
 800d380:	e081      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d382:	697a      	ldr	r2, [r7, #20]
 800d384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f004 fa9a 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00d      	beq.n	800d3ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d396:	2b04      	cmp	r3, #4
 800d398:	d107      	bne.n	800d3aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d3a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e06b      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3b2:	781a      	ldrb	r2, [r3, #0]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3c8:	3b01      	subs	r3, #1
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	f003 0304 	and.w	r3, r3, #4
 800d3e8:	2b04      	cmp	r3, #4
 800d3ea:	d11b      	bne.n	800d424 <HAL_I2C_Mem_Write+0x180>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d017      	beq.n	800d424 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	781a      	ldrb	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d40e:	3b01      	subs	r3, #1
 800d410:	b29a      	uxth	r2, r3
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	3b01      	subs	r3, #1
 800d41e:	b29a      	uxth	r2, r3
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1aa      	bne.n	800d382 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f004 fa86 	bl	8011942 <I2C_WaitOnBTFFlagUntilTimeout>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d00d      	beq.n	800d458 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d440:	2b04      	cmp	r3, #4
 800d442:	d107      	bne.n	800d454 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	681a      	ldr	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d452:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d454:	2301      	movs	r3, #1
 800d456:	e016      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d466:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2220      	movs	r2, #32
 800d46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	e000      	b.n	800d486 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d484:	2302      	movs	r3, #2
  }
}
 800d486:	4618      	mov	r0, r3
 800d488:	3718      	adds	r7, #24
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}
 800d48e:	bf00      	nop
 800d490:	00100002 	.word	0x00100002
 800d494:	ffff0000 	.word	0xffff0000

0800d498 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b08c      	sub	sp, #48	; 0x30
 800d49c:	af02      	add	r7, sp, #8
 800d49e:	60f8      	str	r0, [r7, #12]
 800d4a0:	4608      	mov	r0, r1
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	817b      	strh	r3, [r7, #10]
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	813b      	strh	r3, [r7, #8]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d4b2:	f7f9 fd73 	bl	8006f9c <HAL_GetTick>
 800d4b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b20      	cmp	r3, #32
 800d4c2:	f040 8208 	bne.w	800d8d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	9300      	str	r3, [sp, #0]
 800d4ca:	2319      	movs	r3, #25
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	497b      	ldr	r1, [pc, #492]	; (800d6bc <HAL_I2C_Mem_Read+0x224>)
 800d4d0:	68f8      	ldr	r0, [r7, #12]
 800d4d2:	f004 f91f 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d001      	beq.n	800d4e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d4dc:	2302      	movs	r3, #2
 800d4de:	e1fb      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d101      	bne.n	800d4ee <HAL_I2C_Mem_Read+0x56>
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	e1f4      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0301 	and.w	r3, r3, #1
 800d500:	2b01      	cmp	r3, #1
 800d502:	d007      	beq.n	800d514 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f042 0201 	orr.w	r2, r2, #1
 800d512:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d522:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2222      	movs	r2, #34	; 0x22
 800d528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2240      	movs	r2, #64	; 0x40
 800d530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d53e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	4a5b      	ldr	r2, [pc, #364]	; (800d6c0 <HAL_I2C_Mem_Read+0x228>)
 800d554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d556:	88f8      	ldrh	r0, [r7, #6]
 800d558:	893a      	ldrh	r2, [r7, #8]
 800d55a:	8979      	ldrh	r1, [r7, #10]
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	9301      	str	r3, [sp, #4]
 800d560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	4603      	mov	r3, r0
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f003 fe32 	bl	80111d0 <I2C_RequestMemoryRead>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e1b0      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d113      	bne.n	800d5a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	617b      	str	r3, [r7, #20]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	699b      	ldr	r3, [r3, #24]
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5a2:	601a      	str	r2, [r3, #0]
 800d5a4:	e184      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d11b      	bne.n	800d5e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d5be:	2300      	movs	r3, #0
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	695b      	ldr	r3, [r3, #20]
 800d5c8:	61bb      	str	r3, [r7, #24]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	699b      	ldr	r3, [r3, #24]
 800d5d0:	61bb      	str	r3, [r7, #24]
 800d5d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d5e2:	601a      	str	r2, [r3, #0]
 800d5e4:	e164      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d11b      	bne.n	800d626 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d5fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d60c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d60e:	2300      	movs	r3, #0
 800d610:	61fb      	str	r3, [r7, #28]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	695b      	ldr	r3, [r3, #20]
 800d618:	61fb      	str	r3, [r7, #28]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	61fb      	str	r3, [r7, #28]
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	e144      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d626:	2300      	movs	r3, #0
 800d628:	623b      	str	r3, [r7, #32]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	695b      	ldr	r3, [r3, #20]
 800d630:	623b      	str	r3, [r7, #32]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	623b      	str	r3, [r7, #32]
 800d63a:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800d63c:	e138      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d642:	2b03      	cmp	r3, #3
 800d644:	f200 80f1 	bhi.w	800d82a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d123      	bne.n	800d698 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d652:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f004 fa25 	bl	8011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e139      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	691a      	ldr	r2, [r3, #16]
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66e:	b2d2      	uxtb	r2, r2
 800d670:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d680:	3b01      	subs	r3, #1
 800d682:	b29a      	uxth	r2, r3
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	3b01      	subs	r3, #1
 800d690:	b29a      	uxth	r2, r3
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d696:	e10b      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d14e      	bne.n	800d73e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	4906      	ldr	r1, [pc, #24]	; (800d6c4 <HAL_I2C_Mem_Read+0x22c>)
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f004 f832 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d008      	beq.n	800d6c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d6b6:	2301      	movs	r3, #1
 800d6b8:	e10e      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
 800d6ba:	bf00      	nop
 800d6bc:	00100002 	.word	0x00100002
 800d6c0:	ffff0000 	.word	0xffff0000
 800d6c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	691a      	ldr	r2, [r3, #16]
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e2:	b2d2      	uxtb	r2, r2
 800d6e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d700:	b29b      	uxth	r3, r3
 800d702:	3b01      	subs	r3, #1
 800d704:	b29a      	uxth	r2, r3
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	691a      	ldr	r2, [r3, #16]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d714:	b2d2      	uxtb	r2, r2
 800d716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d71c:	1c5a      	adds	r2, r3, #1
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d726:	3b01      	subs	r3, #1
 800d728:	b29a      	uxth	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d732:	b29b      	uxth	r3, r3
 800d734:	3b01      	subs	r3, #1
 800d736:	b29a      	uxth	r2, r3
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d73c:	e0b8      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	9300      	str	r3, [sp, #0]
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	2200      	movs	r2, #0
 800d746:	4966      	ldr	r1, [pc, #408]	; (800d8e0 <HAL_I2C_Mem_Read+0x448>)
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f003 ffe3 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800d74e:	4603      	mov	r3, r0
 800d750:	2b00      	cmp	r3, #0
 800d752:	d001      	beq.n	800d758 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e0bf      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d766:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	691a      	ldr	r2, [r3, #16]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d772:	b2d2      	uxtb	r2, r2
 800d774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d77a:	1c5a      	adds	r2, r3, #1
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d784:	3b01      	subs	r3, #1
 800d786:	b29a      	uxth	r2, r3
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b01      	subs	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79c:	9300      	str	r3, [sp, #0]
 800d79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	494f      	ldr	r1, [pc, #316]	; (800d8e0 <HAL_I2C_Mem_Read+0x448>)
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f003 ffb5 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d001      	beq.n	800d7b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	e091      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	681a      	ldr	r2, [r3, #0]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	691a      	ldr	r2, [r3, #16]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ce:	b2d2      	uxtb	r2, r2
 800d7d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7d6:	1c5a      	adds	r2, r3, #1
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d7e0:	3b01      	subs	r3, #1
 800d7e2:	b29a      	uxth	r2, r3
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d7ec:	b29b      	uxth	r3, r3
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	691a      	ldr	r2, [r3, #16]
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d800:	b2d2      	uxtb	r2, r2
 800d802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d812:	3b01      	subs	r3, #1
 800d814:	b29a      	uxth	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d81e:	b29b      	uxth	r3, r3
 800d820:	3b01      	subs	r3, #1
 800d822:	b29a      	uxth	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d828:	e042      	b.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d82a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d82c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d82e:	68f8      	ldr	r0, [r7, #12]
 800d830:	f004 f938 	bl	8011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d834:	4603      	mov	r3, r0
 800d836:	2b00      	cmp	r3, #0
 800d838:	d001      	beq.n	800d83e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d83a:	2301      	movs	r3, #1
 800d83c:	e04c      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	691a      	ldr	r2, [r3, #16]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d848:	b2d2      	uxtb	r2, r2
 800d84a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d85a:	3b01      	subs	r3, #1
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d866:	b29b      	uxth	r3, r3
 800d868:	3b01      	subs	r3, #1
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	695b      	ldr	r3, [r3, #20]
 800d876:	f003 0304 	and.w	r3, r3, #4
 800d87a:	2b04      	cmp	r3, #4
 800d87c:	d118      	bne.n	800d8b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691a      	ldr	r2, [r3, #16]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d888:	b2d2      	uxtb	r2, r2
 800d88a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d89a:	3b01      	subs	r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	3b01      	subs	r3, #1
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	f47f aec2 	bne.w	800d63e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	e000      	b.n	800d8d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d8d6:	2302      	movs	r3, #2
  }
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3728      	adds	r7, #40	; 0x28
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}
 800d8e0:	00010004 	.word	0x00010004

0800d8e4 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	461a      	mov	r2, r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	817b      	strh	r3, [r7, #10]
 800d8f6:	460b      	mov	r3, r1
 800d8f8:	813b      	strh	r3, [r7, #8]
 800d8fa:	4613      	mov	r3, r2
 800d8fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d8fe:	2300      	movs	r3, #0
 800d900:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	f040 808e 	bne.w	800da2c <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d910:	4b4a      	ldr	r3, [pc, #296]	; (800da3c <HAL_I2C_Mem_Write_IT+0x158>)
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	08db      	lsrs	r3, r3, #3
 800d916:	4a4a      	ldr	r2, [pc, #296]	; (800da40 <HAL_I2C_Mem_Write_IT+0x15c>)
 800d918:	fba2 2303 	umull	r2, r3, r2, r3
 800d91c:	0a1a      	lsrs	r2, r3, #8
 800d91e:	4613      	mov	r3, r2
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	4413      	add	r3, r2
 800d924:	009a      	lsls	r2, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d116      	bne.n	800d964 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2220      	movs	r2, #32
 800d940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2200      	movs	r2, #0
 800d948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d950:	f043 0220 	orr.w	r2, r3, #32
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2200      	movs	r2, #0
 800d95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d960:	2301      	movs	r3, #1
 800d962:	e064      	b.n	800da2e <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	699b      	ldr	r3, [r3, #24]
 800d96a:	f003 0302 	and.w	r3, r3, #2
 800d96e:	2b02      	cmp	r3, #2
 800d970:	d0db      	beq.n	800d92a <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d101      	bne.n	800d980 <HAL_I2C_Mem_Write_IT+0x9c>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e056      	b.n	800da2e <HAL_I2C_Mem_Write_IT+0x14a>
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2201      	movs	r2, #1
 800d984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b01      	cmp	r3, #1
 800d994:	d007      	beq.n	800d9a6 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	681a      	ldr	r2, [r3, #0]
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f042 0201 	orr.w	r2, r2, #1
 800d9a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	681a      	ldr	r2, [r3, #0]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d9b4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2221      	movs	r2, #33	; 0x21
 800d9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2240      	movs	r2, #64	; 0x40
 800d9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a3a      	ldr	r2, [r7, #32]
 800d9d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9dc:	b29a      	uxth	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	4a17      	ldr	r2, [pc, #92]	; (800da44 <HAL_I2C_Mem_Write_IT+0x160>)
 800d9e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d9e8:	897a      	ldrh	r2, [r7, #10]
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d9ee:	893a      	ldrh	r2, [r7, #8]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d9f4:	88fa      	ldrh	r2, [r7, #6]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	681a      	ldr	r2, [r3, #0]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da0e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2200      	movs	r2, #0
 800da14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800da26:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800da28:	2300      	movs	r3, #0
 800da2a:	e000      	b.n	800da2e <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800da2c:	2302      	movs	r3, #2
  }
}
 800da2e:	4618      	mov	r0, r3
 800da30:	371c      	adds	r7, #28
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	20000058 	.word	0x20000058
 800da40:	14f8b589 	.word	0x14f8b589
 800da44:	ffff0000 	.word	0xffff0000

0800da48 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800da48:	b480      	push	{r7}
 800da4a:	b087      	sub	sp, #28
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	4608      	mov	r0, r1
 800da52:	4611      	mov	r1, r2
 800da54:	461a      	mov	r2, r3
 800da56:	4603      	mov	r3, r0
 800da58:	817b      	strh	r3, [r7, #10]
 800da5a:	460b      	mov	r3, r1
 800da5c:	813b      	strh	r3, [r7, #8]
 800da5e:	4613      	mov	r3, r2
 800da60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800da62:	2300      	movs	r3, #0
 800da64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	2b20      	cmp	r3, #32
 800da70:	f040 809a 	bne.w	800dba8 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800da74:	4b50      	ldr	r3, [pc, #320]	; (800dbb8 <HAL_I2C_Mem_Read_IT+0x170>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	08db      	lsrs	r3, r3, #3
 800da7a:	4a50      	ldr	r2, [pc, #320]	; (800dbbc <HAL_I2C_Mem_Read_IT+0x174>)
 800da7c:	fba2 2303 	umull	r2, r3, r2, r3
 800da80:	0a1a      	lsrs	r2, r3, #8
 800da82:	4613      	mov	r3, r2
 800da84:	009b      	lsls	r3, r3, #2
 800da86:	4413      	add	r3, r2
 800da88:	009a      	lsls	r2, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	3b01      	subs	r3, #1
 800da92:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d116      	bne.n	800dac8 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2200      	movs	r2, #0
 800da9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	2220      	movs	r2, #32
 800daa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dab4:	f043 0220 	orr.w	r2, r3, #32
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dac4:	2301      	movs	r3, #1
 800dac6:	e070      	b.n	800dbaa <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	699b      	ldr	r3, [r3, #24]
 800dace:	f003 0302 	and.w	r3, r3, #2
 800dad2:	2b02      	cmp	r3, #2
 800dad4:	d0db      	beq.n	800da8e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d101      	bne.n	800dae4 <HAL_I2C_Mem_Read_IT+0x9c>
 800dae0:	2302      	movs	r3, #2
 800dae2:	e062      	b.n	800dbaa <HAL_I2C_Mem_Read_IT+0x162>
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 0301 	and.w	r3, r3, #1
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d007      	beq.n	800db0a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f042 0201 	orr.w	r2, r2, #1
 800db08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	681a      	ldr	r2, [r3, #0]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db18:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	2222      	movs	r2, #34	; 0x22
 800db1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2240      	movs	r2, #64	; 0x40
 800db26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	6a3a      	ldr	r2, [r7, #32]
 800db34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800db3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db40:	b29a      	uxth	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	4a1d      	ldr	r2, [pc, #116]	; (800dbc0 <HAL_I2C_Mem_Read_IT+0x178>)
 800db4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800db4c:	897a      	ldrh	r2, [r7, #10]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800db52:	893a      	ldrh	r2, [r7, #8]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800db58:	88fa      	ldrh	r2, [r7, #6]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	681a      	ldr	r2, [r3, #0]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db72:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db82:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db90:	2b00      	cmp	r3, #0
 800db92:	d007      	beq.n	800dba4 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	685a      	ldr	r2, [r3, #4]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800dba2:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800dba4:	2300      	movs	r3, #0
 800dba6:	e000      	b.n	800dbaa <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800dba8:	2302      	movs	r3, #2
  }
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	371c      	adds	r7, #28
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	20000058 	.word	0x20000058
 800dbbc:	14f8b589 	.word	0x14f8b589
 800dbc0:	ffff0000 	.word	0xffff0000

0800dbc4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b08a      	sub	sp, #40	; 0x28
 800dbc8:	af02      	add	r7, sp, #8
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	4608      	mov	r0, r1
 800dbce:	4611      	mov	r1, r2
 800dbd0:	461a      	mov	r2, r3
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	817b      	strh	r3, [r7, #10]
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	813b      	strh	r3, [r7, #8]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dbe2:	f7f9 f9db 	bl	8006f9c <HAL_GetTick>
 800dbe6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	2b20      	cmp	r3, #32
 800dbf2:	f040 8145 	bne.w	800de80 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dbf6:	4b9d      	ldr	r3, [pc, #628]	; (800de6c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	08db      	lsrs	r3, r3, #3
 800dbfc:	4a9c      	ldr	r2, [pc, #624]	; (800de70 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800dbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800dc02:	0a1a      	lsrs	r2, r3, #8
 800dc04:	4613      	mov	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	009a      	lsls	r2, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d116      	bne.n	800dc4a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2220      	movs	r2, #32
 800dc26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc36:	f043 0220 	orr.w	r2, r3, #32
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e11b      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	f003 0302 	and.w	r3, r3, #2
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d0db      	beq.n	800dc10 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_I2C_Mem_Write_DMA+0xa2>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e10d      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f003 0301 	and.w	r3, r3, #1
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d007      	beq.n	800dc8c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681a      	ldr	r2, [r3, #0]
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f042 0201 	orr.w	r2, r2, #1
 800dc8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dc9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2221      	movs	r2, #33	; 0x21
 800dca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	2240      	movs	r2, #64	; 0x40
 800dca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800dcbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcc2:	b29a      	uxth	r2, r3
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	4a6a      	ldr	r2, [pc, #424]	; (800de74 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800dccc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dcce:	897a      	ldrh	r2, [r7, #10]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800dcd4:	893a      	ldrh	r2, [r7, #8]
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800dcda:	88fa      	ldrh	r2, [r7, #6]
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f000 80a9 	beq.w	800de42 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d02a      	beq.n	800dd4e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfc:	4a5e      	ldr	r2, [pc, #376]	; (800de78 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800dcfe:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd04:	4a5d      	ldr	r2, [pc, #372]	; (800de7c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800dd06:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd14:	2200      	movs	r2, #0
 800dd16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd24:	2200      	movs	r2, #0
 800dd26:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd30:	4619      	mov	r1, r3
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	3310      	adds	r3, #16
 800dd38:	461a      	mov	r2, r3
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd3e:	f7fa fb96 	bl	800846e <HAL_DMA_Start_IT>
 800dd42:	4603      	mov	r3, r0
 800dd44:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dd46:	7efb      	ldrb	r3, [r7, #27]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d166      	bne.n	800de1a <HAL_I2C_Mem_Write_DMA+0x256>
 800dd4c:	e013      	b.n	800dd76 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2220      	movs	r2, #32
 800dd52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800dd72:	2301      	movs	r3, #1
 800dd74:	e085      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800dd76:	88f8      	ldrh	r0, [r7, #6]
 800dd78:	893a      	ldrh	r2, [r7, #8]
 800dd7a:	8979      	ldrh	r1, [r7, #10]
 800dd7c:	69fb      	ldr	r3, [r7, #28]
 800dd7e:	9301      	str	r3, [sp, #4]
 800dd80:	2323      	movs	r3, #35	; 0x23
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	4603      	mov	r3, r0
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f003 f98c 	bl	80110a4 <I2C_RequestMemoryWrite>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d022      	beq.n	800ddd8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fa fc31 	bl	80085fe <HAL_DMA_Abort_IT>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda4:	2200      	movs	r2, #0
 800dda6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681a      	ldr	r2, [r3, #0]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddb6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f022 0201 	bic.w	r2, r2, #1
 800ddd2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	e054      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	695b      	ldr	r3, [r3, #20]
 800dde2:	613b      	str	r3, [r7, #16]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	699b      	ldr	r3, [r3, #24]
 800ddea:	613b      	str	r3, [r7, #16]
 800ddec:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	685a      	ldr	r2, [r3, #4]
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de04:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	685a      	ldr	r2, [r3, #4]
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de14:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	e033      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2220      	movs	r2, #32
 800de1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2e:	f043 0210 	orr.w	r2, r3, #16
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de3e:	2301      	movs	r3, #1
 800de40:	e01f      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2220      	movs	r2, #32
 800de46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800de66:	2301      	movs	r3, #1
 800de68:	e00b      	b.n	800de82 <HAL_I2C_Mem_Write_DMA+0x2be>
 800de6a:	bf00      	nop
 800de6c:	20000058 	.word	0x20000058
 800de70:	14f8b589 	.word	0x14f8b589
 800de74:	ffff0000 	.word	0xffff0000
 800de78:	080113a1 	.word	0x080113a1
 800de7c:	0801154b 	.word	0x0801154b
    }
  }
  else
  {
    return HAL_BUSY;
 800de80:	2302      	movs	r3, #2
  }
}
 800de82:	4618      	mov	r0, r3
 800de84:	3720      	adds	r7, #32
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b08c      	sub	sp, #48	; 0x30
 800de8e:	af02      	add	r7, sp, #8
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	4608      	mov	r0, r1
 800de94:	4611      	mov	r1, r2
 800de96:	461a      	mov	r2, r3
 800de98:	4603      	mov	r3, r0
 800de9a:	817b      	strh	r3, [r7, #10]
 800de9c:	460b      	mov	r3, r1
 800de9e:	813b      	strh	r3, [r7, #8]
 800dea0:	4613      	mov	r3, r2
 800dea2:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800dea4:	f7f9 f87a 	bl	8006f9c <HAL_GetTick>
 800dea8:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800deaa:	2300      	movs	r3, #0
 800deac:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	2b20      	cmp	r3, #32
 800deb8:	f040 8175 	bne.w	800e1a6 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800debc:	4b94      	ldr	r3, [pc, #592]	; (800e110 <HAL_I2C_Mem_Read_DMA+0x286>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	08db      	lsrs	r3, r3, #3
 800dec2:	4a94      	ldr	r2, [pc, #592]	; (800e114 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800dec4:	fba2 2303 	umull	r2, r3, r2, r3
 800dec8:	0a1a      	lsrs	r2, r3, #8
 800deca:	4613      	mov	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4413      	add	r3, r2
 800ded0:	009a      	lsls	r2, r3, #2
 800ded2:	4413      	add	r3, r2
 800ded4:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	3b01      	subs	r3, #1
 800deda:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d116      	bne.n	800df10 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2200      	movs	r2, #0
 800dee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2220      	movs	r2, #32
 800deec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	2200      	movs	r2, #0
 800def4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800defc:	f043 0220 	orr.w	r2, r3, #32
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	e14b      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	f003 0302 	and.w	r3, r3, #2
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d0db      	beq.n	800ded6 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df24:	2b01      	cmp	r3, #1
 800df26:	d101      	bne.n	800df2c <HAL_I2C_Mem_Read_DMA+0xa2>
 800df28:	2302      	movs	r3, #2
 800df2a:	e13d      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f003 0301 	and.w	r3, r3, #1
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d007      	beq.n	800df52 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f042 0201 	orr.w	r2, r2, #1
 800df50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df60:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2222      	movs	r2, #34	; 0x22
 800df66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	2240      	movs	r2, #64	; 0x40
 800df6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800df82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800df88:	b29a      	uxth	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	4a61      	ldr	r2, [pc, #388]	; (800e118 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800df92:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800df94:	897a      	ldrh	r2, [r7, #10]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800df9a:	893a      	ldrh	r2, [r7, #8]
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800dfa0:	88fa      	ldrh	r2, [r7, #6]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	f000 80cb 	beq.w	800e14c <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d02d      	beq.n	800e01a <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc2:	4a56      	ldr	r2, [pc, #344]	; (800e11c <HAL_I2C_Mem_Read_DMA+0x292>)
 800dfc4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfca:	4a55      	ldr	r2, [pc, #340]	; (800e120 <HAL_I2C_Mem_Read_DMA+0x296>)
 800dfcc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfda:	2200      	movs	r2, #0
 800dfdc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfea:	2200      	movs	r2, #0
 800dfec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	3310      	adds	r3, #16
 800dff8:	4619      	mov	r1, r3
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffe:	461a      	mov	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e004:	f7fa fa33 	bl	800846e <HAL_DMA_Start_IT>
 800e008:	4603      	mov	r3, r0
 800e00a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e00e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e012:	2b00      	cmp	r3, #0
 800e014:	f040 8086 	bne.w	800e124 <HAL_I2C_Mem_Read_DMA+0x29a>
 800e018:	e013      	b.n	800e042 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2220      	movs	r2, #32
 800e01e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e02e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	e0b2      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800e042:	88f8      	ldrh	r0, [r7, #6]
 800e044:	893a      	ldrh	r2, [r7, #8]
 800e046:	8979      	ldrh	r1, [r7, #10]
 800e048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04a:	9301      	str	r3, [sp, #4]
 800e04c:	2323      	movs	r3, #35	; 0x23
 800e04e:	9300      	str	r3, [sp, #0]
 800e050:	4603      	mov	r3, r0
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f003 f8bc 	bl	80111d0 <I2C_RequestMemoryRead>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d023      	beq.n	800e0a6 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e062:	4618      	mov	r0, r3
 800e064:	f7fa facb 	bl	80085fe <HAL_DMA_Abort_IT>
 800e068:	4603      	mov	r3, r0
 800e06a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e072:	2200      	movs	r2, #0
 800e074:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e084:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	2200      	movs	r2, #0
 800e08a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2200      	movs	r2, #0
 800e090:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	f022 0201 	bic.w	r2, r2, #1
 800e0a0:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	e080      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d108      	bne.n	800e0c0 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e0bc:	601a      	str	r2, [r3, #0]
 800e0be:	e007      	b.n	800e0d0 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	685a      	ldr	r2, [r3, #4]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	617b      	str	r3, [r7, #20]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	695b      	ldr	r3, [r3, #20]
 800e0da:	617b      	str	r3, [r7, #20]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	699b      	ldr	r3, [r3, #24]
 800e0e2:	617b      	str	r3, [r7, #20]
 800e0e4:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	685a      	ldr	r2, [r3, #4]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0fc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e10c:	605a      	str	r2, [r3, #4]
 800e10e:	e048      	b.n	800e1a2 <HAL_I2C_Mem_Read_DMA+0x318>
 800e110:	20000058 	.word	0x20000058
 800e114:	14f8b589 	.word	0x14f8b589
 800e118:	ffff0000 	.word	0xffff0000
 800e11c:	080113a1 	.word	0x080113a1
 800e120:	0801154b 	.word	0x0801154b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2220      	movs	r2, #32
 800e128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e138:	f043 0210 	orr.w	r2, r3, #16
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	e02d      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800e14c:	88f8      	ldrh	r0, [r7, #6]
 800e14e:	893a      	ldrh	r2, [r7, #8]
 800e150:	8979      	ldrh	r1, [r7, #10]
 800e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	2323      	movs	r3, #35	; 0x23
 800e158:	9300      	str	r3, [sp, #0]
 800e15a:	4603      	mov	r3, r0
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f003 f837 	bl	80111d0 <I2C_RequestMemoryRead>
 800e162:	4603      	mov	r3, r0
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e01d      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e16c:	2300      	movs	r3, #0
 800e16e:	61bb      	str	r3, [r7, #24]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	695b      	ldr	r3, [r3, #20]
 800e176:	61bb      	str	r3, [r7, #24]
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	699b      	ldr	r3, [r3, #24]
 800e17e:	61bb      	str	r3, [r7, #24]
 800e180:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681a      	ldr	r2, [r3, #0]
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e190:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2220      	movs	r2, #32
 800e196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	e000      	b.n	800e1a8 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800e1a6:	2302      	movs	r3, #2
  }
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3728      	adds	r7, #40	; 0x28
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b08a      	sub	sp, #40	; 0x28
 800e1b4:	af02      	add	r7, sp, #8
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	607a      	str	r2, [r7, #4]
 800e1ba:	603b      	str	r3, [r7, #0]
 800e1bc:	460b      	mov	r3, r1
 800e1be:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800e1c0:	f7f8 feec 	bl	8006f9c <HAL_GetTick>
 800e1c4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1d0:	b2db      	uxtb	r3, r3
 800e1d2:	2b20      	cmp	r3, #32
 800e1d4:	f040 8111 	bne.w	800e3fa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	9300      	str	r3, [sp, #0]
 800e1dc:	2319      	movs	r3, #25
 800e1de:	2201      	movs	r2, #1
 800e1e0:	4988      	ldr	r1, [pc, #544]	; (800e404 <HAL_I2C_IsDeviceReady+0x254>)
 800e1e2:	68f8      	ldr	r0, [r7, #12]
 800e1e4:	f003 fa96 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800e1ee:	2302      	movs	r3, #2
 800e1f0:	e104      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d101      	bne.n	800e200 <HAL_I2C_IsDeviceReady+0x50>
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	e0fd      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f003 0301 	and.w	r3, r3, #1
 800e212:	2b01      	cmp	r3, #1
 800e214:	d007      	beq.n	800e226 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f042 0201 	orr.w	r2, r2, #1
 800e224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	681a      	ldr	r2, [r3, #0]
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e234:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2224      	movs	r2, #36	; 0x24
 800e23a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	4a70      	ldr	r2, [pc, #448]	; (800e408 <HAL_I2C_IsDeviceReady+0x258>)
 800e248:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e258:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	9300      	str	r3, [sp, #0]
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	2200      	movs	r2, #0
 800e262:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f003 fa54 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800e26c:	4603      	mov	r3, r0
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00d      	beq.n	800e28e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e27c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e280:	d103      	bne.n	800e28a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e288:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800e28a:	2303      	movs	r3, #3
 800e28c:	e0b6      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800e28e:	897b      	ldrh	r3, [r7, #10]
 800e290:	b2db      	uxtb	r3, r3
 800e292:	461a      	mov	r2, r3
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800e29c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800e29e:	f7f8 fe7d 	bl	8006f9c <HAL_GetTick>
 800e2a2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	695b      	ldr	r3, [r3, #20]
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b02      	cmp	r3, #2
 800e2b0:	bf0c      	ite	eq
 800e2b2:	2301      	moveq	r3, #1
 800e2b4:	2300      	movne	r3, #0
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2c8:	bf0c      	ite	eq
 800e2ca:	2301      	moveq	r3, #1
 800e2cc:	2300      	movne	r3, #0
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e2d2:	e025      	b.n	800e320 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e2d4:	f7f8 fe62 	bl	8006f9c <HAL_GetTick>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	683a      	ldr	r2, [r7, #0]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d302      	bcc.n	800e2ea <HAL_I2C_IsDeviceReady+0x13a>
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d103      	bne.n	800e2f2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	22a0      	movs	r2, #160	; 0xa0
 800e2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	695b      	ldr	r3, [r3, #20]
 800e2f8:	f003 0302 	and.w	r3, r3, #2
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	bf0c      	ite	eq
 800e300:	2301      	moveq	r3, #1
 800e302:	2300      	movne	r3, #0
 800e304:	b2db      	uxtb	r3, r3
 800e306:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	695b      	ldr	r3, [r3, #20]
 800e30e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e316:	bf0c      	ite	eq
 800e318:	2301      	moveq	r3, #1
 800e31a:	2300      	movne	r3, #0
 800e31c:	b2db      	uxtb	r3, r3
 800e31e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2ba0      	cmp	r3, #160	; 0xa0
 800e32a:	d005      	beq.n	800e338 <HAL_I2C_IsDeviceReady+0x188>
 800e32c:	7dfb      	ldrb	r3, [r7, #23]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d102      	bne.n	800e338 <HAL_I2C_IsDeviceReady+0x188>
 800e332:	7dbb      	ldrb	r3, [r7, #22]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d0cd      	beq.n	800e2d4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2220      	movs	r2, #32
 800e33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d129      	bne.n	800e3a2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e35c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e35e:	2300      	movs	r3, #0
 800e360:	613b      	str	r3, [r7, #16]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	613b      	str	r3, [r7, #16]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	613b      	str	r3, [r7, #16]
 800e372:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	9300      	str	r3, [sp, #0]
 800e378:	2319      	movs	r3, #25
 800e37a:	2201      	movs	r2, #1
 800e37c:	4921      	ldr	r1, [pc, #132]	; (800e404 <HAL_I2C_IsDeviceReady+0x254>)
 800e37e:	68f8      	ldr	r0, [r7, #12]
 800e380:	f003 f9c8 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d001      	beq.n	800e38e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e036      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2220      	movs	r2, #32
 800e392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	e02c      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	681a      	ldr	r2, [r3, #0]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e3b0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800e3ba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	9300      	str	r3, [sp, #0]
 800e3c0:	2319      	movs	r3, #25
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	490f      	ldr	r1, [pc, #60]	; (800e404 <HAL_I2C_IsDeviceReady+0x254>)
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f003 f9a4 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d001      	beq.n	800e3d6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	e012      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800e3d6:	69bb      	ldr	r3, [r7, #24]
 800e3d8:	3301      	adds	r3, #1
 800e3da:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800e3dc:	69ba      	ldr	r2, [r7, #24]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	f4ff af32 	bcc.w	800e24a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2220      	movs	r2, #32
 800e3ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e000      	b.n	800e3fc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800e3fa:	2302      	movs	r3, #2
  }
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3720      	adds	r7, #32
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	00100002 	.word	0x00100002
 800e408:	ffff0000 	.word	0xffff0000

0800e40c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b087      	sub	sp, #28
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	607a      	str	r2, [r7, #4]
 800e416:	461a      	mov	r2, r3
 800e418:	460b      	mov	r3, r1
 800e41a:	817b      	strh	r3, [r7, #10]
 800e41c:	4613      	mov	r3, r2
 800e41e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e420:	2300      	movs	r3, #0
 800e422:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800e424:	2300      	movs	r3, #0
 800e426:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b20      	cmp	r3, #32
 800e432:	f040 80a6 	bne.w	800e582 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e444:	d005      	beq.n	800e452 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e446:	6a3b      	ldr	r3, [r7, #32]
 800e448:	2b08      	cmp	r3, #8
 800e44a:	d002      	beq.n	800e452 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d130      	bne.n	800e4b4 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e452:	4b4f      	ldr	r3, [pc, #316]	; (800e590 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	08db      	lsrs	r3, r3, #3
 800e458:	4a4e      	ldr	r2, [pc, #312]	; (800e594 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800e45a:	fba2 2303 	umull	r2, r3, r2, r3
 800e45e:	0a1a      	lsrs	r2, r3, #8
 800e460:	4613      	mov	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	009a      	lsls	r2, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	3b01      	subs	r3, #1
 800e470:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d116      	bne.n	800e4a6 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2200      	movs	r2, #0
 800e47c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	2220      	movs	r2, #32
 800e482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2200      	movs	r2, #0
 800e48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e492:	f043 0220 	orr.w	r2, r3, #32
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e06e      	b.n	800e584 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	f003 0302 	and.w	r3, r3, #2
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d0db      	beq.n	800e46c <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d101      	bne.n	800e4c2 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800e4be:	2302      	movs	r3, #2
 800e4c0:	e060      	b.n	800e584 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	2201      	movs	r2, #1
 800e4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f003 0301 	and.w	r3, r3, #1
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d007      	beq.n	800e4e8 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681a      	ldr	r2, [r3, #0]
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	f042 0201 	orr.w	r2, r2, #1
 800e4e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e4f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2221      	movs	r2, #33	; 0x21
 800e4fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2210      	movs	r2, #16
 800e504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	893a      	ldrh	r2, [r7, #8]
 800e518:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e51e:	b29a      	uxth	r2, r3
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6a3a      	ldr	r2, [r7, #32]
 800e528:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e52a:	897a      	ldrh	r2, [r7, #10]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e534:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b11      	cmp	r3, #17
 800e53a:	d10c      	bne.n	800e556 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800e53c:	6a3b      	ldr	r3, [r7, #32]
 800e53e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e542:	d003      	beq.n	800e54c <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800e544:	6a3b      	ldr	r3, [r7, #32]
 800e546:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e54a:	d101      	bne.n	800e550 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800e54c:	2301      	movs	r3, #1
 800e54e:	e000      	b.n	800e552 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800e550:	2300      	movs	r3, #0
 800e552:	2b01      	cmp	r3, #1
 800e554:	d107      	bne.n	800e566 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e564:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2200      	movs	r2, #0
 800e56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	685a      	ldr	r2, [r3, #4]
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e57c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	e000      	b.n	800e584 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800e582:	2302      	movs	r3, #2
  }
}
 800e584:	4618      	mov	r0, r3
 800e586:	371c      	adds	r7, #28
 800e588:	46bd      	mov	sp, r7
 800e58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58e:	4770      	bx	lr
 800e590:	20000058 	.word	0x20000058
 800e594:	14f8b589 	.word	0x14f8b589

0800e598 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b088      	sub	sp, #32
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	607a      	str	r2, [r7, #4]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	817b      	strh	r3, [r7, #10]
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	2b20      	cmp	r3, #32
 800e5be:	f040 8149 	bne.w	800e854 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e5cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5d0:	d005      	beq.n	800e5de <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5d4:	2b08      	cmp	r3, #8
 800e5d6:	d002      	beq.n	800e5de <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5da:	2b01      	cmp	r3, #1
 800e5dc:	d130      	bne.n	800e640 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e5de:	4b99      	ldr	r3, [pc, #612]	; (800e844 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	08db      	lsrs	r3, r3, #3
 800e5e4:	4a98      	ldr	r2, [pc, #608]	; (800e848 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800e5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5ea:	0a1a      	lsrs	r2, r3, #8
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	009a      	lsls	r2, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d116      	bne.n	800e632 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2200      	movs	r2, #0
 800e608:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2220      	movs	r2, #32
 800e60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2200      	movs	r2, #0
 800e616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e61e:	f043 0220 	orr.w	r2, r3, #32
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e62e:	2301      	movs	r3, #1
 800e630:	e111      	b.n	800e856 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	699b      	ldr	r3, [r3, #24]
 800e638:	f003 0302 	and.w	r3, r3, #2
 800e63c:	2b02      	cmp	r3, #2
 800e63e:	d0db      	beq.n	800e5f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e646:	2b01      	cmp	r3, #1
 800e648:	d101      	bne.n	800e64e <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800e64a:	2302      	movs	r3, #2
 800e64c:	e103      	b.n	800e856 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	f003 0301 	and.w	r3, r3, #1
 800e660:	2b01      	cmp	r3, #1
 800e662:	d007      	beq.n	800e674 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f042 0201 	orr.w	r2, r2, #1
 800e672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2221      	movs	r2, #33	; 0x21
 800e688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2210      	movs	r2, #16
 800e690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2200      	movs	r2, #0
 800e698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	687a      	ldr	r2, [r7, #4]
 800e69e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	893a      	ldrh	r2, [r7, #8]
 800e6a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6b4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e6b6:	897a      	ldrh	r2, [r7, #10]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c0:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f000 808d 	beq.w	800e7e6 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d022      	beq.n	800e71a <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d8:	4a5c      	ldr	r2, [pc, #368]	; (800e84c <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800e6da:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e0:	4a5b      	ldr	r2, [pc, #364]	; (800e850 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800e6e2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	3310      	adds	r3, #16
 800e704:	461a      	mov	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e70a:	f7f9 feb0 	bl	800846e <HAL_DMA_Start_IT>
 800e70e:	4603      	mov	r3, r0
 800e710:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800e712:	7ffb      	ldrb	r3, [r7, #31]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d152      	bne.n	800e7be <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800e718:	e013      	b.n	800e742 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2220      	movs	r2, #32
 800e71e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	2200      	movs	r2, #0
 800e726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e72e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	e089      	b.n	800e856 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681a      	ldr	r2, [r3, #0]
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e750:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e752:	69bb      	ldr	r3, [r7, #24]
 800e754:	2b11      	cmp	r3, #17
 800e756:	d10c      	bne.n	800e772 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e75e:	d003      	beq.n	800e768 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800e760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e762:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e766:	d101      	bne.n	800e76c <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800e768:	2301      	movs	r3, #1
 800e76a:	e000      	b.n	800e76e <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800e76c:	2300      	movs	r3, #0
 800e76e:	2b01      	cmp	r3, #1
 800e770:	d107      	bne.n	800e782 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e780:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d005      	beq.n	800e79c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e792:	2b20      	cmp	r3, #32
 800e794:	d002      	beq.n	800e79c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800e796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e798:	2b10      	cmp	r3, #16
 800e79a:	d107      	bne.n	800e7ac <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	685a      	ldr	r2, [r3, #4]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7aa:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e7ba:	605a      	str	r2, [r3, #4]
 800e7bc:	e03f      	b.n	800e83e <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	2220      	movs	r2, #32
 800e7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7d2:	f043 0210 	orr.w	r2, r3, #16
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e037      	b.n	800e856 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e7f4:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e7f6:	69bb      	ldr	r3, [r7, #24]
 800e7f8:	2b11      	cmp	r3, #17
 800e7fa:	d10c      	bne.n	800e816 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e802:	d003      	beq.n	800e80c <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800e804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e806:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e80a:	d101      	bne.n	800e810 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800e80c:	2301      	movs	r3, #1
 800e80e:	e000      	b.n	800e812 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800e810:	2300      	movs	r3, #0
 800e812:	2b01      	cmp	r3, #1
 800e814:	d107      	bne.n	800e826 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e824:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	685a      	ldr	r2, [r3, #4]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e83c:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800e83e:	2300      	movs	r3, #0
 800e840:	e009      	b.n	800e856 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800e842:	bf00      	nop
 800e844:	20000058 	.word	0x20000058
 800e848:	14f8b589 	.word	0x14f8b589
 800e84c:	080113a1 	.word	0x080113a1
 800e850:	0801154b 	.word	0x0801154b
  }
  else
  {
    return HAL_BUSY;
 800e854:	2302      	movs	r3, #2
  }
}
 800e856:	4618      	mov	r0, r3
 800e858:	3720      	adds	r7, #32
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e85e:	b480      	push	{r7}
 800e860:	b089      	sub	sp, #36	; 0x24
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	607a      	str	r2, [r7, #4]
 800e868:	461a      	mov	r2, r3
 800e86a:	460b      	mov	r3, r1
 800e86c:	817b      	strh	r3, [r7, #10]
 800e86e:	4613      	mov	r3, r2
 800e870:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e872:	2300      	movs	r3, #0
 800e874:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e876:	2300      	movs	r3, #0
 800e878:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e87a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e87e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b20      	cmp	r3, #32
 800e88a:	f040 80da 	bne.w	800ea42 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e89c:	d005      	beq.n	800e8aa <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a0:	2b08      	cmp	r3, #8
 800e8a2:	d002      	beq.n	800e8aa <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	2b01      	cmp	r3, #1
 800e8a8:	d130      	bne.n	800e90c <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e8aa:	4b69      	ldr	r3, [pc, #420]	; (800ea50 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	08db      	lsrs	r3, r3, #3
 800e8b0:	4a68      	ldr	r2, [pc, #416]	; (800ea54 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800e8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8b6:	0a1a      	lsrs	r2, r3, #8
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	4413      	add	r3, r2
 800e8be:	009a      	lsls	r2, r3, #2
 800e8c0:	4413      	add	r3, r2
 800e8c2:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	3b01      	subs	r3, #1
 800e8c8:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d116      	bne.n	800e8fe <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2220      	movs	r2, #32
 800e8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8ea:	f043 0220 	orr.w	r2, r3, #32
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e0a2      	b.n	800ea44 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	699b      	ldr	r3, [r3, #24]
 800e904:	f003 0302 	and.w	r3, r3, #2
 800e908:	2b02      	cmp	r3, #2
 800e90a:	d0db      	beq.n	800e8c4 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e912:	2b01      	cmp	r3, #1
 800e914:	d101      	bne.n	800e91a <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800e916:	2302      	movs	r3, #2
 800e918:	e094      	b.n	800ea44 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2201      	movs	r2, #1
 800e91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d007      	beq.n	800e940 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f042 0201 	orr.w	r2, r2, #1
 800e93e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e94e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2222      	movs	r2, #34	; 0x22
 800e954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2210      	movs	r2, #16
 800e95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	2200      	movs	r2, #0
 800e964:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	687a      	ldr	r2, [r7, #4]
 800e96a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	893a      	ldrh	r2, [r7, #8]
 800e970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e976:	b29a      	uxth	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e980:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e982:	897a      	ldrh	r2, [r7, #10]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e98c:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e992:	b29b      	uxth	r3, r3
 800e994:	2b02      	cmp	r3, #2
 800e996:	d126      	bne.n	800e9e6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	2b20      	cmp	r3, #32
 800e99c:	d002      	beq.n	800e9a4 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a0:	2b10      	cmp	r3, #16
 800e9a2:	d120      	bne.n	800e9e6 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	2b12      	cmp	r3, #18
 800e9a8:	d114      	bne.n	800e9d4 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	681a      	ldr	r2, [r3, #0]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e9b8:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9c8:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e9ca:	69fb      	ldr	r3, [r7, #28]
 800e9cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e9d0:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e9d2:	e010      	b.n	800e9f6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9e2:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e9e4:	e007      	b.n	800e9f6 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	681a      	ldr	r2, [r3, #0]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9f4:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	2b12      	cmp	r3, #18
 800e9fa:	d10c      	bne.n	800ea16 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fe:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ea02:	d003      	beq.n	800ea0c <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800ea04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea06:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ea0a:	d101      	bne.n	800ea10 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	e000      	b.n	800ea12 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800ea10:	2300      	movs	r3, #0
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d107      	bne.n	800ea26 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ea24:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	6859      	ldr	r1, [r3, #4]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	430a      	orrs	r2, r1
 800ea3c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	e000      	b.n	800ea44 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800ea42:	2302      	movs	r3, #2
  }
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3724      	adds	r7, #36	; 0x24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	20000058 	.word	0x20000058
 800ea54:	14f8b589 	.word	0x14f8b589

0800ea58 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	607a      	str	r2, [r7, #4]
 800ea62:	461a      	mov	r2, r3
 800ea64:	460b      	mov	r3, r1
 800ea66:	817b      	strh	r3, [r7, #10]
 800ea68:	4613      	mov	r3, r2
 800ea6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800ea70:	2300      	movs	r3, #0
 800ea72:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ea74:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800ea78:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	2b20      	cmp	r3, #32
 800ea84:	f040 8199 	bne.w	800edba <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ea92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea96:	d005      	beq.n	800eaa4 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800ea98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea9a:	2b08      	cmp	r3, #8
 800ea9c:	d002      	beq.n	800eaa4 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800ea9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d130      	bne.n	800eb06 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800eaa4:	4b8f      	ldr	r3, [pc, #572]	; (800ece4 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	08db      	lsrs	r3, r3, #3
 800eaaa:	4a8f      	ldr	r2, [pc, #572]	; (800ece8 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800eaac:	fba2 2303 	umull	r2, r3, r2, r3
 800eab0:	0a1a      	lsrs	r2, r3, #8
 800eab2:	4613      	mov	r3, r2
 800eab4:	009b      	lsls	r3, r3, #2
 800eab6:	4413      	add	r3, r2
 800eab8:	009a      	lsls	r2, r3, #2
 800eaba:	4413      	add	r3, r2
 800eabc:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	3b01      	subs	r3, #1
 800eac2:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d116      	bne.n	800eaf8 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2200      	movs	r2, #0
 800eace:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2220      	movs	r2, #32
 800ead4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae4:	f043 0220 	orr.w	r2, r3, #32
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	e161      	b.n	800edbc <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	699b      	ldr	r3, [r3, #24]
 800eafe:	f003 0302 	and.w	r3, r3, #2
 800eb02:	2b02      	cmp	r3, #2
 800eb04:	d0db      	beq.n	800eabe <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb0c:	2b01      	cmp	r3, #1
 800eb0e:	d101      	bne.n	800eb14 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800eb10:	2302      	movs	r3, #2
 800eb12:	e153      	b.n	800edbc <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f003 0301 	and.w	r3, r3, #1
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d007      	beq.n	800eb3a <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	681a      	ldr	r2, [r3, #0]
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f042 0201 	orr.w	r2, r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	681a      	ldr	r2, [r3, #0]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eb48:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	685a      	ldr	r2, [r3, #4]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800eb58:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	2222      	movs	r2, #34	; 0x22
 800eb5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2210      	movs	r2, #16
 800eb66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	893a      	ldrh	r2, [r7, #8]
 800eb7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb80:	b29a      	uxth	r2, r3
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800eb8c:	897a      	ldrh	r2, [r7, #10]
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb96:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	f000 80de 	beq.w	800ed5e <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	2b02      	cmp	r3, #2
 800ebaa:	d12a      	bne.n	800ec02 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800ebac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebae:	2b20      	cmp	r3, #32
 800ebb0:	d002      	beq.n	800ebb8 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800ebb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebb4:	2b10      	cmp	r3, #16
 800ebb6:	d124      	bne.n	800ec02 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	2b12      	cmp	r3, #18
 800ebbc:	d118      	bne.n	800ebf0 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebcc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebdc:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	685a      	ldr	r2, [r3, #4]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ebec:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800ebee:	e022      	b.n	800ec36 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ebfe:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800ec00:	e019      	b.n	800ec36 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ec10:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800ec12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec14:	2b20      	cmp	r3, #32
 800ec16:	d006      	beq.n	800ec26 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ec1e:	d002      	beq.n	800ec26 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800ec20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec22:	2b10      	cmp	r3, #16
 800ec24:	d107      	bne.n	800ec36 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	685a      	ldr	r2, [r3, #4]
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ec34:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d022      	beq.n	800ec84 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	4a2a      	ldr	r2, [pc, #168]	; (800ecec <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800ec44:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	4a29      	ldr	r2, [pc, #164]	; (800ecf0 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800ec4c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec52:	2200      	movs	r2, #0
 800ec54:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	3310      	adds	r3, #16
 800ec68:	4619      	mov	r1, r3
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6e:	461a      	mov	r2, r3
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec74:	f7f9 fbfb 	bl	800846e <HAL_DMA_Start_IT>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800ec7c:	7efb      	ldrb	r3, [r7, #27]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d159      	bne.n	800ed36 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800ec82:	e013      	b.n	800ecac <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2220      	movs	r2, #32
 800ec88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2200      	movs	r2, #0
 800eca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e087      	b.n	800edbc <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	2b12      	cmp	r3, #18
 800ecb0:	d10c      	bne.n	800eccc <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800ecb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ecb8:	d003      	beq.n	800ecc2 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800ecba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ecc0:	d101      	bne.n	800ecc6 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e000      	b.n	800ecc8 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d113      	bne.n	800ecf4 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ecda:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800ecdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ece0:	61fb      	str	r3, [r7, #28]
 800ece2:	e00a      	b.n	800ecfa <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800ece4:	20000058 	.word	0x20000058
 800ece8:	14f8b589 	.word	0x14f8b589
 800ecec:	080113a1 	.word	0x080113a1
 800ecf0:	0801154b 	.word	0x0801154b
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800ecf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecf8:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d005      	beq.n	800ed14 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0a:	2b20      	cmp	r3, #32
 800ed0c:	d002      	beq.n	800ed14 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800ed0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed10:	2b10      	cmp	r3, #16
 800ed12:	d107      	bne.n	800ed24 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed22:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6859      	ldr	r1, [r3, #4]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	69fa      	ldr	r2, [r7, #28]
 800ed30:	430a      	orrs	r2, r1
 800ed32:	605a      	str	r2, [r3, #4]
 800ed34:	e03f      	b.n	800edb6 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	2220      	movs	r2, #32
 800ed3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed4a:	f043 0210 	orr.w	r2, r3, #16
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	2200      	movs	r2, #0
 800ed56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ed5a:	2301      	movs	r3, #1
 800ed5c:	e02e      	b.n	800edbc <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681a      	ldr	r2, [r3, #0]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ed6c:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2b12      	cmp	r3, #18
 800ed72:	d10c      	bne.n	800ed8e <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800ed74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed76:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ed7a:	d003      	beq.n	800ed84 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800ed7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed7e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ed82:	d101      	bne.n	800ed88 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800ed84:	2301      	movs	r3, #1
 800ed86:	e000      	b.n	800ed8a <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800ed88:	2300      	movs	r3, #0
 800ed8a:	2b01      	cmp	r3, #1
 800ed8c:	d107      	bne.n	800ed9e <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ed9c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	6859      	ldr	r1, [r3, #4]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	69fa      	ldr	r2, [r7, #28]
 800edb2:	430a      	orrs	r2, r1
 800edb4:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800edb6:	2300      	movs	r3, #0
 800edb8:	e000      	b.n	800edbc <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800edba:	2302      	movs	r3, #2
  }
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3720      	adds	r7, #32
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b087      	sub	sp, #28
 800edc8:	af00      	add	r7, sp, #0
 800edca:	60f8      	str	r0, [r7, #12]
 800edcc:	60b9      	str	r1, [r7, #8]
 800edce:	603b      	str	r3, [r7, #0]
 800edd0:	4613      	mov	r3, r2
 800edd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ede0:	2b28      	cmp	r3, #40	; 0x28
 800ede2:	d15b      	bne.n	800ee9c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800edea:	88fb      	ldrh	r3, [r7, #6]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d101      	bne.n	800edf4 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e054      	b.n	800ee9e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d101      	bne.n	800ee02 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800edfe:	2302      	movs	r3, #2
 800ee00:	e04d      	b.n	800ee9e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2201      	movs	r2, #1
 800ee06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	d007      	beq.n	800ee28 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f042 0201 	orr.w	r2, r2, #1
 800ee26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	681a      	ldr	r2, [r3, #0]
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ee36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2229      	movs	r2, #41	; 0x29
 800ee3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	2220      	movs	r2, #32
 800ee44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	88fa      	ldrh	r2, [r7, #6]
 800ee58:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee5e:	b29a      	uxth	r2, r3
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	683a      	ldr	r2, [r7, #0]
 800ee68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	695b      	ldr	r3, [r3, #20]
 800ee74:	617b      	str	r3, [r7, #20]
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	699b      	ldr	r3, [r3, #24]
 800ee7c:	617b      	str	r3, [r7, #20]
 800ee7e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	685a      	ldr	r2, [r3, #4]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ee96:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	e000      	b.n	800ee9e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800ee9c:	2302      	movs	r3, #2
  }
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b086      	sub	sp, #24
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	60f8      	str	r0, [r7, #12]
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	603b      	str	r3, [r7, #0]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eec0:	b2db      	uxtb	r3, r3
 800eec2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eec6:	2b28      	cmp	r3, #40	; 0x28
 800eec8:	f040 811e 	bne.w	800f108 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d002      	beq.n	800eed8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800eed2:	88fb      	ldrh	r3, [r7, #6]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d101      	bne.n	800eedc <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800eed8:	2301      	movs	r3, #1
 800eeda:	e116      	b.n	800f10a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d101      	bne.n	800eeea <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800eee6:	2302      	movs	r3, #2
 800eee8:	e10f      	b.n	800f10a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2201      	movs	r2, #1
 800eeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	685a      	ldr	r2, [r3, #4]
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ef00:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef0c:	d127      	bne.n	800ef5e <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef1c:	d14c      	bne.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d048      	beq.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef34:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef3a:	4a76      	ldr	r2, [pc, #472]	; (800f114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ef3c:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7f9 fb5b 	bl	80085fe <HAL_DMA_Abort_IT>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d034      	beq.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef54:	68fa      	ldr	r2, [r7, #12]
 800ef56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ef58:	4610      	mov	r0, r2
 800ef5a:	4798      	blx	r3
 800ef5c:	e02c      	b.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	2b29      	cmp	r3, #41	; 0x29
 800ef68:	d126      	bne.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef78:	d11e      	bne.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	685a      	ldr	r2, [r3, #4]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef88:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d012      	beq.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef96:	4a5f      	ldr	r2, [pc, #380]	; (800f114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800ef98:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7f9 fb2d 	bl	80085fe <HAL_DMA_Abort_IT>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d006      	beq.n	800efb8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800efb4:	4610      	mov	r0, r2
 800efb6:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 0301 	and.w	r3, r3, #1
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d007      	beq.n	800efd6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	681a      	ldr	r2, [r3, #0]
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f042 0201 	orr.w	r2, r2, #1
 800efd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efe4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2229      	movs	r2, #41	; 0x29
 800efea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2220      	movs	r2, #32
 800eff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	2200      	movs	r2, #0
 800effa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	88fa      	ldrh	r2, [r7, #6]
 800f006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f00c:	b29a      	uxth	r2, r3
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	683a      	ldr	r2, [r7, #0]
 800f016:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d022      	beq.n	800f066 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f024:	4a3c      	ldr	r2, [pc, #240]	; (800f118 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800f026:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f02c:	4a3b      	ldr	r2, [pc, #236]	; (800f11c <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800f02e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f034:	2200      	movs	r2, #0
 800f036:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03c:	2200      	movs	r2, #0
 800f03e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f048:	4619      	mov	r1, r3
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3310      	adds	r3, #16
 800f050:	461a      	mov	r2, r3
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f056:	f7f9 fa0a 	bl	800846e <HAL_DMA_Start_IT>
 800f05a:	4603      	mov	r3, r0
 800f05c:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d13d      	bne.n	800f0e0 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800f064:	e013      	b.n	800f08e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2228      	movs	r2, #40	; 0x28
 800f06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f07a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	2200      	movs	r2, #0
 800f086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	e03d      	b.n	800f10a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	681a      	ldr	r2, [r3, #0]
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f09c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f09e:	2300      	movs	r3, #0
 800f0a0:	613b      	str	r3, [r7, #16]
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	695b      	ldr	r3, [r3, #20]
 800f0a8:	613b      	str	r3, [r7, #16]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	699b      	ldr	r3, [r3, #24]
 800f0b0:	613b      	str	r3, [r7, #16]
 800f0b2:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f0ca:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0da:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	e014      	b.n	800f10a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2220      	movs	r2, #32
 800f0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f4:	f043 0210 	orr.w	r2, r3, #16
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	2200      	movs	r2, #0
 800f100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	e000      	b.n	800f10a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800f108:	2302      	movs	r3, #2
  }
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	080115c5 	.word	0x080115c5
 800f118:	080113a1 	.word	0x080113a1
 800f11c:	0801154b 	.word	0x0801154b

0800f120 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800f120:	b480      	push	{r7}
 800f122:	b087      	sub	sp, #28
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	4613      	mov	r3, r2
 800f12e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f136:	b2db      	uxtb	r3, r3
 800f138:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f13c:	2b28      	cmp	r3, #40	; 0x28
 800f13e:	d15b      	bne.n	800f1f8 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d002      	beq.n	800f14c <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800f146:	88fb      	ldrh	r3, [r7, #6]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800f14c:	2301      	movs	r3, #1
 800f14e:	e054      	b.n	800f1fa <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f156:	2b01      	cmp	r3, #1
 800f158:	d101      	bne.n	800f15e <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800f15a:	2302      	movs	r3, #2
 800f15c:	e04d      	b.n	800f1fa <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2201      	movs	r2, #1
 800f162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	f003 0301 	and.w	r3, r3, #1
 800f170:	2b01      	cmp	r3, #1
 800f172:	d007      	beq.n	800f184 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f042 0201 	orr.w	r2, r2, #1
 800f182:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	681a      	ldr	r2, [r3, #0]
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f192:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	222a      	movs	r2, #42	; 0x2a
 800f198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2220      	movs	r2, #32
 800f1a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	88fa      	ldrh	r2, [r7, #6]
 800f1b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	695b      	ldr	r3, [r3, #20]
 800f1d0:	617b      	str	r3, [r7, #20]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	699b      	ldr	r3, [r3, #24]
 800f1d8:	617b      	str	r3, [r7, #20]
 800f1da:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	685a      	ldr	r2, [r3, #4]
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800f1f2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	e000      	b.n	800f1fa <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800f1f8:	2302      	movs	r3, #2
  }
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr

0800f206 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800f206:	b580      	push	{r7, lr}
 800f208:	b086      	sub	sp, #24
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	60f8      	str	r0, [r7, #12]
 800f20e:	60b9      	str	r1, [r7, #8]
 800f210:	603b      	str	r3, [r7, #0]
 800f212:	4613      	mov	r3, r2
 800f214:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f222:	2b28      	cmp	r3, #40	; 0x28
 800f224:	f040 811e 	bne.w	800f464 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d101      	bne.n	800f238 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	e116      	b.n	800f466 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f23e:	2b01      	cmp	r3, #1
 800f240:	d101      	bne.n	800f246 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800f242:	2302      	movs	r3, #2
 800f244:	e10f      	b.n	800f466 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2201      	movs	r2, #1
 800f24a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f25c:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b2a      	cmp	r3, #42	; 0x2a
 800f268:	d127      	bne.n	800f2ba <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	685b      	ldr	r3, [r3, #4]
 800f270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f278:	d14c      	bne.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d048      	beq.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f290:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f296:	4a76      	ldr	r2, [pc, #472]	; (800f470 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800f298:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f7f9 f9ad 	bl	80085fe <HAL_DMA_Abort_IT>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d034      	beq.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2b0:	68fa      	ldr	r2, [r7, #12]
 800f2b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f2b4:	4610      	mov	r0, r2
 800f2b6:	4798      	blx	r3
 800f2b8:	e02c      	b.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b29      	cmp	r3, #41	; 0x29
 800f2c4:	d126      	bne.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f2d4:	d11e      	bne.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	685a      	ldr	r2, [r3, #4]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f2e4:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d012      	beq.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f2:	4a5f      	ldr	r2, [pc, #380]	; (800f470 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800f2f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7f9 f97f 	bl	80085fe <HAL_DMA_Abort_IT>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d006      	beq.n	800f314 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f310:	4610      	mov	r0, r2
 800f312:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f003 0301 	and.w	r3, r3, #1
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d007      	beq.n	800f332 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f042 0201 	orr.w	r2, r2, #1
 800f330:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	681a      	ldr	r2, [r3, #0]
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f340:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	222a      	movs	r2, #42	; 0x2a
 800f346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	2220      	movs	r2, #32
 800f34e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2200      	movs	r2, #0
 800f356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	68ba      	ldr	r2, [r7, #8]
 800f35c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	88fa      	ldrh	r2, [r7, #6]
 800f362:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f368:	b29a      	uxth	r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d022      	beq.n	800f3c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f380:	4a3c      	ldr	r2, [pc, #240]	; (800f474 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800f382:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f388:	4a3b      	ldr	r2, [pc, #236]	; (800f478 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800f38a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	2200      	movs	r2, #0
 800f392:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f398:	2200      	movs	r2, #0
 800f39a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3310      	adds	r3, #16
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3b2:	f7f9 f85c 	bl	800846e <HAL_DMA_Start_IT>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800f3ba:	7dfb      	ldrb	r3, [r7, #23]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d13d      	bne.n	800f43c <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800f3c0:	e013      	b.n	800f3ea <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	2228      	movs	r2, #40	; 0x28
 800f3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e03d      	b.n	800f466 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f3f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	613b      	str	r3, [r7, #16]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	695b      	ldr	r3, [r3, #20]
 800f404:	613b      	str	r3, [r7, #16]
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	613b      	str	r3, [r7, #16]
 800f40e:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	685a      	ldr	r2, [r3, #4]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f426:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	685a      	ldr	r2, [r3, #4]
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f436:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800f438:	2300      	movs	r3, #0
 800f43a:	e014      	b.n	800f466 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	2220      	movs	r2, #32
 800f440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	2200      	movs	r2, #0
 800f448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f450:	f043 0210 	orr.w	r2, r3, #16
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	e000      	b.n	800f466 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800f464:	2302      	movs	r3, #2
  }
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	080115c5 	.word	0x080115c5
 800f474:	080113a1 	.word	0x080113a1
 800f478:	0801154b 	.word	0x0801154b

0800f47c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f48a:	b2db      	uxtb	r3, r3
 800f48c:	2b20      	cmp	r3, #32
 800f48e:	d124      	bne.n	800f4da <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2228      	movs	r2, #40	; 0x28
 800f494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d007      	beq.n	800f4b6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f042 0201 	orr.w	r2, r2, #1
 800f4b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f4c4:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	685a      	ldr	r2, [r3, #4]
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800f4d4:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e000      	b.n	800f4dc <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800f4da:	2302      	movs	r3, #2
  }
}
 800f4dc:	4618      	mov	r0, r3
 800f4de:	370c      	adds	r7, #12
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	b085      	sub	sp, #20
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	2b28      	cmp	r3, #40	; 0x28
 800f4fa:	d129      	bne.n	800f550 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f502:	b2db      	uxtb	r3, r3
 800f504:	f003 0303 	and.w	r3, r3, #3
 800f508:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f510:	b2db      	uxtb	r3, r3
 800f512:	461a      	mov	r2, r3
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	431a      	orrs	r2, r3
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2220      	movs	r2, #32
 800f520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2200      	movs	r2, #0
 800f528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f53a:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	685a      	ldr	r2, [r3, #4]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f54a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	e000      	b.n	800f552 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800f550:	2302      	movs	r3, #2
  }
}
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b084      	sub	sp, #16
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	460b      	mov	r3, r1
 800f568:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f570:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	699b      	ldr	r3, [r3, #24]
 800f578:	f003 0302 	and.w	r3, r3, #2
 800f57c:	2b02      	cmp	r3, #2
 800f57e:	d138      	bne.n	800f5f2 <HAL_I2C_Master_Abort_IT+0x94>
 800f580:	7bfb      	ldrb	r3, [r7, #15]
 800f582:	2b10      	cmp	r3, #16
 800f584:	d135      	bne.n	800f5f2 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f58c:	2b01      	cmp	r3, #1
 800f58e:	d101      	bne.n	800f594 <HAL_I2C_Master_Abort_IT+0x36>
 800f590:	2302      	movs	r3, #2
 800f592:	e02f      	b.n	800f5f4 <HAL_I2C_Master_Abort_IT+0x96>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2260      	movs	r2, #96	; 0x60
 800f5a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5b8:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	681a      	ldr	r2, [r3, #0]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5c8:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	685a      	ldr	r2, [r3, #4]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5de:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f001 fad9 	bl	8010ba0 <I2C_ITError>

    return HAL_OK;
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	e000      	b.n	800f5f4 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800f5f2:	2301      	movs	r3, #1
  }
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b088      	sub	sp, #32
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800f604:	2300      	movs	r3, #0
 800f606:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	685b      	ldr	r3, [r3, #4]
 800f60e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f614:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f61c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f624:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	2b10      	cmp	r3, #16
 800f62a:	d003      	beq.n	800f634 <HAL_I2C_EV_IRQHandler+0x38>
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	2b40      	cmp	r3, #64	; 0x40
 800f630:	f040 80c1 	bne.w	800f7b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	699b      	ldr	r3, [r3, #24]
 800f63a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	695b      	ldr	r3, [r3, #20]
 800f642:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800f644:	69fb      	ldr	r3, [r7, #28]
 800f646:	f003 0301 	and.w	r3, r3, #1
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d10d      	bne.n	800f66a <HAL_I2C_EV_IRQHandler+0x6e>
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800f654:	d003      	beq.n	800f65e <HAL_I2C_EV_IRQHandler+0x62>
 800f656:	693b      	ldr	r3, [r7, #16]
 800f658:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800f65c:	d101      	bne.n	800f662 <HAL_I2C_EV_IRQHandler+0x66>
 800f65e:	2301      	movs	r3, #1
 800f660:	e000      	b.n	800f664 <HAL_I2C_EV_IRQHandler+0x68>
 800f662:	2300      	movs	r3, #0
 800f664:	2b01      	cmp	r3, #1
 800f666:	f000 8132 	beq.w	800f8ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00c      	beq.n	800f68e <HAL_I2C_EV_IRQHandler+0x92>
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	0a5b      	lsrs	r3, r3, #9
 800f678:	f003 0301 	and.w	r3, r3, #1
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d006      	beq.n	800f68e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f002 fa94 	bl	8011bae <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 fda1 	bl	80101ce <I2C_Master_SB>
 800f68c:	e092      	b.n	800f7b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	08db      	lsrs	r3, r3, #3
 800f692:	f003 0301 	and.w	r3, r3, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d009      	beq.n	800f6ae <HAL_I2C_EV_IRQHandler+0xb2>
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	0a5b      	lsrs	r3, r3, #9
 800f69e:	f003 0301 	and.w	r3, r3, #1
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d003      	beq.n	800f6ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 fe17 	bl	80102da <I2C_Master_ADD10>
 800f6ac:	e082      	b.n	800f7b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	085b      	lsrs	r3, r3, #1
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d009      	beq.n	800f6ce <HAL_I2C_EV_IRQHandler+0xd2>
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	0a5b      	lsrs	r3, r3, #9
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d003      	beq.n	800f6ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f000 fe31 	bl	801032e <I2C_Master_ADDR>
 800f6cc:	e072      	b.n	800f7b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	089b      	lsrs	r3, r3, #2
 800f6d2:	f003 0301 	and.w	r3, r3, #1
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d03b      	beq.n	800f752 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	685b      	ldr	r3, [r3, #4]
 800f6e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6e8:	f000 80f3 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	09db      	lsrs	r3, r3, #7
 800f6f0:	f003 0301 	and.w	r3, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d00f      	beq.n	800f718 <HAL_I2C_EV_IRQHandler+0x11c>
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	0a9b      	lsrs	r3, r3, #10
 800f6fc:	f003 0301 	and.w	r3, r3, #1
 800f700:	2b00      	cmp	r3, #0
 800f702:	d009      	beq.n	800f718 <HAL_I2C_EV_IRQHandler+0x11c>
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	089b      	lsrs	r3, r3, #2
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d103      	bne.n	800f718 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 fa1b 	bl	800fb4c <I2C_MasterTransmit_TXE>
 800f716:	e04d      	b.n	800f7b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	089b      	lsrs	r3, r3, #2
 800f71c:	f003 0301 	and.w	r3, r3, #1
 800f720:	2b00      	cmp	r3, #0
 800f722:	f000 80d6 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	0a5b      	lsrs	r3, r3, #9
 800f72a:	f003 0301 	and.w	r3, r3, #1
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f000 80cf 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800f734:	7bbb      	ldrb	r3, [r7, #14]
 800f736:	2b21      	cmp	r3, #33	; 0x21
 800f738:	d103      	bne.n	800f742 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 faa2 	bl	800fc84 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f740:	e0c7      	b.n	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800f742:	7bfb      	ldrb	r3, [r7, #15]
 800f744:	2b40      	cmp	r3, #64	; 0x40
 800f746:	f040 80c4 	bne.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fb10 	bl	800fd70 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f750:	e0bf      	b.n	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f75c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f760:	f000 80b7 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	099b      	lsrs	r3, r3, #6
 800f768:	f003 0301 	and.w	r3, r3, #1
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00f      	beq.n	800f790 <HAL_I2C_EV_IRQHandler+0x194>
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	0a9b      	lsrs	r3, r3, #10
 800f774:	f003 0301 	and.w	r3, r3, #1
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d009      	beq.n	800f790 <HAL_I2C_EV_IRQHandler+0x194>
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	089b      	lsrs	r3, r3, #2
 800f780:	f003 0301 	and.w	r3, r3, #1
 800f784:	2b00      	cmp	r3, #0
 800f786:	d103      	bne.n	800f790 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fb85 	bl	800fe98 <I2C_MasterReceive_RXNE>
 800f78e:	e011      	b.n	800f7b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	089b      	lsrs	r3, r3, #2
 800f794:	f003 0301 	and.w	r3, r3, #1
 800f798:	2b00      	cmp	r3, #0
 800f79a:	f000 809a 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	0a5b      	lsrs	r3, r3, #9
 800f7a2:	f003 0301 	and.w	r3, r3, #1
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	f000 8093 	beq.w	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fc24 	bl	800fffa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f7b2:	e08e      	b.n	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800f7b4:	e08d      	b.n	800f8d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d004      	beq.n	800f7c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	695b      	ldr	r3, [r3, #20]
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	e007      	b.n	800f7d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	699b      	ldr	r3, [r3, #24]
 800f7ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	695b      	ldr	r3, [r3, #20]
 800f7d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	085b      	lsrs	r3, r3, #1
 800f7dc:	f003 0301 	and.w	r3, r3, #1
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d012      	beq.n	800f80a <HAL_I2C_EV_IRQHandler+0x20e>
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	0a5b      	lsrs	r3, r3, #9
 800f7e8:	f003 0301 	and.w	r3, r3, #1
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d00c      	beq.n	800f80a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d003      	beq.n	800f800 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	699b      	ldr	r3, [r3, #24]
 800f7fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800f800:	69b9      	ldr	r1, [r7, #24]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 ffe2 	bl	80107cc <I2C_Slave_ADDR>
 800f808:	e066      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f80a:	69fb      	ldr	r3, [r7, #28]
 800f80c:	091b      	lsrs	r3, r3, #4
 800f80e:	f003 0301 	and.w	r3, r3, #1
 800f812:	2b00      	cmp	r3, #0
 800f814:	d009      	beq.n	800f82a <HAL_I2C_EV_IRQHandler+0x22e>
 800f816:	697b      	ldr	r3, [r7, #20]
 800f818:	0a5b      	lsrs	r3, r3, #9
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d003      	beq.n	800f82a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f001 f81c 	bl	8010860 <I2C_Slave_STOPF>
 800f828:	e056      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f82a:	7bbb      	ldrb	r3, [r7, #14]
 800f82c:	2b21      	cmp	r3, #33	; 0x21
 800f82e:	d002      	beq.n	800f836 <HAL_I2C_EV_IRQHandler+0x23a>
 800f830:	7bbb      	ldrb	r3, [r7, #14]
 800f832:	2b29      	cmp	r3, #41	; 0x29
 800f834:	d125      	bne.n	800f882 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f836:	69fb      	ldr	r3, [r7, #28]
 800f838:	09db      	lsrs	r3, r3, #7
 800f83a:	f003 0301 	and.w	r3, r3, #1
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d00f      	beq.n	800f862 <HAL_I2C_EV_IRQHandler+0x266>
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	0a9b      	lsrs	r3, r3, #10
 800f846:	f003 0301 	and.w	r3, r3, #1
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d009      	beq.n	800f862 <HAL_I2C_EV_IRQHandler+0x266>
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	089b      	lsrs	r3, r3, #2
 800f852:	f003 0301 	and.w	r3, r3, #1
 800f856:	2b00      	cmp	r3, #0
 800f858:	d103      	bne.n	800f862 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f000 fef8 	bl	8010650 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f860:	e039      	b.n	800f8d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	089b      	lsrs	r3, r3, #2
 800f866:	f003 0301 	and.w	r3, r3, #1
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d033      	beq.n	800f8d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	0a5b      	lsrs	r3, r3, #9
 800f872:	f003 0301 	and.w	r3, r3, #1
 800f876:	2b00      	cmp	r3, #0
 800f878:	d02d      	beq.n	800f8d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f000 ff25 	bl	80106ca <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f880:	e029      	b.n	800f8d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f882:	69fb      	ldr	r3, [r7, #28]
 800f884:	099b      	lsrs	r3, r3, #6
 800f886:	f003 0301 	and.w	r3, r3, #1
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d00f      	beq.n	800f8ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800f88e:	697b      	ldr	r3, [r7, #20]
 800f890:	0a9b      	lsrs	r3, r3, #10
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	d009      	beq.n	800f8ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	089b      	lsrs	r3, r3, #2
 800f89e:	f003 0301 	and.w	r3, r3, #1
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d103      	bne.n	800f8ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 ff30 	bl	801070c <I2C_SlaveReceive_RXNE>
 800f8ac:	e014      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	089b      	lsrs	r3, r3, #2
 800f8b2:	f003 0301 	and.w	r3, r3, #1
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d00e      	beq.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	0a5b      	lsrs	r3, r3, #9
 800f8be:	f003 0301 	and.w	r3, r3, #1
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d008      	beq.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800f8c6:	6878      	ldr	r0, [r7, #4]
 800f8c8:	f000 ff5e 	bl	8010788 <I2C_SlaveReceive_BTF>
 800f8cc:	e004      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800f8ce:	bf00      	nop
 800f8d0:	e002      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800f8d2:	bf00      	nop
 800f8d4:	e000      	b.n	800f8d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800f8d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800f8d8:	3720      	adds	r7, #32
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b08a      	sub	sp, #40	; 0x28
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	695b      	ldr	r3, [r3, #20]
 800f8ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f900:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f902:	6a3b      	ldr	r3, [r7, #32]
 800f904:	0a1b      	lsrs	r3, r3, #8
 800f906:	f003 0301 	and.w	r3, r3, #1
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00e      	beq.n	800f92c <HAL_I2C_ER_IRQHandler+0x4e>
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	0a1b      	lsrs	r3, r3, #8
 800f912:	f003 0301 	and.w	r3, r3, #1
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	f043 0301 	orr.w	r3, r3, #1
 800f920:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f92a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f92c:	6a3b      	ldr	r3, [r7, #32]
 800f92e:	0a5b      	lsrs	r3, r3, #9
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00e      	beq.n	800f956 <HAL_I2C_ER_IRQHandler+0x78>
 800f938:	69fb      	ldr	r3, [r7, #28]
 800f93a:	0a1b      	lsrs	r3, r3, #8
 800f93c:	f003 0301 	and.w	r3, r3, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	d008      	beq.n	800f956 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800f944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f946:	f043 0302 	orr.w	r3, r3, #2
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800f954:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f956:	6a3b      	ldr	r3, [r7, #32]
 800f958:	0a9b      	lsrs	r3, r3, #10
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d03f      	beq.n	800f9e2 <HAL_I2C_ER_IRQHandler+0x104>
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	0a1b      	lsrs	r3, r3, #8
 800f966:	f003 0301 	and.w	r3, r3, #1
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d039      	beq.n	800f9e2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800f96e:	7efb      	ldrb	r3, [r7, #27]
 800f970:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f976:	b29b      	uxth	r3, r3
 800f978:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f980:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f986:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f988:	7ebb      	ldrb	r3, [r7, #26]
 800f98a:	2b20      	cmp	r3, #32
 800f98c:	d112      	bne.n	800f9b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d10f      	bne.n	800f9b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800f994:	7cfb      	ldrb	r3, [r7, #19]
 800f996:	2b21      	cmp	r3, #33	; 0x21
 800f998:	d008      	beq.n	800f9ac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f99a:	7cfb      	ldrb	r3, [r7, #19]
 800f99c:	2b29      	cmp	r3, #41	; 0x29
 800f99e:	d005      	beq.n	800f9ac <HAL_I2C_ER_IRQHandler+0xce>
 800f9a0:	7cfb      	ldrb	r3, [r7, #19]
 800f9a2:	2b28      	cmp	r3, #40	; 0x28
 800f9a4:	d106      	bne.n	800f9b4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2b21      	cmp	r3, #33	; 0x21
 800f9aa:	d103      	bne.n	800f9b4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f9ac:	6878      	ldr	r0, [r7, #4]
 800f9ae:	f001 f887 	bl	8010ac0 <I2C_Slave_AF>
 800f9b2:	e016      	b.n	800f9e2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f9bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c0:	f043 0304 	orr.w	r3, r3, #4
 800f9c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f9c6:	7efb      	ldrb	r3, [r7, #27]
 800f9c8:	2b10      	cmp	r3, #16
 800f9ca:	d002      	beq.n	800f9d2 <HAL_I2C_ER_IRQHandler+0xf4>
 800f9cc:	7efb      	ldrb	r3, [r7, #27]
 800f9ce:	2b40      	cmp	r3, #64	; 0x40
 800f9d0:	d107      	bne.n	800f9e2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	681a      	ldr	r2, [r3, #0]
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f9e2:	6a3b      	ldr	r3, [r7, #32]
 800f9e4:	0adb      	lsrs	r3, r3, #11
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00e      	beq.n	800fa0c <HAL_I2C_ER_IRQHandler+0x12e>
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	0a1b      	lsrs	r3, r3, #8
 800f9f2:	f003 0301 	and.w	r3, r3, #1
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d008      	beq.n	800fa0c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9fc:	f043 0308 	orr.w	r3, r3, #8
 800fa00:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800fa0a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800fa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d008      	beq.n	800fa24 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fa16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa18:	431a      	orrs	r2, r3
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f001 f8be 	bl	8010ba0 <I2C_ITError>
  }
}
 800fa24:	bf00      	nop
 800fa26:	3728      	adds	r7, #40	; 0x28
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800fa34:	bf00      	nop
 800fa36:	370c      	adds	r7, #12
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b083      	sub	sp, #12
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800fa48:	bf00      	nop
 800fa4a:	370c      	adds	r7, #12
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr

0800fa54 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800fa5c:	bf00      	nop
 800fa5e:	370c      	adds	r7, #12
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr

0800fa68 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800fa70:	bf00      	nop
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	460b      	mov	r3, r1
 800fa86:	70fb      	strb	r3, [r7, #3]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800fa8c:	bf00      	nop
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa96:	4770      	bx	lr

0800fa98 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800faa0:	bf00      	nop
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800faac:	b480      	push	{r7}
 800faae:	b083      	sub	sp, #12
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800fab4:	bf00      	nop
 800fab6:	370c      	adds	r7, #12
 800fab8:	46bd      	mov	sp, r7
 800faba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabe:	4770      	bx	lr

0800fac0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800fac8:	bf00      	nop
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800fadc:	bf00      	nop
 800fade:	370c      	adds	r7, #12
 800fae0:	46bd      	mov	sp, r7
 800fae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae6:	4770      	bx	lr

0800fae8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800faf0:	bf00      	nop
 800faf2:	370c      	adds	r7, #12
 800faf4:	46bd      	mov	sp, r7
 800faf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafa:	4770      	bx	lr

0800fafc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b083      	sub	sp, #12
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb0a:	b2db      	uxtb	r3, r3
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb26:	b2db      	uxtb	r3, r3
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b084      	sub	sp, #16
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb5a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb62:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb68:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d150      	bne.n	800fc14 <I2C_MasterTransmit_TXE+0xc8>
 800fb72:	7bfb      	ldrb	r3, [r7, #15]
 800fb74:	2b21      	cmp	r3, #33	; 0x21
 800fb76:	d14d      	bne.n	800fc14 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fb78:	68bb      	ldr	r3, [r7, #8]
 800fb7a:	2b08      	cmp	r3, #8
 800fb7c:	d01d      	beq.n	800fbba <I2C_MasterTransmit_TXE+0x6e>
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	2b20      	cmp	r3, #32
 800fb82:	d01a      	beq.n	800fbba <I2C_MasterTransmit_TXE+0x6e>
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fb8a:	d016      	beq.n	800fbba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	685a      	ldr	r2, [r3, #4]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fb9a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2211      	movs	r2, #17
 800fba0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	2220      	movs	r2, #32
 800fbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7ff ff3a 	bl	800fa2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fbb8:	e060      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	685a      	ldr	r2, [r3, #4]
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fbc8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fbd8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2220      	movs	r2, #32
 800fbe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbee:	b2db      	uxtb	r3, r3
 800fbf0:	2b40      	cmp	r3, #64	; 0x40
 800fbf2:	d107      	bne.n	800fc04 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ff55 	bl	800faac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fc02:	e03b      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff ff0d 	bl	800fa2c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fc12:	e033      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800fc14:	7bfb      	ldrb	r3, [r7, #15]
 800fc16:	2b21      	cmp	r3, #33	; 0x21
 800fc18:	d005      	beq.n	800fc26 <I2C_MasterTransmit_TXE+0xda>
 800fc1a:	7bbb      	ldrb	r3, [r7, #14]
 800fc1c:	2b40      	cmp	r3, #64	; 0x40
 800fc1e:	d12d      	bne.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800fc20:	7bfb      	ldrb	r3, [r7, #15]
 800fc22:	2b22      	cmp	r3, #34	; 0x22
 800fc24:	d12a      	bne.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d108      	bne.n	800fc42 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	685a      	ldr	r2, [r3, #4]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc3e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800fc40:	e01c      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b40      	cmp	r3, #64	; 0x40
 800fc4c:	d103      	bne.n	800fc56 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f000 f88e 	bl	800fd70 <I2C_MemoryTransmit_TXE_BTF>
}
 800fc54:	e012      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	781a      	ldrb	r2, [r3, #0]
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc66:	1c5a      	adds	r2, r3, #1
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	3b01      	subs	r3, #1
 800fc74:	b29a      	uxth	r2, r3
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fc7a:	e7ff      	b.n	800fc7c <I2C_MasterTransmit_TXE+0x130>
 800fc7c:	bf00      	nop
 800fc7e:	3710      	adds	r7, #16
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}

0800fc84 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc90:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc98:	b2db      	uxtb	r3, r3
 800fc9a:	2b21      	cmp	r3, #33	; 0x21
 800fc9c:	d164      	bne.n	800fd68 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fca2:	b29b      	uxth	r3, r3
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d012      	beq.n	800fcce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcac:	781a      	ldrb	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb8:	1c5a      	adds	r2, r3, #1
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	3b01      	subs	r3, #1
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800fccc:	e04c      	b.n	800fd68 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2b08      	cmp	r3, #8
 800fcd2:	d01d      	beq.n	800fd10 <I2C_MasterTransmit_BTF+0x8c>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b20      	cmp	r3, #32
 800fcd8:	d01a      	beq.n	800fd10 <I2C_MasterTransmit_BTF+0x8c>
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fce0:	d016      	beq.n	800fd10 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	685a      	ldr	r2, [r3, #4]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fcf0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2211      	movs	r2, #17
 800fcf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2220      	movs	r2, #32
 800fd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff fe8f 	bl	800fa2c <HAL_I2C_MasterTxCpltCallback>
}
 800fd0e:	e02b      	b.n	800fd68 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685a      	ldr	r2, [r3, #4]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fd1e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fd2e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2220      	movs	r2, #32
 800fd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd44:	b2db      	uxtb	r3, r3
 800fd46:	2b40      	cmp	r3, #64	; 0x40
 800fd48:	d107      	bne.n	800fd5a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f7ff feaa 	bl	800faac <HAL_I2C_MemTxCpltCallback>
}
 800fd58:	e006      	b.n	800fd68 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800fd62:	6878      	ldr	r0, [r7, #4]
 800fd64:	f7ff fe62 	bl	800fa2c <HAL_I2C_MasterTxCpltCallback>
}
 800fd68:	bf00      	nop
 800fd6a:	3710      	adds	r7, #16
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b084      	sub	sp, #16
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd7e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d11d      	bne.n	800fdc4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d10b      	bne.n	800fda8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fda0:	1c9a      	adds	r2, r3, #2
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800fda6:	e073      	b.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdac:	b29b      	uxth	r3, r3
 800fdae:	121b      	asrs	r3, r3, #8
 800fdb0:	b2da      	uxtb	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdbc:	1c5a      	adds	r2, r3, #1
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fdc2:	e065      	b.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d10b      	bne.n	800fde4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fdd0:	b2da      	uxtb	r2, r3
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fde2:	e055      	b.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fde8:	2b02      	cmp	r3, #2
 800fdea:	d151      	bne.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800fdec:	7bfb      	ldrb	r3, [r7, #15]
 800fdee:	2b22      	cmp	r3, #34	; 0x22
 800fdf0:	d10d      	bne.n	800fe0e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fe00:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe06:	1c5a      	adds	r2, r3, #1
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800fe0c:	e040      	b.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe12:	b29b      	uxth	r3, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d015      	beq.n	800fe44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800fe18:	7bfb      	ldrb	r3, [r7, #15]
 800fe1a:	2b21      	cmp	r3, #33	; 0x21
 800fe1c:	d112      	bne.n	800fe44 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe22:	781a      	ldrb	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2e:	1c5a      	adds	r2, r3, #1
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe38:	b29b      	uxth	r3, r3
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	b29a      	uxth	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800fe42:	e025      	b.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe48:	b29b      	uxth	r3, r3
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d120      	bne.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800fe4e:	7bfb      	ldrb	r3, [r7, #15]
 800fe50:	2b21      	cmp	r3, #33	; 0x21
 800fe52:	d11d      	bne.n	800fe90 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	685a      	ldr	r2, [r3, #4]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fe62:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe72:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2200      	movs	r2, #0
 800fe78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2220      	movs	r2, #32
 800fe7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2200      	movs	r2, #0
 800fe86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff fe0e 	bl	800faac <HAL_I2C_MemTxCpltCallback>
}
 800fe90:	bf00      	nop
 800fe92:	3710      	adds	r7, #16
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fea6:	b2db      	uxtb	r3, r3
 800fea8:	2b22      	cmp	r3, #34	; 0x22
 800feaa:	f040 80a2 	bne.w	800fff2 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2b03      	cmp	r3, #3
 800feba:	d921      	bls.n	800ff00 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	691a      	ldr	r2, [r3, #16]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec6:	b2d2      	uxtb	r2, r2
 800fec8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fece:	1c5a      	adds	r2, r3, #1
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fed8:	b29b      	uxth	r3, r3
 800feda:	3b01      	subs	r3, #1
 800fedc:	b29a      	uxth	r2, r3
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	2b03      	cmp	r3, #3
 800feea:	f040 8082 	bne.w	800fff2 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	685a      	ldr	r2, [r3, #4]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fefc:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800fefe:	e078      	b.n	800fff2 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff04:	2b02      	cmp	r3, #2
 800ff06:	d074      	beq.n	800fff2 <I2C_MasterReceive_RXNE+0x15a>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b01      	cmp	r3, #1
 800ff0c:	d002      	beq.n	800ff14 <I2C_MasterReceive_RXNE+0x7c>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d16e      	bne.n	800fff2 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f001 fd92 	bl	8011a3e <I2C_WaitOnSTOPRequestThroughIT>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d142      	bne.n	800ffa6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	681a      	ldr	r2, [r3, #0]
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff2e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	685a      	ldr	r2, [r3, #4]
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ff3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	691a      	ldr	r2, [r3, #16]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff4a:	b2d2      	uxtb	r2, r2
 800ff4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	3b01      	subs	r3, #1
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2220      	movs	r2, #32
 800ff6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b40      	cmp	r3, #64	; 0x40
 800ff78:	d10a      	bne.n	800ff90 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff fd99 	bl	800fac0 <HAL_I2C_MemRxCpltCallback>
}
 800ff8e:	e030      	b.n	800fff2 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2212      	movs	r2, #18
 800ff9c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ff9e:	6878      	ldr	r0, [r7, #4]
 800ffa0:	f7ff fd4e 	bl	800fa40 <HAL_I2C_MasterRxCpltCallback>
}
 800ffa4:	e025      	b.n	800fff2 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ffb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	691a      	ldr	r2, [r3, #16]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc0:	b2d2      	uxtb	r2, r2
 800ffc2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc8:	1c5a      	adds	r2, r3, #1
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	b29a      	uxth	r2, r3
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2220      	movs	r2, #32
 800ffe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ffec:	6878      	ldr	r0, [r7, #4]
 800ffee:	f7ff fd71 	bl	800fad4 <HAL_I2C_ErrorCallback>
}
 800fff2:	bf00      	nop
 800fff4:	3710      	adds	r7, #16
 800fff6:	46bd      	mov	sp, r7
 800fff8:	bd80      	pop	{r7, pc}

0800fffa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800fffa:	b580      	push	{r7, lr}
 800fffc:	b084      	sub	sp, #16
 800fffe:	af00      	add	r7, sp, #0
 8010000:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010006:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801000c:	b29b      	uxth	r3, r3
 801000e:	2b04      	cmp	r3, #4
 8010010:	d11b      	bne.n	801004a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	685a      	ldr	r2, [r3, #4]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010020:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	691a      	ldr	r2, [r3, #16]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801002c:	b2d2      	uxtb	r2, r2
 801002e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010034:	1c5a      	adds	r2, r3, #1
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801003e:	b29b      	uxth	r3, r3
 8010040:	3b01      	subs	r3, #1
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8010048:	e0bd      	b.n	80101c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801004e:	b29b      	uxth	r3, r3
 8010050:	2b03      	cmp	r3, #3
 8010052:	d129      	bne.n	80100a8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	685a      	ldr	r2, [r3, #4]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010062:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2b04      	cmp	r3, #4
 8010068:	d00a      	beq.n	8010080 <I2C_MasterReceive_BTF+0x86>
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2b02      	cmp	r3, #2
 801006e:	d007      	beq.n	8010080 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	681a      	ldr	r2, [r3, #0]
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801007e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	691a      	ldr	r2, [r3, #16]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008a:	b2d2      	uxtb	r2, r2
 801008c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801009c:	b29b      	uxth	r3, r3
 801009e:	3b01      	subs	r3, #1
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80100a6:	e08e      	b.n	80101c6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	2b02      	cmp	r3, #2
 80100b0:	d176      	bne.n	80101a0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	d002      	beq.n	80100be <I2C_MasterReceive_BTF+0xc4>
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2b10      	cmp	r3, #16
 80100bc:	d108      	bne.n	80100d0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	681a      	ldr	r2, [r3, #0]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80100cc:	601a      	str	r2, [r3, #0]
 80100ce:	e019      	b.n	8010104 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2b04      	cmp	r3, #4
 80100d4:	d002      	beq.n	80100dc <I2C_MasterReceive_BTF+0xe2>
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d108      	bne.n	80100ee <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	681a      	ldr	r2, [r3, #0]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	e00a      	b.n	8010104 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	2b10      	cmp	r3, #16
 80100f2:	d007      	beq.n	8010104 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010102:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	691a      	ldr	r2, [r3, #16]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801010e:	b2d2      	uxtb	r2, r2
 8010110:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010120:	b29b      	uxth	r3, r3
 8010122:	3b01      	subs	r3, #1
 8010124:	b29a      	uxth	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	691a      	ldr	r2, [r3, #16]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010134:	b2d2      	uxtb	r2, r2
 8010136:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013c:	1c5a      	adds	r2, r3, #1
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010146:	b29b      	uxth	r3, r3
 8010148:	3b01      	subs	r3, #1
 801014a:	b29a      	uxth	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	685a      	ldr	r2, [r3, #4]
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801015e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2220      	movs	r2, #32
 8010164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b40      	cmp	r3, #64	; 0x40
 8010172:	d10a      	bne.n	801018a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2200      	movs	r2, #0
 8010178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f7ff fc9c 	bl	800fac0 <HAL_I2C_MemRxCpltCallback>
}
 8010188:	e01d      	b.n	80101c6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2212      	movs	r2, #18
 8010196:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f7ff fc51 	bl	800fa40 <HAL_I2C_MasterRxCpltCallback>
}
 801019e:	e012      	b.n	80101c6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	691a      	ldr	r2, [r3, #16]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101aa:	b2d2      	uxtb	r2, r2
 80101ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101b2:	1c5a      	adds	r2, r3, #1
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80101bc:	b29b      	uxth	r3, r3
 80101be:	3b01      	subs	r3, #1
 80101c0:	b29a      	uxth	r2, r3
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80101c6:	bf00      	nop
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80101ce:	b480      	push	{r7}
 80101d0:	b083      	sub	sp, #12
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	2b40      	cmp	r3, #64	; 0x40
 80101e0:	d117      	bne.n	8010212 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d109      	bne.n	80101fe <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ee:	b2db      	uxtb	r3, r3
 80101f0:	461a      	mov	r2, r3
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80101fa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80101fc:	e067      	b.n	80102ce <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010202:	b2db      	uxtb	r3, r3
 8010204:	f043 0301 	orr.w	r3, r3, #1
 8010208:	b2da      	uxtb	r2, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	611a      	str	r2, [r3, #16]
}
 8010210:	e05d      	b.n	80102ce <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801021a:	d133      	bne.n	8010284 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010222:	b2db      	uxtb	r3, r3
 8010224:	2b21      	cmp	r3, #33	; 0x21
 8010226:	d109      	bne.n	801023c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801022c:	b2db      	uxtb	r3, r3
 801022e:	461a      	mov	r2, r3
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010238:	611a      	str	r2, [r3, #16]
 801023a:	e008      	b.n	801024e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010240:	b2db      	uxtb	r3, r3
 8010242:	f043 0301 	orr.w	r3, r3, #1
 8010246:	b2da      	uxtb	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <I2C_Master_SB+0x92>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801025a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801025c:	2b00      	cmp	r3, #0
 801025e:	d108      	bne.n	8010272 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010264:	2b00      	cmp	r3, #0
 8010266:	d032      	beq.n	80102ce <I2C_Master_SB+0x100>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801026c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801026e:	2b00      	cmp	r3, #0
 8010270:	d02d      	beq.n	80102ce <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	685a      	ldr	r2, [r3, #4]
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010280:	605a      	str	r2, [r3, #4]
}
 8010282:	e024      	b.n	80102ce <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10e      	bne.n	80102aa <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010290:	b29b      	uxth	r3, r3
 8010292:	11db      	asrs	r3, r3, #7
 8010294:	b2db      	uxtb	r3, r3
 8010296:	f003 0306 	and.w	r3, r3, #6
 801029a:	b2db      	uxtb	r3, r3
 801029c:	f063 030f 	orn	r3, r3, #15
 80102a0:	b2da      	uxtb	r2, r3
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	611a      	str	r2, [r3, #16]
}
 80102a8:	e011      	b.n	80102ce <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102ae:	2b01      	cmp	r3, #1
 80102b0:	d10d      	bne.n	80102ce <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b6:	b29b      	uxth	r3, r3
 80102b8:	11db      	asrs	r3, r3, #7
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	f003 0306 	and.w	r3, r3, #6
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	f063 030e 	orn	r3, r3, #14
 80102c6:	b2da      	uxtb	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	611a      	str	r2, [r3, #16]
}
 80102ce:	bf00      	nop
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d004      	beq.n	8010300 <I2C_Master_ADD10+0x26>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d108      	bne.n	8010312 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00c      	beq.n	8010322 <I2C_Master_ADD10+0x48>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801030c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801030e:	2b00      	cmp	r3, #0
 8010310:	d007      	beq.n	8010322 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	685a      	ldr	r2, [r3, #4]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010320:	605a      	str	r2, [r3, #4]
  }
}
 8010322:	bf00      	nop
 8010324:	370c      	adds	r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr

0801032e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 801032e:	b480      	push	{r7}
 8010330:	b091      	sub	sp, #68	; 0x44
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801033c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010344:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801034a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b22      	cmp	r3, #34	; 0x22
 8010356:	f040 8169 	bne.w	801062c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801035e:	2b00      	cmp	r3, #0
 8010360:	d10f      	bne.n	8010382 <I2C_Master_ADDR+0x54>
 8010362:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010366:	2b40      	cmp	r3, #64	; 0x40
 8010368:	d10b      	bne.n	8010382 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801036a:	2300      	movs	r3, #0
 801036c:	60fb      	str	r3, [r7, #12]
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	695b      	ldr	r3, [r3, #20]
 8010374:	60fb      	str	r3, [r7, #12]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	699b      	ldr	r3, [r3, #24]
 801037c:	60fb      	str	r3, [r7, #12]
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	e160      	b.n	8010644 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010386:	2b00      	cmp	r3, #0
 8010388:	d11d      	bne.n	80103c6 <I2C_Master_ADDR+0x98>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010392:	d118      	bne.n	80103c6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010394:	2300      	movs	r3, #0
 8010396:	613b      	str	r3, [r7, #16]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	695b      	ldr	r3, [r3, #20]
 801039e:	613b      	str	r3, [r7, #16]
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	613b      	str	r3, [r7, #16]
 80103a8:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80103b8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	651a      	str	r2, [r3, #80]	; 0x50
 80103c4:	e13e      	b.n	8010644 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d113      	bne.n	80103f8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80103d0:	2300      	movs	r3, #0
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	695b      	ldr	r3, [r3, #20]
 80103da:	617b      	str	r3, [r7, #20]
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	699b      	ldr	r3, [r3, #24]
 80103e2:	617b      	str	r3, [r7, #20]
 80103e4:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	681a      	ldr	r2, [r3, #0]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103f4:	601a      	str	r2, [r3, #0]
 80103f6:	e115      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	2b01      	cmp	r3, #1
 8010400:	f040 808a 	bne.w	8010518 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8010404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010406:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801040a:	d137      	bne.n	801047c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801041a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	685b      	ldr	r3, [r3, #4]
 8010422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801042a:	d113      	bne.n	8010454 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801043a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801043c:	2300      	movs	r3, #0
 801043e:	61bb      	str	r3, [r7, #24]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	695b      	ldr	r3, [r3, #20]
 8010446:	61bb      	str	r3, [r7, #24]
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	699b      	ldr	r3, [r3, #24]
 801044e:	61bb      	str	r3, [r7, #24]
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	e0e7      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010454:	2300      	movs	r3, #0
 8010456:	61fb      	str	r3, [r7, #28]
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	695b      	ldr	r3, [r3, #20]
 801045e:	61fb      	str	r3, [r7, #28]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	61fb      	str	r3, [r7, #28]
 8010468:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	681a      	ldr	r2, [r3, #0]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010478:	601a      	str	r2, [r3, #0]
 801047a:	e0d3      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 801047c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801047e:	2b08      	cmp	r3, #8
 8010480:	d02e      	beq.n	80104e0 <I2C_Master_ADDR+0x1b2>
 8010482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010484:	2b20      	cmp	r3, #32
 8010486:	d02b      	beq.n	80104e0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8010488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048a:	2b12      	cmp	r3, #18
 801048c:	d102      	bne.n	8010494 <I2C_Master_ADDR+0x166>
 801048e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010490:	2b01      	cmp	r3, #1
 8010492:	d125      	bne.n	80104e0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8010494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010496:	2b04      	cmp	r3, #4
 8010498:	d00e      	beq.n	80104b8 <I2C_Master_ADDR+0x18a>
 801049a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801049c:	2b02      	cmp	r3, #2
 801049e:	d00b      	beq.n	80104b8 <I2C_Master_ADDR+0x18a>
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	2b10      	cmp	r3, #16
 80104a4:	d008      	beq.n	80104b8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104b4:	601a      	str	r2, [r3, #0]
 80104b6:	e007      	b.n	80104c8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	681a      	ldr	r2, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80104c6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104c8:	2300      	movs	r3, #0
 80104ca:	623b      	str	r3, [r7, #32]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	695b      	ldr	r3, [r3, #20]
 80104d2:	623b      	str	r3, [r7, #32]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	699b      	ldr	r3, [r3, #24]
 80104da:	623b      	str	r3, [r7, #32]
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	e0a1      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104ee:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80104f0:	2300      	movs	r3, #0
 80104f2:	627b      	str	r3, [r7, #36]	; 0x24
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	695b      	ldr	r3, [r3, #20]
 80104fa:	627b      	str	r3, [r7, #36]	; 0x24
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	699b      	ldr	r3, [r3, #24]
 8010502:	627b      	str	r3, [r7, #36]	; 0x24
 8010504:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	e085      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801051c:	b29b      	uxth	r3, r3
 801051e:	2b02      	cmp	r3, #2
 8010520:	d14d      	bne.n	80105be <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8010522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010524:	2b04      	cmp	r3, #4
 8010526:	d016      	beq.n	8010556 <I2C_Master_ADDR+0x228>
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	2b02      	cmp	r3, #2
 801052c:	d013      	beq.n	8010556 <I2C_Master_ADDR+0x228>
 801052e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010530:	2b10      	cmp	r3, #16
 8010532:	d010      	beq.n	8010556 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010542:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010552:	601a      	str	r2, [r3, #0]
 8010554:	e007      	b.n	8010566 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010564:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	685b      	ldr	r3, [r3, #4]
 801056c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010574:	d117      	bne.n	80105a6 <I2C_Master_ADDR+0x278>
 8010576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801057c:	d00b      	beq.n	8010596 <I2C_Master_ADDR+0x268>
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	2b01      	cmp	r3, #1
 8010582:	d008      	beq.n	8010596 <I2C_Master_ADDR+0x268>
 8010584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010586:	2b08      	cmp	r3, #8
 8010588:	d005      	beq.n	8010596 <I2C_Master_ADDR+0x268>
 801058a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058c:	2b10      	cmp	r3, #16
 801058e:	d002      	beq.n	8010596 <I2C_Master_ADDR+0x268>
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	2b20      	cmp	r3, #32
 8010594:	d107      	bne.n	80105a6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80105a4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80105a6:	2300      	movs	r3, #0
 80105a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	695b      	ldr	r3, [r3, #20]
 80105b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	699b      	ldr	r3, [r3, #24]
 80105b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80105ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105bc:	e032      	b.n	8010624 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	681a      	ldr	r2, [r3, #0]
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80105cc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	685b      	ldr	r3, [r3, #4]
 80105d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105dc:	d117      	bne.n	801060e <I2C_Master_ADDR+0x2e0>
 80105de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80105e4:	d00b      	beq.n	80105fe <I2C_Master_ADDR+0x2d0>
 80105e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	d008      	beq.n	80105fe <I2C_Master_ADDR+0x2d0>
 80105ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105ee:	2b08      	cmp	r3, #8
 80105f0:	d005      	beq.n	80105fe <I2C_Master_ADDR+0x2d0>
 80105f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f4:	2b10      	cmp	r3, #16
 80105f6:	d002      	beq.n	80105fe <I2C_Master_ADDR+0x2d0>
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	2b20      	cmp	r3, #32
 80105fc:	d107      	bne.n	801060e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	685a      	ldr	r2, [r3, #4]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801060c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801060e:	2300      	movs	r3, #0
 8010610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	695b      	ldr	r3, [r3, #20]
 8010618:	62fb      	str	r3, [r7, #44]	; 0x2c
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	699b      	ldr	r3, [r3, #24]
 8010620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 801062a:	e00b      	b.n	8010644 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801062c:	2300      	movs	r3, #0
 801062e:	633b      	str	r3, [r7, #48]	; 0x30
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	633b      	str	r3, [r7, #48]	; 0x30
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	699b      	ldr	r3, [r3, #24]
 801063e:	633b      	str	r3, [r7, #48]	; 0x30
 8010640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8010642:	e7ff      	b.n	8010644 <I2C_Master_ADDR+0x316>
 8010644:	bf00      	nop
 8010646:	3744      	adds	r7, #68	; 0x44
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr

08010650 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801065e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010664:	b29b      	uxth	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d02b      	beq.n	80106c2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066e:	781a      	ldrb	r2, [r3, #0]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010684:	b29b      	uxth	r3, r3
 8010686:	3b01      	subs	r3, #1
 8010688:	b29a      	uxth	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d114      	bne.n	80106c2 <I2C_SlaveTransmit_TXE+0x72>
 8010698:	7bfb      	ldrb	r3, [r7, #15]
 801069a:	2b29      	cmp	r3, #41	; 0x29
 801069c:	d111      	bne.n	80106c2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	685a      	ldr	r2, [r3, #4]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2221      	movs	r2, #33	; 0x21
 80106b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	2228      	movs	r2, #40	; 0x28
 80106b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff f9c9 	bl	800fa54 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80106c2:	bf00      	nop
 80106c4:	3710      	adds	r7, #16
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}

080106ca <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80106ca:	b480      	push	{r7}
 80106cc:	b083      	sub	sp, #12
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d011      	beq.n	8010700 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e0:	781a      	ldrb	r2, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	3b01      	subs	r3, #1
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8010700:	bf00      	nop
 8010702:	370c      	adds	r7, #12
 8010704:	46bd      	mov	sp, r7
 8010706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070a:	4770      	bx	lr

0801070c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b084      	sub	sp, #16
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801071a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010720:	b29b      	uxth	r3, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d02c      	beq.n	8010780 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	691a      	ldr	r2, [r3, #16]
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010730:	b2d2      	uxtb	r2, r2
 8010732:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010738:	1c5a      	adds	r2, r3, #1
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010742:	b29b      	uxth	r3, r3
 8010744:	3b01      	subs	r3, #1
 8010746:	b29a      	uxth	r2, r3
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010750:	b29b      	uxth	r3, r3
 8010752:	2b00      	cmp	r3, #0
 8010754:	d114      	bne.n	8010780 <I2C_SlaveReceive_RXNE+0x74>
 8010756:	7bfb      	ldrb	r3, [r7, #15]
 8010758:	2b2a      	cmp	r3, #42	; 0x2a
 801075a:	d111      	bne.n	8010780 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	685a      	ldr	r2, [r3, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801076a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2222      	movs	r2, #34	; 0x22
 8010770:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2228      	movs	r2, #40	; 0x28
 8010776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f7ff f974 	bl	800fa68 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8010780:	bf00      	nop
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8010788:	b480      	push	{r7}
 801078a:	b083      	sub	sp, #12
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010794:	b29b      	uxth	r3, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	d012      	beq.n	80107c0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	691a      	ldr	r2, [r3, #16]
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a4:	b2d2      	uxtb	r2, r2
 80107a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ac:	1c5a      	adds	r2, r3, #1
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	3b01      	subs	r3, #1
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80107c0:	bf00      	nop
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80107d6:	2300      	movs	r3, #0
 80107d8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80107e6:	2b28      	cmp	r3, #40	; 0x28
 80107e8:	d127      	bne.n	801083a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	685a      	ldr	r2, [r3, #4]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80107f8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80107fa:	683b      	ldr	r3, [r7, #0]
 80107fc:	089b      	lsrs	r3, r3, #2
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	2b00      	cmp	r3, #0
 8010804:	d101      	bne.n	801080a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8010806:	2301      	movs	r3, #1
 8010808:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	09db      	lsrs	r3, r3, #7
 801080e:	f003 0301 	and.w	r3, r3, #1
 8010812:	2b00      	cmp	r3, #0
 8010814:	d103      	bne.n	801081e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	81bb      	strh	r3, [r7, #12]
 801081c:	e002      	b.n	8010824 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	699b      	ldr	r3, [r3, #24]
 8010822:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 801082c:	89ba      	ldrh	r2, [r7, #12]
 801082e:	7bfb      	ldrb	r3, [r7, #15]
 8010830:	4619      	mov	r1, r3
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f7ff f922 	bl	800fa7c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8010838:	e00e      	b.n	8010858 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801083a:	2300      	movs	r3, #0
 801083c:	60bb      	str	r3, [r7, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	695b      	ldr	r3, [r3, #20]
 8010844:	60bb      	str	r3, [r7, #8]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	699b      	ldr	r3, [r3, #24]
 801084c:	60bb      	str	r3, [r7, #8]
 801084e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8010858:	bf00      	nop
 801085a:	3710      	adds	r7, #16
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}

08010860 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801086e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	685a      	ldr	r2, [r3, #4]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801087e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8010880:	2300      	movs	r3, #0
 8010882:	60bb      	str	r3, [r7, #8]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	695b      	ldr	r3, [r3, #20]
 801088a:	60bb      	str	r3, [r7, #8]
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	681a      	ldr	r2, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f042 0201 	orr.w	r2, r2, #1
 801089a:	601a      	str	r2, [r3, #0]
 801089c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80108ac:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	685b      	ldr	r3, [r3, #4]
 80108b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80108b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80108bc:	d172      	bne.n	80109a4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	2b22      	cmp	r3, #34	; 0x22
 80108c2:	d002      	beq.n	80108ca <I2C_Slave_STOPF+0x6a>
 80108c4:	7bfb      	ldrb	r3, [r7, #15]
 80108c6:	2b2a      	cmp	r3, #42	; 0x2a
 80108c8:	d135      	bne.n	8010936 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108dc:	b29b      	uxth	r3, r3
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d005      	beq.n	80108ee <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108e6:	f043 0204 	orr.w	r2, r3, #4
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80108fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010902:	4618      	mov	r0, r3
 8010904:	f7f8 f9c1 	bl	8008c8a <HAL_DMA_GetState>
 8010908:	4603      	mov	r3, r0
 801090a:	2b01      	cmp	r3, #1
 801090c:	d049      	beq.n	80109a2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010912:	4a69      	ldr	r2, [pc, #420]	; (8010ab8 <I2C_Slave_STOPF+0x258>)
 8010914:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091a:	4618      	mov	r0, r3
 801091c:	f7f7 fe6f 	bl	80085fe <HAL_DMA_Abort_IT>
 8010920:	4603      	mov	r3, r0
 8010922:	2b00      	cmp	r3, #0
 8010924:	d03d      	beq.n	80109a2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801092c:	687a      	ldr	r2, [r7, #4]
 801092e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010930:	4610      	mov	r0, r2
 8010932:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010934:	e035      	b.n	80109a2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	685b      	ldr	r3, [r3, #4]
 801093e:	b29a      	uxth	r2, r3
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010948:	b29b      	uxth	r3, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d005      	beq.n	801095a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010952:	f043 0204 	orr.w	r2, r3, #4
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	685a      	ldr	r2, [r3, #4]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010968:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801096e:	4618      	mov	r0, r3
 8010970:	f7f8 f98b 	bl	8008c8a <HAL_DMA_GetState>
 8010974:	4603      	mov	r3, r0
 8010976:	2b01      	cmp	r3, #1
 8010978:	d014      	beq.n	80109a4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801097e:	4a4e      	ldr	r2, [pc, #312]	; (8010ab8 <I2C_Slave_STOPF+0x258>)
 8010980:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010986:	4618      	mov	r0, r3
 8010988:	f7f7 fe39 	bl	80085fe <HAL_DMA_Abort_IT>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d008      	beq.n	80109a4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801099c:	4610      	mov	r0, r2
 801099e:	4798      	blx	r3
 80109a0:	e000      	b.n	80109a4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80109a2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d03e      	beq.n	8010a2c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	695b      	ldr	r3, [r3, #20]
 80109b4:	f003 0304 	and.w	r3, r3, #4
 80109b8:	2b04      	cmp	r3, #4
 80109ba:	d112      	bne.n	80109e2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	691a      	ldr	r2, [r3, #16]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109c6:	b2d2      	uxtb	r2, r2
 80109c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ce:	1c5a      	adds	r2, r3, #1
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109d8:	b29b      	uxth	r3, r3
 80109da:	3b01      	subs	r3, #1
 80109dc:	b29a      	uxth	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ec:	2b40      	cmp	r3, #64	; 0x40
 80109ee:	d112      	bne.n	8010a16 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	691a      	ldr	r2, [r3, #16]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fa:	b2d2      	uxtb	r2, r2
 80109fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a0c:	b29b      	uxth	r3, r3
 8010a0e:	3b01      	subs	r3, #1
 8010a10:	b29a      	uxth	r2, r3
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010a1a:	b29b      	uxth	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d005      	beq.n	8010a2c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a24:	f043 0204 	orr.w	r2, r3, #4
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d003      	beq.n	8010a3c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8010a34:	6878      	ldr	r0, [r7, #4]
 8010a36:	f000 f8b3 	bl	8010ba0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8010a3a:	e039      	b.n	8010ab0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
 8010a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8010a40:	d109      	bne.n	8010a56 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	2200      	movs	r2, #0
 8010a46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2228      	movs	r2, #40	; 0x28
 8010a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f7ff f809 	bl	800fa68 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b28      	cmp	r3, #40	; 0x28
 8010a60:	d111      	bne.n	8010a86 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4a15      	ldr	r2, [pc, #84]	; (8010abc <I2C_Slave_STOPF+0x25c>)
 8010a66:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2220      	movs	r2, #32
 8010a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f7ff f80a 	bl	800fa98 <HAL_I2C_ListenCpltCallback>
}
 8010a84:	e014      	b.n	8010ab0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a8a:	2b22      	cmp	r3, #34	; 0x22
 8010a8c:	d002      	beq.n	8010a94 <I2C_Slave_STOPF+0x234>
 8010a8e:	7bfb      	ldrb	r3, [r7, #15]
 8010a90:	2b22      	cmp	r3, #34	; 0x22
 8010a92:	d10d      	bne.n	8010ab0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2200      	movs	r2, #0
 8010a98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2220      	movs	r2, #32
 8010a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7fe ffdc 	bl	800fa68 <HAL_I2C_SlaveRxCpltCallback>
}
 8010ab0:	bf00      	nop
 8010ab2:	3710      	adds	r7, #16
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}
 8010ab8:	080115c5 	.word	0x080115c5
 8010abc:	ffff0000 	.word	0xffff0000

08010ac0 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b084      	sub	sp, #16
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010ace:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	2b08      	cmp	r3, #8
 8010ada:	d002      	beq.n	8010ae2 <I2C_Slave_AF+0x22>
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	2b20      	cmp	r3, #32
 8010ae0:	d129      	bne.n	8010b36 <I2C_Slave_AF+0x76>
 8010ae2:	7bfb      	ldrb	r3, [r7, #15]
 8010ae4:	2b28      	cmp	r3, #40	; 0x28
 8010ae6:	d126      	bne.n	8010b36 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4a2c      	ldr	r2, [pc, #176]	; (8010b9c <I2C_Slave_AF+0xdc>)
 8010aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	685a      	ldr	r2, [r3, #4]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010afc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010b06:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	681a      	ldr	r2, [r3, #0]
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b16:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	2220      	movs	r2, #32
 8010b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	2200      	movs	r2, #0
 8010b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f7fe ffb2 	bl	800fa98 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8010b34:	e02e      	b.n	8010b94 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8010b36:	7bfb      	ldrb	r3, [r7, #15]
 8010b38:	2b21      	cmp	r3, #33	; 0x21
 8010b3a:	d126      	bne.n	8010b8a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	4a17      	ldr	r2, [pc, #92]	; (8010b9c <I2C_Slave_AF+0xdc>)
 8010b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2221      	movs	r2, #33	; 0x21
 8010b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2220      	movs	r2, #32
 8010b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	685a      	ldr	r2, [r3, #4]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010b66:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010b70:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b80:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010b82:	6878      	ldr	r0, [r7, #4]
 8010b84:	f7fe ff66 	bl	800fa54 <HAL_I2C_SlaveTxCpltCallback>
}
 8010b88:	e004      	b.n	8010b94 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010b92:	615a      	str	r2, [r3, #20]
}
 8010b94:	bf00      	nop
 8010b96:	3710      	adds	r7, #16
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	ffff0000 	.word	0xffff0000

08010ba0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010bb6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010bb8:	7bbb      	ldrb	r3, [r7, #14]
 8010bba:	2b10      	cmp	r3, #16
 8010bbc:	d002      	beq.n	8010bc4 <I2C_ITError+0x24>
 8010bbe:	7bbb      	ldrb	r3, [r7, #14]
 8010bc0:	2b40      	cmp	r3, #64	; 0x40
 8010bc2:	d10a      	bne.n	8010bda <I2C_ITError+0x3a>
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
 8010bc6:	2b22      	cmp	r3, #34	; 0x22
 8010bc8:	d107      	bne.n	8010bda <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010bd8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010bda:	7bfb      	ldrb	r3, [r7, #15]
 8010bdc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010be0:	2b28      	cmp	r3, #40	; 0x28
 8010be2:	d107      	bne.n	8010bf4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2200      	movs	r2, #0
 8010be8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	2228      	movs	r2, #40	; 0x28
 8010bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010bf2:	e015      	b.n	8010c20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c02:	d00a      	beq.n	8010c1a <I2C_ITError+0x7a>
 8010c04:	7bfb      	ldrb	r3, [r7, #15]
 8010c06:	2b60      	cmp	r3, #96	; 0x60
 8010c08:	d007      	beq.n	8010c1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2220      	movs	r2, #32
 8010c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	685b      	ldr	r3, [r3, #4]
 8010c26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c2e:	d162      	bne.n	8010cf6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	685a      	ldr	r2, [r3, #4]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010c3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	d020      	beq.n	8010c90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c52:	4a6a      	ldr	r2, [pc, #424]	; (8010dfc <I2C_ITError+0x25c>)
 8010c54:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7f7 fccf 	bl	80085fe <HAL_DMA_Abort_IT>
 8010c60:	4603      	mov	r3, r0
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	f000 8089 	beq.w	8010d7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f022 0201 	bic.w	r2, r2, #1
 8010c76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2220      	movs	r2, #32
 8010c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8010c8a:	4610      	mov	r0, r2
 8010c8c:	4798      	blx	r3
 8010c8e:	e074      	b.n	8010d7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c94:	4a59      	ldr	r2, [pc, #356]	; (8010dfc <I2C_ITError+0x25c>)
 8010c96:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7f7 fcae 	bl	80085fe <HAL_DMA_Abort_IT>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d068      	beq.n	8010d7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	695b      	ldr	r3, [r3, #20]
 8010cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cb2:	2b40      	cmp	r3, #64	; 0x40
 8010cb4:	d10b      	bne.n	8010cce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	691a      	ldr	r2, [r3, #16]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc0:	b2d2      	uxtb	r2, r2
 8010cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc8:	1c5a      	adds	r2, r3, #1
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	681a      	ldr	r2, [r3, #0]
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f022 0201 	bic.w	r2, r2, #1
 8010cdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2220      	movs	r2, #32
 8010ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cec:	687a      	ldr	r2, [r7, #4]
 8010cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	4798      	blx	r3
 8010cf4:	e041      	b.n	8010d7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b60      	cmp	r3, #96	; 0x60
 8010d00:	d125      	bne.n	8010d4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2220      	movs	r2, #32
 8010d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	695b      	ldr	r3, [r3, #20]
 8010d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d1a:	2b40      	cmp	r3, #64	; 0x40
 8010d1c:	d10b      	bne.n	8010d36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	691a      	ldr	r2, [r3, #16]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d28:	b2d2      	uxtb	r2, r2
 8010d2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d30:	1c5a      	adds	r2, r3, #1
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f022 0201 	bic.w	r2, r2, #1
 8010d44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7fe fece 	bl	800fae8 <HAL_I2C_AbortCpltCallback>
 8010d4c:	e015      	b.n	8010d7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	695b      	ldr	r3, [r3, #20]
 8010d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d58:	2b40      	cmp	r3, #64	; 0x40
 8010d5a:	d10b      	bne.n	8010d74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	691a      	ldr	r2, [r3, #16]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d66:	b2d2      	uxtb	r2, r2
 8010d68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6e:	1c5a      	adds	r2, r3, #1
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f7fe fead 	bl	800fad4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	f003 0301 	and.w	r3, r3, #1
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d10e      	bne.n	8010da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d109      	bne.n	8010da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d104      	bne.n	8010da8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d007      	beq.n	8010db8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	685a      	ldr	r2, [r3, #4]
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010db6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010dbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dc4:	f003 0304 	and.w	r3, r3, #4
 8010dc8:	2b04      	cmp	r3, #4
 8010dca:	d113      	bne.n	8010df4 <I2C_ITError+0x254>
 8010dcc:	7bfb      	ldrb	r3, [r7, #15]
 8010dce:	2b28      	cmp	r3, #40	; 0x28
 8010dd0:	d110      	bne.n	8010df4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	4a0a      	ldr	r2, [pc, #40]	; (8010e00 <I2C_ITError+0x260>)
 8010dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2220      	movs	r2, #32
 8010de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	2200      	movs	r2, #0
 8010dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f7fe fe52 	bl	800fa98 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010df4:	bf00      	nop
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	080115c5 	.word	0x080115c5
 8010e00:	ffff0000 	.word	0xffff0000

08010e04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b088      	sub	sp, #32
 8010e08:	af02      	add	r7, sp, #8
 8010e0a:	60f8      	str	r0, [r7, #12]
 8010e0c:	607a      	str	r2, [r7, #4]
 8010e0e:	603b      	str	r3, [r7, #0]
 8010e10:	460b      	mov	r3, r1
 8010e12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	2b08      	cmp	r3, #8
 8010e1e:	d006      	beq.n	8010e2e <I2C_MasterRequestWrite+0x2a>
 8010e20:	697b      	ldr	r3, [r7, #20]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d003      	beq.n	8010e2e <I2C_MasterRequestWrite+0x2a>
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010e2c:	d108      	bne.n	8010e40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010e3c:	601a      	str	r2, [r3, #0]
 8010e3e:	e00b      	b.n	8010e58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e44:	2b12      	cmp	r3, #18
 8010e46:	d107      	bne.n	8010e58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681a      	ldr	r2, [r3, #0]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010e56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010e58:	683b      	ldr	r3, [r7, #0]
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	2200      	movs	r2, #0
 8010e60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010e64:	68f8      	ldr	r0, [r7, #12]
 8010e66:	f000 fc55 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00d      	beq.n	8010e8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e7e:	d103      	bne.n	8010e88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010e86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010e88:	2303      	movs	r3, #3
 8010e8a:	e035      	b.n	8010ef8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	691b      	ldr	r3, [r3, #16]
 8010e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e94:	d108      	bne.n	8010ea8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010e96:	897b      	ldrh	r3, [r7, #10]
 8010e98:	b2db      	uxtb	r3, r3
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010ea4:	611a      	str	r2, [r3, #16]
 8010ea6:	e01b      	b.n	8010ee0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010ea8:	897b      	ldrh	r3, [r7, #10]
 8010eaa:	11db      	asrs	r3, r3, #7
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	f003 0306 	and.w	r3, r3, #6
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	f063 030f 	orn	r3, r3, #15
 8010eb8:	b2da      	uxtb	r2, r3
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	490e      	ldr	r1, [pc, #56]	; (8010f00 <I2C_MasterRequestWrite+0xfc>)
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f000 fc7b 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d001      	beq.n	8010ed6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	e010      	b.n	8010ef8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010ed6:	897b      	ldrh	r3, [r7, #10]
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	4907      	ldr	r1, [pc, #28]	; (8010f04 <I2C_MasterRequestWrite+0x100>)
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f000 fc6b 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d001      	beq.n	8010ef6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e000      	b.n	8010ef8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010ef6:	2300      	movs	r3, #0
}
 8010ef8:	4618      	mov	r0, r3
 8010efa:	3718      	adds	r7, #24
 8010efc:	46bd      	mov	sp, r7
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	00010008 	.word	0x00010008
 8010f04:	00010002 	.word	0x00010002

08010f08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b088      	sub	sp, #32
 8010f0c:	af02      	add	r7, sp, #8
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	607a      	str	r2, [r7, #4]
 8010f12:	603b      	str	r3, [r7, #0]
 8010f14:	460b      	mov	r3, r1
 8010f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	681a      	ldr	r2, [r3, #0]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010f2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	2b08      	cmp	r3, #8
 8010f32:	d006      	beq.n	8010f42 <I2C_MasterRequestRead+0x3a>
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d003      	beq.n	8010f42 <I2C_MasterRequestRead+0x3a>
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010f40:	d108      	bne.n	8010f54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	e00b      	b.n	8010f6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f58:	2b11      	cmp	r3, #17
 8010f5a:	d107      	bne.n	8010f6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2200      	movs	r2, #0
 8010f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010f78:	68f8      	ldr	r0, [r7, #12]
 8010f7a:	f000 fbcb 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00d      	beq.n	8010fa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010f92:	d103      	bne.n	8010f9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010f9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010f9c:	2303      	movs	r3, #3
 8010f9e:	e079      	b.n	8011094 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010fa8:	d108      	bne.n	8010fbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010faa:	897b      	ldrh	r3, [r7, #10]
 8010fac:	b2db      	uxtb	r3, r3
 8010fae:	f043 0301 	orr.w	r3, r3, #1
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	611a      	str	r2, [r3, #16]
 8010fba:	e05f      	b.n	801107c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010fbc:	897b      	ldrh	r3, [r7, #10]
 8010fbe:	11db      	asrs	r3, r3, #7
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	f003 0306 	and.w	r3, r3, #6
 8010fc6:	b2db      	uxtb	r3, r3
 8010fc8:	f063 030f 	orn	r3, r3, #15
 8010fcc:	b2da      	uxtb	r2, r3
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	4930      	ldr	r1, [pc, #192]	; (801109c <I2C_MasterRequestRead+0x194>)
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f000 fbf1 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d001      	beq.n	8010fea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010fe6:	2301      	movs	r3, #1
 8010fe8:	e054      	b.n	8011094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010fea:	897b      	ldrh	r3, [r7, #10]
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	687a      	ldr	r2, [r7, #4]
 8010ff8:	4929      	ldr	r1, [pc, #164]	; (80110a0 <I2C_MasterRequestRead+0x198>)
 8010ffa:	68f8      	ldr	r0, [r7, #12]
 8010ffc:	f000 fbe1 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011000:	4603      	mov	r3, r0
 8011002:	2b00      	cmp	r3, #0
 8011004:	d001      	beq.n	801100a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8011006:	2301      	movs	r3, #1
 8011008:	e044      	b.n	8011094 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801100a:	2300      	movs	r3, #0
 801100c:	613b      	str	r3, [r7, #16]
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	695b      	ldr	r3, [r3, #20]
 8011014:	613b      	str	r3, [r7, #16]
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	699b      	ldr	r3, [r3, #24]
 801101c:	613b      	str	r3, [r7, #16]
 801101e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	681a      	ldr	r2, [r3, #0]
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801102e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	2200      	movs	r2, #0
 8011038:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f000 fb69 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00d      	beq.n	8011064 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011056:	d103      	bne.n	8011060 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801105e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8011060:	2303      	movs	r3, #3
 8011062:	e017      	b.n	8011094 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8011064:	897b      	ldrh	r3, [r7, #10]
 8011066:	11db      	asrs	r3, r3, #7
 8011068:	b2db      	uxtb	r3, r3
 801106a:	f003 0306 	and.w	r3, r3, #6
 801106e:	b2db      	uxtb	r3, r3
 8011070:	f063 030e 	orn	r3, r3, #14
 8011074:	b2da      	uxtb	r2, r3
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	4907      	ldr	r1, [pc, #28]	; (80110a0 <I2C_MasterRequestRead+0x198>)
 8011082:	68f8      	ldr	r0, [r7, #12]
 8011084:	f000 fb9d 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011088:	4603      	mov	r3, r0
 801108a:	2b00      	cmp	r3, #0
 801108c:	d001      	beq.n	8011092 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801108e:	2301      	movs	r3, #1
 8011090:	e000      	b.n	8011094 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8011092:	2300      	movs	r3, #0
}
 8011094:	4618      	mov	r0, r3
 8011096:	3718      	adds	r7, #24
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}
 801109c:	00010008 	.word	0x00010008
 80110a0:	00010002 	.word	0x00010002

080110a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b088      	sub	sp, #32
 80110a8:	af02      	add	r7, sp, #8
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	4608      	mov	r0, r1
 80110ae:	4611      	mov	r1, r2
 80110b0:	461a      	mov	r2, r3
 80110b2:	4603      	mov	r3, r0
 80110b4:	817b      	strh	r3, [r7, #10]
 80110b6:	460b      	mov	r3, r1
 80110b8:	813b      	strh	r3, [r7, #8]
 80110ba:	4613      	mov	r3, r2
 80110bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80110cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80110ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110d0:	9300      	str	r3, [sp, #0]
 80110d2:	6a3b      	ldr	r3, [r7, #32]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80110da:	68f8      	ldr	r0, [r7, #12]
 80110dc:	f000 fb1a 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 80110e0:	4603      	mov	r3, r0
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d00d      	beq.n	8011102 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110f4:	d103      	bne.n	80110fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80110fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80110fe:	2303      	movs	r3, #3
 8011100:	e05f      	b.n	80111c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8011102:	897b      	ldrh	r3, [r7, #10]
 8011104:	b2db      	uxtb	r3, r3
 8011106:	461a      	mov	r2, r3
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8011110:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8011112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011114:	6a3a      	ldr	r2, [r7, #32]
 8011116:	492d      	ldr	r1, [pc, #180]	; (80111cc <I2C_RequestMemoryWrite+0x128>)
 8011118:	68f8      	ldr	r0, [r7, #12]
 801111a:	f000 fb52 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801111e:	4603      	mov	r3, r0
 8011120:	2b00      	cmp	r3, #0
 8011122:	d001      	beq.n	8011128 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8011124:	2301      	movs	r3, #1
 8011126:	e04c      	b.n	80111c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011128:	2300      	movs	r3, #0
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	695b      	ldr	r3, [r3, #20]
 8011132:	617b      	str	r3, [r7, #20]
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	699b      	ldr	r3, [r3, #24]
 801113a:	617b      	str	r3, [r7, #20]
 801113c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801113e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011140:	6a39      	ldr	r1, [r7, #32]
 8011142:	68f8      	ldr	r0, [r7, #12]
 8011144:	f000 fbbc 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8011148:	4603      	mov	r3, r0
 801114a:	2b00      	cmp	r3, #0
 801114c:	d00d      	beq.n	801116a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011152:	2b04      	cmp	r3, #4
 8011154:	d107      	bne.n	8011166 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011164:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e02b      	b.n	80111c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801116a:	88fb      	ldrh	r3, [r7, #6]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d105      	bne.n	801117c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8011170:	893b      	ldrh	r3, [r7, #8]
 8011172:	b2da      	uxtb	r2, r3
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	611a      	str	r2, [r3, #16]
 801117a:	e021      	b.n	80111c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801117c:	893b      	ldrh	r3, [r7, #8]
 801117e:	0a1b      	lsrs	r3, r3, #8
 8011180:	b29b      	uxth	r3, r3
 8011182:	b2da      	uxtb	r2, r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801118a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801118c:	6a39      	ldr	r1, [r7, #32]
 801118e:	68f8      	ldr	r0, [r7, #12]
 8011190:	f000 fb96 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00d      	beq.n	80111b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119e:	2b04      	cmp	r3, #4
 80111a0:	d107      	bne.n	80111b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	681a      	ldr	r2, [r3, #0]
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80111b2:	2301      	movs	r3, #1
 80111b4:	e005      	b.n	80111c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80111b6:	893b      	ldrh	r3, [r7, #8]
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80111c0:	2300      	movs	r3, #0
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	3718      	adds	r7, #24
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	00010002 	.word	0x00010002

080111d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b088      	sub	sp, #32
 80111d4:	af02      	add	r7, sp, #8
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	4608      	mov	r0, r1
 80111da:	4611      	mov	r1, r2
 80111dc:	461a      	mov	r2, r3
 80111de:	4603      	mov	r3, r0
 80111e0:	817b      	strh	r3, [r7, #10]
 80111e2:	460b      	mov	r3, r1
 80111e4:	813b      	strh	r3, [r7, #8]
 80111e6:	4613      	mov	r3, r2
 80111e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	681a      	ldr	r2, [r3, #0]
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80111f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	681a      	ldr	r2, [r3, #0]
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011208:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801120c:	9300      	str	r3, [sp, #0]
 801120e:	6a3b      	ldr	r3, [r7, #32]
 8011210:	2200      	movs	r2, #0
 8011212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f000 fa7c 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d00d      	beq.n	801123e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801122c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011230:	d103      	bne.n	801123a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011238:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801123a:	2303      	movs	r3, #3
 801123c:	e0aa      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801123e:	897b      	ldrh	r3, [r7, #10]
 8011240:	b2db      	uxtb	r3, r3
 8011242:	461a      	mov	r2, r3
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801124c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011250:	6a3a      	ldr	r2, [r7, #32]
 8011252:	4952      	ldr	r1, [pc, #328]	; (801139c <I2C_RequestMemoryRead+0x1cc>)
 8011254:	68f8      	ldr	r0, [r7, #12]
 8011256:	f000 fab4 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801125a:	4603      	mov	r3, r0
 801125c:	2b00      	cmp	r3, #0
 801125e:	d001      	beq.n	8011264 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8011260:	2301      	movs	r3, #1
 8011262:	e097      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8011264:	2300      	movs	r3, #0
 8011266:	617b      	str	r3, [r7, #20]
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	695b      	ldr	r3, [r3, #20]
 801126e:	617b      	str	r3, [r7, #20]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	699b      	ldr	r3, [r3, #24]
 8011276:	617b      	str	r3, [r7, #20]
 8011278:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801127a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127c:	6a39      	ldr	r1, [r7, #32]
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	f000 fb1e 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00d      	beq.n	80112a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801128e:	2b04      	cmp	r3, #4
 8011290:	d107      	bne.n	80112a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	681a      	ldr	r2, [r3, #0]
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80112a2:	2301      	movs	r3, #1
 80112a4:	e076      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80112a6:	88fb      	ldrh	r3, [r7, #6]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d105      	bne.n	80112b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80112ac:	893b      	ldrh	r3, [r7, #8]
 80112ae:	b2da      	uxtb	r2, r3
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	611a      	str	r2, [r3, #16]
 80112b6:	e021      	b.n	80112fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80112b8:	893b      	ldrh	r3, [r7, #8]
 80112ba:	0a1b      	lsrs	r3, r3, #8
 80112bc:	b29b      	uxth	r3, r3
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80112c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112c8:	6a39      	ldr	r1, [r7, #32]
 80112ca:	68f8      	ldr	r0, [r7, #12]
 80112cc:	f000 faf8 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00d      	beq.n	80112f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80112da:	2b04      	cmp	r3, #4
 80112dc:	d107      	bne.n	80112ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80112ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80112ee:	2301      	movs	r3, #1
 80112f0:	e050      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80112f2:	893b      	ldrh	r3, [r7, #8]
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80112fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112fe:	6a39      	ldr	r1, [r7, #32]
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f000 fadd 	bl	80118c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8011306:	4603      	mov	r3, r0
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00d      	beq.n	8011328 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011310:	2b04      	cmp	r3, #4
 8011312:	d107      	bne.n	8011324 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011322:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8011324:	2301      	movs	r3, #1
 8011326:	e035      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011336:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8011338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801133a:	9300      	str	r3, [sp, #0]
 801133c:	6a3b      	ldr	r3, [r7, #32]
 801133e:	2200      	movs	r2, #0
 8011340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f000 f9e5 	bl	8011714 <I2C_WaitOnFlagUntilTimeout>
 801134a:	4603      	mov	r3, r0
 801134c:	2b00      	cmp	r3, #0
 801134e:	d00d      	beq.n	801136c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801135a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801135e:	d103      	bne.n	8011368 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8011368:	2303      	movs	r3, #3
 801136a:	e013      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801136c:	897b      	ldrh	r3, [r7, #10]
 801136e:	b2db      	uxtb	r3, r3
 8011370:	f043 0301 	orr.w	r3, r3, #1
 8011374:	b2da      	uxtb	r2, r3
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	6a3a      	ldr	r2, [r7, #32]
 8011380:	4906      	ldr	r1, [pc, #24]	; (801139c <I2C_RequestMemoryRead+0x1cc>)
 8011382:	68f8      	ldr	r0, [r7, #12]
 8011384:	f000 fa1d 	bl	80117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8011388:	4603      	mov	r3, r0
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 801138e:	2301      	movs	r3, #1
 8011390:	e000      	b.n	8011394 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8011392:	2300      	movs	r3, #0
}
 8011394:	4618      	mov	r0, r3
 8011396:	3718      	adds	r7, #24
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	00010002 	.word	0x00010002

080113a0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ac:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80113b4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80113bc:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	685a      	ldr	r2, [r3, #4]
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80113d2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d003      	beq.n	80113e4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80113dc:	697b      	ldr	r3, [r7, #20]
 80113de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113e0:	2200      	movs	r2, #0
 80113e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d003      	beq.n	80113f4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113f0:	2200      	movs	r2, #0
 80113f2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80113f4:	7cfb      	ldrb	r3, [r7, #19]
 80113f6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80113fa:	2b21      	cmp	r3, #33	; 0x21
 80113fc:	d007      	beq.n	801140e <I2C_DMAXferCplt+0x6e>
 80113fe:	7cfb      	ldrb	r3, [r7, #19]
 8011400:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8011404:	2b22      	cmp	r3, #34	; 0x22
 8011406:	d131      	bne.n	801146c <I2C_DMAXferCplt+0xcc>
 8011408:	7cbb      	ldrb	r3, [r7, #18]
 801140a:	2b20      	cmp	r3, #32
 801140c:	d12e      	bne.n	801146c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	685a      	ldr	r2, [r3, #4]
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801141c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	2200      	movs	r2, #0
 8011422:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8011424:	7cfb      	ldrb	r3, [r7, #19]
 8011426:	2b29      	cmp	r3, #41	; 0x29
 8011428:	d10a      	bne.n	8011440 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	2221      	movs	r2, #33	; 0x21
 801142e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	2228      	movs	r2, #40	; 0x28
 8011434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8011438:	6978      	ldr	r0, [r7, #20]
 801143a:	f7fe fb0b 	bl	800fa54 <HAL_I2C_SlaveTxCpltCallback>
 801143e:	e00c      	b.n	801145a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8011440:	7cfb      	ldrb	r3, [r7, #19]
 8011442:	2b2a      	cmp	r3, #42	; 0x2a
 8011444:	d109      	bne.n	801145a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	2222      	movs	r2, #34	; 0x22
 801144a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	2228      	movs	r2, #40	; 0x28
 8011450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8011454:	6978      	ldr	r0, [r7, #20]
 8011456:	f7fe fb07 	bl	800fa68 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 801145a:	697b      	ldr	r3, [r7, #20]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8011468:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 801146a:	e06a      	b.n	8011542 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011472:	b2db      	uxtb	r3, r3
 8011474:	2b00      	cmp	r3, #0
 8011476:	d064      	beq.n	8011542 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801147c:	b29b      	uxth	r3, r3
 801147e:	2b01      	cmp	r3, #1
 8011480:	d107      	bne.n	8011492 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011482:	697b      	ldr	r3, [r7, #20]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011490:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	685a      	ldr	r2, [r3, #4]
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80114a0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80114a8:	d009      	beq.n	80114be <I2C_DMAXferCplt+0x11e>
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2b08      	cmp	r3, #8
 80114ae:	d006      	beq.n	80114be <I2C_DMAXferCplt+0x11e>
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80114b6:	d002      	beq.n	80114be <I2C_DMAXferCplt+0x11e>
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b20      	cmp	r3, #32
 80114bc:	d107      	bne.n	80114ce <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80114cc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80114ce:	697b      	ldr	r3, [r7, #20]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	685a      	ldr	r2, [r3, #4]
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80114dc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	685a      	ldr	r2, [r3, #4]
 80114e4:	697b      	ldr	r3, [r7, #20]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80114ec:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	2200      	movs	r2, #0
 80114f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80114f4:	697b      	ldr	r3, [r7, #20]
 80114f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d003      	beq.n	8011504 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80114fc:	6978      	ldr	r0, [r7, #20]
 80114fe:	f7fe fae9 	bl	800fad4 <HAL_I2C_ErrorCallback>
}
 8011502:	e01e      	b.n	8011542 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	2220      	movs	r2, #32
 8011508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8011512:	b2db      	uxtb	r3, r3
 8011514:	2b40      	cmp	r3, #64	; 0x40
 8011516:	d10a      	bne.n	801152e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	2200      	movs	r2, #0
 801151c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	2200      	movs	r2, #0
 8011524:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8011526:	6978      	ldr	r0, [r7, #20]
 8011528:	f7fe faca 	bl	800fac0 <HAL_I2C_MemRxCpltCallback>
}
 801152c:	e009      	b.n	8011542 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	2212      	movs	r2, #18
 801153a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 801153c:	6978      	ldr	r0, [r7, #20]
 801153e:	f7fe fa7f 	bl	800fa40 <HAL_I2C_MasterRxCpltCallback>
}
 8011542:	bf00      	nop
 8011544:	3718      	adds	r7, #24
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	b084      	sub	sp, #16
 801154e:	af00      	add	r7, sp, #0
 8011550:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011556:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011564:	2200      	movs	r2, #0
 8011566:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801156c:	2b00      	cmp	r3, #0
 801156e:	d003      	beq.n	8011578 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011574:	2200      	movs	r2, #0
 8011576:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8011578:	6878      	ldr	r0, [r7, #4]
 801157a:	f7f7 fb94 	bl	8008ca6 <HAL_DMA_GetError>
 801157e:	4603      	mov	r3, r0
 8011580:	2b02      	cmp	r3, #2
 8011582:	d01b      	beq.n	80115bc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011592:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2200      	movs	r2, #0
 8011598:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	2220      	movs	r2, #32
 801159e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115ae:	f043 0210 	orr.w	r2, r3, #16
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f7fe fa8c 	bl	800fad4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80115bc:	bf00      	nop
 80115be:	3710      	adds	r7, #16
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b086      	sub	sp, #24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80115cc:	2300      	movs	r3, #0
 80115ce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115d4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80115dc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80115de:	4b4b      	ldr	r3, [pc, #300]	; (801170c <I2C_DMAAbort+0x148>)
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	08db      	lsrs	r3, r3, #3
 80115e4:	4a4a      	ldr	r2, [pc, #296]	; (8011710 <I2C_DMAAbort+0x14c>)
 80115e6:	fba2 2303 	umull	r2, r3, r2, r3
 80115ea:	0a1a      	lsrs	r2, r3, #8
 80115ec:	4613      	mov	r3, r2
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	4413      	add	r3, r2
 80115f2:	00da      	lsls	r2, r3, #3
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d106      	bne.n	801160c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011602:	f043 0220 	orr.w	r2, r3, #32
 8011606:	697b      	ldr	r3, [r7, #20]
 8011608:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 801160a:	e00a      	b.n	8011622 <I2C_DMAAbort+0x5e>
    }
    count--;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	3b01      	subs	r3, #1
 8011610:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8011612:	697b      	ldr	r3, [r7, #20]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801161c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011620:	d0ea      	beq.n	80115f8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011626:	2b00      	cmp	r3, #0
 8011628:	d003      	beq.n	8011632 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801162e:	2200      	movs	r2, #0
 8011630:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011636:	2b00      	cmp	r3, #0
 8011638:	d003      	beq.n	8011642 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 801163a:	697b      	ldr	r3, [r7, #20]
 801163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801163e:	2200      	movs	r2, #0
 8011640:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011650:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8011652:	697b      	ldr	r3, [r7, #20]
 8011654:	2200      	movs	r2, #0
 8011656:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801165c:	2b00      	cmp	r3, #0
 801165e:	d003      	beq.n	8011668 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011664:	2200      	movs	r2, #0
 8011666:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8011668:	697b      	ldr	r3, [r7, #20]
 801166a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801166c:	2b00      	cmp	r3, #0
 801166e:	d003      	beq.n	8011678 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011674:	2200      	movs	r2, #0
 8011676:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	697b      	ldr	r3, [r7, #20]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	f022 0201 	bic.w	r2, r2, #1
 8011686:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8011688:	697b      	ldr	r3, [r7, #20]
 801168a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801168e:	b2db      	uxtb	r3, r3
 8011690:	2b60      	cmp	r3, #96	; 0x60
 8011692:	d10e      	bne.n	80116b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	2220      	movs	r2, #32
 8011698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2200      	movs	r2, #0
 80116a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	2200      	movs	r2, #0
 80116a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80116aa:	6978      	ldr	r0, [r7, #20]
 80116ac:	f7fe fa1c 	bl	800fae8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80116b0:	e027      	b.n	8011702 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80116b2:	7cfb      	ldrb	r3, [r7, #19]
 80116b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80116b8:	2b28      	cmp	r3, #40	; 0x28
 80116ba:	d117      	bne.n	80116ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80116bc:	697b      	ldr	r3, [r7, #20]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	681a      	ldr	r2, [r3, #0]
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	f042 0201 	orr.w	r2, r2, #1
 80116ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	681a      	ldr	r2, [r3, #0]
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80116da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	2200      	movs	r2, #0
 80116e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80116e2:	697b      	ldr	r3, [r7, #20]
 80116e4:	2228      	movs	r2, #40	; 0x28
 80116e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80116ea:	e007      	b.n	80116fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	2220      	movs	r2, #32
 80116f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80116fc:	6978      	ldr	r0, [r7, #20]
 80116fe:	f7fe f9e9 	bl	800fad4 <HAL_I2C_ErrorCallback>
}
 8011702:	bf00      	nop
 8011704:	3718      	adds	r7, #24
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	20000058 	.word	0x20000058
 8011710:	14f8b589 	.word	0x14f8b589

08011714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b084      	sub	sp, #16
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	603b      	str	r3, [r7, #0]
 8011720:	4613      	mov	r3, r2
 8011722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011724:	e025      	b.n	8011772 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801172c:	d021      	beq.n	8011772 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801172e:	f7f5 fc35 	bl	8006f9c <HAL_GetTick>
 8011732:	4602      	mov	r2, r0
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	1ad3      	subs	r3, r2, r3
 8011738:	683a      	ldr	r2, [r7, #0]
 801173a:	429a      	cmp	r2, r3
 801173c:	d302      	bcc.n	8011744 <I2C_WaitOnFlagUntilTimeout+0x30>
 801173e:	683b      	ldr	r3, [r7, #0]
 8011740:	2b00      	cmp	r3, #0
 8011742:	d116      	bne.n	8011772 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	2200      	movs	r2, #0
 8011748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2220      	movs	r2, #32
 801174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801175e:	f043 0220 	orr.w	r2, r3, #32
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	2200      	movs	r2, #0
 801176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	e023      	b.n	80117ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	0c1b      	lsrs	r3, r3, #16
 8011776:	b2db      	uxtb	r3, r3
 8011778:	2b01      	cmp	r3, #1
 801177a:	d10d      	bne.n	8011798 <I2C_WaitOnFlagUntilTimeout+0x84>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	695b      	ldr	r3, [r3, #20]
 8011782:	43da      	mvns	r2, r3
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	4013      	ands	r3, r2
 8011788:	b29b      	uxth	r3, r3
 801178a:	2b00      	cmp	r3, #0
 801178c:	bf0c      	ite	eq
 801178e:	2301      	moveq	r3, #1
 8011790:	2300      	movne	r3, #0
 8011792:	b2db      	uxtb	r3, r3
 8011794:	461a      	mov	r2, r3
 8011796:	e00c      	b.n	80117b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	699b      	ldr	r3, [r3, #24]
 801179e:	43da      	mvns	r2, r3
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	4013      	ands	r3, r2
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	bf0c      	ite	eq
 80117aa:	2301      	moveq	r3, #1
 80117ac:	2300      	movne	r3, #0
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	461a      	mov	r2, r3
 80117b2:	79fb      	ldrb	r3, [r7, #7]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d0b6      	beq.n	8011726 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b084      	sub	sp, #16
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	60f8      	str	r0, [r7, #12]
 80117ca:	60b9      	str	r1, [r7, #8]
 80117cc:	607a      	str	r2, [r7, #4]
 80117ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80117d0:	e051      	b.n	8011876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	695b      	ldr	r3, [r3, #20]
 80117d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80117dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80117e0:	d123      	bne.n	801182a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80117f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	681b      	ldr	r3, [r3, #0]
 80117f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80117fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	2200      	movs	r2, #0
 8011800:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	2220      	movs	r2, #32
 8011806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	2200      	movs	r2, #0
 801180e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011816:	f043 0204 	orr.w	r2, r3, #4
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011826:	2301      	movs	r3, #1
 8011828:	e046      	b.n	80118b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011830:	d021      	beq.n	8011876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011832:	f7f5 fbb3 	bl	8006f9c <HAL_GetTick>
 8011836:	4602      	mov	r2, r0
 8011838:	683b      	ldr	r3, [r7, #0]
 801183a:	1ad3      	subs	r3, r2, r3
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	429a      	cmp	r2, r3
 8011840:	d302      	bcc.n	8011848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2b00      	cmp	r3, #0
 8011846:	d116      	bne.n	8011876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	2200      	movs	r2, #0
 801184c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	2220      	movs	r2, #32
 8011852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	2200      	movs	r2, #0
 801185a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011862:	f043 0220 	orr.w	r2, r3, #32
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	2200      	movs	r2, #0
 801186e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011872:	2301      	movs	r3, #1
 8011874:	e020      	b.n	80118b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	0c1b      	lsrs	r3, r3, #16
 801187a:	b2db      	uxtb	r3, r3
 801187c:	2b01      	cmp	r3, #1
 801187e:	d10c      	bne.n	801189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	695b      	ldr	r3, [r3, #20]
 8011886:	43da      	mvns	r2, r3
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	4013      	ands	r3, r2
 801188c:	b29b      	uxth	r3, r3
 801188e:	2b00      	cmp	r3, #0
 8011890:	bf14      	ite	ne
 8011892:	2301      	movne	r3, #1
 8011894:	2300      	moveq	r3, #0
 8011896:	b2db      	uxtb	r3, r3
 8011898:	e00b      	b.n	80118b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	699b      	ldr	r3, [r3, #24]
 80118a0:	43da      	mvns	r2, r3
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	4013      	ands	r3, r2
 80118a6:	b29b      	uxth	r3, r3
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	bf14      	ite	ne
 80118ac:	2301      	movne	r3, #1
 80118ae:	2300      	moveq	r3, #0
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d18d      	bne.n	80117d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80118b6:	2300      	movs	r3, #0
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	3710      	adds	r7, #16
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	60f8      	str	r0, [r7, #12]
 80118c8:	60b9      	str	r1, [r7, #8]
 80118ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80118cc:	e02d      	b.n	801192a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80118ce:	68f8      	ldr	r0, [r7, #12]
 80118d0:	f000 f93e 	bl	8011b50 <I2C_IsAcknowledgeFailed>
 80118d4:	4603      	mov	r3, r0
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d001      	beq.n	80118de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80118da:	2301      	movs	r3, #1
 80118dc:	e02d      	b.n	801193a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e4:	d021      	beq.n	801192a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80118e6:	f7f5 fb59 	bl	8006f9c <HAL_GetTick>
 80118ea:	4602      	mov	r2, r0
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	429a      	cmp	r2, r3
 80118f4:	d302      	bcc.n	80118fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d116      	bne.n	801192a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2200      	movs	r2, #0
 8011900:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2220      	movs	r2, #32
 8011906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2200      	movs	r2, #0
 801190e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011916:	f043 0220 	orr.w	r2, r3, #32
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011926:	2301      	movs	r3, #1
 8011928:	e007      	b.n	801193a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	695b      	ldr	r3, [r3, #20]
 8011930:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011934:	2b80      	cmp	r3, #128	; 0x80
 8011936:	d1ca      	bne.n	80118ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8011938:	2300      	movs	r3, #0
}
 801193a:	4618      	mov	r0, r3
 801193c:	3710      	adds	r7, #16
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}

08011942 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011942:	b580      	push	{r7, lr}
 8011944:	b084      	sub	sp, #16
 8011946:	af00      	add	r7, sp, #0
 8011948:	60f8      	str	r0, [r7, #12]
 801194a:	60b9      	str	r1, [r7, #8]
 801194c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801194e:	e02d      	b.n	80119ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f000 f8fd 	bl	8011b50 <I2C_IsAcknowledgeFailed>
 8011956:	4603      	mov	r3, r0
 8011958:	2b00      	cmp	r3, #0
 801195a:	d001      	beq.n	8011960 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801195c:	2301      	movs	r3, #1
 801195e:	e02d      	b.n	80119bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011960:	68bb      	ldr	r3, [r7, #8]
 8011962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011966:	d021      	beq.n	80119ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011968:	f7f5 fb18 	bl	8006f9c <HAL_GetTick>
 801196c:	4602      	mov	r2, r0
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	1ad3      	subs	r3, r2, r3
 8011972:	68ba      	ldr	r2, [r7, #8]
 8011974:	429a      	cmp	r2, r3
 8011976:	d302      	bcc.n	801197e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d116      	bne.n	80119ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2200      	movs	r2, #0
 8011982:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	2220      	movs	r2, #32
 8011988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2200      	movs	r2, #0
 8011990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011998:	f043 0220 	orr.w	r2, r3, #32
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	2200      	movs	r2, #0
 80119a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80119a8:	2301      	movs	r3, #1
 80119aa:	e007      	b.n	80119bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	695b      	ldr	r3, [r3, #20]
 80119b2:	f003 0304 	and.w	r3, r3, #4
 80119b6:	2b04      	cmp	r3, #4
 80119b8:	d1ca      	bne.n	8011950 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80119ba:	2300      	movs	r3, #0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3710      	adds	r7, #16
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	60b9      	str	r1, [r7, #8]
 80119ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80119d0:	e029      	b.n	8011a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80119d2:	68f8      	ldr	r0, [r7, #12]
 80119d4:	f000 f8bc 	bl	8011b50 <I2C_IsAcknowledgeFailed>
 80119d8:	4603      	mov	r3, r0
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d001      	beq.n	80119e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80119de:	2301      	movs	r3, #1
 80119e0:	e029      	b.n	8011a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119e2:	f7f5 fadb 	bl	8006f9c <HAL_GetTick>
 80119e6:	4602      	mov	r2, r0
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	68ba      	ldr	r2, [r7, #8]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	d302      	bcc.n	80119f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d116      	bne.n	8011a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2200      	movs	r2, #0
 80119fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	2220      	movs	r2, #32
 8011a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a12:	f043 0220 	orr.w	r2, r3, #32
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011a22:	2301      	movs	r3, #1
 8011a24:	e007      	b.n	8011a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	695b      	ldr	r3, [r3, #20]
 8011a2c:	f003 0310 	and.w	r3, r3, #16
 8011a30:	2b10      	cmp	r3, #16
 8011a32:	d1ce      	bne.n	80119d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011a34:	2300      	movs	r3, #0
}
 8011a36:	4618      	mov	r0, r3
 8011a38:	3710      	adds	r7, #16
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}

08011a3e <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8011a3e:	b480      	push	{r7}
 8011a40:	b085      	sub	sp, #20
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a46:	2300      	movs	r3, #0
 8011a48:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8011a4a:	4b14      	ldr	r3, [pc, #80]	; (8011a9c <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	08db      	lsrs	r3, r3, #3
 8011a50:	4a13      	ldr	r2, [pc, #76]	; (8011aa0 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 8011a52:	fba2 2303 	umull	r2, r3, r2, r3
 8011a56:	0a1a      	lsrs	r2, r3, #8
 8011a58:	4613      	mov	r3, r2
 8011a5a:	009b      	lsls	r3, r3, #2
 8011a5c:	4413      	add	r3, r2
 8011a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	3b01      	subs	r3, #1
 8011a64:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d107      	bne.n	8011a7c <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a70:	f043 0220 	orr.w	r2, r3, #32
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e008      	b.n	8011a8e <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a8a:	d0e9      	beq.n	8011a60 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3714      	adds	r7, #20
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr
 8011a9a:	bf00      	nop
 8011a9c:	20000058 	.word	0x20000058
 8011aa0:	14f8b589 	.word	0x14f8b589

08011aa4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	60f8      	str	r0, [r7, #12]
 8011aac:	60b9      	str	r1, [r7, #8]
 8011aae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011ab0:	e042      	b.n	8011b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	695b      	ldr	r3, [r3, #20]
 8011ab8:	f003 0310 	and.w	r3, r3, #16
 8011abc:	2b10      	cmp	r3, #16
 8011abe:	d119      	bne.n	8011af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	f06f 0210 	mvn.w	r2, #16
 8011ac8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2200      	movs	r2, #0
 8011ace:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	2220      	movs	r2, #32
 8011ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2200      	movs	r2, #0
 8011adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2200      	movs	r2, #0
 8011aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011af0:	2301      	movs	r3, #1
 8011af2:	e029      	b.n	8011b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011af4:	f7f5 fa52 	bl	8006f9c <HAL_GetTick>
 8011af8:	4602      	mov	r2, r0
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	1ad3      	subs	r3, r2, r3
 8011afe:	68ba      	ldr	r2, [r7, #8]
 8011b00:	429a      	cmp	r2, r3
 8011b02:	d302      	bcc.n	8011b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d116      	bne.n	8011b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2220      	movs	r2, #32
 8011b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b24:	f043 0220 	orr.w	r2, r3, #32
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011b34:	2301      	movs	r3, #1
 8011b36:	e007      	b.n	8011b48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	695b      	ldr	r3, [r3, #20]
 8011b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b42:	2b40      	cmp	r3, #64	; 0x40
 8011b44:	d1b5      	bne.n	8011ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8011b46:	2300      	movs	r3, #0
}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3710      	adds	r7, #16
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	695b      	ldr	r3, [r3, #20]
 8011b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b66:	d11b      	bne.n	8011ba0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011b70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2200      	movs	r2, #0
 8011b76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	2220      	movs	r2, #32
 8011b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b8c:	f043 0204 	orr.w	r2, r3, #4
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	e000      	b.n	8011ba2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011ba0:	2300      	movs	r3, #0
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	370c      	adds	r7, #12
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr

08011bae <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8011bae:	b480      	push	{r7}
 8011bb0:	b083      	sub	sp, #12
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bba:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8011bbe:	d103      	bne.n	8011bc8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2201      	movs	r2, #1
 8011bc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8011bc6:	e007      	b.n	8011bd8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011bd0:	d102      	bne.n	8011bd8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2208      	movs	r2, #8
 8011bd6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011bd8:	bf00      	nop
 8011bda:	370c      	adds	r7, #12
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be2:	4770      	bx	lr

08011be4 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8011be4:	b480      	push	{r7}
 8011be6:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8011be8:	4b08      	ldr	r3, [pc, #32]	; (8011c0c <HAL_PWR_DeInit+0x28>)
 8011bea:	6a1b      	ldr	r3, [r3, #32]
 8011bec:	4a07      	ldr	r2, [pc, #28]	; (8011c0c <HAL_PWR_DeInit+0x28>)
 8011bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011bf2:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8011bf4:	4b05      	ldr	r3, [pc, #20]	; (8011c0c <HAL_PWR_DeInit+0x28>)
 8011bf6:	6a1b      	ldr	r3, [r3, #32]
 8011bf8:	4a04      	ldr	r2, [pc, #16]	; (8011c0c <HAL_PWR_DeInit+0x28>)
 8011bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011bfe:	6213      	str	r3, [r2, #32]
}
 8011c00:	bf00      	nop
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	40023800 	.word	0x40023800

08011c10 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8011c16:	4b06      	ldr	r3, [pc, #24]	; (8011c30 <HAL_PWR_EnableBkUpAccess+0x20>)
 8011c18:	2201      	movs	r2, #1
 8011c1a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011c1c:	4b05      	ldr	r3, [pc, #20]	; (8011c34 <HAL_PWR_EnableBkUpAccess+0x24>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8011c22:	687b      	ldr	r3, [r7, #4]
}
 8011c24:	bf00      	nop
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2e:	4770      	bx	lr
 8011c30:	420e0020 	.word	0x420e0020
 8011c34:	40007000 	.word	0x40007000

08011c38 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8011c38:	b480      	push	{r7}
 8011c3a:	b083      	sub	sp, #12
 8011c3c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8011c3e:	4b06      	ldr	r3, [pc, #24]	; (8011c58 <HAL_PWR_DisableBkUpAccess+0x20>)
 8011c40:	2200      	movs	r2, #0
 8011c42:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8011c44:	4b05      	ldr	r3, [pc, #20]	; (8011c5c <HAL_PWR_DisableBkUpAccess+0x24>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8011c4a:	687b      	ldr	r3, [r7, #4]
}
 8011c4c:	bf00      	nop
 8011c4e:	370c      	adds	r7, #12
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr
 8011c58:	420e0020 	.word	0x420e0020
 8011c5c:	40007000 	.word	0x40007000

08011c60 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8011c60:	b480      	push	{r7}
 8011c62:	b083      	sub	sp, #12
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8011c68:	4b2b      	ldr	r3, [pc, #172]	; (8011d18 <HAL_PWR_ConfigPVD+0xb8>)
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	4928      	ldr	r1, [pc, #160]	; (8011d18 <HAL_PWR_ConfigPVD+0xb8>)
 8011c76:	4313      	orrs	r3, r2
 8011c78:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8011c7a:	4b28      	ldr	r3, [pc, #160]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c7c:	685b      	ldr	r3, [r3, #4]
 8011c7e:	4a27      	ldr	r2, [pc, #156]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c84:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011c86:	4b25      	ldr	r3, [pc, #148]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	4a24      	ldr	r2, [pc, #144]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c90:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011c92:	4b22      	ldr	r3, [pc, #136]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c94:	689b      	ldr	r3, [r3, #8]
 8011c96:	4a21      	ldr	r2, [pc, #132]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011c9c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8011c9e:	4b1f      	ldr	r3, [pc, #124]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	4a1e      	ldr	r2, [pc, #120]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011ca8:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d005      	beq.n	8011cc2 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011cb6:	4b19      	ldr	r3, [pc, #100]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	4a18      	ldr	r2, [pc, #96]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cc0:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	685b      	ldr	r3, [r3, #4]
 8011cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d005      	beq.n	8011cda <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8011cce:	4b13      	ldr	r3, [pc, #76]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011cd0:	685b      	ldr	r3, [r3, #4]
 8011cd2:	4a12      	ldr	r2, [pc, #72]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cd8:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	f003 0301 	and.w	r3, r3, #1
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d005      	beq.n	8011cf2 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8011ce6:	4b0d      	ldr	r3, [pc, #52]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011ce8:	689b      	ldr	r3, [r3, #8]
 8011cea:	4a0c      	ldr	r2, [pc, #48]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011cf0:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	685b      	ldr	r3, [r3, #4]
 8011cf6:	f003 0302 	and.w	r3, r3, #2
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d005      	beq.n	8011d0a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8011cfe:	4b07      	ldr	r3, [pc, #28]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	4a06      	ldr	r2, [pc, #24]	; (8011d1c <HAL_PWR_ConfigPVD+0xbc>)
 8011d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011d08:	60d3      	str	r3, [r2, #12]
  }
}
 8011d0a:	bf00      	nop
 8011d0c:	370c      	adds	r7, #12
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	40007000 	.word	0x40007000
 8011d1c:	40013c00 	.word	0x40013c00

08011d20 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8011d20:	b480      	push	{r7}
 8011d22:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8011d24:	4b03      	ldr	r3, [pc, #12]	; (8011d34 <HAL_PWR_EnablePVD+0x14>)
 8011d26:	2201      	movs	r2, #1
 8011d28:	601a      	str	r2, [r3, #0]
}
 8011d2a:	bf00      	nop
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr
 8011d34:	420e0010 	.word	0x420e0010

08011d38 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8011d3c:	4b03      	ldr	r3, [pc, #12]	; (8011d4c <HAL_PWR_DisablePVD+0x14>)
 8011d3e:	2200      	movs	r2, #0
 8011d40:	601a      	str	r2, [r3, #0]
}
 8011d42:	bf00      	nop
 8011d44:	46bd      	mov	sp, r7
 8011d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4a:	4770      	bx	lr
 8011d4c:	420e0010 	.word	0x420e0010

08011d50 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8011d58:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <HAL_PWR_EnableWakeUpPin+0x20>)
 8011d5a:	685a      	ldr	r2, [r3, #4]
 8011d5c:	4904      	ldr	r1, [pc, #16]	; (8011d70 <HAL_PWR_EnableWakeUpPin+0x20>)
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	4313      	orrs	r3, r2
 8011d62:	604b      	str	r3, [r1, #4]
}
 8011d64:	bf00      	nop
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr
 8011d70:	40007000 	.word	0x40007000

08011d74 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8011d7c:	4b06      	ldr	r3, [pc, #24]	; (8011d98 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011d7e:	685a      	ldr	r2, [r3, #4]
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	43db      	mvns	r3, r3
 8011d84:	4904      	ldr	r1, [pc, #16]	; (8011d98 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011d86:	4013      	ands	r3, r2
 8011d88:	604b      	str	r3, [r1, #4]
}
 8011d8a:	bf00      	nop
 8011d8c:	370c      	adds	r7, #12
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop
 8011d98:	40007000 	.word	0x40007000

08011d9c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	460b      	mov	r3, r1
 8011da6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011da8:	4b09      	ldr	r3, [pc, #36]	; (8011dd0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011daa:	691b      	ldr	r3, [r3, #16]
 8011dac:	4a08      	ldr	r2, [pc, #32]	; (8011dd0 <HAL_PWR_EnterSLEEPMode+0x34>)
 8011dae:	f023 0304 	bic.w	r3, r3, #4
 8011db2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011db4:	78fb      	ldrb	r3, [r7, #3]
 8011db6:	2b01      	cmp	r3, #1
 8011db8:	d101      	bne.n	8011dbe <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011dba:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8011dbc:	e002      	b.n	8011dc4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8011dbe:	bf40      	sev
    __WFE();
 8011dc0:	bf20      	wfe
    __WFE();
 8011dc2:	bf20      	wfe
}
 8011dc4:	bf00      	nop
 8011dc6:	370c      	adds	r7, #12
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr
 8011dd0:	e000ed00 	.word	0xe000ed00

08011dd4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b083      	sub	sp, #12
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	460b      	mov	r3, r1
 8011dde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011de0:	4b10      	ldr	r3, [pc, #64]	; (8011e24 <HAL_PWR_EnterSTOPMode+0x50>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f023 0203 	bic.w	r2, r3, #3
 8011de8:	490e      	ldr	r1, [pc, #56]	; (8011e24 <HAL_PWR_EnterSTOPMode+0x50>)
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	4313      	orrs	r3, r2
 8011dee:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011df0:	4b0d      	ldr	r3, [pc, #52]	; (8011e28 <HAL_PWR_EnterSTOPMode+0x54>)
 8011df2:	691b      	ldr	r3, [r3, #16]
 8011df4:	4a0c      	ldr	r2, [pc, #48]	; (8011e28 <HAL_PWR_EnterSTOPMode+0x54>)
 8011df6:	f043 0304 	orr.w	r3, r3, #4
 8011dfa:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8011dfc:	78fb      	ldrb	r3, [r7, #3]
 8011dfe:	2b01      	cmp	r3, #1
 8011e00:	d101      	bne.n	8011e06 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011e02:	bf30      	wfi
 8011e04:	e002      	b.n	8011e0c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8011e06:	bf40      	sev
    __WFE();
 8011e08:	bf20      	wfe
    __WFE();
 8011e0a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8011e0c:	4b06      	ldr	r3, [pc, #24]	; (8011e28 <HAL_PWR_EnterSTOPMode+0x54>)
 8011e0e:	691b      	ldr	r3, [r3, #16]
 8011e10:	4a05      	ldr	r2, [pc, #20]	; (8011e28 <HAL_PWR_EnterSTOPMode+0x54>)
 8011e12:	f023 0304 	bic.w	r3, r3, #4
 8011e16:	6113      	str	r3, [r2, #16]
}
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	40007000 	.word	0x40007000
 8011e28:	e000ed00 	.word	0xe000ed00

08011e2c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8011e2c:	b480      	push	{r7}
 8011e2e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8011e30:	4b08      	ldr	r3, [pc, #32]	; (8011e54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	4a07      	ldr	r2, [pc, #28]	; (8011e54 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8011e36:	f043 0302 	orr.w	r3, r3, #2
 8011e3a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011e3c:	4b06      	ldr	r3, [pc, #24]	; (8011e58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011e3e:	691b      	ldr	r3, [r3, #16]
 8011e40:	4a05      	ldr	r2, [pc, #20]	; (8011e58 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8011e42:	f043 0304 	orr.w	r3, r3, #4
 8011e46:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8011e48:	bf30      	wfi
}
 8011e4a:	bf00      	nop
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e52:	4770      	bx	lr
 8011e54:	40007000 	.word	0x40007000
 8011e58:	e000ed00 	.word	0xe000ed00

08011e5c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8011e60:	4b06      	ldr	r3, [pc, #24]	; (8011e7c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011e62:	695b      	ldr	r3, [r3, #20]
 8011e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d005      	beq.n	8011e78 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8011e6c:	f000 f808 	bl	8011e80 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011e70:	4b02      	ldr	r3, [pc, #8]	; (8011e7c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011e72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011e76:	615a      	str	r2, [r3, #20]
  }
}
 8011e78:	bf00      	nop
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	40013c00 	.word	0x40013c00

08011e80 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011e80:	b480      	push	{r7}
 8011e82:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011e84:	bf00      	nop
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011e92:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011e94:	691b      	ldr	r3, [r3, #16]
 8011e96:	4a04      	ldr	r2, [pc, #16]	; (8011ea8 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011e98:	f043 0302 	orr.w	r3, r3, #2
 8011e9c:	6113      	str	r3, [r2, #16]
}
 8011e9e:	bf00      	nop
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr
 8011ea8:	e000ed00 	.word	0xe000ed00

08011eac <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011eac:	b480      	push	{r7}
 8011eae:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011eb0:	4b05      	ldr	r3, [pc, #20]	; (8011ec8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	4a04      	ldr	r2, [pc, #16]	; (8011ec8 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011eb6:	f023 0302 	bic.w	r3, r3, #2
 8011eba:	6113      	str	r3, [r2, #16]
}
 8011ebc:	bf00      	nop
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec4:	4770      	bx	lr
 8011ec6:	bf00      	nop
 8011ec8:	e000ed00 	.word	0xe000ed00

08011ecc <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011ed0:	4b05      	ldr	r3, [pc, #20]	; (8011ee8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011ed2:	691b      	ldr	r3, [r3, #16]
 8011ed4:	4a04      	ldr	r2, [pc, #16]	; (8011ee8 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011ed6:	f043 0310 	orr.w	r3, r3, #16
 8011eda:	6113      	str	r3, [r2, #16]
}
 8011edc:	bf00      	nop
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	e000ed00 	.word	0xe000ed00

08011eec <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011eec:	b480      	push	{r7}
 8011eee:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011ef0:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011ef2:	691b      	ldr	r3, [r3, #16]
 8011ef4:	4a04      	ldr	r2, [pc, #16]	; (8011f08 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011ef6:	f023 0310 	bic.w	r3, r3, #16
 8011efa:	6113      	str	r3, [r2, #16]
}
 8011efc:	bf00      	nop
 8011efe:	46bd      	mov	sp, r7
 8011f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop
 8011f08:	e000ed00 	.word	0xe000ed00

08011f0c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011f12:	2300      	movs	r3, #0
 8011f14:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8011f16:	4b0e      	ldr	r3, [pc, #56]	; (8011f50 <HAL_PWREx_EnableBkUpReg+0x44>)
 8011f18:	2201      	movs	r2, #1
 8011f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011f1c:	f7f5 f83e 	bl	8006f9c <HAL_GetTick>
 8011f20:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011f22:	e009      	b.n	8011f38 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011f24:	f7f5 f83a 	bl	8006f9c <HAL_GetTick>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	1ad3      	subs	r3, r2, r3
 8011f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f32:	d901      	bls.n	8011f38 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011f34:	2303      	movs	r3, #3
 8011f36:	e006      	b.n	8011f46 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011f38:	4b06      	ldr	r3, [pc, #24]	; (8011f54 <HAL_PWREx_EnableBkUpReg+0x48>)
 8011f3a:	685b      	ldr	r3, [r3, #4]
 8011f3c:	f003 0308 	and.w	r3, r3, #8
 8011f40:	2b08      	cmp	r3, #8
 8011f42:	d1ef      	bne.n	8011f24 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}
 8011f4e:	bf00      	nop
 8011f50:	420e00a4 	.word	0x420e00a4
 8011f54:	40007000 	.word	0x40007000

08011f58 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 8011f62:	4b0e      	ldr	r3, [pc, #56]	; (8011f9c <HAL_PWREx_DisableBkUpReg+0x44>)
 8011f64:	2200      	movs	r2, #0
 8011f66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011f68:	f7f5 f818 	bl	8006f9c <HAL_GetTick>
 8011f6c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011f6e:	e009      	b.n	8011f84 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011f70:	f7f5 f814 	bl	8006f9c <HAL_GetTick>
 8011f74:	4602      	mov	r2, r0
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	1ad3      	subs	r3, r2, r3
 8011f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011f7e:	d901      	bls.n	8011f84 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011f80:	2303      	movs	r3, #3
 8011f82:	e006      	b.n	8011f92 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011f84:	4b06      	ldr	r3, [pc, #24]	; (8011fa0 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	f003 0308 	and.w	r3, r3, #8
 8011f8c:	2b08      	cmp	r3, #8
 8011f8e:	d0ef      	beq.n	8011f70 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011f90:	2300      	movs	r3, #0
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3708      	adds	r7, #8
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	420e00a4 	.word	0x420e00a4
 8011fa0:	40007000 	.word	0x40007000

08011fa4 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011fa8:	4b03      	ldr	r3, [pc, #12]	; (8011fb8 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011faa:	2201      	movs	r2, #1
 8011fac:	601a      	str	r2, [r3, #0]
}
 8011fae:	bf00      	nop
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr
 8011fb8:	420e0024 	.word	0x420e0024

08011fbc <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011fc0:	4b03      	ldr	r3, [pc, #12]	; (8011fd0 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	601a      	str	r2, [r3, #0]
}
 8011fc6:	bf00      	nop
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr
 8011fd0:	420e0024 	.word	0x420e0024

08011fd4 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011fd4:	b480      	push	{r7}
 8011fd6:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011fd8:	4b04      	ldr	r3, [pc, #16]	; (8011fec <HAL_PWREx_GetVoltageRange+0x18>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr
 8011fea:	bf00      	nop
 8011fec:	40007000 	.word	0x40007000

08011ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	4b1a      	ldr	r3, [pc, #104]	; (801206c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8012002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012004:	4a19      	ldr	r2, [pc, #100]	; (801206c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8012006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801200a:	6413      	str	r3, [r2, #64]	; 0x40
 801200c:	4b17      	ldr	r3, [pc, #92]	; (801206c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012014:	60fb      	str	r3, [r7, #12]
 8012016:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8012018:	2300      	movs	r3, #0
 801201a:	613b      	str	r3, [r7, #16]
 801201c:	4b14      	ldr	r3, [pc, #80]	; (8012070 <HAL_PWREx_ControlVoltageScaling+0x80>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8012024:	4912      	ldr	r1, [pc, #72]	; (8012070 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	4313      	orrs	r3, r2
 801202a:	600b      	str	r3, [r1, #0]
 801202c:	4b10      	ldr	r3, [pc, #64]	; (8012070 <HAL_PWREx_ControlVoltageScaling+0x80>)
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012034:	613b      	str	r3, [r7, #16]
 8012036:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8012038:	f7f4 ffb0 	bl	8006f9c <HAL_GetTick>
 801203c:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 801203e:	e009      	b.n	8012054 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 8012040:	f7f4 ffac 	bl	8006f9c <HAL_GetTick>
 8012044:	4602      	mov	r2, r0
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	1ad3      	subs	r3, r2, r3
 801204a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801204e:	d901      	bls.n	8012054 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 8012050:	2303      	movs	r3, #3
 8012052:	e007      	b.n	8012064 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 8012054:	4b06      	ldr	r3, [pc, #24]	; (8012070 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801205c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012060:	d1ee      	bne.n	8012040 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 8012062:	2300      	movs	r3, #0
}
 8012064:	4618      	mov	r0, r3
 8012066:	3718      	adds	r7, #24
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}
 801206c:	40023800 	.word	0x40023800
 8012070:	40007000 	.word	0x40007000

08012074 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b086      	sub	sp, #24
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d101      	bne.n	8012086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8012082:	2301      	movs	r3, #1
 8012084:	e267      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f003 0301 	and.w	r3, r3, #1
 801208e:	2b00      	cmp	r3, #0
 8012090:	d075      	beq.n	801217e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012092:	4b88      	ldr	r3, [pc, #544]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	f003 030c 	and.w	r3, r3, #12
 801209a:	2b04      	cmp	r3, #4
 801209c:	d00c      	beq.n	80120b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801209e:	4b85      	ldr	r3, [pc, #532]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120a0:	689b      	ldr	r3, [r3, #8]
 80120a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80120a6:	2b08      	cmp	r3, #8
 80120a8:	d112      	bne.n	80120d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80120aa:	4b82      	ldr	r3, [pc, #520]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120ac:	685b      	ldr	r3, [r3, #4]
 80120ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80120b6:	d10b      	bne.n	80120d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80120b8:	4b7e      	ldr	r3, [pc, #504]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d05b      	beq.n	801217c <HAL_RCC_OscConfig+0x108>
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	685b      	ldr	r3, [r3, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d157      	bne.n	801217c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80120cc:	2301      	movs	r3, #1
 80120ce:	e242      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	685b      	ldr	r3, [r3, #4]
 80120d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120d8:	d106      	bne.n	80120e8 <HAL_RCC_OscConfig+0x74>
 80120da:	4b76      	ldr	r3, [pc, #472]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	4a75      	ldr	r2, [pc, #468]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80120e4:	6013      	str	r3, [r2, #0]
 80120e6:	e01d      	b.n	8012124 <HAL_RCC_OscConfig+0xb0>
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80120f0:	d10c      	bne.n	801210c <HAL_RCC_OscConfig+0x98>
 80120f2:	4b70      	ldr	r3, [pc, #448]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	4a6f      	ldr	r2, [pc, #444]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80120f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80120fc:	6013      	str	r3, [r2, #0]
 80120fe:	4b6d      	ldr	r3, [pc, #436]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	4a6c      	ldr	r2, [pc, #432]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012108:	6013      	str	r3, [r2, #0]
 801210a:	e00b      	b.n	8012124 <HAL_RCC_OscConfig+0xb0>
 801210c:	4b69      	ldr	r3, [pc, #420]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	4a68      	ldr	r2, [pc, #416]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012116:	6013      	str	r3, [r2, #0]
 8012118:	4b66      	ldr	r3, [pc, #408]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	4a65      	ldr	r2, [pc, #404]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 801211e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	685b      	ldr	r3, [r3, #4]
 8012128:	2b00      	cmp	r3, #0
 801212a:	d013      	beq.n	8012154 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801212c:	f7f4 ff36 	bl	8006f9c <HAL_GetTick>
 8012130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012132:	e008      	b.n	8012146 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012134:	f7f4 ff32 	bl	8006f9c <HAL_GetTick>
 8012138:	4602      	mov	r2, r0
 801213a:	693b      	ldr	r3, [r7, #16]
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	2b64      	cmp	r3, #100	; 0x64
 8012140:	d901      	bls.n	8012146 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012142:	2303      	movs	r3, #3
 8012144:	e207      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012146:	4b5b      	ldr	r3, [pc, #364]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801214e:	2b00      	cmp	r3, #0
 8012150:	d0f0      	beq.n	8012134 <HAL_RCC_OscConfig+0xc0>
 8012152:	e014      	b.n	801217e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012154:	f7f4 ff22 	bl	8006f9c <HAL_GetTick>
 8012158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801215a:	e008      	b.n	801216e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801215c:	f7f4 ff1e 	bl	8006f9c <HAL_GetTick>
 8012160:	4602      	mov	r2, r0
 8012162:	693b      	ldr	r3, [r7, #16]
 8012164:	1ad3      	subs	r3, r2, r3
 8012166:	2b64      	cmp	r3, #100	; 0x64
 8012168:	d901      	bls.n	801216e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801216a:	2303      	movs	r3, #3
 801216c:	e1f3      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801216e:	4b51      	ldr	r3, [pc, #324]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012176:	2b00      	cmp	r3, #0
 8012178:	d1f0      	bne.n	801215c <HAL_RCC_OscConfig+0xe8>
 801217a:	e000      	b.n	801217e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801217c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	f003 0302 	and.w	r3, r3, #2
 8012186:	2b00      	cmp	r3, #0
 8012188:	d063      	beq.n	8012252 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801218a:	4b4a      	ldr	r3, [pc, #296]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 801218c:	689b      	ldr	r3, [r3, #8]
 801218e:	f003 030c 	and.w	r3, r3, #12
 8012192:	2b00      	cmp	r3, #0
 8012194:	d00b      	beq.n	80121ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012196:	4b47      	ldr	r3, [pc, #284]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801219e:	2b08      	cmp	r3, #8
 80121a0:	d11c      	bne.n	80121dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80121a2:	4b44      	ldr	r3, [pc, #272]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d116      	bne.n	80121dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80121ae:	4b41      	ldr	r3, [pc, #260]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80121b0:	681b      	ldr	r3, [r3, #0]
 80121b2:	f003 0302 	and.w	r3, r3, #2
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d005      	beq.n	80121c6 <HAL_RCC_OscConfig+0x152>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d001      	beq.n	80121c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80121c2:	2301      	movs	r3, #1
 80121c4:	e1c7      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80121c6:	4b3b      	ldr	r3, [pc, #236]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	691b      	ldr	r3, [r3, #16]
 80121d2:	00db      	lsls	r3, r3, #3
 80121d4:	4937      	ldr	r1, [pc, #220]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 80121d6:	4313      	orrs	r3, r2
 80121d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80121da:	e03a      	b.n	8012252 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d020      	beq.n	8012226 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80121e4:	4b34      	ldr	r3, [pc, #208]	; (80122b8 <HAL_RCC_OscConfig+0x244>)
 80121e6:	2201      	movs	r2, #1
 80121e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80121ea:	f7f4 fed7 	bl	8006f9c <HAL_GetTick>
 80121ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80121f0:	e008      	b.n	8012204 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80121f2:	f7f4 fed3 	bl	8006f9c <HAL_GetTick>
 80121f6:	4602      	mov	r2, r0
 80121f8:	693b      	ldr	r3, [r7, #16]
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	d901      	bls.n	8012204 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012200:	2303      	movs	r3, #3
 8012202:	e1a8      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012204:	4b2b      	ldr	r3, [pc, #172]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	f003 0302 	and.w	r3, r3, #2
 801220c:	2b00      	cmp	r3, #0
 801220e:	d0f0      	beq.n	80121f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012210:	4b28      	ldr	r3, [pc, #160]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	691b      	ldr	r3, [r3, #16]
 801221c:	00db      	lsls	r3, r3, #3
 801221e:	4925      	ldr	r1, [pc, #148]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012220:	4313      	orrs	r3, r2
 8012222:	600b      	str	r3, [r1, #0]
 8012224:	e015      	b.n	8012252 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012226:	4b24      	ldr	r3, [pc, #144]	; (80122b8 <HAL_RCC_OscConfig+0x244>)
 8012228:	2200      	movs	r2, #0
 801222a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801222c:	f7f4 feb6 	bl	8006f9c <HAL_GetTick>
 8012230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012232:	e008      	b.n	8012246 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012234:	f7f4 feb2 	bl	8006f9c <HAL_GetTick>
 8012238:	4602      	mov	r2, r0
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	2b02      	cmp	r3, #2
 8012240:	d901      	bls.n	8012246 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012242:	2303      	movs	r3, #3
 8012244:	e187      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012246:	4b1b      	ldr	r3, [pc, #108]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	f003 0302 	and.w	r3, r3, #2
 801224e:	2b00      	cmp	r3, #0
 8012250:	d1f0      	bne.n	8012234 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	f003 0308 	and.w	r3, r3, #8
 801225a:	2b00      	cmp	r3, #0
 801225c:	d036      	beq.n	80122cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	695b      	ldr	r3, [r3, #20]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d016      	beq.n	8012294 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012266:	4b15      	ldr	r3, [pc, #84]	; (80122bc <HAL_RCC_OscConfig+0x248>)
 8012268:	2201      	movs	r2, #1
 801226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801226c:	f7f4 fe96 	bl	8006f9c <HAL_GetTick>
 8012270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012272:	e008      	b.n	8012286 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012274:	f7f4 fe92 	bl	8006f9c <HAL_GetTick>
 8012278:	4602      	mov	r2, r0
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	1ad3      	subs	r3, r2, r3
 801227e:	2b02      	cmp	r3, #2
 8012280:	d901      	bls.n	8012286 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012282:	2303      	movs	r3, #3
 8012284:	e167      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012286:	4b0b      	ldr	r3, [pc, #44]	; (80122b4 <HAL_RCC_OscConfig+0x240>)
 8012288:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801228a:	f003 0302 	and.w	r3, r3, #2
 801228e:	2b00      	cmp	r3, #0
 8012290:	d0f0      	beq.n	8012274 <HAL_RCC_OscConfig+0x200>
 8012292:	e01b      	b.n	80122cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012294:	4b09      	ldr	r3, [pc, #36]	; (80122bc <HAL_RCC_OscConfig+0x248>)
 8012296:	2200      	movs	r2, #0
 8012298:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801229a:	f7f4 fe7f 	bl	8006f9c <HAL_GetTick>
 801229e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80122a0:	e00e      	b.n	80122c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80122a2:	f7f4 fe7b 	bl	8006f9c <HAL_GetTick>
 80122a6:	4602      	mov	r2, r0
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	1ad3      	subs	r3, r2, r3
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d907      	bls.n	80122c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80122b0:	2303      	movs	r3, #3
 80122b2:	e150      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
 80122b4:	40023800 	.word	0x40023800
 80122b8:	42470000 	.word	0x42470000
 80122bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80122c0:	4b88      	ldr	r3, [pc, #544]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80122c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122c4:	f003 0302 	and.w	r3, r3, #2
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d1ea      	bne.n	80122a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f003 0304 	and.w	r3, r3, #4
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 8097 	beq.w	8012408 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80122da:	2300      	movs	r3, #0
 80122dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80122de:	4b81      	ldr	r3, [pc, #516]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80122e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d10f      	bne.n	801230a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80122ea:	2300      	movs	r3, #0
 80122ec:	60bb      	str	r3, [r7, #8]
 80122ee:	4b7d      	ldr	r3, [pc, #500]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80122f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f2:	4a7c      	ldr	r2, [pc, #496]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80122f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80122f8:	6413      	str	r3, [r2, #64]	; 0x40
 80122fa:	4b7a      	ldr	r3, [pc, #488]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80122fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012302:	60bb      	str	r3, [r7, #8]
 8012304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012306:	2301      	movs	r3, #1
 8012308:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801230a:	4b77      	ldr	r3, [pc, #476]	; (80124e8 <HAL_RCC_OscConfig+0x474>)
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012312:	2b00      	cmp	r3, #0
 8012314:	d118      	bne.n	8012348 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012316:	4b74      	ldr	r3, [pc, #464]	; (80124e8 <HAL_RCC_OscConfig+0x474>)
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	4a73      	ldr	r2, [pc, #460]	; (80124e8 <HAL_RCC_OscConfig+0x474>)
 801231c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012322:	f7f4 fe3b 	bl	8006f9c <HAL_GetTick>
 8012326:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012328:	e008      	b.n	801233c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801232a:	f7f4 fe37 	bl	8006f9c <HAL_GetTick>
 801232e:	4602      	mov	r2, r0
 8012330:	693b      	ldr	r3, [r7, #16]
 8012332:	1ad3      	subs	r3, r2, r3
 8012334:	2b02      	cmp	r3, #2
 8012336:	d901      	bls.n	801233c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012338:	2303      	movs	r3, #3
 801233a:	e10c      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801233c:	4b6a      	ldr	r3, [pc, #424]	; (80124e8 <HAL_RCC_OscConfig+0x474>)
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012344:	2b00      	cmp	r3, #0
 8012346:	d0f0      	beq.n	801232a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	689b      	ldr	r3, [r3, #8]
 801234c:	2b01      	cmp	r3, #1
 801234e:	d106      	bne.n	801235e <HAL_RCC_OscConfig+0x2ea>
 8012350:	4b64      	ldr	r3, [pc, #400]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012354:	4a63      	ldr	r2, [pc, #396]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012356:	f043 0301 	orr.w	r3, r3, #1
 801235a:	6713      	str	r3, [r2, #112]	; 0x70
 801235c:	e01c      	b.n	8012398 <HAL_RCC_OscConfig+0x324>
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	689b      	ldr	r3, [r3, #8]
 8012362:	2b05      	cmp	r3, #5
 8012364:	d10c      	bne.n	8012380 <HAL_RCC_OscConfig+0x30c>
 8012366:	4b5f      	ldr	r3, [pc, #380]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801236a:	4a5e      	ldr	r2, [pc, #376]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 801236c:	f043 0304 	orr.w	r3, r3, #4
 8012370:	6713      	str	r3, [r2, #112]	; 0x70
 8012372:	4b5c      	ldr	r3, [pc, #368]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012376:	4a5b      	ldr	r2, [pc, #364]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012378:	f043 0301 	orr.w	r3, r3, #1
 801237c:	6713      	str	r3, [r2, #112]	; 0x70
 801237e:	e00b      	b.n	8012398 <HAL_RCC_OscConfig+0x324>
 8012380:	4b58      	ldr	r3, [pc, #352]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012384:	4a57      	ldr	r2, [pc, #348]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012386:	f023 0301 	bic.w	r3, r3, #1
 801238a:	6713      	str	r3, [r2, #112]	; 0x70
 801238c:	4b55      	ldr	r3, [pc, #340]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 801238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012390:	4a54      	ldr	r2, [pc, #336]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012392:	f023 0304 	bic.w	r3, r3, #4
 8012396:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d015      	beq.n	80123cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80123a0:	f7f4 fdfc 	bl	8006f9c <HAL_GetTick>
 80123a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80123a6:	e00a      	b.n	80123be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123a8:	f7f4 fdf8 	bl	8006f9c <HAL_GetTick>
 80123ac:	4602      	mov	r2, r0
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80123b6:	4293      	cmp	r3, r2
 80123b8:	d901      	bls.n	80123be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80123ba:	2303      	movs	r3, #3
 80123bc:	e0cb      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80123be:	4b49      	ldr	r3, [pc, #292]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80123c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123c2:	f003 0302 	and.w	r3, r3, #2
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d0ee      	beq.n	80123a8 <HAL_RCC_OscConfig+0x334>
 80123ca:	e014      	b.n	80123f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80123cc:	f7f4 fde6 	bl	8006f9c <HAL_GetTick>
 80123d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80123d2:	e00a      	b.n	80123ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80123d4:	f7f4 fde2 	bl	8006f9c <HAL_GetTick>
 80123d8:	4602      	mov	r2, r0
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	1ad3      	subs	r3, r2, r3
 80123de:	f241 3288 	movw	r2, #5000	; 0x1388
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d901      	bls.n	80123ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80123e6:	2303      	movs	r3, #3
 80123e8:	e0b5      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80123ea:	4b3e      	ldr	r3, [pc, #248]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80123ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ee:	f003 0302 	and.w	r3, r3, #2
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d1ee      	bne.n	80123d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80123f6:	7dfb      	ldrb	r3, [r7, #23]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d105      	bne.n	8012408 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80123fc:	4b39      	ldr	r3, [pc, #228]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80123fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012400:	4a38      	ldr	r2, [pc, #224]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012406:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	699b      	ldr	r3, [r3, #24]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f000 80a1 	beq.w	8012554 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012412:	4b34      	ldr	r3, [pc, #208]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012414:	689b      	ldr	r3, [r3, #8]
 8012416:	f003 030c 	and.w	r3, r3, #12
 801241a:	2b08      	cmp	r3, #8
 801241c:	d05c      	beq.n	80124d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	699b      	ldr	r3, [r3, #24]
 8012422:	2b02      	cmp	r3, #2
 8012424:	d141      	bne.n	80124aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012426:	4b31      	ldr	r3, [pc, #196]	; (80124ec <HAL_RCC_OscConfig+0x478>)
 8012428:	2200      	movs	r2, #0
 801242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801242c:	f7f4 fdb6 	bl	8006f9c <HAL_GetTick>
 8012430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012432:	e008      	b.n	8012446 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012434:	f7f4 fdb2 	bl	8006f9c <HAL_GetTick>
 8012438:	4602      	mov	r2, r0
 801243a:	693b      	ldr	r3, [r7, #16]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	2b02      	cmp	r3, #2
 8012440:	d901      	bls.n	8012446 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012442:	2303      	movs	r3, #3
 8012444:	e087      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012446:	4b27      	ldr	r3, [pc, #156]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801244e:	2b00      	cmp	r3, #0
 8012450:	d1f0      	bne.n	8012434 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	69da      	ldr	r2, [r3, #28]
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	6a1b      	ldr	r3, [r3, #32]
 801245a:	431a      	orrs	r2, r3
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012460:	019b      	lsls	r3, r3, #6
 8012462:	431a      	orrs	r2, r3
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012468:	085b      	lsrs	r3, r3, #1
 801246a:	3b01      	subs	r3, #1
 801246c:	041b      	lsls	r3, r3, #16
 801246e:	431a      	orrs	r2, r3
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012474:	061b      	lsls	r3, r3, #24
 8012476:	491b      	ldr	r1, [pc, #108]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 8012478:	4313      	orrs	r3, r2
 801247a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801247c:	4b1b      	ldr	r3, [pc, #108]	; (80124ec <HAL_RCC_OscConfig+0x478>)
 801247e:	2201      	movs	r2, #1
 8012480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012482:	f7f4 fd8b 	bl	8006f9c <HAL_GetTick>
 8012486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012488:	e008      	b.n	801249c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801248a:	f7f4 fd87 	bl	8006f9c <HAL_GetTick>
 801248e:	4602      	mov	r2, r0
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	2b02      	cmp	r3, #2
 8012496:	d901      	bls.n	801249c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012498:	2303      	movs	r3, #3
 801249a:	e05c      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801249c:	4b11      	ldr	r3, [pc, #68]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d0f0      	beq.n	801248a <HAL_RCC_OscConfig+0x416>
 80124a8:	e054      	b.n	8012554 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80124aa:	4b10      	ldr	r3, [pc, #64]	; (80124ec <HAL_RCC_OscConfig+0x478>)
 80124ac:	2200      	movs	r2, #0
 80124ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80124b0:	f7f4 fd74 	bl	8006f9c <HAL_GetTick>
 80124b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80124b6:	e008      	b.n	80124ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124b8:	f7f4 fd70 	bl	8006f9c <HAL_GetTick>
 80124bc:	4602      	mov	r2, r0
 80124be:	693b      	ldr	r3, [r7, #16]
 80124c0:	1ad3      	subs	r3, r2, r3
 80124c2:	2b02      	cmp	r3, #2
 80124c4:	d901      	bls.n	80124ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80124c6:	2303      	movs	r3, #3
 80124c8:	e045      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80124ca:	4b06      	ldr	r3, [pc, #24]	; (80124e4 <HAL_RCC_OscConfig+0x470>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d1f0      	bne.n	80124b8 <HAL_RCC_OscConfig+0x444>
 80124d6:	e03d      	b.n	8012554 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	699b      	ldr	r3, [r3, #24]
 80124dc:	2b01      	cmp	r3, #1
 80124de:	d107      	bne.n	80124f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80124e0:	2301      	movs	r3, #1
 80124e2:	e038      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
 80124e4:	40023800 	.word	0x40023800
 80124e8:	40007000 	.word	0x40007000
 80124ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80124f0:	4b1b      	ldr	r3, [pc, #108]	; (8012560 <HAL_RCC_OscConfig+0x4ec>)
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	699b      	ldr	r3, [r3, #24]
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d028      	beq.n	8012550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012508:	429a      	cmp	r2, r3
 801250a:	d121      	bne.n	8012550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012516:	429a      	cmp	r2, r3
 8012518:	d11a      	bne.n	8012550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012520:	4013      	ands	r3, r2
 8012522:	687a      	ldr	r2, [r7, #4]
 8012524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012526:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012528:	4293      	cmp	r3, r2
 801252a:	d111      	bne.n	8012550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012536:	085b      	lsrs	r3, r3, #1
 8012538:	3b01      	subs	r3, #1
 801253a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801253c:	429a      	cmp	r2, r3
 801253e:	d107      	bne.n	8012550 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801254a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801254c:	429a      	cmp	r2, r3
 801254e:	d001      	beq.n	8012554 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012550:	2301      	movs	r3, #1
 8012552:	e000      	b.n	8012556 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012554:	2300      	movs	r3, #0
}
 8012556:	4618      	mov	r0, r3
 8012558:	3718      	adds	r7, #24
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
 801255e:	bf00      	nop
 8012560:	40023800 	.word	0x40023800

08012564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
 801256c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012574:	2301      	movs	r3, #1
 8012576:	e0cc      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012578:	4b68      	ldr	r3, [pc, #416]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f003 0307 	and.w	r3, r3, #7
 8012580:	683a      	ldr	r2, [r7, #0]
 8012582:	429a      	cmp	r2, r3
 8012584:	d90c      	bls.n	80125a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012586:	4b65      	ldr	r3, [pc, #404]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 8012588:	683a      	ldr	r2, [r7, #0]
 801258a:	b2d2      	uxtb	r2, r2
 801258c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801258e:	4b63      	ldr	r3, [pc, #396]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	f003 0307 	and.w	r3, r3, #7
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	429a      	cmp	r2, r3
 801259a:	d001      	beq.n	80125a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 801259c:	2301      	movs	r3, #1
 801259e:	e0b8      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	f003 0302 	and.w	r3, r3, #2
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d020      	beq.n	80125ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	f003 0304 	and.w	r3, r3, #4
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d005      	beq.n	80125c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80125b8:	4b59      	ldr	r3, [pc, #356]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	4a58      	ldr	r2, [pc, #352]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80125c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	f003 0308 	and.w	r3, r3, #8
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d005      	beq.n	80125dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80125d0:	4b53      	ldr	r3, [pc, #332]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125d2:	689b      	ldr	r3, [r3, #8]
 80125d4:	4a52      	ldr	r2, [pc, #328]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80125da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80125dc:	4b50      	ldr	r3, [pc, #320]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125de:	689b      	ldr	r3, [r3, #8]
 80125e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	689b      	ldr	r3, [r3, #8]
 80125e8:	494d      	ldr	r1, [pc, #308]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80125ea:	4313      	orrs	r3, r2
 80125ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	f003 0301 	and.w	r3, r3, #1
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d044      	beq.n	8012684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	2b01      	cmp	r3, #1
 8012600:	d107      	bne.n	8012612 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012602:	4b47      	ldr	r3, [pc, #284]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801260a:	2b00      	cmp	r3, #0
 801260c:	d119      	bne.n	8012642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801260e:	2301      	movs	r3, #1
 8012610:	e07f      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	2b02      	cmp	r3, #2
 8012618:	d003      	beq.n	8012622 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801261e:	2b03      	cmp	r3, #3
 8012620:	d107      	bne.n	8012632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012622:	4b3f      	ldr	r3, [pc, #252]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801262a:	2b00      	cmp	r3, #0
 801262c:	d109      	bne.n	8012642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801262e:	2301      	movs	r3, #1
 8012630:	e06f      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012632:	4b3b      	ldr	r3, [pc, #236]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f003 0302 	and.w	r3, r3, #2
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801263e:	2301      	movs	r3, #1
 8012640:	e067      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012642:	4b37      	ldr	r3, [pc, #220]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012644:	689b      	ldr	r3, [r3, #8]
 8012646:	f023 0203 	bic.w	r2, r3, #3
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	685b      	ldr	r3, [r3, #4]
 801264e:	4934      	ldr	r1, [pc, #208]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012650:	4313      	orrs	r3, r2
 8012652:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012654:	f7f4 fca2 	bl	8006f9c <HAL_GetTick>
 8012658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801265a:	e00a      	b.n	8012672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801265c:	f7f4 fc9e 	bl	8006f9c <HAL_GetTick>
 8012660:	4602      	mov	r2, r0
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	1ad3      	subs	r3, r2, r3
 8012666:	f241 3288 	movw	r2, #5000	; 0x1388
 801266a:	4293      	cmp	r3, r2
 801266c:	d901      	bls.n	8012672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 801266e:	2303      	movs	r3, #3
 8012670:	e04f      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012672:	4b2b      	ldr	r3, [pc, #172]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 8012674:	689b      	ldr	r3, [r3, #8]
 8012676:	f003 020c 	and.w	r2, r3, #12
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	685b      	ldr	r3, [r3, #4]
 801267e:	009b      	lsls	r3, r3, #2
 8012680:	429a      	cmp	r2, r3
 8012682:	d1eb      	bne.n	801265c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012684:	4b25      	ldr	r3, [pc, #148]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	f003 0307 	and.w	r3, r3, #7
 801268c:	683a      	ldr	r2, [r7, #0]
 801268e:	429a      	cmp	r2, r3
 8012690:	d20c      	bcs.n	80126ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012692:	4b22      	ldr	r3, [pc, #136]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	b2d2      	uxtb	r2, r2
 8012698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801269a:	4b20      	ldr	r3, [pc, #128]	; (801271c <HAL_RCC_ClockConfig+0x1b8>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	f003 0307 	and.w	r3, r3, #7
 80126a2:	683a      	ldr	r2, [r7, #0]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d001      	beq.n	80126ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80126a8:	2301      	movs	r3, #1
 80126aa:	e032      	b.n	8012712 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	f003 0304 	and.w	r3, r3, #4
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d008      	beq.n	80126ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80126b8:	4b19      	ldr	r3, [pc, #100]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	68db      	ldr	r3, [r3, #12]
 80126c4:	4916      	ldr	r1, [pc, #88]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80126c6:	4313      	orrs	r3, r2
 80126c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f003 0308 	and.w	r3, r3, #8
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d009      	beq.n	80126ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80126d6:	4b12      	ldr	r3, [pc, #72]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80126d8:	689b      	ldr	r3, [r3, #8]
 80126da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	691b      	ldr	r3, [r3, #16]
 80126e2:	00db      	lsls	r3, r3, #3
 80126e4:	490e      	ldr	r1, [pc, #56]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80126e6:	4313      	orrs	r3, r2
 80126e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80126ea:	f000 f8a1 	bl	8012830 <HAL_RCC_GetSysClockFreq>
 80126ee:	4602      	mov	r2, r0
 80126f0:	4b0b      	ldr	r3, [pc, #44]	; (8012720 <HAL_RCC_ClockConfig+0x1bc>)
 80126f2:	689b      	ldr	r3, [r3, #8]
 80126f4:	091b      	lsrs	r3, r3, #4
 80126f6:	f003 030f 	and.w	r3, r3, #15
 80126fa:	490a      	ldr	r1, [pc, #40]	; (8012724 <HAL_RCC_ClockConfig+0x1c0>)
 80126fc:	5ccb      	ldrb	r3, [r1, r3]
 80126fe:	fa22 f303 	lsr.w	r3, r2, r3
 8012702:	4a09      	ldr	r2, [pc, #36]	; (8012728 <HAL_RCC_ClockConfig+0x1c4>)
 8012704:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012706:	4b09      	ldr	r3, [pc, #36]	; (801272c <HAL_RCC_ClockConfig+0x1c8>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4618      	mov	r0, r3
 801270c:	f7f4 fc01 	bl	8006f12 <HAL_InitTick>

  return HAL_OK;
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	3710      	adds	r7, #16
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	40023c00 	.word	0x40023c00
 8012720:	40023800 	.word	0x40023800
 8012724:	08052678 	.word	0x08052678
 8012728:	20000058 	.word	0x20000058
 801272c:	2000005c 	.word	0x2000005c

08012730 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08c      	sub	sp, #48	; 0x30
 8012734:	af00      	add	r7, sp, #0
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d129      	bne.n	8012796 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8012742:	2300      	movs	r3, #0
 8012744:	617b      	str	r3, [r7, #20]
 8012746:	4b2b      	ldr	r3, [pc, #172]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 8012748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801274a:	4a2a      	ldr	r2, [pc, #168]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 801274c:	f043 0301 	orr.w	r3, r3, #1
 8012750:	6313      	str	r3, [r2, #48]	; 0x30
 8012752:	4b28      	ldr	r3, [pc, #160]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 8012754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012756:	f003 0301 	and.w	r3, r3, #1
 801275a:	617b      	str	r3, [r7, #20]
 801275c:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 801275e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012764:	2302      	movs	r3, #2
 8012766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012768:	2303      	movs	r3, #3
 801276a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801276c:	2300      	movs	r3, #0
 801276e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8012770:	2300      	movs	r3, #0
 8012772:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8012774:	f107 031c 	add.w	r3, r7, #28
 8012778:	4619      	mov	r1, r3
 801277a:	481f      	ldr	r0, [pc, #124]	; (80127f8 <HAL_RCC_MCOConfig+0xc8>)
 801277c:	f7f8 fd76 	bl	800b26c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8012780:	4b1c      	ldr	r3, [pc, #112]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 8012782:	689b      	ldr	r3, [r3, #8]
 8012784:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8012788:	68b9      	ldr	r1, [r7, #8]
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	430b      	orrs	r3, r1
 801278e:	4919      	ldr	r1, [pc, #100]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 8012790:	4313      	orrs	r3, r2
 8012792:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8012794:	e029      	b.n	80127ea <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8012796:	2300      	movs	r3, #0
 8012798:	61bb      	str	r3, [r7, #24]
 801279a:	4b16      	ldr	r3, [pc, #88]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 801279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801279e:	4a15      	ldr	r2, [pc, #84]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 80127a0:	f043 0304 	orr.w	r3, r3, #4
 80127a4:	6313      	str	r3, [r2, #48]	; 0x30
 80127a6:	4b13      	ldr	r3, [pc, #76]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 80127a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127aa:	f003 0304 	and.w	r3, r3, #4
 80127ae:	61bb      	str	r3, [r7, #24]
 80127b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80127b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80127b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80127b8:	2302      	movs	r3, #2
 80127ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80127bc:	2303      	movs	r3, #3
 80127be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80127c0:	2300      	movs	r3, #0
 80127c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80127c4:	2300      	movs	r3, #0
 80127c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80127c8:	f107 031c 	add.w	r3, r7, #28
 80127cc:	4619      	mov	r1, r3
 80127ce:	480b      	ldr	r0, [pc, #44]	; (80127fc <HAL_RCC_MCOConfig+0xcc>)
 80127d0:	f7f8 fd4c 	bl	800b26c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80127d4:	4b07      	ldr	r3, [pc, #28]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 80127d6:	689b      	ldr	r3, [r3, #8]
 80127d8:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	00d9      	lsls	r1, r3, #3
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	430b      	orrs	r3, r1
 80127e4:	4903      	ldr	r1, [pc, #12]	; (80127f4 <HAL_RCC_MCOConfig+0xc4>)
 80127e6:	4313      	orrs	r3, r2
 80127e8:	608b      	str	r3, [r1, #8]
}
 80127ea:	bf00      	nop
 80127ec:	3730      	adds	r7, #48	; 0x30
 80127ee:	46bd      	mov	sp, r7
 80127f0:	bd80      	pop	{r7, pc}
 80127f2:	bf00      	nop
 80127f4:	40023800 	.word	0x40023800
 80127f8:	40020000 	.word	0x40020000
 80127fc:	40020800 	.word	0x40020800

08012800 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8012800:	b480      	push	{r7}
 8012802:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8012804:	4b03      	ldr	r3, [pc, #12]	; (8012814 <HAL_RCC_EnableCSS+0x14>)
 8012806:	2201      	movs	r2, #1
 8012808:	601a      	str	r2, [r3, #0]
}
 801280a:	bf00      	nop
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr
 8012814:	4247004c 	.word	0x4247004c

08012818 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8012818:	b480      	push	{r7}
 801281a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 801281c:	4b03      	ldr	r3, [pc, #12]	; (801282c <HAL_RCC_DisableCSS+0x14>)
 801281e:	2200      	movs	r2, #0
 8012820:	601a      	str	r2, [r3, #0]
}
 8012822:	bf00      	nop
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr
 801282c:	4247004c 	.word	0x4247004c

08012830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012834:	b094      	sub	sp, #80	; 0x50
 8012836:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8012838:	2300      	movs	r3, #0
 801283a:	647b      	str	r3, [r7, #68]	; 0x44
 801283c:	2300      	movs	r3, #0
 801283e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012840:	2300      	movs	r3, #0
 8012842:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8012844:	2300      	movs	r3, #0
 8012846:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8012848:	4b79      	ldr	r3, [pc, #484]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 801284a:	689b      	ldr	r3, [r3, #8]
 801284c:	f003 030c 	and.w	r3, r3, #12
 8012850:	2b08      	cmp	r3, #8
 8012852:	d00d      	beq.n	8012870 <HAL_RCC_GetSysClockFreq+0x40>
 8012854:	2b08      	cmp	r3, #8
 8012856:	f200 80e1 	bhi.w	8012a1c <HAL_RCC_GetSysClockFreq+0x1ec>
 801285a:	2b00      	cmp	r3, #0
 801285c:	d002      	beq.n	8012864 <HAL_RCC_GetSysClockFreq+0x34>
 801285e:	2b04      	cmp	r3, #4
 8012860:	d003      	beq.n	801286a <HAL_RCC_GetSysClockFreq+0x3a>
 8012862:	e0db      	b.n	8012a1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8012864:	4b73      	ldr	r3, [pc, #460]	; (8012a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8012866:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8012868:	e0db      	b.n	8012a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801286a:	4b73      	ldr	r3, [pc, #460]	; (8012a38 <HAL_RCC_GetSysClockFreq+0x208>)
 801286c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801286e:	e0d8      	b.n	8012a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8012870:	4b6f      	ldr	r3, [pc, #444]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012878:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801287a:	4b6d      	ldr	r3, [pc, #436]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012882:	2b00      	cmp	r3, #0
 8012884:	d063      	beq.n	801294e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012886:	4b6a      	ldr	r3, [pc, #424]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8012888:	685b      	ldr	r3, [r3, #4]
 801288a:	099b      	lsrs	r3, r3, #6
 801288c:	2200      	movs	r2, #0
 801288e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012890:	63fa      	str	r2, [r7, #60]	; 0x3c
 8012892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012898:	633b      	str	r3, [r7, #48]	; 0x30
 801289a:	2300      	movs	r3, #0
 801289c:	637b      	str	r3, [r7, #52]	; 0x34
 801289e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80128a2:	4622      	mov	r2, r4
 80128a4:	462b      	mov	r3, r5
 80128a6:	f04f 0000 	mov.w	r0, #0
 80128aa:	f04f 0100 	mov.w	r1, #0
 80128ae:	0159      	lsls	r1, r3, #5
 80128b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80128b4:	0150      	lsls	r0, r2, #5
 80128b6:	4602      	mov	r2, r0
 80128b8:	460b      	mov	r3, r1
 80128ba:	4621      	mov	r1, r4
 80128bc:	1a51      	subs	r1, r2, r1
 80128be:	6139      	str	r1, [r7, #16]
 80128c0:	4629      	mov	r1, r5
 80128c2:	eb63 0301 	sbc.w	r3, r3, r1
 80128c6:	617b      	str	r3, [r7, #20]
 80128c8:	f04f 0200 	mov.w	r2, #0
 80128cc:	f04f 0300 	mov.w	r3, #0
 80128d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80128d4:	4659      	mov	r1, fp
 80128d6:	018b      	lsls	r3, r1, #6
 80128d8:	4651      	mov	r1, sl
 80128da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80128de:	4651      	mov	r1, sl
 80128e0:	018a      	lsls	r2, r1, #6
 80128e2:	4651      	mov	r1, sl
 80128e4:	ebb2 0801 	subs.w	r8, r2, r1
 80128e8:	4659      	mov	r1, fp
 80128ea:	eb63 0901 	sbc.w	r9, r3, r1
 80128ee:	f04f 0200 	mov.w	r2, #0
 80128f2:	f04f 0300 	mov.w	r3, #0
 80128f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80128fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80128fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012902:	4690      	mov	r8, r2
 8012904:	4699      	mov	r9, r3
 8012906:	4623      	mov	r3, r4
 8012908:	eb18 0303 	adds.w	r3, r8, r3
 801290c:	60bb      	str	r3, [r7, #8]
 801290e:	462b      	mov	r3, r5
 8012910:	eb49 0303 	adc.w	r3, r9, r3
 8012914:	60fb      	str	r3, [r7, #12]
 8012916:	f04f 0200 	mov.w	r2, #0
 801291a:	f04f 0300 	mov.w	r3, #0
 801291e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012922:	4629      	mov	r1, r5
 8012924:	024b      	lsls	r3, r1, #9
 8012926:	4621      	mov	r1, r4
 8012928:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 801292c:	4621      	mov	r1, r4
 801292e:	024a      	lsls	r2, r1, #9
 8012930:	4610      	mov	r0, r2
 8012932:	4619      	mov	r1, r3
 8012934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012936:	2200      	movs	r2, #0
 8012938:	62bb      	str	r3, [r7, #40]	; 0x28
 801293a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801293c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012940:	f007 f998 	bl	8019c74 <__aeabi_uldivmod>
 8012944:	4602      	mov	r2, r0
 8012946:	460b      	mov	r3, r1
 8012948:	4613      	mov	r3, r2
 801294a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801294c:	e058      	b.n	8012a00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801294e:	4b38      	ldr	r3, [pc, #224]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	099b      	lsrs	r3, r3, #6
 8012954:	2200      	movs	r2, #0
 8012956:	4618      	mov	r0, r3
 8012958:	4611      	mov	r1, r2
 801295a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801295e:	623b      	str	r3, [r7, #32]
 8012960:	2300      	movs	r3, #0
 8012962:	627b      	str	r3, [r7, #36]	; 0x24
 8012964:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8012968:	4642      	mov	r2, r8
 801296a:	464b      	mov	r3, r9
 801296c:	f04f 0000 	mov.w	r0, #0
 8012970:	f04f 0100 	mov.w	r1, #0
 8012974:	0159      	lsls	r1, r3, #5
 8012976:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801297a:	0150      	lsls	r0, r2, #5
 801297c:	4602      	mov	r2, r0
 801297e:	460b      	mov	r3, r1
 8012980:	4641      	mov	r1, r8
 8012982:	ebb2 0a01 	subs.w	sl, r2, r1
 8012986:	4649      	mov	r1, r9
 8012988:	eb63 0b01 	sbc.w	fp, r3, r1
 801298c:	f04f 0200 	mov.w	r2, #0
 8012990:	f04f 0300 	mov.w	r3, #0
 8012994:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012998:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801299c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80129a0:	ebb2 040a 	subs.w	r4, r2, sl
 80129a4:	eb63 050b 	sbc.w	r5, r3, fp
 80129a8:	f04f 0200 	mov.w	r2, #0
 80129ac:	f04f 0300 	mov.w	r3, #0
 80129b0:	00eb      	lsls	r3, r5, #3
 80129b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80129b6:	00e2      	lsls	r2, r4, #3
 80129b8:	4614      	mov	r4, r2
 80129ba:	461d      	mov	r5, r3
 80129bc:	4643      	mov	r3, r8
 80129be:	18e3      	adds	r3, r4, r3
 80129c0:	603b      	str	r3, [r7, #0]
 80129c2:	464b      	mov	r3, r9
 80129c4:	eb45 0303 	adc.w	r3, r5, r3
 80129c8:	607b      	str	r3, [r7, #4]
 80129ca:	f04f 0200 	mov.w	r2, #0
 80129ce:	f04f 0300 	mov.w	r3, #0
 80129d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80129d6:	4629      	mov	r1, r5
 80129d8:	028b      	lsls	r3, r1, #10
 80129da:	4621      	mov	r1, r4
 80129dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80129e0:	4621      	mov	r1, r4
 80129e2:	028a      	lsls	r2, r1, #10
 80129e4:	4610      	mov	r0, r2
 80129e6:	4619      	mov	r1, r3
 80129e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ea:	2200      	movs	r2, #0
 80129ec:	61bb      	str	r3, [r7, #24]
 80129ee:	61fa      	str	r2, [r7, #28]
 80129f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80129f4:	f007 f93e 	bl	8019c74 <__aeabi_uldivmod>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4613      	mov	r3, r2
 80129fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012a00:	4b0b      	ldr	r3, [pc, #44]	; (8012a30 <HAL_RCC_GetSysClockFreq+0x200>)
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	0c1b      	lsrs	r3, r3, #16
 8012a06:	f003 0303 	and.w	r3, r3, #3
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8012a10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012a1a:	e002      	b.n	8012a22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012a1c:	4b05      	ldr	r3, [pc, #20]	; (8012a34 <HAL_RCC_GetSysClockFreq+0x204>)
 8012a1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8012a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3750      	adds	r7, #80	; 0x50
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012a2e:	bf00      	nop
 8012a30:	40023800 	.word	0x40023800
 8012a34:	00f42400 	.word	0x00f42400
 8012a38:	007a1200 	.word	0x007a1200

08012a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012a3c:	b480      	push	{r7}
 8012a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8012a40:	4b03      	ldr	r3, [pc, #12]	; (8012a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8012a42:	681b      	ldr	r3, [r3, #0]
}
 8012a44:	4618      	mov	r0, r3
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	20000058 	.word	0x20000058

08012a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012a54:	b580      	push	{r7, lr}
 8012a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8012a58:	f7ff fff0 	bl	8012a3c <HAL_RCC_GetHCLKFreq>
 8012a5c:	4602      	mov	r2, r0
 8012a5e:	4b05      	ldr	r3, [pc, #20]	; (8012a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8012a60:	689b      	ldr	r3, [r3, #8]
 8012a62:	0a9b      	lsrs	r3, r3, #10
 8012a64:	f003 0307 	and.w	r3, r3, #7
 8012a68:	4903      	ldr	r1, [pc, #12]	; (8012a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8012a6a:	5ccb      	ldrb	r3, [r1, r3]
 8012a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	40023800 	.word	0x40023800
 8012a78:	08052688 	.word	0x08052688

08012a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012a80:	f7ff ffdc 	bl	8012a3c <HAL_RCC_GetHCLKFreq>
 8012a84:	4602      	mov	r2, r0
 8012a86:	4b05      	ldr	r3, [pc, #20]	; (8012a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8012a88:	689b      	ldr	r3, [r3, #8]
 8012a8a:	0b5b      	lsrs	r3, r3, #13
 8012a8c:	f003 0307 	and.w	r3, r3, #7
 8012a90:	4903      	ldr	r1, [pc, #12]	; (8012aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012a92:	5ccb      	ldrb	r3, [r1, r3]
 8012a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	40023800 	.word	0x40023800
 8012aa0:	08052688 	.word	0x08052688

08012aa4 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012aa4:	b480      	push	{r7}
 8012aa6:	b083      	sub	sp, #12
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	220f      	movs	r2, #15
 8012ab0:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012ab2:	4b45      	ldr	r3, [pc, #276]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012aba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8012abe:	d104      	bne.n	8012aca <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8012ac6:	605a      	str	r2, [r3, #4]
 8012ac8:	e00e      	b.n	8012ae8 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8012aca:	4b3f      	ldr	r3, [pc, #252]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ad6:	d104      	bne.n	8012ae2 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012ade:	605a      	str	r2, [r3, #4]
 8012ae0:	e002      	b.n	8012ae8 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8012ae8:	4b37      	ldr	r3, [pc, #220]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	f003 0301 	and.w	r3, r3, #1
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d103      	bne.n	8012afc <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	2201      	movs	r2, #1
 8012af8:	60da      	str	r2, [r3, #12]
 8012afa:	e002      	b.n	8012b02 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	2200      	movs	r2, #0
 8012b00:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8012b02:	4b31      	ldr	r3, [pc, #196]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	08db      	lsrs	r3, r3, #3
 8012b08:	f003 021f 	and.w	r2, r3, #31
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8012b10:	4b2d      	ldr	r3, [pc, #180]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b14:	f003 0304 	and.w	r3, r3, #4
 8012b18:	2b04      	cmp	r3, #4
 8012b1a:	d103      	bne.n	8012b24 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	2205      	movs	r2, #5
 8012b20:	609a      	str	r2, [r3, #8]
 8012b22:	e00c      	b.n	8012b3e <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8012b24:	4b28      	ldr	r3, [pc, #160]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b28:	f003 0301 	and.w	r3, r3, #1
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d103      	bne.n	8012b38 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	609a      	str	r2, [r3, #8]
 8012b36:	e002      	b.n	8012b3e <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8012b3e:	4b22      	ldr	r3, [pc, #136]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b01      	cmp	r3, #1
 8012b48:	d103      	bne.n	8012b52 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	615a      	str	r2, [r3, #20]
 8012b50:	e002      	b.n	8012b58 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8012b58:	4b1b      	ldr	r3, [pc, #108]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012b64:	d103      	bne.n	8012b6e <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2202      	movs	r2, #2
 8012b6a:	619a      	str	r2, [r3, #24]
 8012b6c:	e002      	b.n	8012b74 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2201      	movs	r2, #1
 8012b72:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012b74:	4b14      	ldr	r3, [pc, #80]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b76:	685b      	ldr	r3, [r3, #4]
 8012b78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012b80:	4b11      	ldr	r3, [pc, #68]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8012b8c:	4b0e      	ldr	r3, [pc, #56]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	099b      	lsrs	r3, r3, #6
 8012b92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8012b9a:	4b0b      	ldr	r3, [pc, #44]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012ba2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012ba6:	005b      	lsls	r3, r3, #1
 8012ba8:	0c1a      	lsrs	r2, r3, #16
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8012bae:	4b06      	ldr	r3, [pc, #24]	; (8012bc8 <HAL_RCC_GetOscConfig+0x124>)
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	0e1b      	lsrs	r3, r3, #24
 8012bb4:	f003 020f 	and.w	r2, r3, #15
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8012bbc:	bf00      	nop
 8012bbe:	370c      	adds	r7, #12
 8012bc0:	46bd      	mov	sp, r7
 8012bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc6:	4770      	bx	lr
 8012bc8:	40023800 	.word	0x40023800

08012bcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8012bcc:	b480      	push	{r7}
 8012bce:	b083      	sub	sp, #12
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	6078      	str	r0, [r7, #4]
 8012bd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	220f      	movs	r2, #15
 8012bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8012bdc:	4b12      	ldr	r3, [pc, #72]	; (8012c28 <HAL_RCC_GetClockConfig+0x5c>)
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	f003 0203 	and.w	r2, r3, #3
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012be8:	4b0f      	ldr	r3, [pc, #60]	; (8012c28 <HAL_RCC_GetClockConfig+0x5c>)
 8012bea:	689b      	ldr	r3, [r3, #8]
 8012bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012bf4:	4b0c      	ldr	r3, [pc, #48]	; (8012c28 <HAL_RCC_GetClockConfig+0x5c>)
 8012bf6:	689b      	ldr	r3, [r3, #8]
 8012bf8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012c00:	4b09      	ldr	r3, [pc, #36]	; (8012c28 <HAL_RCC_GetClockConfig+0x5c>)
 8012c02:	689b      	ldr	r3, [r3, #8]
 8012c04:	08db      	lsrs	r3, r3, #3
 8012c06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8012c0e:	4b07      	ldr	r3, [pc, #28]	; (8012c2c <HAL_RCC_GetClockConfig+0x60>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f003 0207 	and.w	r2, r3, #7
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	601a      	str	r2, [r3, #0]
}
 8012c1a:	bf00      	nop
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	40023800 	.word	0x40023800
 8012c2c:	40023c00 	.word	0x40023c00

08012c30 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8012c30:	b580      	push	{r7, lr}
 8012c32:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8012c34:	4b06      	ldr	r3, [pc, #24]	; (8012c50 <HAL_RCC_NMI_IRQHandler+0x20>)
 8012c36:	68db      	ldr	r3, [r3, #12]
 8012c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c3c:	2b80      	cmp	r3, #128	; 0x80
 8012c3e:	d104      	bne.n	8012c4a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8012c40:	f000 f80a 	bl	8012c58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8012c44:	4b03      	ldr	r3, [pc, #12]	; (8012c54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8012c46:	2280      	movs	r2, #128	; 0x80
 8012c48:	701a      	strb	r2, [r3, #0]
  }
}
 8012c4a:	bf00      	nop
 8012c4c:	bd80      	pop	{r7, pc}
 8012c4e:	bf00      	nop
 8012c50:	40023800 	.word	0x40023800
 8012c54:	4002380e 	.word	0x4002380e

08012c58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8012c5c:	bf00      	nop
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr

08012c66 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012c66:	b580      	push	{r7, lr}
 8012c68:	b086      	sub	sp, #24
 8012c6a:	af00      	add	r7, sp, #0
 8012c6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012c72:	2300      	movs	r3, #0
 8012c74:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	f003 0301 	and.w	r3, r3, #1
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d105      	bne.n	8012c8e <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d035      	beq.n	8012cfa <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8012c8e:	4b62      	ldr	r3, [pc, #392]	; (8012e18 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012c90:	2200      	movs	r2, #0
 8012c92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012c94:	f7f4 f982 	bl	8006f9c <HAL_GetTick>
 8012c98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012c9a:	e008      	b.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012c9c:	f7f4 f97e 	bl	8006f9c <HAL_GetTick>
 8012ca0:	4602      	mov	r2, r0
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	1ad3      	subs	r3, r2, r3
 8012ca6:	2b02      	cmp	r3, #2
 8012ca8:	d901      	bls.n	8012cae <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012caa:	2303      	movs	r3, #3
 8012cac:	e0b0      	b.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8012cae:	4b5b      	ldr	r3, [pc, #364]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1f0      	bne.n	8012c9c <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	685b      	ldr	r3, [r3, #4]
 8012cbe:	019a      	lsls	r2, r3, #6
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	689b      	ldr	r3, [r3, #8]
 8012cc4:	071b      	lsls	r3, r3, #28
 8012cc6:	4955      	ldr	r1, [pc, #340]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012cc8:	4313      	orrs	r3, r2
 8012cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8012cce:	4b52      	ldr	r3, [pc, #328]	; (8012e18 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012cd0:	2201      	movs	r2, #1
 8012cd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012cd4:	f7f4 f962 	bl	8006f9c <HAL_GetTick>
 8012cd8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012cda:	e008      	b.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012cdc:	f7f4 f95e 	bl	8006f9c <HAL_GetTick>
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	2b02      	cmp	r3, #2
 8012ce8:	d901      	bls.n	8012cee <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8012cea:	2303      	movs	r3, #3
 8012cec:	e090      	b.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8012cee:	4b4b      	ldr	r3, [pc, #300]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d0f0      	beq.n	8012cdc <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f003 0302 	and.w	r3, r3, #2
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 8083 	beq.w	8012e0e <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012d08:	2300      	movs	r3, #0
 8012d0a:	60fb      	str	r3, [r7, #12]
 8012d0c:	4b43      	ldr	r3, [pc, #268]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d10:	4a42      	ldr	r2, [pc, #264]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012d16:	6413      	str	r3, [r2, #64]	; 0x40
 8012d18:	4b40      	ldr	r3, [pc, #256]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012d20:	60fb      	str	r3, [r7, #12]
 8012d22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8012d24:	4b3e      	ldr	r3, [pc, #248]	; (8012e20 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4a3d      	ldr	r2, [pc, #244]	; (8012e20 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012d2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012d2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012d30:	f7f4 f934 	bl	8006f9c <HAL_GetTick>
 8012d34:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012d36:	e008      	b.n	8012d4a <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012d38:	f7f4 f930 	bl	8006f9c <HAL_GetTick>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	1ad3      	subs	r3, r2, r3
 8012d42:	2b02      	cmp	r3, #2
 8012d44:	d901      	bls.n	8012d4a <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8012d46:	2303      	movs	r3, #3
 8012d48:	e062      	b.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012d4a:	4b35      	ldr	r3, [pc, #212]	; (8012e20 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d0f0      	beq.n	8012d38 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8012d56:	4b31      	ldr	r3, [pc, #196]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d5e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8012d60:	693b      	ldr	r3, [r7, #16]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d02f      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	68db      	ldr	r3, [r3, #12]
 8012d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012d6e:	693a      	ldr	r2, [r7, #16]
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d028      	beq.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012d74:	4b29      	ldr	r3, [pc, #164]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012d7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012d7e:	4b29      	ldr	r3, [pc, #164]	; (8012e24 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012d80:	2201      	movs	r2, #1
 8012d82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012d84:	4b27      	ldr	r3, [pc, #156]	; (8012e24 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8012d8a:	4a24      	ldr	r2, [pc, #144]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d8c:	693b      	ldr	r3, [r7, #16]
 8012d8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012d90:	4b22      	ldr	r3, [pc, #136]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d94:	f003 0301 	and.w	r3, r3, #1
 8012d98:	2b01      	cmp	r3, #1
 8012d9a:	d114      	bne.n	8012dc6 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8012d9c:	f7f4 f8fe 	bl	8006f9c <HAL_GetTick>
 8012da0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012da2:	e00a      	b.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012da4:	f7f4 f8fa 	bl	8006f9c <HAL_GetTick>
 8012da8:	4602      	mov	r2, r0
 8012daa:	697b      	ldr	r3, [r7, #20]
 8012dac:	1ad3      	subs	r3, r2, r3
 8012dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d901      	bls.n	8012dba <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012db6:	2303      	movs	r3, #3
 8012db8:	e02a      	b.n	8012e10 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012dba:	4b18      	ldr	r3, [pc, #96]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dbe:	f003 0302 	and.w	r3, r3, #2
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d0ee      	beq.n	8012da4 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	68db      	ldr	r3, [r3, #12]
 8012dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012dd2:	d10d      	bne.n	8012df0 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012dd4:	4b11      	ldr	r3, [pc, #68]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012dd6:	689b      	ldr	r3, [r3, #8]
 8012dd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012de8:	490c      	ldr	r1, [pc, #48]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012dea:	4313      	orrs	r3, r2
 8012dec:	608b      	str	r3, [r1, #8]
 8012dee:	e005      	b.n	8012dfc <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012df0:	4b0a      	ldr	r3, [pc, #40]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012df2:	689b      	ldr	r3, [r3, #8]
 8012df4:	4a09      	ldr	r2, [pc, #36]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012df6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8012dfa:	6093      	str	r3, [r2, #8]
 8012dfc:	4b07      	ldr	r3, [pc, #28]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012e08:	4904      	ldr	r1, [pc, #16]	; (8012e1c <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	4618      	mov	r0, r3
 8012e12:	3718      	adds	r7, #24
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	42470068 	.word	0x42470068
 8012e1c:	40023800 	.word	0x40023800
 8012e20:	40007000 	.word	0x40007000
 8012e24:	42470e40 	.word	0x42470e40

08012e28 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012e28:	b480      	push	{r7}
 8012e2a:	b085      	sub	sp, #20
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2203      	movs	r2, #3
 8012e34:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8012e36:	4b11      	ldr	r3, [pc, #68]	; (8012e7c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e3c:	099b      	lsrs	r3, r3, #6
 8012e3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8012e46:	4b0d      	ldr	r3, [pc, #52]	; (8012e7c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012e4c:	0f1b      	lsrs	r3, r3, #28
 8012e4e:	f003 0207 	and.w	r2, r3, #7
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8012e56:	4b09      	ldr	r3, [pc, #36]	; (8012e7c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012e58:	689b      	ldr	r3, [r3, #8]
 8012e5a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8012e5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8012e60:	4b06      	ldr	r3, [pc, #24]	; (8012e7c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8012e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e64:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	431a      	orrs	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012e70:	bf00      	nop
 8012e72:	3714      	adds	r7, #20
 8012e74:	46bd      	mov	sp, r7
 8012e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7a:	4770      	bx	lr
 8012e7c:	40023800 	.word	0x40023800

08012e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012e80:	b480      	push	{r7}
 8012e82:	b087      	sub	sp, #28
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012e90:	2300      	movs	r3, #0
 8012e92:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012e94:	2300      	movs	r3, #0
 8012e96:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b01      	cmp	r3, #1
 8012e9c:	d13e      	bne.n	8012f1c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8012e9e:	4b23      	ldr	r3, [pc, #140]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012ea0:	689b      	ldr	r3, [r3, #8]
 8012ea2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ea6:	60fb      	str	r3, [r7, #12]
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d005      	beq.n	8012eba <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d12f      	bne.n	8012f14 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012eb4:	4b1e      	ldr	r3, [pc, #120]	; (8012f30 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012eb6:	617b      	str	r3, [r7, #20]
          break;
 8012eb8:	e02f      	b.n	8012f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012eba:	4b1c      	ldr	r3, [pc, #112]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012ec6:	d108      	bne.n	8012eda <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012ec8:	4b18      	ldr	r3, [pc, #96]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012eca:	685b      	ldr	r3, [r3, #4]
 8012ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ed0:	4a18      	ldr	r2, [pc, #96]	; (8012f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ed6:	613b      	str	r3, [r7, #16]
 8012ed8:	e007      	b.n	8012eea <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012eda:	4b14      	ldr	r3, [pc, #80]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012ee2:	4a15      	ldr	r2, [pc, #84]	; (8012f38 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ee8:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012eea:	4b10      	ldr	r3, [pc, #64]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ef0:	099b      	lsrs	r3, r3, #6
 8012ef2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	fb02 f303 	mul.w	r3, r2, r3
 8012efc:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8012efe:	4b0b      	ldr	r3, [pc, #44]	; (8012f2c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f04:	0f1b      	lsrs	r3, r3, #28
 8012f06:	f003 0307 	and.w	r3, r3, #7
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012f10:	617b      	str	r3, [r7, #20]
          break;
 8012f12:	e002      	b.n	8012f1a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8012f14:	2300      	movs	r3, #0
 8012f16:	617b      	str	r3, [r7, #20]
          break;
 8012f18:	bf00      	nop
        }
      }
      break;
 8012f1a:	bf00      	nop
    }
  }
  return frequency;
 8012f1c:	697b      	ldr	r3, [r7, #20]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	371c      	adds	r7, #28
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	40023800 	.word	0x40023800
 8012f30:	00bb8000 	.word	0x00bb8000
 8012f34:	007a1200 	.word	0x007a1200
 8012f38:	00f42400 	.word	0x00f42400

08012f3c <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012f44:	4b1d      	ldr	r3, [pc, #116]	; (8012fbc <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012f4a:	f7f4 f827 	bl	8006f9c <HAL_GetTick>
 8012f4e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012f50:	e008      	b.n	8012f64 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012f52:	f7f4 f823 	bl	8006f9c <HAL_GetTick>
 8012f56:	4602      	mov	r2, r0
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	1ad3      	subs	r3, r2, r3
 8012f5c:	2b02      	cmp	r3, #2
 8012f5e:	d901      	bls.n	8012f64 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012f60:	2303      	movs	r3, #3
 8012f62:	e026      	b.n	8012fb2 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 8012f64:	4b16      	ldr	r3, [pc, #88]	; (8012fc0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d1f0      	bne.n	8012f52 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	019a      	lsls	r2, r3, #6
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	685b      	ldr	r3, [r3, #4]
 8012f7a:	071b      	lsls	r3, r3, #28
 8012f7c:	4910      	ldr	r1, [pc, #64]	; (8012fc0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012f7e:	4313      	orrs	r3, r2
 8012f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012f84:	4b0d      	ldr	r3, [pc, #52]	; (8012fbc <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012f86:	2201      	movs	r2, #1
 8012f88:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 8012f8a:	f7f4 f807 	bl	8006f9c <HAL_GetTick>
 8012f8e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012f90:	e008      	b.n	8012fa4 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012f92:	f7f4 f803 	bl	8006f9c <HAL_GetTick>
 8012f96:	4602      	mov	r2, r0
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	2b02      	cmp	r3, #2
 8012f9e:	d901      	bls.n	8012fa4 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012fa0:	2303      	movs	r3, #3
 8012fa2:	e006      	b.n	8012fb2 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012fa4:	4b06      	ldr	r3, [pc, #24]	; (8012fc0 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d0f0      	beq.n	8012f92 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3710      	adds	r7, #16
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	42470068 	.word	0x42470068
 8012fc0:	40023800 	.word	0x40023800

08012fc4 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b082      	sub	sp, #8
 8012fc8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012fca:	4b0d      	ldr	r3, [pc, #52]	; (8013000 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012fcc:	2200      	movs	r2, #0
 8012fce:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012fd0:	f7f3 ffe4 	bl	8006f9c <HAL_GetTick>
 8012fd4:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012fd6:	e008      	b.n	8012fea <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012fd8:	f7f3 ffe0 	bl	8006f9c <HAL_GetTick>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	1ad3      	subs	r3, r2, r3
 8012fe2:	2b02      	cmp	r3, #2
 8012fe4:	d901      	bls.n	8012fea <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012fe6:	2303      	movs	r3, #3
 8012fe8:	e006      	b.n	8012ff8 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012fea:	4b06      	ldr	r3, [pc, #24]	; (8013004 <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012fec:	681b      	ldr	r3, [r3, #0]
 8012fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d1f0      	bne.n	8012fd8 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012ff6:	2300      	movs	r3, #0
}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	42470068 	.word	0x42470068
 8013004:	40023800 	.word	0x40023800

08013008 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b082      	sub	sp, #8
 801300c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801300e:	f7f3 ffc5 	bl	8006f9c <HAL_GetTick>
 8013012:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8013014:	4b5d      	ldr	r3, [pc, #372]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4a5c      	ldr	r2, [pc, #368]	; (801318c <HAL_RCC_DeInit+0x184>)
 801301a:	f043 0301 	orr.w	r3, r3, #1
 801301e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8013020:	e008      	b.n	8013034 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013022:	f7f3 ffbb 	bl	8006f9c <HAL_GetTick>
 8013026:	4602      	mov	r2, r0
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	2b02      	cmp	r3, #2
 801302e:	d901      	bls.n	8013034 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8013030:	2303      	movs	r3, #3
 8013032:	e0a7      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8013034:	4b55      	ldr	r3, [pc, #340]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f003 0302 	and.w	r3, r3, #2
 801303c:	2b00      	cmp	r3, #0
 801303e:	d0f0      	beq.n	8013022 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8013040:	4b52      	ldr	r3, [pc, #328]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	4a51      	ldr	r2, [pc, #324]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801304a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801304c:	f7f3 ffa6 	bl	8006f9c <HAL_GetTick>
 8013050:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8013052:	4b4e      	ldr	r3, [pc, #312]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013054:	2200      	movs	r2, #0
 8013056:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8013058:	e00a      	b.n	8013070 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801305a:	f7f3 ff9f 	bl	8006f9c <HAL_GetTick>
 801305e:	4602      	mov	r2, r0
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	1ad3      	subs	r3, r2, r3
 8013064:	f241 3288 	movw	r2, #5000	; 0x1388
 8013068:	4293      	cmp	r3, r2
 801306a:	d901      	bls.n	8013070 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 801306c:	2303      	movs	r3, #3
 801306e:	e089      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8013070:	4b46      	ldr	r3, [pc, #280]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	f003 030c 	and.w	r3, r3, #12
 8013078:	2b00      	cmp	r3, #0
 801307a:	d1ee      	bne.n	801305a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801307c:	f7f3 ff8e 	bl	8006f9c <HAL_GetTick>
 8013080:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8013082:	4b42      	ldr	r3, [pc, #264]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4a41      	ldr	r2, [pc, #260]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013088:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 801308c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801308e:	e008      	b.n	80130a2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013090:	f7f3 ff84 	bl	8006f9c <HAL_GetTick>
 8013094:	4602      	mov	r2, r0
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	1ad3      	subs	r3, r2, r3
 801309a:	2b64      	cmp	r3, #100	; 0x64
 801309c:	d901      	bls.n	80130a2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801309e:	2303      	movs	r3, #3
 80130a0:	e070      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80130a2:	4b3a      	ldr	r3, [pc, #232]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d1f0      	bne.n	8013090 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80130ae:	f7f3 ff75 	bl	8006f9c <HAL_GetTick>
 80130b2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80130b4:	4b35      	ldr	r3, [pc, #212]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	4a34      	ldr	r2, [pc, #208]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80130be:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80130c0:	e008      	b.n	80130d4 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80130c2:	f7f3 ff6b 	bl	8006f9c <HAL_GetTick>
 80130c6:	4602      	mov	r2, r0
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	1ad3      	subs	r3, r2, r3
 80130cc:	2b02      	cmp	r3, #2
 80130ce:	d901      	bls.n	80130d4 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80130d0:	2303      	movs	r3, #3
 80130d2:	e057      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80130d4:	4b2d      	ldr	r3, [pc, #180]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d1f0      	bne.n	80130c2 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80130e0:	f7f3 ff5c 	bl	8006f9c <HAL_GetTick>
 80130e4:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80130e6:	4b29      	ldr	r3, [pc, #164]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	4a28      	ldr	r2, [pc, #160]	; (801318c <HAL_RCC_DeInit+0x184>)
 80130ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80130f0:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80130f2:	e008      	b.n	8013106 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80130f4:	f7f3 ff52 	bl	8006f9c <HAL_GetTick>
 80130f8:	4602      	mov	r2, r0
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d901      	bls.n	8013106 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8013102:	2303      	movs	r3, #3
 8013104:	e03e      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8013106:	4b21      	ldr	r3, [pc, #132]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1f0      	bne.n	80130f4 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8013112:	4b1e      	ldr	r3, [pc, #120]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013114:	4a1e      	ldr	r2, [pc, #120]	; (8013190 <HAL_RCC_DeInit+0x188>)
 8013116:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8013118:	4b1c      	ldr	r3, [pc, #112]	; (801318c <HAL_RCC_DeInit+0x184>)
 801311a:	4a1e      	ldr	r2, [pc, #120]	; (8013194 <HAL_RCC_DeInit+0x18c>)
 801311c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8013120:	4b1a      	ldr	r3, [pc, #104]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	4a19      	ldr	r2, [pc, #100]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013126:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 801312a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 801312c:	4b17      	ldr	r3, [pc, #92]	; (801318c <HAL_RCC_DeInit+0x184>)
 801312e:	68db      	ldr	r3, [r3, #12]
 8013130:	4a16      	ldr	r2, [pc, #88]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013132:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013136:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8013138:	4b14      	ldr	r3, [pc, #80]	; (801318c <HAL_RCC_DeInit+0x184>)
 801313a:	68db      	ldr	r3, [r3, #12]
 801313c:	4a13      	ldr	r2, [pc, #76]	; (801318c <HAL_RCC_DeInit+0x184>)
 801313e:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8013142:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8013144:	4b11      	ldr	r3, [pc, #68]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	4a10      	ldr	r2, [pc, #64]	; (801318c <HAL_RCC_DeInit+0x184>)
 801314a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801314e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8013150:	4b0e      	ldr	r3, [pc, #56]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013154:	4a0d      	ldr	r2, [pc, #52]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013156:	f023 0301 	bic.w	r3, r3, #1
 801315a:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 801315c:	4b0b      	ldr	r3, [pc, #44]	; (801318c <HAL_RCC_DeInit+0x184>)
 801315e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013160:	4a0a      	ldr	r2, [pc, #40]	; (801318c <HAL_RCC_DeInit+0x184>)
 8013162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013166:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8013168:	4b0b      	ldr	r3, [pc, #44]	; (8013198 <HAL_RCC_DeInit+0x190>)
 801316a:	4a0c      	ldr	r2, [pc, #48]	; (801319c <HAL_RCC_DeInit+0x194>)
 801316c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 801316e:	4b0c      	ldr	r3, [pc, #48]	; (80131a0 <HAL_RCC_DeInit+0x198>)
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	4618      	mov	r0, r3
 8013174:	f7f3 fecd 	bl	8006f12 <HAL_InitTick>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	d001      	beq.n	8013182 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 801317e:	2301      	movs	r3, #1
 8013180:	e000      	b.n	8013184 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8013182:	2300      	movs	r3, #0
  }
}
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	40023800 	.word	0x40023800
 8013190:	04003010 	.word	0x04003010
 8013194:	20003000 	.word	0x20003000
 8013198:	20000058 	.word	0x20000058
 801319c:	00f42400 	.word	0x00f42400
 80131a0:	2000005c 	.word	0x2000005c

080131a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80131b2:	2301      	movs	r3, #1
 80131b4:	e07b      	b.n	80132ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d108      	bne.n	80131d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80131c6:	d009      	beq.n	80131dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2200      	movs	r2, #0
 80131cc:	61da      	str	r2, [r3, #28]
 80131ce:	e005      	b.n	80131dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2200      	movs	r2, #0
 80131d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2200      	movs	r2, #0
 80131da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2200      	movs	r2, #0
 80131e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d106      	bne.n	80131fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	2200      	movs	r2, #0
 80131f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7f2 fa6e 	bl	80056d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2202      	movs	r2, #2
 8013200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013212:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	689b      	ldr	r3, [r3, #8]
 8013220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8013224:	431a      	orrs	r2, r3
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	68db      	ldr	r3, [r3, #12]
 801322a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801322e:	431a      	orrs	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	691b      	ldr	r3, [r3, #16]
 8013234:	f003 0302 	and.w	r3, r3, #2
 8013238:	431a      	orrs	r2, r3
 801323a:	687b      	ldr	r3, [r7, #4]
 801323c:	695b      	ldr	r3, [r3, #20]
 801323e:	f003 0301 	and.w	r3, r3, #1
 8013242:	431a      	orrs	r2, r3
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	699b      	ldr	r3, [r3, #24]
 8013248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801324c:	431a      	orrs	r2, r3
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	69db      	ldr	r3, [r3, #28]
 8013252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013256:	431a      	orrs	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	6a1b      	ldr	r3, [r3, #32]
 801325c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013260:	ea42 0103 	orr.w	r1, r2, r3
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013268:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	430a      	orrs	r2, r1
 8013272:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	699b      	ldr	r3, [r3, #24]
 8013278:	0c1b      	lsrs	r3, r3, #16
 801327a:	f003 0104 	and.w	r1, r3, #4
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013282:	f003 0210 	and.w	r2, r3, #16
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	430a      	orrs	r2, r1
 801328c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	69da      	ldr	r2, [r3, #28]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801329c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2200      	movs	r2, #0
 80132a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2201      	movs	r2, #1
 80132a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80132ac:	2300      	movs	r3, #0
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3708      	adds	r7, #8
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b082      	sub	sp, #8
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d101      	bne.n	80132c8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80132c4:	2301      	movs	r3, #1
 80132c6:	e01a      	b.n	80132fe <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2202      	movs	r2, #2
 80132cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	681a      	ldr	r2, [r3, #0]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80132de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f7f2 fb31 	bl	8005948 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	2200      	movs	r2, #0
 80132ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	2200      	movs	r2, #0
 80132f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3708      	adds	r7, #8
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b088      	sub	sp, #32
 801330a:	af00      	add	r7, sp, #0
 801330c:	60f8      	str	r0, [r7, #12]
 801330e:	60b9      	str	r1, [r7, #8]
 8013310:	603b      	str	r3, [r7, #0]
 8013312:	4613      	mov	r3, r2
 8013314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013316:	2300      	movs	r3, #0
 8013318:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013320:	2b01      	cmp	r3, #1
 8013322:	d101      	bne.n	8013328 <HAL_SPI_Transmit+0x22>
 8013324:	2302      	movs	r3, #2
 8013326:	e126      	b.n	8013576 <HAL_SPI_Transmit+0x270>
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2201      	movs	r2, #1
 801332c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013330:	f7f3 fe34 	bl	8006f9c <HAL_GetTick>
 8013334:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013336:	88fb      	ldrh	r3, [r7, #6]
 8013338:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013340:	b2db      	uxtb	r3, r3
 8013342:	2b01      	cmp	r3, #1
 8013344:	d002      	beq.n	801334c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013346:	2302      	movs	r3, #2
 8013348:	77fb      	strb	r3, [r7, #31]
    goto error;
 801334a:	e10b      	b.n	8013564 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <HAL_SPI_Transmit+0x52>
 8013352:	88fb      	ldrh	r3, [r7, #6]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d102      	bne.n	801335e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013358:	2301      	movs	r3, #1
 801335a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801335c:	e102      	b.n	8013564 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	2203      	movs	r2, #3
 8013362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	2200      	movs	r2, #0
 801336a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	68ba      	ldr	r2, [r7, #8]
 8013370:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	88fa      	ldrh	r2, [r7, #6]
 8013376:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	88fa      	ldrh	r2, [r7, #6]
 801337c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2200      	movs	r2, #0
 8013382:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	2200      	movs	r2, #0
 8013388:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	2200      	movs	r2, #0
 801338e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	2200      	movs	r2, #0
 8013394:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	2200      	movs	r2, #0
 801339a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	689b      	ldr	r3, [r3, #8]
 80133a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80133a4:	d10f      	bne.n	80133c6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80133b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	681a      	ldr	r2, [r3, #0]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80133c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d0:	2b40      	cmp	r3, #64	; 0x40
 80133d2:	d007      	beq.n	80133e4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	681a      	ldr	r2, [r3, #0]
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80133e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	68db      	ldr	r3, [r3, #12]
 80133e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80133ec:	d14b      	bne.n	8013486 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d002      	beq.n	80133fc <HAL_SPI_Transmit+0xf6>
 80133f6:	8afb      	ldrh	r3, [r7, #22]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d13e      	bne.n	801347a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013400:	881a      	ldrh	r2, [r3, #0]
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801340c:	1c9a      	adds	r2, r3, #2
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013416:	b29b      	uxth	r3, r3
 8013418:	3b01      	subs	r3, #1
 801341a:	b29a      	uxth	r2, r3
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013420:	e02b      	b.n	801347a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	689b      	ldr	r3, [r3, #8]
 8013428:	f003 0302 	and.w	r3, r3, #2
 801342c:	2b02      	cmp	r3, #2
 801342e:	d112      	bne.n	8013456 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013434:	881a      	ldrh	r2, [r3, #0]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013440:	1c9a      	adds	r2, r3, #2
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801344a:	b29b      	uxth	r3, r3
 801344c:	3b01      	subs	r3, #1
 801344e:	b29a      	uxth	r2, r3
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	86da      	strh	r2, [r3, #54]	; 0x36
 8013454:	e011      	b.n	801347a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013456:	f7f3 fda1 	bl	8006f9c <HAL_GetTick>
 801345a:	4602      	mov	r2, r0
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	1ad3      	subs	r3, r2, r3
 8013460:	683a      	ldr	r2, [r7, #0]
 8013462:	429a      	cmp	r2, r3
 8013464:	d803      	bhi.n	801346e <HAL_SPI_Transmit+0x168>
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801346c:	d102      	bne.n	8013474 <HAL_SPI_Transmit+0x16e>
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d102      	bne.n	801347a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8013474:	2303      	movs	r3, #3
 8013476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013478:	e074      	b.n	8013564 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801347e:	b29b      	uxth	r3, r3
 8013480:	2b00      	cmp	r3, #0
 8013482:	d1ce      	bne.n	8013422 <HAL_SPI_Transmit+0x11c>
 8013484:	e04c      	b.n	8013520 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	685b      	ldr	r3, [r3, #4]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d002      	beq.n	8013494 <HAL_SPI_Transmit+0x18e>
 801348e:	8afb      	ldrh	r3, [r7, #22]
 8013490:	2b01      	cmp	r3, #1
 8013492:	d140      	bne.n	8013516 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	330c      	adds	r3, #12
 801349e:	7812      	ldrb	r2, [r2, #0]
 80134a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134a6:	1c5a      	adds	r2, r3, #1
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134b0:	b29b      	uxth	r3, r3
 80134b2:	3b01      	subs	r3, #1
 80134b4:	b29a      	uxth	r2, r3
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80134ba:	e02c      	b.n	8013516 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	689b      	ldr	r3, [r3, #8]
 80134c2:	f003 0302 	and.w	r3, r3, #2
 80134c6:	2b02      	cmp	r3, #2
 80134c8:	d113      	bne.n	80134f2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	330c      	adds	r3, #12
 80134d4:	7812      	ldrb	r2, [r2, #0]
 80134d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134dc:	1c5a      	adds	r2, r3, #1
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	3b01      	subs	r3, #1
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80134f0:	e011      	b.n	8013516 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80134f2:	f7f3 fd53 	bl	8006f9c <HAL_GetTick>
 80134f6:	4602      	mov	r2, r0
 80134f8:	69bb      	ldr	r3, [r7, #24]
 80134fa:	1ad3      	subs	r3, r2, r3
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d803      	bhi.n	801350a <HAL_SPI_Transmit+0x204>
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013508:	d102      	bne.n	8013510 <HAL_SPI_Transmit+0x20a>
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d102      	bne.n	8013516 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013510:	2303      	movs	r3, #3
 8013512:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013514:	e026      	b.n	8013564 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801351a:	b29b      	uxth	r3, r3
 801351c:	2b00      	cmp	r3, #0
 801351e:	d1cd      	bne.n	80134bc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013520:	69ba      	ldr	r2, [r7, #24]
 8013522:	6839      	ldr	r1, [r7, #0]
 8013524:	68f8      	ldr	r0, [r7, #12]
 8013526:	f001 ff3e 	bl	80153a6 <SPI_EndRxTxTransaction>
 801352a:	4603      	mov	r3, r0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2220      	movs	r2, #32
 8013534:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	2b00      	cmp	r3, #0
 801353c:	d10a      	bne.n	8013554 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801353e:	2300      	movs	r3, #0
 8013540:	613b      	str	r3, [r7, #16]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	613b      	str	r3, [r7, #16]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	689b      	ldr	r3, [r3, #8]
 8013550:	613b      	str	r3, [r7, #16]
 8013552:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013558:	2b00      	cmp	r3, #0
 801355a:	d002      	beq.n	8013562 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801355c:	2301      	movs	r3, #1
 801355e:	77fb      	strb	r3, [r7, #31]
 8013560:	e000      	b.n	8013564 <HAL_SPI_Transmit+0x25e>
  }

error:
 8013562:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2201      	movs	r2, #1
 8013568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2200      	movs	r2, #0
 8013570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013574:	7ffb      	ldrb	r3, [r7, #31]
}
 8013576:	4618      	mov	r0, r3
 8013578:	3720      	adds	r7, #32
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}

0801357e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801357e:	b580      	push	{r7, lr}
 8013580:	b088      	sub	sp, #32
 8013582:	af02      	add	r7, sp, #8
 8013584:	60f8      	str	r0, [r7, #12]
 8013586:	60b9      	str	r1, [r7, #8]
 8013588:	603b      	str	r3, [r7, #0]
 801358a:	4613      	mov	r3, r2
 801358c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801358e:	2300      	movs	r3, #0
 8013590:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801359a:	d112      	bne.n	80135c2 <HAL_SPI_Receive+0x44>
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d10e      	bne.n	80135c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	2204      	movs	r2, #4
 80135a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80135ac:	88fa      	ldrh	r2, [r7, #6]
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	9300      	str	r3, [sp, #0]
 80135b2:	4613      	mov	r3, r2
 80135b4:	68ba      	ldr	r2, [r7, #8]
 80135b6:	68b9      	ldr	r1, [r7, #8]
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f000 f8f1 	bl	80137a0 <HAL_SPI_TransmitReceive>
 80135be:	4603      	mov	r3, r0
 80135c0:	e0ea      	b.n	8013798 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80135c8:	2b01      	cmp	r3, #1
 80135ca:	d101      	bne.n	80135d0 <HAL_SPI_Receive+0x52>
 80135cc:	2302      	movs	r3, #2
 80135ce:	e0e3      	b.n	8013798 <HAL_SPI_Receive+0x21a>
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2201      	movs	r2, #1
 80135d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80135d8:	f7f3 fce0 	bl	8006f9c <HAL_GetTick>
 80135dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b01      	cmp	r3, #1
 80135e8:	d002      	beq.n	80135f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80135ea:	2302      	movs	r3, #2
 80135ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80135ee:	e0ca      	b.n	8013786 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80135f0:	68bb      	ldr	r3, [r7, #8]
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d002      	beq.n	80135fc <HAL_SPI_Receive+0x7e>
 80135f6:	88fb      	ldrh	r3, [r7, #6]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d102      	bne.n	8013602 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80135fc:	2301      	movs	r3, #1
 80135fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013600:	e0c1      	b.n	8013786 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	2204      	movs	r2, #4
 8013606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	68ba      	ldr	r2, [r7, #8]
 8013614:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	88fa      	ldrh	r2, [r7, #6]
 801361a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	88fa      	ldrh	r2, [r7, #6]
 8013620:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2200      	movs	r2, #0
 8013626:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2200      	movs	r2, #0
 801362c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2200      	movs	r2, #0
 8013632:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2200      	movs	r2, #0
 8013638:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2200      	movs	r2, #0
 801363e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	689b      	ldr	r3, [r3, #8]
 8013644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013648:	d10f      	bne.n	801366a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	681a      	ldr	r2, [r3, #0]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013658:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	681a      	ldr	r2, [r3, #0]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013668:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013674:	2b40      	cmp	r3, #64	; 0x40
 8013676:	d007      	beq.n	8013688 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013686:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d162      	bne.n	8013756 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8013690:	e02e      	b.n	80136f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	689b      	ldr	r3, [r3, #8]
 8013698:	f003 0301 	and.w	r3, r3, #1
 801369c:	2b01      	cmp	r3, #1
 801369e:	d115      	bne.n	80136cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	f103 020c 	add.w	r2, r3, #12
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136ac:	7812      	ldrb	r2, [r2, #0]
 80136ae:	b2d2      	uxtb	r2, r2
 80136b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136b6:	1c5a      	adds	r2, r3, #1
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136c0:	b29b      	uxth	r3, r3
 80136c2:	3b01      	subs	r3, #1
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80136ca:	e011      	b.n	80136f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80136cc:	f7f3 fc66 	bl	8006f9c <HAL_GetTick>
 80136d0:	4602      	mov	r2, r0
 80136d2:	693b      	ldr	r3, [r7, #16]
 80136d4:	1ad3      	subs	r3, r2, r3
 80136d6:	683a      	ldr	r2, [r7, #0]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d803      	bhi.n	80136e4 <HAL_SPI_Receive+0x166>
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136e2:	d102      	bne.n	80136ea <HAL_SPI_Receive+0x16c>
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d102      	bne.n	80136f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80136ea:	2303      	movs	r3, #3
 80136ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80136ee:	e04a      	b.n	8013786 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1cb      	bne.n	8013692 <HAL_SPI_Receive+0x114>
 80136fa:	e031      	b.n	8013760 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	2b01      	cmp	r3, #1
 8013708:	d113      	bne.n	8013732 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68da      	ldr	r2, [r3, #12]
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013714:	b292      	uxth	r2, r2
 8013716:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801371c:	1c9a      	adds	r2, r3, #2
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013726:	b29b      	uxth	r3, r3
 8013728:	3b01      	subs	r3, #1
 801372a:	b29a      	uxth	r2, r3
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013730:	e011      	b.n	8013756 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013732:	f7f3 fc33 	bl	8006f9c <HAL_GetTick>
 8013736:	4602      	mov	r2, r0
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	1ad3      	subs	r3, r2, r3
 801373c:	683a      	ldr	r2, [r7, #0]
 801373e:	429a      	cmp	r2, r3
 8013740:	d803      	bhi.n	801374a <HAL_SPI_Receive+0x1cc>
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013748:	d102      	bne.n	8013750 <HAL_SPI_Receive+0x1d2>
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d102      	bne.n	8013756 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013750:	2303      	movs	r3, #3
 8013752:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013754:	e017      	b.n	8013786 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801375a:	b29b      	uxth	r3, r3
 801375c:	2b00      	cmp	r3, #0
 801375e:	d1cd      	bne.n	80136fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013760:	693a      	ldr	r2, [r7, #16]
 8013762:	6839      	ldr	r1, [r7, #0]
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f001 fdb9 	bl	80152dc <SPI_EndRxTransaction>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d002      	beq.n	8013776 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2220      	movs	r2, #32
 8013774:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801377a:	2b00      	cmp	r3, #0
 801377c:	d002      	beq.n	8013784 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801377e:	2301      	movs	r3, #1
 8013780:	75fb      	strb	r3, [r7, #23]
 8013782:	e000      	b.n	8013786 <HAL_SPI_Receive+0x208>
  }

error :
 8013784:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	2201      	movs	r2, #1
 801378a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	2200      	movs	r2, #0
 8013792:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013796:	7dfb      	ldrb	r3, [r7, #23]
}
 8013798:	4618      	mov	r0, r3
 801379a:	3718      	adds	r7, #24
 801379c:	46bd      	mov	sp, r7
 801379e:	bd80      	pop	{r7, pc}

080137a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b08c      	sub	sp, #48	; 0x30
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	607a      	str	r2, [r7, #4]
 80137ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80137ae:	2301      	movs	r3, #1
 80137b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80137b2:	2300      	movs	r3, #0
 80137b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80137be:	2b01      	cmp	r3, #1
 80137c0:	d101      	bne.n	80137c6 <HAL_SPI_TransmitReceive+0x26>
 80137c2:	2302      	movs	r3, #2
 80137c4:	e18a      	b.n	8013adc <HAL_SPI_TransmitReceive+0x33c>
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2201      	movs	r2, #1
 80137ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80137ce:	f7f3 fbe5 	bl	8006f9c <HAL_GetTick>
 80137d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80137da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80137e4:	887b      	ldrh	r3, [r7, #2]
 80137e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80137e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d00f      	beq.n	8013810 <HAL_SPI_TransmitReceive+0x70>
 80137f0:	69fb      	ldr	r3, [r7, #28]
 80137f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80137f6:	d107      	bne.n	8013808 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	689b      	ldr	r3, [r3, #8]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d103      	bne.n	8013808 <HAL_SPI_TransmitReceive+0x68>
 8013800:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013804:	2b04      	cmp	r3, #4
 8013806:	d003      	beq.n	8013810 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013808:	2302      	movs	r3, #2
 801380a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801380e:	e15b      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013810:	68bb      	ldr	r3, [r7, #8]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d005      	beq.n	8013822 <HAL_SPI_TransmitReceive+0x82>
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d002      	beq.n	8013822 <HAL_SPI_TransmitReceive+0x82>
 801381c:	887b      	ldrh	r3, [r7, #2]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d103      	bne.n	801382a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013822:	2301      	movs	r3, #1
 8013824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013828:	e14e      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013830:	b2db      	uxtb	r3, r3
 8013832:	2b04      	cmp	r3, #4
 8013834:	d003      	beq.n	801383e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	2205      	movs	r2, #5
 801383a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	2200      	movs	r2, #0
 8013842:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	887a      	ldrh	r2, [r7, #2]
 801384e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	887a      	ldrh	r2, [r7, #2]
 8013854:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	68ba      	ldr	r2, [r7, #8]
 801385a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	887a      	ldrh	r2, [r7, #2]
 8013860:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	887a      	ldrh	r2, [r7, #2]
 8013866:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2200      	movs	r2, #0
 801386c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2200      	movs	r2, #0
 8013872:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801387e:	2b40      	cmp	r3, #64	; 0x40
 8013880:	d007      	beq.n	8013892 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	681a      	ldr	r2, [r3, #0]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013890:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	68db      	ldr	r3, [r3, #12]
 8013896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801389a:	d178      	bne.n	801398e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	685b      	ldr	r3, [r3, #4]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d002      	beq.n	80138aa <HAL_SPI_TransmitReceive+0x10a>
 80138a4:	8b7b      	ldrh	r3, [r7, #26]
 80138a6:	2b01      	cmp	r3, #1
 80138a8:	d166      	bne.n	8013978 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ae:	881a      	ldrh	r2, [r3, #0]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138ba:	1c9a      	adds	r2, r3, #2
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138c4:	b29b      	uxth	r3, r3
 80138c6:	3b01      	subs	r3, #1
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80138ce:	e053      	b.n	8013978 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	689b      	ldr	r3, [r3, #8]
 80138d6:	f003 0302 	and.w	r3, r3, #2
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d11b      	bne.n	8013916 <HAL_SPI_TransmitReceive+0x176>
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d016      	beq.n	8013916 <HAL_SPI_TransmitReceive+0x176>
 80138e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d113      	bne.n	8013916 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138f2:	881a      	ldrh	r2, [r3, #0]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80138fe:	1c9a      	adds	r2, r3, #2
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013908:	b29b      	uxth	r3, r3
 801390a:	3b01      	subs	r3, #1
 801390c:	b29a      	uxth	r2, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013912:	2300      	movs	r3, #0
 8013914:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	689b      	ldr	r3, [r3, #8]
 801391c:	f003 0301 	and.w	r3, r3, #1
 8013920:	2b01      	cmp	r3, #1
 8013922:	d119      	bne.n	8013958 <HAL_SPI_TransmitReceive+0x1b8>
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013928:	b29b      	uxth	r3, r3
 801392a:	2b00      	cmp	r3, #0
 801392c:	d014      	beq.n	8013958 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	68da      	ldr	r2, [r3, #12]
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013938:	b292      	uxth	r2, r2
 801393a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013940:	1c9a      	adds	r2, r3, #2
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801394a:	b29b      	uxth	r3, r3
 801394c:	3b01      	subs	r3, #1
 801394e:	b29a      	uxth	r2, r3
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013954:	2301      	movs	r3, #1
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013958:	f7f3 fb20 	bl	8006f9c <HAL_GetTick>
 801395c:	4602      	mov	r2, r0
 801395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013960:	1ad3      	subs	r3, r2, r3
 8013962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013964:	429a      	cmp	r2, r3
 8013966:	d807      	bhi.n	8013978 <HAL_SPI_TransmitReceive+0x1d8>
 8013968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801396e:	d003      	beq.n	8013978 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013970:	2303      	movs	r3, #3
 8013972:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013976:	e0a7      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801397c:	b29b      	uxth	r3, r3
 801397e:	2b00      	cmp	r3, #0
 8013980:	d1a6      	bne.n	80138d0 <HAL_SPI_TransmitReceive+0x130>
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013986:	b29b      	uxth	r3, r3
 8013988:	2b00      	cmp	r3, #0
 801398a:	d1a1      	bne.n	80138d0 <HAL_SPI_TransmitReceive+0x130>
 801398c:	e07c      	b.n	8013a88 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d002      	beq.n	801399c <HAL_SPI_TransmitReceive+0x1fc>
 8013996:	8b7b      	ldrh	r3, [r7, #26]
 8013998:	2b01      	cmp	r3, #1
 801399a:	d16b      	bne.n	8013a74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	330c      	adds	r3, #12
 80139a6:	7812      	ldrb	r2, [r2, #0]
 80139a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ae:	1c5a      	adds	r2, r3, #1
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	3b01      	subs	r3, #1
 80139bc:	b29a      	uxth	r2, r3
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80139c2:	e057      	b.n	8013a74 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	689b      	ldr	r3, [r3, #8]
 80139ca:	f003 0302 	and.w	r3, r3, #2
 80139ce:	2b02      	cmp	r3, #2
 80139d0:	d11c      	bne.n	8013a0c <HAL_SPI_TransmitReceive+0x26c>
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d017      	beq.n	8013a0c <HAL_SPI_TransmitReceive+0x26c>
 80139dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d114      	bne.n	8013a0c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139e6:	68fb      	ldr	r3, [r7, #12]
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	330c      	adds	r3, #12
 80139ec:	7812      	ldrb	r2, [r2, #0]
 80139ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139f4:	1c5a      	adds	r2, r3, #1
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	3b01      	subs	r3, #1
 8013a02:	b29a      	uxth	r2, r3
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	689b      	ldr	r3, [r3, #8]
 8013a12:	f003 0301 	and.w	r3, r3, #1
 8013a16:	2b01      	cmp	r3, #1
 8013a18:	d119      	bne.n	8013a4e <HAL_SPI_TransmitReceive+0x2ae>
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a1e:	b29b      	uxth	r3, r3
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d014      	beq.n	8013a4e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	68da      	ldr	r2, [r3, #12]
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a2e:	b2d2      	uxtb	r2, r2
 8013a30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a36:	1c5a      	adds	r2, r3, #1
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a40:	b29b      	uxth	r3, r3
 8013a42:	3b01      	subs	r3, #1
 8013a44:	b29a      	uxth	r2, r3
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013a4e:	f7f3 faa5 	bl	8006f9c <HAL_GetTick>
 8013a52:	4602      	mov	r2, r0
 8013a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a56:	1ad3      	subs	r3, r2, r3
 8013a58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d803      	bhi.n	8013a66 <HAL_SPI_TransmitReceive+0x2c6>
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a64:	d102      	bne.n	8013a6c <HAL_SPI_TransmitReceive+0x2cc>
 8013a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d103      	bne.n	8013a74 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013a6c:	2303      	movs	r3, #3
 8013a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013a72:	e029      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d1a2      	bne.n	80139c4 <HAL_SPI_TransmitReceive+0x224>
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d19d      	bne.n	80139c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f001 fc8a 	bl	80153a6 <SPI_EndRxTxTransaction>
 8013a92:	4603      	mov	r3, r0
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d006      	beq.n	8013aa6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013a98:	2301      	movs	r3, #1
 8013a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2220      	movs	r2, #32
 8013aa2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013aa4:	e010      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	689b      	ldr	r3, [r3, #8]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d10b      	bne.n	8013ac6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013aae:	2300      	movs	r3, #0
 8013ab0:	617b      	str	r3, [r7, #20]
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	617b      	str	r3, [r7, #20]
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	689b      	ldr	r3, [r3, #8]
 8013ac0:	617b      	str	r3, [r7, #20]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	e000      	b.n	8013ac8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2201      	movs	r2, #1
 8013acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013ad8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3730      	adds	r7, #48	; 0x30
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013ae4:	b480      	push	{r7}
 8013ae6:	b087      	sub	sp, #28
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	60b9      	str	r1, [r7, #8]
 8013aee:	4613      	mov	r3, r2
 8013af0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013af2:	2300      	movs	r3, #0
 8013af4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013afc:	2b01      	cmp	r3, #1
 8013afe:	d101      	bne.n	8013b04 <HAL_SPI_Transmit_IT+0x20>
 8013b00:	2302      	movs	r3, #2
 8013b02:	e06f      	b.n	8013be4 <HAL_SPI_Transmit_IT+0x100>
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2201      	movs	r2, #1
 8013b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8013b0c:	68bb      	ldr	r3, [r7, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d002      	beq.n	8013b18 <HAL_SPI_Transmit_IT+0x34>
 8013b12:	88fb      	ldrh	r3, [r7, #6]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d102      	bne.n	8013b1e <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013b1c:	e05d      	b.n	8013bda <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d002      	beq.n	8013b30 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8013b2a:	2302      	movs	r3, #2
 8013b2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013b2e:	e054      	b.n	8013bda <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2203      	movs	r2, #3
 8013b34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	68ba      	ldr	r2, [r7, #8]
 8013b42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	88fa      	ldrh	r2, [r7, #6]
 8013b48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	88fa      	ldrh	r2, [r7, #6]
 8013b4e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2200      	movs	r2, #0
 8013b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	2200      	movs	r2, #0
 8013b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	68db      	ldr	r3, [r3, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d003      	beq.n	8013b78 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	4a1f      	ldr	r2, [pc, #124]	; (8013bf0 <HAL_SPI_Transmit_IT+0x10c>)
 8013b74:	645a      	str	r2, [r3, #68]	; 0x44
 8013b76:	e002      	b.n	8013b7e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	4a1e      	ldr	r2, [pc, #120]	; (8013bf4 <HAL_SPI_Transmit_IT+0x110>)
 8013b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	689b      	ldr	r3, [r3, #8]
 8013b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013b86:	d10f      	bne.n	8013ba8 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b96:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	681b      	ldr	r3, [r3, #0]
 8013b9c:	681a      	ldr	r2, [r3, #0]
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013ba6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	685a      	ldr	r2, [r3, #4]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013bb6:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	681b      	ldr	r3, [r3, #0]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bc2:	2b40      	cmp	r3, #64	; 0x40
 8013bc4:	d008      	beq.n	8013bd8 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	681b      	ldr	r3, [r3, #0]
 8013bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013bd4:	601a      	str	r2, [r3, #0]
 8013bd6:	e000      	b.n	8013bda <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8013bd8:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	371c      	adds	r7, #28
 8013be8:	46bd      	mov	sp, r7
 8013bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bee:	4770      	bx	lr
 8013bf0:	08015189 	.word	0x08015189
 8013bf4:	08015143 	.word	0x08015143

08013bf8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	4613      	mov	r3, r2
 8013c04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013c06:	2300      	movs	r3, #0
 8013c08:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	689b      	ldr	r3, [r3, #8]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d110      	bne.n	8013c34 <HAL_SPI_Receive_IT+0x3c>
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	685b      	ldr	r3, [r3, #4]
 8013c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c1a:	d10b      	bne.n	8013c34 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2204      	movs	r2, #4
 8013c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8013c24:	88fb      	ldrh	r3, [r7, #6]
 8013c26:	68ba      	ldr	r2, [r7, #8]
 8013c28:	68b9      	ldr	r1, [r7, #8]
 8013c2a:	68f8      	ldr	r0, [r7, #12]
 8013c2c:	f000 f882 	bl	8013d34 <HAL_SPI_TransmitReceive_IT>
 8013c30:	4603      	mov	r3, r0
 8013c32:	e076      	b.n	8013d22 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013c3a:	2b01      	cmp	r3, #1
 8013c3c:	d101      	bne.n	8013c42 <HAL_SPI_Receive_IT+0x4a>
 8013c3e:	2302      	movs	r3, #2
 8013c40:	e06f      	b.n	8013d22 <HAL_SPI_Receive_IT+0x12a>
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2201      	movs	r2, #1
 8013c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c50:	b2db      	uxtb	r3, r3
 8013c52:	2b01      	cmp	r3, #1
 8013c54:	d002      	beq.n	8013c5c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8013c56:	2302      	movs	r3, #2
 8013c58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c5a:	e05d      	b.n	8013d18 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d002      	beq.n	8013c68 <HAL_SPI_Receive_IT+0x70>
 8013c62:	88fb      	ldrh	r3, [r7, #6]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d102      	bne.n	8013c6e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8013c68:	2301      	movs	r3, #1
 8013c6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013c6c:	e054      	b.n	8013d18 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	2204      	movs	r2, #4
 8013c72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	68ba      	ldr	r2, [r7, #8]
 8013c80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	88fa      	ldrh	r2, [r7, #6]
 8013c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	88fa      	ldrh	r2, [r7, #6]
 8013c8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2200      	movs	r2, #0
 8013c92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	2200      	movs	r2, #0
 8013c98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	68db      	ldr	r3, [r3, #12]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d003      	beq.n	8013cb6 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	4a1e      	ldr	r2, [pc, #120]	; (8013d2c <HAL_SPI_Receive_IT+0x134>)
 8013cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8013cb4:	e002      	b.n	8013cbc <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	4a1d      	ldr	r2, [pc, #116]	; (8013d30 <HAL_SPI_Receive_IT+0x138>)
 8013cba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013cc4:	d10f      	bne.n	8013ce6 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	681a      	ldr	r2, [r3, #0]
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013cd4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	681a      	ldr	r2, [r3, #0]
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013ce4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	685a      	ldr	r2, [r3, #4]
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8013cf4:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d00:	2b40      	cmp	r3, #64	; 0x40
 8013d02:	d008      	beq.n	8013d16 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	681a      	ldr	r2, [r3, #0]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013d12:	601a      	str	r2, [r3, #0]
 8013d14:	e000      	b.n	8013d18 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8013d16:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3718      	adds	r7, #24
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	080150fd 	.word	0x080150fd
 8013d30:	080150b3 	.word	0x080150b3

08013d34 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b087      	sub	sp, #28
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
 8013d40:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8013d42:	2300      	movs	r3, #0
 8013d44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013d4c:	2b01      	cmp	r3, #1
 8013d4e:	d101      	bne.n	8013d54 <HAL_SPI_TransmitReceive_IT+0x20>
 8013d50:	2302      	movs	r3, #2
 8013d52:	e075      	b.n	8013e40 <HAL_SPI_TransmitReceive_IT+0x10c>
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2201      	movs	r2, #1
 8013d58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013d62:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	685b      	ldr	r3, [r3, #4]
 8013d68:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013d6a:	7dbb      	ldrb	r3, [r7, #22]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d00d      	beq.n	8013d8c <HAL_SPI_TransmitReceive_IT+0x58>
 8013d70:	693b      	ldr	r3, [r7, #16]
 8013d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d76:	d106      	bne.n	8013d86 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d102      	bne.n	8013d86 <HAL_SPI_TransmitReceive_IT+0x52>
 8013d80:	7dbb      	ldrb	r3, [r7, #22]
 8013d82:	2b04      	cmp	r3, #4
 8013d84:	d002      	beq.n	8013d8c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013d86:	2302      	movs	r3, #2
 8013d88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013d8a:	e054      	b.n	8013e36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013d8c:	68bb      	ldr	r3, [r7, #8]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d005      	beq.n	8013d9e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d002      	beq.n	8013d9e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013d98:	887b      	ldrh	r3, [r7, #2]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d102      	bne.n	8013da4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8013d9e:	2301      	movs	r3, #1
 8013da0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013da2:	e048      	b.n	8013e36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013daa:	b2db      	uxtb	r3, r3
 8013dac:	2b04      	cmp	r3, #4
 8013dae:	d003      	beq.n	8013db8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	2205      	movs	r2, #5
 8013db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013db8:	68fb      	ldr	r3, [r7, #12]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	68ba      	ldr	r2, [r7, #8]
 8013dc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	887a      	ldrh	r2, [r7, #2]
 8013dc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	887a      	ldrh	r2, [r7, #2]
 8013dce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	887a      	ldrh	r2, [r7, #2]
 8013dda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	887a      	ldrh	r2, [r7, #2]
 8013de0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d006      	beq.n	8013df8 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	4a17      	ldr	r2, [pc, #92]	; (8013e4c <HAL_SPI_TransmitReceive_IT+0x118>)
 8013dee:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	4a17      	ldr	r2, [pc, #92]	; (8013e50 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8013df4:	645a      	str	r2, [r3, #68]	; 0x44
 8013df6:	e005      	b.n	8013e04 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	4a16      	ldr	r2, [pc, #88]	; (8013e54 <HAL_SPI_TransmitReceive_IT+0x120>)
 8013dfc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	4a15      	ldr	r2, [pc, #84]	; (8013e58 <HAL_SPI_TransmitReceive_IT+0x124>)
 8013e02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	685a      	ldr	r2, [r3, #4]
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8013e12:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e1e:	2b40      	cmp	r3, #64	; 0x40
 8013e20:	d008      	beq.n	8013e34 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	681a      	ldr	r2, [r3, #0]
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e30:	601a      	str	r2, [r3, #0]
 8013e32:	e000      	b.n	8013e36 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8013e34:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e40:	4618      	mov	r0, r3
 8013e42:	371c      	adds	r7, #28
 8013e44:	46bd      	mov	sp, r7
 8013e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4a:	4770      	bx	lr
 8013e4c:	08014ff5 	.word	0x08014ff5
 8013e50:	08015055 	.word	0x08015055
 8013e54:	08014f31 	.word	0x08014f31
 8013e58:	08014f95 	.word	0x08014f95

08013e5c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013e5c:	b580      	push	{r7, lr}
 8013e5e:	b086      	sub	sp, #24
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	60f8      	str	r0, [r7, #12]
 8013e64:	60b9      	str	r1, [r7, #8]
 8013e66:	4613      	mov	r3, r2
 8013e68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d101      	bne.n	8013e7c <HAL_SPI_Transmit_DMA+0x20>
 8013e78:	2302      	movs	r3, #2
 8013e7a:	e09b      	b.n	8013fb4 <HAL_SPI_Transmit_DMA+0x158>
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	2201      	movs	r2, #1
 8013e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013e84:	68fb      	ldr	r3, [r7, #12]
 8013e86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	2b01      	cmp	r3, #1
 8013e8e:	d002      	beq.n	8013e96 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013e90:	2302      	movs	r3, #2
 8013e92:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013e94:	e089      	b.n	8013faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013e96:	68bb      	ldr	r3, [r7, #8]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d002      	beq.n	8013ea2 <HAL_SPI_Transmit_DMA+0x46>
 8013e9c:	88fb      	ldrh	r3, [r7, #6]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d102      	bne.n	8013ea8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013ea6:	e080      	b.n	8013faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2203      	movs	r2, #3
 8013eac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	68ba      	ldr	r2, [r7, #8]
 8013eba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	88fa      	ldrh	r2, [r7, #6]
 8013ec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	88fa      	ldrh	r2, [r7, #6]
 8013ec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2200      	movs	r2, #0
 8013ecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2200      	movs	r2, #0
 8013ede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	2200      	movs	r2, #0
 8013ee4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	689b      	ldr	r3, [r3, #8]
 8013eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013eee:	d10f      	bne.n	8013f10 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	681a      	ldr	r2, [r3, #0]
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013efe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	681a      	ldr	r2, [r3, #0]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013f0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f14:	4a29      	ldr	r2, [pc, #164]	; (8013fbc <HAL_SPI_Transmit_DMA+0x160>)
 8013f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f1c:	4a28      	ldr	r2, [pc, #160]	; (8013fc0 <HAL_SPI_Transmit_DMA+0x164>)
 8013f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f24:	4a27      	ldr	r2, [pc, #156]	; (8013fc4 <HAL_SPI_Transmit_DMA+0x168>)
 8013f26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f38:	4619      	mov	r1, r3
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	330c      	adds	r3, #12
 8013f40:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013f46:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013f48:	f7f4 fa91 	bl	800846e <HAL_DMA_Start_IT>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00c      	beq.n	8013f6c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f56:	f043 0210 	orr.w	r2, r3, #16
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013f5e:	2301      	movs	r3, #1
 8013f60:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2201      	movs	r2, #1
 8013f66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013f6a:	e01e      	b.n	8013faa <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013f76:	2b40      	cmp	r3, #64	; 0x40
 8013f78:	d007      	beq.n	8013f8a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f88:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	685a      	ldr	r2, [r3, #4]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	f042 0220 	orr.w	r2, r2, #32
 8013f98:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	685a      	ldr	r2, [r3, #4]
 8013fa0:	68fb      	ldr	r3, [r7, #12]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	f042 0202 	orr.w	r2, r2, #2
 8013fa8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	2200      	movs	r2, #0
 8013fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	3718      	adds	r7, #24
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	08014ce1 	.word	0x08014ce1
 8013fc0:	08014b01 	.word	0x08014b01
 8013fc4:	08014d35 	.word	0x08014d35

08013fc8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b086      	sub	sp, #24
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	60f8      	str	r0, [r7, #12]
 8013fd0:	60b9      	str	r1, [r7, #8]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	689b      	ldr	r3, [r3, #8]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d110      	bne.n	8014004 <HAL_SPI_Receive_DMA+0x3c>
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	685b      	ldr	r3, [r3, #4]
 8013fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013fea:	d10b      	bne.n	8014004 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013fec:	68fb      	ldr	r3, [r7, #12]
 8013fee:	2204      	movs	r2, #4
 8013ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013ff4:	88fb      	ldrh	r3, [r7, #6]
 8013ff6:	68ba      	ldr	r2, [r7, #8]
 8013ff8:	68b9      	ldr	r1, [r7, #8]
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f000 f8ac 	bl	8014158 <HAL_SPI_TransmitReceive_DMA>
 8014000:	4603      	mov	r3, r0
 8014002:	e09f      	b.n	8014144 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801400a:	2b01      	cmp	r3, #1
 801400c:	d101      	bne.n	8014012 <HAL_SPI_Receive_DMA+0x4a>
 801400e:	2302      	movs	r3, #2
 8014010:	e098      	b.n	8014144 <HAL_SPI_Receive_DMA+0x17c>
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	2201      	movs	r2, #1
 8014016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014020:	b2db      	uxtb	r3, r3
 8014022:	2b01      	cmp	r3, #1
 8014024:	d002      	beq.n	801402c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8014026:	2302      	movs	r3, #2
 8014028:	75fb      	strb	r3, [r7, #23]
    goto error;
 801402a:	e086      	b.n	801413a <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d002      	beq.n	8014038 <HAL_SPI_Receive_DMA+0x70>
 8014032:	88fb      	ldrh	r3, [r7, #6]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d102      	bne.n	801403e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8014038:	2301      	movs	r3, #1
 801403a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801403c:	e07d      	b.n	801413a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	2204      	movs	r2, #4
 8014042:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	2200      	movs	r2, #0
 801404a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	68ba      	ldr	r2, [r7, #8]
 8014050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	88fa      	ldrh	r2, [r7, #6]
 8014056:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014058:	68fb      	ldr	r3, [r7, #12]
 801405a:	88fa      	ldrh	r2, [r7, #6]
 801405c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	2200      	movs	r2, #0
 8014062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	2200      	movs	r2, #0
 8014068:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2200      	movs	r2, #0
 801406e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	2200      	movs	r2, #0
 8014074:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014076:	68fb      	ldr	r3, [r7, #12]
 8014078:	689b      	ldr	r3, [r3, #8]
 801407a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801407e:	d10f      	bne.n	80140a0 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801408e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801409e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140a4:	4a29      	ldr	r2, [pc, #164]	; (801414c <HAL_SPI_Receive_DMA+0x184>)
 80140a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80140a8:	68fb      	ldr	r3, [r7, #12]
 80140aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140ac:	4a28      	ldr	r2, [pc, #160]	; (8014150 <HAL_SPI_Receive_DMA+0x188>)
 80140ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140b4:	4a27      	ldr	r2, [pc, #156]	; (8014154 <HAL_SPI_Receive_DMA+0x18c>)
 80140b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140bc:	2200      	movs	r2, #0
 80140be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	330c      	adds	r3, #12
 80140ca:	4619      	mov	r1, r3
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140d0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80140d8:	f7f4 f9c9 	bl	800846e <HAL_DMA_Start_IT>
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d00c      	beq.n	80140fc <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140e6:	f043 0210 	orr.w	r2, r3, #16
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80140ee:	2301      	movs	r3, #1
 80140f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2201      	movs	r2, #1
 80140f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80140fa:	e01e      	b.n	801413a <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014106:	2b40      	cmp	r3, #64	; 0x40
 8014108:	d007      	beq.n	801411a <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	681a      	ldr	r2, [r3, #0]
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014118:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	685a      	ldr	r2, [r3, #4]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	f042 0220 	orr.w	r2, r2, #32
 8014128:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	685a      	ldr	r2, [r3, #4]
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	f042 0201 	orr.w	r2, r2, #1
 8014138:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	2200      	movs	r2, #0
 801413e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8014142:	7dfb      	ldrb	r3, [r7, #23]
}
 8014144:	4618      	mov	r0, r3
 8014146:	3718      	adds	r7, #24
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}
 801414c:	08014cfd 	.word	0x08014cfd
 8014150:	08014ba9 	.word	0x08014ba9
 8014154:	08014d35 	.word	0x08014d35

08014158 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af00      	add	r7, sp, #0
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
 8014164:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8014166:	2300      	movs	r3, #0
 8014168:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014170:	2b01      	cmp	r3, #1
 8014172:	d101      	bne.n	8014178 <HAL_SPI_TransmitReceive_DMA+0x20>
 8014174:	2302      	movs	r3, #2
 8014176:	e0e3      	b.n	8014340 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	2201      	movs	r2, #1
 801417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8014180:	68fb      	ldr	r3, [r7, #12]
 8014182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014186:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 801418e:	7dbb      	ldrb	r3, [r7, #22]
 8014190:	2b01      	cmp	r3, #1
 8014192:	d00d      	beq.n	80141b0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801419a:	d106      	bne.n	80141aa <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	689b      	ldr	r3, [r3, #8]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d102      	bne.n	80141aa <HAL_SPI_TransmitReceive_DMA+0x52>
 80141a4:	7dbb      	ldrb	r3, [r7, #22]
 80141a6:	2b04      	cmp	r3, #4
 80141a8:	d002      	beq.n	80141b0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80141aa:	2302      	movs	r3, #2
 80141ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 80141ae:	e0c2      	b.n	8014336 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d005      	beq.n	80141c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d002      	beq.n	80141c2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80141bc:	887b      	ldrh	r3, [r7, #2]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d102      	bne.n	80141c8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80141c2:	2301      	movs	r3, #1
 80141c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80141c6:	e0b6      	b.n	8014336 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80141ce:	b2db      	uxtb	r3, r3
 80141d0:	2b04      	cmp	r3, #4
 80141d2:	d003      	beq.n	80141dc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	2205      	movs	r2, #5
 80141d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	2200      	movs	r2, #0
 80141e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	68ba      	ldr	r2, [r7, #8]
 80141e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	887a      	ldrh	r2, [r7, #2]
 80141ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	887a      	ldrh	r2, [r7, #2]
 80141f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	687a      	ldr	r2, [r7, #4]
 80141f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80141fa:	68fb      	ldr	r3, [r7, #12]
 80141fc:	887a      	ldrh	r2, [r7, #2]
 80141fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	887a      	ldrh	r2, [r7, #2]
 8014204:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2200      	movs	r2, #0
 801420a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	2200      	movs	r2, #0
 8014210:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014212:	68fb      	ldr	r3, [r7, #12]
 8014214:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014218:	b2db      	uxtb	r3, r3
 801421a:	2b04      	cmp	r3, #4
 801421c:	d108      	bne.n	8014230 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014222:	4a49      	ldr	r2, [pc, #292]	; (8014348 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8014224:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801422a:	4a48      	ldr	r2, [pc, #288]	; (801434c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 801422c:	63da      	str	r2, [r3, #60]	; 0x3c
 801422e:	e007      	b.n	8014240 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014234:	4a46      	ldr	r2, [pc, #280]	; (8014350 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8014236:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8014238:	68fb      	ldr	r3, [r7, #12]
 801423a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801423c:	4a45      	ldr	r2, [pc, #276]	; (8014354 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 801423e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014244:	4a44      	ldr	r2, [pc, #272]	; (8014358 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8014246:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801424c:	2200      	movs	r2, #0
 801424e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	330c      	adds	r3, #12
 801425a:	4619      	mov	r1, r3
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014260:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014266:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8014268:	f7f4 f901 	bl	800846e <HAL_DMA_Start_IT>
 801426c:	4603      	mov	r3, r0
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00c      	beq.n	801428c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014276:	f043 0210 	orr.w	r2, r3, #16
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801427e:	2301      	movs	r3, #1
 8014280:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	2201      	movs	r2, #1
 8014286:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801428a:	e054      	b.n	8014336 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	685a      	ldr	r2, [r3, #4]
 8014292:	68fb      	ldr	r3, [r7, #12]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	f042 0201 	orr.w	r2, r2, #1
 801429a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142a0:	2200      	movs	r2, #0
 80142a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142a8:	2200      	movs	r2, #0
 80142aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142b0:	2200      	movs	r2, #0
 80142b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80142b8:	2200      	movs	r2, #0
 80142ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80142c0:	68fb      	ldr	r3, [r7, #12]
 80142c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142c4:	4619      	mov	r1, r3
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	330c      	adds	r3, #12
 80142cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80142d4:	f7f4 f8cb 	bl	800846e <HAL_DMA_Start_IT>
 80142d8:	4603      	mov	r3, r0
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00c      	beq.n	80142f8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142e2:	f043 0210 	orr.w	r2, r3, #16
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80142ea:	2301      	movs	r3, #1
 80142ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	2201      	movs	r2, #1
 80142f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80142f6:	e01e      	b.n	8014336 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014302:	2b40      	cmp	r3, #64	; 0x40
 8014304:	d007      	beq.n	8014316 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	681a      	ldr	r2, [r3, #0]
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014314:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	685a      	ldr	r2, [r3, #4]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	f042 0220 	orr.w	r2, r2, #32
 8014324:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	685a      	ldr	r2, [r3, #4]
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	f042 0202 	orr.w	r2, r2, #2
 8014334:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2200      	movs	r2, #0
 801433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801433e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014340:	4618      	mov	r0, r3
 8014342:	3718      	adds	r7, #24
 8014344:	46bd      	mov	sp, r7
 8014346:	bd80      	pop	{r7, pc}
 8014348:	08014cfd 	.word	0x08014cfd
 801434c:	08014ba9 	.word	0x08014ba9
 8014350:	08014d19 	.word	0x08014d19
 8014354:	08014c51 	.word	0x08014c51
 8014358:	08014d35 	.word	0x08014d35

0801435c <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b088      	sub	sp, #32
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8014364:	2300      	movs	r3, #0
 8014366:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014368:	4b6e      	ldr	r3, [pc, #440]	; (8014524 <HAL_SPI_Abort+0x1c8>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	4a6e      	ldr	r2, [pc, #440]	; (8014528 <HAL_SPI_Abort+0x1cc>)
 801436e:	fba2 2303 	umull	r2, r3, r2, r3
 8014372:	0a5b      	lsrs	r3, r3, #9
 8014374:	2264      	movs	r2, #100	; 0x64
 8014376:	fb02 f303 	mul.w	r3, r2, r3
 801437a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	685a      	ldr	r2, [r3, #4]
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	f022 0220 	bic.w	r2, r2, #32
 801438e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	685b      	ldr	r3, [r3, #4]
 8014396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801439a:	2b80      	cmp	r3, #128	; 0x80
 801439c:	d117      	bne.n	80143ce <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	4a62      	ldr	r2, [pc, #392]	; (801452c <HAL_SPI_Abort+0x1d0>)
 80143a2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80143a4:	69bb      	ldr	r3, [r7, #24]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d106      	bne.n	80143b8 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80143b6:	e008      	b.n	80143ca <HAL_SPI_Abort+0x6e>
      }
      count--;
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	3b01      	subs	r3, #1
 80143bc:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	2b07      	cmp	r3, #7
 80143c8:	d1ec      	bne.n	80143a4 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	685b      	ldr	r3, [r3, #4]
 80143d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143d8:	2b40      	cmp	r3, #64	; 0x40
 80143da:	d117      	bne.n	801440c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	4a54      	ldr	r2, [pc, #336]	; (8014530 <HAL_SPI_Abort+0x1d4>)
 80143e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d106      	bne.n	80143f6 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80143f4:	e008      	b.n	8014408 <HAL_SPI_Abort+0xac>
      }
      count--;
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	3b01      	subs	r3, #1
 80143fa:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014402:	b2db      	uxtb	r3, r3
 8014404:	2b07      	cmp	r3, #7
 8014406:	d1ec      	bne.n	80143e2 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	685b      	ldr	r3, [r3, #4]
 8014412:	f003 0302 	and.w	r3, r3, #2
 8014416:	2b02      	cmp	r3, #2
 8014418:	d12e      	bne.n	8014478 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801441e:	2b00      	cmp	r3, #0
 8014420:	d02a      	beq.n	8014478 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014426:	2200      	movs	r2, #0
 8014428:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801442e:	4618      	mov	r0, r3
 8014430:	f7f4 f875 	bl	800851e <HAL_DMA_Abort>
 8014434:	4603      	mov	r3, r0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d002      	beq.n	8014440 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2240      	movs	r2, #64	; 0x40
 801443e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	685a      	ldr	r2, [r3, #4]
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f022 0202 	bic.w	r2, r2, #2
 801444e:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8014450:	69bb      	ldr	r3, [r7, #24]
 8014452:	2b00      	cmp	r3, #0
 8014454:	d106      	bne.n	8014464 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801445a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8014462:	e009      	b.n	8014478 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8014464:	69bb      	ldr	r3, [r7, #24]
 8014466:	3b01      	subs	r3, #1
 8014468:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	f003 0302 	and.w	r3, r3, #2
 8014474:	2b00      	cmp	r3, #0
 8014476:	d0eb      	beq.n	8014450 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	f003 0301 	and.w	r3, r3, #1
 8014482:	2b01      	cmp	r3, #1
 8014484:	d122      	bne.n	80144cc <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801448a:	2b00      	cmp	r3, #0
 801448c:	d01e      	beq.n	80144cc <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014492:	2200      	movs	r2, #0
 8014494:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801449a:	4618      	mov	r0, r3
 801449c:	f7f4 f83f 	bl	800851e <HAL_DMA_Abort>
 80144a0:	4603      	mov	r3, r0
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d002      	beq.n	80144ac <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	2240      	movs	r2, #64	; 0x40
 80144aa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80144ba:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	685a      	ldr	r2, [r3, #4]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	f022 0201 	bic.w	r2, r2, #1
 80144ca:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	2200      	movs	r2, #0
 80144d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2200      	movs	r2, #0
 80144d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144dc:	2b40      	cmp	r3, #64	; 0x40
 80144de:	d102      	bne.n	80144e6 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80144e0:	2301      	movs	r3, #1
 80144e2:	77fb      	strb	r3, [r7, #31]
 80144e4:	e002      	b.n	80144ec <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80144ec:	2300      	movs	r3, #0
 80144ee:	60fb      	str	r3, [r7, #12]
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	60fb      	str	r3, [r7, #12]
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	689b      	ldr	r3, [r3, #8]
 80144fe:	60fb      	str	r3, [r7, #12]
 8014500:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014502:	2300      	movs	r3, #0
 8014504:	613b      	str	r3, [r7, #16]
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	689b      	ldr	r3, [r3, #8]
 801450c:	613b      	str	r3, [r7, #16]
 801450e:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	2201      	movs	r2, #1
 8014514:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8014518:	7ffb      	ldrb	r3, [r7, #31]
}
 801451a:	4618      	mov	r0, r3
 801451c:	3720      	adds	r7, #32
 801451e:	46bd      	mov	sp, r7
 8014520:	bd80      	pop	{r7, pc}
 8014522:	bf00      	nop
 8014524:	20000058 	.word	0x20000058
 8014528:	057619f1 	.word	0x057619f1
 801452c:	080156e1 	.word	0x080156e1
 8014530:	08015651 	.word	0x08015651

08014534 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b088      	sub	sp, #32
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8014540:	2301      	movs	r3, #1
 8014542:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014544:	4b72      	ldr	r3, [pc, #456]	; (8014710 <HAL_SPI_Abort_IT+0x1dc>)
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4a72      	ldr	r2, [pc, #456]	; (8014714 <HAL_SPI_Abort_IT+0x1e0>)
 801454a:	fba2 2303 	umull	r2, r3, r2, r3
 801454e:	0a5b      	lsrs	r3, r3, #9
 8014550:	2264      	movs	r2, #100	; 0x64
 8014552:	fb02 f303 	mul.w	r3, r2, r3
 8014556:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	685a      	ldr	r2, [r3, #4]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	f022 0220 	bic.w	r2, r2, #32
 801456a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	685b      	ldr	r3, [r3, #4]
 8014572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014576:	2b80      	cmp	r3, #128	; 0x80
 8014578:	d117      	bne.n	80145aa <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	4a66      	ldr	r2, [pc, #408]	; (8014718 <HAL_SPI_Abort_IT+0x1e4>)
 801457e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801458a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8014592:	e008      	b.n	80145a6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8014594:	697b      	ldr	r3, [r7, #20]
 8014596:	3b01      	subs	r3, #1
 8014598:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145a0:	b2db      	uxtb	r3, r3
 80145a2:	2b07      	cmp	r3, #7
 80145a4:	d1ec      	bne.n	8014580 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 80145a6:	693b      	ldr	r3, [r7, #16]
 80145a8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80145b4:	2b40      	cmp	r3, #64	; 0x40
 80145b6:	d117      	bne.n	80145e8 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	4a58      	ldr	r2, [pc, #352]	; (801471c <HAL_SPI_Abort_IT+0x1e8>)
 80145bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d106      	bne.n	80145d2 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80145d0:	e008      	b.n	80145e4 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 80145d2:	697b      	ldr	r3, [r7, #20]
 80145d4:	3b01      	subs	r3, #1
 80145d6:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80145de:	b2db      	uxtb	r3, r3
 80145e0:	2b07      	cmp	r3, #7
 80145e2:	d1ec      	bne.n	80145be <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 80145e4:	693b      	ldr	r3, [r7, #16]
 80145e6:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d00f      	beq.n	8014610 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	685b      	ldr	r3, [r3, #4]
 80145f6:	f003 0302 	and.w	r3, r3, #2
 80145fa:	2b02      	cmp	r3, #2
 80145fc:	d104      	bne.n	8014608 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014602:	4a47      	ldr	r2, [pc, #284]	; (8014720 <HAL_SPI_Abort_IT+0x1ec>)
 8014604:	651a      	str	r2, [r3, #80]	; 0x50
 8014606:	e003      	b.n	8014610 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801460c:	2200      	movs	r2, #0
 801460e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014614:	2b00      	cmp	r3, #0
 8014616:	d00f      	beq.n	8014638 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	f003 0301 	and.w	r3, r3, #1
 8014622:	2b01      	cmp	r3, #1
 8014624:	d104      	bne.n	8014630 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801462a:	4a3e      	ldr	r2, [pc, #248]	; (8014724 <HAL_SPI_Abort_IT+0x1f0>)
 801462c:	651a      	str	r2, [r3, #80]	; 0x50
 801462e:	e003      	b.n	8014638 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014634:	2200      	movs	r2, #0
 8014636:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	681b      	ldr	r3, [r3, #0]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	f003 0302 	and.w	r3, r3, #2
 8014642:	2b02      	cmp	r3, #2
 8014644:	d115      	bne.n	8014672 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801464a:	2b00      	cmp	r3, #0
 801464c:	d011      	beq.n	8014672 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014652:	4618      	mov	r0, r3
 8014654:	f7f3 ffd3 	bl	80085fe <HAL_DMA_Abort_IT>
 8014658:	4603      	mov	r3, r0
 801465a:	2b00      	cmp	r3, #0
 801465c:	d007      	beq.n	801466e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014662:	2200      	movs	r2, #0
 8014664:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2240      	movs	r2, #64	; 0x40
 801466a:	655a      	str	r2, [r3, #84]	; 0x54
 801466c:	e001      	b.n	8014672 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 801466e:	2300      	movs	r3, #0
 8014670:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	f003 0301 	and.w	r3, r3, #1
 801467c:	2b01      	cmp	r3, #1
 801467e:	d115      	bne.n	80146ac <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014684:	2b00      	cmp	r3, #0
 8014686:	d011      	beq.n	80146ac <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801468c:	4618      	mov	r0, r3
 801468e:	f7f3 ffb6 	bl	80085fe <HAL_DMA_Abort_IT>
 8014692:	4603      	mov	r3, r0
 8014694:	2b00      	cmp	r3, #0
 8014696:	d007      	beq.n	80146a8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801469c:	2200      	movs	r2, #0
 801469e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2240      	movs	r2, #64	; 0x40
 80146a4:	655a      	str	r2, [r3, #84]	; 0x54
 80146a6:	e001      	b.n	80146ac <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 80146a8:	2300      	movs	r3, #0
 80146aa:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 80146ac:	69bb      	ldr	r3, [r7, #24]
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d128      	bne.n	8014704 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	2200      	movs	r2, #0
 80146b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146c2:	2b40      	cmp	r3, #64	; 0x40
 80146c4:	d102      	bne.n	80146cc <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 80146c6:	2301      	movs	r3, #1
 80146c8:	77fb      	strb	r3, [r7, #31]
 80146ca:	e002      	b.n	80146d2 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	2200      	movs	r2, #0
 80146d0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146d2:	2300      	movs	r3, #0
 80146d4:	60bb      	str	r3, [r7, #8]
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	68db      	ldr	r3, [r3, #12]
 80146dc:	60bb      	str	r3, [r7, #8]
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	681b      	ldr	r3, [r3, #0]
 80146e2:	689b      	ldr	r3, [r3, #8]
 80146e4:	60bb      	str	r3, [r7, #8]
 80146e6:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80146e8:	2300      	movs	r3, #0
 80146ea:	60fb      	str	r3, [r7, #12]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	689b      	ldr	r3, [r3, #8]
 80146f2:	60fb      	str	r3, [r7, #12]
 80146f4:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	2201      	movs	r2, #1
 80146fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 f9da 	bl	8014ab8 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8014704:	7ffb      	ldrb	r3, [r7, #31]
}
 8014706:	4618      	mov	r0, r3
 8014708:	3720      	adds	r7, #32
 801470a:	46bd      	mov	sp, r7
 801470c:	bd80      	pop	{r7, pc}
 801470e:	bf00      	nop
 8014710:	20000058 	.word	0x20000058
 8014714:	057619f1 	.word	0x057619f1
 8014718:	080156e1 	.word	0x080156e1
 801471c:	08015651 	.word	0x08015651
 8014720:	08014d9d 	.word	0x08014d9d
 8014724:	08014e71 	.word	0x08014e71

08014728 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8014728:	b480      	push	{r7}
 801472a:	b083      	sub	sp, #12
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8014736:	2b01      	cmp	r3, #1
 8014738:	d101      	bne.n	801473e <HAL_SPI_DMAPause+0x16>
 801473a:	2302      	movs	r3, #2
 801473c:	e010      	b.n	8014760 <HAL_SPI_DMAPause+0x38>
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2201      	movs	r2, #1
 8014742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	685a      	ldr	r2, [r3, #4]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	f022 0203 	bic.w	r2, r2, #3
 8014754:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	2200      	movs	r2, #0
 801475a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801475e:	2300      	movs	r3, #0
}
 8014760:	4618      	mov	r0, r3
 8014762:	370c      	adds	r7, #12
 8014764:	46bd      	mov	sp, r7
 8014766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476a:	4770      	bx	lr

0801476c <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 801476c:	b480      	push	{r7}
 801476e:	b083      	sub	sp, #12
 8014770:	af00      	add	r7, sp, #0
 8014772:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801477a:	2b01      	cmp	r3, #1
 801477c:	d101      	bne.n	8014782 <HAL_SPI_DMAResume+0x16>
 801477e:	2302      	movs	r3, #2
 8014780:	e010      	b.n	80147a4 <HAL_SPI_DMAResume+0x38>
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2201      	movs	r2, #1
 8014786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	685a      	ldr	r2, [r3, #4]
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	f042 0203 	orr.w	r2, r2, #3
 8014798:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	2200      	movs	r2, #0
 801479e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80147a2:	2300      	movs	r3, #0
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr

080147b0 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b084      	sub	sp, #16
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80147b8:	2300      	movs	r3, #0
 80147ba:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d00f      	beq.n	80147e4 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7f3 fea8 	bl	800851e <HAL_DMA_Abort>
 80147ce:	4603      	mov	r3, r0
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d007      	beq.n	80147e4 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147d8:	f043 0210 	orr.w	r2, r3, #16
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 80147e0:	2301      	movs	r3, #1
 80147e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d00f      	beq.n	801480c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147f0:	4618      	mov	r0, r3
 80147f2:	f7f3 fe94 	bl	800851e <HAL_DMA_Abort>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d007      	beq.n	801480c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014800:	f043 0210 	orr.w	r2, r3, #16
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8014808:	2301      	movs	r3, #1
 801480a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	685a      	ldr	r2, [r3, #4]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f022 0203 	bic.w	r2, r2, #3
 801481a:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2201      	movs	r2, #1
 8014820:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8014824:	7bfb      	ldrb	r3, [r7, #15]
}
 8014826:	4618      	mov	r0, r3
 8014828:	3710      	adds	r7, #16
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}

0801482e <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801482e:	b580      	push	{r7, lr}
 8014830:	b088      	sub	sp, #32
 8014832:	af00      	add	r7, sp, #0
 8014834:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	689b      	ldr	r3, [r3, #8]
 8014844:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	099b      	lsrs	r3, r3, #6
 801484a:	f003 0301 	and.w	r3, r3, #1
 801484e:	2b00      	cmp	r3, #0
 8014850:	d10f      	bne.n	8014872 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8014852:	69bb      	ldr	r3, [r7, #24]
 8014854:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8014858:	2b00      	cmp	r3, #0
 801485a:	d00a      	beq.n	8014872 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 801485c:	69fb      	ldr	r3, [r7, #28]
 801485e:	099b      	lsrs	r3, r3, #6
 8014860:	f003 0301 	and.w	r3, r3, #1
 8014864:	2b00      	cmp	r3, #0
 8014866:	d004      	beq.n	8014872 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801486c:	6878      	ldr	r0, [r7, #4]
 801486e:	4798      	blx	r3
    return;
 8014870:	e0d7      	b.n	8014a22 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8014872:	69bb      	ldr	r3, [r7, #24]
 8014874:	085b      	lsrs	r3, r3, #1
 8014876:	f003 0301 	and.w	r3, r3, #1
 801487a:	2b00      	cmp	r3, #0
 801487c:	d00a      	beq.n	8014894 <HAL_SPI_IRQHandler+0x66>
 801487e:	69fb      	ldr	r3, [r7, #28]
 8014880:	09db      	lsrs	r3, r3, #7
 8014882:	f003 0301 	and.w	r3, r3, #1
 8014886:	2b00      	cmp	r3, #0
 8014888:	d004      	beq.n	8014894 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801488e:	6878      	ldr	r0, [r7, #4]
 8014890:	4798      	blx	r3
    return;
 8014892:	e0c6      	b.n	8014a22 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8014894:	69bb      	ldr	r3, [r7, #24]
 8014896:	095b      	lsrs	r3, r3, #5
 8014898:	f003 0301 	and.w	r3, r3, #1
 801489c:	2b00      	cmp	r3, #0
 801489e:	d10c      	bne.n	80148ba <HAL_SPI_IRQHandler+0x8c>
 80148a0:	69bb      	ldr	r3, [r7, #24]
 80148a2:	099b      	lsrs	r3, r3, #6
 80148a4:	f003 0301 	and.w	r3, r3, #1
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d106      	bne.n	80148ba <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80148ac:	69bb      	ldr	r3, [r7, #24]
 80148ae:	0a1b      	lsrs	r3, r3, #8
 80148b0:	f003 0301 	and.w	r3, r3, #1
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 80b4 	beq.w	8014a22 <HAL_SPI_IRQHandler+0x1f4>
 80148ba:	69fb      	ldr	r3, [r7, #28]
 80148bc:	095b      	lsrs	r3, r3, #5
 80148be:	f003 0301 	and.w	r3, r3, #1
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	f000 80ad 	beq.w	8014a22 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80148c8:	69bb      	ldr	r3, [r7, #24]
 80148ca:	099b      	lsrs	r3, r3, #6
 80148cc:	f003 0301 	and.w	r3, r3, #1
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d023      	beq.n	801491c <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80148da:	b2db      	uxtb	r3, r3
 80148dc:	2b03      	cmp	r3, #3
 80148de:	d011      	beq.n	8014904 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80148e4:	f043 0204 	orr.w	r2, r3, #4
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80148ec:	2300      	movs	r3, #0
 80148ee:	60bb      	str	r3, [r7, #8]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	60bb      	str	r3, [r7, #8]
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	689b      	ldr	r3, [r3, #8]
 80148fe:	60bb      	str	r3, [r7, #8]
 8014900:	68bb      	ldr	r3, [r7, #8]
 8014902:	e00b      	b.n	801491c <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014904:	2300      	movs	r3, #0
 8014906:	60fb      	str	r3, [r7, #12]
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	60fb      	str	r3, [r7, #12]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	689b      	ldr	r3, [r3, #8]
 8014916:	60fb      	str	r3, [r7, #12]
 8014918:	68fb      	ldr	r3, [r7, #12]
        return;
 801491a:	e082      	b.n	8014a22 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801491c:	69bb      	ldr	r3, [r7, #24]
 801491e:	095b      	lsrs	r3, r3, #5
 8014920:	f003 0301 	and.w	r3, r3, #1
 8014924:	2b00      	cmp	r3, #0
 8014926:	d014      	beq.n	8014952 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801492c:	f043 0201 	orr.w	r2, r3, #1
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8014934:	2300      	movs	r3, #0
 8014936:	613b      	str	r3, [r7, #16]
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	689b      	ldr	r3, [r3, #8]
 801493e:	613b      	str	r3, [r7, #16]
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801494e:	601a      	str	r2, [r3, #0]
 8014950:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8014952:	69bb      	ldr	r3, [r7, #24]
 8014954:	0a1b      	lsrs	r3, r3, #8
 8014956:	f003 0301 	and.w	r3, r3, #1
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00c      	beq.n	8014978 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014962:	f043 0208 	orr.w	r2, r3, #8
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801496a:	2300      	movs	r3, #0
 801496c:	617b      	str	r3, [r7, #20]
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	689b      	ldr	r3, [r3, #8]
 8014974:	617b      	str	r3, [r7, #20]
 8014976:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801497c:	2b00      	cmp	r3, #0
 801497e:	d04f      	beq.n	8014a20 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	685a      	ldr	r2, [r3, #4]
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	681b      	ldr	r3, [r3, #0]
 801498a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801498e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2201      	movs	r2, #1
 8014994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	f003 0302 	and.w	r3, r3, #2
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d104      	bne.n	80149ac <HAL_SPI_IRQHandler+0x17e>
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	f003 0301 	and.w	r3, r3, #1
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d034      	beq.n	8014a16 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	685a      	ldr	r2, [r3, #4]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	f022 0203 	bic.w	r2, r2, #3
 80149ba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d011      	beq.n	80149e8 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149c8:	4a17      	ldr	r2, [pc, #92]	; (8014a28 <HAL_SPI_IRQHandler+0x1fa>)
 80149ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7f3 fe14 	bl	80085fe <HAL_DMA_Abort_IT>
 80149d6:	4603      	mov	r3, r0
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d005      	beq.n	80149e8 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d016      	beq.n	8014a1e <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149f4:	4a0c      	ldr	r2, [pc, #48]	; (8014a28 <HAL_SPI_IRQHandler+0x1fa>)
 80149f6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7f3 fdfe 	bl	80085fe <HAL_DMA_Abort_IT>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d00a      	beq.n	8014a1e <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8014a14:	e003      	b.n	8014a1e <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8014a16:	6878      	ldr	r0, [r7, #4]
 8014a18:	f000 f844 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8014a1c:	e000      	b.n	8014a20 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8014a1e:	bf00      	nop
    return;
 8014a20:	bf00      	nop
  }
}
 8014a22:	3720      	adds	r7, #32
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd80      	pop	{r7, pc}
 8014a28:	08014d75 	.word	0x08014d75

08014a2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b083      	sub	sp, #12
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8014a34:	bf00      	nop
 8014a36:	370c      	adds	r7, #12
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8014a48:	bf00      	nop
 8014a4a:	370c      	adds	r7, #12
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b083      	sub	sp, #12
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8014a5c:	bf00      	nop
 8014a5e:	370c      	adds	r7, #12
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr

08014a68 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b083      	sub	sp, #12
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8014a70:	bf00      	nop
 8014a72:	370c      	adds	r7, #12
 8014a74:	46bd      	mov	sp, r7
 8014a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7a:	4770      	bx	lr

08014a7c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a7c:	b480      	push	{r7}
 8014a7e:	b083      	sub	sp, #12
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014a84:	bf00      	nop
 8014a86:	370c      	adds	r7, #12
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8e:	4770      	bx	lr

08014a90 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014a90:	b480      	push	{r7}
 8014a92:	b083      	sub	sp, #12
 8014a94:	af00      	add	r7, sp, #0
 8014a96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014a98:	bf00      	nop
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8014aac:	bf00      	nop
 8014aae:	370c      	adds	r7, #12
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr

08014ab8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b083      	sub	sp, #12
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014ac0:	bf00      	nop
 8014ac2:	370c      	adds	r7, #12
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aca:	4770      	bx	lr

08014acc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8014acc:	b480      	push	{r7}
 8014ace:	b083      	sub	sp, #12
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014ada:	b2db      	uxtb	r3, r3
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	370c      	adds	r7, #12
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae6:	4770      	bx	lr

08014ae8 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8014ae8:	b480      	push	{r7}
 8014aea:	b083      	sub	sp, #12
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b086      	sub	sp, #24
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014b0c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014b0e:	f7f2 fa45 	bl	8006f9c <HAL_GetTick>
 8014b12:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	681b      	ldr	r3, [r3, #0]
 8014b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b22:	d03b      	beq.n	8014b9c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014b24:	697b      	ldr	r3, [r7, #20]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	685a      	ldr	r2, [r3, #4]
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	f022 0220 	bic.w	r2, r2, #32
 8014b32:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014b34:	697b      	ldr	r3, [r7, #20]
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	685a      	ldr	r2, [r3, #4]
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	f022 0202 	bic.w	r2, r2, #2
 8014b42:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014b44:	693a      	ldr	r2, [r7, #16]
 8014b46:	2164      	movs	r1, #100	; 0x64
 8014b48:	6978      	ldr	r0, [r7, #20]
 8014b4a:	f000 fc2c 	bl	80153a6 <SPI_EndRxTxTransaction>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d005      	beq.n	8014b60 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b54:	697b      	ldr	r3, [r7, #20]
 8014b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b58:	f043 0220 	orr.w	r2, r3, #32
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014b60:	697b      	ldr	r3, [r7, #20]
 8014b62:	689b      	ldr	r3, [r3, #8]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d10a      	bne.n	8014b7e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b68:	2300      	movs	r3, #0
 8014b6a:	60fb      	str	r3, [r7, #12]
 8014b6c:	697b      	ldr	r3, [r7, #20]
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	60fb      	str	r3, [r7, #12]
 8014b74:	697b      	ldr	r3, [r7, #20]
 8014b76:	681b      	ldr	r3, [r3, #0]
 8014b78:	689b      	ldr	r3, [r3, #8]
 8014b7a:	60fb      	str	r3, [r7, #12]
 8014b7c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	2200      	movs	r2, #0
 8014b82:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	2201      	movs	r2, #1
 8014b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d003      	beq.n	8014b9c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014b94:	6978      	ldr	r0, [r7, #20]
 8014b96:	f7ff ff85 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014b9a:	e002      	b.n	8014ba2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8014b9c:	6978      	ldr	r0, [r7, #20]
 8014b9e:	f7ff ff45 	bl	8014a2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014ba2:	3718      	adds	r7, #24
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}

08014ba8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014ba8:	b580      	push	{r7, lr}
 8014baa:	b084      	sub	sp, #16
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014bb4:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014bb6:	f7f2 f9f1 	bl	8006f9c <HAL_GetTick>
 8014bba:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bca:	d03b      	beq.n	8014c44 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	685a      	ldr	r2, [r3, #4]
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	f022 0220 	bic.w	r2, r2, #32
 8014bda:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	689b      	ldr	r3, [r3, #8]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d10d      	bne.n	8014c00 <SPI_DMAReceiveCplt+0x58>
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014bec:	d108      	bne.n	8014c00 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	685a      	ldr	r2, [r3, #4]
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	681b      	ldr	r3, [r3, #0]
 8014bf8:	f022 0203 	bic.w	r2, r2, #3
 8014bfc:	605a      	str	r2, [r3, #4]
 8014bfe:	e007      	b.n	8014c10 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	685a      	ldr	r2, [r3, #4]
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	f022 0201 	bic.w	r2, r2, #1
 8014c0e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014c10:	68ba      	ldr	r2, [r7, #8]
 8014c12:	2164      	movs	r1, #100	; 0x64
 8014c14:	68f8      	ldr	r0, [r7, #12]
 8014c16:	f000 fb61 	bl	80152dc <SPI_EndRxTransaction>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d002      	beq.n	8014c26 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2220      	movs	r2, #32
 8014c24:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d003      	beq.n	8014c44 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014c3c:	68f8      	ldr	r0, [r7, #12]
 8014c3e:	f7ff ff31 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014c42:	e002      	b.n	8014c4a <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8014c44:	68f8      	ldr	r0, [r7, #12]
 8014c46:	f7ff fefb 	bl	8014a40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014c4a:	3710      	adds	r7, #16
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b084      	sub	sp, #16
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014c5c:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014c5e:	f7f2 f99d 	bl	8006f9c <HAL_GetTick>
 8014c62:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c72:	d02f      	beq.n	8014cd4 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	685a      	ldr	r2, [r3, #4]
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f022 0220 	bic.w	r2, r2, #32
 8014c82:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014c84:	68ba      	ldr	r2, [r7, #8]
 8014c86:	2164      	movs	r1, #100	; 0x64
 8014c88:	68f8      	ldr	r0, [r7, #12]
 8014c8a:	f000 fb8c 	bl	80153a6 <SPI_EndRxTxTransaction>
 8014c8e:	4603      	mov	r3, r0
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d005      	beq.n	8014ca0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c98:	f043 0220 	orr.w	r2, r3, #32
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	685a      	ldr	r2, [r3, #4]
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f022 0203 	bic.w	r2, r2, #3
 8014cae:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	2200      	movs	r2, #0
 8014cba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	2201      	movs	r2, #1
 8014cc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d003      	beq.n	8014cd4 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7ff fee9 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014cd2:	e002      	b.n	8014cda <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f7ff febd 	bl	8014a54 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014cda:	3710      	adds	r7, #16
 8014cdc:	46bd      	mov	sp, r7
 8014cde:	bd80      	pop	{r7, pc}

08014ce0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014ce0:	b580      	push	{r7, lr}
 8014ce2:	b084      	sub	sp, #16
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014cec:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f7ff feba 	bl	8014a68 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014cf4:	bf00      	nop
 8014cf6:	3710      	adds	r7, #16
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b084      	sub	sp, #16
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d08:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8014d0a:	68f8      	ldr	r0, [r7, #12]
 8014d0c:	f7ff feb6 	bl	8014a7c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d10:	bf00      	nop
 8014d12:	3710      	adds	r7, #16
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d24:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8014d26:	68f8      	ldr	r0, [r7, #12]
 8014d28:	f7ff feb2 	bl	8014a90 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d2c:	bf00      	nop
 8014d2e:	3710      	adds	r7, #16
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b084      	sub	sp, #16
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	685a      	ldr	r2, [r3, #4]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	f022 0203 	bic.w	r2, r2, #3
 8014d50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d56:	f043 0210 	orr.w	r2, r3, #16
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	2201      	movs	r2, #1
 8014d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014d66:	68f8      	ldr	r0, [r7, #12]
 8014d68:	f7ff fe9c 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d6c:	bf00      	nop
 8014d6e:	3710      	adds	r7, #16
 8014d70:	46bd      	mov	sp, r7
 8014d72:	bd80      	pop	{r7, pc}

08014d74 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d80:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2200      	movs	r2, #0
 8014d86:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	f7ff fe88 	bl	8014aa4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014d94:	bf00      	nop
 8014d96:	3710      	adds	r7, #16
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014da8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8014daa:	697b      	ldr	r3, [r7, #20]
 8014dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014dae:	2200      	movs	r2, #0
 8014db0:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014db2:	4b2d      	ldr	r3, [pc, #180]	; (8014e68 <SPI_DMATxAbortCallback+0xcc>)
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a2d      	ldr	r2, [pc, #180]	; (8014e6c <SPI_DMATxAbortCallback+0xd0>)
 8014db8:	fba2 2303 	umull	r2, r3, r2, r3
 8014dbc:	0a5b      	lsrs	r3, r3, #9
 8014dbe:	2264      	movs	r2, #100	; 0x64
 8014dc0:	fb02 f303 	mul.w	r3, r2, r3
 8014dc4:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	685a      	ldr	r2, [r3, #4]
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	f022 0202 	bic.w	r2, r2, #2
 8014dd4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	d106      	bne.n	8014dea <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014de0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014de4:	697b      	ldr	r3, [r7, #20]
 8014de6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014de8:	e009      	b.n	8014dfe <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	3b01      	subs	r3, #1
 8014dee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	689b      	ldr	r3, [r3, #8]
 8014df6:	f003 0302 	and.w	r3, r3, #2
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d0eb      	beq.n	8014dd6 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8014dfe:	697b      	ldr	r3, [r7, #20]
 8014e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d004      	beq.n	8014e10 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d126      	bne.n	8014e5e <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	2200      	movs	r2, #0
 8014e14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014e1c:	697b      	ldr	r3, [r7, #20]
 8014e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014e20:	2b40      	cmp	r3, #64	; 0x40
 8014e22:	d002      	beq.n	8014e2a <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	2200      	movs	r2, #0
 8014e28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	60bb      	str	r3, [r7, #8]
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	68db      	ldr	r3, [r3, #12]
 8014e34:	60bb      	str	r3, [r7, #8]
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	60bb      	str	r3, [r7, #8]
 8014e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014e40:	2300      	movs	r3, #0
 8014e42:	60fb      	str	r3, [r7, #12]
 8014e44:	697b      	ldr	r3, [r7, #20]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	689b      	ldr	r3, [r3, #8]
 8014e4a:	60fb      	str	r3, [r7, #12]
 8014e4c:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014e4e:	697b      	ldr	r3, [r7, #20]
 8014e50:	2201      	movs	r2, #1
 8014e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014e56:	6978      	ldr	r0, [r7, #20]
 8014e58:	f7ff fe2e 	bl	8014ab8 <HAL_SPI_AbortCpltCallback>
 8014e5c:	e000      	b.n	8014e60 <SPI_DMATxAbortCallback+0xc4>
      return;
 8014e5e:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014e60:	3718      	adds	r7, #24
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	20000058 	.word	0x20000058
 8014e6c:	057619f1 	.word	0x057619f1

08014e70 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014e70:	b580      	push	{r7, lr}
 8014e72:	b086      	sub	sp, #24
 8014e74:	af00      	add	r7, sp, #0
 8014e76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014e7c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	697b      	ldr	r3, [r7, #20]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014e8c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e92:	2200      	movs	r2, #0
 8014e94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	697b      	ldr	r3, [r7, #20]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	f022 0201 	bic.w	r2, r2, #1
 8014ea4:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014ea6:	f7f2 f879 	bl	8006f9c <HAL_GetTick>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	461a      	mov	r2, r3
 8014eae:	2164      	movs	r1, #100	; 0x64
 8014eb0:	6978      	ldr	r0, [r7, #20]
 8014eb2:	f000 fa78 	bl	80153a6 <SPI_EndRxTxTransaction>
 8014eb6:	4603      	mov	r3, r0
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d005      	beq.n	8014ec8 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014ec0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014ec4:	697b      	ldr	r3, [r7, #20]
 8014ec6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d004      	beq.n	8014eda <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d126      	bne.n	8014f28 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	2200      	movs	r2, #0
 8014ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014ee0:	697b      	ldr	r3, [r7, #20]
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014eea:	2b40      	cmp	r3, #64	; 0x40
 8014eec:	d002      	beq.n	8014ef4 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8014eee:	697b      	ldr	r3, [r7, #20]
 8014ef0:	2200      	movs	r2, #0
 8014ef2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	60fb      	str	r3, [r7, #12]
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	68db      	ldr	r3, [r3, #12]
 8014efe:	60fb      	str	r3, [r7, #12]
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	60fb      	str	r3, [r7, #12]
 8014f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	613b      	str	r3, [r7, #16]
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	689b      	ldr	r3, [r3, #8]
 8014f14:	613b      	str	r3, [r7, #16]
 8014f16:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	2201      	movs	r2, #1
 8014f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8014f20:	6978      	ldr	r0, [r7, #20]
 8014f22:	f7ff fdc9 	bl	8014ab8 <HAL_SPI_AbortCpltCallback>
 8014f26:	e000      	b.n	8014f2a <SPI_DMARxAbortCallback+0xba>
      return;
 8014f28:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014f2a:	3718      	adds	r7, #24
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}

08014f30 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b082      	sub	sp, #8
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f103 020c 	add.w	r2, r3, #12
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f44:	7812      	ldrb	r2, [r2, #0]
 8014f46:	b2d2      	uxtb	r2, r2
 8014f48:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f4e:	1c5a      	adds	r2, r3, #1
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f58:	b29b      	uxth	r3, r3
 8014f5a:	3b01      	subs	r3, #1
 8014f5c:	b29a      	uxth	r2, r3
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d10f      	bne.n	8014f8c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	685a      	ldr	r2, [r3, #4]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014f7a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014f80:	b29b      	uxth	r3, r3
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d102      	bne.n	8014f8c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f000 fa4e 	bl	8015428 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014f8c:	bf00      	nop
 8014f8e:	3708      	adds	r7, #8
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}

08014f94 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b082      	sub	sp, #8
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	330c      	adds	r3, #12
 8014fa6:	7812      	ldrb	r2, [r2, #0]
 8014fa8:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	3b01      	subs	r3, #1
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014fc6:	b29b      	uxth	r3, r3
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d10f      	bne.n	8014fec <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	685a      	ldr	r2, [r3, #4]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	681b      	ldr	r3, [r3, #0]
 8014fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014fda:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d102      	bne.n	8014fec <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f000 fa1e 	bl	8015428 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014fec:	bf00      	nop
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b082      	sub	sp, #8
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	68da      	ldr	r2, [r3, #12]
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015006:	b292      	uxth	r2, r2
 8015008:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801500e:	1c9a      	adds	r2, r3, #2
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015018:	b29b      	uxth	r3, r3
 801501a:	3b01      	subs	r3, #1
 801501c:	b29a      	uxth	r2, r3
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015026:	b29b      	uxth	r3, r3
 8015028:	2b00      	cmp	r3, #0
 801502a:	d10f      	bne.n	801504c <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	685a      	ldr	r2, [r3, #4]
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801503a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015040:	b29b      	uxth	r3, r3
 8015042:	2b00      	cmp	r3, #0
 8015044:	d102      	bne.n	801504c <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8015046:	6878      	ldr	r0, [r7, #4]
 8015048:	f000 f9ee 	bl	8015428 <SPI_CloseRxTx_ISR>
    }
  }
}
 801504c:	bf00      	nop
 801504e:	3708      	adds	r7, #8
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015060:	881a      	ldrh	r2, [r3, #0]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	681b      	ldr	r3, [r3, #0]
 8015066:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801506c:	1c9a      	adds	r2, r3, #2
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015076:	b29b      	uxth	r3, r3
 8015078:	3b01      	subs	r3, #1
 801507a:	b29a      	uxth	r2, r3
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015084:	b29b      	uxth	r3, r3
 8015086:	2b00      	cmp	r3, #0
 8015088:	d10f      	bne.n	80150aa <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	685a      	ldr	r2, [r3, #4]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8015098:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801509e:	b29b      	uxth	r3, r3
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d102      	bne.n	80150aa <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80150a4:	6878      	ldr	r0, [r7, #4]
 80150a6:	f000 f9bf 	bl	8015428 <SPI_CloseRxTx_ISR>
    }
  }
}
 80150aa:	bf00      	nop
 80150ac:	3708      	adds	r7, #8
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	681b      	ldr	r3, [r3, #0]
 80150be:	f103 020c 	add.w	r2, r3, #12
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150c6:	7812      	ldrb	r2, [r2, #0]
 80150c8:	b2d2      	uxtb	r2, r2
 80150ca:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80150d0:	1c5a      	adds	r2, r3, #1
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80150da:	b29b      	uxth	r3, r3
 80150dc:	3b01      	subs	r3, #1
 80150de:	b29a      	uxth	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d102      	bne.n	80150f4 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80150ee:	6878      	ldr	r0, [r7, #4]
 80150f0:	f000 fa0e 	bl	8015510 <SPI_CloseRx_ISR>
  }
}
 80150f4:	bf00      	nop
 80150f6:	3708      	adds	r7, #8
 80150f8:	46bd      	mov	sp, r7
 80150fa:	bd80      	pop	{r7, pc}

080150fc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80150fc:	b580      	push	{r7, lr}
 80150fe:	b082      	sub	sp, #8
 8015100:	af00      	add	r7, sp, #0
 8015102:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	68da      	ldr	r2, [r3, #12]
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801510e:	b292      	uxth	r2, r2
 8015110:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8015112:	687b      	ldr	r3, [r7, #4]
 8015114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015116:	1c9a      	adds	r2, r3, #2
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8015120:	b29b      	uxth	r3, r3
 8015122:	3b01      	subs	r3, #1
 8015124:	b29a      	uxth	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801512e:	b29b      	uxth	r3, r3
 8015130:	2b00      	cmp	r3, #0
 8015132:	d102      	bne.n	801513a <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f000 f9eb 	bl	8015510 <SPI_CloseRx_ISR>
  }
}
 801513a:	bf00      	nop
 801513c:	3708      	adds	r7, #8
 801513e:	46bd      	mov	sp, r7
 8015140:	bd80      	pop	{r7, pc}

08015142 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8015142:	b580      	push	{r7, lr}
 8015144:	b082      	sub	sp, #8
 8015146:	af00      	add	r7, sp, #0
 8015148:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	330c      	adds	r3, #12
 8015154:	7812      	ldrb	r2, [r2, #0]
 8015156:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801515c:	1c5a      	adds	r2, r3, #1
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015166:	b29b      	uxth	r3, r3
 8015168:	3b01      	subs	r3, #1
 801516a:	b29a      	uxth	r2, r3
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8015174:	b29b      	uxth	r3, r3
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f000 fa07 	bl	801558e <SPI_CloseTx_ISR>
  }
}
 8015180:	bf00      	nop
 8015182:	3708      	adds	r7, #8
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}

08015188 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015194:	881a      	ldrh	r2, [r3, #0]
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80151a0:	1c9a      	adds	r2, r3, #2
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	3b01      	subs	r3, #1
 80151ae:	b29a      	uxth	r2, r3
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d102      	bne.n	80151c4 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80151be:	6878      	ldr	r0, [r7, #4]
 80151c0:	f000 f9e5 	bl	801558e <SPI_CloseTx_ISR>
  }
}
 80151c4:	bf00      	nop
 80151c6:	3708      	adds	r7, #8
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}

080151cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b088      	sub	sp, #32
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	603b      	str	r3, [r7, #0]
 80151d8:	4613      	mov	r3, r2
 80151da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80151dc:	f7f1 fede 	bl	8006f9c <HAL_GetTick>
 80151e0:	4602      	mov	r2, r0
 80151e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e4:	1a9b      	subs	r3, r3, r2
 80151e6:	683a      	ldr	r2, [r7, #0]
 80151e8:	4413      	add	r3, r2
 80151ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80151ec:	f7f1 fed6 	bl	8006f9c <HAL_GetTick>
 80151f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80151f2:	4b39      	ldr	r3, [pc, #228]	; (80152d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	015b      	lsls	r3, r3, #5
 80151f8:	0d1b      	lsrs	r3, r3, #20
 80151fa:	69fa      	ldr	r2, [r7, #28]
 80151fc:	fb02 f303 	mul.w	r3, r2, r3
 8015200:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8015202:	e054      	b.n	80152ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801520a:	d050      	beq.n	80152ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801520c:	f7f1 fec6 	bl	8006f9c <HAL_GetTick>
 8015210:	4602      	mov	r2, r0
 8015212:	69bb      	ldr	r3, [r7, #24]
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	69fa      	ldr	r2, [r7, #28]
 8015218:	429a      	cmp	r2, r3
 801521a:	d902      	bls.n	8015222 <SPI_WaitFlagStateUntilTimeout+0x56>
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d13d      	bne.n	801529e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	685a      	ldr	r2, [r3, #4]
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8015230:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801523a:	d111      	bne.n	8015260 <SPI_WaitFlagStateUntilTimeout+0x94>
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	689b      	ldr	r3, [r3, #8]
 8015240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015244:	d004      	beq.n	8015250 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	689b      	ldr	r3, [r3, #8]
 801524a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801524e:	d107      	bne.n	8015260 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	681a      	ldr	r2, [r3, #0]
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	681b      	ldr	r3, [r3, #0]
 801525a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801525e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015264:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015268:	d10f      	bne.n	801528a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015278:	601a      	str	r2, [r3, #0]
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015288:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	2201      	movs	r2, #1
 801528e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2200      	movs	r2, #0
 8015296:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801529a:	2303      	movs	r3, #3
 801529c:	e017      	b.n	80152ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801529e:	697b      	ldr	r3, [r7, #20]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d101      	bne.n	80152a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80152a4:	2300      	movs	r3, #0
 80152a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80152a8:	697b      	ldr	r3, [r7, #20]
 80152aa:	3b01      	subs	r3, #1
 80152ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80152ae:	68fb      	ldr	r3, [r7, #12]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	689a      	ldr	r2, [r3, #8]
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	4013      	ands	r3, r2
 80152b8:	68ba      	ldr	r2, [r7, #8]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	bf0c      	ite	eq
 80152be:	2301      	moveq	r3, #1
 80152c0:	2300      	movne	r3, #0
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	461a      	mov	r2, r3
 80152c6:	79fb      	ldrb	r3, [r7, #7]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d19b      	bne.n	8015204 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3720      	adds	r7, #32
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	20000058 	.word	0x20000058

080152dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b086      	sub	sp, #24
 80152e0:	af02      	add	r7, sp, #8
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	60b9      	str	r1, [r7, #8]
 80152e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	685b      	ldr	r3, [r3, #4]
 80152ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80152f0:	d111      	bne.n	8015316 <SPI_EndRxTransaction+0x3a>
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	689b      	ldr	r3, [r3, #8]
 80152f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80152fa:	d004      	beq.n	8015306 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	689b      	ldr	r3, [r3, #8]
 8015300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015304:	d107      	bne.n	8015316 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015314:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	685b      	ldr	r3, [r3, #4]
 801531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801531e:	d12a      	bne.n	8015376 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	689b      	ldr	r3, [r3, #8]
 8015324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015328:	d012      	beq.n	8015350 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	9300      	str	r3, [sp, #0]
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	2200      	movs	r2, #0
 8015332:	2180      	movs	r1, #128	; 0x80
 8015334:	68f8      	ldr	r0, [r7, #12]
 8015336:	f7ff ff49 	bl	80151cc <SPI_WaitFlagStateUntilTimeout>
 801533a:	4603      	mov	r3, r0
 801533c:	2b00      	cmp	r3, #0
 801533e:	d02d      	beq.n	801539c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015344:	f043 0220 	orr.w	r2, r3, #32
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801534c:	2303      	movs	r3, #3
 801534e:	e026      	b.n	801539e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	9300      	str	r3, [sp, #0]
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	2200      	movs	r2, #0
 8015358:	2101      	movs	r1, #1
 801535a:	68f8      	ldr	r0, [r7, #12]
 801535c:	f7ff ff36 	bl	80151cc <SPI_WaitFlagStateUntilTimeout>
 8015360:	4603      	mov	r3, r0
 8015362:	2b00      	cmp	r3, #0
 8015364:	d01a      	beq.n	801539c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801536a:	f043 0220 	orr.w	r2, r3, #32
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8015372:	2303      	movs	r3, #3
 8015374:	e013      	b.n	801539e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	9300      	str	r3, [sp, #0]
 801537a:	68bb      	ldr	r3, [r7, #8]
 801537c:	2200      	movs	r2, #0
 801537e:	2101      	movs	r1, #1
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f7ff ff23 	bl	80151cc <SPI_WaitFlagStateUntilTimeout>
 8015386:	4603      	mov	r3, r0
 8015388:	2b00      	cmp	r3, #0
 801538a:	d007      	beq.n	801539c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015390:	f043 0220 	orr.w	r2, r3, #32
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8015398:	2303      	movs	r3, #3
 801539a:	e000      	b.n	801539e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 801539c:	2300      	movs	r3, #0
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3710      	adds	r7, #16
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}

080153a6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80153a6:	b580      	push	{r7, lr}
 80153a8:	b088      	sub	sp, #32
 80153aa:	af02      	add	r7, sp, #8
 80153ac:	60f8      	str	r0, [r7, #12]
 80153ae:	60b9      	str	r1, [r7, #8]
 80153b0:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80153b2:	4b1b      	ldr	r3, [pc, #108]	; (8015420 <SPI_EndRxTxTransaction+0x7a>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	4a1b      	ldr	r2, [pc, #108]	; (8015424 <SPI_EndRxTxTransaction+0x7e>)
 80153b8:	fba2 2303 	umull	r2, r3, r2, r3
 80153bc:	0d5b      	lsrs	r3, r3, #21
 80153be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153c2:	fb02 f303 	mul.w	r3, r2, r3
 80153c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80153d0:	d112      	bne.n	80153f8 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	9300      	str	r3, [sp, #0]
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	2200      	movs	r2, #0
 80153da:	2180      	movs	r1, #128	; 0x80
 80153dc:	68f8      	ldr	r0, [r7, #12]
 80153de:	f7ff fef5 	bl	80151cc <SPI_WaitFlagStateUntilTimeout>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d016      	beq.n	8015416 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153ec:	f043 0220 	orr.w	r2, r3, #32
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80153f4:	2303      	movs	r3, #3
 80153f6:	e00f      	b.n	8015418 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80153f8:	697b      	ldr	r3, [r7, #20]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00a      	beq.n	8015414 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	3b01      	subs	r3, #1
 8015402:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	689b      	ldr	r3, [r3, #8]
 801540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801540e:	2b80      	cmp	r3, #128	; 0x80
 8015410:	d0f2      	beq.n	80153f8 <SPI_EndRxTxTransaction+0x52>
 8015412:	e000      	b.n	8015416 <SPI_EndRxTxTransaction+0x70>
        break;
 8015414:	bf00      	nop
  }

  return HAL_OK;
 8015416:	2300      	movs	r3, #0
}
 8015418:	4618      	mov	r0, r3
 801541a:	3718      	adds	r7, #24
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	20000058 	.word	0x20000058
 8015424:	165e9f81 	.word	0x165e9f81

08015428 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b086      	sub	sp, #24
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8015430:	4b35      	ldr	r3, [pc, #212]	; (8015508 <SPI_CloseRxTx_ISR+0xe0>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4a35      	ldr	r2, [pc, #212]	; (801550c <SPI_CloseRxTx_ISR+0xe4>)
 8015436:	fba2 2303 	umull	r2, r3, r2, r3
 801543a:	0a5b      	lsrs	r3, r3, #9
 801543c:	2264      	movs	r2, #100	; 0x64
 801543e:	fb02 f303 	mul.w	r3, r2, r3
 8015442:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015444:	f7f1 fdaa 	bl	8006f9c <HAL_GetTick>
 8015448:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	f022 0220 	bic.w	r2, r2, #32
 8015458:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 801545a:	693b      	ldr	r3, [r7, #16]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d106      	bne.n	801546e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015464:	f043 0220 	orr.w	r2, r3, #32
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801546c:	e009      	b.n	8015482 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	3b01      	subs	r3, #1
 8015472:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	689b      	ldr	r3, [r3, #8]
 801547a:	f003 0302 	and.w	r3, r3, #2
 801547e:	2b00      	cmp	r3, #0
 8015480:	d0eb      	beq.n	801545a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8015482:	697a      	ldr	r2, [r7, #20]
 8015484:	2164      	movs	r1, #100	; 0x64
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f7ff ff8d 	bl	80153a6 <SPI_EndRxTxTransaction>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d005      	beq.n	801549e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015496:	f043 0220 	orr.w	r2, r3, #32
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	689b      	ldr	r3, [r3, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d10a      	bne.n	80154bc <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80154a6:	2300      	movs	r3, #0
 80154a8:	60fb      	str	r3, [r7, #12]
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	60fb      	str	r3, [r7, #12]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	689b      	ldr	r3, [r3, #8]
 80154b8:	60fb      	str	r3, [r7, #12]
 80154ba:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d115      	bne.n	80154f0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80154ca:	b2db      	uxtb	r3, r3
 80154cc:	2b04      	cmp	r3, #4
 80154ce:	d107      	bne.n	80154e0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	2201      	movs	r2, #1
 80154d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7ff fab1 	bl	8014a40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80154de:	e00e      	b.n	80154fe <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	2201      	movs	r2, #1
 80154e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80154e8:	6878      	ldr	r0, [r7, #4]
 80154ea:	f7ff fab3 	bl	8014a54 <HAL_SPI_TxRxCpltCallback>
}
 80154ee:	e006      	b.n	80154fe <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2201      	movs	r2, #1
 80154f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7ff fad3 	bl	8014aa4 <HAL_SPI_ErrorCallback>
}
 80154fe:	bf00      	nop
 8015500:	3718      	adds	r7, #24
 8015502:	46bd      	mov	sp, r7
 8015504:	bd80      	pop	{r7, pc}
 8015506:	bf00      	nop
 8015508:	20000058 	.word	0x20000058
 801550c:	057619f1 	.word	0x057619f1

08015510 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	685a      	ldr	r2, [r3, #4]
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015526:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8015528:	f7f1 fd38 	bl	8006f9c <HAL_GetTick>
 801552c:	4603      	mov	r3, r0
 801552e:	461a      	mov	r2, r3
 8015530:	2164      	movs	r1, #100	; 0x64
 8015532:	6878      	ldr	r0, [r7, #4]
 8015534:	f7ff fed2 	bl	80152dc <SPI_EndRxTransaction>
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	d005      	beq.n	801554a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015542:	f043 0220 	orr.w	r2, r3, #32
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d10a      	bne.n	8015568 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8015552:	2300      	movs	r3, #0
 8015554:	60fb      	str	r3, [r7, #12]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	60fb      	str	r3, [r7, #12]
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	689b      	ldr	r3, [r3, #8]
 8015564:	60fb      	str	r3, [r7, #12]
 8015566:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2201      	movs	r2, #1
 801556c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015574:	2b00      	cmp	r3, #0
 8015576:	d103      	bne.n	8015580 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f7ff fa61 	bl	8014a40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801557e:	e002      	b.n	8015586 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f7ff fa8f 	bl	8014aa4 <HAL_SPI_ErrorCallback>
}
 8015586:	bf00      	nop
 8015588:	3710      	adds	r7, #16
 801558a:	46bd      	mov	sp, r7
 801558c:	bd80      	pop	{r7, pc}

0801558e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 801558e:	b580      	push	{r7, lr}
 8015590:	b086      	sub	sp, #24
 8015592:	af00      	add	r7, sp, #0
 8015594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8015596:	4b2c      	ldr	r3, [pc, #176]	; (8015648 <SPI_CloseTx_ISR+0xba>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	4a2c      	ldr	r2, [pc, #176]	; (801564c <SPI_CloseTx_ISR+0xbe>)
 801559c:	fba2 2303 	umull	r2, r3, r2, r3
 80155a0:	0a5b      	lsrs	r3, r3, #9
 80155a2:	2264      	movs	r2, #100	; 0x64
 80155a4:	fb02 f303 	mul.w	r3, r2, r3
 80155a8:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80155aa:	f7f1 fcf7 	bl	8006f9c <HAL_GetTick>
 80155ae:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d106      	bne.n	80155c4 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155ba:	f043 0220 	orr.w	r2, r3, #32
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80155c2:	e009      	b.n	80155d8 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	3b01      	subs	r3, #1
 80155c8:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	689b      	ldr	r3, [r3, #8]
 80155d0:	f003 0302 	and.w	r3, r3, #2
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d0eb      	beq.n	80155b0 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	685a      	ldr	r2, [r3, #4]
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80155e6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80155e8:	697a      	ldr	r2, [r7, #20]
 80155ea:	2164      	movs	r1, #100	; 0x64
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7ff feda 	bl	80153a6 <SPI_EndRxTxTransaction>
 80155f2:	4603      	mov	r3, r0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d005      	beq.n	8015604 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155fc:	f043 0220 	orr.w	r2, r3, #32
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d10a      	bne.n	8015622 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801560c:	2300      	movs	r3, #0
 801560e:	60fb      	str	r3, [r7, #12]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	60fb      	str	r3, [r7, #12]
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	689b      	ldr	r3, [r3, #8]
 801561e:	60fb      	str	r3, [r7, #12]
 8015620:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2201      	movs	r2, #1
 8015626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801562e:	2b00      	cmp	r3, #0
 8015630:	d003      	beq.n	801563a <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f7ff fa36 	bl	8014aa4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8015638:	e002      	b.n	8015640 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7ff f9f6 	bl	8014a2c <HAL_SPI_TxCpltCallback>
}
 8015640:	bf00      	nop
 8015642:	3718      	adds	r7, #24
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}
 8015648:	20000058 	.word	0x20000058
 801564c:	057619f1 	.word	0x057619f1

08015650 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8015650:	b480      	push	{r7}
 8015652:	b085      	sub	sp, #20
 8015654:	af00      	add	r7, sp, #0
 8015656:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8015658:	2300      	movs	r3, #0
 801565a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801565c:	4b1e      	ldr	r3, [pc, #120]	; (80156d8 <SPI_AbortRx_ISR+0x88>)
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	4a1e      	ldr	r2, [pc, #120]	; (80156dc <SPI_AbortRx_ISR+0x8c>)
 8015662:	fba2 2303 	umull	r2, r3, r2, r3
 8015666:	0a5b      	lsrs	r3, r3, #9
 8015668:	2264      	movs	r2, #100	; 0x64
 801566a:	fb02 f303 	mul.w	r3, r2, r3
 801566e:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d106      	bne.n	8015684 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801567a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8015682:	e009      	b.n	8015698 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8015684:	68bb      	ldr	r3, [r7, #8]
 8015686:	3b01      	subs	r3, #1
 8015688:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	689b      	ldr	r3, [r3, #8]
 8015690:	f003 0302 	and.w	r3, r3, #2
 8015694:	2b00      	cmp	r3, #0
 8015696:	d0eb      	beq.n	8015670 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80156a6:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	685a      	ldr	r2, [r3, #4]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80156b6:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	68db      	ldr	r3, [r3, #12]
 80156be:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 80156c0:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	2207      	movs	r2, #7
 80156c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 80156ca:	bf00      	nop
 80156cc:	3714      	adds	r7, #20
 80156ce:	46bd      	mov	sp, r7
 80156d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d4:	4770      	bx	lr
 80156d6:	bf00      	nop
 80156d8:	20000058 	.word	0x20000058
 80156dc:	057619f1 	.word	0x057619f1

080156e0 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 80156e0:	b480      	push	{r7}
 80156e2:	b083      	sub	sp, #12
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	685a      	ldr	r2, [r3, #4]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80156f6:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015706:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	2207      	movs	r2, #7
 801570c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8015710:	bf00      	nop
 8015712:	370c      	adds	r7, #12
 8015714:	46bd      	mov	sp, r7
 8015716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571a:	4770      	bx	lr

0801571c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 801571c:	b580      	push	{r7, lr}
 801571e:	b084      	sub	sp, #16
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d101      	bne.n	8015732 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 801572e:	2301      	movs	r3, #1
 8015730:	e034      	b.n	801579c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b00      	cmp	r3, #0
 801573c:	d106      	bne.n	801574c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8015746:	68f8      	ldr	r0, [r7, #12]
 8015748:	f7f0 fa12 	bl	8005b70 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	3308      	adds	r3, #8
 8015754:	4619      	mov	r1, r3
 8015756:	4610      	mov	r0, r2
 8015758:	f003 f9a0 	bl	8018a9c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	6818      	ldr	r0, [r3, #0]
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	689b      	ldr	r3, [r3, #8]
 8015764:	461a      	mov	r2, r3
 8015766:	68b9      	ldr	r1, [r7, #8]
 8015768:	f003 fa1e 	bl	8018ba8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	6858      	ldr	r0, [r3, #4]
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	689a      	ldr	r2, [r3, #8]
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015778:	6879      	ldr	r1, [r7, #4]
 801577a:	f003 fa52 	bl	8018c22 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	6892      	ldr	r2, [r2, #8]
 8015786:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801578a:	68fb      	ldr	r3, [r7, #12]
 801578c:	681b      	ldr	r3, [r3, #0]
 801578e:	68fa      	ldr	r2, [r7, #12]
 8015790:	6892      	ldr	r2, [r2, #8]
 8015792:	f041 0101 	orr.w	r1, r1, #1
 8015796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 801579a:	2300      	movs	r3, #0
}
 801579c:	4618      	mov	r0, r3
 801579e:	3710      	adds	r7, #16
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f7f0 fa0d 	bl	8005bcc <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6818      	ldr	r0, [r3, #0]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6859      	ldr	r1, [r3, #4]
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	689b      	ldr	r3, [r3, #8]
 80157be:	461a      	mov	r2, r3
 80157c0:	f003 f9be 	bl	8018b40 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	2200      	movs	r2, #0
 80157d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80157d4:	2300      	movs	r3, #0
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 80157de:	b480      	push	{r7}
 80157e0:	b083      	sub	sp, #12
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 80157e6:	bf00      	nop
 80157e8:	370c      	adds	r7, #12
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr

080157f2 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 80157f2:	b480      	push	{r7}
 80157f4:	b083      	sub	sp, #12
 80157f6:	af00      	add	r7, sp, #0
 80157f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 80157fa:	bf00      	nop
 80157fc:	370c      	adds	r7, #12
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr

08015806 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 8015806:	b480      	push	{r7}
 8015808:	b087      	sub	sp, #28
 801580a:	af00      	add	r7, sp, #0
 801580c:	60f8      	str	r0, [r7, #12]
 801580e:	60b9      	str	r1, [r7, #8]
 8015810:	607a      	str	r2, [r7, #4]
 8015812:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801581e:	2b01      	cmp	r3, #1
 8015820:	d101      	bne.n	8015826 <HAL_SRAM_Read_8b+0x20>
 8015822:	2302      	movs	r3, #2
 8015824:	e022      	b.n	801586c <HAL_SRAM_Read_8b+0x66>
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	2201      	movs	r2, #1
 801582a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	2202      	movs	r2, #2
 8015832:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015836:	e00d      	b.n	8015854 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8015838:	697b      	ldr	r3, [r7, #20]
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	b2da      	uxtb	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	3301      	adds	r3, #1
 8015846:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	3301      	adds	r3, #1
 801584c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 801584e:	683b      	ldr	r3, [r7, #0]
 8015850:	3b01      	subs	r3, #1
 8015852:	603b      	str	r3, [r7, #0]
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d1ee      	bne.n	8015838 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	2201      	movs	r2, #1
 801585e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2200      	movs	r2, #0
 8015866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 801586a:	2300      	movs	r3, #0
}
 801586c:	4618      	mov	r0, r3
 801586e:	371c      	adds	r7, #28
 8015870:	46bd      	mov	sp, r7
 8015872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015876:	4770      	bx	lr

08015878 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8015878:	b480      	push	{r7}
 801587a:	b087      	sub	sp, #28
 801587c:	af00      	add	r7, sp, #0
 801587e:	60f8      	str	r0, [r7, #12]
 8015880:	60b9      	str	r1, [r7, #8]
 8015882:	607a      	str	r2, [r7, #4]
 8015884:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801588a:	68fb      	ldr	r3, [r7, #12]
 801588c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015890:	b2db      	uxtb	r3, r3
 8015892:	2b04      	cmp	r3, #4
 8015894:	d101      	bne.n	801589a <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8015896:	2301      	movs	r3, #1
 8015898:	e028      	b.n	80158ec <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	d101      	bne.n	80158a8 <HAL_SRAM_Write_8b+0x30>
 80158a4:	2302      	movs	r3, #2
 80158a6:	e021      	b.n	80158ec <HAL_SRAM_Write_8b+0x74>
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2201      	movs	r2, #1
 80158ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2202      	movs	r2, #2
 80158b4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 80158b8:	e00c      	b.n	80158d4 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	781a      	ldrb	r2, [r3, #0]
 80158be:	697b      	ldr	r3, [r7, #20]
 80158c0:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	3301      	adds	r3, #1
 80158c6:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	3301      	adds	r3, #1
 80158cc:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	3b01      	subs	r3, #1
 80158d2:	603b      	str	r3, [r7, #0]
 80158d4:	683b      	ldr	r3, [r7, #0]
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d1ef      	bne.n	80158ba <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	2201      	movs	r2, #1
 80158de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	2200      	movs	r2, #0
 80158e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80158ea:	2300      	movs	r3, #0
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	371c      	adds	r7, #28
 80158f0:	46bd      	mov	sp, r7
 80158f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f6:	4770      	bx	lr

080158f8 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 80158f8:	b480      	push	{r7}
 80158fa:	b087      	sub	sp, #28
 80158fc:	af00      	add	r7, sp, #0
 80158fe:	60f8      	str	r0, [r7, #12]
 8015900:	60b9      	str	r1, [r7, #8]
 8015902:	607a      	str	r2, [r7, #4]
 8015904:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015910:	2b01      	cmp	r3, #1
 8015912:	d101      	bne.n	8015918 <HAL_SRAM_Read_16b+0x20>
 8015914:	2302      	movs	r3, #2
 8015916:	e022      	b.n	801595e <HAL_SRAM_Read_16b+0x66>
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	2201      	movs	r2, #1
 801591c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015920:	68fb      	ldr	r3, [r7, #12]
 8015922:	2202      	movs	r2, #2
 8015924:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015928:	e00d      	b.n	8015946 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	b29a      	uxth	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	3302      	adds	r3, #2
 8015938:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	3302      	adds	r3, #2
 801593e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	3b01      	subs	r3, #1
 8015944:	603b      	str	r3, [r7, #0]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	2b00      	cmp	r3, #0
 801594a:	d1ee      	bne.n	801592a <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2201      	movs	r2, #1
 8015950:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	2200      	movs	r2, #0
 8015958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 801595c:	2300      	movs	r3, #0
}
 801595e:	4618      	mov	r0, r3
 8015960:	371c      	adds	r7, #28
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr

0801596a <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 801596a:	b480      	push	{r7}
 801596c:	b087      	sub	sp, #28
 801596e:	af00      	add	r7, sp, #0
 8015970:	60f8      	str	r0, [r7, #12]
 8015972:	60b9      	str	r1, [r7, #8]
 8015974:	607a      	str	r2, [r7, #4]
 8015976:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015982:	b2db      	uxtb	r3, r3
 8015984:	2b04      	cmp	r3, #4
 8015986:	d101      	bne.n	801598c <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015988:	2301      	movs	r3, #1
 801598a:	e028      	b.n	80159de <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015992:	2b01      	cmp	r3, #1
 8015994:	d101      	bne.n	801599a <HAL_SRAM_Write_16b+0x30>
 8015996:	2302      	movs	r3, #2
 8015998:	e021      	b.n	80159de <HAL_SRAM_Write_16b+0x74>
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2201      	movs	r2, #1
 801599e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2202      	movs	r2, #2
 80159a6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 80159aa:	e00c      	b.n	80159c6 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	881a      	ldrh	r2, [r3, #0]
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	3302      	adds	r3, #2
 80159b8:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	3302      	adds	r3, #2
 80159be:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	3b01      	subs	r3, #1
 80159c4:	603b      	str	r3, [r7, #0]
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d1ef      	bne.n	80159ac <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	2201      	movs	r2, #1
 80159d0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	2200      	movs	r2, #0
 80159d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80159dc:	2300      	movs	r3, #0
}
 80159de:	4618      	mov	r0, r3
 80159e0:	371c      	adds	r7, #28
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr

080159ea <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 80159ea:	b480      	push	{r7}
 80159ec:	b085      	sub	sp, #20
 80159ee:	af00      	add	r7, sp, #0
 80159f0:	60f8      	str	r0, [r7, #12]
 80159f2:	60b9      	str	r1, [r7, #8]
 80159f4:	607a      	str	r2, [r7, #4]
 80159f6:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d101      	bne.n	8015a06 <HAL_SRAM_Read_32b+0x1c>
 8015a02:	2302      	movs	r3, #2
 8015a04:	e021      	b.n	8015a4a <HAL_SRAM_Read_32b+0x60>
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	2201      	movs	r2, #1
 8015a0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	2202      	movs	r2, #2
 8015a12:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8015a16:	e00c      	b.n	8015a32 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	681a      	ldr	r2, [r3, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	3304      	adds	r3, #4
 8015a24:	607b      	str	r3, [r7, #4]
    pAddress++;
 8015a26:	68bb      	ldr	r3, [r7, #8]
 8015a28:	3304      	adds	r3, #4
 8015a2a:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015a2c:	683b      	ldr	r3, [r7, #0]
 8015a2e:	3b01      	subs	r3, #1
 8015a30:	603b      	str	r3, [r7, #0]
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d1ef      	bne.n	8015a18 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	2201      	movs	r2, #1
 8015a3c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	2200      	movs	r2, #0
 8015a44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8015a48:	2300      	movs	r3, #0
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3714      	adds	r7, #20
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a54:	4770      	bx	lr

08015a56 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015a56:	b480      	push	{r7}
 8015a58:	b085      	sub	sp, #20
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	60f8      	str	r0, [r7, #12]
 8015a5e:	60b9      	str	r1, [r7, #8]
 8015a60:	607a      	str	r2, [r7, #4]
 8015a62:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015a64:	68fb      	ldr	r3, [r7, #12]
 8015a66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015a6a:	b2db      	uxtb	r3, r3
 8015a6c:	2b04      	cmp	r3, #4
 8015a6e:	d101      	bne.n	8015a74 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8015a70:	2301      	movs	r3, #1
 8015a72:	e028      	b.n	8015ac6 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015a7a:	2b01      	cmp	r3, #1
 8015a7c:	d101      	bne.n	8015a82 <HAL_SRAM_Write_32b+0x2c>
 8015a7e:	2302      	movs	r3, #2
 8015a80:	e021      	b.n	8015ac6 <HAL_SRAM_Write_32b+0x70>
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	2201      	movs	r2, #1
 8015a86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015a8a:	68fb      	ldr	r3, [r7, #12]
 8015a8c:	2202      	movs	r2, #2
 8015a8e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015a92:	e00c      	b.n	8015aae <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681a      	ldr	r2, [r3, #0]
 8015a98:	68bb      	ldr	r3, [r7, #8]
 8015a9a:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	3304      	adds	r3, #4
 8015aa0:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015aa8:	683b      	ldr	r3, [r7, #0]
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	603b      	str	r3, [r7, #0]
 8015aae:	683b      	ldr	r3, [r7, #0]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d1ef      	bne.n	8015a94 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	2201      	movs	r2, #1
 8015ab8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	2200      	movs	r2, #0
 8015ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015ac4:	2300      	movs	r3, #0
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3714      	adds	r7, #20
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr

08015ad2 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b084      	sub	sp, #16
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	60f8      	str	r0, [r7, #12]
 8015ada:	60b9      	str	r1, [r7, #8]
 8015adc:	607a      	str	r2, [r7, #4]
 8015ade:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015ae6:	2b01      	cmp	r3, #1
 8015ae8:	d101      	bne.n	8015aee <HAL_SRAM_Read_DMA+0x1c>
 8015aea:	2302      	movs	r3, #2
 8015aec:	e01f      	b.n	8015b2e <HAL_SRAM_Read_DMA+0x5c>
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	2201      	movs	r2, #1
 8015af2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2202      	movs	r2, #2
 8015afa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b02:	4a0d      	ldr	r2, [pc, #52]	; (8015b38 <HAL_SRAM_Read_DMA+0x66>)
 8015b04:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b0a:	4a0c      	ldr	r2, [pc, #48]	; (8015b3c <HAL_SRAM_Read_DMA+0x6a>)
 8015b0c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8015b0e:	68fb      	ldr	r3, [r7, #12]
 8015b10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015b12:	68b9      	ldr	r1, [r7, #8]
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	683b      	ldr	r3, [r7, #0]
 8015b18:	f7f2 fca9 	bl	800846e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015b1c:	68fb      	ldr	r3, [r7, #12]
 8015b1e:	2201      	movs	r2, #1
 8015b20:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	2200      	movs	r2, #0
 8015b28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 8015b2c:	2300      	movs	r3, #0
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	080157df 	.word	0x080157df
 8015b3c:	080157f3 	.word	0x080157f3

08015b40 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b084      	sub	sp, #16
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	60f8      	str	r0, [r7, #12]
 8015b48:	60b9      	str	r1, [r7, #8]
 8015b4a:	607a      	str	r2, [r7, #4]
 8015b4c:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015b54:	b2db      	uxtb	r3, r3
 8015b56:	2b04      	cmp	r3, #4
 8015b58:	d101      	bne.n	8015b5e <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	e026      	b.n	8015bac <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015b64:	2b01      	cmp	r3, #1
 8015b66:	d101      	bne.n	8015b6c <HAL_SRAM_Write_DMA+0x2c>
 8015b68:	2302      	movs	r3, #2
 8015b6a:	e01f      	b.n	8015bac <HAL_SRAM_Write_DMA+0x6c>
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	2201      	movs	r2, #1
 8015b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	2202      	movs	r2, #2
 8015b78:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8015b7c:	68fb      	ldr	r3, [r7, #12]
 8015b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b80:	4a0c      	ldr	r2, [pc, #48]	; (8015bb4 <HAL_SRAM_Write_DMA+0x74>)
 8015b82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b88:	4a0b      	ldr	r2, [pc, #44]	; (8015bb8 <HAL_SRAM_Write_DMA+0x78>)
 8015b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015b90:	6879      	ldr	r1, [r7, #4]
 8015b92:	68ba      	ldr	r2, [r7, #8]
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	f7f2 fc6a 	bl	800846e <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	2201      	movs	r2, #1
 8015b9e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015ba2:	68fb      	ldr	r3, [r7, #12]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 8015baa:	2300      	movs	r3, #0
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	3710      	adds	r7, #16
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	bd80      	pop	{r7, pc}
 8015bb4:	080157df 	.word	0x080157df
 8015bb8:	080157f3 	.word	0x080157f3

08015bbc <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d101      	bne.n	8015bd2 <HAL_SRAM_WriteOperation_Enable+0x16>
 8015bce:	2302      	movs	r3, #2
 8015bd0:	e014      	b.n	8015bfc <HAL_SRAM_WriteOperation_Enable+0x40>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	2201      	movs	r2, #1
 8015bd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	681a      	ldr	r2, [r3, #0]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	689b      	ldr	r3, [r3, #8]
 8015be2:	4619      	mov	r1, r3
 8015be4:	4610      	mov	r0, r2
 8015be6:	f003 f85b 	bl	8018ca0 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2201      	movs	r2, #1
 8015bee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8015bfa:	2300      	movs	r3, #0
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	3708      	adds	r7, #8
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}

08015c04 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8015c04:	b580      	push	{r7, lr}
 8015c06:	b082      	sub	sp, #8
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015c12:	2b01      	cmp	r3, #1
 8015c14:	d101      	bne.n	8015c1a <HAL_SRAM_WriteOperation_Disable+0x16>
 8015c16:	2302      	movs	r3, #2
 8015c18:	e018      	b.n	8015c4c <HAL_SRAM_WriteOperation_Disable+0x48>
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	2202      	movs	r2, #2
 8015c26:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681a      	ldr	r2, [r3, #0]
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	689b      	ldr	r3, [r3, #8]
 8015c32:	4619      	mov	r1, r3
 8015c34:	4610      	mov	r0, r2
 8015c36:	f003 f849 	bl	8018ccc <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	2204      	movs	r2, #4
 8015c3e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2200      	movs	r2, #0
 8015c46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8015c4a:	2300      	movs	r3, #0
}
 8015c4c:	4618      	mov	r0, r3
 8015c4e:	3708      	adds	r7, #8
 8015c50:	46bd      	mov	sp, r7
 8015c52:	bd80      	pop	{r7, pc}

08015c54 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b083      	sub	sp, #12
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  return hsram->State;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015c62:	b2db      	uxtb	r3, r3
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	370c      	adds	r7, #12
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr

08015c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b082      	sub	sp, #8
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d101      	bne.n	8015c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	e03f      	b.n	8015d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d106      	bne.n	8015c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	2200      	movs	r2, #0
 8015c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015c96:	6878      	ldr	r0, [r7, #4]
 8015c98:	f7ef feac 	bl	80059f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	2224      	movs	r2, #36	; 0x24
 8015ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	68da      	ldr	r2, [r3, #12]
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f002 fc7e 	bl	80185b6 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	691a      	ldr	r2, [r3, #16]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	695a      	ldr	r2, [r3, #20]
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	68da      	ldr	r2, [r3, #12]
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2200      	movs	r2, #0
 8015cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	2220      	movs	r2, #32
 8015cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2220      	movs	r2, #32
 8015cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015d00:	2300      	movs	r3, #0
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3708      	adds	r7, #8
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}

08015d0a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b082      	sub	sp, #8
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d101      	bne.n	8015d1c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8015d18:	2301      	movs	r3, #1
 8015d1a:	e047      	b.n	8015dac <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015d22:	b2db      	uxtb	r3, r3
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d106      	bne.n	8015d36 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015d30:	6878      	ldr	r0, [r7, #4]
 8015d32:	f7ef fe5f 	bl	80059f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2224      	movs	r2, #36	; 0x24
 8015d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	68da      	ldr	r2, [r3, #12]
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	681b      	ldr	r3, [r3, #0]
 8015d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015d4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015d4e:	6878      	ldr	r0, [r7, #4]
 8015d50:	f002 fc31 	bl	80185b6 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	691a      	ldr	r2, [r3, #16]
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015d62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	695a      	ldr	r2, [r3, #20]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015d72:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	695a      	ldr	r2, [r3, #20]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	f042 0208 	orr.w	r2, r2, #8
 8015d82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	68da      	ldr	r2, [r3, #12]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015d92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	2200      	movs	r2, #0
 8015d98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	2220      	movs	r2, #32
 8015d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	2220      	movs	r2, #32
 8015da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015daa:	2300      	movs	r3, #0
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3708      	adds	r7, #8
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d101      	bne.n	8015dc8 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	e057      	b.n	8015e78 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015dce:	b2db      	uxtb	r3, r3
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d106      	bne.n	8015de2 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015ddc:	6878      	ldr	r0, [r7, #4]
 8015dde:	f7ef fe09 	bl	80059f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	2224      	movs	r2, #36	; 0x24
 8015de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	68da      	ldr	r2, [r3, #12]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015df8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015dfa:	6878      	ldr	r0, [r7, #4]
 8015dfc:	f002 fbdb 	bl	80185b6 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	691a      	ldr	r2, [r3, #16]
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015e0e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	695a      	ldr	r2, [r3, #20]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015e1e:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	691a      	ldr	r2, [r3, #16]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8015e2e:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	691a      	ldr	r2, [r3, #16]
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	f022 0220 	bic.w	r2, r2, #32
 8015e3e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	6919      	ldr	r1, [r3, #16]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	683a      	ldr	r2, [r7, #0]
 8015e4c:	430a      	orrs	r2, r1
 8015e4e:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	68da      	ldr	r2, [r3, #12]
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	681b      	ldr	r3, [r3, #0]
 8015e5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015e5e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2200      	movs	r2, #0
 8015e64:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	2220      	movs	r2, #32
 8015e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	2220      	movs	r2, #32
 8015e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015e76:	2300      	movs	r3, #0
}
 8015e78:	4618      	mov	r0, r3
 8015e7a:	3708      	adds	r7, #8
 8015e7c:	46bd      	mov	sp, r7
 8015e7e:	bd80      	pop	{r7, pc}

08015e80 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b084      	sub	sp, #16
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	460b      	mov	r3, r1
 8015e8a:	607a      	str	r2, [r7, #4]
 8015e8c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015e8e:	68fb      	ldr	r3, [r7, #12]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d101      	bne.n	8015e98 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015e94:	2301      	movs	r3, #1
 8015e96:	e05f      	b.n	8015f58 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015e98:	68fb      	ldr	r3, [r7, #12]
 8015e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015e9e:	b2db      	uxtb	r3, r3
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d106      	bne.n	8015eb2 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015eac:	68f8      	ldr	r0, [r7, #12]
 8015eae:	f7ef fda1 	bl	80059f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2224      	movs	r2, #36	; 0x24
 8015eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	68da      	ldr	r2, [r3, #12]
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015ec8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015eca:	68f8      	ldr	r0, [r7, #12]
 8015ecc:	f002 fb73 	bl	80185b6 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	691a      	ldr	r2, [r3, #16]
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015ede:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	681b      	ldr	r3, [r3, #0]
 8015ee4:	695a      	ldr	r2, [r3, #20]
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015eee:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	691a      	ldr	r2, [r3, #16]
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f022 020f 	bic.w	r2, r2, #15
 8015efe:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015f00:	68fb      	ldr	r3, [r7, #12]
 8015f02:	681b      	ldr	r3, [r3, #0]
 8015f04:	6919      	ldr	r1, [r3, #16]
 8015f06:	7afa      	ldrb	r2, [r7, #11]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	430a      	orrs	r2, r1
 8015f0e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	68da      	ldr	r2, [r3, #12]
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8015f1e:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	68d9      	ldr	r1, [r3, #12]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	687a      	ldr	r2, [r7, #4]
 8015f2c:	430a      	orrs	r2, r1
 8015f2e:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	68da      	ldr	r2, [r3, #12]
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015f3e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	2200      	movs	r2, #0
 8015f44:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	2220      	movs	r2, #32
 8015f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2220      	movs	r2, #32
 8015f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015f56:	2300      	movs	r3, #0
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3710      	adds	r7, #16
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}

08015f60 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8015f60:	b580      	push	{r7, lr}
 8015f62:	b082      	sub	sp, #8
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d101      	bne.n	8015f72 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8015f6e:	2301      	movs	r3, #1
 8015f70:	e021      	b.n	8015fb6 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2224      	movs	r2, #36	; 0x24
 8015f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	68da      	ldr	r2, [r3, #12]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015f88:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8015f8a:	6878      	ldr	r0, [r7, #4]
 8015f8c:	f7ef fd82 	bl	8005a94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	2200      	movs	r2, #0
 8015f94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2200      	movs	r2, #0
 8015fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015fb4:	2300      	movs	r3, #0
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3708      	adds	r7, #8
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	b08a      	sub	sp, #40	; 0x28
 8015fc2:	af02      	add	r7, sp, #8
 8015fc4:	60f8      	str	r0, [r7, #12]
 8015fc6:	60b9      	str	r1, [r7, #8]
 8015fc8:	603b      	str	r3, [r7, #0]
 8015fca:	4613      	mov	r3, r2
 8015fcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015fd8:	b2db      	uxtb	r3, r3
 8015fda:	2b20      	cmp	r3, #32
 8015fdc:	d17c      	bne.n	80160d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d002      	beq.n	8015fea <HAL_UART_Transmit+0x2c>
 8015fe4:	88fb      	ldrh	r3, [r7, #6]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d101      	bne.n	8015fee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015fea:	2301      	movs	r3, #1
 8015fec:	e075      	b.n	80160da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015ff4:	2b01      	cmp	r3, #1
 8015ff6:	d101      	bne.n	8015ffc <HAL_UART_Transmit+0x3e>
 8015ff8:	2302      	movs	r3, #2
 8015ffa:	e06e      	b.n	80160da <HAL_UART_Transmit+0x11c>
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2201      	movs	r2, #1
 8016000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2200      	movs	r2, #0
 8016008:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2221      	movs	r2, #33	; 0x21
 801600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8016012:	f7f0 ffc3 	bl	8006f9c <HAL_GetTick>
 8016016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	88fa      	ldrh	r2, [r7, #6]
 801601c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	88fa      	ldrh	r2, [r7, #6]
 8016022:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	689b      	ldr	r3, [r3, #8]
 8016028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801602c:	d108      	bne.n	8016040 <HAL_UART_Transmit+0x82>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	691b      	ldr	r3, [r3, #16]
 8016032:	2b00      	cmp	r3, #0
 8016034:	d104      	bne.n	8016040 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8016036:	2300      	movs	r3, #0
 8016038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	61bb      	str	r3, [r7, #24]
 801603e:	e003      	b.n	8016048 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016044:	2300      	movs	r3, #0
 8016046:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2200      	movs	r2, #0
 801604c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8016050:	e02a      	b.n	80160a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8016052:	683b      	ldr	r3, [r7, #0]
 8016054:	9300      	str	r3, [sp, #0]
 8016056:	697b      	ldr	r3, [r7, #20]
 8016058:	2200      	movs	r2, #0
 801605a:	2180      	movs	r1, #128	; 0x80
 801605c:	68f8      	ldr	r0, [r7, #12]
 801605e:	f001 ff19 	bl	8017e94 <UART_WaitOnFlagUntilTimeout>
 8016062:	4603      	mov	r3, r0
 8016064:	2b00      	cmp	r3, #0
 8016066:	d001      	beq.n	801606c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8016068:	2303      	movs	r3, #3
 801606a:	e036      	b.n	80160da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 801606c:	69fb      	ldr	r3, [r7, #28]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d10b      	bne.n	801608a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8016072:	69bb      	ldr	r3, [r7, #24]
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	461a      	mov	r2, r3
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016080:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8016082:	69bb      	ldr	r3, [r7, #24]
 8016084:	3302      	adds	r3, #2
 8016086:	61bb      	str	r3, [r7, #24]
 8016088:	e007      	b.n	801609a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801608a:	69fb      	ldr	r3, [r7, #28]
 801608c:	781a      	ldrb	r2, [r3, #0]
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8016094:	69fb      	ldr	r3, [r7, #28]
 8016096:	3301      	adds	r3, #1
 8016098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801609a:	68fb      	ldr	r3, [r7, #12]
 801609c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801609e:	b29b      	uxth	r3, r3
 80160a0:	3b01      	subs	r3, #1
 80160a2:	b29a      	uxth	r2, r3
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80160ac:	b29b      	uxth	r3, r3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d1cf      	bne.n	8016052 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	9300      	str	r3, [sp, #0]
 80160b6:	697b      	ldr	r3, [r7, #20]
 80160b8:	2200      	movs	r2, #0
 80160ba:	2140      	movs	r1, #64	; 0x40
 80160bc:	68f8      	ldr	r0, [r7, #12]
 80160be:	f001 fee9 	bl	8017e94 <UART_WaitOnFlagUntilTimeout>
 80160c2:	4603      	mov	r3, r0
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d001      	beq.n	80160cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80160c8:	2303      	movs	r3, #3
 80160ca:	e006      	b.n	80160da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	2220      	movs	r2, #32
 80160d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	e000      	b.n	80160da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80160d8:	2302      	movs	r3, #2
  }
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3720      	adds	r7, #32
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}

080160e2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80160e2:	b580      	push	{r7, lr}
 80160e4:	b08a      	sub	sp, #40	; 0x28
 80160e6:	af02      	add	r7, sp, #8
 80160e8:	60f8      	str	r0, [r7, #12]
 80160ea:	60b9      	str	r1, [r7, #8]
 80160ec:	603b      	str	r3, [r7, #0]
 80160ee:	4613      	mov	r3, r2
 80160f0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80160f2:	2300      	movs	r3, #0
 80160f4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	2b20      	cmp	r3, #32
 8016100:	f040 808c 	bne.w	801621c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d002      	beq.n	8016110 <HAL_UART_Receive+0x2e>
 801610a:	88fb      	ldrh	r3, [r7, #6]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d101      	bne.n	8016114 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8016110:	2301      	movs	r3, #1
 8016112:	e084      	b.n	801621e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801611a:	2b01      	cmp	r3, #1
 801611c:	d101      	bne.n	8016122 <HAL_UART_Receive+0x40>
 801611e:	2302      	movs	r3, #2
 8016120:	e07d      	b.n	801621e <HAL_UART_Receive+0x13c>
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	2201      	movs	r2, #1
 8016126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	2200      	movs	r2, #0
 801612e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	2222      	movs	r2, #34	; 0x22
 8016134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	2200      	movs	r2, #0
 801613c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801613e:	f7f0 ff2d 	bl	8006f9c <HAL_GetTick>
 8016142:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	88fa      	ldrh	r2, [r7, #6]
 8016148:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	88fa      	ldrh	r2, [r7, #6]
 801614e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	689b      	ldr	r3, [r3, #8]
 8016154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016158:	d108      	bne.n	801616c <HAL_UART_Receive+0x8a>
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	691b      	ldr	r3, [r3, #16]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d104      	bne.n	801616c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8016162:	2300      	movs	r3, #0
 8016164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	61bb      	str	r3, [r7, #24]
 801616a:	e003      	b.n	8016174 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 801616c:	68bb      	ldr	r3, [r7, #8]
 801616e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8016170:	2300      	movs	r3, #0
 8016172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	2200      	movs	r2, #0
 8016178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801617c:	e043      	b.n	8016206 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	697b      	ldr	r3, [r7, #20]
 8016184:	2200      	movs	r2, #0
 8016186:	2120      	movs	r1, #32
 8016188:	68f8      	ldr	r0, [r7, #12]
 801618a:	f001 fe83 	bl	8017e94 <UART_WaitOnFlagUntilTimeout>
 801618e:	4603      	mov	r3, r0
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8016194:	2303      	movs	r3, #3
 8016196:	e042      	b.n	801621e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8016198:	69fb      	ldr	r3, [r7, #28]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d10c      	bne.n	80161b8 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	685b      	ldr	r3, [r3, #4]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80161aa:	b29a      	uxth	r2, r3
 80161ac:	69bb      	ldr	r3, [r7, #24]
 80161ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80161b0:	69bb      	ldr	r3, [r7, #24]
 80161b2:	3302      	adds	r3, #2
 80161b4:	61bb      	str	r3, [r7, #24]
 80161b6:	e01f      	b.n	80161f8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	689b      	ldr	r3, [r3, #8]
 80161bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161c0:	d007      	beq.n	80161d2 <HAL_UART_Receive+0xf0>
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	689b      	ldr	r3, [r3, #8]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d10a      	bne.n	80161e0 <HAL_UART_Receive+0xfe>
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	691b      	ldr	r3, [r3, #16]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d106      	bne.n	80161e0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	b2da      	uxtb	r2, r3
 80161da:	69fb      	ldr	r3, [r7, #28]
 80161dc:	701a      	strb	r2, [r3, #0]
 80161de:	e008      	b.n	80161f2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80161e0:	68fb      	ldr	r3, [r7, #12]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	685b      	ldr	r3, [r3, #4]
 80161e6:	b2db      	uxtb	r3, r3
 80161e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161ec:	b2da      	uxtb	r2, r3
 80161ee:	69fb      	ldr	r3, [r7, #28]
 80161f0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80161f2:	69fb      	ldr	r3, [r7, #28]
 80161f4:	3301      	adds	r3, #1
 80161f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80161fc:	b29b      	uxth	r3, r3
 80161fe:	3b01      	subs	r3, #1
 8016200:	b29a      	uxth	r2, r3
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801620a:	b29b      	uxth	r3, r3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d1b6      	bne.n	801617e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2220      	movs	r2, #32
 8016214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016218:	2300      	movs	r3, #0
 801621a:	e000      	b.n	801621e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 801621c:	2302      	movs	r3, #2
  }
}
 801621e:	4618      	mov	r0, r3
 8016220:	3720      	adds	r7, #32
 8016222:	46bd      	mov	sp, r7
 8016224:	bd80      	pop	{r7, pc}

08016226 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016226:	b480      	push	{r7}
 8016228:	b085      	sub	sp, #20
 801622a:	af00      	add	r7, sp, #0
 801622c:	60f8      	str	r0, [r7, #12]
 801622e:	60b9      	str	r1, [r7, #8]
 8016230:	4613      	mov	r3, r2
 8016232:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801623a:	b2db      	uxtb	r3, r3
 801623c:	2b20      	cmp	r3, #32
 801623e:	d130      	bne.n	80162a2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8016240:	68bb      	ldr	r3, [r7, #8]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d002      	beq.n	801624c <HAL_UART_Transmit_IT+0x26>
 8016246:	88fb      	ldrh	r3, [r7, #6]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d101      	bne.n	8016250 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801624c:	2301      	movs	r3, #1
 801624e:	e029      	b.n	80162a4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016256:	2b01      	cmp	r3, #1
 8016258:	d101      	bne.n	801625e <HAL_UART_Transmit_IT+0x38>
 801625a:	2302      	movs	r3, #2
 801625c:	e022      	b.n	80162a4 <HAL_UART_Transmit_IT+0x7e>
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2201      	movs	r2, #1
 8016262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	68ba      	ldr	r2, [r7, #8]
 801626a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	88fa      	ldrh	r2, [r7, #6]
 8016270:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	88fa      	ldrh	r2, [r7, #6]
 8016276:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	2200      	movs	r2, #0
 801627c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	2221      	movs	r2, #33	; 0x21
 8016282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2200      	movs	r2, #0
 801628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	68da      	ldr	r2, [r3, #12]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801629c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801629e:	2300      	movs	r3, #0
 80162a0:	e000      	b.n	80162a4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80162a2:	2302      	movs	r3, #2
  }
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3714      	adds	r7, #20
 80162a8:	46bd      	mov	sp, r7
 80162aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ae:	4770      	bx	lr

080162b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b084      	sub	sp, #16
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	4613      	mov	r3, r2
 80162bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80162c4:	b2db      	uxtb	r3, r3
 80162c6:	2b20      	cmp	r3, #32
 80162c8:	d11d      	bne.n	8016306 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d002      	beq.n	80162d6 <HAL_UART_Receive_IT+0x26>
 80162d0:	88fb      	ldrh	r3, [r7, #6]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d101      	bne.n	80162da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80162d6:	2301      	movs	r3, #1
 80162d8:	e016      	b.n	8016308 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d101      	bne.n	80162e8 <HAL_UART_Receive_IT+0x38>
 80162e4:	2302      	movs	r3, #2
 80162e6:	e00f      	b.n	8016308 <HAL_UART_Receive_IT+0x58>
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2201      	movs	r2, #1
 80162ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	2200      	movs	r2, #0
 80162f4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80162f6:	88fb      	ldrh	r3, [r7, #6]
 80162f8:	461a      	mov	r2, r3
 80162fa:	68b9      	ldr	r1, [r7, #8]
 80162fc:	68f8      	ldr	r0, [r7, #12]
 80162fe:	f001 fe37 	bl	8017f70 <UART_Start_Receive_IT>
 8016302:	4603      	mov	r3, r0
 8016304:	e000      	b.n	8016308 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8016306:	2302      	movs	r3, #2
  }
}
 8016308:	4618      	mov	r0, r3
 801630a:	3710      	adds	r7, #16
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b08c      	sub	sp, #48	; 0x30
 8016314:	af00      	add	r7, sp, #0
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	4613      	mov	r3, r2
 801631c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016324:	b2db      	uxtb	r3, r3
 8016326:	2b20      	cmp	r3, #32
 8016328:	d165      	bne.n	80163f6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d002      	beq.n	8016336 <HAL_UART_Transmit_DMA+0x26>
 8016330:	88fb      	ldrh	r3, [r7, #6]
 8016332:	2b00      	cmp	r3, #0
 8016334:	d101      	bne.n	801633a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8016336:	2301      	movs	r3, #1
 8016338:	e05e      	b.n	80163f8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016340:	2b01      	cmp	r3, #1
 8016342:	d101      	bne.n	8016348 <HAL_UART_Transmit_DMA+0x38>
 8016344:	2302      	movs	r3, #2
 8016346:	e057      	b.n	80163f8 <HAL_UART_Transmit_DMA+0xe8>
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	2201      	movs	r2, #1
 801634c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8016350:	68ba      	ldr	r2, [r7, #8]
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	88fa      	ldrh	r2, [r7, #6]
 801635a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	88fa      	ldrh	r2, [r7, #6]
 8016360:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	2200      	movs	r2, #0
 8016366:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	2221      	movs	r2, #33	; 0x21
 801636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016374:	4a22      	ldr	r2, [pc, #136]	; (8016400 <HAL_UART_Transmit_DMA+0xf0>)
 8016376:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801637c:	4a21      	ldr	r2, [pc, #132]	; (8016404 <HAL_UART_Transmit_DMA+0xf4>)
 801637e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016384:	4a20      	ldr	r2, [pc, #128]	; (8016408 <HAL_UART_Transmit_DMA+0xf8>)
 8016386:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801638c:	2200      	movs	r2, #0
 801638e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8016390:	f107 0308 	add.w	r3, r7, #8
 8016394:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639c:	6819      	ldr	r1, [r3, #0]
 801639e:	68fb      	ldr	r3, [r7, #12]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	3304      	adds	r3, #4
 80163a4:	461a      	mov	r2, r3
 80163a6:	88fb      	ldrh	r3, [r7, #6]
 80163a8:	f7f2 f861 	bl	800846e <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80163ac:	68fb      	ldr	r3, [r7, #12]
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80163b4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80163b6:	68fb      	ldr	r3, [r7, #12]
 80163b8:	2200      	movs	r2, #0
 80163ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	3314      	adds	r3, #20
 80163c4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163c6:	69bb      	ldr	r3, [r7, #24]
 80163c8:	e853 3f00 	ldrex	r3, [r3]
 80163cc:	617b      	str	r3, [r7, #20]
   return(result);
 80163ce:	697b      	ldr	r3, [r7, #20]
 80163d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80163d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	3314      	adds	r3, #20
 80163dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163de:	627a      	str	r2, [r7, #36]	; 0x24
 80163e0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163e2:	6a39      	ldr	r1, [r7, #32]
 80163e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163e6:	e841 2300 	strex	r3, r2, [r1]
 80163ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80163ec:	69fb      	ldr	r3, [r7, #28]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d1e5      	bne.n	80163be <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80163f2:	2300      	movs	r3, #0
 80163f4:	e000      	b.n	80163f8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80163f6:	2302      	movs	r3, #2
  }
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3730      	adds	r7, #48	; 0x30
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd80      	pop	{r7, pc}
 8016400:	08017bef 	.word	0x08017bef
 8016404:	08017c89 	.word	0x08017c89
 8016408:	08017e01 	.word	0x08017e01

0801640c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b084      	sub	sp, #16
 8016410:	af00      	add	r7, sp, #0
 8016412:	60f8      	str	r0, [r7, #12]
 8016414:	60b9      	str	r1, [r7, #8]
 8016416:	4613      	mov	r3, r2
 8016418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016420:	b2db      	uxtb	r3, r3
 8016422:	2b20      	cmp	r3, #32
 8016424:	d11d      	bne.n	8016462 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8016426:	68bb      	ldr	r3, [r7, #8]
 8016428:	2b00      	cmp	r3, #0
 801642a:	d002      	beq.n	8016432 <HAL_UART_Receive_DMA+0x26>
 801642c:	88fb      	ldrh	r3, [r7, #6]
 801642e:	2b00      	cmp	r3, #0
 8016430:	d101      	bne.n	8016436 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8016432:	2301      	movs	r3, #1
 8016434:	e016      	b.n	8016464 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801643c:	2b01      	cmp	r3, #1
 801643e:	d101      	bne.n	8016444 <HAL_UART_Receive_DMA+0x38>
 8016440:	2302      	movs	r3, #2
 8016442:	e00f      	b.n	8016464 <HAL_UART_Receive_DMA+0x58>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	2201      	movs	r2, #1
 8016448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2200      	movs	r2, #0
 8016450:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8016452:	88fb      	ldrh	r3, [r7, #6]
 8016454:	461a      	mov	r2, r3
 8016456:	68b9      	ldr	r1, [r7, #8]
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	f001 fdc3 	bl	8017fe4 <UART_Start_Receive_DMA>
 801645e:	4603      	mov	r3, r0
 8016460:	e000      	b.n	8016464 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8016462:	2302      	movs	r3, #2
  }
}
 8016464:	4618      	mov	r0, r3
 8016466:	3710      	adds	r7, #16
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 801646c:	b480      	push	{r7}
 801646e:	b09d      	sub	sp, #116	; 0x74
 8016470:	af00      	add	r7, sp, #0
 8016472:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016474:	2300      	movs	r3, #0
 8016476:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801647e:	2b01      	cmp	r3, #1
 8016480:	d101      	bne.n	8016486 <HAL_UART_DMAPause+0x1a>
 8016482:	2302      	movs	r3, #2
 8016484:	e098      	b.n	80165b8 <HAL_UART_DMAPause+0x14c>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2201      	movs	r2, #1
 801648a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	695b      	ldr	r3, [r3, #20]
 8016494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016498:	2b80      	cmp	r3, #128	; 0x80
 801649a:	bf0c      	ite	eq
 801649c:	2301      	moveq	r3, #1
 801649e:	2300      	movne	r3, #0
 80164a0:	b2db      	uxtb	r3, r3
 80164a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80164aa:	b2db      	uxtb	r3, r3
 80164ac:	2b21      	cmp	r3, #33	; 0x21
 80164ae:	d11c      	bne.n	80164ea <HAL_UART_DMAPause+0x7e>
 80164b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d019      	beq.n	80164ea <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	3314      	adds	r3, #20
 80164bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164c0:	e853 3f00 	ldrex	r3, [r3]
 80164c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80164c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80164cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	3314      	adds	r3, #20
 80164d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80164d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80164d8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80164dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80164de:	e841 2300 	strex	r3, r2, [r1]
 80164e2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80164e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d1e5      	bne.n	80164b6 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	695b      	ldr	r3, [r3, #20]
 80164f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164f4:	2b40      	cmp	r3, #64	; 0x40
 80164f6:	bf0c      	ite	eq
 80164f8:	2301      	moveq	r3, #1
 80164fa:	2300      	movne	r3, #0
 80164fc:	b2db      	uxtb	r3, r3
 80164fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016506:	b2db      	uxtb	r3, r3
 8016508:	2b22      	cmp	r3, #34	; 0x22
 801650a:	d150      	bne.n	80165ae <HAL_UART_DMAPause+0x142>
 801650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801650e:	2b00      	cmp	r3, #0
 8016510:	d04d      	beq.n	80165ae <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	330c      	adds	r3, #12
 8016518:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801651a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801651c:	e853 3f00 	ldrex	r3, [r3]
 8016520:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016528:	667b      	str	r3, [r7, #100]	; 0x64
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	330c      	adds	r3, #12
 8016530:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016532:	647a      	str	r2, [r7, #68]	; 0x44
 8016534:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016536:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016538:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801653a:	e841 2300 	strex	r3, r2, [r1]
 801653e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016542:	2b00      	cmp	r3, #0
 8016544:	d1e5      	bne.n	8016512 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	3314      	adds	r3, #20
 801654c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	e853 3f00 	ldrex	r3, [r3]
 8016554:	623b      	str	r3, [r7, #32]
   return(result);
 8016556:	6a3b      	ldr	r3, [r7, #32]
 8016558:	f023 0301 	bic.w	r3, r3, #1
 801655c:	663b      	str	r3, [r7, #96]	; 0x60
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	3314      	adds	r3, #20
 8016564:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016566:	633a      	str	r2, [r7, #48]	; 0x30
 8016568:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801656a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801656e:	e841 2300 	strex	r3, r2, [r1]
 8016572:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016576:	2b00      	cmp	r3, #0
 8016578:	d1e5      	bne.n	8016546 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	3314      	adds	r3, #20
 8016580:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	e853 3f00 	ldrex	r3, [r3]
 8016588:	60fb      	str	r3, [r7, #12]
   return(result);
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016590:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	3314      	adds	r3, #20
 8016598:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801659a:	61fa      	str	r2, [r7, #28]
 801659c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801659e:	69b9      	ldr	r1, [r7, #24]
 80165a0:	69fa      	ldr	r2, [r7, #28]
 80165a2:	e841 2300 	strex	r3, r2, [r1]
 80165a6:	617b      	str	r3, [r7, #20]
   return(result);
 80165a8:	697b      	ldr	r3, [r7, #20]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d1e5      	bne.n	801657a <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2200      	movs	r2, #0
 80165b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80165b6:	2300      	movs	r3, #0
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	3774      	adds	r7, #116	; 0x74
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr

080165c4 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 80165c4:	b480      	push	{r7}
 80165c6:	b09d      	sub	sp, #116	; 0x74
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80165d2:	2b01      	cmp	r3, #1
 80165d4:	d101      	bne.n	80165da <HAL_UART_DMAResume+0x16>
 80165d6:	2302      	movs	r3, #2
 80165d8:	e087      	b.n	80166ea <HAL_UART_DMAResume+0x126>
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	2201      	movs	r2, #1
 80165de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	2b21      	cmp	r3, #33	; 0x21
 80165ec:	d119      	bne.n	8016622 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	3314      	adds	r3, #20
 80165f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165f8:	e853 3f00 	ldrex	r3, [r3]
 80165fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80165fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016604:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	3314      	adds	r3, #20
 801660c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801660e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016610:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016612:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016616:	e841 2300 	strex	r3, r2, [r1]
 801661a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801661c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801661e:	2b00      	cmp	r3, #0
 8016620:	d1e5      	bne.n	80165ee <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016628:	b2db      	uxtb	r3, r3
 801662a:	2b22      	cmp	r3, #34	; 0x22
 801662c:	d158      	bne.n	80166e0 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 801662e:	2300      	movs	r3, #0
 8016630:	60fb      	str	r3, [r7, #12]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	681b      	ldr	r3, [r3, #0]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	60fb      	str	r3, [r7, #12]
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	685b      	ldr	r3, [r3, #4]
 8016640:	60fb      	str	r3, [r7, #12]
 8016642:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	330c      	adds	r3, #12
 801664a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801664c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801664e:	e853 3f00 	ldrex	r3, [r3]
 8016652:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801665a:	66bb      	str	r3, [r7, #104]	; 0x68
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	330c      	adds	r3, #12
 8016662:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016664:	64ba      	str	r2, [r7, #72]	; 0x48
 8016666:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016668:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801666a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801666c:	e841 2300 	strex	r3, r2, [r1]
 8016670:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016674:	2b00      	cmp	r3, #0
 8016676:	d1e5      	bne.n	8016644 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	3314      	adds	r3, #20
 801667e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016682:	e853 3f00 	ldrex	r3, [r3]
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801668a:	f043 0301 	orr.w	r3, r3, #1
 801668e:	667b      	str	r3, [r7, #100]	; 0x64
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	3314      	adds	r3, #20
 8016696:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016698:	637a      	str	r2, [r7, #52]	; 0x34
 801669a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801669c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801669e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80166a0:	e841 2300 	strex	r3, r2, [r1]
 80166a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80166a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d1e5      	bne.n	8016678 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	3314      	adds	r3, #20
 80166b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	e853 3f00 	ldrex	r3, [r3]
 80166ba:	613b      	str	r3, [r7, #16]
   return(result);
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166c2:	663b      	str	r3, [r7, #96]	; 0x60
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	3314      	adds	r3, #20
 80166ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80166cc:	623a      	str	r2, [r7, #32]
 80166ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d0:	69f9      	ldr	r1, [r7, #28]
 80166d2:	6a3a      	ldr	r2, [r7, #32]
 80166d4:	e841 2300 	strex	r3, r2, [r1]
 80166d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d1e5      	bne.n	80166ac <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	2200      	movs	r2, #0
 80166e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80166e8:	2300      	movs	r3, #0
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3774      	adds	r7, #116	; 0x74
 80166ee:	46bd      	mov	sp, r7
 80166f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f4:	4770      	bx	lr

080166f6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80166f6:	b580      	push	{r7, lr}
 80166f8:	b090      	sub	sp, #64	; 0x40
 80166fa:	af00      	add	r7, sp, #0
 80166fc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80166fe:	2300      	movs	r3, #0
 8016700:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	695b      	ldr	r3, [r3, #20]
 8016708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801670c:	2b80      	cmp	r3, #128	; 0x80
 801670e:	bf0c      	ite	eq
 8016710:	2301      	moveq	r3, #1
 8016712:	2300      	movne	r3, #0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801671e:	b2db      	uxtb	r3, r3
 8016720:	2b21      	cmp	r3, #33	; 0x21
 8016722:	d128      	bne.n	8016776 <HAL_UART_DMAStop+0x80>
 8016724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016726:	2b00      	cmp	r3, #0
 8016728:	d025      	beq.n	8016776 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	3314      	adds	r3, #20
 8016730:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016734:	e853 3f00 	ldrex	r3, [r3]
 8016738:	623b      	str	r3, [r7, #32]
   return(result);
 801673a:	6a3b      	ldr	r3, [r7, #32]
 801673c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016740:	63bb      	str	r3, [r7, #56]	; 0x38
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	3314      	adds	r3, #20
 8016748:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801674a:	633a      	str	r2, [r7, #48]	; 0x30
 801674c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801674e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016752:	e841 2300 	strex	r3, r2, [r1]
 8016756:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675a:	2b00      	cmp	r3, #0
 801675c:	d1e5      	bne.n	801672a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016762:	2b00      	cmp	r3, #0
 8016764:	d004      	beq.n	8016770 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801676a:	4618      	mov	r0, r3
 801676c:	f7f1 fed7 	bl	800851e <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f001 fcd1 	bl	8018118 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	695b      	ldr	r3, [r3, #20]
 801677c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016780:	2b40      	cmp	r3, #64	; 0x40
 8016782:	bf0c      	ite	eq
 8016784:	2301      	moveq	r3, #1
 8016786:	2300      	movne	r3, #0
 8016788:	b2db      	uxtb	r3, r3
 801678a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016792:	b2db      	uxtb	r3, r3
 8016794:	2b22      	cmp	r3, #34	; 0x22
 8016796:	d128      	bne.n	80167ea <HAL_UART_DMAStop+0xf4>
 8016798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801679a:	2b00      	cmp	r3, #0
 801679c:	d025      	beq.n	80167ea <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	3314      	adds	r3, #20
 80167a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167a6:	693b      	ldr	r3, [r7, #16]
 80167a8:	e853 3f00 	ldrex	r3, [r3]
 80167ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80167b4:	637b      	str	r3, [r7, #52]	; 0x34
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	3314      	adds	r3, #20
 80167bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80167be:	61fa      	str	r2, [r7, #28]
 80167c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167c2:	69b9      	ldr	r1, [r7, #24]
 80167c4:	69fa      	ldr	r2, [r7, #28]
 80167c6:	e841 2300 	strex	r3, r2, [r1]
 80167ca:	617b      	str	r3, [r7, #20]
   return(result);
 80167cc:	697b      	ldr	r3, [r7, #20]
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d1e5      	bne.n	801679e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d004      	beq.n	80167e4 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167de:	4618      	mov	r0, r3
 80167e0:	f7f1 fe9d 	bl	800851e <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f001 fcbf 	bl	8018168 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80167ea:	2300      	movs	r3, #0
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3740      	adds	r7, #64	; 0x40
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b088      	sub	sp, #32
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	603b      	str	r3, [r7, #0]
 8016800:	4613      	mov	r3, r2
 8016802:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801680a:	b2db      	uxtb	r3, r3
 801680c:	2b20      	cmp	r3, #32
 801680e:	f040 80c9 	bne.w	80169a4 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d002      	beq.n	801681e <HAL_UARTEx_ReceiveToIdle+0x2a>
 8016818:	88fb      	ldrh	r3, [r7, #6]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d101      	bne.n	8016822 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 801681e:	2301      	movs	r3, #1
 8016820:	e0c1      	b.n	80169a6 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016828:	2b01      	cmp	r3, #1
 801682a:	d101      	bne.n	8016830 <HAL_UARTEx_ReceiveToIdle+0x3c>
 801682c:	2302      	movs	r3, #2
 801682e:	e0ba      	b.n	80169a6 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8016830:	68fb      	ldr	r3, [r7, #12]
 8016832:	2201      	movs	r2, #1
 8016834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	2200      	movs	r2, #0
 801683c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	2222      	movs	r2, #34	; 0x22
 8016842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	2201      	movs	r2, #1
 801684a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801684c:	f7f0 fba6 	bl	8006f9c <HAL_GetTick>
 8016850:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8016852:	68fb      	ldr	r3, [r7, #12]
 8016854:	88fa      	ldrh	r2, [r7, #6]
 8016856:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	88fa      	ldrh	r2, [r7, #6]
 801685c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	689b      	ldr	r3, [r3, #8]
 8016862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016866:	d108      	bne.n	801687a <HAL_UARTEx_ReceiveToIdle+0x86>
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	691b      	ldr	r3, [r3, #16]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d104      	bne.n	801687a <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8016870:	2300      	movs	r3, #0
 8016872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	61bb      	str	r3, [r7, #24]
 8016878:	e003      	b.n	8016882 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 801687a:	68bb      	ldr	r3, [r7, #8]
 801687c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801687e:	2300      	movs	r3, #0
 8016880:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	2200      	movs	r2, #0
 8016886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	2200      	movs	r2, #0
 801688e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8016890:	e074      	b.n	801697c <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f003 0310 	and.w	r3, r3, #16
 801689c:	2b10      	cmp	r3, #16
 801689e:	d114      	bne.n	80168ca <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80168a0:	2300      	movs	r3, #0
 80168a2:	613b      	str	r3, [r7, #16]
 80168a4:	68fb      	ldr	r3, [r7, #12]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	613b      	str	r3, [r7, #16]
 80168ac:	68fb      	ldr	r3, [r7, #12]
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	685b      	ldr	r3, [r3, #4]
 80168b2:	613b      	str	r3, [r7, #16]
 80168b4:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d005      	beq.n	80168ca <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	2220      	movs	r2, #32
 80168c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 80168c6:	2300      	movs	r3, #0
 80168c8:	e06d      	b.n	80169a6 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f003 0320 	and.w	r3, r3, #32
 80168d4:	2b20      	cmp	r3, #32
 80168d6:	d13c      	bne.n	8016952 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 80168d8:	69fb      	ldr	r3, [r7, #28]
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d10c      	bne.n	80168f8 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	685b      	ldr	r3, [r3, #4]
 80168e4:	b29b      	uxth	r3, r3
 80168e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80168ea:	b29a      	uxth	r2, r3
 80168ec:	69bb      	ldr	r3, [r7, #24]
 80168ee:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80168f0:	69bb      	ldr	r3, [r7, #24]
 80168f2:	3302      	adds	r3, #2
 80168f4:	61bb      	str	r3, [r7, #24]
 80168f6:	e01f      	b.n	8016938 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	689b      	ldr	r3, [r3, #8]
 80168fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016900:	d007      	beq.n	8016912 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8016902:	68fb      	ldr	r3, [r7, #12]
 8016904:	689b      	ldr	r3, [r3, #8]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d10a      	bne.n	8016920 <HAL_UARTEx_ReceiveToIdle+0x12c>
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	691b      	ldr	r3, [r3, #16]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d106      	bne.n	8016920 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	685b      	ldr	r3, [r3, #4]
 8016918:	b2da      	uxtb	r2, r3
 801691a:	69fb      	ldr	r3, [r7, #28]
 801691c:	701a      	strb	r2, [r3, #0]
 801691e:	e008      	b.n	8016932 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	b2db      	uxtb	r3, r3
 8016928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801692c:	b2da      	uxtb	r2, r3
 801692e:	69fb      	ldr	r3, [r7, #28]
 8016930:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8016932:	69fb      	ldr	r3, [r7, #28]
 8016934:	3301      	adds	r3, #1
 8016936:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	881b      	ldrh	r3, [r3, #0]
 801693c:	3301      	adds	r3, #1
 801693e:	b29a      	uxth	r2, r3
 8016940:	683b      	ldr	r3, [r7, #0]
 8016942:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016948:	b29b      	uxth	r3, r3
 801694a:	3b01      	subs	r3, #1
 801694c:	b29a      	uxth	r2, r3
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016958:	d010      	beq.n	801697c <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801695a:	f7f0 fb1f 	bl	8006f9c <HAL_GetTick>
 801695e:	4602      	mov	r2, r0
 8016960:	697b      	ldr	r3, [r7, #20]
 8016962:	1ad3      	subs	r3, r2, r3
 8016964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016966:	429a      	cmp	r2, r3
 8016968:	d302      	bcc.n	8016970 <HAL_UARTEx_ReceiveToIdle+0x17c>
 801696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801696c:	2b00      	cmp	r3, #0
 801696e:	d105      	bne.n	801697c <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	2220      	movs	r2, #32
 8016974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8016978:	2303      	movs	r3, #3
 801697a:	e014      	b.n	80169a6 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016980:	b29b      	uxth	r3, r3
 8016982:	2b00      	cmp	r3, #0
 8016984:	d185      	bne.n	8016892 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801698e:	b29b      	uxth	r3, r3
 8016990:	1ad3      	subs	r3, r2, r3
 8016992:	b29a      	uxth	r2, r3
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	2220      	movs	r2, #32
 801699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80169a0:	2300      	movs	r3, #0
 80169a2:	e000      	b.n	80169a6 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 80169a4:	2302      	movs	r3, #2
  }
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3720      	adds	r7, #32
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b08c      	sub	sp, #48	; 0x30
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	60f8      	str	r0, [r7, #12]
 80169b6:	60b9      	str	r1, [r7, #8]
 80169b8:	4613      	mov	r3, r2
 80169ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80169c2:	b2db      	uxtb	r3, r3
 80169c4:	2b20      	cmp	r3, #32
 80169c6:	d152      	bne.n	8016a6e <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80169c8:	68bb      	ldr	r3, [r7, #8]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d002      	beq.n	80169d4 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 80169ce:	88fb      	ldrh	r3, [r7, #6]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 80169d4:	2301      	movs	r3, #1
 80169d6:	e04b      	b.n	8016a70 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 80169d8:	68fb      	ldr	r3, [r7, #12]
 80169da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80169de:	2b01      	cmp	r3, #1
 80169e0:	d101      	bne.n	80169e6 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 80169e2:	2302      	movs	r3, #2
 80169e4:	e044      	b.n	8016a70 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	2201      	movs	r2, #1
 80169ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2201      	movs	r2, #1
 80169f2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 80169f4:	88fb      	ldrh	r3, [r7, #6]
 80169f6:	461a      	mov	r2, r3
 80169f8:	68b9      	ldr	r1, [r7, #8]
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	f001 fab8 	bl	8017f70 <UART_Start_Receive_IT>
 8016a00:	4603      	mov	r3, r0
 8016a02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d12c      	bne.n	8016a68 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016a12:	2b01      	cmp	r3, #1
 8016a14:	d125      	bne.n	8016a62 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016a16:	2300      	movs	r3, #0
 8016a18:	613b      	str	r3, [r7, #16]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	613b      	str	r3, [r7, #16]
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	685b      	ldr	r3, [r3, #4]
 8016a28:	613b      	str	r3, [r7, #16]
 8016a2a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	330c      	adds	r3, #12
 8016a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a34:	69bb      	ldr	r3, [r7, #24]
 8016a36:	e853 3f00 	ldrex	r3, [r3]
 8016a3a:	617b      	str	r3, [r7, #20]
   return(result);
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	f043 0310 	orr.w	r3, r3, #16
 8016a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	330c      	adds	r3, #12
 8016a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a4c:	627a      	str	r2, [r7, #36]	; 0x24
 8016a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a50:	6a39      	ldr	r1, [r7, #32]
 8016a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016a54:	e841 2300 	strex	r3, r2, [r1]
 8016a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8016a5a:	69fb      	ldr	r3, [r7, #28]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d1e5      	bne.n	8016a2c <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8016a60:	e002      	b.n	8016a68 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8016a62:	2301      	movs	r3, #1
 8016a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016a6c:	e000      	b.n	8016a70 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8016a6e:	2302      	movs	r3, #2
  }
}
 8016a70:	4618      	mov	r0, r3
 8016a72:	3730      	adds	r7, #48	; 0x30
 8016a74:	46bd      	mov	sp, r7
 8016a76:	bd80      	pop	{r7, pc}

08016a78 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b08c      	sub	sp, #48	; 0x30
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	60f8      	str	r0, [r7, #12]
 8016a80:	60b9      	str	r1, [r7, #8]
 8016a82:	4613      	mov	r3, r2
 8016a84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b20      	cmp	r3, #32
 8016a90:	d152      	bne.n	8016b38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d002      	beq.n	8016a9e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016a98:	88fb      	ldrh	r3, [r7, #6]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d101      	bne.n	8016aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	e04b      	b.n	8016b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016aa8:	2b01      	cmp	r3, #1
 8016aaa:	d101      	bne.n	8016ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8016aac:	2302      	movs	r3, #2
 8016aae:	e044      	b.n	8016b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	2201      	movs	r2, #1
 8016ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2201      	movs	r2, #1
 8016abc:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8016abe:	88fb      	ldrh	r3, [r7, #6]
 8016ac0:	461a      	mov	r2, r3
 8016ac2:	68b9      	ldr	r1, [r7, #8]
 8016ac4:	68f8      	ldr	r0, [r7, #12]
 8016ac6:	f001 fa8d 	bl	8017fe4 <UART_Start_Receive_DMA>
 8016aca:	4603      	mov	r3, r0
 8016acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d12c      	bne.n	8016b32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ad8:	68fb      	ldr	r3, [r7, #12]
 8016ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016adc:	2b01      	cmp	r3, #1
 8016ade:	d125      	bne.n	8016b2c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	613b      	str	r3, [r7, #16]
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	613b      	str	r3, [r7, #16]
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	613b      	str	r3, [r7, #16]
 8016af4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	330c      	adds	r3, #12
 8016afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016afe:	69bb      	ldr	r3, [r7, #24]
 8016b00:	e853 3f00 	ldrex	r3, [r3]
 8016b04:	617b      	str	r3, [r7, #20]
   return(result);
 8016b06:	697b      	ldr	r3, [r7, #20]
 8016b08:	f043 0310 	orr.w	r3, r3, #16
 8016b0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	330c      	adds	r3, #12
 8016b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016b16:	627a      	str	r2, [r7, #36]	; 0x24
 8016b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b1a:	6a39      	ldr	r1, [r7, #32]
 8016b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b1e:	e841 2300 	strex	r3, r2, [r1]
 8016b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d1e5      	bne.n	8016af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8016b2a:	e002      	b.n	8016b32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8016b2c:	2301      	movs	r3, #1
 8016b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8016b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016b36:	e000      	b.n	8016b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8016b38:	2302      	movs	r3, #2
  }
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3730      	adds	r7, #48	; 0x30
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8016b42:	b580      	push	{r7, lr}
 8016b44:	b0a0      	sub	sp, #128	; 0x80
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	681b      	ldr	r3, [r3, #0]
 8016b4e:	330c      	adds	r3, #12
 8016b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016b54:	e853 3f00 	ldrex	r3, [r3]
 8016b58:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016b5c:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016b60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	330c      	adds	r3, #12
 8016b68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016b6a:	66ba      	str	r2, [r7, #104]	; 0x68
 8016b6c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b6e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016b72:	e841 2300 	strex	r3, r2, [r1]
 8016b76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d1e5      	bne.n	8016b4a <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	3314      	adds	r3, #20
 8016b84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016b88:	e853 3f00 	ldrex	r3, [r3]
 8016b8c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016b90:	f023 0301 	bic.w	r3, r3, #1
 8016b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	3314      	adds	r3, #20
 8016b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016b9e:	657a      	str	r2, [r7, #84]	; 0x54
 8016ba0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ba4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ba6:	e841 2300 	strex	r3, r2, [r1]
 8016baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d1e5      	bne.n	8016b7e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016bb6:	2b01      	cmp	r3, #1
 8016bb8:	d119      	bne.n	8016bee <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	330c      	adds	r3, #12
 8016bc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bc4:	e853 3f00 	ldrex	r3, [r3]
 8016bc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bcc:	f023 0310 	bic.w	r3, r3, #16
 8016bd0:	677b      	str	r3, [r7, #116]	; 0x74
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	330c      	adds	r3, #12
 8016bd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8016bda:	643a      	str	r2, [r7, #64]	; 0x40
 8016bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016be0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016be2:	e841 2300 	strex	r3, r2, [r1]
 8016be6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d1e5      	bne.n	8016bba <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	695b      	ldr	r3, [r3, #20]
 8016bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016bf8:	2b80      	cmp	r3, #128	; 0x80
 8016bfa:	d136      	bne.n	8016c6a <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	3314      	adds	r3, #20
 8016c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c04:	6a3b      	ldr	r3, [r7, #32]
 8016c06:	e853 3f00 	ldrex	r3, [r3]
 8016c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8016c0c:	69fb      	ldr	r3, [r7, #28]
 8016c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016c12:	673b      	str	r3, [r7, #112]	; 0x70
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	3314      	adds	r3, #20
 8016c1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016c1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016c1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c24:	e841 2300 	strex	r3, r2, [r1]
 8016c28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1e5      	bne.n	8016bfc <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d018      	beq.n	8016c6a <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c44:	4618      	mov	r0, r3
 8016c46:	f7f1 fc6a 	bl	800851e <HAL_DMA_Abort>
 8016c4a:	4603      	mov	r3, r0
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d00c      	beq.n	8016c6a <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016c54:	4618      	mov	r0, r3
 8016c56:	f7f2 f826 	bl	8008ca6 <HAL_DMA_GetError>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	2b20      	cmp	r3, #32
 8016c5e:	d104      	bne.n	8016c6a <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2210      	movs	r2, #16
 8016c64:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016c66:	2303      	movs	r3, #3
 8016c68:	e052      	b.n	8016d10 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	695b      	ldr	r3, [r3, #20]
 8016c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c74:	2b40      	cmp	r3, #64	; 0x40
 8016c76:	d136      	bne.n	8016ce6 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	3314      	adds	r3, #20
 8016c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	e853 3f00 	ldrex	r3, [r3]
 8016c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8016c88:	68bb      	ldr	r3, [r7, #8]
 8016c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016c8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	3314      	adds	r3, #20
 8016c96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016c98:	61ba      	str	r2, [r7, #24]
 8016c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c9c:	6979      	ldr	r1, [r7, #20]
 8016c9e:	69ba      	ldr	r2, [r7, #24]
 8016ca0:	e841 2300 	strex	r3, r2, [r1]
 8016ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d1e5      	bne.n	8016c78 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d018      	beq.n	8016ce6 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb8:	2200      	movs	r2, #0
 8016cba:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7f1 fc2c 	bl	800851e <HAL_DMA_Abort>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d00c      	beq.n	8016ce6 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7f1 ffe8 	bl	8008ca6 <HAL_DMA_GetError>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b20      	cmp	r3, #32
 8016cda:	d104      	bne.n	8016ce6 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2210      	movs	r2, #16
 8016ce0:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016ce2:	2303      	movs	r3, #3
 8016ce4:	e014      	b.n	8016d10 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2220      	movs	r2, #32
 8016cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2220      	movs	r2, #32
 8016d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016d0e:	2300      	movs	r3, #0
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3780      	adds	r7, #128	; 0x80
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b08e      	sub	sp, #56	; 0x38
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	330c      	adds	r3, #12
 8016d26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d28:	6a3b      	ldr	r3, [r7, #32]
 8016d2a:	e853 3f00 	ldrex	r3, [r3]
 8016d2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016d30:	69fb      	ldr	r3, [r7, #28]
 8016d32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016d36:	637b      	str	r3, [r7, #52]	; 0x34
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	330c      	adds	r3, #12
 8016d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016d42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d48:	e841 2300 	strex	r3, r2, [r1]
 8016d4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d1e5      	bne.n	8016d20 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	695b      	ldr	r3, [r3, #20]
 8016d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016d5e:	2b80      	cmp	r3, #128	; 0x80
 8016d60:	d136      	bne.n	8016dd0 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	3314      	adds	r3, #20
 8016d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	e853 3f00 	ldrex	r3, [r3]
 8016d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d72:	68bb      	ldr	r3, [r7, #8]
 8016d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016d78:	633b      	str	r3, [r7, #48]	; 0x30
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	3314      	adds	r3, #20
 8016d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d82:	61ba      	str	r2, [r7, #24]
 8016d84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d86:	6979      	ldr	r1, [r7, #20]
 8016d88:	69ba      	ldr	r2, [r7, #24]
 8016d8a:	e841 2300 	strex	r3, r2, [r1]
 8016d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d1e5      	bne.n	8016d62 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d018      	beq.n	8016dd0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016da2:	2200      	movs	r2, #0
 8016da4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016daa:	4618      	mov	r0, r3
 8016dac:	f7f1 fbb7 	bl	800851e <HAL_DMA_Abort>
 8016db0:	4603      	mov	r3, r0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d00c      	beq.n	8016dd0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dba:	4618      	mov	r0, r3
 8016dbc:	f7f1 ff73 	bl	8008ca6 <HAL_DMA_GetError>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	2b20      	cmp	r3, #32
 8016dc4:	d104      	bne.n	8016dd0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	2210      	movs	r2, #16
 8016dca:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016dcc:	2303      	movs	r3, #3
 8016dce:	e007      	b.n	8016de0 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2220      	movs	r2, #32
 8016dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016dde:	2300      	movs	r3, #0
}
 8016de0:	4618      	mov	r0, r3
 8016de2:	3738      	adds	r7, #56	; 0x38
 8016de4:	46bd      	mov	sp, r7
 8016de6:	bd80      	pop	{r7, pc}

08016de8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b09a      	sub	sp, #104	; 0x68
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	330c      	adds	r3, #12
 8016df6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dfa:	e853 3f00 	ldrex	r3, [r3]
 8016dfe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016e06:	667b      	str	r3, [r7, #100]	; 0x64
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	330c      	adds	r3, #12
 8016e0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016e10:	657a      	str	r2, [r7, #84]	; 0x54
 8016e12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016e16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016e18:	e841 2300 	strex	r3, r2, [r1]
 8016e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d1e5      	bne.n	8016df0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	3314      	adds	r3, #20
 8016e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e2e:	e853 3f00 	ldrex	r3, [r3]
 8016e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e36:	f023 0301 	bic.w	r3, r3, #1
 8016e3a:	663b      	str	r3, [r7, #96]	; 0x60
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	3314      	adds	r3, #20
 8016e42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016e44:	643a      	str	r2, [r7, #64]	; 0x40
 8016e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016e4c:	e841 2300 	strex	r3, r2, [r1]
 8016e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d1e5      	bne.n	8016e24 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e5c:	2b01      	cmp	r3, #1
 8016e5e:	d119      	bne.n	8016e94 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	681b      	ldr	r3, [r3, #0]
 8016e64:	330c      	adds	r3, #12
 8016e66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e68:	6a3b      	ldr	r3, [r7, #32]
 8016e6a:	e853 3f00 	ldrex	r3, [r3]
 8016e6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016e70:	69fb      	ldr	r3, [r7, #28]
 8016e72:	f023 0310 	bic.w	r3, r3, #16
 8016e76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	330c      	adds	r3, #12
 8016e7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016e80:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016e82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e88:	e841 2300 	strex	r3, r2, [r1]
 8016e8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d1e5      	bne.n	8016e60 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	695b      	ldr	r3, [r3, #20]
 8016e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e9e:	2b40      	cmp	r3, #64	; 0x40
 8016ea0:	d136      	bne.n	8016f10 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016ea2:	687b      	ldr	r3, [r7, #4]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	3314      	adds	r3, #20
 8016ea8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016eaa:	68fb      	ldr	r3, [r7, #12]
 8016eac:	e853 3f00 	ldrex	r3, [r3]
 8016eb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8016eb2:	68bb      	ldr	r3, [r7, #8]
 8016eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016eb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	3314      	adds	r3, #20
 8016ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016ec2:	61ba      	str	r2, [r7, #24]
 8016ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ec6:	6979      	ldr	r1, [r7, #20]
 8016ec8:	69ba      	ldr	r2, [r7, #24]
 8016eca:	e841 2300 	strex	r3, r2, [r1]
 8016ece:	613b      	str	r3, [r7, #16]
   return(result);
 8016ed0:	693b      	ldr	r3, [r7, #16]
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d1e5      	bne.n	8016ea2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d018      	beq.n	8016f10 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7f1 fb17 	bl	800851e <HAL_DMA_Abort>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d00c      	beq.n	8016f10 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016efa:	4618      	mov	r0, r3
 8016efc:	f7f1 fed3 	bl	8008ca6 <HAL_DMA_GetError>
 8016f00:	4603      	mov	r3, r0
 8016f02:	2b20      	cmp	r3, #32
 8016f04:	d104      	bne.n	8016f10 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2210      	movs	r2, #16
 8016f0a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016f0c:	2303      	movs	r3, #3
 8016f0e:	e00a      	b.n	8016f26 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2200      	movs	r2, #0
 8016f14:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2220      	movs	r2, #32
 8016f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2200      	movs	r2, #0
 8016f22:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016f24:	2300      	movs	r3, #0
}
 8016f26:	4618      	mov	r0, r3
 8016f28:	3768      	adds	r7, #104	; 0x68
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}

08016f2e <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 8016f2e:	b580      	push	{r7, lr}
 8016f30:	b0a2      	sub	sp, #136	; 0x88
 8016f32:	af00      	add	r7, sp, #0
 8016f34:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016f36:	2301      	movs	r3, #1
 8016f38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	330c      	adds	r3, #12
 8016f42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016f46:	e853 3f00 	ldrex	r3, [r3]
 8016f4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016f4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016f4e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8016f52:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	330c      	adds	r3, #12
 8016f5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016f62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016f66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f68:	e841 2300 	strex	r3, r2, [r1]
 8016f6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d1e3      	bne.n	8016f3c <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	3314      	adds	r3, #20
 8016f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f7e:	e853 3f00 	ldrex	r3, [r3]
 8016f82:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016f86:	f023 0301 	bic.w	r3, r3, #1
 8016f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	3314      	adds	r3, #20
 8016f92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016f94:	65ba      	str	r2, [r7, #88]	; 0x58
 8016f96:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f9c:	e841 2300 	strex	r3, r2, [r1]
 8016fa0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d1e5      	bne.n	8016f74 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fac:	2b01      	cmp	r3, #1
 8016fae:	d119      	bne.n	8016fe4 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	330c      	adds	r3, #12
 8016fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fba:	e853 3f00 	ldrex	r3, [r3]
 8016fbe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016fc2:	f023 0310 	bic.w	r3, r3, #16
 8016fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	330c      	adds	r3, #12
 8016fce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016fd0:	647a      	str	r2, [r7, #68]	; 0x44
 8016fd2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016fd8:	e841 2300 	strex	r3, r2, [r1]
 8016fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	d1e5      	bne.n	8016fb0 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d00f      	beq.n	801700c <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	695b      	ldr	r3, [r3, #20]
 8016ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ff6:	2b80      	cmp	r3, #128	; 0x80
 8016ff8:	d104      	bne.n	8017004 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ffe:	4a54      	ldr	r2, [pc, #336]	; (8017150 <HAL_UART_Abort_IT+0x222>)
 8017000:	651a      	str	r2, [r3, #80]	; 0x50
 8017002:	e003      	b.n	801700c <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017008:	2200      	movs	r2, #0
 801700a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00f      	beq.n	8017034 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	695b      	ldr	r3, [r3, #20]
 801701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801701e:	2b40      	cmp	r3, #64	; 0x40
 8017020:	d104      	bne.n	801702c <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017026:	4a4b      	ldr	r2, [pc, #300]	; (8017154 <HAL_UART_Abort_IT+0x226>)
 8017028:	651a      	str	r2, [r3, #80]	; 0x50
 801702a:	e003      	b.n	8017034 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017030:	2200      	movs	r2, #0
 8017032:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	695b      	ldr	r3, [r3, #20]
 801703a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801703e:	2b80      	cmp	r3, #128	; 0x80
 8017040:	d12d      	bne.n	801709e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	3314      	adds	r3, #20
 8017048:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	e853 3f00 	ldrex	r3, [r3]
 8017050:	623b      	str	r3, [r7, #32]
   return(result);
 8017052:	6a3b      	ldr	r3, [r7, #32]
 8017054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017058:	677b      	str	r3, [r7, #116]	; 0x74
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	681b      	ldr	r3, [r3, #0]
 801705e:	3314      	adds	r3, #20
 8017060:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017062:	633a      	str	r2, [r7, #48]	; 0x30
 8017064:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017066:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801706a:	e841 2300 	strex	r3, r2, [r1]
 801706e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017072:	2b00      	cmp	r3, #0
 8017074:	d1e5      	bne.n	8017042 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801707a:	2b00      	cmp	r3, #0
 801707c:	d00f      	beq.n	801709e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017082:	4618      	mov	r0, r3
 8017084:	f7f1 fabb 	bl	80085fe <HAL_DMA_Abort_IT>
 8017088:	4603      	mov	r3, r0
 801708a:	2b00      	cmp	r3, #0
 801708c:	d004      	beq.n	8017098 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017092:	2200      	movs	r2, #0
 8017094:	651a      	str	r2, [r3, #80]	; 0x50
 8017096:	e002      	b.n	801709e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8017098:	2300      	movs	r3, #0
 801709a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	695b      	ldr	r3, [r3, #20]
 80170a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170a8:	2b40      	cmp	r3, #64	; 0x40
 80170aa:	d130      	bne.n	801710e <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	3314      	adds	r3, #20
 80170b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	e853 3f00 	ldrex	r3, [r3]
 80170ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80170c2:	673b      	str	r3, [r7, #112]	; 0x70
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	3314      	adds	r3, #20
 80170ca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80170cc:	61fa      	str	r2, [r7, #28]
 80170ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170d0:	69b9      	ldr	r1, [r7, #24]
 80170d2:	69fa      	ldr	r2, [r7, #28]
 80170d4:	e841 2300 	strex	r3, r2, [r1]
 80170d8:	617b      	str	r3, [r7, #20]
   return(result);
 80170da:	697b      	ldr	r3, [r7, #20]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d1e5      	bne.n	80170ac <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d012      	beq.n	801710e <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7f1 fa86 	bl	80085fe <HAL_DMA_Abort_IT>
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d007      	beq.n	8017108 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170fc:	2200      	movs	r2, #0
 80170fe:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8017100:	2301      	movs	r3, #1
 8017102:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017106:	e002      	b.n	801710e <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8017108:	2300      	movs	r3, #0
 801710a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 801710e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017112:	2b01      	cmp	r3, #1
 8017114:	d116      	bne.n	8017144 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	2200      	movs	r2, #0
 801711a:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	2200      	movs	r2, #0
 8017120:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	2200      	movs	r2, #0
 8017126:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2220      	movs	r2, #32
 801712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2220      	movs	r2, #32
 8017134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2200      	movs	r2, #0
 801713c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 801713e:	6878      	ldr	r0, [r7, #4]
 8017140:	f000 fbe5 	bl	801790e <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8017144:	2300      	movs	r3, #0
}
 8017146:	4618      	mov	r0, r3
 8017148:	3788      	adds	r7, #136	; 0x88
 801714a:	46bd      	mov	sp, r7
 801714c:	bd80      	pop	{r7, pc}
 801714e:	bf00      	nop
 8017150:	08018257 	.word	0x08018257
 8017154:	080182b7 	.word	0x080182b7

08017158 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 8017158:	b580      	push	{r7, lr}
 801715a:	b08e      	sub	sp, #56	; 0x38
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	330c      	adds	r3, #12
 8017166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017168:	6a3b      	ldr	r3, [r7, #32]
 801716a:	e853 3f00 	ldrex	r3, [r3]
 801716e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017176:	637b      	str	r3, [r7, #52]	; 0x34
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	330c      	adds	r3, #12
 801717e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017188:	e841 2300 	strex	r3, r2, [r1]
 801718c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017190:	2b00      	cmp	r3, #0
 8017192:	d1e5      	bne.n	8017160 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	695b      	ldr	r3, [r3, #20]
 801719a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801719e:	2b80      	cmp	r3, #128	; 0x80
 80171a0:	d13c      	bne.n	801721c <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	3314      	adds	r3, #20
 80171a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	e853 3f00 	ldrex	r3, [r3]
 80171b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80171b2:	68bb      	ldr	r3, [r7, #8]
 80171b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80171b8:	633b      	str	r3, [r7, #48]	; 0x30
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	3314      	adds	r3, #20
 80171c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80171c2:	61ba      	str	r2, [r7, #24]
 80171c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171c6:	6979      	ldr	r1, [r7, #20]
 80171c8:	69ba      	ldr	r2, [r7, #24]
 80171ca:	e841 2300 	strex	r3, r2, [r1]
 80171ce:	613b      	str	r3, [r7, #16]
   return(result);
 80171d0:	693b      	ldr	r3, [r7, #16]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d1e5      	bne.n	80171a2 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d013      	beq.n	8017206 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171e2:	4a16      	ldr	r2, [pc, #88]	; (801723c <HAL_UART_AbortTransmit_IT+0xe4>)
 80171e4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7f1 fa07 	bl	80085fe <HAL_DMA_Abort_IT>
 80171f0:	4603      	mov	r3, r0
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d01c      	beq.n	8017230 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80171fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171fc:	687a      	ldr	r2, [r7, #4]
 80171fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8017200:	4610      	mov	r0, r2
 8017202:	4798      	blx	r3
 8017204:	e014      	b.n	8017230 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2200      	movs	r2, #0
 801720a:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2220      	movs	r2, #32
 8017210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8017214:	6878      	ldr	r0, [r7, #4]
 8017216:	f000 fb84 	bl	8017922 <HAL_UART_AbortTransmitCpltCallback>
 801721a:	e009      	b.n	8017230 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	2200      	movs	r2, #0
 8017220:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	2220      	movs	r2, #32
 8017226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f000 fb79 	bl	8017922 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8017230:	2300      	movs	r3, #0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3738      	adds	r7, #56	; 0x38
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
 801723a:	bf00      	nop
 801723c:	08018317 	.word	0x08018317

08017240 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b09a      	sub	sp, #104	; 0x68
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	330c      	adds	r3, #12
 801724e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017252:	e853 3f00 	ldrex	r3, [r3]
 8017256:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801725a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801725e:	667b      	str	r3, [r7, #100]	; 0x64
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	330c      	adds	r3, #12
 8017266:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017268:	657a      	str	r2, [r7, #84]	; 0x54
 801726a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801726c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801726e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017270:	e841 2300 	strex	r3, r2, [r1]
 8017274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017278:	2b00      	cmp	r3, #0
 801727a:	d1e5      	bne.n	8017248 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	3314      	adds	r3, #20
 8017282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017286:	e853 3f00 	ldrex	r3, [r3]
 801728a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801728e:	f023 0301 	bic.w	r3, r3, #1
 8017292:	663b      	str	r3, [r7, #96]	; 0x60
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	3314      	adds	r3, #20
 801729a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801729c:	643a      	str	r2, [r7, #64]	; 0x40
 801729e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80172a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80172a4:	e841 2300 	strex	r3, r2, [r1]
 80172a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80172aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1e5      	bne.n	801727c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80172b4:	2b01      	cmp	r3, #1
 80172b6:	d119      	bne.n	80172ec <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	330c      	adds	r3, #12
 80172be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172c0:	6a3b      	ldr	r3, [r7, #32]
 80172c2:	e853 3f00 	ldrex	r3, [r3]
 80172c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80172c8:	69fb      	ldr	r3, [r7, #28]
 80172ca:	f023 0310 	bic.w	r3, r3, #16
 80172ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	330c      	adds	r3, #12
 80172d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80172d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80172da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80172de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172e0:	e841 2300 	strex	r3, r2, [r1]
 80172e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80172e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d1e5      	bne.n	80172b8 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	695b      	ldr	r3, [r3, #20]
 80172f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80172f6:	2b40      	cmp	r3, #64	; 0x40
 80172f8:	d13f      	bne.n	801737a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	681b      	ldr	r3, [r3, #0]
 80172fe:	3314      	adds	r3, #20
 8017300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	e853 3f00 	ldrex	r3, [r3]
 8017308:	60bb      	str	r3, [r7, #8]
   return(result);
 801730a:	68bb      	ldr	r3, [r7, #8]
 801730c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017310:	65bb      	str	r3, [r7, #88]	; 0x58
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	3314      	adds	r3, #20
 8017318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801731a:	61ba      	str	r2, [r7, #24]
 801731c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801731e:	6979      	ldr	r1, [r7, #20]
 8017320:	69ba      	ldr	r2, [r7, #24]
 8017322:	e841 2300 	strex	r3, r2, [r1]
 8017326:	613b      	str	r3, [r7, #16]
   return(result);
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d1e5      	bne.n	80172fa <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017332:	2b00      	cmp	r3, #0
 8017334:	d013      	beq.n	801735e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801733a:	4a19      	ldr	r2, [pc, #100]	; (80173a0 <HAL_UART_AbortReceive_IT+0x160>)
 801733c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017342:	4618      	mov	r0, r3
 8017344:	f7f1 f95b 	bl	80085fe <HAL_DMA_Abort_IT>
 8017348:	4603      	mov	r3, r0
 801734a:	2b00      	cmp	r3, #0
 801734c:	d022      	beq.n	8017394 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8017358:	4610      	mov	r0, r2
 801735a:	4798      	blx	r3
 801735c:	e01a      	b.n	8017394 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	2200      	movs	r2, #0
 8017362:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2220      	movs	r2, #32
 8017368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2200      	movs	r2, #0
 8017370:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8017372:	6878      	ldr	r0, [r7, #4]
 8017374:	f000 fadf 	bl	8017936 <HAL_UART_AbortReceiveCpltCallback>
 8017378:	e00c      	b.n	8017394 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	2200      	movs	r2, #0
 801737e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	2220      	movs	r2, #32
 8017384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	2200      	movs	r2, #0
 801738c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 801738e:	6878      	ldr	r0, [r7, #4]
 8017390:	f000 fad1 	bl	8017936 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8017394:	2300      	movs	r3, #0
}
 8017396:	4618      	mov	r0, r3
 8017398:	3768      	adds	r7, #104	; 0x68
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	08018341 	.word	0x08018341

080173a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80173a4:	b580      	push	{r7, lr}
 80173a6:	b0ba      	sub	sp, #232	; 0xe8
 80173a8:	af00      	add	r7, sp, #0
 80173aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	68db      	ldr	r3, [r3, #12]
 80173bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	695b      	ldr	r3, [r3, #20]
 80173c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80173ca:	2300      	movs	r3, #0
 80173cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80173d0:	2300      	movs	r3, #0
 80173d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80173d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173da:	f003 030f 	and.w	r3, r3, #15
 80173de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80173e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d10f      	bne.n	801740a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80173ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80173ee:	f003 0320 	and.w	r3, r3, #32
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d009      	beq.n	801740a <HAL_UART_IRQHandler+0x66>
 80173f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80173fa:	f003 0320 	and.w	r3, r3, #32
 80173fe:	2b00      	cmp	r3, #0
 8017400:	d003      	beq.n	801740a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8017402:	6878      	ldr	r0, [r7, #4]
 8017404:	f001 f81c 	bl	8018440 <UART_Receive_IT>
      return;
 8017408:	e256      	b.n	80178b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801740a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801740e:	2b00      	cmp	r3, #0
 8017410:	f000 80de 	beq.w	80175d0 <HAL_UART_IRQHandler+0x22c>
 8017414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017418:	f003 0301 	and.w	r3, r3, #1
 801741c:	2b00      	cmp	r3, #0
 801741e:	d106      	bne.n	801742e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8017420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017424:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8017428:	2b00      	cmp	r3, #0
 801742a:	f000 80d1 	beq.w	80175d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801742e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017432:	f003 0301 	and.w	r3, r3, #1
 8017436:	2b00      	cmp	r3, #0
 8017438:	d00b      	beq.n	8017452 <HAL_UART_IRQHandler+0xae>
 801743a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801743e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017442:	2b00      	cmp	r3, #0
 8017444:	d005      	beq.n	8017452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801744a:	f043 0201 	orr.w	r2, r3, #1
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017456:	f003 0304 	and.w	r3, r3, #4
 801745a:	2b00      	cmp	r3, #0
 801745c:	d00b      	beq.n	8017476 <HAL_UART_IRQHandler+0xd2>
 801745e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017462:	f003 0301 	and.w	r3, r3, #1
 8017466:	2b00      	cmp	r3, #0
 8017468:	d005      	beq.n	8017476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801746e:	f043 0202 	orr.w	r2, r3, #2
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8017476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801747a:	f003 0302 	and.w	r3, r3, #2
 801747e:	2b00      	cmp	r3, #0
 8017480:	d00b      	beq.n	801749a <HAL_UART_IRQHandler+0xf6>
 8017482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8017486:	f003 0301 	and.w	r3, r3, #1
 801748a:	2b00      	cmp	r3, #0
 801748c:	d005      	beq.n	801749a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017492:	f043 0204 	orr.w	r2, r3, #4
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801749a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801749e:	f003 0308 	and.w	r3, r3, #8
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d011      	beq.n	80174ca <HAL_UART_IRQHandler+0x126>
 80174a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80174aa:	f003 0320 	and.w	r3, r3, #32
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d105      	bne.n	80174be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80174b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80174b6:	f003 0301 	and.w	r3, r3, #1
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d005      	beq.n	80174ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174c2:	f043 0208 	orr.w	r2, r3, #8
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	f000 81ed 	beq.w	80178ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80174d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80174d8:	f003 0320 	and.w	r3, r3, #32
 80174dc:	2b00      	cmp	r3, #0
 80174de:	d008      	beq.n	80174f2 <HAL_UART_IRQHandler+0x14e>
 80174e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80174e4:	f003 0320 	and.w	r3, r3, #32
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d002      	beq.n	80174f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 ffa7 	bl	8018440 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	695b      	ldr	r3, [r3, #20]
 80174f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174fc:	2b40      	cmp	r3, #64	; 0x40
 80174fe:	bf0c      	ite	eq
 8017500:	2301      	moveq	r3, #1
 8017502:	2300      	movne	r3, #0
 8017504:	b2db      	uxtb	r3, r3
 8017506:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801750e:	f003 0308 	and.w	r3, r3, #8
 8017512:	2b00      	cmp	r3, #0
 8017514:	d103      	bne.n	801751e <HAL_UART_IRQHandler+0x17a>
 8017516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801751a:	2b00      	cmp	r3, #0
 801751c:	d04f      	beq.n	80175be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f000 fe22 	bl	8018168 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	695b      	ldr	r3, [r3, #20]
 801752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801752e:	2b40      	cmp	r3, #64	; 0x40
 8017530:	d141      	bne.n	80175b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	3314      	adds	r3, #20
 8017538:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801753c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017540:	e853 3f00 	ldrex	r3, [r3]
 8017544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8017548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801754c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	3314      	adds	r3, #20
 801755a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801755e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8017562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801756a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801756e:	e841 2300 	strex	r3, r2, [r1]
 8017572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8017576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801757a:	2b00      	cmp	r3, #0
 801757c:	d1d9      	bne.n	8017532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017582:	2b00      	cmp	r3, #0
 8017584:	d013      	beq.n	80175ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801758a:	4a7d      	ldr	r2, [pc, #500]	; (8017780 <HAL_UART_IRQHandler+0x3dc>)
 801758c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017592:	4618      	mov	r0, r3
 8017594:	f7f1 f833 	bl	80085fe <HAL_DMA_Abort_IT>
 8017598:	4603      	mov	r3, r0
 801759a:	2b00      	cmp	r3, #0
 801759c:	d016      	beq.n	80175cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80175a4:	687a      	ldr	r2, [r7, #4]
 80175a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80175a8:	4610      	mov	r0, r2
 80175aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175ac:	e00e      	b.n	80175cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80175ae:	6878      	ldr	r0, [r7, #4]
 80175b0:	f000 f9a3 	bl	80178fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175b4:	e00a      	b.n	80175cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80175b6:	6878      	ldr	r0, [r7, #4]
 80175b8:	f000 f99f 	bl	80178fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175bc:	e006      	b.n	80175cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80175be:	6878      	ldr	r0, [r7, #4]
 80175c0:	f000 f99b 	bl	80178fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2200      	movs	r2, #0
 80175c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80175ca:	e170      	b.n	80178ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80175cc:	bf00      	nop
    return;
 80175ce:	e16e      	b.n	80178ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80175d4:	2b01      	cmp	r3, #1
 80175d6:	f040 814a 	bne.w	801786e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80175da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80175de:	f003 0310 	and.w	r3, r3, #16
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f000 8143 	beq.w	801786e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80175e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80175ec:	f003 0310 	and.w	r3, r3, #16
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	f000 813c 	beq.w	801786e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80175f6:	2300      	movs	r3, #0
 80175f8:	60bb      	str	r3, [r7, #8]
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	60bb      	str	r3, [r7, #8]
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	60bb      	str	r3, [r7, #8]
 801760a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	695b      	ldr	r3, [r3, #20]
 8017612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017616:	2b40      	cmp	r3, #64	; 0x40
 8017618:	f040 80b4 	bne.w	8017784 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8017628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801762c:	2b00      	cmp	r3, #0
 801762e:	f000 8140 	beq.w	80178b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801763a:	429a      	cmp	r2, r3
 801763c:	f080 8139 	bcs.w	80178b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8017646:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801764c:	69db      	ldr	r3, [r3, #28]
 801764e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017652:	f000 8088 	beq.w	8017766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	330c      	adds	r3, #12
 801765c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017660:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017664:	e853 3f00 	ldrex	r3, [r3]
 8017668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801766c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	330c      	adds	r3, #12
 801767e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8017682:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801768a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801768e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8017692:	e841 2300 	strex	r3, r2, [r1]
 8017696:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801769a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d1d9      	bne.n	8017656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	3314      	adds	r3, #20
 80176a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80176ac:	e853 3f00 	ldrex	r3, [r3]
 80176b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80176b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80176b4:	f023 0301 	bic.w	r3, r3, #1
 80176b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	3314      	adds	r3, #20
 80176c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80176c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80176ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80176ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80176d2:	e841 2300 	strex	r3, r2, [r1]
 80176d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80176d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d1e1      	bne.n	80176a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	3314      	adds	r3, #20
 80176e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80176e8:	e853 3f00 	ldrex	r3, [r3]
 80176ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80176ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80176f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	3314      	adds	r3, #20
 80176fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8017702:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017704:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017706:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017708:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801770a:	e841 2300 	strex	r3, r2, [r1]
 801770e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017710:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1e3      	bne.n	80176de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2220      	movs	r2, #32
 801771a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	2200      	movs	r2, #0
 8017722:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	330c      	adds	r3, #12
 801772a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801772e:	e853 3f00 	ldrex	r3, [r3]
 8017732:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017736:	f023 0310 	bic.w	r3, r3, #16
 801773a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	330c      	adds	r3, #12
 8017744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8017748:	65ba      	str	r2, [r7, #88]	; 0x58
 801774a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801774c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801774e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017750:	e841 2300 	strex	r3, r2, [r1]
 8017754:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017758:	2b00      	cmp	r3, #0
 801775a:	d1e3      	bne.n	8017724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017760:	4618      	mov	r0, r3
 8017762:	f7f0 fedc 	bl	800851e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801776e:	b29b      	uxth	r3, r3
 8017770:	1ad3      	subs	r3, r2, r3
 8017772:	b29b      	uxth	r3, r3
 8017774:	4619      	mov	r1, r3
 8017776:	6878      	ldr	r0, [r7, #4]
 8017778:	f000 f8e7 	bl	801794a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801777c:	e099      	b.n	80178b2 <HAL_UART_IRQHandler+0x50e>
 801777e:	bf00      	nop
 8017780:	0801822f 	.word	0x0801822f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801778c:	b29b      	uxth	r3, r3
 801778e:	1ad3      	subs	r3, r2, r3
 8017790:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017798:	b29b      	uxth	r3, r3
 801779a:	2b00      	cmp	r3, #0
 801779c:	f000 808b 	beq.w	80178b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80177a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	f000 8086 	beq.w	80178b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	330c      	adds	r3, #12
 80177b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80177b4:	e853 3f00 	ldrex	r3, [r3]
 80177b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80177ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80177bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80177c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	330c      	adds	r3, #12
 80177ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80177ce:	647a      	str	r2, [r7, #68]	; 0x44
 80177d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80177d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80177d6:	e841 2300 	strex	r3, r2, [r1]
 80177da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80177dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d1e3      	bne.n	80177aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	3314      	adds	r3, #20
 80177e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ec:	e853 3f00 	ldrex	r3, [r3]
 80177f0:	623b      	str	r3, [r7, #32]
   return(result);
 80177f2:	6a3b      	ldr	r3, [r7, #32]
 80177f4:	f023 0301 	bic.w	r3, r3, #1
 80177f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	3314      	adds	r3, #20
 8017802:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8017806:	633a      	str	r2, [r7, #48]	; 0x30
 8017808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801780a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801780c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801780e:	e841 2300 	strex	r3, r2, [r1]
 8017812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017816:	2b00      	cmp	r3, #0
 8017818:	d1e3      	bne.n	80177e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	2220      	movs	r2, #32
 801781e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	2200      	movs	r2, #0
 8017826:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	330c      	adds	r3, #12
 801782e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017830:	693b      	ldr	r3, [r7, #16]
 8017832:	e853 3f00 	ldrex	r3, [r3]
 8017836:	60fb      	str	r3, [r7, #12]
   return(result);
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	f023 0310 	bic.w	r3, r3, #16
 801783e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	330c      	adds	r3, #12
 8017848:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 801784c:	61fa      	str	r2, [r7, #28]
 801784e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017850:	69b9      	ldr	r1, [r7, #24]
 8017852:	69fa      	ldr	r2, [r7, #28]
 8017854:	e841 2300 	strex	r3, r2, [r1]
 8017858:	617b      	str	r3, [r7, #20]
   return(result);
 801785a:	697b      	ldr	r3, [r7, #20]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d1e3      	bne.n	8017828 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8017860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8017864:	4619      	mov	r1, r3
 8017866:	6878      	ldr	r0, [r7, #4]
 8017868:	f000 f86f 	bl	801794a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801786c:	e023      	b.n	80178b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801786e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017876:	2b00      	cmp	r3, #0
 8017878:	d009      	beq.n	801788e <HAL_UART_IRQHandler+0x4ea>
 801787a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017882:	2b00      	cmp	r3, #0
 8017884:	d003      	beq.n	801788e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f000 fd72 	bl	8018370 <UART_Transmit_IT>
    return;
 801788c:	e014      	b.n	80178b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8017892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017896:	2b00      	cmp	r3, #0
 8017898:	d00e      	beq.n	80178b8 <HAL_UART_IRQHandler+0x514>
 801789a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d008      	beq.n	80178b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80178a6:	6878      	ldr	r0, [r7, #4]
 80178a8:	f000 fdb2 	bl	8018410 <UART_EndTransmit_IT>
    return;
 80178ac:	e004      	b.n	80178b8 <HAL_UART_IRQHandler+0x514>
    return;
 80178ae:	bf00      	nop
 80178b0:	e002      	b.n	80178b8 <HAL_UART_IRQHandler+0x514>
      return;
 80178b2:	bf00      	nop
 80178b4:	e000      	b.n	80178b8 <HAL_UART_IRQHandler+0x514>
      return;
 80178b6:	bf00      	nop
  }
}
 80178b8:	37e8      	adds	r7, #232	; 0xe8
 80178ba:	46bd      	mov	sp, r7
 80178bc:	bd80      	pop	{r7, pc}

080178be <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80178be:	b480      	push	{r7}
 80178c0:	b083      	sub	sp, #12
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80178c6:	bf00      	nop
 80178c8:	370c      	adds	r7, #12
 80178ca:	46bd      	mov	sp, r7
 80178cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d0:	4770      	bx	lr

080178d2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80178d2:	b480      	push	{r7}
 80178d4:	b083      	sub	sp, #12
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80178da:	bf00      	nop
 80178dc:	370c      	adds	r7, #12
 80178de:	46bd      	mov	sp, r7
 80178e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e4:	4770      	bx	lr

080178e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80178e6:	b480      	push	{r7}
 80178e8:	b083      	sub	sp, #12
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80178ee:	bf00      	nop
 80178f0:	370c      	adds	r7, #12
 80178f2:	46bd      	mov	sp, r7
 80178f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f8:	4770      	bx	lr

080178fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80178fa:	b480      	push	{r7}
 80178fc:	b083      	sub	sp, #12
 80178fe:	af00      	add	r7, sp, #0
 8017900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8017902:	bf00      	nop
 8017904:	370c      	adds	r7, #12
 8017906:	46bd      	mov	sp, r7
 8017908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790c:	4770      	bx	lr

0801790e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801790e:	b480      	push	{r7}
 8017910:	b083      	sub	sp, #12
 8017912:	af00      	add	r7, sp, #0
 8017914:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8017916:	bf00      	nop
 8017918:	370c      	adds	r7, #12
 801791a:	46bd      	mov	sp, r7
 801791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017920:	4770      	bx	lr

08017922 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8017922:	b480      	push	{r7}
 8017924:	b083      	sub	sp, #12
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801792a:	bf00      	nop
 801792c:	370c      	adds	r7, #12
 801792e:	46bd      	mov	sp, r7
 8017930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017934:	4770      	bx	lr

08017936 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8017936:	b480      	push	{r7}
 8017938:	b083      	sub	sp, #12
 801793a:	af00      	add	r7, sp, #0
 801793c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801793e:	bf00      	nop
 8017940:	370c      	adds	r7, #12
 8017942:	46bd      	mov	sp, r7
 8017944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017948:	4770      	bx	lr

0801794a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801794a:	b480      	push	{r7}
 801794c:	b083      	sub	sp, #12
 801794e:	af00      	add	r7, sp, #0
 8017950:	6078      	str	r0, [r7, #4]
 8017952:	460b      	mov	r3, r1
 8017954:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8017956:	bf00      	nop
 8017958:	370c      	adds	r7, #12
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr

08017962 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8017962:	b480      	push	{r7}
 8017964:	b089      	sub	sp, #36	; 0x24
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017970:	2b01      	cmp	r3, #1
 8017972:	d101      	bne.n	8017978 <HAL_LIN_SendBreak+0x16>
 8017974:	2302      	movs	r3, #2
 8017976:	e02a      	b.n	80179ce <HAL_LIN_SendBreak+0x6c>
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2201      	movs	r2, #1
 801797c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	2224      	movs	r2, #36	; 0x24
 8017984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	330c      	adds	r3, #12
 801798e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	e853 3f00 	ldrex	r3, [r3]
 8017996:	60bb      	str	r3, [r7, #8]
   return(result);
 8017998:	68bb      	ldr	r3, [r7, #8]
 801799a:	f043 0301 	orr.w	r3, r3, #1
 801799e:	61fb      	str	r3, [r7, #28]
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	681b      	ldr	r3, [r3, #0]
 80179a4:	330c      	adds	r3, #12
 80179a6:	69fa      	ldr	r2, [r7, #28]
 80179a8:	61ba      	str	r2, [r7, #24]
 80179aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179ac:	6979      	ldr	r1, [r7, #20]
 80179ae:	69ba      	ldr	r2, [r7, #24]
 80179b0:	e841 2300 	strex	r3, r2, [r1]
 80179b4:	613b      	str	r3, [r7, #16]
   return(result);
 80179b6:	693b      	ldr	r3, [r7, #16]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d1e5      	bne.n	8017988 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	2220      	movs	r2, #32
 80179c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2200      	movs	r2, #0
 80179c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80179cc:	2300      	movs	r3, #0
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3724      	adds	r7, #36	; 0x24
 80179d2:	46bd      	mov	sp, r7
 80179d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179d8:	4770      	bx	lr

080179da <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 80179da:	b480      	push	{r7}
 80179dc:	b089      	sub	sp, #36	; 0x24
 80179de:	af00      	add	r7, sp, #0
 80179e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d101      	bne.n	80179f0 <HAL_MultiProcessor_EnterMuteMode+0x16>
 80179ec:	2302      	movs	r3, #2
 80179ee:	e02a      	b.n	8017a46 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2201      	movs	r2, #1
 80179f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2224      	movs	r2, #36	; 0x24
 80179fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	330c      	adds	r3, #12
 8017a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a08:	68fb      	ldr	r3, [r7, #12]
 8017a0a:	e853 3f00 	ldrex	r3, [r3]
 8017a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	f043 0302 	orr.w	r3, r3, #2
 8017a16:	61fb      	str	r3, [r7, #28]
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	330c      	adds	r3, #12
 8017a1e:	69fa      	ldr	r2, [r7, #28]
 8017a20:	61ba      	str	r2, [r7, #24]
 8017a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a24:	6979      	ldr	r1, [r7, #20]
 8017a26:	69ba      	ldr	r2, [r7, #24]
 8017a28:	e841 2300 	strex	r3, r2, [r1]
 8017a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d1e5      	bne.n	8017a00 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	2220      	movs	r2, #32
 8017a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017a44:	2300      	movs	r3, #0
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3724      	adds	r7, #36	; 0x24
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a50:	4770      	bx	lr

08017a52 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8017a52:	b480      	push	{r7}
 8017a54:	b089      	sub	sp, #36	; 0x24
 8017a56:	af00      	add	r7, sp, #0
 8017a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017a60:	2b01      	cmp	r3, #1
 8017a62:	d101      	bne.n	8017a68 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8017a64:	2302      	movs	r3, #2
 8017a66:	e02a      	b.n	8017abe <HAL_MultiProcessor_ExitMuteMode+0x6c>
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2201      	movs	r2, #1
 8017a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2224      	movs	r2, #36	; 0x24
 8017a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	330c      	adds	r3, #12
 8017a7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a80:	68fb      	ldr	r3, [r7, #12]
 8017a82:	e853 3f00 	ldrex	r3, [r3]
 8017a86:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a88:	68bb      	ldr	r3, [r7, #8]
 8017a8a:	f023 0302 	bic.w	r3, r3, #2
 8017a8e:	61fb      	str	r3, [r7, #28]
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	330c      	adds	r3, #12
 8017a96:	69fa      	ldr	r2, [r7, #28]
 8017a98:	61ba      	str	r2, [r7, #24]
 8017a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a9c:	6979      	ldr	r1, [r7, #20]
 8017a9e:	69ba      	ldr	r2, [r7, #24]
 8017aa0:	e841 2300 	strex	r3, r2, [r1]
 8017aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8017aa6:	693b      	ldr	r3, [r7, #16]
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d1e5      	bne.n	8017a78 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2220      	movs	r2, #32
 8017ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017abc:	2300      	movs	r3, #0
}
 8017abe:	4618      	mov	r0, r3
 8017ac0:	3724      	adds	r7, #36	; 0x24
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8017aca:	b480      	push	{r7}
 8017acc:	b085      	sub	sp, #20
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d101      	bne.n	8017ae4 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017ae0:	2302      	movs	r3, #2
 8017ae2:	e020      	b.n	8017b26 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	2224      	movs	r2, #36	; 0x24
 8017af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	68db      	ldr	r3, [r3, #12]
 8017afa:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	f023 030c 	bic.w	r3, r3, #12
 8017b02:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8017b04:	68fb      	ldr	r3, [r7, #12]
 8017b06:	f043 0308 	orr.w	r3, r3, #8
 8017b0a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	68fa      	ldr	r2, [r7, #12]
 8017b12:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	2220      	movs	r2, #32
 8017b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017b24:	2300      	movs	r3, #0
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3714      	adds	r7, #20
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b30:	4770      	bx	lr

08017b32 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8017b32:	b480      	push	{r7}
 8017b34:	b085      	sub	sp, #20
 8017b36:	af00      	add	r7, sp, #0
 8017b38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017b3a:	2300      	movs	r3, #0
 8017b3c:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017b44:	2b01      	cmp	r3, #1
 8017b46:	d101      	bne.n	8017b4c <HAL_HalfDuplex_EnableReceiver+0x1a>
 8017b48:	2302      	movs	r3, #2
 8017b4a:	e020      	b.n	8017b8e <HAL_HalfDuplex_EnableReceiver+0x5c>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2201      	movs	r2, #1
 8017b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	2224      	movs	r2, #36	; 0x24
 8017b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	681b      	ldr	r3, [r3, #0]
 8017b60:	68db      	ldr	r3, [r3, #12]
 8017b62:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	f023 030c 	bic.w	r3, r3, #12
 8017b6a:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	f043 0304 	orr.w	r3, r3, #4
 8017b72:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2220      	movs	r2, #32
 8017b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2200      	movs	r2, #0
 8017b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017b8c:	2300      	movs	r3, #0
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3714      	adds	r7, #20
 8017b92:	46bd      	mov	sp, r7
 8017b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b98:	4770      	bx	lr

08017b9a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8017b9a:	b480      	push	{r7}
 8017b9c:	b085      	sub	sp, #20
 8017b9e:	af00      	add	r7, sp, #0
 8017ba0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	60fb      	str	r3, [r7, #12]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017bba:	b2db      	uxtb	r3, r3
 8017bbc:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	b2da      	uxtb	r2, r3
 8017bc2:	68bb      	ldr	r3, [r7, #8]
 8017bc4:	b2db      	uxtb	r3, r3
 8017bc6:	4313      	orrs	r3, r2
 8017bc8:	b2db      	uxtb	r3, r3
}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	3714      	adds	r7, #20
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd4:	4770      	bx	lr

08017bd6 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8017bd6:	b480      	push	{r7}
 8017bd8:	b083      	sub	sp, #12
 8017bda:	af00      	add	r7, sp, #0
 8017bdc:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8017be2:	4618      	mov	r0, r3
 8017be4:	370c      	adds	r7, #12
 8017be6:	46bd      	mov	sp, r7
 8017be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bec:	4770      	bx	lr

08017bee <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8017bee:	b580      	push	{r7, lr}
 8017bf0:	b090      	sub	sp, #64	; 0x40
 8017bf2:	af00      	add	r7, sp, #0
 8017bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d137      	bne.n	8017c7a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8017c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c0c:	2200      	movs	r2, #0
 8017c0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	3314      	adds	r3, #20
 8017c16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c1a:	e853 3f00 	ldrex	r3, [r3]
 8017c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8017c20:	6a3b      	ldr	r3, [r7, #32]
 8017c22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8017c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	3314      	adds	r3, #20
 8017c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c30:	633a      	str	r2, [r7, #48]	; 0x30
 8017c32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c38:	e841 2300 	strex	r3, r2, [r1]
 8017c3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d1e5      	bne.n	8017c10 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	330c      	adds	r3, #12
 8017c4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c4c:	693b      	ldr	r3, [r7, #16]
 8017c4e:	e853 3f00 	ldrex	r3, [r3]
 8017c52:	60fb      	str	r3, [r7, #12]
   return(result);
 8017c54:	68fb      	ldr	r3, [r7, #12]
 8017c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8017c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	330c      	adds	r3, #12
 8017c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017c64:	61fa      	str	r2, [r7, #28]
 8017c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c68:	69b9      	ldr	r1, [r7, #24]
 8017c6a:	69fa      	ldr	r2, [r7, #28]
 8017c6c:	e841 2300 	strex	r3, r2, [r1]
 8017c70:	617b      	str	r3, [r7, #20]
   return(result);
 8017c72:	697b      	ldr	r3, [r7, #20]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d1e5      	bne.n	8017c44 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017c78:	e002      	b.n	8017c80 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8017c7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c7c:	f7ff fe1f 	bl	80178be <HAL_UART_TxCpltCallback>
}
 8017c80:	bf00      	nop
 8017c82:	3740      	adds	r7, #64	; 0x40
 8017c84:	46bd      	mov	sp, r7
 8017c86:	bd80      	pop	{r7, pc}

08017c88 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b084      	sub	sp, #16
 8017c8c:	af00      	add	r7, sp, #0
 8017c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017c94:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017c96:	68f8      	ldr	r0, [r7, #12]
 8017c98:	f7ff fe1b 	bl	80178d2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017c9c:	bf00      	nop
 8017c9e:	3710      	adds	r7, #16
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	bd80      	pop	{r7, pc}

08017ca4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b09c      	sub	sp, #112	; 0x70
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d172      	bne.n	8017da6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	330c      	adds	r3, #12
 8017ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017cd0:	e853 3f00 	ldrex	r3, [r3]
 8017cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017cdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8017cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	330c      	adds	r3, #12
 8017ce4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017ce6:	65ba      	str	r2, [r7, #88]	; 0x58
 8017ce8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017cec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017cee:	e841 2300 	strex	r3, r2, [r1]
 8017cf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d1e5      	bne.n	8017cc6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	3314      	adds	r3, #20
 8017d00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d04:	e853 3f00 	ldrex	r3, [r3]
 8017d08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d0c:	f023 0301 	bic.w	r3, r3, #1
 8017d10:	667b      	str	r3, [r7, #100]	; 0x64
 8017d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	3314      	adds	r3, #20
 8017d18:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8017d1a:	647a      	str	r2, [r7, #68]	; 0x44
 8017d1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017d22:	e841 2300 	strex	r3, r2, [r1]
 8017d26:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	d1e5      	bne.n	8017cfa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	3314      	adds	r3, #20
 8017d34:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d38:	e853 3f00 	ldrex	r3, [r3]
 8017d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8017d3e:	6a3b      	ldr	r3, [r7, #32]
 8017d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017d44:	663b      	str	r3, [r7, #96]	; 0x60
 8017d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	3314      	adds	r3, #20
 8017d4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017d4e:	633a      	str	r2, [r7, #48]	; 0x30
 8017d50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d56:	e841 2300 	strex	r3, r2, [r1]
 8017d5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d1e5      	bne.n	8017d2e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8017d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d64:	2220      	movs	r2, #32
 8017d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d119      	bne.n	8017da6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	330c      	adds	r3, #12
 8017d78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d7a:	693b      	ldr	r3, [r7, #16]
 8017d7c:	e853 3f00 	ldrex	r3, [r3]
 8017d80:	60fb      	str	r3, [r7, #12]
   return(result);
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	f023 0310 	bic.w	r3, r3, #16
 8017d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	330c      	adds	r3, #12
 8017d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017d92:	61fa      	str	r2, [r7, #28]
 8017d94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d96:	69b9      	ldr	r1, [r7, #24]
 8017d98:	69fa      	ldr	r2, [r7, #28]
 8017d9a:	e841 2300 	strex	r3, r2, [r1]
 8017d9e:	617b      	str	r3, [r7, #20]
   return(result);
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1e5      	bne.n	8017d72 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017daa:	2b01      	cmp	r3, #1
 8017dac:	d106      	bne.n	8017dbc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017db0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017db2:	4619      	mov	r1, r3
 8017db4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017db6:	f7ff fdc8 	bl	801794a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017dba:	e002      	b.n	8017dc2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8017dbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017dbe:	f7e9 fda3 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8017dc2:	bf00      	nop
 8017dc4:	3770      	adds	r7, #112	; 0x70
 8017dc6:	46bd      	mov	sp, r7
 8017dc8:	bd80      	pop	{r7, pc}

08017dca <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017dca:	b580      	push	{r7, lr}
 8017dcc:	b084      	sub	sp, #16
 8017dce:	af00      	add	r7, sp, #0
 8017dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017dd6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dd8:	68fb      	ldr	r3, [r7, #12]
 8017dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ddc:	2b01      	cmp	r3, #1
 8017dde:	d108      	bne.n	8017df2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017de4:	085b      	lsrs	r3, r3, #1
 8017de6:	b29b      	uxth	r3, r3
 8017de8:	4619      	mov	r1, r3
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f7ff fdad 	bl	801794a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017df0:	e002      	b.n	8017df8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8017df2:	68f8      	ldr	r0, [r7, #12]
 8017df4:	f7ff fd77 	bl	80178e6 <HAL_UART_RxHalfCpltCallback>
}
 8017df8:	bf00      	nop
 8017dfa:	3710      	adds	r7, #16
 8017dfc:	46bd      	mov	sp, r7
 8017dfe:	bd80      	pop	{r7, pc}

08017e00 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b084      	sub	sp, #16
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017e08:	2300      	movs	r3, #0
 8017e0a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e10:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8017e12:	68bb      	ldr	r3, [r7, #8]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	695b      	ldr	r3, [r3, #20]
 8017e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017e1c:	2b80      	cmp	r3, #128	; 0x80
 8017e1e:	bf0c      	ite	eq
 8017e20:	2301      	moveq	r3, #1
 8017e22:	2300      	movne	r3, #0
 8017e24:	b2db      	uxtb	r3, r3
 8017e26:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017e2e:	b2db      	uxtb	r3, r3
 8017e30:	2b21      	cmp	r3, #33	; 0x21
 8017e32:	d108      	bne.n	8017e46 <UART_DMAError+0x46>
 8017e34:	68fb      	ldr	r3, [r7, #12]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d005      	beq.n	8017e46 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8017e40:	68b8      	ldr	r0, [r7, #8]
 8017e42:	f000 f969 	bl	8018118 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8017e46:	68bb      	ldr	r3, [r7, #8]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	695b      	ldr	r3, [r3, #20]
 8017e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e50:	2b40      	cmp	r3, #64	; 0x40
 8017e52:	bf0c      	ite	eq
 8017e54:	2301      	moveq	r3, #1
 8017e56:	2300      	movne	r3, #0
 8017e58:	b2db      	uxtb	r3, r3
 8017e5a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017e62:	b2db      	uxtb	r3, r3
 8017e64:	2b22      	cmp	r3, #34	; 0x22
 8017e66:	d108      	bne.n	8017e7a <UART_DMAError+0x7a>
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d005      	beq.n	8017e7a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8017e6e:	68bb      	ldr	r3, [r7, #8]
 8017e70:	2200      	movs	r2, #0
 8017e72:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017e74:	68b8      	ldr	r0, [r7, #8]
 8017e76:	f000 f977 	bl	8018168 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e7e:	f043 0210 	orr.w	r2, r3, #16
 8017e82:	68bb      	ldr	r3, [r7, #8]
 8017e84:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017e86:	68b8      	ldr	r0, [r7, #8]
 8017e88:	f7ff fd37 	bl	80178fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017e8c:	bf00      	nop
 8017e8e:	3710      	adds	r7, #16
 8017e90:	46bd      	mov	sp, r7
 8017e92:	bd80      	pop	{r7, pc}

08017e94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b090      	sub	sp, #64	; 0x40
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	60f8      	str	r0, [r7, #12]
 8017e9c:	60b9      	str	r1, [r7, #8]
 8017e9e:	603b      	str	r3, [r7, #0]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017ea4:	e050      	b.n	8017f48 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017eac:	d04c      	beq.n	8017f48 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8017eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d007      	beq.n	8017ec4 <UART_WaitOnFlagUntilTimeout+0x30>
 8017eb4:	f7ef f872 	bl	8006f9c <HAL_GetTick>
 8017eb8:	4602      	mov	r2, r0
 8017eba:	683b      	ldr	r3, [r7, #0]
 8017ebc:	1ad3      	subs	r3, r2, r3
 8017ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d241      	bcs.n	8017f48 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	681b      	ldr	r3, [r3, #0]
 8017ec8:	330c      	adds	r3, #12
 8017eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ece:	e853 3f00 	ldrex	r3, [r3]
 8017ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	330c      	adds	r3, #12
 8017ee2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8017ee6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017eec:	e841 2300 	strex	r3, r2, [r1]
 8017ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d1e5      	bne.n	8017ec4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	3314      	adds	r3, #20
 8017efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	e853 3f00 	ldrex	r3, [r3]
 8017f06:	613b      	str	r3, [r7, #16]
   return(result);
 8017f08:	693b      	ldr	r3, [r7, #16]
 8017f0a:	f023 0301 	bic.w	r3, r3, #1
 8017f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	3314      	adds	r3, #20
 8017f16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017f18:	623a      	str	r2, [r7, #32]
 8017f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017f1c:	69f9      	ldr	r1, [r7, #28]
 8017f1e:	6a3a      	ldr	r2, [r7, #32]
 8017f20:	e841 2300 	strex	r3, r2, [r1]
 8017f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8017f26:	69bb      	ldr	r3, [r7, #24]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d1e5      	bne.n	8017ef8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	2220      	movs	r2, #32
 8017f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	2220      	movs	r2, #32
 8017f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8017f3c:	68fb      	ldr	r3, [r7, #12]
 8017f3e:	2200      	movs	r2, #0
 8017f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8017f44:	2303      	movs	r3, #3
 8017f46:	e00f      	b.n	8017f68 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	681a      	ldr	r2, [r3, #0]
 8017f4e:	68bb      	ldr	r3, [r7, #8]
 8017f50:	4013      	ands	r3, r2
 8017f52:	68ba      	ldr	r2, [r7, #8]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	bf0c      	ite	eq
 8017f58:	2301      	moveq	r3, #1
 8017f5a:	2300      	movne	r3, #0
 8017f5c:	b2db      	uxtb	r3, r3
 8017f5e:	461a      	mov	r2, r3
 8017f60:	79fb      	ldrb	r3, [r7, #7]
 8017f62:	429a      	cmp	r2, r3
 8017f64:	d09f      	beq.n	8017ea6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8017f66:	2300      	movs	r3, #0
}
 8017f68:	4618      	mov	r0, r3
 8017f6a:	3740      	adds	r7, #64	; 0x40
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	bd80      	pop	{r7, pc}

08017f70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b085      	sub	sp, #20
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	60f8      	str	r0, [r7, #12]
 8017f78:	60b9      	str	r1, [r7, #8]
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	68ba      	ldr	r2, [r7, #8]
 8017f82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	88fa      	ldrh	r2, [r7, #6]
 8017f88:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	88fa      	ldrh	r2, [r7, #6]
 8017f8e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	2200      	movs	r2, #0
 8017f94:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017f96:	68fb      	ldr	r3, [r7, #12]
 8017f98:	2222      	movs	r2, #34	; 0x22
 8017f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f9e:	68fb      	ldr	r3, [r7, #12]
 8017fa0:	2200      	movs	r2, #0
 8017fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	68da      	ldr	r2, [r3, #12]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017fb4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	695a      	ldr	r2, [r3, #20]
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f042 0201 	orr.w	r2, r2, #1
 8017fc4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	68da      	ldr	r2, [r3, #12]
 8017fcc:	68fb      	ldr	r3, [r7, #12]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	f042 0220 	orr.w	r2, r2, #32
 8017fd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017fd6:	2300      	movs	r3, #0
}
 8017fd8:	4618      	mov	r0, r3
 8017fda:	3714      	adds	r7, #20
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe2:	4770      	bx	lr

08017fe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017fe4:	b580      	push	{r7, lr}
 8017fe6:	b098      	sub	sp, #96	; 0x60
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	60f8      	str	r0, [r7, #12]
 8017fec:	60b9      	str	r1, [r7, #8]
 8017fee:	4613      	mov	r3, r2
 8017ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8017ff2:	68ba      	ldr	r2, [r7, #8]
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	88fa      	ldrh	r2, [r7, #6]
 8017ffc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ffe:	68fb      	ldr	r3, [r7, #12]
 8018000:	2200      	movs	r2, #0
 8018002:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8018004:	68fb      	ldr	r3, [r7, #12]
 8018006:	2222      	movs	r2, #34	; 0x22
 8018008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018010:	4a3e      	ldr	r2, [pc, #248]	; (801810c <UART_Start_Receive_DMA+0x128>)
 8018012:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018018:	4a3d      	ldr	r2, [pc, #244]	; (8018110 <UART_Start_Receive_DMA+0x12c>)
 801801a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018020:	4a3c      	ldr	r2, [pc, #240]	; (8018114 <UART_Start_Receive_DMA+0x130>)
 8018022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018028:	2200      	movs	r2, #0
 801802a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 801802c:	f107 0308 	add.w	r3, r7, #8
 8018030:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8018032:	68fb      	ldr	r3, [r7, #12]
 8018034:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	3304      	adds	r3, #4
 801803c:	4619      	mov	r1, r3
 801803e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	88fb      	ldrh	r3, [r7, #6]
 8018044:	f7f0 fa13 	bl	800846e <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8018048:	2300      	movs	r3, #0
 801804a:	613b      	str	r3, [r7, #16]
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	613b      	str	r3, [r7, #16]
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	685b      	ldr	r3, [r3, #4]
 801805a:	613b      	str	r3, [r7, #16]
 801805c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	2200      	movs	r2, #0
 8018062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	330c      	adds	r3, #12
 801806c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801806e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018070:	e853 3f00 	ldrex	r3, [r3]
 8018074:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8018076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801807c:	65bb      	str	r3, [r7, #88]	; 0x58
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	330c      	adds	r3, #12
 8018084:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018086:	64fa      	str	r2, [r7, #76]	; 0x4c
 8018088:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801808a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801808c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801808e:	e841 2300 	strex	r3, r2, [r1]
 8018092:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8018094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018096:	2b00      	cmp	r3, #0
 8018098:	d1e5      	bne.n	8018066 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	3314      	adds	r3, #20
 80180a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a4:	e853 3f00 	ldrex	r3, [r3]
 80180a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80180aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ac:	f043 0301 	orr.w	r3, r3, #1
 80180b0:	657b      	str	r3, [r7, #84]	; 0x54
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	3314      	adds	r3, #20
 80180b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80180ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80180bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80180c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80180c2:	e841 2300 	strex	r3, r2, [r1]
 80180c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80180c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d1e5      	bne.n	801809a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80180ce:	68fb      	ldr	r3, [r7, #12]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	3314      	adds	r3, #20
 80180d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80180d6:	69bb      	ldr	r3, [r7, #24]
 80180d8:	e853 3f00 	ldrex	r3, [r3]
 80180dc:	617b      	str	r3, [r7, #20]
   return(result);
 80180de:	697b      	ldr	r3, [r7, #20]
 80180e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180e4:	653b      	str	r3, [r7, #80]	; 0x50
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	3314      	adds	r3, #20
 80180ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80180ee:	627a      	str	r2, [r7, #36]	; 0x24
 80180f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80180f2:	6a39      	ldr	r1, [r7, #32]
 80180f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180f6:	e841 2300 	strex	r3, r2, [r1]
 80180fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80180fc:	69fb      	ldr	r3, [r7, #28]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d1e5      	bne.n	80180ce <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8018102:	2300      	movs	r3, #0
}
 8018104:	4618      	mov	r0, r3
 8018106:	3760      	adds	r7, #96	; 0x60
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}
 801810c:	08017ca5 	.word	0x08017ca5
 8018110:	08017dcb 	.word	0x08017dcb
 8018114:	08017e01 	.word	0x08017e01

08018118 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8018118:	b480      	push	{r7}
 801811a:	b089      	sub	sp, #36	; 0x24
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	330c      	adds	r3, #12
 8018126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	e853 3f00 	ldrex	r3, [r3]
 801812e:	60bb      	str	r3, [r7, #8]
   return(result);
 8018130:	68bb      	ldr	r3, [r7, #8]
 8018132:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8018136:	61fb      	str	r3, [r7, #28]
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	330c      	adds	r3, #12
 801813e:	69fa      	ldr	r2, [r7, #28]
 8018140:	61ba      	str	r2, [r7, #24]
 8018142:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018144:	6979      	ldr	r1, [r7, #20]
 8018146:	69ba      	ldr	r2, [r7, #24]
 8018148:	e841 2300 	strex	r3, r2, [r1]
 801814c:	613b      	str	r3, [r7, #16]
   return(result);
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d1e5      	bne.n	8018120 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	2220      	movs	r2, #32
 8018158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 801815c:	bf00      	nop
 801815e:	3724      	adds	r7, #36	; 0x24
 8018160:	46bd      	mov	sp, r7
 8018162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018166:	4770      	bx	lr

08018168 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8018168:	b480      	push	{r7}
 801816a:	b095      	sub	sp, #84	; 0x54
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	330c      	adds	r3, #12
 8018176:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801817a:	e853 3f00 	ldrex	r3, [r3]
 801817e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8018180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8018186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	330c      	adds	r3, #12
 801818e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018190:	643a      	str	r2, [r7, #64]	; 0x40
 8018192:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018194:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8018198:	e841 2300 	strex	r3, r2, [r1]
 801819c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d1e5      	bne.n	8018170 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	681b      	ldr	r3, [r3, #0]
 80181a8:	3314      	adds	r3, #20
 80181aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181ac:	6a3b      	ldr	r3, [r7, #32]
 80181ae:	e853 3f00 	ldrex	r3, [r3]
 80181b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80181b4:	69fb      	ldr	r3, [r7, #28]
 80181b6:	f023 0301 	bic.w	r3, r3, #1
 80181ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	3314      	adds	r3, #20
 80181c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80181c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80181c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80181c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80181cc:	e841 2300 	strex	r3, r2, [r1]
 80181d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80181d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d1e5      	bne.n	80181a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181dc:	2b01      	cmp	r3, #1
 80181de:	d119      	bne.n	8018214 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	681b      	ldr	r3, [r3, #0]
 80181e4:	330c      	adds	r3, #12
 80181e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	e853 3f00 	ldrex	r3, [r3]
 80181ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	f023 0310 	bic.w	r3, r3, #16
 80181f6:	647b      	str	r3, [r7, #68]	; 0x44
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	330c      	adds	r3, #12
 80181fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018200:	61ba      	str	r2, [r7, #24]
 8018202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018204:	6979      	ldr	r1, [r7, #20]
 8018206:	69ba      	ldr	r2, [r7, #24]
 8018208:	e841 2300 	strex	r3, r2, [r1]
 801820c:	613b      	str	r3, [r7, #16]
   return(result);
 801820e:	693b      	ldr	r3, [r7, #16]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d1e5      	bne.n	80181e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	2220      	movs	r2, #32
 8018218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	2200      	movs	r2, #0
 8018220:	631a      	str	r2, [r3, #48]	; 0x30
}
 8018222:	bf00      	nop
 8018224:	3754      	adds	r7, #84	; 0x54
 8018226:	46bd      	mov	sp, r7
 8018228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822c:	4770      	bx	lr

0801822e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801822e:	b580      	push	{r7, lr}
 8018230:	b084      	sub	sp, #16
 8018232:	af00      	add	r7, sp, #0
 8018234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801823a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801823c:	68fb      	ldr	r3, [r7, #12]
 801823e:	2200      	movs	r2, #0
 8018240:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8018242:	68fb      	ldr	r3, [r7, #12]
 8018244:	2200      	movs	r2, #0
 8018246:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8018248:	68f8      	ldr	r0, [r7, #12]
 801824a:	f7ff fb56 	bl	80178fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801824e:	bf00      	nop
 8018250:	3710      	adds	r7, #16
 8018252:	46bd      	mov	sp, r7
 8018254:	bd80      	pop	{r7, pc}

08018256 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8018256:	b580      	push	{r7, lr}
 8018258:	b084      	sub	sp, #16
 801825a:	af00      	add	r7, sp, #0
 801825c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018262:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018268:	2200      	movs	r2, #0
 801826a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018270:	2b00      	cmp	r3, #0
 8018272:	d004      	beq.n	801827e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8018274:	68fb      	ldr	r3, [r7, #12]
 8018276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801827a:	2b00      	cmp	r3, #0
 801827c:	d117      	bne.n	80182ae <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	2200      	movs	r2, #0
 8018282:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8018284:	68fb      	ldr	r3, [r7, #12]
 8018286:	2200      	movs	r2, #0
 8018288:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	2200      	movs	r2, #0
 801828e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	2220      	movs	r2, #32
 8018294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8018298:	68fb      	ldr	r3, [r7, #12]
 801829a:	2220      	movs	r2, #32
 801829c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	2200      	movs	r2, #0
 80182a4:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 80182a6:	68f8      	ldr	r0, [r7, #12]
 80182a8:	f7ff fb31 	bl	801790e <HAL_UART_AbortCpltCallback>
 80182ac:	e000      	b.n	80182b0 <UART_DMATxAbortCallback+0x5a>
      return;
 80182ae:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80182b0:	3710      	adds	r7, #16
 80182b2:	46bd      	mov	sp, r7
 80182b4:	bd80      	pop	{r7, pc}

080182b6 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80182b6:	b580      	push	{r7, lr}
 80182b8:	b084      	sub	sp, #16
 80182ba:	af00      	add	r7, sp, #0
 80182bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182c2:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182c8:	2200      	movs	r2, #0
 80182ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d004      	beq.n	80182de <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 80182d4:	68fb      	ldr	r3, [r7, #12]
 80182d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d117      	bne.n	801830e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	2200      	movs	r2, #0
 80182e2:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	2200      	movs	r2, #0
 80182e8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	2200      	movs	r2, #0
 80182ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	2220      	movs	r2, #32
 80182f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	2220      	movs	r2, #32
 80182fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018300:	68fb      	ldr	r3, [r7, #12]
 8018302:	2200      	movs	r2, #0
 8018304:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8018306:	68f8      	ldr	r0, [r7, #12]
 8018308:	f7ff fb01 	bl	801790e <HAL_UART_AbortCpltCallback>
 801830c:	e000      	b.n	8018310 <UART_DMARxAbortCallback+0x5a>
      return;
 801830e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018310:	3710      	adds	r7, #16
 8018312:	46bd      	mov	sp, r7
 8018314:	bd80      	pop	{r7, pc}

08018316 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8018316:	b580      	push	{r7, lr}
 8018318:	b084      	sub	sp, #16
 801831a:	af00      	add	r7, sp, #0
 801831c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018322:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	2200      	movs	r2, #0
 8018328:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	2220      	movs	r2, #32
 801832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 8018332:	68f8      	ldr	r0, [r7, #12]
 8018334:	f7ff faf5 	bl	8017922 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018338:	bf00      	nop
 801833a:	3710      	adds	r7, #16
 801833c:	46bd      	mov	sp, r7
 801833e:	bd80      	pop	{r7, pc}

08018340 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8018340:	b580      	push	{r7, lr}
 8018342:	b084      	sub	sp, #16
 8018344:	af00      	add	r7, sp, #0
 8018346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801834c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	2200      	movs	r2, #0
 8018352:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2220      	movs	r2, #32
 8018358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2200      	movs	r2, #0
 8018360:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8018362:	68f8      	ldr	r0, [r7, #12]
 8018364:	f7ff fae7 	bl	8017936 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8018368:	bf00      	nop
 801836a:	3710      	adds	r7, #16
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}

08018370 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8018370:	b480      	push	{r7}
 8018372:	b085      	sub	sp, #20
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801837e:	b2db      	uxtb	r3, r3
 8018380:	2b21      	cmp	r3, #33	; 0x21
 8018382:	d13e      	bne.n	8018402 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	689b      	ldr	r3, [r3, #8]
 8018388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801838c:	d114      	bne.n	80183b8 <UART_Transmit_IT+0x48>
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	691b      	ldr	r3, [r3, #16]
 8018392:	2b00      	cmp	r3, #0
 8018394:	d110      	bne.n	80183b8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	6a1b      	ldr	r3, [r3, #32]
 801839a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801839c:	68fb      	ldr	r3, [r7, #12]
 801839e:	881b      	ldrh	r3, [r3, #0]
 80183a0:	461a      	mov	r2, r3
 80183a2:	687b      	ldr	r3, [r7, #4]
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80183aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6a1b      	ldr	r3, [r3, #32]
 80183b0:	1c9a      	adds	r2, r3, #2
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	621a      	str	r2, [r3, #32]
 80183b6:	e008      	b.n	80183ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6a1b      	ldr	r3, [r3, #32]
 80183bc:	1c59      	adds	r1, r3, #1
 80183be:	687a      	ldr	r2, [r7, #4]
 80183c0:	6211      	str	r1, [r2, #32]
 80183c2:	781a      	ldrb	r2, [r3, #0]
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	681b      	ldr	r3, [r3, #0]
 80183c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80183ce:	b29b      	uxth	r3, r3
 80183d0:	3b01      	subs	r3, #1
 80183d2:	b29b      	uxth	r3, r3
 80183d4:	687a      	ldr	r2, [r7, #4]
 80183d6:	4619      	mov	r1, r3
 80183d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d10f      	bne.n	80183fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80183de:	687b      	ldr	r3, [r7, #4]
 80183e0:	681b      	ldr	r3, [r3, #0]
 80183e2:	68da      	ldr	r2, [r3, #12]
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80183ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	68da      	ldr	r2, [r3, #12]
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80183fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80183fe:	2300      	movs	r3, #0
 8018400:	e000      	b.n	8018404 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8018402:	2302      	movs	r3, #2
  }
}
 8018404:	4618      	mov	r0, r3
 8018406:	3714      	adds	r7, #20
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr

08018410 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b082      	sub	sp, #8
 8018414:	af00      	add	r7, sp, #0
 8018416:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	68da      	ldr	r2, [r3, #12]
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018426:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	2220      	movs	r2, #32
 801842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	f7ff fa44 	bl	80178be <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8018436:	2300      	movs	r3, #0
}
 8018438:	4618      	mov	r0, r3
 801843a:	3708      	adds	r7, #8
 801843c:	46bd      	mov	sp, r7
 801843e:	bd80      	pop	{r7, pc}

08018440 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8018440:	b580      	push	{r7, lr}
 8018442:	b08c      	sub	sp, #48	; 0x30
 8018444:	af00      	add	r7, sp, #0
 8018446:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801844e:	b2db      	uxtb	r3, r3
 8018450:	2b22      	cmp	r3, #34	; 0x22
 8018452:	f040 80ab 	bne.w	80185ac <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	689b      	ldr	r3, [r3, #8]
 801845a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801845e:	d117      	bne.n	8018490 <UART_Receive_IT+0x50>
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	691b      	ldr	r3, [r3, #16]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d113      	bne.n	8018490 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8018468:	2300      	movs	r3, #0
 801846a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018470:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	685b      	ldr	r3, [r3, #4]
 8018478:	b29b      	uxth	r3, r3
 801847a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801847e:	b29a      	uxth	r2, r3
 8018480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018482:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018488:	1c9a      	adds	r2, r3, #2
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	629a      	str	r2, [r3, #40]	; 0x28
 801848e:	e026      	b.n	80184de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018494:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8018496:	2300      	movs	r3, #0
 8018498:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	689b      	ldr	r3, [r3, #8]
 801849e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80184a2:	d007      	beq.n	80184b4 <UART_Receive_IT+0x74>
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	689b      	ldr	r3, [r3, #8]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d10a      	bne.n	80184c2 <UART_Receive_IT+0x82>
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	691b      	ldr	r3, [r3, #16]
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d106      	bne.n	80184c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	685b      	ldr	r3, [r3, #4]
 80184ba:	b2da      	uxtb	r2, r3
 80184bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184be:	701a      	strb	r2, [r3, #0]
 80184c0:	e008      	b.n	80184d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	685b      	ldr	r3, [r3, #4]
 80184c8:	b2db      	uxtb	r3, r3
 80184ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80184ce:	b2da      	uxtb	r2, r3
 80184d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80184d8:	1c5a      	adds	r2, r3, #1
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80184e2:	b29b      	uxth	r3, r3
 80184e4:	3b01      	subs	r3, #1
 80184e6:	b29b      	uxth	r3, r3
 80184e8:	687a      	ldr	r2, [r7, #4]
 80184ea:	4619      	mov	r1, r3
 80184ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d15a      	bne.n	80185a8 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	68da      	ldr	r2, [r3, #12]
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	f022 0220 	bic.w	r2, r2, #32
 8018500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	68da      	ldr	r2, [r3, #12]
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8018510:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	695a      	ldr	r2, [r3, #20]
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	681b      	ldr	r3, [r3, #0]
 801851c:	f022 0201 	bic.w	r2, r2, #1
 8018520:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	2220      	movs	r2, #32
 8018526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801852e:	2b01      	cmp	r3, #1
 8018530:	d135      	bne.n	801859e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	2200      	movs	r2, #0
 8018536:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	681b      	ldr	r3, [r3, #0]
 801853c:	330c      	adds	r3, #12
 801853e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	e853 3f00 	ldrex	r3, [r3]
 8018546:	613b      	str	r3, [r7, #16]
   return(result);
 8018548:	693b      	ldr	r3, [r7, #16]
 801854a:	f023 0310 	bic.w	r3, r3, #16
 801854e:	627b      	str	r3, [r7, #36]	; 0x24
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	681b      	ldr	r3, [r3, #0]
 8018554:	330c      	adds	r3, #12
 8018556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018558:	623a      	str	r2, [r7, #32]
 801855a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801855c:	69f9      	ldr	r1, [r7, #28]
 801855e:	6a3a      	ldr	r2, [r7, #32]
 8018560:	e841 2300 	strex	r3, r2, [r1]
 8018564:	61bb      	str	r3, [r7, #24]
   return(result);
 8018566:	69bb      	ldr	r3, [r7, #24]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d1e5      	bne.n	8018538 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	f003 0310 	and.w	r3, r3, #16
 8018576:	2b10      	cmp	r3, #16
 8018578:	d10a      	bne.n	8018590 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801857a:	2300      	movs	r3, #0
 801857c:	60fb      	str	r3, [r7, #12]
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	60fb      	str	r3, [r7, #12]
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	685b      	ldr	r3, [r3, #4]
 801858c:	60fb      	str	r3, [r7, #12]
 801858e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8018594:	4619      	mov	r1, r3
 8018596:	6878      	ldr	r0, [r7, #4]
 8018598:	f7ff f9d7 	bl	801794a <HAL_UARTEx_RxEventCallback>
 801859c:	e002      	b.n	80185a4 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f7e9 f9b2 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80185a4:	2300      	movs	r3, #0
 80185a6:	e002      	b.n	80185ae <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80185a8:	2300      	movs	r3, #0
 80185aa:	e000      	b.n	80185ae <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80185ac:	2302      	movs	r3, #2
  }
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	3730      	adds	r7, #48	; 0x30
 80185b2:	46bd      	mov	sp, r7
 80185b4:	bd80      	pop	{r7, pc}

080185b6 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80185b6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80185ba:	b0c0      	sub	sp, #256	; 0x100
 80185bc:	af00      	add	r7, sp, #0
 80185be:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80185c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	691b      	ldr	r3, [r3, #16]
 80185ca:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80185ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185d2:	68d9      	ldr	r1, [r3, #12]
 80185d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185d8:	681a      	ldr	r2, [r3, #0]
 80185da:	ea40 0301 	orr.w	r3, r0, r1
 80185de:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80185e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185e4:	689a      	ldr	r2, [r3, #8]
 80185e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185ea:	691b      	ldr	r3, [r3, #16]
 80185ec:	431a      	orrs	r2, r3
 80185ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185f2:	695b      	ldr	r3, [r3, #20]
 80185f4:	431a      	orrs	r2, r3
 80185f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80185fa:	69db      	ldr	r3, [r3, #28]
 80185fc:	4313      	orrs	r3, r2
 80185fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8018602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	68db      	ldr	r3, [r3, #12]
 801860a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801860e:	f021 010c 	bic.w	r1, r1, #12
 8018612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018616:	681a      	ldr	r2, [r3, #0]
 8018618:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801861c:	430b      	orrs	r3, r1
 801861e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8018620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	695b      	ldr	r3, [r3, #20]
 8018628:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 801862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018630:	6999      	ldr	r1, [r3, #24]
 8018632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018636:	681a      	ldr	r2, [r3, #0]
 8018638:	ea40 0301 	orr.w	r3, r0, r1
 801863c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801863e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018642:	681a      	ldr	r2, [r3, #0]
 8018644:	4b8e      	ldr	r3, [pc, #568]	; (8018880 <UART_SetConfig+0x2ca>)
 8018646:	429a      	cmp	r2, r3
 8018648:	d005      	beq.n	8018656 <UART_SetConfig+0xa0>
 801864a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801864e:	681a      	ldr	r2, [r3, #0]
 8018650:	4b8c      	ldr	r3, [pc, #560]	; (8018884 <UART_SetConfig+0x2ce>)
 8018652:	429a      	cmp	r2, r3
 8018654:	d104      	bne.n	8018660 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8018656:	f7fa fa11 	bl	8012a7c <HAL_RCC_GetPCLK2Freq>
 801865a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 801865e:	e003      	b.n	8018668 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8018660:	f7fa f9f8 	bl	8012a54 <HAL_RCC_GetPCLK1Freq>
 8018664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8018668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801866c:	69db      	ldr	r3, [r3, #28]
 801866e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018672:	f040 810b 	bne.w	801888c <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8018676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801867a:	2200      	movs	r2, #0
 801867c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8018680:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8018684:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8018688:	4622      	mov	r2, r4
 801868a:	462b      	mov	r3, r5
 801868c:	1891      	adds	r1, r2, r2
 801868e:	65b9      	str	r1, [r7, #88]	; 0x58
 8018690:	415b      	adcs	r3, r3
 8018692:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018694:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8018698:	4621      	mov	r1, r4
 801869a:	eb12 0801 	adds.w	r8, r2, r1
 801869e:	4629      	mov	r1, r5
 80186a0:	eb43 0901 	adc.w	r9, r3, r1
 80186a4:	f04f 0200 	mov.w	r2, #0
 80186a8:	f04f 0300 	mov.w	r3, #0
 80186ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80186b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80186b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80186b8:	4690      	mov	r8, r2
 80186ba:	4699      	mov	r9, r3
 80186bc:	4623      	mov	r3, r4
 80186be:	eb18 0303 	adds.w	r3, r8, r3
 80186c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80186c6:	462b      	mov	r3, r5
 80186c8:	eb49 0303 	adc.w	r3, r9, r3
 80186cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80186d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186d4:	685b      	ldr	r3, [r3, #4]
 80186d6:	2200      	movs	r2, #0
 80186d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80186dc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80186e0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80186e4:	460b      	mov	r3, r1
 80186e6:	18db      	adds	r3, r3, r3
 80186e8:	653b      	str	r3, [r7, #80]	; 0x50
 80186ea:	4613      	mov	r3, r2
 80186ec:	eb42 0303 	adc.w	r3, r2, r3
 80186f0:	657b      	str	r3, [r7, #84]	; 0x54
 80186f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80186f6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80186fa:	f001 fabb 	bl	8019c74 <__aeabi_uldivmod>
 80186fe:	4602      	mov	r2, r0
 8018700:	460b      	mov	r3, r1
 8018702:	4b61      	ldr	r3, [pc, #388]	; (8018888 <UART_SetConfig+0x2d2>)
 8018704:	fba3 2302 	umull	r2, r3, r3, r2
 8018708:	095b      	lsrs	r3, r3, #5
 801870a:	011c      	lsls	r4, r3, #4
 801870c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018710:	2200      	movs	r2, #0
 8018712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018716:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801871a:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801871e:	4642      	mov	r2, r8
 8018720:	464b      	mov	r3, r9
 8018722:	1891      	adds	r1, r2, r2
 8018724:	64b9      	str	r1, [r7, #72]	; 0x48
 8018726:	415b      	adcs	r3, r3
 8018728:	64fb      	str	r3, [r7, #76]	; 0x4c
 801872a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801872e:	4641      	mov	r1, r8
 8018730:	eb12 0a01 	adds.w	sl, r2, r1
 8018734:	4649      	mov	r1, r9
 8018736:	eb43 0b01 	adc.w	fp, r3, r1
 801873a:	f04f 0200 	mov.w	r2, #0
 801873e:	f04f 0300 	mov.w	r3, #0
 8018742:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8018746:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801874a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801874e:	4692      	mov	sl, r2
 8018750:	469b      	mov	fp, r3
 8018752:	4643      	mov	r3, r8
 8018754:	eb1a 0303 	adds.w	r3, sl, r3
 8018758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801875c:	464b      	mov	r3, r9
 801875e:	eb4b 0303 	adc.w	r3, fp, r3
 8018762:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801876a:	685b      	ldr	r3, [r3, #4]
 801876c:	2200      	movs	r2, #0
 801876e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8018772:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8018776:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801877a:	460b      	mov	r3, r1
 801877c:	18db      	adds	r3, r3, r3
 801877e:	643b      	str	r3, [r7, #64]	; 0x40
 8018780:	4613      	mov	r3, r2
 8018782:	eb42 0303 	adc.w	r3, r2, r3
 8018786:	647b      	str	r3, [r7, #68]	; 0x44
 8018788:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801878c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8018790:	f001 fa70 	bl	8019c74 <__aeabi_uldivmod>
 8018794:	4602      	mov	r2, r0
 8018796:	460b      	mov	r3, r1
 8018798:	4611      	mov	r1, r2
 801879a:	4b3b      	ldr	r3, [pc, #236]	; (8018888 <UART_SetConfig+0x2d2>)
 801879c:	fba3 2301 	umull	r2, r3, r3, r1
 80187a0:	095b      	lsrs	r3, r3, #5
 80187a2:	2264      	movs	r2, #100	; 0x64
 80187a4:	fb02 f303 	mul.w	r3, r2, r3
 80187a8:	1acb      	subs	r3, r1, r3
 80187aa:	00db      	lsls	r3, r3, #3
 80187ac:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80187b0:	4b35      	ldr	r3, [pc, #212]	; (8018888 <UART_SetConfig+0x2d2>)
 80187b2:	fba3 2302 	umull	r2, r3, r3, r2
 80187b6:	095b      	lsrs	r3, r3, #5
 80187b8:	005b      	lsls	r3, r3, #1
 80187ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80187be:	441c      	add	r4, r3
 80187c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80187c4:	2200      	movs	r2, #0
 80187c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80187ca:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80187ce:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80187d2:	4642      	mov	r2, r8
 80187d4:	464b      	mov	r3, r9
 80187d6:	1891      	adds	r1, r2, r2
 80187d8:	63b9      	str	r1, [r7, #56]	; 0x38
 80187da:	415b      	adcs	r3, r3
 80187dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80187de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80187e2:	4641      	mov	r1, r8
 80187e4:	1851      	adds	r1, r2, r1
 80187e6:	6339      	str	r1, [r7, #48]	; 0x30
 80187e8:	4649      	mov	r1, r9
 80187ea:	414b      	adcs	r3, r1
 80187ec:	637b      	str	r3, [r7, #52]	; 0x34
 80187ee:	f04f 0200 	mov.w	r2, #0
 80187f2:	f04f 0300 	mov.w	r3, #0
 80187f6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80187fa:	4659      	mov	r1, fp
 80187fc:	00cb      	lsls	r3, r1, #3
 80187fe:	4651      	mov	r1, sl
 8018800:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018804:	4651      	mov	r1, sl
 8018806:	00ca      	lsls	r2, r1, #3
 8018808:	4610      	mov	r0, r2
 801880a:	4619      	mov	r1, r3
 801880c:	4603      	mov	r3, r0
 801880e:	4642      	mov	r2, r8
 8018810:	189b      	adds	r3, r3, r2
 8018812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8018816:	464b      	mov	r3, r9
 8018818:	460a      	mov	r2, r1
 801881a:	eb42 0303 	adc.w	r3, r2, r3
 801881e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8018822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018826:	685b      	ldr	r3, [r3, #4]
 8018828:	2200      	movs	r2, #0
 801882a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801882e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8018832:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8018836:	460b      	mov	r3, r1
 8018838:	18db      	adds	r3, r3, r3
 801883a:	62bb      	str	r3, [r7, #40]	; 0x28
 801883c:	4613      	mov	r3, r2
 801883e:	eb42 0303 	adc.w	r3, r2, r3
 8018842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018844:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8018848:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801884c:	f001 fa12 	bl	8019c74 <__aeabi_uldivmod>
 8018850:	4602      	mov	r2, r0
 8018852:	460b      	mov	r3, r1
 8018854:	4b0c      	ldr	r3, [pc, #48]	; (8018888 <UART_SetConfig+0x2d2>)
 8018856:	fba3 1302 	umull	r1, r3, r3, r2
 801885a:	095b      	lsrs	r3, r3, #5
 801885c:	2164      	movs	r1, #100	; 0x64
 801885e:	fb01 f303 	mul.w	r3, r1, r3
 8018862:	1ad3      	subs	r3, r2, r3
 8018864:	00db      	lsls	r3, r3, #3
 8018866:	3332      	adds	r3, #50	; 0x32
 8018868:	4a07      	ldr	r2, [pc, #28]	; (8018888 <UART_SetConfig+0x2d2>)
 801886a:	fba2 2303 	umull	r2, r3, r2, r3
 801886e:	095b      	lsrs	r3, r3, #5
 8018870:	f003 0207 	and.w	r2, r3, #7
 8018874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	4422      	add	r2, r4
 801887c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801887e:	e104      	b.n	8018a8a <UART_SetConfig+0x4d4>
 8018880:	40011000 	.word	0x40011000
 8018884:	40011400 	.word	0x40011400
 8018888:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801888c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018890:	2200      	movs	r2, #0
 8018892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8018896:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 801889a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801889e:	4642      	mov	r2, r8
 80188a0:	464b      	mov	r3, r9
 80188a2:	1891      	adds	r1, r2, r2
 80188a4:	6239      	str	r1, [r7, #32]
 80188a6:	415b      	adcs	r3, r3
 80188a8:	627b      	str	r3, [r7, #36]	; 0x24
 80188aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80188ae:	4641      	mov	r1, r8
 80188b0:	1854      	adds	r4, r2, r1
 80188b2:	4649      	mov	r1, r9
 80188b4:	eb43 0501 	adc.w	r5, r3, r1
 80188b8:	f04f 0200 	mov.w	r2, #0
 80188bc:	f04f 0300 	mov.w	r3, #0
 80188c0:	00eb      	lsls	r3, r5, #3
 80188c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80188c6:	00e2      	lsls	r2, r4, #3
 80188c8:	4614      	mov	r4, r2
 80188ca:	461d      	mov	r5, r3
 80188cc:	4643      	mov	r3, r8
 80188ce:	18e3      	adds	r3, r4, r3
 80188d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80188d4:	464b      	mov	r3, r9
 80188d6:	eb45 0303 	adc.w	r3, r5, r3
 80188da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80188de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80188e2:	685b      	ldr	r3, [r3, #4]
 80188e4:	2200      	movs	r2, #0
 80188e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80188ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80188ee:	f04f 0200 	mov.w	r2, #0
 80188f2:	f04f 0300 	mov.w	r3, #0
 80188f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80188fa:	4629      	mov	r1, r5
 80188fc:	008b      	lsls	r3, r1, #2
 80188fe:	4621      	mov	r1, r4
 8018900:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018904:	4621      	mov	r1, r4
 8018906:	008a      	lsls	r2, r1, #2
 8018908:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801890c:	f001 f9b2 	bl	8019c74 <__aeabi_uldivmod>
 8018910:	4602      	mov	r2, r0
 8018912:	460b      	mov	r3, r1
 8018914:	4b60      	ldr	r3, [pc, #384]	; (8018a98 <UART_SetConfig+0x4e2>)
 8018916:	fba3 2302 	umull	r2, r3, r3, r2
 801891a:	095b      	lsrs	r3, r3, #5
 801891c:	011c      	lsls	r4, r3, #4
 801891e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018922:	2200      	movs	r2, #0
 8018924:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018928:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801892c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8018930:	4642      	mov	r2, r8
 8018932:	464b      	mov	r3, r9
 8018934:	1891      	adds	r1, r2, r2
 8018936:	61b9      	str	r1, [r7, #24]
 8018938:	415b      	adcs	r3, r3
 801893a:	61fb      	str	r3, [r7, #28]
 801893c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8018940:	4641      	mov	r1, r8
 8018942:	1851      	adds	r1, r2, r1
 8018944:	6139      	str	r1, [r7, #16]
 8018946:	4649      	mov	r1, r9
 8018948:	414b      	adcs	r3, r1
 801894a:	617b      	str	r3, [r7, #20]
 801894c:	f04f 0200 	mov.w	r2, #0
 8018950:	f04f 0300 	mov.w	r3, #0
 8018954:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8018958:	4659      	mov	r1, fp
 801895a:	00cb      	lsls	r3, r1, #3
 801895c:	4651      	mov	r1, sl
 801895e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018962:	4651      	mov	r1, sl
 8018964:	00ca      	lsls	r2, r1, #3
 8018966:	4610      	mov	r0, r2
 8018968:	4619      	mov	r1, r3
 801896a:	4603      	mov	r3, r0
 801896c:	4642      	mov	r2, r8
 801896e:	189b      	adds	r3, r3, r2
 8018970:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018974:	464b      	mov	r3, r9
 8018976:	460a      	mov	r2, r1
 8018978:	eb42 0303 	adc.w	r3, r2, r3
 801897c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018984:	685b      	ldr	r3, [r3, #4]
 8018986:	2200      	movs	r2, #0
 8018988:	67bb      	str	r3, [r7, #120]	; 0x78
 801898a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801898c:	f04f 0200 	mov.w	r2, #0
 8018990:	f04f 0300 	mov.w	r3, #0
 8018994:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018998:	4649      	mov	r1, r9
 801899a:	008b      	lsls	r3, r1, #2
 801899c:	4641      	mov	r1, r8
 801899e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80189a2:	4641      	mov	r1, r8
 80189a4:	008a      	lsls	r2, r1, #2
 80189a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80189aa:	f001 f963 	bl	8019c74 <__aeabi_uldivmod>
 80189ae:	4602      	mov	r2, r0
 80189b0:	460b      	mov	r3, r1
 80189b2:	4b39      	ldr	r3, [pc, #228]	; (8018a98 <UART_SetConfig+0x4e2>)
 80189b4:	fba3 1302 	umull	r1, r3, r3, r2
 80189b8:	095b      	lsrs	r3, r3, #5
 80189ba:	2164      	movs	r1, #100	; 0x64
 80189bc:	fb01 f303 	mul.w	r3, r1, r3
 80189c0:	1ad3      	subs	r3, r2, r3
 80189c2:	011b      	lsls	r3, r3, #4
 80189c4:	3332      	adds	r3, #50	; 0x32
 80189c6:	4a34      	ldr	r2, [pc, #208]	; (8018a98 <UART_SetConfig+0x4e2>)
 80189c8:	fba2 2303 	umull	r2, r3, r2, r3
 80189cc:	095b      	lsrs	r3, r3, #5
 80189ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80189d2:	441c      	add	r4, r3
 80189d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80189d8:	2200      	movs	r2, #0
 80189da:	673b      	str	r3, [r7, #112]	; 0x70
 80189dc:	677a      	str	r2, [r7, #116]	; 0x74
 80189de:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80189e2:	4642      	mov	r2, r8
 80189e4:	464b      	mov	r3, r9
 80189e6:	1891      	adds	r1, r2, r2
 80189e8:	60b9      	str	r1, [r7, #8]
 80189ea:	415b      	adcs	r3, r3
 80189ec:	60fb      	str	r3, [r7, #12]
 80189ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80189f2:	4641      	mov	r1, r8
 80189f4:	1851      	adds	r1, r2, r1
 80189f6:	6039      	str	r1, [r7, #0]
 80189f8:	4649      	mov	r1, r9
 80189fa:	414b      	adcs	r3, r1
 80189fc:	607b      	str	r3, [r7, #4]
 80189fe:	f04f 0200 	mov.w	r2, #0
 8018a02:	f04f 0300 	mov.w	r3, #0
 8018a06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8018a0a:	4659      	mov	r1, fp
 8018a0c:	00cb      	lsls	r3, r1, #3
 8018a0e:	4651      	mov	r1, sl
 8018a10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8018a14:	4651      	mov	r1, sl
 8018a16:	00ca      	lsls	r2, r1, #3
 8018a18:	4610      	mov	r0, r2
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	4603      	mov	r3, r0
 8018a1e:	4642      	mov	r2, r8
 8018a20:	189b      	adds	r3, r3, r2
 8018a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8018a24:	464b      	mov	r3, r9
 8018a26:	460a      	mov	r2, r1
 8018a28:	eb42 0303 	adc.w	r3, r2, r3
 8018a2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8018a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018a32:	685b      	ldr	r3, [r3, #4]
 8018a34:	2200      	movs	r2, #0
 8018a36:	663b      	str	r3, [r7, #96]	; 0x60
 8018a38:	667a      	str	r2, [r7, #100]	; 0x64
 8018a3a:	f04f 0200 	mov.w	r2, #0
 8018a3e:	f04f 0300 	mov.w	r3, #0
 8018a42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8018a46:	4649      	mov	r1, r9
 8018a48:	008b      	lsls	r3, r1, #2
 8018a4a:	4641      	mov	r1, r8
 8018a4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018a50:	4641      	mov	r1, r8
 8018a52:	008a      	lsls	r2, r1, #2
 8018a54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8018a58:	f001 f90c 	bl	8019c74 <__aeabi_uldivmod>
 8018a5c:	4602      	mov	r2, r0
 8018a5e:	460b      	mov	r3, r1
 8018a60:	4b0d      	ldr	r3, [pc, #52]	; (8018a98 <UART_SetConfig+0x4e2>)
 8018a62:	fba3 1302 	umull	r1, r3, r3, r2
 8018a66:	095b      	lsrs	r3, r3, #5
 8018a68:	2164      	movs	r1, #100	; 0x64
 8018a6a:	fb01 f303 	mul.w	r3, r1, r3
 8018a6e:	1ad3      	subs	r3, r2, r3
 8018a70:	011b      	lsls	r3, r3, #4
 8018a72:	3332      	adds	r3, #50	; 0x32
 8018a74:	4a08      	ldr	r2, [pc, #32]	; (8018a98 <UART_SetConfig+0x4e2>)
 8018a76:	fba2 2303 	umull	r2, r3, r2, r3
 8018a7a:	095b      	lsrs	r3, r3, #5
 8018a7c:	f003 020f 	and.w	r2, r3, #15
 8018a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	4422      	add	r2, r4
 8018a88:	609a      	str	r2, [r3, #8]
}
 8018a8a:	bf00      	nop
 8018a8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018a90:	46bd      	mov	sp, r7
 8018a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018a96:	bf00      	nop
 8018a98:	51eb851f 	.word	0x51eb851f

08018a9c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8018a9c:	b480      	push	{r7}
 8018a9e:	b085      	sub	sp, #20
 8018aa0:	af00      	add	r7, sp, #0
 8018aa2:	6078      	str	r0, [r7, #4]
 8018aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ab4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018ab6:	68fa      	ldr	r2, [r7, #12]
 8018ab8:	4b20      	ldr	r3, [pc, #128]	; (8018b3c <FSMC_NORSRAM_Init+0xa0>)
 8018aba:	4013      	ands	r3, r2
 8018abc:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018abe:	683b      	ldr	r3, [r7, #0]
 8018ac0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018ac6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8018acc:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8018ace:	683b      	ldr	r3, [r7, #0]
 8018ad0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8018ad2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8018ad4:	683b      	ldr	r3, [r7, #0]
 8018ad6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8018ad8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8018ada:	683b      	ldr	r3, [r7, #0]
 8018adc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8018ade:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018ae0:	683b      	ldr	r3, [r7, #0]
 8018ae2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8018ae4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8018ae6:	683b      	ldr	r3, [r7, #0]
 8018ae8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8018aea:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8018aec:	683b      	ldr	r3, [r7, #0]
 8018aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018af0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8018af2:	683b      	ldr	r3, [r7, #0]
 8018af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8018af6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8018af8:	683b      	ldr	r3, [r7, #0]
 8018afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8018afc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8018b02:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8018b04:	683b      	ldr	r3, [r7, #0]
 8018b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8018b08:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018b0a:	68fa      	ldr	r2, [r7, #12]
 8018b0c:	4313      	orrs	r3, r2
 8018b0e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8018b10:	683b      	ldr	r3, [r7, #0]
 8018b12:	689b      	ldr	r3, [r3, #8]
 8018b14:	2b08      	cmp	r3, #8
 8018b16:	d103      	bne.n	8018b20 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8018b18:	68fb      	ldr	r3, [r7, #12]
 8018b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b1e:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8018b20:	683b      	ldr	r3, [r7, #0]
 8018b22:	681a      	ldr	r2, [r3, #0]
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	68f9      	ldr	r1, [r7, #12]
 8018b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8018b2c:	2300      	movs	r3, #0
}
 8018b2e:	4618      	mov	r0, r3
 8018b30:	3714      	adds	r7, #20
 8018b32:	46bd      	mov	sp, r7
 8018b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b38:	4770      	bx	lr
 8018b3a:	bf00      	nop
 8018b3c:	fff00080 	.word	0xfff00080

08018b40 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8018b40:	b480      	push	{r7}
 8018b42:	b085      	sub	sp, #20
 8018b44:	af00      	add	r7, sp, #0
 8018b46:	60f8      	str	r0, [r7, #12]
 8018b48:	60b9      	str	r1, [r7, #8]
 8018b4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 8018b4c:	68fb      	ldr	r3, [r7, #12]
 8018b4e:	687a      	ldr	r2, [r7, #4]
 8018b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b54:	f023 0101 	bic.w	r1, r3, #1
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	687a      	ldr	r2, [r7, #4]
 8018b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	687a      	ldr	r2, [r7, #4]
 8018b6a:	f243 01db 	movw	r1, #12507	; 0x30db
 8018b6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018b72:	e005      	b.n	8018b80 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	687a      	ldr	r2, [r7, #4]
 8018b78:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8018b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	1c5a      	adds	r2, r3, #1
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018b8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	687a      	ldr	r2, [r7, #4]
 8018b92:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 8018b9a:	2300      	movs	r3, #0
}
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3714      	adds	r7, #20
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ba6:	4770      	bx	lr

08018ba8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018ba8:	b480      	push	{r7}
 8018baa:	b087      	sub	sp, #28
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	60f8      	str	r0, [r7, #12]
 8018bb0:	60b9      	str	r1, [r7, #8]
 8018bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018bb4:	2300      	movs	r3, #0
 8018bb6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	1c5a      	adds	r2, r3, #1
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bc2:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8018bca:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018bcc:	68bb      	ldr	r3, [r7, #8]
 8018bce:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018bd6:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8018bd8:	68bb      	ldr	r3, [r7, #8]
 8018bda:	689b      	ldr	r3, [r3, #8]
 8018bdc:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018bde:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	68db      	ldr	r3, [r3, #12]
 8018be4:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8018be6:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	691b      	ldr	r3, [r3, #16]
 8018bec:	3b01      	subs	r3, #1
 8018bee:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018bf0:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	695b      	ldr	r3, [r3, #20]
 8018bf6:	3b02      	subs	r3, #2
 8018bf8:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018bfa:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8018bfc:	68bb      	ldr	r3, [r7, #8]
 8018bfe:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018c00:	4313      	orrs	r3, r2
 8018c02:	697a      	ldr	r2, [r7, #20]
 8018c04:	4313      	orrs	r3, r2
 8018c06:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	1c5a      	adds	r2, r3, #1
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	6979      	ldr	r1, [r7, #20]
 8018c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8018c14:	2300      	movs	r3, #0
}
 8018c16:	4618      	mov	r0, r3
 8018c18:	371c      	adds	r7, #28
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c20:	4770      	bx	lr

08018c22 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8018c22:	b480      	push	{r7}
 8018c24:	b087      	sub	sp, #28
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	60f8      	str	r0, [r7, #12]
 8018c2a:	60b9      	str	r1, [r7, #8]
 8018c2c:	607a      	str	r2, [r7, #4]
 8018c2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8018c30:	2300      	movs	r3, #0
 8018c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8018c34:	683b      	ldr	r3, [r7, #0]
 8018c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018c3a:	d122      	bne.n	8018c82 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	687a      	ldr	r2, [r7, #4]
 8018c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c44:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8018c46:	697a      	ldr	r2, [r7, #20]
 8018c48:	4b14      	ldr	r3, [pc, #80]	; (8018c9c <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 8018c4a:	4013      	ands	r3, r2
 8018c4c:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018c4e:	68bb      	ldr	r3, [r7, #8]
 8018c50:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018c52:	68bb      	ldr	r3, [r7, #8]
 8018c54:	685b      	ldr	r3, [r3, #4]
 8018c56:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018c58:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8018c5a:	68bb      	ldr	r3, [r7, #8]
 8018c5c:	689b      	ldr	r3, [r3, #8]
 8018c5e:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8018c60:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	68db      	ldr	r3, [r3, #12]
 8018c66:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8018c68:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018c6e:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018c70:	697a      	ldr	r2, [r7, #20]
 8018c72:	4313      	orrs	r3, r2
 8018c74:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	687a      	ldr	r2, [r7, #4]
 8018c7a:	6979      	ldr	r1, [r7, #20]
 8018c7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018c80:	e005      	b.n	8018c8e <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	687a      	ldr	r2, [r7, #4]
 8018c86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8018c8e:	2300      	movs	r3, #0
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	371c      	adds	r7, #28
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr
 8018c9c:	cff00000 	.word	0xcff00000

08018ca0 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018ca0:	b480      	push	{r7}
 8018ca2:	b083      	sub	sp, #12
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
 8018ca8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	683a      	ldr	r2, [r7, #0]
 8018cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cb2:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	683a      	ldr	r2, [r7, #0]
 8018cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018cbe:	2300      	movs	r3, #0
}
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	370c      	adds	r7, #12
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr

08018ccc <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018ccc:	b480      	push	{r7}
 8018cce:	b083      	sub	sp, #12
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
 8018cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	683a      	ldr	r2, [r7, #0]
 8018cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	683a      	ldr	r2, [r7, #0]
 8018ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8018cea:	2300      	movs	r3, #0
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	370c      	adds	r7, #12
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr

08018cf8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b085      	sub	sp, #20
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8018d02:	2300      	movs	r3, #0
 8018d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	2b10      	cmp	r3, #16
 8018d0c:	d103      	bne.n	8018d16 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	60fb      	str	r3, [r7, #12]
 8018d14:	e002      	b.n	8018d1c <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	6a1b      	ldr	r3, [r3, #32]
 8018d1a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8018d1c:	68fa      	ldr	r2, [r7, #12]
 8018d1e:	4b16      	ldr	r3, [pc, #88]	; (8018d78 <FSMC_NAND_Init+0x80>)
 8018d20:	4013      	ands	r3, r2
 8018d22:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8018d28:	683b      	ldr	r3, [r7, #0]
 8018d2a:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8018d2c:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8018d32:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8018d34:	683b      	ldr	r3, [r7, #0]
 8018d36:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8018d38:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	695b      	ldr	r3, [r3, #20]
 8018d3e:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8018d40:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	699b      	ldr	r3, [r3, #24]
 8018d46:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8018d48:	431a      	orrs	r2, r3
 8018d4a:	68fb      	ldr	r3, [r7, #12]
 8018d4c:	4313      	orrs	r3, r2
 8018d4e:	f043 0308 	orr.w	r3, r3, #8
 8018d52:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	2b10      	cmp	r3, #16
 8018d5a:	d103      	bne.n	8018d64 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	68fa      	ldr	r2, [r7, #12]
 8018d60:	601a      	str	r2, [r3, #0]
 8018d62:	e002      	b.n	8018d6a <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	68fa      	ldr	r2, [r7, #12]
 8018d68:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8018d6a:	2300      	movs	r3, #0
}
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	3714      	adds	r7, #20
 8018d70:	46bd      	mov	sp, r7
 8018d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d76:	4770      	bx	lr
 8018d78:	fff00181 	.word	0xfff00181

08018d7c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018d7c:	b480      	push	{r7}
 8018d7e:	b087      	sub	sp, #28
 8018d80:	af00      	add	r7, sp, #0
 8018d82:	60f8      	str	r0, [r7, #12]
 8018d84:	60b9      	str	r1, [r7, #8]
 8018d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018d88:	2300      	movs	r3, #0
 8018d8a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b10      	cmp	r3, #16
 8018d90:	d103      	bne.n	8018d9a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	689b      	ldr	r3, [r3, #8]
 8018d96:	617b      	str	r3, [r7, #20]
 8018d98:	e002      	b.n	8018da0 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018d9e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018da0:	2300      	movs	r3, #0
 8018da2:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018da4:	68bb      	ldr	r3, [r7, #8]
 8018da6:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018da8:	68bb      	ldr	r3, [r7, #8]
 8018daa:	685b      	ldr	r3, [r3, #4]
 8018dac:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018dae:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018db0:	68bb      	ldr	r3, [r7, #8]
 8018db2:	689b      	ldr	r3, [r3, #8]
 8018db4:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018db6:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018db8:	68bb      	ldr	r3, [r7, #8]
 8018dba:	68db      	ldr	r3, [r3, #12]
 8018dbc:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018dbe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018dc0:	697a      	ldr	r2, [r7, #20]
 8018dc2:	4313      	orrs	r3, r2
 8018dc4:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	2b10      	cmp	r3, #16
 8018dca:	d103      	bne.n	8018dd4 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8018dcc:	68fb      	ldr	r3, [r7, #12]
 8018dce:	697a      	ldr	r2, [r7, #20]
 8018dd0:	609a      	str	r2, [r3, #8]
 8018dd2:	e002      	b.n	8018dda <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	697a      	ldr	r2, [r7, #20]
 8018dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8018dda:	2300      	movs	r3, #0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	371c      	adds	r7, #28
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr

08018de8 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018de8:	b480      	push	{r7}
 8018dea:	b087      	sub	sp, #28
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	60f8      	str	r0, [r7, #12]
 8018df0:	60b9      	str	r1, [r7, #8]
 8018df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018df4:	2300      	movs	r3, #0
 8018df6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	2b10      	cmp	r3, #16
 8018dfc:	d103      	bne.n	8018e06 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	68db      	ldr	r3, [r3, #12]
 8018e02:	617b      	str	r3, [r7, #20]
 8018e04:	e002      	b.n	8018e0c <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018e0a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018e10:	68bb      	ldr	r3, [r7, #8]
 8018e12:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	685b      	ldr	r3, [r3, #4]
 8018e18:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018e1a:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	689b      	ldr	r3, [r3, #8]
 8018e20:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018e22:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018e24:	68bb      	ldr	r3, [r7, #8]
 8018e26:	68db      	ldr	r3, [r3, #12]
 8018e28:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018e2a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018e2c:	697a      	ldr	r2, [r7, #20]
 8018e2e:	4313      	orrs	r3, r2
 8018e30:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	2b10      	cmp	r3, #16
 8018e36:	d103      	bne.n	8018e40 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	697a      	ldr	r2, [r7, #20]
 8018e3c:	60da      	str	r2, [r3, #12]
 8018e3e:	e002      	b.n	8018e46 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	697a      	ldr	r2, [r7, #20]
 8018e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8018e46:	2300      	movs	r3, #0
}
 8018e48:	4618      	mov	r0, r3
 8018e4a:	371c      	adds	r7, #28
 8018e4c:	46bd      	mov	sp, r7
 8018e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e52:	4770      	bx	lr

08018e54 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018e54:	b480      	push	{r7}
 8018e56:	b083      	sub	sp, #12
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 8018e5e:	683b      	ldr	r3, [r7, #0]
 8018e60:	2b10      	cmp	r3, #16
 8018e62:	d106      	bne.n	8018e72 <FSMC_NAND_DeInit+0x1e>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	f023 0204 	bic.w	r2, r3, #4
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	601a      	str	r2, [r3, #0]
 8018e70:	e005      	b.n	8018e7e <FSMC_NAND_DeInit+0x2a>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	6a1b      	ldr	r3, [r3, #32]
 8018e76:	f023 0204 	bic.w	r2, r3, #4
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	2b10      	cmp	r3, #16
 8018e82:	d10e      	bne.n	8018ea2 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2218      	movs	r2, #24
 8018e88:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	2240      	movs	r2, #64	; 0x40
 8018e8e:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e96:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018e9e:	60da      	str	r2, [r3, #12]
 8018ea0:	e00d      	b.n	8018ebe <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	2218      	movs	r2, #24
 8018ea6:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2240      	movs	r2, #64	; 0x40
 8018eac:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018eb4:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 8018ebe:	2300      	movs	r3, #0
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	370c      	adds	r7, #12
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr

08018ecc <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018ecc:	b480      	push	{r7}
 8018ece:	b083      	sub	sp, #12
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	6078      	str	r0, [r7, #4]
 8018ed4:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018ed6:	683b      	ldr	r3, [r7, #0]
 8018ed8:	2b10      	cmp	r3, #16
 8018eda:	d106      	bne.n	8018eea <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	601a      	str	r2, [r3, #0]
 8018ee8:	e005      	b.n	8018ef6 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	6a1b      	ldr	r3, [r3, #32]
 8018eee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018ef6:	2300      	movs	r3, #0
}
 8018ef8:	4618      	mov	r0, r3
 8018efa:	370c      	adds	r7, #12
 8018efc:	46bd      	mov	sp, r7
 8018efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f02:	4770      	bx	lr

08018f04 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018f04:	b480      	push	{r7}
 8018f06:	b083      	sub	sp, #12
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	6078      	str	r0, [r7, #4]
 8018f0c:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018f0e:	683b      	ldr	r3, [r7, #0]
 8018f10:	2b10      	cmp	r3, #16
 8018f12:	d106      	bne.n	8018f22 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	601a      	str	r2, [r3, #0]
 8018f20:	e005      	b.n	8018f2e <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6a1b      	ldr	r3, [r3, #32]
 8018f26:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 8018f2e:	2300      	movs	r3, #0
}
 8018f30:	4618      	mov	r0, r3
 8018f32:	370c      	adds	r7, #12
 8018f34:	46bd      	mov	sp, r7
 8018f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f3a:	4770      	bx	lr

08018f3c <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	60b9      	str	r1, [r7, #8]
 8018f46:	607a      	str	r2, [r7, #4]
 8018f48:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8018f4e:	f7ee f825 	bl	8006f9c <HAL_GetTick>
 8018f52:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018f54:	e010      	b.n	8018f78 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8018f56:	683b      	ldr	r3, [r7, #0]
 8018f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018f5c:	d00c      	beq.n	8018f78 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	2b00      	cmp	r3, #0
 8018f62:	d007      	beq.n	8018f74 <FSMC_NAND_GetECC+0x38>
 8018f64:	f7ee f81a 	bl	8006f9c <HAL_GetTick>
 8018f68:	4602      	mov	r2, r0
 8018f6a:	697b      	ldr	r3, [r7, #20]
 8018f6c:	1ad3      	subs	r3, r2, r3
 8018f6e:	683a      	ldr	r2, [r7, #0]
 8018f70:	429a      	cmp	r2, r3
 8018f72:	d201      	bcs.n	8018f78 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018f74:	2303      	movs	r3, #3
 8018f76:	e024      	b.n	8018fc2 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2b10      	cmp	r3, #16
 8018f7c:	d109      	bne.n	8018f92 <FSMC_NAND_GetECC+0x56>
 8018f7e:	68fb      	ldr	r3, [r7, #12]
 8018f80:	685b      	ldr	r3, [r3, #4]
 8018f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f86:	2b40      	cmp	r3, #64	; 0x40
 8018f88:	bf14      	ite	ne
 8018f8a:	2301      	movne	r3, #1
 8018f8c:	2300      	moveq	r3, #0
 8018f8e:	b2db      	uxtb	r3, r3
 8018f90:	e008      	b.n	8018fa4 <FSMC_NAND_GetECC+0x68>
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018f9a:	2b40      	cmp	r3, #64	; 0x40
 8018f9c:	bf14      	ite	ne
 8018f9e:	2301      	movne	r3, #1
 8018fa0:	2300      	moveq	r3, #0
 8018fa2:	b2db      	uxtb	r3, r3
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d1d6      	bne.n	8018f56 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	2b10      	cmp	r3, #16
 8018fac:	d104      	bne.n	8018fb8 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	695a      	ldr	r2, [r3, #20]
 8018fb2:	68bb      	ldr	r3, [r7, #8]
 8018fb4:	601a      	str	r2, [r3, #0]
 8018fb6:	e003      	b.n	8018fc0 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018fc0:	2300      	movs	r3, #0
}
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3718      	adds	r7, #24
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	bd80      	pop	{r7, pc}

08018fca <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018fca:	b480      	push	{r7}
 8018fcc:	b085      	sub	sp, #20
 8018fce:	af00      	add	r7, sp, #0
 8018fd0:	6078      	str	r0, [r7, #4]
 8018fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018fd8:	687b      	ldr	r3, [r7, #4]
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 8018fde:	68fb      	ldr	r3, [r7, #12]
 8018fe0:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018fe4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018fe8:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018ff4:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	689b      	ldr	r3, [r3, #8]
 8018ffa:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018ffc:	431a      	orrs	r2, r3
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	4313      	orrs	r3, r2
 8019002:	f043 0310 	orr.w	r3, r3, #16
 8019006:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	68fa      	ldr	r2, [r7, #12]
 801900c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 801900e:	2300      	movs	r3, #0
}
 8019010:	4618      	mov	r0, r3
 8019012:	3714      	adds	r7, #20
 8019014:	46bd      	mov	sp, r7
 8019016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901a:	4770      	bx	lr

0801901c <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 801901c:	b480      	push	{r7}
 801901e:	b085      	sub	sp, #20
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8019026:	2300      	movs	r3, #0
 8019028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 801902a:	687b      	ldr	r3, [r7, #4]
 801902c:	689b      	ldr	r3, [r3, #8]
 801902e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 8019030:	2300      	movs	r3, #0
 8019032:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8019034:	683b      	ldr	r3, [r7, #0]
 8019036:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8019038:	683b      	ldr	r3, [r7, #0]
 801903a:	685b      	ldr	r3, [r3, #4]
 801903c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 801903e:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	689b      	ldr	r3, [r3, #8]
 8019044:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 8019046:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 8019048:	683b      	ldr	r3, [r7, #0]
 801904a:	68db      	ldr	r3, [r3, #12]
 801904c:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 801904e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8019050:	68fa      	ldr	r2, [r7, #12]
 8019052:	4313      	orrs	r3, r2
 8019054:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	68fa      	ldr	r2, [r7, #12]
 801905a:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 801905c:	2300      	movs	r3, #0
}
 801905e:	4618      	mov	r0, r3
 8019060:	3714      	adds	r7, #20
 8019062:	46bd      	mov	sp, r7
 8019064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019068:	4770      	bx	lr

0801906a <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 801906a:	b480      	push	{r7}
 801906c:	b085      	sub	sp, #20
 801906e:	af00      	add	r7, sp, #0
 8019070:	6078      	str	r0, [r7, #4]
 8019072:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8019074:	2300      	movs	r3, #0
 8019076:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	68db      	ldr	r3, [r3, #12]
 801907c:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 801907e:	2300      	movs	r3, #0
 8019080:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8019086:	683b      	ldr	r3, [r7, #0]
 8019088:	685b      	ldr	r3, [r3, #4]
 801908a:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801908c:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 801908e:	683b      	ldr	r3, [r7, #0]
 8019090:	689b      	ldr	r3, [r3, #8]
 8019092:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8019094:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8019096:	683b      	ldr	r3, [r7, #0]
 8019098:	68db      	ldr	r3, [r3, #12]
 801909a:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 801909c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801909e:	68fa      	ldr	r2, [r7, #12]
 80190a0:	4313      	orrs	r3, r2
 80190a2:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	68fa      	ldr	r2, [r7, #12]
 80190a8:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 80190aa:	2300      	movs	r3, #0
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3714      	adds	r7, #20
 80190b0:	46bd      	mov	sp, r7
 80190b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b6:	4770      	bx	lr

080190b8 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80190b8:	b480      	push	{r7}
 80190ba:	b085      	sub	sp, #20
 80190bc:	af00      	add	r7, sp, #0
 80190be:	6078      	str	r0, [r7, #4]
 80190c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80190c2:	2300      	movs	r3, #0
 80190c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	691b      	ldr	r3, [r3, #16]
 80190ca:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 80190cc:	2300      	movs	r3, #0
 80190ce:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	685b      	ldr	r3, [r3, #4]
 80190d8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80190da:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 80190dc:	683b      	ldr	r3, [r7, #0]
 80190de:	689b      	ldr	r3, [r3, #8]
 80190e0:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 80190e2:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 80190e4:	683b      	ldr	r3, [r7, #0]
 80190e6:	68db      	ldr	r3, [r3, #12]
 80190e8:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 80190ea:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 80190ec:	68fa      	ldr	r2, [r7, #12]
 80190ee:	4313      	orrs	r3, r2
 80190f0:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	68fa      	ldr	r2, [r7, #12]
 80190f6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80190f8:	2300      	movs	r3, #0
}
 80190fa:	4618      	mov	r0, r3
 80190fc:	3714      	adds	r7, #20
 80190fe:	46bd      	mov	sp, r7
 8019100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019104:	4770      	bx	lr

08019106 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 8019106:	b480      	push	{r7}
 8019108:	b083      	sub	sp, #12
 801910a:	af00      	add	r7, sp, #0
 801910c:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 801910e:	687b      	ldr	r3, [r7, #4]
 8019110:	681b      	ldr	r3, [r3, #0]
 8019112:	f023 0204 	bic.w	r2, r3, #4
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	2218      	movs	r2, #24
 801911e:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	2200      	movs	r2, #0
 8019124:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801912c:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8019134:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801913c:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 801913e:	2300      	movs	r3, #0
}
 8019140:	4618      	mov	r0, r3
 8019142:	370c      	adds	r7, #12
 8019144:	46bd      	mov	sp, r7
 8019146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914a:	4770      	bx	lr

0801914c <strlen>:
 801914c:	4603      	mov	r3, r0
 801914e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019152:	2a00      	cmp	r2, #0
 8019154:	d1fb      	bne.n	801914e <strlen+0x2>
 8019156:	1a18      	subs	r0, r3, r0
 8019158:	3801      	subs	r0, #1
 801915a:	4770      	bx	lr
 801915c:	0000      	movs	r0, r0
	...

08019160 <memchr>:
 8019160:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8019164:	2a10      	cmp	r2, #16
 8019166:	db2b      	blt.n	80191c0 <memchr+0x60>
 8019168:	f010 0f07 	tst.w	r0, #7
 801916c:	d008      	beq.n	8019180 <memchr+0x20>
 801916e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019172:	3a01      	subs	r2, #1
 8019174:	428b      	cmp	r3, r1
 8019176:	d02d      	beq.n	80191d4 <memchr+0x74>
 8019178:	f010 0f07 	tst.w	r0, #7
 801917c:	b342      	cbz	r2, 80191d0 <memchr+0x70>
 801917e:	d1f6      	bne.n	801916e <memchr+0xe>
 8019180:	b4f0      	push	{r4, r5, r6, r7}
 8019182:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8019186:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801918a:	f022 0407 	bic.w	r4, r2, #7
 801918e:	f07f 0700 	mvns.w	r7, #0
 8019192:	2300      	movs	r3, #0
 8019194:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8019198:	3c08      	subs	r4, #8
 801919a:	ea85 0501 	eor.w	r5, r5, r1
 801919e:	ea86 0601 	eor.w	r6, r6, r1
 80191a2:	fa85 f547 	uadd8	r5, r5, r7
 80191a6:	faa3 f587 	sel	r5, r3, r7
 80191aa:	fa86 f647 	uadd8	r6, r6, r7
 80191ae:	faa5 f687 	sel	r6, r5, r7
 80191b2:	b98e      	cbnz	r6, 80191d8 <memchr+0x78>
 80191b4:	d1ee      	bne.n	8019194 <memchr+0x34>
 80191b6:	bcf0      	pop	{r4, r5, r6, r7}
 80191b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80191bc:	f002 0207 	and.w	r2, r2, #7
 80191c0:	b132      	cbz	r2, 80191d0 <memchr+0x70>
 80191c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80191c6:	3a01      	subs	r2, #1
 80191c8:	ea83 0301 	eor.w	r3, r3, r1
 80191cc:	b113      	cbz	r3, 80191d4 <memchr+0x74>
 80191ce:	d1f8      	bne.n	80191c2 <memchr+0x62>
 80191d0:	2000      	movs	r0, #0
 80191d2:	4770      	bx	lr
 80191d4:	3801      	subs	r0, #1
 80191d6:	4770      	bx	lr
 80191d8:	2d00      	cmp	r5, #0
 80191da:	bf06      	itte	eq
 80191dc:	4635      	moveq	r5, r6
 80191de:	3803      	subeq	r0, #3
 80191e0:	3807      	subne	r0, #7
 80191e2:	f015 0f01 	tst.w	r5, #1
 80191e6:	d107      	bne.n	80191f8 <memchr+0x98>
 80191e8:	3001      	adds	r0, #1
 80191ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80191ee:	bf02      	ittt	eq
 80191f0:	3001      	addeq	r0, #1
 80191f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80191f6:	3001      	addeq	r0, #1
 80191f8:	bcf0      	pop	{r4, r5, r6, r7}
 80191fa:	3801      	subs	r0, #1
 80191fc:	4770      	bx	lr
 80191fe:	bf00      	nop

08019200 <__aeabi_drsub>:
 8019200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8019204:	e002      	b.n	801920c <__adddf3>
 8019206:	bf00      	nop

08019208 <__aeabi_dsub>:
 8019208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801920c <__adddf3>:
 801920c:	b530      	push	{r4, r5, lr}
 801920e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8019212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8019216:	ea94 0f05 	teq	r4, r5
 801921a:	bf08      	it	eq
 801921c:	ea90 0f02 	teqeq	r0, r2
 8019220:	bf1f      	itttt	ne
 8019222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8019226:	ea55 0c02 	orrsne.w	ip, r5, r2
 801922a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801922e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019232:	f000 80e2 	beq.w	80193fa <__adddf3+0x1ee>
 8019236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801923a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801923e:	bfb8      	it	lt
 8019240:	426d      	neglt	r5, r5
 8019242:	dd0c      	ble.n	801925e <__adddf3+0x52>
 8019244:	442c      	add	r4, r5
 8019246:	ea80 0202 	eor.w	r2, r0, r2
 801924a:	ea81 0303 	eor.w	r3, r1, r3
 801924e:	ea82 0000 	eor.w	r0, r2, r0
 8019252:	ea83 0101 	eor.w	r1, r3, r1
 8019256:	ea80 0202 	eor.w	r2, r0, r2
 801925a:	ea81 0303 	eor.w	r3, r1, r3
 801925e:	2d36      	cmp	r5, #54	; 0x36
 8019260:	bf88      	it	hi
 8019262:	bd30      	pophi	{r4, r5, pc}
 8019264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8019268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801926c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8019270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8019274:	d002      	beq.n	801927c <__adddf3+0x70>
 8019276:	4240      	negs	r0, r0
 8019278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801927c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8019280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8019288:	d002      	beq.n	8019290 <__adddf3+0x84>
 801928a:	4252      	negs	r2, r2
 801928c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8019290:	ea94 0f05 	teq	r4, r5
 8019294:	f000 80a7 	beq.w	80193e6 <__adddf3+0x1da>
 8019298:	f1a4 0401 	sub.w	r4, r4, #1
 801929c:	f1d5 0e20 	rsbs	lr, r5, #32
 80192a0:	db0d      	blt.n	80192be <__adddf3+0xb2>
 80192a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80192a6:	fa22 f205 	lsr.w	r2, r2, r5
 80192aa:	1880      	adds	r0, r0, r2
 80192ac:	f141 0100 	adc.w	r1, r1, #0
 80192b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80192b4:	1880      	adds	r0, r0, r2
 80192b6:	fa43 f305 	asr.w	r3, r3, r5
 80192ba:	4159      	adcs	r1, r3
 80192bc:	e00e      	b.n	80192dc <__adddf3+0xd0>
 80192be:	f1a5 0520 	sub.w	r5, r5, #32
 80192c2:	f10e 0e20 	add.w	lr, lr, #32
 80192c6:	2a01      	cmp	r2, #1
 80192c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80192cc:	bf28      	it	cs
 80192ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80192d2:	fa43 f305 	asr.w	r3, r3, r5
 80192d6:	18c0      	adds	r0, r0, r3
 80192d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80192dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80192e0:	d507      	bpl.n	80192f2 <__adddf3+0xe6>
 80192e2:	f04f 0e00 	mov.w	lr, #0
 80192e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80192ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80192ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80192f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80192f6:	d31b      	bcc.n	8019330 <__adddf3+0x124>
 80192f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80192fc:	d30c      	bcc.n	8019318 <__adddf3+0x10c>
 80192fe:	0849      	lsrs	r1, r1, #1
 8019300:	ea5f 0030 	movs.w	r0, r0, rrx
 8019304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8019308:	f104 0401 	add.w	r4, r4, #1
 801930c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8019310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8019314:	f080 809a 	bcs.w	801944c <__adddf3+0x240>
 8019318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801931c:	bf08      	it	eq
 801931e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019322:	f150 0000 	adcs.w	r0, r0, #0
 8019326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801932a:	ea41 0105 	orr.w	r1, r1, r5
 801932e:	bd30      	pop	{r4, r5, pc}
 8019330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8019334:	4140      	adcs	r0, r0
 8019336:	eb41 0101 	adc.w	r1, r1, r1
 801933a:	3c01      	subs	r4, #1
 801933c:	bf28      	it	cs
 801933e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8019342:	d2e9      	bcs.n	8019318 <__adddf3+0x10c>
 8019344:	f091 0f00 	teq	r1, #0
 8019348:	bf04      	itt	eq
 801934a:	4601      	moveq	r1, r0
 801934c:	2000      	moveq	r0, #0
 801934e:	fab1 f381 	clz	r3, r1
 8019352:	bf08      	it	eq
 8019354:	3320      	addeq	r3, #32
 8019356:	f1a3 030b 	sub.w	r3, r3, #11
 801935a:	f1b3 0220 	subs.w	r2, r3, #32
 801935e:	da0c      	bge.n	801937a <__adddf3+0x16e>
 8019360:	320c      	adds	r2, #12
 8019362:	dd08      	ble.n	8019376 <__adddf3+0x16a>
 8019364:	f102 0c14 	add.w	ip, r2, #20
 8019368:	f1c2 020c 	rsb	r2, r2, #12
 801936c:	fa01 f00c 	lsl.w	r0, r1, ip
 8019370:	fa21 f102 	lsr.w	r1, r1, r2
 8019374:	e00c      	b.n	8019390 <__adddf3+0x184>
 8019376:	f102 0214 	add.w	r2, r2, #20
 801937a:	bfd8      	it	le
 801937c:	f1c2 0c20 	rsble	ip, r2, #32
 8019380:	fa01 f102 	lsl.w	r1, r1, r2
 8019384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8019388:	bfdc      	itt	le
 801938a:	ea41 010c 	orrle.w	r1, r1, ip
 801938e:	4090      	lslle	r0, r2
 8019390:	1ae4      	subs	r4, r4, r3
 8019392:	bfa2      	ittt	ge
 8019394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8019398:	4329      	orrge	r1, r5
 801939a:	bd30      	popge	{r4, r5, pc}
 801939c:	ea6f 0404 	mvn.w	r4, r4
 80193a0:	3c1f      	subs	r4, #31
 80193a2:	da1c      	bge.n	80193de <__adddf3+0x1d2>
 80193a4:	340c      	adds	r4, #12
 80193a6:	dc0e      	bgt.n	80193c6 <__adddf3+0x1ba>
 80193a8:	f104 0414 	add.w	r4, r4, #20
 80193ac:	f1c4 0220 	rsb	r2, r4, #32
 80193b0:	fa20 f004 	lsr.w	r0, r0, r4
 80193b4:	fa01 f302 	lsl.w	r3, r1, r2
 80193b8:	ea40 0003 	orr.w	r0, r0, r3
 80193bc:	fa21 f304 	lsr.w	r3, r1, r4
 80193c0:	ea45 0103 	orr.w	r1, r5, r3
 80193c4:	bd30      	pop	{r4, r5, pc}
 80193c6:	f1c4 040c 	rsb	r4, r4, #12
 80193ca:	f1c4 0220 	rsb	r2, r4, #32
 80193ce:	fa20 f002 	lsr.w	r0, r0, r2
 80193d2:	fa01 f304 	lsl.w	r3, r1, r4
 80193d6:	ea40 0003 	orr.w	r0, r0, r3
 80193da:	4629      	mov	r1, r5
 80193dc:	bd30      	pop	{r4, r5, pc}
 80193de:	fa21 f004 	lsr.w	r0, r1, r4
 80193e2:	4629      	mov	r1, r5
 80193e4:	bd30      	pop	{r4, r5, pc}
 80193e6:	f094 0f00 	teq	r4, #0
 80193ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80193ee:	bf06      	itte	eq
 80193f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80193f4:	3401      	addeq	r4, #1
 80193f6:	3d01      	subne	r5, #1
 80193f8:	e74e      	b.n	8019298 <__adddf3+0x8c>
 80193fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80193fe:	bf18      	it	ne
 8019400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8019404:	d029      	beq.n	801945a <__adddf3+0x24e>
 8019406:	ea94 0f05 	teq	r4, r5
 801940a:	bf08      	it	eq
 801940c:	ea90 0f02 	teqeq	r0, r2
 8019410:	d005      	beq.n	801941e <__adddf3+0x212>
 8019412:	ea54 0c00 	orrs.w	ip, r4, r0
 8019416:	bf04      	itt	eq
 8019418:	4619      	moveq	r1, r3
 801941a:	4610      	moveq	r0, r2
 801941c:	bd30      	pop	{r4, r5, pc}
 801941e:	ea91 0f03 	teq	r1, r3
 8019422:	bf1e      	ittt	ne
 8019424:	2100      	movne	r1, #0
 8019426:	2000      	movne	r0, #0
 8019428:	bd30      	popne	{r4, r5, pc}
 801942a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801942e:	d105      	bne.n	801943c <__adddf3+0x230>
 8019430:	0040      	lsls	r0, r0, #1
 8019432:	4149      	adcs	r1, r1
 8019434:	bf28      	it	cs
 8019436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801943a:	bd30      	pop	{r4, r5, pc}
 801943c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8019440:	bf3c      	itt	cc
 8019442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8019446:	bd30      	popcc	{r4, r5, pc}
 8019448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801944c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8019450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019454:	f04f 0000 	mov.w	r0, #0
 8019458:	bd30      	pop	{r4, r5, pc}
 801945a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801945e:	bf1a      	itte	ne
 8019460:	4619      	movne	r1, r3
 8019462:	4610      	movne	r0, r2
 8019464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8019468:	bf1c      	itt	ne
 801946a:	460b      	movne	r3, r1
 801946c:	4602      	movne	r2, r0
 801946e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019472:	bf06      	itte	eq
 8019474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8019478:	ea91 0f03 	teqeq	r1, r3
 801947c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8019480:	bd30      	pop	{r4, r5, pc}
 8019482:	bf00      	nop

08019484 <__aeabi_ui2d>:
 8019484:	f090 0f00 	teq	r0, #0
 8019488:	bf04      	itt	eq
 801948a:	2100      	moveq	r1, #0
 801948c:	4770      	bxeq	lr
 801948e:	b530      	push	{r4, r5, lr}
 8019490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8019498:	f04f 0500 	mov.w	r5, #0
 801949c:	f04f 0100 	mov.w	r1, #0
 80194a0:	e750      	b.n	8019344 <__adddf3+0x138>
 80194a2:	bf00      	nop

080194a4 <__aeabi_i2d>:
 80194a4:	f090 0f00 	teq	r0, #0
 80194a8:	bf04      	itt	eq
 80194aa:	2100      	moveq	r1, #0
 80194ac:	4770      	bxeq	lr
 80194ae:	b530      	push	{r4, r5, lr}
 80194b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80194b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80194b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80194bc:	bf48      	it	mi
 80194be:	4240      	negmi	r0, r0
 80194c0:	f04f 0100 	mov.w	r1, #0
 80194c4:	e73e      	b.n	8019344 <__adddf3+0x138>
 80194c6:	bf00      	nop

080194c8 <__aeabi_f2d>:
 80194c8:	0042      	lsls	r2, r0, #1
 80194ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80194ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80194d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80194d6:	bf1f      	itttt	ne
 80194d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80194dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80194e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80194e4:	4770      	bxne	lr
 80194e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80194ea:	bf08      	it	eq
 80194ec:	4770      	bxeq	lr
 80194ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80194f2:	bf04      	itt	eq
 80194f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80194f8:	4770      	bxeq	lr
 80194fa:	b530      	push	{r4, r5, lr}
 80194fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8019500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8019504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019508:	e71c      	b.n	8019344 <__adddf3+0x138>
 801950a:	bf00      	nop

0801950c <__aeabi_ul2d>:
 801950c:	ea50 0201 	orrs.w	r2, r0, r1
 8019510:	bf08      	it	eq
 8019512:	4770      	bxeq	lr
 8019514:	b530      	push	{r4, r5, lr}
 8019516:	f04f 0500 	mov.w	r5, #0
 801951a:	e00a      	b.n	8019532 <__aeabi_l2d+0x16>

0801951c <__aeabi_l2d>:
 801951c:	ea50 0201 	orrs.w	r2, r0, r1
 8019520:	bf08      	it	eq
 8019522:	4770      	bxeq	lr
 8019524:	b530      	push	{r4, r5, lr}
 8019526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801952a:	d502      	bpl.n	8019532 <__aeabi_l2d+0x16>
 801952c:	4240      	negs	r0, r0
 801952e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8019536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801953a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801953e:	f43f aed8 	beq.w	80192f2 <__adddf3+0xe6>
 8019542:	f04f 0203 	mov.w	r2, #3
 8019546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801954a:	bf18      	it	ne
 801954c:	3203      	addne	r2, #3
 801954e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8019552:	bf18      	it	ne
 8019554:	3203      	addne	r2, #3
 8019556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801955a:	f1c2 0320 	rsb	r3, r2, #32
 801955e:	fa00 fc03 	lsl.w	ip, r0, r3
 8019562:	fa20 f002 	lsr.w	r0, r0, r2
 8019566:	fa01 fe03 	lsl.w	lr, r1, r3
 801956a:	ea40 000e 	orr.w	r0, r0, lr
 801956e:	fa21 f102 	lsr.w	r1, r1, r2
 8019572:	4414      	add	r4, r2
 8019574:	e6bd      	b.n	80192f2 <__adddf3+0xe6>
 8019576:	bf00      	nop

08019578 <__aeabi_dmul>:
 8019578:	b570      	push	{r4, r5, r6, lr}
 801957a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801957e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8019582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8019586:	bf1d      	ittte	ne
 8019588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801958c:	ea94 0f0c 	teqne	r4, ip
 8019590:	ea95 0f0c 	teqne	r5, ip
 8019594:	f000 f8de 	bleq	8019754 <__aeabi_dmul+0x1dc>
 8019598:	442c      	add	r4, r5
 801959a:	ea81 0603 	eor.w	r6, r1, r3
 801959e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80195a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80195a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80195aa:	bf18      	it	ne
 80195ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80195b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80195b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195b8:	d038      	beq.n	801962c <__aeabi_dmul+0xb4>
 80195ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80195be:	f04f 0500 	mov.w	r5, #0
 80195c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80195c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80195ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80195ce:	f04f 0600 	mov.w	r6, #0
 80195d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80195d6:	f09c 0f00 	teq	ip, #0
 80195da:	bf18      	it	ne
 80195dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80195e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80195e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80195e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80195ec:	d204      	bcs.n	80195f8 <__aeabi_dmul+0x80>
 80195ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80195f2:	416d      	adcs	r5, r5
 80195f4:	eb46 0606 	adc.w	r6, r6, r6
 80195f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80195fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8019600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8019604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8019608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801960c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8019610:	bf88      	it	hi
 8019612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8019616:	d81e      	bhi.n	8019656 <__aeabi_dmul+0xde>
 8019618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801961c:	bf08      	it	eq
 801961e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8019622:	f150 0000 	adcs.w	r0, r0, #0
 8019626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801962a:	bd70      	pop	{r4, r5, r6, pc}
 801962c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8019630:	ea46 0101 	orr.w	r1, r6, r1
 8019634:	ea40 0002 	orr.w	r0, r0, r2
 8019638:	ea81 0103 	eor.w	r1, r1, r3
 801963c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8019640:	bfc2      	ittt	gt
 8019642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8019646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801964a:	bd70      	popgt	{r4, r5, r6, pc}
 801964c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019650:	f04f 0e00 	mov.w	lr, #0
 8019654:	3c01      	subs	r4, #1
 8019656:	f300 80ab 	bgt.w	80197b0 <__aeabi_dmul+0x238>
 801965a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801965e:	bfde      	ittt	le
 8019660:	2000      	movle	r0, #0
 8019662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8019666:	bd70      	pople	{r4, r5, r6, pc}
 8019668:	f1c4 0400 	rsb	r4, r4, #0
 801966c:	3c20      	subs	r4, #32
 801966e:	da35      	bge.n	80196dc <__aeabi_dmul+0x164>
 8019670:	340c      	adds	r4, #12
 8019672:	dc1b      	bgt.n	80196ac <__aeabi_dmul+0x134>
 8019674:	f104 0414 	add.w	r4, r4, #20
 8019678:	f1c4 0520 	rsb	r5, r4, #32
 801967c:	fa00 f305 	lsl.w	r3, r0, r5
 8019680:	fa20 f004 	lsr.w	r0, r0, r4
 8019684:	fa01 f205 	lsl.w	r2, r1, r5
 8019688:	ea40 0002 	orr.w	r0, r0, r2
 801968c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8019690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8019698:	fa21 f604 	lsr.w	r6, r1, r4
 801969c:	eb42 0106 	adc.w	r1, r2, r6
 80196a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80196a4:	bf08      	it	eq
 80196a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80196aa:	bd70      	pop	{r4, r5, r6, pc}
 80196ac:	f1c4 040c 	rsb	r4, r4, #12
 80196b0:	f1c4 0520 	rsb	r5, r4, #32
 80196b4:	fa00 f304 	lsl.w	r3, r0, r4
 80196b8:	fa20 f005 	lsr.w	r0, r0, r5
 80196bc:	fa01 f204 	lsl.w	r2, r1, r4
 80196c0:	ea40 0002 	orr.w	r0, r0, r2
 80196c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80196c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80196cc:	f141 0100 	adc.w	r1, r1, #0
 80196d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80196d4:	bf08      	it	eq
 80196d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80196da:	bd70      	pop	{r4, r5, r6, pc}
 80196dc:	f1c4 0520 	rsb	r5, r4, #32
 80196e0:	fa00 f205 	lsl.w	r2, r0, r5
 80196e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80196e8:	fa20 f304 	lsr.w	r3, r0, r4
 80196ec:	fa01 f205 	lsl.w	r2, r1, r5
 80196f0:	ea43 0302 	orr.w	r3, r3, r2
 80196f4:	fa21 f004 	lsr.w	r0, r1, r4
 80196f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80196fc:	fa21 f204 	lsr.w	r2, r1, r4
 8019700:	ea20 0002 	bic.w	r0, r0, r2
 8019704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8019708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801970c:	bf08      	it	eq
 801970e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8019712:	bd70      	pop	{r4, r5, r6, pc}
 8019714:	f094 0f00 	teq	r4, #0
 8019718:	d10f      	bne.n	801973a <__aeabi_dmul+0x1c2>
 801971a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801971e:	0040      	lsls	r0, r0, #1
 8019720:	eb41 0101 	adc.w	r1, r1, r1
 8019724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8019728:	bf08      	it	eq
 801972a:	3c01      	subeq	r4, #1
 801972c:	d0f7      	beq.n	801971e <__aeabi_dmul+0x1a6>
 801972e:	ea41 0106 	orr.w	r1, r1, r6
 8019732:	f095 0f00 	teq	r5, #0
 8019736:	bf18      	it	ne
 8019738:	4770      	bxne	lr
 801973a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801973e:	0052      	lsls	r2, r2, #1
 8019740:	eb43 0303 	adc.w	r3, r3, r3
 8019744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8019748:	bf08      	it	eq
 801974a:	3d01      	subeq	r5, #1
 801974c:	d0f7      	beq.n	801973e <__aeabi_dmul+0x1c6>
 801974e:	ea43 0306 	orr.w	r3, r3, r6
 8019752:	4770      	bx	lr
 8019754:	ea94 0f0c 	teq	r4, ip
 8019758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801975c:	bf18      	it	ne
 801975e:	ea95 0f0c 	teqne	r5, ip
 8019762:	d00c      	beq.n	801977e <__aeabi_dmul+0x206>
 8019764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019768:	bf18      	it	ne
 801976a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801976e:	d1d1      	bne.n	8019714 <__aeabi_dmul+0x19c>
 8019770:	ea81 0103 	eor.w	r1, r1, r3
 8019774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8019778:	f04f 0000 	mov.w	r0, #0
 801977c:	bd70      	pop	{r4, r5, r6, pc}
 801977e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019782:	bf06      	itte	eq
 8019784:	4610      	moveq	r0, r2
 8019786:	4619      	moveq	r1, r3
 8019788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801978c:	d019      	beq.n	80197c2 <__aeabi_dmul+0x24a>
 801978e:	ea94 0f0c 	teq	r4, ip
 8019792:	d102      	bne.n	801979a <__aeabi_dmul+0x222>
 8019794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8019798:	d113      	bne.n	80197c2 <__aeabi_dmul+0x24a>
 801979a:	ea95 0f0c 	teq	r5, ip
 801979e:	d105      	bne.n	80197ac <__aeabi_dmul+0x234>
 80197a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80197a4:	bf1c      	itt	ne
 80197a6:	4610      	movne	r0, r2
 80197a8:	4619      	movne	r1, r3
 80197aa:	d10a      	bne.n	80197c2 <__aeabi_dmul+0x24a>
 80197ac:	ea81 0103 	eor.w	r1, r1, r3
 80197b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80197b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80197b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80197bc:	f04f 0000 	mov.w	r0, #0
 80197c0:	bd70      	pop	{r4, r5, r6, pc}
 80197c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80197c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80197ca:	bd70      	pop	{r4, r5, r6, pc}

080197cc <__aeabi_ddiv>:
 80197cc:	b570      	push	{r4, r5, r6, lr}
 80197ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80197d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80197d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80197da:	bf1d      	ittte	ne
 80197dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80197e0:	ea94 0f0c 	teqne	r4, ip
 80197e4:	ea95 0f0c 	teqne	r5, ip
 80197e8:	f000 f8a7 	bleq	801993a <__aeabi_ddiv+0x16e>
 80197ec:	eba4 0405 	sub.w	r4, r4, r5
 80197f0:	ea81 0e03 	eor.w	lr, r1, r3
 80197f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80197f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80197fc:	f000 8088 	beq.w	8019910 <__aeabi_ddiv+0x144>
 8019800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8019804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8019808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801980c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8019810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8019814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8019818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801981c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8019820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8019824:	429d      	cmp	r5, r3
 8019826:	bf08      	it	eq
 8019828:	4296      	cmpeq	r6, r2
 801982a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801982e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8019832:	d202      	bcs.n	801983a <__aeabi_ddiv+0x6e>
 8019834:	085b      	lsrs	r3, r3, #1
 8019836:	ea4f 0232 	mov.w	r2, r2, rrx
 801983a:	1ab6      	subs	r6, r6, r2
 801983c:	eb65 0503 	sbc.w	r5, r5, r3
 8019840:	085b      	lsrs	r3, r3, #1
 8019842:	ea4f 0232 	mov.w	r2, r2, rrx
 8019846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801984a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801984e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019856:	bf22      	ittt	cs
 8019858:	1ab6      	subcs	r6, r6, r2
 801985a:	4675      	movcs	r5, lr
 801985c:	ea40 000c 	orrcs.w	r0, r0, ip
 8019860:	085b      	lsrs	r3, r3, #1
 8019862:	ea4f 0232 	mov.w	r2, r2, rrx
 8019866:	ebb6 0e02 	subs.w	lr, r6, r2
 801986a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801986e:	bf22      	ittt	cs
 8019870:	1ab6      	subcs	r6, r6, r2
 8019872:	4675      	movcs	r5, lr
 8019874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8019878:	085b      	lsrs	r3, r3, #1
 801987a:	ea4f 0232 	mov.w	r2, r2, rrx
 801987e:	ebb6 0e02 	subs.w	lr, r6, r2
 8019882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8019886:	bf22      	ittt	cs
 8019888:	1ab6      	subcs	r6, r6, r2
 801988a:	4675      	movcs	r5, lr
 801988c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8019890:	085b      	lsrs	r3, r3, #1
 8019892:	ea4f 0232 	mov.w	r2, r2, rrx
 8019896:	ebb6 0e02 	subs.w	lr, r6, r2
 801989a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801989e:	bf22      	ittt	cs
 80198a0:	1ab6      	subcs	r6, r6, r2
 80198a2:	4675      	movcs	r5, lr
 80198a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80198a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80198ac:	d018      	beq.n	80198e0 <__aeabi_ddiv+0x114>
 80198ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80198b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80198b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80198ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80198be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80198c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80198c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80198ca:	d1c0      	bne.n	801984e <__aeabi_ddiv+0x82>
 80198cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80198d0:	d10b      	bne.n	80198ea <__aeabi_ddiv+0x11e>
 80198d2:	ea41 0100 	orr.w	r1, r1, r0
 80198d6:	f04f 0000 	mov.w	r0, #0
 80198da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80198de:	e7b6      	b.n	801984e <__aeabi_ddiv+0x82>
 80198e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80198e4:	bf04      	itt	eq
 80198e6:	4301      	orreq	r1, r0
 80198e8:	2000      	moveq	r0, #0
 80198ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80198ee:	bf88      	it	hi
 80198f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80198f4:	f63f aeaf 	bhi.w	8019656 <__aeabi_dmul+0xde>
 80198f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80198fc:	bf04      	itt	eq
 80198fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8019902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8019906:	f150 0000 	adcs.w	r0, r0, #0
 801990a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801990e:	bd70      	pop	{r4, r5, r6, pc}
 8019910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8019914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8019918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801991c:	bfc2      	ittt	gt
 801991e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8019922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8019926:	bd70      	popgt	{r4, r5, r6, pc}
 8019928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801992c:	f04f 0e00 	mov.w	lr, #0
 8019930:	3c01      	subs	r4, #1
 8019932:	e690      	b.n	8019656 <__aeabi_dmul+0xde>
 8019934:	ea45 0e06 	orr.w	lr, r5, r6
 8019938:	e68d      	b.n	8019656 <__aeabi_dmul+0xde>
 801993a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801993e:	ea94 0f0c 	teq	r4, ip
 8019942:	bf08      	it	eq
 8019944:	ea95 0f0c 	teqeq	r5, ip
 8019948:	f43f af3b 	beq.w	80197c2 <__aeabi_dmul+0x24a>
 801994c:	ea94 0f0c 	teq	r4, ip
 8019950:	d10a      	bne.n	8019968 <__aeabi_ddiv+0x19c>
 8019952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8019956:	f47f af34 	bne.w	80197c2 <__aeabi_dmul+0x24a>
 801995a:	ea95 0f0c 	teq	r5, ip
 801995e:	f47f af25 	bne.w	80197ac <__aeabi_dmul+0x234>
 8019962:	4610      	mov	r0, r2
 8019964:	4619      	mov	r1, r3
 8019966:	e72c      	b.n	80197c2 <__aeabi_dmul+0x24a>
 8019968:	ea95 0f0c 	teq	r5, ip
 801996c:	d106      	bne.n	801997c <__aeabi_ddiv+0x1b0>
 801996e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019972:	f43f aefd 	beq.w	8019770 <__aeabi_dmul+0x1f8>
 8019976:	4610      	mov	r0, r2
 8019978:	4619      	mov	r1, r3
 801997a:	e722      	b.n	80197c2 <__aeabi_dmul+0x24a>
 801997c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019980:	bf18      	it	ne
 8019982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019986:	f47f aec5 	bne.w	8019714 <__aeabi_dmul+0x19c>
 801998a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801998e:	f47f af0d 	bne.w	80197ac <__aeabi_dmul+0x234>
 8019992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019996:	f47f aeeb 	bne.w	8019770 <__aeabi_dmul+0x1f8>
 801999a:	e712      	b.n	80197c2 <__aeabi_dmul+0x24a>

0801999c <__gedf2>:
 801999c:	f04f 3cff 	mov.w	ip, #4294967295
 80199a0:	e006      	b.n	80199b0 <__cmpdf2+0x4>
 80199a2:	bf00      	nop

080199a4 <__ledf2>:
 80199a4:	f04f 0c01 	mov.w	ip, #1
 80199a8:	e002      	b.n	80199b0 <__cmpdf2+0x4>
 80199aa:	bf00      	nop

080199ac <__cmpdf2>:
 80199ac:	f04f 0c01 	mov.w	ip, #1
 80199b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80199b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80199b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80199bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80199c0:	bf18      	it	ne
 80199c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80199c6:	d01b      	beq.n	8019a00 <__cmpdf2+0x54>
 80199c8:	b001      	add	sp, #4
 80199ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80199ce:	bf0c      	ite	eq
 80199d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80199d4:	ea91 0f03 	teqne	r1, r3
 80199d8:	bf02      	ittt	eq
 80199da:	ea90 0f02 	teqeq	r0, r2
 80199de:	2000      	moveq	r0, #0
 80199e0:	4770      	bxeq	lr
 80199e2:	f110 0f00 	cmn.w	r0, #0
 80199e6:	ea91 0f03 	teq	r1, r3
 80199ea:	bf58      	it	pl
 80199ec:	4299      	cmppl	r1, r3
 80199ee:	bf08      	it	eq
 80199f0:	4290      	cmpeq	r0, r2
 80199f2:	bf2c      	ite	cs
 80199f4:	17d8      	asrcs	r0, r3, #31
 80199f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80199fa:	f040 0001 	orr.w	r0, r0, #1
 80199fe:	4770      	bx	lr
 8019a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a08:	d102      	bne.n	8019a10 <__cmpdf2+0x64>
 8019a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019a0e:	d107      	bne.n	8019a20 <__cmpdf2+0x74>
 8019a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019a18:	d1d6      	bne.n	80199c8 <__cmpdf2+0x1c>
 8019a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019a1e:	d0d3      	beq.n	80199c8 <__cmpdf2+0x1c>
 8019a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop

08019a28 <__aeabi_cdrcmple>:
 8019a28:	4684      	mov	ip, r0
 8019a2a:	4610      	mov	r0, r2
 8019a2c:	4662      	mov	r2, ip
 8019a2e:	468c      	mov	ip, r1
 8019a30:	4619      	mov	r1, r3
 8019a32:	4663      	mov	r3, ip
 8019a34:	e000      	b.n	8019a38 <__aeabi_cdcmpeq>
 8019a36:	bf00      	nop

08019a38 <__aeabi_cdcmpeq>:
 8019a38:	b501      	push	{r0, lr}
 8019a3a:	f7ff ffb7 	bl	80199ac <__cmpdf2>
 8019a3e:	2800      	cmp	r0, #0
 8019a40:	bf48      	it	mi
 8019a42:	f110 0f00 	cmnmi.w	r0, #0
 8019a46:	bd01      	pop	{r0, pc}

08019a48 <__aeabi_dcmpeq>:
 8019a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a4c:	f7ff fff4 	bl	8019a38 <__aeabi_cdcmpeq>
 8019a50:	bf0c      	ite	eq
 8019a52:	2001      	moveq	r0, #1
 8019a54:	2000      	movne	r0, #0
 8019a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a5a:	bf00      	nop

08019a5c <__aeabi_dcmplt>:
 8019a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a60:	f7ff ffea 	bl	8019a38 <__aeabi_cdcmpeq>
 8019a64:	bf34      	ite	cc
 8019a66:	2001      	movcc	r0, #1
 8019a68:	2000      	movcs	r0, #0
 8019a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a6e:	bf00      	nop

08019a70 <__aeabi_dcmple>:
 8019a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a74:	f7ff ffe0 	bl	8019a38 <__aeabi_cdcmpeq>
 8019a78:	bf94      	ite	ls
 8019a7a:	2001      	movls	r0, #1
 8019a7c:	2000      	movhi	r0, #0
 8019a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a82:	bf00      	nop

08019a84 <__aeabi_dcmpge>:
 8019a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a88:	f7ff ffce 	bl	8019a28 <__aeabi_cdrcmple>
 8019a8c:	bf94      	ite	ls
 8019a8e:	2001      	movls	r0, #1
 8019a90:	2000      	movhi	r0, #0
 8019a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8019a96:	bf00      	nop

08019a98 <__aeabi_dcmpgt>:
 8019a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019a9c:	f7ff ffc4 	bl	8019a28 <__aeabi_cdrcmple>
 8019aa0:	bf34      	ite	cc
 8019aa2:	2001      	movcc	r0, #1
 8019aa4:	2000      	movcs	r0, #0
 8019aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8019aaa:	bf00      	nop

08019aac <__aeabi_dcmpun>:
 8019aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019ab4:	d102      	bne.n	8019abc <__aeabi_dcmpun+0x10>
 8019ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8019aba:	d10a      	bne.n	8019ad2 <__aeabi_dcmpun+0x26>
 8019abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019ac4:	d102      	bne.n	8019acc <__aeabi_dcmpun+0x20>
 8019ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8019aca:	d102      	bne.n	8019ad2 <__aeabi_dcmpun+0x26>
 8019acc:	f04f 0000 	mov.w	r0, #0
 8019ad0:	4770      	bx	lr
 8019ad2:	f04f 0001 	mov.w	r0, #1
 8019ad6:	4770      	bx	lr

08019ad8 <__aeabi_d2iz>:
 8019ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019adc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019ae0:	d215      	bcs.n	8019b0e <__aeabi_d2iz+0x36>
 8019ae2:	d511      	bpl.n	8019b08 <__aeabi_d2iz+0x30>
 8019ae4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019ae8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019aec:	d912      	bls.n	8019b14 <__aeabi_d2iz+0x3c>
 8019aee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019af2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019af6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8019afe:	fa23 f002 	lsr.w	r0, r3, r2
 8019b02:	bf18      	it	ne
 8019b04:	4240      	negne	r0, r0
 8019b06:	4770      	bx	lr
 8019b08:	f04f 0000 	mov.w	r0, #0
 8019b0c:	4770      	bx	lr
 8019b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019b12:	d105      	bne.n	8019b20 <__aeabi_d2iz+0x48>
 8019b14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8019b18:	bf08      	it	eq
 8019b1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8019b1e:	4770      	bx	lr
 8019b20:	f04f 0000 	mov.w	r0, #0
 8019b24:	4770      	bx	lr
 8019b26:	bf00      	nop

08019b28 <__aeabi_d2uiz>:
 8019b28:	004a      	lsls	r2, r1, #1
 8019b2a:	d211      	bcs.n	8019b50 <__aeabi_d2uiz+0x28>
 8019b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019b30:	d211      	bcs.n	8019b56 <__aeabi_d2uiz+0x2e>
 8019b32:	d50d      	bpl.n	8019b50 <__aeabi_d2uiz+0x28>
 8019b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8019b3c:	d40e      	bmi.n	8019b5c <__aeabi_d2uiz+0x34>
 8019b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8019b4a:	fa23 f002 	lsr.w	r0, r3, r2
 8019b4e:	4770      	bx	lr
 8019b50:	f04f 0000 	mov.w	r0, #0
 8019b54:	4770      	bx	lr
 8019b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8019b5a:	d102      	bne.n	8019b62 <__aeabi_d2uiz+0x3a>
 8019b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8019b60:	4770      	bx	lr
 8019b62:	f04f 0000 	mov.w	r0, #0
 8019b66:	4770      	bx	lr

08019b68 <__aeabi_d2f>:
 8019b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8019b6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019b70:	bf24      	itt	cs
 8019b72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019b76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8019b7a:	d90d      	bls.n	8019b98 <__aeabi_d2f+0x30>
 8019b7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019b80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019b84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019b88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8019b8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019b90:	bf08      	it	eq
 8019b92:	f020 0001 	biceq.w	r0, r0, #1
 8019b96:	4770      	bx	lr
 8019b98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8019b9c:	d121      	bne.n	8019be2 <__aeabi_d2f+0x7a>
 8019b9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019ba2:	bfbc      	itt	lt
 8019ba4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019ba8:	4770      	bxlt	lr
 8019baa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8019bae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019bb2:	f1c2 0218 	rsb	r2, r2, #24
 8019bb6:	f1c2 0c20 	rsb	ip, r2, #32
 8019bba:	fa10 f30c 	lsls.w	r3, r0, ip
 8019bbe:	fa20 f002 	lsr.w	r0, r0, r2
 8019bc2:	bf18      	it	ne
 8019bc4:	f040 0001 	orrne.w	r0, r0, #1
 8019bc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019bcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019bd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019bd4:	ea40 000c 	orr.w	r0, r0, ip
 8019bd8:	fa23 f302 	lsr.w	r3, r3, r2
 8019bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019be0:	e7cc      	b.n	8019b7c <__aeabi_d2f+0x14>
 8019be2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019be6:	d107      	bne.n	8019bf8 <__aeabi_d2f+0x90>
 8019be8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8019bec:	bf1e      	ittt	ne
 8019bee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019bf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019bf6:	4770      	bxne	lr
 8019bf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8019bfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019c00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019c04:	4770      	bx	lr
 8019c06:	bf00      	nop

08019c08 <__aeabi_d2lz>:
 8019c08:	b538      	push	{r3, r4, r5, lr}
 8019c0a:	2200      	movs	r2, #0
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	4604      	mov	r4, r0
 8019c10:	460d      	mov	r5, r1
 8019c12:	f7ff ff23 	bl	8019a5c <__aeabi_dcmplt>
 8019c16:	b928      	cbnz	r0, 8019c24 <__aeabi_d2lz+0x1c>
 8019c18:	4620      	mov	r0, r4
 8019c1a:	4629      	mov	r1, r5
 8019c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019c20:	f000 b80a 	b.w	8019c38 <__aeabi_d2ulz>
 8019c24:	4620      	mov	r0, r4
 8019c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8019c2a:	f000 f805 	bl	8019c38 <__aeabi_d2ulz>
 8019c2e:	4240      	negs	r0, r0
 8019c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8019c34:	bd38      	pop	{r3, r4, r5, pc}
 8019c36:	bf00      	nop

08019c38 <__aeabi_d2ulz>:
 8019c38:	b5d0      	push	{r4, r6, r7, lr}
 8019c3a:	4b0c      	ldr	r3, [pc, #48]	; (8019c6c <__aeabi_d2ulz+0x34>)
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	4606      	mov	r6, r0
 8019c40:	460f      	mov	r7, r1
 8019c42:	f7ff fc99 	bl	8019578 <__aeabi_dmul>
 8019c46:	f7ff ff6f 	bl	8019b28 <__aeabi_d2uiz>
 8019c4a:	4604      	mov	r4, r0
 8019c4c:	f7ff fc1a 	bl	8019484 <__aeabi_ui2d>
 8019c50:	4b07      	ldr	r3, [pc, #28]	; (8019c70 <__aeabi_d2ulz+0x38>)
 8019c52:	2200      	movs	r2, #0
 8019c54:	f7ff fc90 	bl	8019578 <__aeabi_dmul>
 8019c58:	4602      	mov	r2, r0
 8019c5a:	460b      	mov	r3, r1
 8019c5c:	4630      	mov	r0, r6
 8019c5e:	4639      	mov	r1, r7
 8019c60:	f7ff fad2 	bl	8019208 <__aeabi_dsub>
 8019c64:	f7ff ff60 	bl	8019b28 <__aeabi_d2uiz>
 8019c68:	4621      	mov	r1, r4
 8019c6a:	bdd0      	pop	{r4, r6, r7, pc}
 8019c6c:	3df00000 	.word	0x3df00000
 8019c70:	41f00000 	.word	0x41f00000

08019c74 <__aeabi_uldivmod>:
 8019c74:	b953      	cbnz	r3, 8019c8c <__aeabi_uldivmod+0x18>
 8019c76:	b94a      	cbnz	r2, 8019c8c <__aeabi_uldivmod+0x18>
 8019c78:	2900      	cmp	r1, #0
 8019c7a:	bf08      	it	eq
 8019c7c:	2800      	cmpeq	r0, #0
 8019c7e:	bf1c      	itt	ne
 8019c80:	f04f 31ff 	movne.w	r1, #4294967295
 8019c84:	f04f 30ff 	movne.w	r0, #4294967295
 8019c88:	f000 b974 	b.w	8019f74 <__aeabi_idiv0>
 8019c8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019c94:	f000 f806 	bl	8019ca4 <__udivmoddi4>
 8019c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019ca0:	b004      	add	sp, #16
 8019ca2:	4770      	bx	lr

08019ca4 <__udivmoddi4>:
 8019ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ca8:	9d08      	ldr	r5, [sp, #32]
 8019caa:	4604      	mov	r4, r0
 8019cac:	468e      	mov	lr, r1
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d14d      	bne.n	8019d4e <__udivmoddi4+0xaa>
 8019cb2:	428a      	cmp	r2, r1
 8019cb4:	4694      	mov	ip, r2
 8019cb6:	d969      	bls.n	8019d8c <__udivmoddi4+0xe8>
 8019cb8:	fab2 f282 	clz	r2, r2
 8019cbc:	b152      	cbz	r2, 8019cd4 <__udivmoddi4+0x30>
 8019cbe:	fa01 f302 	lsl.w	r3, r1, r2
 8019cc2:	f1c2 0120 	rsb	r1, r2, #32
 8019cc6:	fa20 f101 	lsr.w	r1, r0, r1
 8019cca:	fa0c fc02 	lsl.w	ip, ip, r2
 8019cce:	ea41 0e03 	orr.w	lr, r1, r3
 8019cd2:	4094      	lsls	r4, r2
 8019cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019cd8:	0c21      	lsrs	r1, r4, #16
 8019cda:	fbbe f6f8 	udiv	r6, lr, r8
 8019cde:	fa1f f78c 	uxth.w	r7, ip
 8019ce2:	fb08 e316 	mls	r3, r8, r6, lr
 8019ce6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8019cea:	fb06 f107 	mul.w	r1, r6, r7
 8019cee:	4299      	cmp	r1, r3
 8019cf0:	d90a      	bls.n	8019d08 <__udivmoddi4+0x64>
 8019cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8019cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8019cfa:	f080 811f 	bcs.w	8019f3c <__udivmoddi4+0x298>
 8019cfe:	4299      	cmp	r1, r3
 8019d00:	f240 811c 	bls.w	8019f3c <__udivmoddi4+0x298>
 8019d04:	3e02      	subs	r6, #2
 8019d06:	4463      	add	r3, ip
 8019d08:	1a5b      	subs	r3, r3, r1
 8019d0a:	b2a4      	uxth	r4, r4
 8019d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8019d10:	fb08 3310 	mls	r3, r8, r0, r3
 8019d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8019d18:	fb00 f707 	mul.w	r7, r0, r7
 8019d1c:	42a7      	cmp	r7, r4
 8019d1e:	d90a      	bls.n	8019d36 <__udivmoddi4+0x92>
 8019d20:	eb1c 0404 	adds.w	r4, ip, r4
 8019d24:	f100 33ff 	add.w	r3, r0, #4294967295
 8019d28:	f080 810a 	bcs.w	8019f40 <__udivmoddi4+0x29c>
 8019d2c:	42a7      	cmp	r7, r4
 8019d2e:	f240 8107 	bls.w	8019f40 <__udivmoddi4+0x29c>
 8019d32:	4464      	add	r4, ip
 8019d34:	3802      	subs	r0, #2
 8019d36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8019d3a:	1be4      	subs	r4, r4, r7
 8019d3c:	2600      	movs	r6, #0
 8019d3e:	b11d      	cbz	r5, 8019d48 <__udivmoddi4+0xa4>
 8019d40:	40d4      	lsrs	r4, r2
 8019d42:	2300      	movs	r3, #0
 8019d44:	e9c5 4300 	strd	r4, r3, [r5]
 8019d48:	4631      	mov	r1, r6
 8019d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d4e:	428b      	cmp	r3, r1
 8019d50:	d909      	bls.n	8019d66 <__udivmoddi4+0xc2>
 8019d52:	2d00      	cmp	r5, #0
 8019d54:	f000 80ef 	beq.w	8019f36 <__udivmoddi4+0x292>
 8019d58:	2600      	movs	r6, #0
 8019d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8019d5e:	4630      	mov	r0, r6
 8019d60:	4631      	mov	r1, r6
 8019d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d66:	fab3 f683 	clz	r6, r3
 8019d6a:	2e00      	cmp	r6, #0
 8019d6c:	d14a      	bne.n	8019e04 <__udivmoddi4+0x160>
 8019d6e:	428b      	cmp	r3, r1
 8019d70:	d302      	bcc.n	8019d78 <__udivmoddi4+0xd4>
 8019d72:	4282      	cmp	r2, r0
 8019d74:	f200 80f9 	bhi.w	8019f6a <__udivmoddi4+0x2c6>
 8019d78:	1a84      	subs	r4, r0, r2
 8019d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8019d7e:	2001      	movs	r0, #1
 8019d80:	469e      	mov	lr, r3
 8019d82:	2d00      	cmp	r5, #0
 8019d84:	d0e0      	beq.n	8019d48 <__udivmoddi4+0xa4>
 8019d86:	e9c5 4e00 	strd	r4, lr, [r5]
 8019d8a:	e7dd      	b.n	8019d48 <__udivmoddi4+0xa4>
 8019d8c:	b902      	cbnz	r2, 8019d90 <__udivmoddi4+0xec>
 8019d8e:	deff      	udf	#255	; 0xff
 8019d90:	fab2 f282 	clz	r2, r2
 8019d94:	2a00      	cmp	r2, #0
 8019d96:	f040 8092 	bne.w	8019ebe <__udivmoddi4+0x21a>
 8019d9a:	eba1 010c 	sub.w	r1, r1, ip
 8019d9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019da2:	fa1f fe8c 	uxth.w	lr, ip
 8019da6:	2601      	movs	r6, #1
 8019da8:	0c20      	lsrs	r0, r4, #16
 8019daa:	fbb1 f3f7 	udiv	r3, r1, r7
 8019dae:	fb07 1113 	mls	r1, r7, r3, r1
 8019db2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019db6:	fb0e f003 	mul.w	r0, lr, r3
 8019dba:	4288      	cmp	r0, r1
 8019dbc:	d908      	bls.n	8019dd0 <__udivmoddi4+0x12c>
 8019dbe:	eb1c 0101 	adds.w	r1, ip, r1
 8019dc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8019dc6:	d202      	bcs.n	8019dce <__udivmoddi4+0x12a>
 8019dc8:	4288      	cmp	r0, r1
 8019dca:	f200 80cb 	bhi.w	8019f64 <__udivmoddi4+0x2c0>
 8019dce:	4643      	mov	r3, r8
 8019dd0:	1a09      	subs	r1, r1, r0
 8019dd2:	b2a4      	uxth	r4, r4
 8019dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8019dd8:	fb07 1110 	mls	r1, r7, r0, r1
 8019ddc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019de0:	fb0e fe00 	mul.w	lr, lr, r0
 8019de4:	45a6      	cmp	lr, r4
 8019de6:	d908      	bls.n	8019dfa <__udivmoddi4+0x156>
 8019de8:	eb1c 0404 	adds.w	r4, ip, r4
 8019dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8019df0:	d202      	bcs.n	8019df8 <__udivmoddi4+0x154>
 8019df2:	45a6      	cmp	lr, r4
 8019df4:	f200 80bb 	bhi.w	8019f6e <__udivmoddi4+0x2ca>
 8019df8:	4608      	mov	r0, r1
 8019dfa:	eba4 040e 	sub.w	r4, r4, lr
 8019dfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019e02:	e79c      	b.n	8019d3e <__udivmoddi4+0x9a>
 8019e04:	f1c6 0720 	rsb	r7, r6, #32
 8019e08:	40b3      	lsls	r3, r6
 8019e0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8019e0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8019e12:	fa20 f407 	lsr.w	r4, r0, r7
 8019e16:	fa01 f306 	lsl.w	r3, r1, r6
 8019e1a:	431c      	orrs	r4, r3
 8019e1c:	40f9      	lsrs	r1, r7
 8019e1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8019e22:	fa00 f306 	lsl.w	r3, r0, r6
 8019e26:	fbb1 f8f9 	udiv	r8, r1, r9
 8019e2a:	0c20      	lsrs	r0, r4, #16
 8019e2c:	fa1f fe8c 	uxth.w	lr, ip
 8019e30:	fb09 1118 	mls	r1, r9, r8, r1
 8019e34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019e38:	fb08 f00e 	mul.w	r0, r8, lr
 8019e3c:	4288      	cmp	r0, r1
 8019e3e:	fa02 f206 	lsl.w	r2, r2, r6
 8019e42:	d90b      	bls.n	8019e5c <__udivmoddi4+0x1b8>
 8019e44:	eb1c 0101 	adds.w	r1, ip, r1
 8019e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8019e4c:	f080 8088 	bcs.w	8019f60 <__udivmoddi4+0x2bc>
 8019e50:	4288      	cmp	r0, r1
 8019e52:	f240 8085 	bls.w	8019f60 <__udivmoddi4+0x2bc>
 8019e56:	f1a8 0802 	sub.w	r8, r8, #2
 8019e5a:	4461      	add	r1, ip
 8019e5c:	1a09      	subs	r1, r1, r0
 8019e5e:	b2a4      	uxth	r4, r4
 8019e60:	fbb1 f0f9 	udiv	r0, r1, r9
 8019e64:	fb09 1110 	mls	r1, r9, r0, r1
 8019e68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8019e6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8019e70:	458e      	cmp	lr, r1
 8019e72:	d908      	bls.n	8019e86 <__udivmoddi4+0x1e2>
 8019e74:	eb1c 0101 	adds.w	r1, ip, r1
 8019e78:	f100 34ff 	add.w	r4, r0, #4294967295
 8019e7c:	d26c      	bcs.n	8019f58 <__udivmoddi4+0x2b4>
 8019e7e:	458e      	cmp	lr, r1
 8019e80:	d96a      	bls.n	8019f58 <__udivmoddi4+0x2b4>
 8019e82:	3802      	subs	r0, #2
 8019e84:	4461      	add	r1, ip
 8019e86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8019e8a:	fba0 9402 	umull	r9, r4, r0, r2
 8019e8e:	eba1 010e 	sub.w	r1, r1, lr
 8019e92:	42a1      	cmp	r1, r4
 8019e94:	46c8      	mov	r8, r9
 8019e96:	46a6      	mov	lr, r4
 8019e98:	d356      	bcc.n	8019f48 <__udivmoddi4+0x2a4>
 8019e9a:	d053      	beq.n	8019f44 <__udivmoddi4+0x2a0>
 8019e9c:	b15d      	cbz	r5, 8019eb6 <__udivmoddi4+0x212>
 8019e9e:	ebb3 0208 	subs.w	r2, r3, r8
 8019ea2:	eb61 010e 	sbc.w	r1, r1, lr
 8019ea6:	fa01 f707 	lsl.w	r7, r1, r7
 8019eaa:	fa22 f306 	lsr.w	r3, r2, r6
 8019eae:	40f1      	lsrs	r1, r6
 8019eb0:	431f      	orrs	r7, r3
 8019eb2:	e9c5 7100 	strd	r7, r1, [r5]
 8019eb6:	2600      	movs	r6, #0
 8019eb8:	4631      	mov	r1, r6
 8019eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ebe:	f1c2 0320 	rsb	r3, r2, #32
 8019ec2:	40d8      	lsrs	r0, r3
 8019ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8019ec8:	fa21 f303 	lsr.w	r3, r1, r3
 8019ecc:	4091      	lsls	r1, r2
 8019ece:	4301      	orrs	r1, r0
 8019ed0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019ed4:	fa1f fe8c 	uxth.w	lr, ip
 8019ed8:	fbb3 f0f7 	udiv	r0, r3, r7
 8019edc:	fb07 3610 	mls	r6, r7, r0, r3
 8019ee0:	0c0b      	lsrs	r3, r1, #16
 8019ee2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019ee6:	fb00 f60e 	mul.w	r6, r0, lr
 8019eea:	429e      	cmp	r6, r3
 8019eec:	fa04 f402 	lsl.w	r4, r4, r2
 8019ef0:	d908      	bls.n	8019f04 <__udivmoddi4+0x260>
 8019ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8019ef6:	f100 38ff 	add.w	r8, r0, #4294967295
 8019efa:	d22f      	bcs.n	8019f5c <__udivmoddi4+0x2b8>
 8019efc:	429e      	cmp	r6, r3
 8019efe:	d92d      	bls.n	8019f5c <__udivmoddi4+0x2b8>
 8019f00:	3802      	subs	r0, #2
 8019f02:	4463      	add	r3, ip
 8019f04:	1b9b      	subs	r3, r3, r6
 8019f06:	b289      	uxth	r1, r1
 8019f08:	fbb3 f6f7 	udiv	r6, r3, r7
 8019f0c:	fb07 3316 	mls	r3, r7, r6, r3
 8019f10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019f14:	fb06 f30e 	mul.w	r3, r6, lr
 8019f18:	428b      	cmp	r3, r1
 8019f1a:	d908      	bls.n	8019f2e <__udivmoddi4+0x28a>
 8019f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8019f20:	f106 38ff 	add.w	r8, r6, #4294967295
 8019f24:	d216      	bcs.n	8019f54 <__udivmoddi4+0x2b0>
 8019f26:	428b      	cmp	r3, r1
 8019f28:	d914      	bls.n	8019f54 <__udivmoddi4+0x2b0>
 8019f2a:	3e02      	subs	r6, #2
 8019f2c:	4461      	add	r1, ip
 8019f2e:	1ac9      	subs	r1, r1, r3
 8019f30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019f34:	e738      	b.n	8019da8 <__udivmoddi4+0x104>
 8019f36:	462e      	mov	r6, r5
 8019f38:	4628      	mov	r0, r5
 8019f3a:	e705      	b.n	8019d48 <__udivmoddi4+0xa4>
 8019f3c:	4606      	mov	r6, r0
 8019f3e:	e6e3      	b.n	8019d08 <__udivmoddi4+0x64>
 8019f40:	4618      	mov	r0, r3
 8019f42:	e6f8      	b.n	8019d36 <__udivmoddi4+0x92>
 8019f44:	454b      	cmp	r3, r9
 8019f46:	d2a9      	bcs.n	8019e9c <__udivmoddi4+0x1f8>
 8019f48:	ebb9 0802 	subs.w	r8, r9, r2
 8019f4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8019f50:	3801      	subs	r0, #1
 8019f52:	e7a3      	b.n	8019e9c <__udivmoddi4+0x1f8>
 8019f54:	4646      	mov	r6, r8
 8019f56:	e7ea      	b.n	8019f2e <__udivmoddi4+0x28a>
 8019f58:	4620      	mov	r0, r4
 8019f5a:	e794      	b.n	8019e86 <__udivmoddi4+0x1e2>
 8019f5c:	4640      	mov	r0, r8
 8019f5e:	e7d1      	b.n	8019f04 <__udivmoddi4+0x260>
 8019f60:	46d0      	mov	r8, sl
 8019f62:	e77b      	b.n	8019e5c <__udivmoddi4+0x1b8>
 8019f64:	3b02      	subs	r3, #2
 8019f66:	4461      	add	r1, ip
 8019f68:	e732      	b.n	8019dd0 <__udivmoddi4+0x12c>
 8019f6a:	4630      	mov	r0, r6
 8019f6c:	e709      	b.n	8019d82 <__udivmoddi4+0xde>
 8019f6e:	4464      	add	r4, ip
 8019f70:	3802      	subs	r0, #2
 8019f72:	e742      	b.n	8019dfa <__udivmoddi4+0x156>

08019f74 <__aeabi_idiv0>:
 8019f74:	4770      	bx	lr
 8019f76:	bf00      	nop

08019f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8019f7c:	480d      	ldr	r0, [pc, #52]	; (8019fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8019f7e:	490e      	ldr	r1, [pc, #56]	; (8019fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019f80:	4a0e      	ldr	r2, [pc, #56]	; (8019fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019f84:	e002      	b.n	8019f8c <LoopCopyDataInit>

08019f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8019f8a:	3304      	adds	r3, #4

08019f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019f90:	d3f9      	bcc.n	8019f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019f92:	4a0b      	ldr	r2, [pc, #44]	; (8019fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019f94:	4c0b      	ldr	r4, [pc, #44]	; (8019fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019f98:	e001      	b.n	8019f9e <LoopFillZerobss>

08019f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8019f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019f9c:	3204      	adds	r2, #4

08019f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019fa0:	d3fb      	bcc.n	8019f9a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019fa2:	f7eb ffb9 	bl	8005f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019fa6:	f000 f81b 	bl	8019fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019faa:	f7e7 fcd5 	bl	8001958 <main>
  bx  lr    
 8019fae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019fb8:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8019fbc:	08052e28 	.word	0x08052e28
  ldr r2, =_sbss
 8019fc0:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019fc4:	20000a20 	.word	0x20000a20

08019fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019fc8:	e7fe      	b.n	8019fc8 <ADC_IRQHandler>

08019fca <atoi>:
 8019fca:	220a      	movs	r2, #10
 8019fcc:	2100      	movs	r1, #0
 8019fce:	f001 bd7f 	b.w	801bad0 <strtol>
	...

08019fd4 <__errno>:
 8019fd4:	4b01      	ldr	r3, [pc, #4]	; (8019fdc <__errno+0x8>)
 8019fd6:	6818      	ldr	r0, [r3, #0]
 8019fd8:	4770      	bx	lr
 8019fda:	bf00      	nop
 8019fdc:	20000064 	.word	0x20000064

08019fe0 <__libc_init_array>:
 8019fe0:	b570      	push	{r4, r5, r6, lr}
 8019fe2:	4d0d      	ldr	r5, [pc, #52]	; (801a018 <__libc_init_array+0x38>)
 8019fe4:	4c0d      	ldr	r4, [pc, #52]	; (801a01c <__libc_init_array+0x3c>)
 8019fe6:	1b64      	subs	r4, r4, r5
 8019fe8:	10a4      	asrs	r4, r4, #2
 8019fea:	2600      	movs	r6, #0
 8019fec:	42a6      	cmp	r6, r4
 8019fee:	d109      	bne.n	801a004 <__libc_init_array+0x24>
 8019ff0:	4d0b      	ldr	r5, [pc, #44]	; (801a020 <__libc_init_array+0x40>)
 8019ff2:	4c0c      	ldr	r4, [pc, #48]	; (801a024 <__libc_init_array+0x44>)
 8019ff4:	f005 fc46 	bl	801f884 <_init>
 8019ff8:	1b64      	subs	r4, r4, r5
 8019ffa:	10a4      	asrs	r4, r4, #2
 8019ffc:	2600      	movs	r6, #0
 8019ffe:	42a6      	cmp	r6, r4
 801a000:	d105      	bne.n	801a00e <__libc_init_array+0x2e>
 801a002:	bd70      	pop	{r4, r5, r6, pc}
 801a004:	f855 3b04 	ldr.w	r3, [r5], #4
 801a008:	4798      	blx	r3
 801a00a:	3601      	adds	r6, #1
 801a00c:	e7ee      	b.n	8019fec <__libc_init_array+0xc>
 801a00e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a012:	4798      	blx	r3
 801a014:	3601      	adds	r6, #1
 801a016:	e7f2      	b.n	8019ffe <__libc_init_array+0x1e>
 801a018:	08052e20 	.word	0x08052e20
 801a01c:	08052e20 	.word	0x08052e20
 801a020:	08052e20 	.word	0x08052e20
 801a024:	08052e24 	.word	0x08052e24

0801a028 <memset>:
 801a028:	4402      	add	r2, r0
 801a02a:	4603      	mov	r3, r0
 801a02c:	4293      	cmp	r3, r2
 801a02e:	d100      	bne.n	801a032 <memset+0xa>
 801a030:	4770      	bx	lr
 801a032:	f803 1b01 	strb.w	r1, [r3], #1
 801a036:	e7f9      	b.n	801a02c <memset+0x4>

0801a038 <__cvt>:
 801a038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a03c:	ec55 4b10 	vmov	r4, r5, d0
 801a040:	2d00      	cmp	r5, #0
 801a042:	460e      	mov	r6, r1
 801a044:	4619      	mov	r1, r3
 801a046:	462b      	mov	r3, r5
 801a048:	bfbb      	ittet	lt
 801a04a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a04e:	461d      	movlt	r5, r3
 801a050:	2300      	movge	r3, #0
 801a052:	232d      	movlt	r3, #45	; 0x2d
 801a054:	700b      	strb	r3, [r1, #0]
 801a056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a058:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a05c:	4691      	mov	r9, r2
 801a05e:	f023 0820 	bic.w	r8, r3, #32
 801a062:	bfbc      	itt	lt
 801a064:	4622      	movlt	r2, r4
 801a066:	4614      	movlt	r4, r2
 801a068:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a06c:	d005      	beq.n	801a07a <__cvt+0x42>
 801a06e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a072:	d100      	bne.n	801a076 <__cvt+0x3e>
 801a074:	3601      	adds	r6, #1
 801a076:	2102      	movs	r1, #2
 801a078:	e000      	b.n	801a07c <__cvt+0x44>
 801a07a:	2103      	movs	r1, #3
 801a07c:	ab03      	add	r3, sp, #12
 801a07e:	9301      	str	r3, [sp, #4]
 801a080:	ab02      	add	r3, sp, #8
 801a082:	9300      	str	r3, [sp, #0]
 801a084:	ec45 4b10 	vmov	d0, r4, r5
 801a088:	4653      	mov	r3, sl
 801a08a:	4632      	mov	r2, r6
 801a08c:	f001 fdb8 	bl	801bc00 <_dtoa_r>
 801a090:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a094:	4607      	mov	r7, r0
 801a096:	d102      	bne.n	801a09e <__cvt+0x66>
 801a098:	f019 0f01 	tst.w	r9, #1
 801a09c:	d022      	beq.n	801a0e4 <__cvt+0xac>
 801a09e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a0a2:	eb07 0906 	add.w	r9, r7, r6
 801a0a6:	d110      	bne.n	801a0ca <__cvt+0x92>
 801a0a8:	783b      	ldrb	r3, [r7, #0]
 801a0aa:	2b30      	cmp	r3, #48	; 0x30
 801a0ac:	d10a      	bne.n	801a0c4 <__cvt+0x8c>
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	4620      	mov	r0, r4
 801a0b4:	4629      	mov	r1, r5
 801a0b6:	f7ff fcc7 	bl	8019a48 <__aeabi_dcmpeq>
 801a0ba:	b918      	cbnz	r0, 801a0c4 <__cvt+0x8c>
 801a0bc:	f1c6 0601 	rsb	r6, r6, #1
 801a0c0:	f8ca 6000 	str.w	r6, [sl]
 801a0c4:	f8da 3000 	ldr.w	r3, [sl]
 801a0c8:	4499      	add	r9, r3
 801a0ca:	2200      	movs	r2, #0
 801a0cc:	2300      	movs	r3, #0
 801a0ce:	4620      	mov	r0, r4
 801a0d0:	4629      	mov	r1, r5
 801a0d2:	f7ff fcb9 	bl	8019a48 <__aeabi_dcmpeq>
 801a0d6:	b108      	cbz	r0, 801a0dc <__cvt+0xa4>
 801a0d8:	f8cd 900c 	str.w	r9, [sp, #12]
 801a0dc:	2230      	movs	r2, #48	; 0x30
 801a0de:	9b03      	ldr	r3, [sp, #12]
 801a0e0:	454b      	cmp	r3, r9
 801a0e2:	d307      	bcc.n	801a0f4 <__cvt+0xbc>
 801a0e4:	9b03      	ldr	r3, [sp, #12]
 801a0e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a0e8:	1bdb      	subs	r3, r3, r7
 801a0ea:	4638      	mov	r0, r7
 801a0ec:	6013      	str	r3, [r2, #0]
 801a0ee:	b004      	add	sp, #16
 801a0f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0f4:	1c59      	adds	r1, r3, #1
 801a0f6:	9103      	str	r1, [sp, #12]
 801a0f8:	701a      	strb	r2, [r3, #0]
 801a0fa:	e7f0      	b.n	801a0de <__cvt+0xa6>

0801a0fc <__exponent>:
 801a0fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a0fe:	4603      	mov	r3, r0
 801a100:	2900      	cmp	r1, #0
 801a102:	bfb8      	it	lt
 801a104:	4249      	neglt	r1, r1
 801a106:	f803 2b02 	strb.w	r2, [r3], #2
 801a10a:	bfb4      	ite	lt
 801a10c:	222d      	movlt	r2, #45	; 0x2d
 801a10e:	222b      	movge	r2, #43	; 0x2b
 801a110:	2909      	cmp	r1, #9
 801a112:	7042      	strb	r2, [r0, #1]
 801a114:	dd2a      	ble.n	801a16c <__exponent+0x70>
 801a116:	f10d 0407 	add.w	r4, sp, #7
 801a11a:	46a4      	mov	ip, r4
 801a11c:	270a      	movs	r7, #10
 801a11e:	46a6      	mov	lr, r4
 801a120:	460a      	mov	r2, r1
 801a122:	fb91 f6f7 	sdiv	r6, r1, r7
 801a126:	fb07 1516 	mls	r5, r7, r6, r1
 801a12a:	3530      	adds	r5, #48	; 0x30
 801a12c:	2a63      	cmp	r2, #99	; 0x63
 801a12e:	f104 34ff 	add.w	r4, r4, #4294967295
 801a132:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a136:	4631      	mov	r1, r6
 801a138:	dcf1      	bgt.n	801a11e <__exponent+0x22>
 801a13a:	3130      	adds	r1, #48	; 0x30
 801a13c:	f1ae 0502 	sub.w	r5, lr, #2
 801a140:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a144:	1c44      	adds	r4, r0, #1
 801a146:	4629      	mov	r1, r5
 801a148:	4561      	cmp	r1, ip
 801a14a:	d30a      	bcc.n	801a162 <__exponent+0x66>
 801a14c:	f10d 0209 	add.w	r2, sp, #9
 801a150:	eba2 020e 	sub.w	r2, r2, lr
 801a154:	4565      	cmp	r5, ip
 801a156:	bf88      	it	hi
 801a158:	2200      	movhi	r2, #0
 801a15a:	4413      	add	r3, r2
 801a15c:	1a18      	subs	r0, r3, r0
 801a15e:	b003      	add	sp, #12
 801a160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a162:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a166:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a16a:	e7ed      	b.n	801a148 <__exponent+0x4c>
 801a16c:	2330      	movs	r3, #48	; 0x30
 801a16e:	3130      	adds	r1, #48	; 0x30
 801a170:	7083      	strb	r3, [r0, #2]
 801a172:	70c1      	strb	r1, [r0, #3]
 801a174:	1d03      	adds	r3, r0, #4
 801a176:	e7f1      	b.n	801a15c <__exponent+0x60>

0801a178 <_printf_float>:
 801a178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a17c:	ed2d 8b02 	vpush	{d8}
 801a180:	b08d      	sub	sp, #52	; 0x34
 801a182:	460c      	mov	r4, r1
 801a184:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a188:	4616      	mov	r6, r2
 801a18a:	461f      	mov	r7, r3
 801a18c:	4605      	mov	r5, r0
 801a18e:	f002 fe95 	bl	801cebc <_localeconv_r>
 801a192:	f8d0 a000 	ldr.w	sl, [r0]
 801a196:	4650      	mov	r0, sl
 801a198:	f7fe ffd8 	bl	801914c <strlen>
 801a19c:	2300      	movs	r3, #0
 801a19e:	930a      	str	r3, [sp, #40]	; 0x28
 801a1a0:	6823      	ldr	r3, [r4, #0]
 801a1a2:	9305      	str	r3, [sp, #20]
 801a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 801a1a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a1ac:	3307      	adds	r3, #7
 801a1ae:	f023 0307 	bic.w	r3, r3, #7
 801a1b2:	f103 0208 	add.w	r2, r3, #8
 801a1b6:	f8c8 2000 	str.w	r2, [r8]
 801a1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a1c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a1c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a1ca:	9307      	str	r3, [sp, #28]
 801a1cc:	f8cd 8018 	str.w	r8, [sp, #24]
 801a1d0:	ee08 0a10 	vmov	s16, r0
 801a1d4:	4b9f      	ldr	r3, [pc, #636]	; (801a454 <_printf_float+0x2dc>)
 801a1d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1da:	f04f 32ff 	mov.w	r2, #4294967295
 801a1de:	f7ff fc65 	bl	8019aac <__aeabi_dcmpun>
 801a1e2:	bb88      	cbnz	r0, 801a248 <_printf_float+0xd0>
 801a1e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1e8:	4b9a      	ldr	r3, [pc, #616]	; (801a454 <_printf_float+0x2dc>)
 801a1ea:	f04f 32ff 	mov.w	r2, #4294967295
 801a1ee:	f7ff fc3f 	bl	8019a70 <__aeabi_dcmple>
 801a1f2:	bb48      	cbnz	r0, 801a248 <_printf_float+0xd0>
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	2300      	movs	r3, #0
 801a1f8:	4640      	mov	r0, r8
 801a1fa:	4649      	mov	r1, r9
 801a1fc:	f7ff fc2e 	bl	8019a5c <__aeabi_dcmplt>
 801a200:	b110      	cbz	r0, 801a208 <_printf_float+0x90>
 801a202:	232d      	movs	r3, #45	; 0x2d
 801a204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a208:	4b93      	ldr	r3, [pc, #588]	; (801a458 <_printf_float+0x2e0>)
 801a20a:	4894      	ldr	r0, [pc, #592]	; (801a45c <_printf_float+0x2e4>)
 801a20c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a210:	bf94      	ite	ls
 801a212:	4698      	movls	r8, r3
 801a214:	4680      	movhi	r8, r0
 801a216:	2303      	movs	r3, #3
 801a218:	6123      	str	r3, [r4, #16]
 801a21a:	9b05      	ldr	r3, [sp, #20]
 801a21c:	f023 0204 	bic.w	r2, r3, #4
 801a220:	6022      	str	r2, [r4, #0]
 801a222:	f04f 0900 	mov.w	r9, #0
 801a226:	9700      	str	r7, [sp, #0]
 801a228:	4633      	mov	r3, r6
 801a22a:	aa0b      	add	r2, sp, #44	; 0x2c
 801a22c:	4621      	mov	r1, r4
 801a22e:	4628      	mov	r0, r5
 801a230:	f000 f9d8 	bl	801a5e4 <_printf_common>
 801a234:	3001      	adds	r0, #1
 801a236:	f040 8090 	bne.w	801a35a <_printf_float+0x1e2>
 801a23a:	f04f 30ff 	mov.w	r0, #4294967295
 801a23e:	b00d      	add	sp, #52	; 0x34
 801a240:	ecbd 8b02 	vpop	{d8}
 801a244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a248:	4642      	mov	r2, r8
 801a24a:	464b      	mov	r3, r9
 801a24c:	4640      	mov	r0, r8
 801a24e:	4649      	mov	r1, r9
 801a250:	f7ff fc2c 	bl	8019aac <__aeabi_dcmpun>
 801a254:	b140      	cbz	r0, 801a268 <_printf_float+0xf0>
 801a256:	464b      	mov	r3, r9
 801a258:	2b00      	cmp	r3, #0
 801a25a:	bfbc      	itt	lt
 801a25c:	232d      	movlt	r3, #45	; 0x2d
 801a25e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a262:	487f      	ldr	r0, [pc, #508]	; (801a460 <_printf_float+0x2e8>)
 801a264:	4b7f      	ldr	r3, [pc, #508]	; (801a464 <_printf_float+0x2ec>)
 801a266:	e7d1      	b.n	801a20c <_printf_float+0x94>
 801a268:	6863      	ldr	r3, [r4, #4]
 801a26a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a26e:	9206      	str	r2, [sp, #24]
 801a270:	1c5a      	adds	r2, r3, #1
 801a272:	d13f      	bne.n	801a2f4 <_printf_float+0x17c>
 801a274:	2306      	movs	r3, #6
 801a276:	6063      	str	r3, [r4, #4]
 801a278:	9b05      	ldr	r3, [sp, #20]
 801a27a:	6861      	ldr	r1, [r4, #4]
 801a27c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a280:	2300      	movs	r3, #0
 801a282:	9303      	str	r3, [sp, #12]
 801a284:	ab0a      	add	r3, sp, #40	; 0x28
 801a286:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a28a:	ab09      	add	r3, sp, #36	; 0x24
 801a28c:	ec49 8b10 	vmov	d0, r8, r9
 801a290:	9300      	str	r3, [sp, #0]
 801a292:	6022      	str	r2, [r4, #0]
 801a294:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a298:	4628      	mov	r0, r5
 801a29a:	f7ff fecd 	bl	801a038 <__cvt>
 801a29e:	9b06      	ldr	r3, [sp, #24]
 801a2a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a2a2:	2b47      	cmp	r3, #71	; 0x47
 801a2a4:	4680      	mov	r8, r0
 801a2a6:	d108      	bne.n	801a2ba <_printf_float+0x142>
 801a2a8:	1cc8      	adds	r0, r1, #3
 801a2aa:	db02      	blt.n	801a2b2 <_printf_float+0x13a>
 801a2ac:	6863      	ldr	r3, [r4, #4]
 801a2ae:	4299      	cmp	r1, r3
 801a2b0:	dd41      	ble.n	801a336 <_printf_float+0x1be>
 801a2b2:	f1ab 0b02 	sub.w	fp, fp, #2
 801a2b6:	fa5f fb8b 	uxtb.w	fp, fp
 801a2ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a2be:	d820      	bhi.n	801a302 <_printf_float+0x18a>
 801a2c0:	3901      	subs	r1, #1
 801a2c2:	465a      	mov	r2, fp
 801a2c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a2c8:	9109      	str	r1, [sp, #36]	; 0x24
 801a2ca:	f7ff ff17 	bl	801a0fc <__exponent>
 801a2ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a2d0:	1813      	adds	r3, r2, r0
 801a2d2:	2a01      	cmp	r2, #1
 801a2d4:	4681      	mov	r9, r0
 801a2d6:	6123      	str	r3, [r4, #16]
 801a2d8:	dc02      	bgt.n	801a2e0 <_printf_float+0x168>
 801a2da:	6822      	ldr	r2, [r4, #0]
 801a2dc:	07d2      	lsls	r2, r2, #31
 801a2de:	d501      	bpl.n	801a2e4 <_printf_float+0x16c>
 801a2e0:	3301      	adds	r3, #1
 801a2e2:	6123      	str	r3, [r4, #16]
 801a2e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d09c      	beq.n	801a226 <_printf_float+0xae>
 801a2ec:	232d      	movs	r3, #45	; 0x2d
 801a2ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2f2:	e798      	b.n	801a226 <_printf_float+0xae>
 801a2f4:	9a06      	ldr	r2, [sp, #24]
 801a2f6:	2a47      	cmp	r2, #71	; 0x47
 801a2f8:	d1be      	bne.n	801a278 <_printf_float+0x100>
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d1bc      	bne.n	801a278 <_printf_float+0x100>
 801a2fe:	2301      	movs	r3, #1
 801a300:	e7b9      	b.n	801a276 <_printf_float+0xfe>
 801a302:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a306:	d118      	bne.n	801a33a <_printf_float+0x1c2>
 801a308:	2900      	cmp	r1, #0
 801a30a:	6863      	ldr	r3, [r4, #4]
 801a30c:	dd0b      	ble.n	801a326 <_printf_float+0x1ae>
 801a30e:	6121      	str	r1, [r4, #16]
 801a310:	b913      	cbnz	r3, 801a318 <_printf_float+0x1a0>
 801a312:	6822      	ldr	r2, [r4, #0]
 801a314:	07d0      	lsls	r0, r2, #31
 801a316:	d502      	bpl.n	801a31e <_printf_float+0x1a6>
 801a318:	3301      	adds	r3, #1
 801a31a:	440b      	add	r3, r1
 801a31c:	6123      	str	r3, [r4, #16]
 801a31e:	65a1      	str	r1, [r4, #88]	; 0x58
 801a320:	f04f 0900 	mov.w	r9, #0
 801a324:	e7de      	b.n	801a2e4 <_printf_float+0x16c>
 801a326:	b913      	cbnz	r3, 801a32e <_printf_float+0x1b6>
 801a328:	6822      	ldr	r2, [r4, #0]
 801a32a:	07d2      	lsls	r2, r2, #31
 801a32c:	d501      	bpl.n	801a332 <_printf_float+0x1ba>
 801a32e:	3302      	adds	r3, #2
 801a330:	e7f4      	b.n	801a31c <_printf_float+0x1a4>
 801a332:	2301      	movs	r3, #1
 801a334:	e7f2      	b.n	801a31c <_printf_float+0x1a4>
 801a336:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a33c:	4299      	cmp	r1, r3
 801a33e:	db05      	blt.n	801a34c <_printf_float+0x1d4>
 801a340:	6823      	ldr	r3, [r4, #0]
 801a342:	6121      	str	r1, [r4, #16]
 801a344:	07d8      	lsls	r0, r3, #31
 801a346:	d5ea      	bpl.n	801a31e <_printf_float+0x1a6>
 801a348:	1c4b      	adds	r3, r1, #1
 801a34a:	e7e7      	b.n	801a31c <_printf_float+0x1a4>
 801a34c:	2900      	cmp	r1, #0
 801a34e:	bfd4      	ite	le
 801a350:	f1c1 0202 	rsble	r2, r1, #2
 801a354:	2201      	movgt	r2, #1
 801a356:	4413      	add	r3, r2
 801a358:	e7e0      	b.n	801a31c <_printf_float+0x1a4>
 801a35a:	6823      	ldr	r3, [r4, #0]
 801a35c:	055a      	lsls	r2, r3, #21
 801a35e:	d407      	bmi.n	801a370 <_printf_float+0x1f8>
 801a360:	6923      	ldr	r3, [r4, #16]
 801a362:	4642      	mov	r2, r8
 801a364:	4631      	mov	r1, r6
 801a366:	4628      	mov	r0, r5
 801a368:	47b8      	blx	r7
 801a36a:	3001      	adds	r0, #1
 801a36c:	d12c      	bne.n	801a3c8 <_printf_float+0x250>
 801a36e:	e764      	b.n	801a23a <_printf_float+0xc2>
 801a370:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a374:	f240 80e0 	bls.w	801a538 <_printf_float+0x3c0>
 801a378:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a37c:	2200      	movs	r2, #0
 801a37e:	2300      	movs	r3, #0
 801a380:	f7ff fb62 	bl	8019a48 <__aeabi_dcmpeq>
 801a384:	2800      	cmp	r0, #0
 801a386:	d034      	beq.n	801a3f2 <_printf_float+0x27a>
 801a388:	4a37      	ldr	r2, [pc, #220]	; (801a468 <_printf_float+0x2f0>)
 801a38a:	2301      	movs	r3, #1
 801a38c:	4631      	mov	r1, r6
 801a38e:	4628      	mov	r0, r5
 801a390:	47b8      	blx	r7
 801a392:	3001      	adds	r0, #1
 801a394:	f43f af51 	beq.w	801a23a <_printf_float+0xc2>
 801a398:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a39c:	429a      	cmp	r2, r3
 801a39e:	db02      	blt.n	801a3a6 <_printf_float+0x22e>
 801a3a0:	6823      	ldr	r3, [r4, #0]
 801a3a2:	07d8      	lsls	r0, r3, #31
 801a3a4:	d510      	bpl.n	801a3c8 <_printf_float+0x250>
 801a3a6:	ee18 3a10 	vmov	r3, s16
 801a3aa:	4652      	mov	r2, sl
 801a3ac:	4631      	mov	r1, r6
 801a3ae:	4628      	mov	r0, r5
 801a3b0:	47b8      	blx	r7
 801a3b2:	3001      	adds	r0, #1
 801a3b4:	f43f af41 	beq.w	801a23a <_printf_float+0xc2>
 801a3b8:	f04f 0800 	mov.w	r8, #0
 801a3bc:	f104 091a 	add.w	r9, r4, #26
 801a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a3c2:	3b01      	subs	r3, #1
 801a3c4:	4543      	cmp	r3, r8
 801a3c6:	dc09      	bgt.n	801a3dc <_printf_float+0x264>
 801a3c8:	6823      	ldr	r3, [r4, #0]
 801a3ca:	079b      	lsls	r3, r3, #30
 801a3cc:	f100 8105 	bmi.w	801a5da <_printf_float+0x462>
 801a3d0:	68e0      	ldr	r0, [r4, #12]
 801a3d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a3d4:	4298      	cmp	r0, r3
 801a3d6:	bfb8      	it	lt
 801a3d8:	4618      	movlt	r0, r3
 801a3da:	e730      	b.n	801a23e <_printf_float+0xc6>
 801a3dc:	2301      	movs	r3, #1
 801a3de:	464a      	mov	r2, r9
 801a3e0:	4631      	mov	r1, r6
 801a3e2:	4628      	mov	r0, r5
 801a3e4:	47b8      	blx	r7
 801a3e6:	3001      	adds	r0, #1
 801a3e8:	f43f af27 	beq.w	801a23a <_printf_float+0xc2>
 801a3ec:	f108 0801 	add.w	r8, r8, #1
 801a3f0:	e7e6      	b.n	801a3c0 <_printf_float+0x248>
 801a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	dc39      	bgt.n	801a46c <_printf_float+0x2f4>
 801a3f8:	4a1b      	ldr	r2, [pc, #108]	; (801a468 <_printf_float+0x2f0>)
 801a3fa:	2301      	movs	r3, #1
 801a3fc:	4631      	mov	r1, r6
 801a3fe:	4628      	mov	r0, r5
 801a400:	47b8      	blx	r7
 801a402:	3001      	adds	r0, #1
 801a404:	f43f af19 	beq.w	801a23a <_printf_float+0xc2>
 801a408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a40c:	4313      	orrs	r3, r2
 801a40e:	d102      	bne.n	801a416 <_printf_float+0x29e>
 801a410:	6823      	ldr	r3, [r4, #0]
 801a412:	07d9      	lsls	r1, r3, #31
 801a414:	d5d8      	bpl.n	801a3c8 <_printf_float+0x250>
 801a416:	ee18 3a10 	vmov	r3, s16
 801a41a:	4652      	mov	r2, sl
 801a41c:	4631      	mov	r1, r6
 801a41e:	4628      	mov	r0, r5
 801a420:	47b8      	blx	r7
 801a422:	3001      	adds	r0, #1
 801a424:	f43f af09 	beq.w	801a23a <_printf_float+0xc2>
 801a428:	f04f 0900 	mov.w	r9, #0
 801a42c:	f104 0a1a 	add.w	sl, r4, #26
 801a430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a432:	425b      	negs	r3, r3
 801a434:	454b      	cmp	r3, r9
 801a436:	dc01      	bgt.n	801a43c <_printf_float+0x2c4>
 801a438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a43a:	e792      	b.n	801a362 <_printf_float+0x1ea>
 801a43c:	2301      	movs	r3, #1
 801a43e:	4652      	mov	r2, sl
 801a440:	4631      	mov	r1, r6
 801a442:	4628      	mov	r0, r5
 801a444:	47b8      	blx	r7
 801a446:	3001      	adds	r0, #1
 801a448:	f43f aef7 	beq.w	801a23a <_printf_float+0xc2>
 801a44c:	f109 0901 	add.w	r9, r9, #1
 801a450:	e7ee      	b.n	801a430 <_printf_float+0x2b8>
 801a452:	bf00      	nop
 801a454:	7fefffff 	.word	0x7fefffff
 801a458:	08052940 	.word	0x08052940
 801a45c:	08052944 	.word	0x08052944
 801a460:	0805294c 	.word	0x0805294c
 801a464:	08052948 	.word	0x08052948
 801a468:	08052950 	.word	0x08052950
 801a46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a46e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a470:	429a      	cmp	r2, r3
 801a472:	bfa8      	it	ge
 801a474:	461a      	movge	r2, r3
 801a476:	2a00      	cmp	r2, #0
 801a478:	4691      	mov	r9, r2
 801a47a:	dc37      	bgt.n	801a4ec <_printf_float+0x374>
 801a47c:	f04f 0b00 	mov.w	fp, #0
 801a480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a484:	f104 021a 	add.w	r2, r4, #26
 801a488:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a48a:	9305      	str	r3, [sp, #20]
 801a48c:	eba3 0309 	sub.w	r3, r3, r9
 801a490:	455b      	cmp	r3, fp
 801a492:	dc33      	bgt.n	801a4fc <_printf_float+0x384>
 801a494:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a498:	429a      	cmp	r2, r3
 801a49a:	db3b      	blt.n	801a514 <_printf_float+0x39c>
 801a49c:	6823      	ldr	r3, [r4, #0]
 801a49e:	07da      	lsls	r2, r3, #31
 801a4a0:	d438      	bmi.n	801a514 <_printf_float+0x39c>
 801a4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4a4:	9a05      	ldr	r2, [sp, #20]
 801a4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a4a8:	1a9a      	subs	r2, r3, r2
 801a4aa:	eba3 0901 	sub.w	r9, r3, r1
 801a4ae:	4591      	cmp	r9, r2
 801a4b0:	bfa8      	it	ge
 801a4b2:	4691      	movge	r9, r2
 801a4b4:	f1b9 0f00 	cmp.w	r9, #0
 801a4b8:	dc35      	bgt.n	801a526 <_printf_float+0x3ae>
 801a4ba:	f04f 0800 	mov.w	r8, #0
 801a4be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a4c2:	f104 0a1a 	add.w	sl, r4, #26
 801a4c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a4ca:	1a9b      	subs	r3, r3, r2
 801a4cc:	eba3 0309 	sub.w	r3, r3, r9
 801a4d0:	4543      	cmp	r3, r8
 801a4d2:	f77f af79 	ble.w	801a3c8 <_printf_float+0x250>
 801a4d6:	2301      	movs	r3, #1
 801a4d8:	4652      	mov	r2, sl
 801a4da:	4631      	mov	r1, r6
 801a4dc:	4628      	mov	r0, r5
 801a4de:	47b8      	blx	r7
 801a4e0:	3001      	adds	r0, #1
 801a4e2:	f43f aeaa 	beq.w	801a23a <_printf_float+0xc2>
 801a4e6:	f108 0801 	add.w	r8, r8, #1
 801a4ea:	e7ec      	b.n	801a4c6 <_printf_float+0x34e>
 801a4ec:	4613      	mov	r3, r2
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	4642      	mov	r2, r8
 801a4f2:	4628      	mov	r0, r5
 801a4f4:	47b8      	blx	r7
 801a4f6:	3001      	adds	r0, #1
 801a4f8:	d1c0      	bne.n	801a47c <_printf_float+0x304>
 801a4fa:	e69e      	b.n	801a23a <_printf_float+0xc2>
 801a4fc:	2301      	movs	r3, #1
 801a4fe:	4631      	mov	r1, r6
 801a500:	4628      	mov	r0, r5
 801a502:	9205      	str	r2, [sp, #20]
 801a504:	47b8      	blx	r7
 801a506:	3001      	adds	r0, #1
 801a508:	f43f ae97 	beq.w	801a23a <_printf_float+0xc2>
 801a50c:	9a05      	ldr	r2, [sp, #20]
 801a50e:	f10b 0b01 	add.w	fp, fp, #1
 801a512:	e7b9      	b.n	801a488 <_printf_float+0x310>
 801a514:	ee18 3a10 	vmov	r3, s16
 801a518:	4652      	mov	r2, sl
 801a51a:	4631      	mov	r1, r6
 801a51c:	4628      	mov	r0, r5
 801a51e:	47b8      	blx	r7
 801a520:	3001      	adds	r0, #1
 801a522:	d1be      	bne.n	801a4a2 <_printf_float+0x32a>
 801a524:	e689      	b.n	801a23a <_printf_float+0xc2>
 801a526:	9a05      	ldr	r2, [sp, #20]
 801a528:	464b      	mov	r3, r9
 801a52a:	4442      	add	r2, r8
 801a52c:	4631      	mov	r1, r6
 801a52e:	4628      	mov	r0, r5
 801a530:	47b8      	blx	r7
 801a532:	3001      	adds	r0, #1
 801a534:	d1c1      	bne.n	801a4ba <_printf_float+0x342>
 801a536:	e680      	b.n	801a23a <_printf_float+0xc2>
 801a538:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a53a:	2a01      	cmp	r2, #1
 801a53c:	dc01      	bgt.n	801a542 <_printf_float+0x3ca>
 801a53e:	07db      	lsls	r3, r3, #31
 801a540:	d538      	bpl.n	801a5b4 <_printf_float+0x43c>
 801a542:	2301      	movs	r3, #1
 801a544:	4642      	mov	r2, r8
 801a546:	4631      	mov	r1, r6
 801a548:	4628      	mov	r0, r5
 801a54a:	47b8      	blx	r7
 801a54c:	3001      	adds	r0, #1
 801a54e:	f43f ae74 	beq.w	801a23a <_printf_float+0xc2>
 801a552:	ee18 3a10 	vmov	r3, s16
 801a556:	4652      	mov	r2, sl
 801a558:	4631      	mov	r1, r6
 801a55a:	4628      	mov	r0, r5
 801a55c:	47b8      	blx	r7
 801a55e:	3001      	adds	r0, #1
 801a560:	f43f ae6b 	beq.w	801a23a <_printf_float+0xc2>
 801a564:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a568:	2200      	movs	r2, #0
 801a56a:	2300      	movs	r3, #0
 801a56c:	f7ff fa6c 	bl	8019a48 <__aeabi_dcmpeq>
 801a570:	b9d8      	cbnz	r0, 801a5aa <_printf_float+0x432>
 801a572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a574:	f108 0201 	add.w	r2, r8, #1
 801a578:	3b01      	subs	r3, #1
 801a57a:	4631      	mov	r1, r6
 801a57c:	4628      	mov	r0, r5
 801a57e:	47b8      	blx	r7
 801a580:	3001      	adds	r0, #1
 801a582:	d10e      	bne.n	801a5a2 <_printf_float+0x42a>
 801a584:	e659      	b.n	801a23a <_printf_float+0xc2>
 801a586:	2301      	movs	r3, #1
 801a588:	4652      	mov	r2, sl
 801a58a:	4631      	mov	r1, r6
 801a58c:	4628      	mov	r0, r5
 801a58e:	47b8      	blx	r7
 801a590:	3001      	adds	r0, #1
 801a592:	f43f ae52 	beq.w	801a23a <_printf_float+0xc2>
 801a596:	f108 0801 	add.w	r8, r8, #1
 801a59a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a59c:	3b01      	subs	r3, #1
 801a59e:	4543      	cmp	r3, r8
 801a5a0:	dcf1      	bgt.n	801a586 <_printf_float+0x40e>
 801a5a2:	464b      	mov	r3, r9
 801a5a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a5a8:	e6dc      	b.n	801a364 <_printf_float+0x1ec>
 801a5aa:	f04f 0800 	mov.w	r8, #0
 801a5ae:	f104 0a1a 	add.w	sl, r4, #26
 801a5b2:	e7f2      	b.n	801a59a <_printf_float+0x422>
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	4642      	mov	r2, r8
 801a5b8:	e7df      	b.n	801a57a <_printf_float+0x402>
 801a5ba:	2301      	movs	r3, #1
 801a5bc:	464a      	mov	r2, r9
 801a5be:	4631      	mov	r1, r6
 801a5c0:	4628      	mov	r0, r5
 801a5c2:	47b8      	blx	r7
 801a5c4:	3001      	adds	r0, #1
 801a5c6:	f43f ae38 	beq.w	801a23a <_printf_float+0xc2>
 801a5ca:	f108 0801 	add.w	r8, r8, #1
 801a5ce:	68e3      	ldr	r3, [r4, #12]
 801a5d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a5d2:	1a5b      	subs	r3, r3, r1
 801a5d4:	4543      	cmp	r3, r8
 801a5d6:	dcf0      	bgt.n	801a5ba <_printf_float+0x442>
 801a5d8:	e6fa      	b.n	801a3d0 <_printf_float+0x258>
 801a5da:	f04f 0800 	mov.w	r8, #0
 801a5de:	f104 0919 	add.w	r9, r4, #25
 801a5e2:	e7f4      	b.n	801a5ce <_printf_float+0x456>

0801a5e4 <_printf_common>:
 801a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a5e8:	4616      	mov	r6, r2
 801a5ea:	4699      	mov	r9, r3
 801a5ec:	688a      	ldr	r2, [r1, #8]
 801a5ee:	690b      	ldr	r3, [r1, #16]
 801a5f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	bfb8      	it	lt
 801a5f8:	4613      	movlt	r3, r2
 801a5fa:	6033      	str	r3, [r6, #0]
 801a5fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a600:	4607      	mov	r7, r0
 801a602:	460c      	mov	r4, r1
 801a604:	b10a      	cbz	r2, 801a60a <_printf_common+0x26>
 801a606:	3301      	adds	r3, #1
 801a608:	6033      	str	r3, [r6, #0]
 801a60a:	6823      	ldr	r3, [r4, #0]
 801a60c:	0699      	lsls	r1, r3, #26
 801a60e:	bf42      	ittt	mi
 801a610:	6833      	ldrmi	r3, [r6, #0]
 801a612:	3302      	addmi	r3, #2
 801a614:	6033      	strmi	r3, [r6, #0]
 801a616:	6825      	ldr	r5, [r4, #0]
 801a618:	f015 0506 	ands.w	r5, r5, #6
 801a61c:	d106      	bne.n	801a62c <_printf_common+0x48>
 801a61e:	f104 0a19 	add.w	sl, r4, #25
 801a622:	68e3      	ldr	r3, [r4, #12]
 801a624:	6832      	ldr	r2, [r6, #0]
 801a626:	1a9b      	subs	r3, r3, r2
 801a628:	42ab      	cmp	r3, r5
 801a62a:	dc26      	bgt.n	801a67a <_printf_common+0x96>
 801a62c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a630:	1e13      	subs	r3, r2, #0
 801a632:	6822      	ldr	r2, [r4, #0]
 801a634:	bf18      	it	ne
 801a636:	2301      	movne	r3, #1
 801a638:	0692      	lsls	r2, r2, #26
 801a63a:	d42b      	bmi.n	801a694 <_printf_common+0xb0>
 801a63c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a640:	4649      	mov	r1, r9
 801a642:	4638      	mov	r0, r7
 801a644:	47c0      	blx	r8
 801a646:	3001      	adds	r0, #1
 801a648:	d01e      	beq.n	801a688 <_printf_common+0xa4>
 801a64a:	6823      	ldr	r3, [r4, #0]
 801a64c:	68e5      	ldr	r5, [r4, #12]
 801a64e:	6832      	ldr	r2, [r6, #0]
 801a650:	f003 0306 	and.w	r3, r3, #6
 801a654:	2b04      	cmp	r3, #4
 801a656:	bf08      	it	eq
 801a658:	1aad      	subeq	r5, r5, r2
 801a65a:	68a3      	ldr	r3, [r4, #8]
 801a65c:	6922      	ldr	r2, [r4, #16]
 801a65e:	bf0c      	ite	eq
 801a660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a664:	2500      	movne	r5, #0
 801a666:	4293      	cmp	r3, r2
 801a668:	bfc4      	itt	gt
 801a66a:	1a9b      	subgt	r3, r3, r2
 801a66c:	18ed      	addgt	r5, r5, r3
 801a66e:	2600      	movs	r6, #0
 801a670:	341a      	adds	r4, #26
 801a672:	42b5      	cmp	r5, r6
 801a674:	d11a      	bne.n	801a6ac <_printf_common+0xc8>
 801a676:	2000      	movs	r0, #0
 801a678:	e008      	b.n	801a68c <_printf_common+0xa8>
 801a67a:	2301      	movs	r3, #1
 801a67c:	4652      	mov	r2, sl
 801a67e:	4649      	mov	r1, r9
 801a680:	4638      	mov	r0, r7
 801a682:	47c0      	blx	r8
 801a684:	3001      	adds	r0, #1
 801a686:	d103      	bne.n	801a690 <_printf_common+0xac>
 801a688:	f04f 30ff 	mov.w	r0, #4294967295
 801a68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a690:	3501      	adds	r5, #1
 801a692:	e7c6      	b.n	801a622 <_printf_common+0x3e>
 801a694:	18e1      	adds	r1, r4, r3
 801a696:	1c5a      	adds	r2, r3, #1
 801a698:	2030      	movs	r0, #48	; 0x30
 801a69a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a69e:	4422      	add	r2, r4
 801a6a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a6a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a6a8:	3302      	adds	r3, #2
 801a6aa:	e7c7      	b.n	801a63c <_printf_common+0x58>
 801a6ac:	2301      	movs	r3, #1
 801a6ae:	4622      	mov	r2, r4
 801a6b0:	4649      	mov	r1, r9
 801a6b2:	4638      	mov	r0, r7
 801a6b4:	47c0      	blx	r8
 801a6b6:	3001      	adds	r0, #1
 801a6b8:	d0e6      	beq.n	801a688 <_printf_common+0xa4>
 801a6ba:	3601      	adds	r6, #1
 801a6bc:	e7d9      	b.n	801a672 <_printf_common+0x8e>
	...

0801a6c0 <_printf_i>:
 801a6c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a6c4:	7e0f      	ldrb	r7, [r1, #24]
 801a6c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a6c8:	2f78      	cmp	r7, #120	; 0x78
 801a6ca:	4691      	mov	r9, r2
 801a6cc:	4680      	mov	r8, r0
 801a6ce:	460c      	mov	r4, r1
 801a6d0:	469a      	mov	sl, r3
 801a6d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a6d6:	d807      	bhi.n	801a6e8 <_printf_i+0x28>
 801a6d8:	2f62      	cmp	r7, #98	; 0x62
 801a6da:	d80a      	bhi.n	801a6f2 <_printf_i+0x32>
 801a6dc:	2f00      	cmp	r7, #0
 801a6de:	f000 80d8 	beq.w	801a892 <_printf_i+0x1d2>
 801a6e2:	2f58      	cmp	r7, #88	; 0x58
 801a6e4:	f000 80a3 	beq.w	801a82e <_printf_i+0x16e>
 801a6e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a6ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a6f0:	e03a      	b.n	801a768 <_printf_i+0xa8>
 801a6f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a6f6:	2b15      	cmp	r3, #21
 801a6f8:	d8f6      	bhi.n	801a6e8 <_printf_i+0x28>
 801a6fa:	a101      	add	r1, pc, #4	; (adr r1, 801a700 <_printf_i+0x40>)
 801a6fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a700:	0801a759 	.word	0x0801a759
 801a704:	0801a76d 	.word	0x0801a76d
 801a708:	0801a6e9 	.word	0x0801a6e9
 801a70c:	0801a6e9 	.word	0x0801a6e9
 801a710:	0801a6e9 	.word	0x0801a6e9
 801a714:	0801a6e9 	.word	0x0801a6e9
 801a718:	0801a76d 	.word	0x0801a76d
 801a71c:	0801a6e9 	.word	0x0801a6e9
 801a720:	0801a6e9 	.word	0x0801a6e9
 801a724:	0801a6e9 	.word	0x0801a6e9
 801a728:	0801a6e9 	.word	0x0801a6e9
 801a72c:	0801a879 	.word	0x0801a879
 801a730:	0801a79d 	.word	0x0801a79d
 801a734:	0801a85b 	.word	0x0801a85b
 801a738:	0801a6e9 	.word	0x0801a6e9
 801a73c:	0801a6e9 	.word	0x0801a6e9
 801a740:	0801a89b 	.word	0x0801a89b
 801a744:	0801a6e9 	.word	0x0801a6e9
 801a748:	0801a79d 	.word	0x0801a79d
 801a74c:	0801a6e9 	.word	0x0801a6e9
 801a750:	0801a6e9 	.word	0x0801a6e9
 801a754:	0801a863 	.word	0x0801a863
 801a758:	682b      	ldr	r3, [r5, #0]
 801a75a:	1d1a      	adds	r2, r3, #4
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	602a      	str	r2, [r5, #0]
 801a760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a768:	2301      	movs	r3, #1
 801a76a:	e0a3      	b.n	801a8b4 <_printf_i+0x1f4>
 801a76c:	6820      	ldr	r0, [r4, #0]
 801a76e:	6829      	ldr	r1, [r5, #0]
 801a770:	0606      	lsls	r6, r0, #24
 801a772:	f101 0304 	add.w	r3, r1, #4
 801a776:	d50a      	bpl.n	801a78e <_printf_i+0xce>
 801a778:	680e      	ldr	r6, [r1, #0]
 801a77a:	602b      	str	r3, [r5, #0]
 801a77c:	2e00      	cmp	r6, #0
 801a77e:	da03      	bge.n	801a788 <_printf_i+0xc8>
 801a780:	232d      	movs	r3, #45	; 0x2d
 801a782:	4276      	negs	r6, r6
 801a784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a788:	485e      	ldr	r0, [pc, #376]	; (801a904 <_printf_i+0x244>)
 801a78a:	230a      	movs	r3, #10
 801a78c:	e019      	b.n	801a7c2 <_printf_i+0x102>
 801a78e:	680e      	ldr	r6, [r1, #0]
 801a790:	602b      	str	r3, [r5, #0]
 801a792:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a796:	bf18      	it	ne
 801a798:	b236      	sxthne	r6, r6
 801a79a:	e7ef      	b.n	801a77c <_printf_i+0xbc>
 801a79c:	682b      	ldr	r3, [r5, #0]
 801a79e:	6820      	ldr	r0, [r4, #0]
 801a7a0:	1d19      	adds	r1, r3, #4
 801a7a2:	6029      	str	r1, [r5, #0]
 801a7a4:	0601      	lsls	r1, r0, #24
 801a7a6:	d501      	bpl.n	801a7ac <_printf_i+0xec>
 801a7a8:	681e      	ldr	r6, [r3, #0]
 801a7aa:	e002      	b.n	801a7b2 <_printf_i+0xf2>
 801a7ac:	0646      	lsls	r6, r0, #25
 801a7ae:	d5fb      	bpl.n	801a7a8 <_printf_i+0xe8>
 801a7b0:	881e      	ldrh	r6, [r3, #0]
 801a7b2:	4854      	ldr	r0, [pc, #336]	; (801a904 <_printf_i+0x244>)
 801a7b4:	2f6f      	cmp	r7, #111	; 0x6f
 801a7b6:	bf0c      	ite	eq
 801a7b8:	2308      	moveq	r3, #8
 801a7ba:	230a      	movne	r3, #10
 801a7bc:	2100      	movs	r1, #0
 801a7be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a7c2:	6865      	ldr	r5, [r4, #4]
 801a7c4:	60a5      	str	r5, [r4, #8]
 801a7c6:	2d00      	cmp	r5, #0
 801a7c8:	bfa2      	ittt	ge
 801a7ca:	6821      	ldrge	r1, [r4, #0]
 801a7cc:	f021 0104 	bicge.w	r1, r1, #4
 801a7d0:	6021      	strge	r1, [r4, #0]
 801a7d2:	b90e      	cbnz	r6, 801a7d8 <_printf_i+0x118>
 801a7d4:	2d00      	cmp	r5, #0
 801a7d6:	d04d      	beq.n	801a874 <_printf_i+0x1b4>
 801a7d8:	4615      	mov	r5, r2
 801a7da:	fbb6 f1f3 	udiv	r1, r6, r3
 801a7de:	fb03 6711 	mls	r7, r3, r1, r6
 801a7e2:	5dc7      	ldrb	r7, [r0, r7]
 801a7e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a7e8:	4637      	mov	r7, r6
 801a7ea:	42bb      	cmp	r3, r7
 801a7ec:	460e      	mov	r6, r1
 801a7ee:	d9f4      	bls.n	801a7da <_printf_i+0x11a>
 801a7f0:	2b08      	cmp	r3, #8
 801a7f2:	d10b      	bne.n	801a80c <_printf_i+0x14c>
 801a7f4:	6823      	ldr	r3, [r4, #0]
 801a7f6:	07de      	lsls	r6, r3, #31
 801a7f8:	d508      	bpl.n	801a80c <_printf_i+0x14c>
 801a7fa:	6923      	ldr	r3, [r4, #16]
 801a7fc:	6861      	ldr	r1, [r4, #4]
 801a7fe:	4299      	cmp	r1, r3
 801a800:	bfde      	ittt	le
 801a802:	2330      	movle	r3, #48	; 0x30
 801a804:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a808:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a80c:	1b52      	subs	r2, r2, r5
 801a80e:	6122      	str	r2, [r4, #16]
 801a810:	f8cd a000 	str.w	sl, [sp]
 801a814:	464b      	mov	r3, r9
 801a816:	aa03      	add	r2, sp, #12
 801a818:	4621      	mov	r1, r4
 801a81a:	4640      	mov	r0, r8
 801a81c:	f7ff fee2 	bl	801a5e4 <_printf_common>
 801a820:	3001      	adds	r0, #1
 801a822:	d14c      	bne.n	801a8be <_printf_i+0x1fe>
 801a824:	f04f 30ff 	mov.w	r0, #4294967295
 801a828:	b004      	add	sp, #16
 801a82a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a82e:	4835      	ldr	r0, [pc, #212]	; (801a904 <_printf_i+0x244>)
 801a830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a834:	6829      	ldr	r1, [r5, #0]
 801a836:	6823      	ldr	r3, [r4, #0]
 801a838:	f851 6b04 	ldr.w	r6, [r1], #4
 801a83c:	6029      	str	r1, [r5, #0]
 801a83e:	061d      	lsls	r5, r3, #24
 801a840:	d514      	bpl.n	801a86c <_printf_i+0x1ac>
 801a842:	07df      	lsls	r7, r3, #31
 801a844:	bf44      	itt	mi
 801a846:	f043 0320 	orrmi.w	r3, r3, #32
 801a84a:	6023      	strmi	r3, [r4, #0]
 801a84c:	b91e      	cbnz	r6, 801a856 <_printf_i+0x196>
 801a84e:	6823      	ldr	r3, [r4, #0]
 801a850:	f023 0320 	bic.w	r3, r3, #32
 801a854:	6023      	str	r3, [r4, #0]
 801a856:	2310      	movs	r3, #16
 801a858:	e7b0      	b.n	801a7bc <_printf_i+0xfc>
 801a85a:	6823      	ldr	r3, [r4, #0]
 801a85c:	f043 0320 	orr.w	r3, r3, #32
 801a860:	6023      	str	r3, [r4, #0]
 801a862:	2378      	movs	r3, #120	; 0x78
 801a864:	4828      	ldr	r0, [pc, #160]	; (801a908 <_printf_i+0x248>)
 801a866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a86a:	e7e3      	b.n	801a834 <_printf_i+0x174>
 801a86c:	0659      	lsls	r1, r3, #25
 801a86e:	bf48      	it	mi
 801a870:	b2b6      	uxthmi	r6, r6
 801a872:	e7e6      	b.n	801a842 <_printf_i+0x182>
 801a874:	4615      	mov	r5, r2
 801a876:	e7bb      	b.n	801a7f0 <_printf_i+0x130>
 801a878:	682b      	ldr	r3, [r5, #0]
 801a87a:	6826      	ldr	r6, [r4, #0]
 801a87c:	6961      	ldr	r1, [r4, #20]
 801a87e:	1d18      	adds	r0, r3, #4
 801a880:	6028      	str	r0, [r5, #0]
 801a882:	0635      	lsls	r5, r6, #24
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	d501      	bpl.n	801a88c <_printf_i+0x1cc>
 801a888:	6019      	str	r1, [r3, #0]
 801a88a:	e002      	b.n	801a892 <_printf_i+0x1d2>
 801a88c:	0670      	lsls	r0, r6, #25
 801a88e:	d5fb      	bpl.n	801a888 <_printf_i+0x1c8>
 801a890:	8019      	strh	r1, [r3, #0]
 801a892:	2300      	movs	r3, #0
 801a894:	6123      	str	r3, [r4, #16]
 801a896:	4615      	mov	r5, r2
 801a898:	e7ba      	b.n	801a810 <_printf_i+0x150>
 801a89a:	682b      	ldr	r3, [r5, #0]
 801a89c:	1d1a      	adds	r2, r3, #4
 801a89e:	602a      	str	r2, [r5, #0]
 801a8a0:	681d      	ldr	r5, [r3, #0]
 801a8a2:	6862      	ldr	r2, [r4, #4]
 801a8a4:	2100      	movs	r1, #0
 801a8a6:	4628      	mov	r0, r5
 801a8a8:	f7fe fc5a 	bl	8019160 <memchr>
 801a8ac:	b108      	cbz	r0, 801a8b2 <_printf_i+0x1f2>
 801a8ae:	1b40      	subs	r0, r0, r5
 801a8b0:	6060      	str	r0, [r4, #4]
 801a8b2:	6863      	ldr	r3, [r4, #4]
 801a8b4:	6123      	str	r3, [r4, #16]
 801a8b6:	2300      	movs	r3, #0
 801a8b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a8bc:	e7a8      	b.n	801a810 <_printf_i+0x150>
 801a8be:	6923      	ldr	r3, [r4, #16]
 801a8c0:	462a      	mov	r2, r5
 801a8c2:	4649      	mov	r1, r9
 801a8c4:	4640      	mov	r0, r8
 801a8c6:	47d0      	blx	sl
 801a8c8:	3001      	adds	r0, #1
 801a8ca:	d0ab      	beq.n	801a824 <_printf_i+0x164>
 801a8cc:	6823      	ldr	r3, [r4, #0]
 801a8ce:	079b      	lsls	r3, r3, #30
 801a8d0:	d413      	bmi.n	801a8fa <_printf_i+0x23a>
 801a8d2:	68e0      	ldr	r0, [r4, #12]
 801a8d4:	9b03      	ldr	r3, [sp, #12]
 801a8d6:	4298      	cmp	r0, r3
 801a8d8:	bfb8      	it	lt
 801a8da:	4618      	movlt	r0, r3
 801a8dc:	e7a4      	b.n	801a828 <_printf_i+0x168>
 801a8de:	2301      	movs	r3, #1
 801a8e0:	4632      	mov	r2, r6
 801a8e2:	4649      	mov	r1, r9
 801a8e4:	4640      	mov	r0, r8
 801a8e6:	47d0      	blx	sl
 801a8e8:	3001      	adds	r0, #1
 801a8ea:	d09b      	beq.n	801a824 <_printf_i+0x164>
 801a8ec:	3501      	adds	r5, #1
 801a8ee:	68e3      	ldr	r3, [r4, #12]
 801a8f0:	9903      	ldr	r1, [sp, #12]
 801a8f2:	1a5b      	subs	r3, r3, r1
 801a8f4:	42ab      	cmp	r3, r5
 801a8f6:	dcf2      	bgt.n	801a8de <_printf_i+0x21e>
 801a8f8:	e7eb      	b.n	801a8d2 <_printf_i+0x212>
 801a8fa:	2500      	movs	r5, #0
 801a8fc:	f104 0619 	add.w	r6, r4, #25
 801a900:	e7f5      	b.n	801a8ee <_printf_i+0x22e>
 801a902:	bf00      	nop
 801a904:	08052952 	.word	0x08052952
 801a908:	08052963 	.word	0x08052963

0801a90c <_scanf_float>:
 801a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a910:	b087      	sub	sp, #28
 801a912:	4617      	mov	r7, r2
 801a914:	9303      	str	r3, [sp, #12]
 801a916:	688b      	ldr	r3, [r1, #8]
 801a918:	1e5a      	subs	r2, r3, #1
 801a91a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a91e:	bf83      	ittte	hi
 801a920:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a924:	195b      	addhi	r3, r3, r5
 801a926:	9302      	strhi	r3, [sp, #8]
 801a928:	2300      	movls	r3, #0
 801a92a:	bf86      	itte	hi
 801a92c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a930:	608b      	strhi	r3, [r1, #8]
 801a932:	9302      	strls	r3, [sp, #8]
 801a934:	680b      	ldr	r3, [r1, #0]
 801a936:	468b      	mov	fp, r1
 801a938:	2500      	movs	r5, #0
 801a93a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a93e:	f84b 3b1c 	str.w	r3, [fp], #28
 801a942:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a946:	4680      	mov	r8, r0
 801a948:	460c      	mov	r4, r1
 801a94a:	465e      	mov	r6, fp
 801a94c:	46aa      	mov	sl, r5
 801a94e:	46a9      	mov	r9, r5
 801a950:	9501      	str	r5, [sp, #4]
 801a952:	68a2      	ldr	r2, [r4, #8]
 801a954:	b152      	cbz	r2, 801a96c <_scanf_float+0x60>
 801a956:	683b      	ldr	r3, [r7, #0]
 801a958:	781b      	ldrb	r3, [r3, #0]
 801a95a:	2b4e      	cmp	r3, #78	; 0x4e
 801a95c:	d864      	bhi.n	801aa28 <_scanf_float+0x11c>
 801a95e:	2b40      	cmp	r3, #64	; 0x40
 801a960:	d83c      	bhi.n	801a9dc <_scanf_float+0xd0>
 801a962:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a966:	b2c8      	uxtb	r0, r1
 801a968:	280e      	cmp	r0, #14
 801a96a:	d93a      	bls.n	801a9e2 <_scanf_float+0xd6>
 801a96c:	f1b9 0f00 	cmp.w	r9, #0
 801a970:	d003      	beq.n	801a97a <_scanf_float+0x6e>
 801a972:	6823      	ldr	r3, [r4, #0]
 801a974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a978:	6023      	str	r3, [r4, #0]
 801a97a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a97e:	f1ba 0f01 	cmp.w	sl, #1
 801a982:	f200 8113 	bhi.w	801abac <_scanf_float+0x2a0>
 801a986:	455e      	cmp	r6, fp
 801a988:	f200 8105 	bhi.w	801ab96 <_scanf_float+0x28a>
 801a98c:	2501      	movs	r5, #1
 801a98e:	4628      	mov	r0, r5
 801a990:	b007      	add	sp, #28
 801a992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a996:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a99a:	2a0d      	cmp	r2, #13
 801a99c:	d8e6      	bhi.n	801a96c <_scanf_float+0x60>
 801a99e:	a101      	add	r1, pc, #4	; (adr r1, 801a9a4 <_scanf_float+0x98>)
 801a9a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a9a4:	0801aae3 	.word	0x0801aae3
 801a9a8:	0801a96d 	.word	0x0801a96d
 801a9ac:	0801a96d 	.word	0x0801a96d
 801a9b0:	0801a96d 	.word	0x0801a96d
 801a9b4:	0801ab43 	.word	0x0801ab43
 801a9b8:	0801ab1b 	.word	0x0801ab1b
 801a9bc:	0801a96d 	.word	0x0801a96d
 801a9c0:	0801a96d 	.word	0x0801a96d
 801a9c4:	0801aaf1 	.word	0x0801aaf1
 801a9c8:	0801a96d 	.word	0x0801a96d
 801a9cc:	0801a96d 	.word	0x0801a96d
 801a9d0:	0801a96d 	.word	0x0801a96d
 801a9d4:	0801a96d 	.word	0x0801a96d
 801a9d8:	0801aaa9 	.word	0x0801aaa9
 801a9dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a9e0:	e7db      	b.n	801a99a <_scanf_float+0x8e>
 801a9e2:	290e      	cmp	r1, #14
 801a9e4:	d8c2      	bhi.n	801a96c <_scanf_float+0x60>
 801a9e6:	a001      	add	r0, pc, #4	; (adr r0, 801a9ec <_scanf_float+0xe0>)
 801a9e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a9ec:	0801aa9b 	.word	0x0801aa9b
 801a9f0:	0801a96d 	.word	0x0801a96d
 801a9f4:	0801aa9b 	.word	0x0801aa9b
 801a9f8:	0801ab2f 	.word	0x0801ab2f
 801a9fc:	0801a96d 	.word	0x0801a96d
 801aa00:	0801aa49 	.word	0x0801aa49
 801aa04:	0801aa85 	.word	0x0801aa85
 801aa08:	0801aa85 	.word	0x0801aa85
 801aa0c:	0801aa85 	.word	0x0801aa85
 801aa10:	0801aa85 	.word	0x0801aa85
 801aa14:	0801aa85 	.word	0x0801aa85
 801aa18:	0801aa85 	.word	0x0801aa85
 801aa1c:	0801aa85 	.word	0x0801aa85
 801aa20:	0801aa85 	.word	0x0801aa85
 801aa24:	0801aa85 	.word	0x0801aa85
 801aa28:	2b6e      	cmp	r3, #110	; 0x6e
 801aa2a:	d809      	bhi.n	801aa40 <_scanf_float+0x134>
 801aa2c:	2b60      	cmp	r3, #96	; 0x60
 801aa2e:	d8b2      	bhi.n	801a996 <_scanf_float+0x8a>
 801aa30:	2b54      	cmp	r3, #84	; 0x54
 801aa32:	d077      	beq.n	801ab24 <_scanf_float+0x218>
 801aa34:	2b59      	cmp	r3, #89	; 0x59
 801aa36:	d199      	bne.n	801a96c <_scanf_float+0x60>
 801aa38:	2d07      	cmp	r5, #7
 801aa3a:	d197      	bne.n	801a96c <_scanf_float+0x60>
 801aa3c:	2508      	movs	r5, #8
 801aa3e:	e029      	b.n	801aa94 <_scanf_float+0x188>
 801aa40:	2b74      	cmp	r3, #116	; 0x74
 801aa42:	d06f      	beq.n	801ab24 <_scanf_float+0x218>
 801aa44:	2b79      	cmp	r3, #121	; 0x79
 801aa46:	e7f6      	b.n	801aa36 <_scanf_float+0x12a>
 801aa48:	6821      	ldr	r1, [r4, #0]
 801aa4a:	05c8      	lsls	r0, r1, #23
 801aa4c:	d51a      	bpl.n	801aa84 <_scanf_float+0x178>
 801aa4e:	9b02      	ldr	r3, [sp, #8]
 801aa50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801aa54:	6021      	str	r1, [r4, #0]
 801aa56:	f109 0901 	add.w	r9, r9, #1
 801aa5a:	b11b      	cbz	r3, 801aa64 <_scanf_float+0x158>
 801aa5c:	3b01      	subs	r3, #1
 801aa5e:	3201      	adds	r2, #1
 801aa60:	9302      	str	r3, [sp, #8]
 801aa62:	60a2      	str	r2, [r4, #8]
 801aa64:	68a3      	ldr	r3, [r4, #8]
 801aa66:	3b01      	subs	r3, #1
 801aa68:	60a3      	str	r3, [r4, #8]
 801aa6a:	6923      	ldr	r3, [r4, #16]
 801aa6c:	3301      	adds	r3, #1
 801aa6e:	6123      	str	r3, [r4, #16]
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	3b01      	subs	r3, #1
 801aa74:	2b00      	cmp	r3, #0
 801aa76:	607b      	str	r3, [r7, #4]
 801aa78:	f340 8084 	ble.w	801ab84 <_scanf_float+0x278>
 801aa7c:	683b      	ldr	r3, [r7, #0]
 801aa7e:	3301      	adds	r3, #1
 801aa80:	603b      	str	r3, [r7, #0]
 801aa82:	e766      	b.n	801a952 <_scanf_float+0x46>
 801aa84:	eb1a 0f05 	cmn.w	sl, r5
 801aa88:	f47f af70 	bne.w	801a96c <_scanf_float+0x60>
 801aa8c:	6822      	ldr	r2, [r4, #0]
 801aa8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801aa92:	6022      	str	r2, [r4, #0]
 801aa94:	f806 3b01 	strb.w	r3, [r6], #1
 801aa98:	e7e4      	b.n	801aa64 <_scanf_float+0x158>
 801aa9a:	6822      	ldr	r2, [r4, #0]
 801aa9c:	0610      	lsls	r0, r2, #24
 801aa9e:	f57f af65 	bpl.w	801a96c <_scanf_float+0x60>
 801aaa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801aaa6:	e7f4      	b.n	801aa92 <_scanf_float+0x186>
 801aaa8:	f1ba 0f00 	cmp.w	sl, #0
 801aaac:	d10e      	bne.n	801aacc <_scanf_float+0x1c0>
 801aaae:	f1b9 0f00 	cmp.w	r9, #0
 801aab2:	d10e      	bne.n	801aad2 <_scanf_float+0x1c6>
 801aab4:	6822      	ldr	r2, [r4, #0]
 801aab6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801aaba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801aabe:	d108      	bne.n	801aad2 <_scanf_float+0x1c6>
 801aac0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801aac4:	6022      	str	r2, [r4, #0]
 801aac6:	f04f 0a01 	mov.w	sl, #1
 801aaca:	e7e3      	b.n	801aa94 <_scanf_float+0x188>
 801aacc:	f1ba 0f02 	cmp.w	sl, #2
 801aad0:	d055      	beq.n	801ab7e <_scanf_float+0x272>
 801aad2:	2d01      	cmp	r5, #1
 801aad4:	d002      	beq.n	801aadc <_scanf_float+0x1d0>
 801aad6:	2d04      	cmp	r5, #4
 801aad8:	f47f af48 	bne.w	801a96c <_scanf_float+0x60>
 801aadc:	3501      	adds	r5, #1
 801aade:	b2ed      	uxtb	r5, r5
 801aae0:	e7d8      	b.n	801aa94 <_scanf_float+0x188>
 801aae2:	f1ba 0f01 	cmp.w	sl, #1
 801aae6:	f47f af41 	bne.w	801a96c <_scanf_float+0x60>
 801aaea:	f04f 0a02 	mov.w	sl, #2
 801aaee:	e7d1      	b.n	801aa94 <_scanf_float+0x188>
 801aaf0:	b97d      	cbnz	r5, 801ab12 <_scanf_float+0x206>
 801aaf2:	f1b9 0f00 	cmp.w	r9, #0
 801aaf6:	f47f af3c 	bne.w	801a972 <_scanf_float+0x66>
 801aafa:	6822      	ldr	r2, [r4, #0]
 801aafc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ab00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ab04:	f47f af39 	bne.w	801a97a <_scanf_float+0x6e>
 801ab08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ab0c:	6022      	str	r2, [r4, #0]
 801ab0e:	2501      	movs	r5, #1
 801ab10:	e7c0      	b.n	801aa94 <_scanf_float+0x188>
 801ab12:	2d03      	cmp	r5, #3
 801ab14:	d0e2      	beq.n	801aadc <_scanf_float+0x1d0>
 801ab16:	2d05      	cmp	r5, #5
 801ab18:	e7de      	b.n	801aad8 <_scanf_float+0x1cc>
 801ab1a:	2d02      	cmp	r5, #2
 801ab1c:	f47f af26 	bne.w	801a96c <_scanf_float+0x60>
 801ab20:	2503      	movs	r5, #3
 801ab22:	e7b7      	b.n	801aa94 <_scanf_float+0x188>
 801ab24:	2d06      	cmp	r5, #6
 801ab26:	f47f af21 	bne.w	801a96c <_scanf_float+0x60>
 801ab2a:	2507      	movs	r5, #7
 801ab2c:	e7b2      	b.n	801aa94 <_scanf_float+0x188>
 801ab2e:	6822      	ldr	r2, [r4, #0]
 801ab30:	0591      	lsls	r1, r2, #22
 801ab32:	f57f af1b 	bpl.w	801a96c <_scanf_float+0x60>
 801ab36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801ab3a:	6022      	str	r2, [r4, #0]
 801ab3c:	f8cd 9004 	str.w	r9, [sp, #4]
 801ab40:	e7a8      	b.n	801aa94 <_scanf_float+0x188>
 801ab42:	6822      	ldr	r2, [r4, #0]
 801ab44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801ab48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801ab4c:	d006      	beq.n	801ab5c <_scanf_float+0x250>
 801ab4e:	0550      	lsls	r0, r2, #21
 801ab50:	f57f af0c 	bpl.w	801a96c <_scanf_float+0x60>
 801ab54:	f1b9 0f00 	cmp.w	r9, #0
 801ab58:	f43f af0f 	beq.w	801a97a <_scanf_float+0x6e>
 801ab5c:	0591      	lsls	r1, r2, #22
 801ab5e:	bf58      	it	pl
 801ab60:	9901      	ldrpl	r1, [sp, #4]
 801ab62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ab66:	bf58      	it	pl
 801ab68:	eba9 0101 	subpl.w	r1, r9, r1
 801ab6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801ab70:	bf58      	it	pl
 801ab72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801ab76:	6022      	str	r2, [r4, #0]
 801ab78:	f04f 0900 	mov.w	r9, #0
 801ab7c:	e78a      	b.n	801aa94 <_scanf_float+0x188>
 801ab7e:	f04f 0a03 	mov.w	sl, #3
 801ab82:	e787      	b.n	801aa94 <_scanf_float+0x188>
 801ab84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801ab88:	4639      	mov	r1, r7
 801ab8a:	4640      	mov	r0, r8
 801ab8c:	4798      	blx	r3
 801ab8e:	2800      	cmp	r0, #0
 801ab90:	f43f aedf 	beq.w	801a952 <_scanf_float+0x46>
 801ab94:	e6ea      	b.n	801a96c <_scanf_float+0x60>
 801ab96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ab9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ab9e:	463a      	mov	r2, r7
 801aba0:	4640      	mov	r0, r8
 801aba2:	4798      	blx	r3
 801aba4:	6923      	ldr	r3, [r4, #16]
 801aba6:	3b01      	subs	r3, #1
 801aba8:	6123      	str	r3, [r4, #16]
 801abaa:	e6ec      	b.n	801a986 <_scanf_float+0x7a>
 801abac:	1e6b      	subs	r3, r5, #1
 801abae:	2b06      	cmp	r3, #6
 801abb0:	d825      	bhi.n	801abfe <_scanf_float+0x2f2>
 801abb2:	2d02      	cmp	r5, #2
 801abb4:	d836      	bhi.n	801ac24 <_scanf_float+0x318>
 801abb6:	455e      	cmp	r6, fp
 801abb8:	f67f aee8 	bls.w	801a98c <_scanf_float+0x80>
 801abbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abc0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801abc4:	463a      	mov	r2, r7
 801abc6:	4640      	mov	r0, r8
 801abc8:	4798      	blx	r3
 801abca:	6923      	ldr	r3, [r4, #16]
 801abcc:	3b01      	subs	r3, #1
 801abce:	6123      	str	r3, [r4, #16]
 801abd0:	e7f1      	b.n	801abb6 <_scanf_float+0x2aa>
 801abd2:	9802      	ldr	r0, [sp, #8]
 801abd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801abd8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801abdc:	9002      	str	r0, [sp, #8]
 801abde:	463a      	mov	r2, r7
 801abe0:	4640      	mov	r0, r8
 801abe2:	4798      	blx	r3
 801abe4:	6923      	ldr	r3, [r4, #16]
 801abe6:	3b01      	subs	r3, #1
 801abe8:	6123      	str	r3, [r4, #16]
 801abea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801abee:	fa5f fa8a 	uxtb.w	sl, sl
 801abf2:	f1ba 0f02 	cmp.w	sl, #2
 801abf6:	d1ec      	bne.n	801abd2 <_scanf_float+0x2c6>
 801abf8:	3d03      	subs	r5, #3
 801abfa:	b2ed      	uxtb	r5, r5
 801abfc:	1b76      	subs	r6, r6, r5
 801abfe:	6823      	ldr	r3, [r4, #0]
 801ac00:	05da      	lsls	r2, r3, #23
 801ac02:	d52f      	bpl.n	801ac64 <_scanf_float+0x358>
 801ac04:	055b      	lsls	r3, r3, #21
 801ac06:	d510      	bpl.n	801ac2a <_scanf_float+0x31e>
 801ac08:	455e      	cmp	r6, fp
 801ac0a:	f67f aebf 	bls.w	801a98c <_scanf_float+0x80>
 801ac0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ac12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ac16:	463a      	mov	r2, r7
 801ac18:	4640      	mov	r0, r8
 801ac1a:	4798      	blx	r3
 801ac1c:	6923      	ldr	r3, [r4, #16]
 801ac1e:	3b01      	subs	r3, #1
 801ac20:	6123      	str	r3, [r4, #16]
 801ac22:	e7f1      	b.n	801ac08 <_scanf_float+0x2fc>
 801ac24:	46aa      	mov	sl, r5
 801ac26:	9602      	str	r6, [sp, #8]
 801ac28:	e7df      	b.n	801abea <_scanf_float+0x2de>
 801ac2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ac2e:	6923      	ldr	r3, [r4, #16]
 801ac30:	2965      	cmp	r1, #101	; 0x65
 801ac32:	f103 33ff 	add.w	r3, r3, #4294967295
 801ac36:	f106 35ff 	add.w	r5, r6, #4294967295
 801ac3a:	6123      	str	r3, [r4, #16]
 801ac3c:	d00c      	beq.n	801ac58 <_scanf_float+0x34c>
 801ac3e:	2945      	cmp	r1, #69	; 0x45
 801ac40:	d00a      	beq.n	801ac58 <_scanf_float+0x34c>
 801ac42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ac46:	463a      	mov	r2, r7
 801ac48:	4640      	mov	r0, r8
 801ac4a:	4798      	blx	r3
 801ac4c:	6923      	ldr	r3, [r4, #16]
 801ac4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801ac52:	3b01      	subs	r3, #1
 801ac54:	1eb5      	subs	r5, r6, #2
 801ac56:	6123      	str	r3, [r4, #16]
 801ac58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801ac5c:	463a      	mov	r2, r7
 801ac5e:	4640      	mov	r0, r8
 801ac60:	4798      	blx	r3
 801ac62:	462e      	mov	r6, r5
 801ac64:	6825      	ldr	r5, [r4, #0]
 801ac66:	f015 0510 	ands.w	r5, r5, #16
 801ac6a:	d159      	bne.n	801ad20 <_scanf_float+0x414>
 801ac6c:	7035      	strb	r5, [r6, #0]
 801ac6e:	6823      	ldr	r3, [r4, #0]
 801ac70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ac74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac78:	d11b      	bne.n	801acb2 <_scanf_float+0x3a6>
 801ac7a:	9b01      	ldr	r3, [sp, #4]
 801ac7c:	454b      	cmp	r3, r9
 801ac7e:	eba3 0209 	sub.w	r2, r3, r9
 801ac82:	d123      	bne.n	801accc <_scanf_float+0x3c0>
 801ac84:	2200      	movs	r2, #0
 801ac86:	4659      	mov	r1, fp
 801ac88:	4640      	mov	r0, r8
 801ac8a:	f000 fe97 	bl	801b9bc <_strtod_r>
 801ac8e:	6822      	ldr	r2, [r4, #0]
 801ac90:	9b03      	ldr	r3, [sp, #12]
 801ac92:	f012 0f02 	tst.w	r2, #2
 801ac96:	ec57 6b10 	vmov	r6, r7, d0
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	d021      	beq.n	801ace2 <_scanf_float+0x3d6>
 801ac9e:	9903      	ldr	r1, [sp, #12]
 801aca0:	1d1a      	adds	r2, r3, #4
 801aca2:	600a      	str	r2, [r1, #0]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	e9c3 6700 	strd	r6, r7, [r3]
 801acaa:	68e3      	ldr	r3, [r4, #12]
 801acac:	3301      	adds	r3, #1
 801acae:	60e3      	str	r3, [r4, #12]
 801acb0:	e66d      	b.n	801a98e <_scanf_float+0x82>
 801acb2:	9b04      	ldr	r3, [sp, #16]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d0e5      	beq.n	801ac84 <_scanf_float+0x378>
 801acb8:	9905      	ldr	r1, [sp, #20]
 801acba:	230a      	movs	r3, #10
 801acbc:	462a      	mov	r2, r5
 801acbe:	3101      	adds	r1, #1
 801acc0:	4640      	mov	r0, r8
 801acc2:	f000 ff03 	bl	801bacc <_strtol_r>
 801acc6:	9b04      	ldr	r3, [sp, #16]
 801acc8:	9e05      	ldr	r6, [sp, #20]
 801acca:	1ac2      	subs	r2, r0, r3
 801accc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801acd0:	429e      	cmp	r6, r3
 801acd2:	bf28      	it	cs
 801acd4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801acd8:	4912      	ldr	r1, [pc, #72]	; (801ad24 <_scanf_float+0x418>)
 801acda:	4630      	mov	r0, r6
 801acdc:	f000 f82c 	bl	801ad38 <siprintf>
 801ace0:	e7d0      	b.n	801ac84 <_scanf_float+0x378>
 801ace2:	9903      	ldr	r1, [sp, #12]
 801ace4:	f012 0f04 	tst.w	r2, #4
 801ace8:	f103 0204 	add.w	r2, r3, #4
 801acec:	600a      	str	r2, [r1, #0]
 801acee:	d1d9      	bne.n	801aca4 <_scanf_float+0x398>
 801acf0:	f8d3 8000 	ldr.w	r8, [r3]
 801acf4:	ee10 2a10 	vmov	r2, s0
 801acf8:	ee10 0a10 	vmov	r0, s0
 801acfc:	463b      	mov	r3, r7
 801acfe:	4639      	mov	r1, r7
 801ad00:	f7fe fed4 	bl	8019aac <__aeabi_dcmpun>
 801ad04:	b128      	cbz	r0, 801ad12 <_scanf_float+0x406>
 801ad06:	4808      	ldr	r0, [pc, #32]	; (801ad28 <_scanf_float+0x41c>)
 801ad08:	f000 f810 	bl	801ad2c <nanf>
 801ad0c:	ed88 0a00 	vstr	s0, [r8]
 801ad10:	e7cb      	b.n	801acaa <_scanf_float+0x39e>
 801ad12:	4630      	mov	r0, r6
 801ad14:	4639      	mov	r1, r7
 801ad16:	f7fe ff27 	bl	8019b68 <__aeabi_d2f>
 801ad1a:	f8c8 0000 	str.w	r0, [r8]
 801ad1e:	e7c4      	b.n	801acaa <_scanf_float+0x39e>
 801ad20:	2500      	movs	r5, #0
 801ad22:	e634      	b.n	801a98e <_scanf_float+0x82>
 801ad24:	08052974 	.word	0x08052974
 801ad28:	08052d80 	.word	0x08052d80

0801ad2c <nanf>:
 801ad2c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ad34 <nanf+0x8>
 801ad30:	4770      	bx	lr
 801ad32:	bf00      	nop
 801ad34:	7fc00000 	.word	0x7fc00000

0801ad38 <siprintf>:
 801ad38:	b40e      	push	{r1, r2, r3}
 801ad3a:	b500      	push	{lr}
 801ad3c:	b09c      	sub	sp, #112	; 0x70
 801ad3e:	ab1d      	add	r3, sp, #116	; 0x74
 801ad40:	9002      	str	r0, [sp, #8]
 801ad42:	9006      	str	r0, [sp, #24]
 801ad44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ad48:	4809      	ldr	r0, [pc, #36]	; (801ad70 <siprintf+0x38>)
 801ad4a:	9107      	str	r1, [sp, #28]
 801ad4c:	9104      	str	r1, [sp, #16]
 801ad4e:	4909      	ldr	r1, [pc, #36]	; (801ad74 <siprintf+0x3c>)
 801ad50:	f853 2b04 	ldr.w	r2, [r3], #4
 801ad54:	9105      	str	r1, [sp, #20]
 801ad56:	6800      	ldr	r0, [r0, #0]
 801ad58:	9301      	str	r3, [sp, #4]
 801ad5a:	a902      	add	r1, sp, #8
 801ad5c:	f002 feee 	bl	801db3c <_svfiprintf_r>
 801ad60:	9b02      	ldr	r3, [sp, #8]
 801ad62:	2200      	movs	r2, #0
 801ad64:	701a      	strb	r2, [r3, #0]
 801ad66:	b01c      	add	sp, #112	; 0x70
 801ad68:	f85d eb04 	ldr.w	lr, [sp], #4
 801ad6c:	b003      	add	sp, #12
 801ad6e:	4770      	bx	lr
 801ad70:	20000064 	.word	0x20000064
 801ad74:	ffff0208 	.word	0xffff0208

0801ad78 <sulp>:
 801ad78:	b570      	push	{r4, r5, r6, lr}
 801ad7a:	4604      	mov	r4, r0
 801ad7c:	460d      	mov	r5, r1
 801ad7e:	ec45 4b10 	vmov	d0, r4, r5
 801ad82:	4616      	mov	r6, r2
 801ad84:	f002 fc38 	bl	801d5f8 <__ulp>
 801ad88:	ec51 0b10 	vmov	r0, r1, d0
 801ad8c:	b17e      	cbz	r6, 801adae <sulp+0x36>
 801ad8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801ad92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	dd09      	ble.n	801adae <sulp+0x36>
 801ad9a:	051b      	lsls	r3, r3, #20
 801ad9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801ada0:	2400      	movs	r4, #0
 801ada2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801ada6:	4622      	mov	r2, r4
 801ada8:	462b      	mov	r3, r5
 801adaa:	f7fe fbe5 	bl	8019578 <__aeabi_dmul>
 801adae:	bd70      	pop	{r4, r5, r6, pc}

0801adb0 <_strtod_l>:
 801adb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801adb4:	ed2d 8b02 	vpush	{d8}
 801adb8:	b09d      	sub	sp, #116	; 0x74
 801adba:	461f      	mov	r7, r3
 801adbc:	2300      	movs	r3, #0
 801adbe:	9318      	str	r3, [sp, #96]	; 0x60
 801adc0:	4ba2      	ldr	r3, [pc, #648]	; (801b04c <_strtod_l+0x29c>)
 801adc2:	9213      	str	r2, [sp, #76]	; 0x4c
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	9305      	str	r3, [sp, #20]
 801adc8:	4604      	mov	r4, r0
 801adca:	4618      	mov	r0, r3
 801adcc:	4688      	mov	r8, r1
 801adce:	f7fe f9bd 	bl	801914c <strlen>
 801add2:	f04f 0a00 	mov.w	sl, #0
 801add6:	4605      	mov	r5, r0
 801add8:	f04f 0b00 	mov.w	fp, #0
 801addc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ade0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ade2:	781a      	ldrb	r2, [r3, #0]
 801ade4:	2a2b      	cmp	r2, #43	; 0x2b
 801ade6:	d04e      	beq.n	801ae86 <_strtod_l+0xd6>
 801ade8:	d83b      	bhi.n	801ae62 <_strtod_l+0xb2>
 801adea:	2a0d      	cmp	r2, #13
 801adec:	d834      	bhi.n	801ae58 <_strtod_l+0xa8>
 801adee:	2a08      	cmp	r2, #8
 801adf0:	d834      	bhi.n	801ae5c <_strtod_l+0xac>
 801adf2:	2a00      	cmp	r2, #0
 801adf4:	d03e      	beq.n	801ae74 <_strtod_l+0xc4>
 801adf6:	2300      	movs	r3, #0
 801adf8:	930a      	str	r3, [sp, #40]	; 0x28
 801adfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801adfc:	7833      	ldrb	r3, [r6, #0]
 801adfe:	2b30      	cmp	r3, #48	; 0x30
 801ae00:	f040 80b0 	bne.w	801af64 <_strtod_l+0x1b4>
 801ae04:	7873      	ldrb	r3, [r6, #1]
 801ae06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801ae0a:	2b58      	cmp	r3, #88	; 0x58
 801ae0c:	d168      	bne.n	801aee0 <_strtod_l+0x130>
 801ae0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae10:	9301      	str	r3, [sp, #4]
 801ae12:	ab18      	add	r3, sp, #96	; 0x60
 801ae14:	9702      	str	r7, [sp, #8]
 801ae16:	9300      	str	r3, [sp, #0]
 801ae18:	4a8d      	ldr	r2, [pc, #564]	; (801b050 <_strtod_l+0x2a0>)
 801ae1a:	ab19      	add	r3, sp, #100	; 0x64
 801ae1c:	a917      	add	r1, sp, #92	; 0x5c
 801ae1e:	4620      	mov	r0, r4
 801ae20:	f001 fd44 	bl	801c8ac <__gethex>
 801ae24:	f010 0707 	ands.w	r7, r0, #7
 801ae28:	4605      	mov	r5, r0
 801ae2a:	d005      	beq.n	801ae38 <_strtod_l+0x88>
 801ae2c:	2f06      	cmp	r7, #6
 801ae2e:	d12c      	bne.n	801ae8a <_strtod_l+0xda>
 801ae30:	3601      	adds	r6, #1
 801ae32:	2300      	movs	r3, #0
 801ae34:	9617      	str	r6, [sp, #92]	; 0x5c
 801ae36:	930a      	str	r3, [sp, #40]	; 0x28
 801ae38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae3a:	2b00      	cmp	r3, #0
 801ae3c:	f040 8590 	bne.w	801b960 <_strtod_l+0xbb0>
 801ae40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae42:	b1eb      	cbz	r3, 801ae80 <_strtod_l+0xd0>
 801ae44:	4652      	mov	r2, sl
 801ae46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ae4a:	ec43 2b10 	vmov	d0, r2, r3
 801ae4e:	b01d      	add	sp, #116	; 0x74
 801ae50:	ecbd 8b02 	vpop	{d8}
 801ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae58:	2a20      	cmp	r2, #32
 801ae5a:	d1cc      	bne.n	801adf6 <_strtod_l+0x46>
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	9317      	str	r3, [sp, #92]	; 0x5c
 801ae60:	e7be      	b.n	801ade0 <_strtod_l+0x30>
 801ae62:	2a2d      	cmp	r2, #45	; 0x2d
 801ae64:	d1c7      	bne.n	801adf6 <_strtod_l+0x46>
 801ae66:	2201      	movs	r2, #1
 801ae68:	920a      	str	r2, [sp, #40]	; 0x28
 801ae6a:	1c5a      	adds	r2, r3, #1
 801ae6c:	9217      	str	r2, [sp, #92]	; 0x5c
 801ae6e:	785b      	ldrb	r3, [r3, #1]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d1c2      	bne.n	801adfa <_strtod_l+0x4a>
 801ae74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ae76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	f040 856e 	bne.w	801b95c <_strtod_l+0xbac>
 801ae80:	4652      	mov	r2, sl
 801ae82:	465b      	mov	r3, fp
 801ae84:	e7e1      	b.n	801ae4a <_strtod_l+0x9a>
 801ae86:	2200      	movs	r2, #0
 801ae88:	e7ee      	b.n	801ae68 <_strtod_l+0xb8>
 801ae8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ae8c:	b13a      	cbz	r2, 801ae9e <_strtod_l+0xee>
 801ae8e:	2135      	movs	r1, #53	; 0x35
 801ae90:	a81a      	add	r0, sp, #104	; 0x68
 801ae92:	f002 fcbc 	bl	801d80e <__copybits>
 801ae96:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae98:	4620      	mov	r0, r4
 801ae9a:	f002 f87b 	bl	801cf94 <_Bfree>
 801ae9e:	3f01      	subs	r7, #1
 801aea0:	2f04      	cmp	r7, #4
 801aea2:	d806      	bhi.n	801aeb2 <_strtod_l+0x102>
 801aea4:	e8df f007 	tbb	[pc, r7]
 801aea8:	1714030a 	.word	0x1714030a
 801aeac:	0a          	.byte	0x0a
 801aead:	00          	.byte	0x00
 801aeae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801aeb2:	0728      	lsls	r0, r5, #28
 801aeb4:	d5c0      	bpl.n	801ae38 <_strtod_l+0x88>
 801aeb6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801aeba:	e7bd      	b.n	801ae38 <_strtod_l+0x88>
 801aebc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801aec0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801aec2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801aec6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801aeca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801aece:	e7f0      	b.n	801aeb2 <_strtod_l+0x102>
 801aed0:	f8df b180 	ldr.w	fp, [pc, #384]	; 801b054 <_strtod_l+0x2a4>
 801aed4:	e7ed      	b.n	801aeb2 <_strtod_l+0x102>
 801aed6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801aeda:	f04f 3aff 	mov.w	sl, #4294967295
 801aede:	e7e8      	b.n	801aeb2 <_strtod_l+0x102>
 801aee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aee2:	1c5a      	adds	r2, r3, #1
 801aee4:	9217      	str	r2, [sp, #92]	; 0x5c
 801aee6:	785b      	ldrb	r3, [r3, #1]
 801aee8:	2b30      	cmp	r3, #48	; 0x30
 801aeea:	d0f9      	beq.n	801aee0 <_strtod_l+0x130>
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d0a3      	beq.n	801ae38 <_strtod_l+0x88>
 801aef0:	2301      	movs	r3, #1
 801aef2:	f04f 0900 	mov.w	r9, #0
 801aef6:	9304      	str	r3, [sp, #16]
 801aef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aefa:	9308      	str	r3, [sp, #32]
 801aefc:	f8cd 901c 	str.w	r9, [sp, #28]
 801af00:	464f      	mov	r7, r9
 801af02:	220a      	movs	r2, #10
 801af04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801af06:	7806      	ldrb	r6, [r0, #0]
 801af08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801af0c:	b2d9      	uxtb	r1, r3
 801af0e:	2909      	cmp	r1, #9
 801af10:	d92a      	bls.n	801af68 <_strtod_l+0x1b8>
 801af12:	9905      	ldr	r1, [sp, #20]
 801af14:	462a      	mov	r2, r5
 801af16:	f002 ff2b 	bl	801dd70 <strncmp>
 801af1a:	b398      	cbz	r0, 801af84 <_strtod_l+0x1d4>
 801af1c:	2000      	movs	r0, #0
 801af1e:	4632      	mov	r2, r6
 801af20:	463d      	mov	r5, r7
 801af22:	9005      	str	r0, [sp, #20]
 801af24:	4603      	mov	r3, r0
 801af26:	2a65      	cmp	r2, #101	; 0x65
 801af28:	d001      	beq.n	801af2e <_strtod_l+0x17e>
 801af2a:	2a45      	cmp	r2, #69	; 0x45
 801af2c:	d118      	bne.n	801af60 <_strtod_l+0x1b0>
 801af2e:	b91d      	cbnz	r5, 801af38 <_strtod_l+0x188>
 801af30:	9a04      	ldr	r2, [sp, #16]
 801af32:	4302      	orrs	r2, r0
 801af34:	d09e      	beq.n	801ae74 <_strtod_l+0xc4>
 801af36:	2500      	movs	r5, #0
 801af38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801af3c:	f108 0201 	add.w	r2, r8, #1
 801af40:	9217      	str	r2, [sp, #92]	; 0x5c
 801af42:	f898 2001 	ldrb.w	r2, [r8, #1]
 801af46:	2a2b      	cmp	r2, #43	; 0x2b
 801af48:	d075      	beq.n	801b036 <_strtod_l+0x286>
 801af4a:	2a2d      	cmp	r2, #45	; 0x2d
 801af4c:	d07b      	beq.n	801b046 <_strtod_l+0x296>
 801af4e:	f04f 0c00 	mov.w	ip, #0
 801af52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801af56:	2909      	cmp	r1, #9
 801af58:	f240 8082 	bls.w	801b060 <_strtod_l+0x2b0>
 801af5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801af60:	2600      	movs	r6, #0
 801af62:	e09d      	b.n	801b0a0 <_strtod_l+0x2f0>
 801af64:	2300      	movs	r3, #0
 801af66:	e7c4      	b.n	801aef2 <_strtod_l+0x142>
 801af68:	2f08      	cmp	r7, #8
 801af6a:	bfd8      	it	le
 801af6c:	9907      	ldrle	r1, [sp, #28]
 801af6e:	f100 0001 	add.w	r0, r0, #1
 801af72:	bfda      	itte	le
 801af74:	fb02 3301 	mlale	r3, r2, r1, r3
 801af78:	9307      	strle	r3, [sp, #28]
 801af7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801af7e:	3701      	adds	r7, #1
 801af80:	9017      	str	r0, [sp, #92]	; 0x5c
 801af82:	e7bf      	b.n	801af04 <_strtod_l+0x154>
 801af84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801af86:	195a      	adds	r2, r3, r5
 801af88:	9217      	str	r2, [sp, #92]	; 0x5c
 801af8a:	5d5a      	ldrb	r2, [r3, r5]
 801af8c:	2f00      	cmp	r7, #0
 801af8e:	d037      	beq.n	801b000 <_strtod_l+0x250>
 801af90:	9005      	str	r0, [sp, #20]
 801af92:	463d      	mov	r5, r7
 801af94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801af98:	2b09      	cmp	r3, #9
 801af9a:	d912      	bls.n	801afc2 <_strtod_l+0x212>
 801af9c:	2301      	movs	r3, #1
 801af9e:	e7c2      	b.n	801af26 <_strtod_l+0x176>
 801afa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801afa2:	1c5a      	adds	r2, r3, #1
 801afa4:	9217      	str	r2, [sp, #92]	; 0x5c
 801afa6:	785a      	ldrb	r2, [r3, #1]
 801afa8:	3001      	adds	r0, #1
 801afaa:	2a30      	cmp	r2, #48	; 0x30
 801afac:	d0f8      	beq.n	801afa0 <_strtod_l+0x1f0>
 801afae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801afb2:	2b08      	cmp	r3, #8
 801afb4:	f200 84d9 	bhi.w	801b96a <_strtod_l+0xbba>
 801afb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801afba:	9005      	str	r0, [sp, #20]
 801afbc:	2000      	movs	r0, #0
 801afbe:	9308      	str	r3, [sp, #32]
 801afc0:	4605      	mov	r5, r0
 801afc2:	3a30      	subs	r2, #48	; 0x30
 801afc4:	f100 0301 	add.w	r3, r0, #1
 801afc8:	d014      	beq.n	801aff4 <_strtod_l+0x244>
 801afca:	9905      	ldr	r1, [sp, #20]
 801afcc:	4419      	add	r1, r3
 801afce:	9105      	str	r1, [sp, #20]
 801afd0:	462b      	mov	r3, r5
 801afd2:	eb00 0e05 	add.w	lr, r0, r5
 801afd6:	210a      	movs	r1, #10
 801afd8:	4573      	cmp	r3, lr
 801afda:	d113      	bne.n	801b004 <_strtod_l+0x254>
 801afdc:	182b      	adds	r3, r5, r0
 801afde:	2b08      	cmp	r3, #8
 801afe0:	f105 0501 	add.w	r5, r5, #1
 801afe4:	4405      	add	r5, r0
 801afe6:	dc1c      	bgt.n	801b022 <_strtod_l+0x272>
 801afe8:	9907      	ldr	r1, [sp, #28]
 801afea:	230a      	movs	r3, #10
 801afec:	fb03 2301 	mla	r3, r3, r1, r2
 801aff0:	9307      	str	r3, [sp, #28]
 801aff2:	2300      	movs	r3, #0
 801aff4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aff6:	1c51      	adds	r1, r2, #1
 801aff8:	9117      	str	r1, [sp, #92]	; 0x5c
 801affa:	7852      	ldrb	r2, [r2, #1]
 801affc:	4618      	mov	r0, r3
 801affe:	e7c9      	b.n	801af94 <_strtod_l+0x1e4>
 801b000:	4638      	mov	r0, r7
 801b002:	e7d2      	b.n	801afaa <_strtod_l+0x1fa>
 801b004:	2b08      	cmp	r3, #8
 801b006:	dc04      	bgt.n	801b012 <_strtod_l+0x262>
 801b008:	9e07      	ldr	r6, [sp, #28]
 801b00a:	434e      	muls	r6, r1
 801b00c:	9607      	str	r6, [sp, #28]
 801b00e:	3301      	adds	r3, #1
 801b010:	e7e2      	b.n	801afd8 <_strtod_l+0x228>
 801b012:	f103 0c01 	add.w	ip, r3, #1
 801b016:	f1bc 0f10 	cmp.w	ip, #16
 801b01a:	bfd8      	it	le
 801b01c:	fb01 f909 	mulle.w	r9, r1, r9
 801b020:	e7f5      	b.n	801b00e <_strtod_l+0x25e>
 801b022:	2d10      	cmp	r5, #16
 801b024:	bfdc      	itt	le
 801b026:	230a      	movle	r3, #10
 801b028:	fb03 2909 	mlale	r9, r3, r9, r2
 801b02c:	e7e1      	b.n	801aff2 <_strtod_l+0x242>
 801b02e:	2300      	movs	r3, #0
 801b030:	9305      	str	r3, [sp, #20]
 801b032:	2301      	movs	r3, #1
 801b034:	e77c      	b.n	801af30 <_strtod_l+0x180>
 801b036:	f04f 0c00 	mov.w	ip, #0
 801b03a:	f108 0202 	add.w	r2, r8, #2
 801b03e:	9217      	str	r2, [sp, #92]	; 0x5c
 801b040:	f898 2002 	ldrb.w	r2, [r8, #2]
 801b044:	e785      	b.n	801af52 <_strtod_l+0x1a2>
 801b046:	f04f 0c01 	mov.w	ip, #1
 801b04a:	e7f6      	b.n	801b03a <_strtod_l+0x28a>
 801b04c:	08052bc8 	.word	0x08052bc8
 801b050:	0805297c 	.word	0x0805297c
 801b054:	7ff00000 	.word	0x7ff00000
 801b058:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b05a:	1c51      	adds	r1, r2, #1
 801b05c:	9117      	str	r1, [sp, #92]	; 0x5c
 801b05e:	7852      	ldrb	r2, [r2, #1]
 801b060:	2a30      	cmp	r2, #48	; 0x30
 801b062:	d0f9      	beq.n	801b058 <_strtod_l+0x2a8>
 801b064:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801b068:	2908      	cmp	r1, #8
 801b06a:	f63f af79 	bhi.w	801af60 <_strtod_l+0x1b0>
 801b06e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801b072:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b074:	9206      	str	r2, [sp, #24]
 801b076:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b078:	1c51      	adds	r1, r2, #1
 801b07a:	9117      	str	r1, [sp, #92]	; 0x5c
 801b07c:	7852      	ldrb	r2, [r2, #1]
 801b07e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801b082:	2e09      	cmp	r6, #9
 801b084:	d937      	bls.n	801b0f6 <_strtod_l+0x346>
 801b086:	9e06      	ldr	r6, [sp, #24]
 801b088:	1b89      	subs	r1, r1, r6
 801b08a:	2908      	cmp	r1, #8
 801b08c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801b090:	dc02      	bgt.n	801b098 <_strtod_l+0x2e8>
 801b092:	4576      	cmp	r6, lr
 801b094:	bfa8      	it	ge
 801b096:	4676      	movge	r6, lr
 801b098:	f1bc 0f00 	cmp.w	ip, #0
 801b09c:	d000      	beq.n	801b0a0 <_strtod_l+0x2f0>
 801b09e:	4276      	negs	r6, r6
 801b0a0:	2d00      	cmp	r5, #0
 801b0a2:	d14d      	bne.n	801b140 <_strtod_l+0x390>
 801b0a4:	9904      	ldr	r1, [sp, #16]
 801b0a6:	4301      	orrs	r1, r0
 801b0a8:	f47f aec6 	bne.w	801ae38 <_strtod_l+0x88>
 801b0ac:	2b00      	cmp	r3, #0
 801b0ae:	f47f aee1 	bne.w	801ae74 <_strtod_l+0xc4>
 801b0b2:	2a69      	cmp	r2, #105	; 0x69
 801b0b4:	d027      	beq.n	801b106 <_strtod_l+0x356>
 801b0b6:	dc24      	bgt.n	801b102 <_strtod_l+0x352>
 801b0b8:	2a49      	cmp	r2, #73	; 0x49
 801b0ba:	d024      	beq.n	801b106 <_strtod_l+0x356>
 801b0bc:	2a4e      	cmp	r2, #78	; 0x4e
 801b0be:	f47f aed9 	bne.w	801ae74 <_strtod_l+0xc4>
 801b0c2:	499f      	ldr	r1, [pc, #636]	; (801b340 <_strtod_l+0x590>)
 801b0c4:	a817      	add	r0, sp, #92	; 0x5c
 801b0c6:	f001 fe49 	bl	801cd5c <__match>
 801b0ca:	2800      	cmp	r0, #0
 801b0cc:	f43f aed2 	beq.w	801ae74 <_strtod_l+0xc4>
 801b0d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b0d2:	781b      	ldrb	r3, [r3, #0]
 801b0d4:	2b28      	cmp	r3, #40	; 0x28
 801b0d6:	d12d      	bne.n	801b134 <_strtod_l+0x384>
 801b0d8:	499a      	ldr	r1, [pc, #616]	; (801b344 <_strtod_l+0x594>)
 801b0da:	aa1a      	add	r2, sp, #104	; 0x68
 801b0dc:	a817      	add	r0, sp, #92	; 0x5c
 801b0de:	f001 fe51 	bl	801cd84 <__hexnan>
 801b0e2:	2805      	cmp	r0, #5
 801b0e4:	d126      	bne.n	801b134 <_strtod_l+0x384>
 801b0e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b0e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801b0ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801b0f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801b0f4:	e6a0      	b.n	801ae38 <_strtod_l+0x88>
 801b0f6:	210a      	movs	r1, #10
 801b0f8:	fb01 2e0e 	mla	lr, r1, lr, r2
 801b0fc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801b100:	e7b9      	b.n	801b076 <_strtod_l+0x2c6>
 801b102:	2a6e      	cmp	r2, #110	; 0x6e
 801b104:	e7db      	b.n	801b0be <_strtod_l+0x30e>
 801b106:	4990      	ldr	r1, [pc, #576]	; (801b348 <_strtod_l+0x598>)
 801b108:	a817      	add	r0, sp, #92	; 0x5c
 801b10a:	f001 fe27 	bl	801cd5c <__match>
 801b10e:	2800      	cmp	r0, #0
 801b110:	f43f aeb0 	beq.w	801ae74 <_strtod_l+0xc4>
 801b114:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b116:	498d      	ldr	r1, [pc, #564]	; (801b34c <_strtod_l+0x59c>)
 801b118:	3b01      	subs	r3, #1
 801b11a:	a817      	add	r0, sp, #92	; 0x5c
 801b11c:	9317      	str	r3, [sp, #92]	; 0x5c
 801b11e:	f001 fe1d 	bl	801cd5c <__match>
 801b122:	b910      	cbnz	r0, 801b12a <_strtod_l+0x37a>
 801b124:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b126:	3301      	adds	r3, #1
 801b128:	9317      	str	r3, [sp, #92]	; 0x5c
 801b12a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801b35c <_strtod_l+0x5ac>
 801b12e:	f04f 0a00 	mov.w	sl, #0
 801b132:	e681      	b.n	801ae38 <_strtod_l+0x88>
 801b134:	4886      	ldr	r0, [pc, #536]	; (801b350 <_strtod_l+0x5a0>)
 801b136:	f002 fe03 	bl	801dd40 <nan>
 801b13a:	ec5b ab10 	vmov	sl, fp, d0
 801b13e:	e67b      	b.n	801ae38 <_strtod_l+0x88>
 801b140:	9b05      	ldr	r3, [sp, #20]
 801b142:	9807      	ldr	r0, [sp, #28]
 801b144:	1af3      	subs	r3, r6, r3
 801b146:	2f00      	cmp	r7, #0
 801b148:	bf08      	it	eq
 801b14a:	462f      	moveq	r7, r5
 801b14c:	2d10      	cmp	r5, #16
 801b14e:	9306      	str	r3, [sp, #24]
 801b150:	46a8      	mov	r8, r5
 801b152:	bfa8      	it	ge
 801b154:	f04f 0810 	movge.w	r8, #16
 801b158:	f7fe f994 	bl	8019484 <__aeabi_ui2d>
 801b15c:	2d09      	cmp	r5, #9
 801b15e:	4682      	mov	sl, r0
 801b160:	468b      	mov	fp, r1
 801b162:	dd13      	ble.n	801b18c <_strtod_l+0x3dc>
 801b164:	4b7b      	ldr	r3, [pc, #492]	; (801b354 <_strtod_l+0x5a4>)
 801b166:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801b16a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801b16e:	f7fe fa03 	bl	8019578 <__aeabi_dmul>
 801b172:	4682      	mov	sl, r0
 801b174:	4648      	mov	r0, r9
 801b176:	468b      	mov	fp, r1
 801b178:	f7fe f984 	bl	8019484 <__aeabi_ui2d>
 801b17c:	4602      	mov	r2, r0
 801b17e:	460b      	mov	r3, r1
 801b180:	4650      	mov	r0, sl
 801b182:	4659      	mov	r1, fp
 801b184:	f7fe f842 	bl	801920c <__adddf3>
 801b188:	4682      	mov	sl, r0
 801b18a:	468b      	mov	fp, r1
 801b18c:	2d0f      	cmp	r5, #15
 801b18e:	dc38      	bgt.n	801b202 <_strtod_l+0x452>
 801b190:	9b06      	ldr	r3, [sp, #24]
 801b192:	2b00      	cmp	r3, #0
 801b194:	f43f ae50 	beq.w	801ae38 <_strtod_l+0x88>
 801b198:	dd24      	ble.n	801b1e4 <_strtod_l+0x434>
 801b19a:	2b16      	cmp	r3, #22
 801b19c:	dc0b      	bgt.n	801b1b6 <_strtod_l+0x406>
 801b19e:	496d      	ldr	r1, [pc, #436]	; (801b354 <_strtod_l+0x5a4>)
 801b1a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1a8:	4652      	mov	r2, sl
 801b1aa:	465b      	mov	r3, fp
 801b1ac:	f7fe f9e4 	bl	8019578 <__aeabi_dmul>
 801b1b0:	4682      	mov	sl, r0
 801b1b2:	468b      	mov	fp, r1
 801b1b4:	e640      	b.n	801ae38 <_strtod_l+0x88>
 801b1b6:	9a06      	ldr	r2, [sp, #24]
 801b1b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801b1bc:	4293      	cmp	r3, r2
 801b1be:	db20      	blt.n	801b202 <_strtod_l+0x452>
 801b1c0:	4c64      	ldr	r4, [pc, #400]	; (801b354 <_strtod_l+0x5a4>)
 801b1c2:	f1c5 050f 	rsb	r5, r5, #15
 801b1c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801b1ca:	4652      	mov	r2, sl
 801b1cc:	465b      	mov	r3, fp
 801b1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1d2:	f7fe f9d1 	bl	8019578 <__aeabi_dmul>
 801b1d6:	9b06      	ldr	r3, [sp, #24]
 801b1d8:	1b5d      	subs	r5, r3, r5
 801b1da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801b1de:	e9d4 2300 	ldrd	r2, r3, [r4]
 801b1e2:	e7e3      	b.n	801b1ac <_strtod_l+0x3fc>
 801b1e4:	9b06      	ldr	r3, [sp, #24]
 801b1e6:	3316      	adds	r3, #22
 801b1e8:	db0b      	blt.n	801b202 <_strtod_l+0x452>
 801b1ea:	9b05      	ldr	r3, [sp, #20]
 801b1ec:	1b9e      	subs	r6, r3, r6
 801b1ee:	4b59      	ldr	r3, [pc, #356]	; (801b354 <_strtod_l+0x5a4>)
 801b1f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801b1f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b1f8:	4650      	mov	r0, sl
 801b1fa:	4659      	mov	r1, fp
 801b1fc:	f7fe fae6 	bl	80197cc <__aeabi_ddiv>
 801b200:	e7d6      	b.n	801b1b0 <_strtod_l+0x400>
 801b202:	9b06      	ldr	r3, [sp, #24]
 801b204:	eba5 0808 	sub.w	r8, r5, r8
 801b208:	4498      	add	r8, r3
 801b20a:	f1b8 0f00 	cmp.w	r8, #0
 801b20e:	dd74      	ble.n	801b2fa <_strtod_l+0x54a>
 801b210:	f018 030f 	ands.w	r3, r8, #15
 801b214:	d00a      	beq.n	801b22c <_strtod_l+0x47c>
 801b216:	494f      	ldr	r1, [pc, #316]	; (801b354 <_strtod_l+0x5a4>)
 801b218:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801b21c:	4652      	mov	r2, sl
 801b21e:	465b      	mov	r3, fp
 801b220:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b224:	f7fe f9a8 	bl	8019578 <__aeabi_dmul>
 801b228:	4682      	mov	sl, r0
 801b22a:	468b      	mov	fp, r1
 801b22c:	f038 080f 	bics.w	r8, r8, #15
 801b230:	d04f      	beq.n	801b2d2 <_strtod_l+0x522>
 801b232:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801b236:	dd22      	ble.n	801b27e <_strtod_l+0x4ce>
 801b238:	2500      	movs	r5, #0
 801b23a:	462e      	mov	r6, r5
 801b23c:	9507      	str	r5, [sp, #28]
 801b23e:	9505      	str	r5, [sp, #20]
 801b240:	2322      	movs	r3, #34	; 0x22
 801b242:	f8df b118 	ldr.w	fp, [pc, #280]	; 801b35c <_strtod_l+0x5ac>
 801b246:	6023      	str	r3, [r4, #0]
 801b248:	f04f 0a00 	mov.w	sl, #0
 801b24c:	9b07      	ldr	r3, [sp, #28]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	f43f adf2 	beq.w	801ae38 <_strtod_l+0x88>
 801b254:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b256:	4620      	mov	r0, r4
 801b258:	f001 fe9c 	bl	801cf94 <_Bfree>
 801b25c:	9905      	ldr	r1, [sp, #20]
 801b25e:	4620      	mov	r0, r4
 801b260:	f001 fe98 	bl	801cf94 <_Bfree>
 801b264:	4631      	mov	r1, r6
 801b266:	4620      	mov	r0, r4
 801b268:	f001 fe94 	bl	801cf94 <_Bfree>
 801b26c:	9907      	ldr	r1, [sp, #28]
 801b26e:	4620      	mov	r0, r4
 801b270:	f001 fe90 	bl	801cf94 <_Bfree>
 801b274:	4629      	mov	r1, r5
 801b276:	4620      	mov	r0, r4
 801b278:	f001 fe8c 	bl	801cf94 <_Bfree>
 801b27c:	e5dc      	b.n	801ae38 <_strtod_l+0x88>
 801b27e:	4b36      	ldr	r3, [pc, #216]	; (801b358 <_strtod_l+0x5a8>)
 801b280:	9304      	str	r3, [sp, #16]
 801b282:	2300      	movs	r3, #0
 801b284:	ea4f 1828 	mov.w	r8, r8, asr #4
 801b288:	4650      	mov	r0, sl
 801b28a:	4659      	mov	r1, fp
 801b28c:	4699      	mov	r9, r3
 801b28e:	f1b8 0f01 	cmp.w	r8, #1
 801b292:	dc21      	bgt.n	801b2d8 <_strtod_l+0x528>
 801b294:	b10b      	cbz	r3, 801b29a <_strtod_l+0x4ea>
 801b296:	4682      	mov	sl, r0
 801b298:	468b      	mov	fp, r1
 801b29a:	4b2f      	ldr	r3, [pc, #188]	; (801b358 <_strtod_l+0x5a8>)
 801b29c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801b2a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801b2a4:	4652      	mov	r2, sl
 801b2a6:	465b      	mov	r3, fp
 801b2a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 801b2ac:	f7fe f964 	bl	8019578 <__aeabi_dmul>
 801b2b0:	4b2a      	ldr	r3, [pc, #168]	; (801b35c <_strtod_l+0x5ac>)
 801b2b2:	460a      	mov	r2, r1
 801b2b4:	400b      	ands	r3, r1
 801b2b6:	492a      	ldr	r1, [pc, #168]	; (801b360 <_strtod_l+0x5b0>)
 801b2b8:	428b      	cmp	r3, r1
 801b2ba:	4682      	mov	sl, r0
 801b2bc:	d8bc      	bhi.n	801b238 <_strtod_l+0x488>
 801b2be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801b2c2:	428b      	cmp	r3, r1
 801b2c4:	bf86      	itte	hi
 801b2c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801b364 <_strtod_l+0x5b4>
 801b2ca:	f04f 3aff 	movhi.w	sl, #4294967295
 801b2ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801b2d2:	2300      	movs	r3, #0
 801b2d4:	9304      	str	r3, [sp, #16]
 801b2d6:	e084      	b.n	801b3e2 <_strtod_l+0x632>
 801b2d8:	f018 0f01 	tst.w	r8, #1
 801b2dc:	d005      	beq.n	801b2ea <_strtod_l+0x53a>
 801b2de:	9b04      	ldr	r3, [sp, #16]
 801b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2e4:	f7fe f948 	bl	8019578 <__aeabi_dmul>
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	9a04      	ldr	r2, [sp, #16]
 801b2ec:	3208      	adds	r2, #8
 801b2ee:	f109 0901 	add.w	r9, r9, #1
 801b2f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b2f6:	9204      	str	r2, [sp, #16]
 801b2f8:	e7c9      	b.n	801b28e <_strtod_l+0x4de>
 801b2fa:	d0ea      	beq.n	801b2d2 <_strtod_l+0x522>
 801b2fc:	f1c8 0800 	rsb	r8, r8, #0
 801b300:	f018 020f 	ands.w	r2, r8, #15
 801b304:	d00a      	beq.n	801b31c <_strtod_l+0x56c>
 801b306:	4b13      	ldr	r3, [pc, #76]	; (801b354 <_strtod_l+0x5a4>)
 801b308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b30c:	4650      	mov	r0, sl
 801b30e:	4659      	mov	r1, fp
 801b310:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b314:	f7fe fa5a 	bl	80197cc <__aeabi_ddiv>
 801b318:	4682      	mov	sl, r0
 801b31a:	468b      	mov	fp, r1
 801b31c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801b320:	d0d7      	beq.n	801b2d2 <_strtod_l+0x522>
 801b322:	f1b8 0f1f 	cmp.w	r8, #31
 801b326:	dd1f      	ble.n	801b368 <_strtod_l+0x5b8>
 801b328:	2500      	movs	r5, #0
 801b32a:	462e      	mov	r6, r5
 801b32c:	9507      	str	r5, [sp, #28]
 801b32e:	9505      	str	r5, [sp, #20]
 801b330:	2322      	movs	r3, #34	; 0x22
 801b332:	f04f 0a00 	mov.w	sl, #0
 801b336:	f04f 0b00 	mov.w	fp, #0
 801b33a:	6023      	str	r3, [r4, #0]
 801b33c:	e786      	b.n	801b24c <_strtod_l+0x49c>
 801b33e:	bf00      	nop
 801b340:	0805294d 	.word	0x0805294d
 801b344:	08052990 	.word	0x08052990
 801b348:	08052945 	.word	0x08052945
 801b34c:	08052ad4 	.word	0x08052ad4
 801b350:	08052d80 	.word	0x08052d80
 801b354:	08052c60 	.word	0x08052c60
 801b358:	08052c38 	.word	0x08052c38
 801b35c:	7ff00000 	.word	0x7ff00000
 801b360:	7ca00000 	.word	0x7ca00000
 801b364:	7fefffff 	.word	0x7fefffff
 801b368:	f018 0310 	ands.w	r3, r8, #16
 801b36c:	bf18      	it	ne
 801b36e:	236a      	movne	r3, #106	; 0x6a
 801b370:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801b720 <_strtod_l+0x970>
 801b374:	9304      	str	r3, [sp, #16]
 801b376:	4650      	mov	r0, sl
 801b378:	4659      	mov	r1, fp
 801b37a:	2300      	movs	r3, #0
 801b37c:	f018 0f01 	tst.w	r8, #1
 801b380:	d004      	beq.n	801b38c <_strtod_l+0x5dc>
 801b382:	e9d9 2300 	ldrd	r2, r3, [r9]
 801b386:	f7fe f8f7 	bl	8019578 <__aeabi_dmul>
 801b38a:	2301      	movs	r3, #1
 801b38c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801b390:	f109 0908 	add.w	r9, r9, #8
 801b394:	d1f2      	bne.n	801b37c <_strtod_l+0x5cc>
 801b396:	b10b      	cbz	r3, 801b39c <_strtod_l+0x5ec>
 801b398:	4682      	mov	sl, r0
 801b39a:	468b      	mov	fp, r1
 801b39c:	9b04      	ldr	r3, [sp, #16]
 801b39e:	b1c3      	cbz	r3, 801b3d2 <_strtod_l+0x622>
 801b3a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801b3a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b3a8:	2b00      	cmp	r3, #0
 801b3aa:	4659      	mov	r1, fp
 801b3ac:	dd11      	ble.n	801b3d2 <_strtod_l+0x622>
 801b3ae:	2b1f      	cmp	r3, #31
 801b3b0:	f340 8124 	ble.w	801b5fc <_strtod_l+0x84c>
 801b3b4:	2b34      	cmp	r3, #52	; 0x34
 801b3b6:	bfde      	ittt	le
 801b3b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801b3bc:	f04f 33ff 	movle.w	r3, #4294967295
 801b3c0:	fa03 f202 	lslle.w	r2, r3, r2
 801b3c4:	f04f 0a00 	mov.w	sl, #0
 801b3c8:	bfcc      	ite	gt
 801b3ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801b3ce:	ea02 0b01 	andle.w	fp, r2, r1
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	2300      	movs	r3, #0
 801b3d6:	4650      	mov	r0, sl
 801b3d8:	4659      	mov	r1, fp
 801b3da:	f7fe fb35 	bl	8019a48 <__aeabi_dcmpeq>
 801b3de:	2800      	cmp	r0, #0
 801b3e0:	d1a2      	bne.n	801b328 <_strtod_l+0x578>
 801b3e2:	9b07      	ldr	r3, [sp, #28]
 801b3e4:	9300      	str	r3, [sp, #0]
 801b3e6:	9908      	ldr	r1, [sp, #32]
 801b3e8:	462b      	mov	r3, r5
 801b3ea:	463a      	mov	r2, r7
 801b3ec:	4620      	mov	r0, r4
 801b3ee:	f001 fe39 	bl	801d064 <__s2b>
 801b3f2:	9007      	str	r0, [sp, #28]
 801b3f4:	2800      	cmp	r0, #0
 801b3f6:	f43f af1f 	beq.w	801b238 <_strtod_l+0x488>
 801b3fa:	9b05      	ldr	r3, [sp, #20]
 801b3fc:	1b9e      	subs	r6, r3, r6
 801b3fe:	9b06      	ldr	r3, [sp, #24]
 801b400:	2b00      	cmp	r3, #0
 801b402:	bfb4      	ite	lt
 801b404:	4633      	movlt	r3, r6
 801b406:	2300      	movge	r3, #0
 801b408:	930c      	str	r3, [sp, #48]	; 0x30
 801b40a:	9b06      	ldr	r3, [sp, #24]
 801b40c:	2500      	movs	r5, #0
 801b40e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b412:	9312      	str	r3, [sp, #72]	; 0x48
 801b414:	462e      	mov	r6, r5
 801b416:	9b07      	ldr	r3, [sp, #28]
 801b418:	4620      	mov	r0, r4
 801b41a:	6859      	ldr	r1, [r3, #4]
 801b41c:	f001 fd7a 	bl	801cf14 <_Balloc>
 801b420:	9005      	str	r0, [sp, #20]
 801b422:	2800      	cmp	r0, #0
 801b424:	f43f af0c 	beq.w	801b240 <_strtod_l+0x490>
 801b428:	9b07      	ldr	r3, [sp, #28]
 801b42a:	691a      	ldr	r2, [r3, #16]
 801b42c:	3202      	adds	r2, #2
 801b42e:	f103 010c 	add.w	r1, r3, #12
 801b432:	0092      	lsls	r2, r2, #2
 801b434:	300c      	adds	r0, #12
 801b436:	f001 fd5f 	bl	801cef8 <memcpy>
 801b43a:	ec4b ab10 	vmov	d0, sl, fp
 801b43e:	aa1a      	add	r2, sp, #104	; 0x68
 801b440:	a919      	add	r1, sp, #100	; 0x64
 801b442:	4620      	mov	r0, r4
 801b444:	f002 f954 	bl	801d6f0 <__d2b>
 801b448:	ec4b ab18 	vmov	d8, sl, fp
 801b44c:	9018      	str	r0, [sp, #96]	; 0x60
 801b44e:	2800      	cmp	r0, #0
 801b450:	f43f aef6 	beq.w	801b240 <_strtod_l+0x490>
 801b454:	2101      	movs	r1, #1
 801b456:	4620      	mov	r0, r4
 801b458:	f001 fe9e 	bl	801d198 <__i2b>
 801b45c:	4606      	mov	r6, r0
 801b45e:	2800      	cmp	r0, #0
 801b460:	f43f aeee 	beq.w	801b240 <_strtod_l+0x490>
 801b464:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801b466:	9904      	ldr	r1, [sp, #16]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	bfab      	itete	ge
 801b46c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801b46e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801b470:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801b472:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801b476:	bfac      	ite	ge
 801b478:	eb03 0902 	addge.w	r9, r3, r2
 801b47c:	1ad7      	sublt	r7, r2, r3
 801b47e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b480:	eba3 0801 	sub.w	r8, r3, r1
 801b484:	4490      	add	r8, r2
 801b486:	4ba1      	ldr	r3, [pc, #644]	; (801b70c <_strtod_l+0x95c>)
 801b488:	f108 38ff 	add.w	r8, r8, #4294967295
 801b48c:	4598      	cmp	r8, r3
 801b48e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b492:	f280 80c7 	bge.w	801b624 <_strtod_l+0x874>
 801b496:	eba3 0308 	sub.w	r3, r3, r8
 801b49a:	2b1f      	cmp	r3, #31
 801b49c:	eba2 0203 	sub.w	r2, r2, r3
 801b4a0:	f04f 0101 	mov.w	r1, #1
 801b4a4:	f300 80b1 	bgt.w	801b60a <_strtod_l+0x85a>
 801b4a8:	fa01 f303 	lsl.w	r3, r1, r3
 801b4ac:	930d      	str	r3, [sp, #52]	; 0x34
 801b4ae:	2300      	movs	r3, #0
 801b4b0:	9308      	str	r3, [sp, #32]
 801b4b2:	eb09 0802 	add.w	r8, r9, r2
 801b4b6:	9b04      	ldr	r3, [sp, #16]
 801b4b8:	45c1      	cmp	r9, r8
 801b4ba:	4417      	add	r7, r2
 801b4bc:	441f      	add	r7, r3
 801b4be:	464b      	mov	r3, r9
 801b4c0:	bfa8      	it	ge
 801b4c2:	4643      	movge	r3, r8
 801b4c4:	42bb      	cmp	r3, r7
 801b4c6:	bfa8      	it	ge
 801b4c8:	463b      	movge	r3, r7
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	bfc2      	ittt	gt
 801b4ce:	eba8 0803 	subgt.w	r8, r8, r3
 801b4d2:	1aff      	subgt	r7, r7, r3
 801b4d4:	eba9 0903 	subgt.w	r9, r9, r3
 801b4d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4da:	2b00      	cmp	r3, #0
 801b4dc:	dd17      	ble.n	801b50e <_strtod_l+0x75e>
 801b4de:	4631      	mov	r1, r6
 801b4e0:	461a      	mov	r2, r3
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f001 ff18 	bl	801d318 <__pow5mult>
 801b4e8:	4606      	mov	r6, r0
 801b4ea:	2800      	cmp	r0, #0
 801b4ec:	f43f aea8 	beq.w	801b240 <_strtod_l+0x490>
 801b4f0:	4601      	mov	r1, r0
 801b4f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801b4f4:	4620      	mov	r0, r4
 801b4f6:	f001 fe65 	bl	801d1c4 <__multiply>
 801b4fa:	900b      	str	r0, [sp, #44]	; 0x2c
 801b4fc:	2800      	cmp	r0, #0
 801b4fe:	f43f ae9f 	beq.w	801b240 <_strtod_l+0x490>
 801b502:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b504:	4620      	mov	r0, r4
 801b506:	f001 fd45 	bl	801cf94 <_Bfree>
 801b50a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b50c:	9318      	str	r3, [sp, #96]	; 0x60
 801b50e:	f1b8 0f00 	cmp.w	r8, #0
 801b512:	f300 808c 	bgt.w	801b62e <_strtod_l+0x87e>
 801b516:	9b06      	ldr	r3, [sp, #24]
 801b518:	2b00      	cmp	r3, #0
 801b51a:	dd08      	ble.n	801b52e <_strtod_l+0x77e>
 801b51c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b51e:	9905      	ldr	r1, [sp, #20]
 801b520:	4620      	mov	r0, r4
 801b522:	f001 fef9 	bl	801d318 <__pow5mult>
 801b526:	9005      	str	r0, [sp, #20]
 801b528:	2800      	cmp	r0, #0
 801b52a:	f43f ae89 	beq.w	801b240 <_strtod_l+0x490>
 801b52e:	2f00      	cmp	r7, #0
 801b530:	dd08      	ble.n	801b544 <_strtod_l+0x794>
 801b532:	9905      	ldr	r1, [sp, #20]
 801b534:	463a      	mov	r2, r7
 801b536:	4620      	mov	r0, r4
 801b538:	f001 ff48 	bl	801d3cc <__lshift>
 801b53c:	9005      	str	r0, [sp, #20]
 801b53e:	2800      	cmp	r0, #0
 801b540:	f43f ae7e 	beq.w	801b240 <_strtod_l+0x490>
 801b544:	f1b9 0f00 	cmp.w	r9, #0
 801b548:	dd08      	ble.n	801b55c <_strtod_l+0x7ac>
 801b54a:	4631      	mov	r1, r6
 801b54c:	464a      	mov	r2, r9
 801b54e:	4620      	mov	r0, r4
 801b550:	f001 ff3c 	bl	801d3cc <__lshift>
 801b554:	4606      	mov	r6, r0
 801b556:	2800      	cmp	r0, #0
 801b558:	f43f ae72 	beq.w	801b240 <_strtod_l+0x490>
 801b55c:	9a05      	ldr	r2, [sp, #20]
 801b55e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b560:	4620      	mov	r0, r4
 801b562:	f001 ffbf 	bl	801d4e4 <__mdiff>
 801b566:	4605      	mov	r5, r0
 801b568:	2800      	cmp	r0, #0
 801b56a:	f43f ae69 	beq.w	801b240 <_strtod_l+0x490>
 801b56e:	68c3      	ldr	r3, [r0, #12]
 801b570:	930b      	str	r3, [sp, #44]	; 0x2c
 801b572:	2300      	movs	r3, #0
 801b574:	60c3      	str	r3, [r0, #12]
 801b576:	4631      	mov	r1, r6
 801b578:	f001 ff98 	bl	801d4ac <__mcmp>
 801b57c:	2800      	cmp	r0, #0
 801b57e:	da60      	bge.n	801b642 <_strtod_l+0x892>
 801b580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b582:	ea53 030a 	orrs.w	r3, r3, sl
 801b586:	f040 8082 	bne.w	801b68e <_strtod_l+0x8de>
 801b58a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b58e:	2b00      	cmp	r3, #0
 801b590:	d17d      	bne.n	801b68e <_strtod_l+0x8de>
 801b592:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b596:	0d1b      	lsrs	r3, r3, #20
 801b598:	051b      	lsls	r3, r3, #20
 801b59a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b59e:	d976      	bls.n	801b68e <_strtod_l+0x8de>
 801b5a0:	696b      	ldr	r3, [r5, #20]
 801b5a2:	b913      	cbnz	r3, 801b5aa <_strtod_l+0x7fa>
 801b5a4:	692b      	ldr	r3, [r5, #16]
 801b5a6:	2b01      	cmp	r3, #1
 801b5a8:	dd71      	ble.n	801b68e <_strtod_l+0x8de>
 801b5aa:	4629      	mov	r1, r5
 801b5ac:	2201      	movs	r2, #1
 801b5ae:	4620      	mov	r0, r4
 801b5b0:	f001 ff0c 	bl	801d3cc <__lshift>
 801b5b4:	4631      	mov	r1, r6
 801b5b6:	4605      	mov	r5, r0
 801b5b8:	f001 ff78 	bl	801d4ac <__mcmp>
 801b5bc:	2800      	cmp	r0, #0
 801b5be:	dd66      	ble.n	801b68e <_strtod_l+0x8de>
 801b5c0:	9904      	ldr	r1, [sp, #16]
 801b5c2:	4a53      	ldr	r2, [pc, #332]	; (801b710 <_strtod_l+0x960>)
 801b5c4:	465b      	mov	r3, fp
 801b5c6:	2900      	cmp	r1, #0
 801b5c8:	f000 8081 	beq.w	801b6ce <_strtod_l+0x91e>
 801b5cc:	ea02 010b 	and.w	r1, r2, fp
 801b5d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b5d4:	dc7b      	bgt.n	801b6ce <_strtod_l+0x91e>
 801b5d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b5da:	f77f aea9 	ble.w	801b330 <_strtod_l+0x580>
 801b5de:	4b4d      	ldr	r3, [pc, #308]	; (801b714 <_strtod_l+0x964>)
 801b5e0:	4650      	mov	r0, sl
 801b5e2:	4659      	mov	r1, fp
 801b5e4:	2200      	movs	r2, #0
 801b5e6:	f7fd ffc7 	bl	8019578 <__aeabi_dmul>
 801b5ea:	460b      	mov	r3, r1
 801b5ec:	4303      	orrs	r3, r0
 801b5ee:	bf08      	it	eq
 801b5f0:	2322      	moveq	r3, #34	; 0x22
 801b5f2:	4682      	mov	sl, r0
 801b5f4:	468b      	mov	fp, r1
 801b5f6:	bf08      	it	eq
 801b5f8:	6023      	streq	r3, [r4, #0]
 801b5fa:	e62b      	b.n	801b254 <_strtod_l+0x4a4>
 801b5fc:	f04f 32ff 	mov.w	r2, #4294967295
 801b600:	fa02 f303 	lsl.w	r3, r2, r3
 801b604:	ea03 0a0a 	and.w	sl, r3, sl
 801b608:	e6e3      	b.n	801b3d2 <_strtod_l+0x622>
 801b60a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801b60e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801b612:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801b616:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801b61a:	fa01 f308 	lsl.w	r3, r1, r8
 801b61e:	9308      	str	r3, [sp, #32]
 801b620:	910d      	str	r1, [sp, #52]	; 0x34
 801b622:	e746      	b.n	801b4b2 <_strtod_l+0x702>
 801b624:	2300      	movs	r3, #0
 801b626:	9308      	str	r3, [sp, #32]
 801b628:	2301      	movs	r3, #1
 801b62a:	930d      	str	r3, [sp, #52]	; 0x34
 801b62c:	e741      	b.n	801b4b2 <_strtod_l+0x702>
 801b62e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b630:	4642      	mov	r2, r8
 801b632:	4620      	mov	r0, r4
 801b634:	f001 feca 	bl	801d3cc <__lshift>
 801b638:	9018      	str	r0, [sp, #96]	; 0x60
 801b63a:	2800      	cmp	r0, #0
 801b63c:	f47f af6b 	bne.w	801b516 <_strtod_l+0x766>
 801b640:	e5fe      	b.n	801b240 <_strtod_l+0x490>
 801b642:	465f      	mov	r7, fp
 801b644:	d16e      	bne.n	801b724 <_strtod_l+0x974>
 801b646:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b648:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b64c:	b342      	cbz	r2, 801b6a0 <_strtod_l+0x8f0>
 801b64e:	4a32      	ldr	r2, [pc, #200]	; (801b718 <_strtod_l+0x968>)
 801b650:	4293      	cmp	r3, r2
 801b652:	d128      	bne.n	801b6a6 <_strtod_l+0x8f6>
 801b654:	9b04      	ldr	r3, [sp, #16]
 801b656:	4651      	mov	r1, sl
 801b658:	b1eb      	cbz	r3, 801b696 <_strtod_l+0x8e6>
 801b65a:	4b2d      	ldr	r3, [pc, #180]	; (801b710 <_strtod_l+0x960>)
 801b65c:	403b      	ands	r3, r7
 801b65e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b662:	f04f 32ff 	mov.w	r2, #4294967295
 801b666:	d819      	bhi.n	801b69c <_strtod_l+0x8ec>
 801b668:	0d1b      	lsrs	r3, r3, #20
 801b66a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801b66e:	fa02 f303 	lsl.w	r3, r2, r3
 801b672:	4299      	cmp	r1, r3
 801b674:	d117      	bne.n	801b6a6 <_strtod_l+0x8f6>
 801b676:	4b29      	ldr	r3, [pc, #164]	; (801b71c <_strtod_l+0x96c>)
 801b678:	429f      	cmp	r7, r3
 801b67a:	d102      	bne.n	801b682 <_strtod_l+0x8d2>
 801b67c:	3101      	adds	r1, #1
 801b67e:	f43f addf 	beq.w	801b240 <_strtod_l+0x490>
 801b682:	4b23      	ldr	r3, [pc, #140]	; (801b710 <_strtod_l+0x960>)
 801b684:	403b      	ands	r3, r7
 801b686:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801b68a:	f04f 0a00 	mov.w	sl, #0
 801b68e:	9b04      	ldr	r3, [sp, #16]
 801b690:	2b00      	cmp	r3, #0
 801b692:	d1a4      	bne.n	801b5de <_strtod_l+0x82e>
 801b694:	e5de      	b.n	801b254 <_strtod_l+0x4a4>
 801b696:	f04f 33ff 	mov.w	r3, #4294967295
 801b69a:	e7ea      	b.n	801b672 <_strtod_l+0x8c2>
 801b69c:	4613      	mov	r3, r2
 801b69e:	e7e8      	b.n	801b672 <_strtod_l+0x8c2>
 801b6a0:	ea53 030a 	orrs.w	r3, r3, sl
 801b6a4:	d08c      	beq.n	801b5c0 <_strtod_l+0x810>
 801b6a6:	9b08      	ldr	r3, [sp, #32]
 801b6a8:	b1db      	cbz	r3, 801b6e2 <_strtod_l+0x932>
 801b6aa:	423b      	tst	r3, r7
 801b6ac:	d0ef      	beq.n	801b68e <_strtod_l+0x8de>
 801b6ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b6b0:	9a04      	ldr	r2, [sp, #16]
 801b6b2:	4650      	mov	r0, sl
 801b6b4:	4659      	mov	r1, fp
 801b6b6:	b1c3      	cbz	r3, 801b6ea <_strtod_l+0x93a>
 801b6b8:	f7ff fb5e 	bl	801ad78 <sulp>
 801b6bc:	4602      	mov	r2, r0
 801b6be:	460b      	mov	r3, r1
 801b6c0:	ec51 0b18 	vmov	r0, r1, d8
 801b6c4:	f7fd fda2 	bl	801920c <__adddf3>
 801b6c8:	4682      	mov	sl, r0
 801b6ca:	468b      	mov	fp, r1
 801b6cc:	e7df      	b.n	801b68e <_strtod_l+0x8de>
 801b6ce:	4013      	ands	r3, r2
 801b6d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b6d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801b6d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801b6dc:	f04f 3aff 	mov.w	sl, #4294967295
 801b6e0:	e7d5      	b.n	801b68e <_strtod_l+0x8de>
 801b6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b6e4:	ea13 0f0a 	tst.w	r3, sl
 801b6e8:	e7e0      	b.n	801b6ac <_strtod_l+0x8fc>
 801b6ea:	f7ff fb45 	bl	801ad78 <sulp>
 801b6ee:	4602      	mov	r2, r0
 801b6f0:	460b      	mov	r3, r1
 801b6f2:	ec51 0b18 	vmov	r0, r1, d8
 801b6f6:	f7fd fd87 	bl	8019208 <__aeabi_dsub>
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	4682      	mov	sl, r0
 801b700:	468b      	mov	fp, r1
 801b702:	f7fe f9a1 	bl	8019a48 <__aeabi_dcmpeq>
 801b706:	2800      	cmp	r0, #0
 801b708:	d0c1      	beq.n	801b68e <_strtod_l+0x8de>
 801b70a:	e611      	b.n	801b330 <_strtod_l+0x580>
 801b70c:	fffffc02 	.word	0xfffffc02
 801b710:	7ff00000 	.word	0x7ff00000
 801b714:	39500000 	.word	0x39500000
 801b718:	000fffff 	.word	0x000fffff
 801b71c:	7fefffff 	.word	0x7fefffff
 801b720:	080529a8 	.word	0x080529a8
 801b724:	4631      	mov	r1, r6
 801b726:	4628      	mov	r0, r5
 801b728:	f002 f83e 	bl	801d7a8 <__ratio>
 801b72c:	ec59 8b10 	vmov	r8, r9, d0
 801b730:	ee10 0a10 	vmov	r0, s0
 801b734:	2200      	movs	r2, #0
 801b736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b73a:	4649      	mov	r1, r9
 801b73c:	f7fe f998 	bl	8019a70 <__aeabi_dcmple>
 801b740:	2800      	cmp	r0, #0
 801b742:	d07a      	beq.n	801b83a <_strtod_l+0xa8a>
 801b744:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b746:	2b00      	cmp	r3, #0
 801b748:	d04a      	beq.n	801b7e0 <_strtod_l+0xa30>
 801b74a:	4b95      	ldr	r3, [pc, #596]	; (801b9a0 <_strtod_l+0xbf0>)
 801b74c:	2200      	movs	r2, #0
 801b74e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b752:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b9a0 <_strtod_l+0xbf0>
 801b756:	f04f 0800 	mov.w	r8, #0
 801b75a:	4b92      	ldr	r3, [pc, #584]	; (801b9a4 <_strtod_l+0xbf4>)
 801b75c:	403b      	ands	r3, r7
 801b75e:	930d      	str	r3, [sp, #52]	; 0x34
 801b760:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b762:	4b91      	ldr	r3, [pc, #580]	; (801b9a8 <_strtod_l+0xbf8>)
 801b764:	429a      	cmp	r2, r3
 801b766:	f040 80b0 	bne.w	801b8ca <_strtod_l+0xb1a>
 801b76a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b76e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801b772:	ec4b ab10 	vmov	d0, sl, fp
 801b776:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b77a:	f001 ff3d 	bl	801d5f8 <__ulp>
 801b77e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b782:	ec53 2b10 	vmov	r2, r3, d0
 801b786:	f7fd fef7 	bl	8019578 <__aeabi_dmul>
 801b78a:	4652      	mov	r2, sl
 801b78c:	465b      	mov	r3, fp
 801b78e:	f7fd fd3d 	bl	801920c <__adddf3>
 801b792:	460b      	mov	r3, r1
 801b794:	4983      	ldr	r1, [pc, #524]	; (801b9a4 <_strtod_l+0xbf4>)
 801b796:	4a85      	ldr	r2, [pc, #532]	; (801b9ac <_strtod_l+0xbfc>)
 801b798:	4019      	ands	r1, r3
 801b79a:	4291      	cmp	r1, r2
 801b79c:	4682      	mov	sl, r0
 801b79e:	d960      	bls.n	801b862 <_strtod_l+0xab2>
 801b7a0:	ee18 3a90 	vmov	r3, s17
 801b7a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b7a8:	4293      	cmp	r3, r2
 801b7aa:	d104      	bne.n	801b7b6 <_strtod_l+0xa06>
 801b7ac:	ee18 3a10 	vmov	r3, s16
 801b7b0:	3301      	adds	r3, #1
 801b7b2:	f43f ad45 	beq.w	801b240 <_strtod_l+0x490>
 801b7b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b9b8 <_strtod_l+0xc08>
 801b7ba:	f04f 3aff 	mov.w	sl, #4294967295
 801b7be:	9918      	ldr	r1, [sp, #96]	; 0x60
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f001 fbe7 	bl	801cf94 <_Bfree>
 801b7c6:	9905      	ldr	r1, [sp, #20]
 801b7c8:	4620      	mov	r0, r4
 801b7ca:	f001 fbe3 	bl	801cf94 <_Bfree>
 801b7ce:	4631      	mov	r1, r6
 801b7d0:	4620      	mov	r0, r4
 801b7d2:	f001 fbdf 	bl	801cf94 <_Bfree>
 801b7d6:	4629      	mov	r1, r5
 801b7d8:	4620      	mov	r0, r4
 801b7da:	f001 fbdb 	bl	801cf94 <_Bfree>
 801b7de:	e61a      	b.n	801b416 <_strtod_l+0x666>
 801b7e0:	f1ba 0f00 	cmp.w	sl, #0
 801b7e4:	d11b      	bne.n	801b81e <_strtod_l+0xa6e>
 801b7e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b7ea:	b9f3      	cbnz	r3, 801b82a <_strtod_l+0xa7a>
 801b7ec:	4b6c      	ldr	r3, [pc, #432]	; (801b9a0 <_strtod_l+0xbf0>)
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	4640      	mov	r0, r8
 801b7f2:	4649      	mov	r1, r9
 801b7f4:	f7fe f932 	bl	8019a5c <__aeabi_dcmplt>
 801b7f8:	b9d0      	cbnz	r0, 801b830 <_strtod_l+0xa80>
 801b7fa:	4640      	mov	r0, r8
 801b7fc:	4649      	mov	r1, r9
 801b7fe:	4b6c      	ldr	r3, [pc, #432]	; (801b9b0 <_strtod_l+0xc00>)
 801b800:	2200      	movs	r2, #0
 801b802:	f7fd feb9 	bl	8019578 <__aeabi_dmul>
 801b806:	4680      	mov	r8, r0
 801b808:	4689      	mov	r9, r1
 801b80a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801b80e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801b812:	9315      	str	r3, [sp, #84]	; 0x54
 801b814:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b818:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b81c:	e79d      	b.n	801b75a <_strtod_l+0x9aa>
 801b81e:	f1ba 0f01 	cmp.w	sl, #1
 801b822:	d102      	bne.n	801b82a <_strtod_l+0xa7a>
 801b824:	2f00      	cmp	r7, #0
 801b826:	f43f ad83 	beq.w	801b330 <_strtod_l+0x580>
 801b82a:	4b62      	ldr	r3, [pc, #392]	; (801b9b4 <_strtod_l+0xc04>)
 801b82c:	2200      	movs	r2, #0
 801b82e:	e78e      	b.n	801b74e <_strtod_l+0x99e>
 801b830:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b9b0 <_strtod_l+0xc00>
 801b834:	f04f 0800 	mov.w	r8, #0
 801b838:	e7e7      	b.n	801b80a <_strtod_l+0xa5a>
 801b83a:	4b5d      	ldr	r3, [pc, #372]	; (801b9b0 <_strtod_l+0xc00>)
 801b83c:	4640      	mov	r0, r8
 801b83e:	4649      	mov	r1, r9
 801b840:	2200      	movs	r2, #0
 801b842:	f7fd fe99 	bl	8019578 <__aeabi_dmul>
 801b846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b848:	4680      	mov	r8, r0
 801b84a:	4689      	mov	r9, r1
 801b84c:	b933      	cbnz	r3, 801b85c <_strtod_l+0xaac>
 801b84e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b852:	900e      	str	r0, [sp, #56]	; 0x38
 801b854:	930f      	str	r3, [sp, #60]	; 0x3c
 801b856:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801b85a:	e7dd      	b.n	801b818 <_strtod_l+0xa68>
 801b85c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801b860:	e7f9      	b.n	801b856 <_strtod_l+0xaa6>
 801b862:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801b866:	9b04      	ldr	r3, [sp, #16]
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d1a8      	bne.n	801b7be <_strtod_l+0xa0e>
 801b86c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b870:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b872:	0d1b      	lsrs	r3, r3, #20
 801b874:	051b      	lsls	r3, r3, #20
 801b876:	429a      	cmp	r2, r3
 801b878:	d1a1      	bne.n	801b7be <_strtod_l+0xa0e>
 801b87a:	4640      	mov	r0, r8
 801b87c:	4649      	mov	r1, r9
 801b87e:	f7fe f9c3 	bl	8019c08 <__aeabi_d2lz>
 801b882:	f7fd fe4b 	bl	801951c <__aeabi_l2d>
 801b886:	4602      	mov	r2, r0
 801b888:	460b      	mov	r3, r1
 801b88a:	4640      	mov	r0, r8
 801b88c:	4649      	mov	r1, r9
 801b88e:	f7fd fcbb 	bl	8019208 <__aeabi_dsub>
 801b892:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b894:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b898:	ea43 030a 	orr.w	r3, r3, sl
 801b89c:	4313      	orrs	r3, r2
 801b89e:	4680      	mov	r8, r0
 801b8a0:	4689      	mov	r9, r1
 801b8a2:	d055      	beq.n	801b950 <_strtod_l+0xba0>
 801b8a4:	a336      	add	r3, pc, #216	; (adr r3, 801b980 <_strtod_l+0xbd0>)
 801b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8aa:	f7fe f8d7 	bl	8019a5c <__aeabi_dcmplt>
 801b8ae:	2800      	cmp	r0, #0
 801b8b0:	f47f acd0 	bne.w	801b254 <_strtod_l+0x4a4>
 801b8b4:	a334      	add	r3, pc, #208	; (adr r3, 801b988 <_strtod_l+0xbd8>)
 801b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ba:	4640      	mov	r0, r8
 801b8bc:	4649      	mov	r1, r9
 801b8be:	f7fe f8eb 	bl	8019a98 <__aeabi_dcmpgt>
 801b8c2:	2800      	cmp	r0, #0
 801b8c4:	f43f af7b 	beq.w	801b7be <_strtod_l+0xa0e>
 801b8c8:	e4c4      	b.n	801b254 <_strtod_l+0x4a4>
 801b8ca:	9b04      	ldr	r3, [sp, #16]
 801b8cc:	b333      	cbz	r3, 801b91c <_strtod_l+0xb6c>
 801b8ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b8d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b8d4:	d822      	bhi.n	801b91c <_strtod_l+0xb6c>
 801b8d6:	a32e      	add	r3, pc, #184	; (adr r3, 801b990 <_strtod_l+0xbe0>)
 801b8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8dc:	4640      	mov	r0, r8
 801b8de:	4649      	mov	r1, r9
 801b8e0:	f7fe f8c6 	bl	8019a70 <__aeabi_dcmple>
 801b8e4:	b1a0      	cbz	r0, 801b910 <_strtod_l+0xb60>
 801b8e6:	4649      	mov	r1, r9
 801b8e8:	4640      	mov	r0, r8
 801b8ea:	f7fe f91d 	bl	8019b28 <__aeabi_d2uiz>
 801b8ee:	2801      	cmp	r0, #1
 801b8f0:	bf38      	it	cc
 801b8f2:	2001      	movcc	r0, #1
 801b8f4:	f7fd fdc6 	bl	8019484 <__aeabi_ui2d>
 801b8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b8fa:	4680      	mov	r8, r0
 801b8fc:	4689      	mov	r9, r1
 801b8fe:	bb23      	cbnz	r3, 801b94a <_strtod_l+0xb9a>
 801b900:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b904:	9010      	str	r0, [sp, #64]	; 0x40
 801b906:	9311      	str	r3, [sp, #68]	; 0x44
 801b908:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801b90c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b912:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b914:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801b918:	1a9b      	subs	r3, r3, r2
 801b91a:	9309      	str	r3, [sp, #36]	; 0x24
 801b91c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b920:	eeb0 0a48 	vmov.f32	s0, s16
 801b924:	eef0 0a68 	vmov.f32	s1, s17
 801b928:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b92c:	f001 fe64 	bl	801d5f8 <__ulp>
 801b930:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801b934:	ec53 2b10 	vmov	r2, r3, d0
 801b938:	f7fd fe1e 	bl	8019578 <__aeabi_dmul>
 801b93c:	ec53 2b18 	vmov	r2, r3, d8
 801b940:	f7fd fc64 	bl	801920c <__adddf3>
 801b944:	4682      	mov	sl, r0
 801b946:	468b      	mov	fp, r1
 801b948:	e78d      	b.n	801b866 <_strtod_l+0xab6>
 801b94a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801b94e:	e7db      	b.n	801b908 <_strtod_l+0xb58>
 801b950:	a311      	add	r3, pc, #68	; (adr r3, 801b998 <_strtod_l+0xbe8>)
 801b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b956:	f7fe f881 	bl	8019a5c <__aeabi_dcmplt>
 801b95a:	e7b2      	b.n	801b8c2 <_strtod_l+0xb12>
 801b95c:	2300      	movs	r3, #0
 801b95e:	930a      	str	r3, [sp, #40]	; 0x28
 801b960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801b962:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b964:	6013      	str	r3, [r2, #0]
 801b966:	f7ff ba6b 	b.w	801ae40 <_strtod_l+0x90>
 801b96a:	2a65      	cmp	r2, #101	; 0x65
 801b96c:	f43f ab5f 	beq.w	801b02e <_strtod_l+0x27e>
 801b970:	2a45      	cmp	r2, #69	; 0x45
 801b972:	f43f ab5c 	beq.w	801b02e <_strtod_l+0x27e>
 801b976:	2301      	movs	r3, #1
 801b978:	f7ff bb94 	b.w	801b0a4 <_strtod_l+0x2f4>
 801b97c:	f3af 8000 	nop.w
 801b980:	94a03595 	.word	0x94a03595
 801b984:	3fdfffff 	.word	0x3fdfffff
 801b988:	35afe535 	.word	0x35afe535
 801b98c:	3fe00000 	.word	0x3fe00000
 801b990:	ffc00000 	.word	0xffc00000
 801b994:	41dfffff 	.word	0x41dfffff
 801b998:	94a03595 	.word	0x94a03595
 801b99c:	3fcfffff 	.word	0x3fcfffff
 801b9a0:	3ff00000 	.word	0x3ff00000
 801b9a4:	7ff00000 	.word	0x7ff00000
 801b9a8:	7fe00000 	.word	0x7fe00000
 801b9ac:	7c9fffff 	.word	0x7c9fffff
 801b9b0:	3fe00000 	.word	0x3fe00000
 801b9b4:	bff00000 	.word	0xbff00000
 801b9b8:	7fefffff 	.word	0x7fefffff

0801b9bc <_strtod_r>:
 801b9bc:	4b01      	ldr	r3, [pc, #4]	; (801b9c4 <_strtod_r+0x8>)
 801b9be:	f7ff b9f7 	b.w	801adb0 <_strtod_l>
 801b9c2:	bf00      	nop
 801b9c4:	200000cc 	.word	0x200000cc

0801b9c8 <_strtol_l.constprop.0>:
 801b9c8:	2b01      	cmp	r3, #1
 801b9ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9ce:	d001      	beq.n	801b9d4 <_strtol_l.constprop.0+0xc>
 801b9d0:	2b24      	cmp	r3, #36	; 0x24
 801b9d2:	d906      	bls.n	801b9e2 <_strtol_l.constprop.0+0x1a>
 801b9d4:	f7fe fafe 	bl	8019fd4 <__errno>
 801b9d8:	2316      	movs	r3, #22
 801b9da:	6003      	str	r3, [r0, #0]
 801b9dc:	2000      	movs	r0, #0
 801b9de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801bac8 <_strtol_l.constprop.0+0x100>
 801b9e6:	460d      	mov	r5, r1
 801b9e8:	462e      	mov	r6, r5
 801b9ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b9ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b9f2:	f017 0708 	ands.w	r7, r7, #8
 801b9f6:	d1f7      	bne.n	801b9e8 <_strtol_l.constprop.0+0x20>
 801b9f8:	2c2d      	cmp	r4, #45	; 0x2d
 801b9fa:	d132      	bne.n	801ba62 <_strtol_l.constprop.0+0x9a>
 801b9fc:	782c      	ldrb	r4, [r5, #0]
 801b9fe:	2701      	movs	r7, #1
 801ba00:	1cb5      	adds	r5, r6, #2
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d05b      	beq.n	801babe <_strtol_l.constprop.0+0xf6>
 801ba06:	2b10      	cmp	r3, #16
 801ba08:	d109      	bne.n	801ba1e <_strtol_l.constprop.0+0x56>
 801ba0a:	2c30      	cmp	r4, #48	; 0x30
 801ba0c:	d107      	bne.n	801ba1e <_strtol_l.constprop.0+0x56>
 801ba0e:	782c      	ldrb	r4, [r5, #0]
 801ba10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ba14:	2c58      	cmp	r4, #88	; 0x58
 801ba16:	d14d      	bne.n	801bab4 <_strtol_l.constprop.0+0xec>
 801ba18:	786c      	ldrb	r4, [r5, #1]
 801ba1a:	2310      	movs	r3, #16
 801ba1c:	3502      	adds	r5, #2
 801ba1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ba22:	f108 38ff 	add.w	r8, r8, #4294967295
 801ba26:	f04f 0c00 	mov.w	ip, #0
 801ba2a:	fbb8 f9f3 	udiv	r9, r8, r3
 801ba2e:	4666      	mov	r6, ip
 801ba30:	fb03 8a19 	mls	sl, r3, r9, r8
 801ba34:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801ba38:	f1be 0f09 	cmp.w	lr, #9
 801ba3c:	d816      	bhi.n	801ba6c <_strtol_l.constprop.0+0xa4>
 801ba3e:	4674      	mov	r4, lr
 801ba40:	42a3      	cmp	r3, r4
 801ba42:	dd24      	ble.n	801ba8e <_strtol_l.constprop.0+0xc6>
 801ba44:	f1bc 0f00 	cmp.w	ip, #0
 801ba48:	db1e      	blt.n	801ba88 <_strtol_l.constprop.0+0xc0>
 801ba4a:	45b1      	cmp	r9, r6
 801ba4c:	d31c      	bcc.n	801ba88 <_strtol_l.constprop.0+0xc0>
 801ba4e:	d101      	bne.n	801ba54 <_strtol_l.constprop.0+0x8c>
 801ba50:	45a2      	cmp	sl, r4
 801ba52:	db19      	blt.n	801ba88 <_strtol_l.constprop.0+0xc0>
 801ba54:	fb06 4603 	mla	r6, r6, r3, r4
 801ba58:	f04f 0c01 	mov.w	ip, #1
 801ba5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ba60:	e7e8      	b.n	801ba34 <_strtol_l.constprop.0+0x6c>
 801ba62:	2c2b      	cmp	r4, #43	; 0x2b
 801ba64:	bf04      	itt	eq
 801ba66:	782c      	ldrbeq	r4, [r5, #0]
 801ba68:	1cb5      	addeq	r5, r6, #2
 801ba6a:	e7ca      	b.n	801ba02 <_strtol_l.constprop.0+0x3a>
 801ba6c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801ba70:	f1be 0f19 	cmp.w	lr, #25
 801ba74:	d801      	bhi.n	801ba7a <_strtol_l.constprop.0+0xb2>
 801ba76:	3c37      	subs	r4, #55	; 0x37
 801ba78:	e7e2      	b.n	801ba40 <_strtol_l.constprop.0+0x78>
 801ba7a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801ba7e:	f1be 0f19 	cmp.w	lr, #25
 801ba82:	d804      	bhi.n	801ba8e <_strtol_l.constprop.0+0xc6>
 801ba84:	3c57      	subs	r4, #87	; 0x57
 801ba86:	e7db      	b.n	801ba40 <_strtol_l.constprop.0+0x78>
 801ba88:	f04f 3cff 	mov.w	ip, #4294967295
 801ba8c:	e7e6      	b.n	801ba5c <_strtol_l.constprop.0+0x94>
 801ba8e:	f1bc 0f00 	cmp.w	ip, #0
 801ba92:	da05      	bge.n	801baa0 <_strtol_l.constprop.0+0xd8>
 801ba94:	2322      	movs	r3, #34	; 0x22
 801ba96:	6003      	str	r3, [r0, #0]
 801ba98:	4646      	mov	r6, r8
 801ba9a:	b942      	cbnz	r2, 801baae <_strtol_l.constprop.0+0xe6>
 801ba9c:	4630      	mov	r0, r6
 801ba9e:	e79e      	b.n	801b9de <_strtol_l.constprop.0+0x16>
 801baa0:	b107      	cbz	r7, 801baa4 <_strtol_l.constprop.0+0xdc>
 801baa2:	4276      	negs	r6, r6
 801baa4:	2a00      	cmp	r2, #0
 801baa6:	d0f9      	beq.n	801ba9c <_strtol_l.constprop.0+0xd4>
 801baa8:	f1bc 0f00 	cmp.w	ip, #0
 801baac:	d000      	beq.n	801bab0 <_strtol_l.constprop.0+0xe8>
 801baae:	1e69      	subs	r1, r5, #1
 801bab0:	6011      	str	r1, [r2, #0]
 801bab2:	e7f3      	b.n	801ba9c <_strtol_l.constprop.0+0xd4>
 801bab4:	2430      	movs	r4, #48	; 0x30
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d1b1      	bne.n	801ba1e <_strtol_l.constprop.0+0x56>
 801baba:	2308      	movs	r3, #8
 801babc:	e7af      	b.n	801ba1e <_strtol_l.constprop.0+0x56>
 801babe:	2c30      	cmp	r4, #48	; 0x30
 801bac0:	d0a5      	beq.n	801ba0e <_strtol_l.constprop.0+0x46>
 801bac2:	230a      	movs	r3, #10
 801bac4:	e7ab      	b.n	801ba1e <_strtol_l.constprop.0+0x56>
 801bac6:	bf00      	nop
 801bac8:	080529d1 	.word	0x080529d1

0801bacc <_strtol_r>:
 801bacc:	f7ff bf7c 	b.w	801b9c8 <_strtol_l.constprop.0>

0801bad0 <strtol>:
 801bad0:	4613      	mov	r3, r2
 801bad2:	460a      	mov	r2, r1
 801bad4:	4601      	mov	r1, r0
 801bad6:	4802      	ldr	r0, [pc, #8]	; (801bae0 <strtol+0x10>)
 801bad8:	6800      	ldr	r0, [r0, #0]
 801bada:	f7ff bf75 	b.w	801b9c8 <_strtol_l.constprop.0>
 801bade:	bf00      	nop
 801bae0:	20000064 	.word	0x20000064

0801bae4 <quorem>:
 801bae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae8:	6903      	ldr	r3, [r0, #16]
 801baea:	690c      	ldr	r4, [r1, #16]
 801baec:	42a3      	cmp	r3, r4
 801baee:	4607      	mov	r7, r0
 801baf0:	f2c0 8081 	blt.w	801bbf6 <quorem+0x112>
 801baf4:	3c01      	subs	r4, #1
 801baf6:	f101 0814 	add.w	r8, r1, #20
 801bafa:	f100 0514 	add.w	r5, r0, #20
 801bafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb02:	9301      	str	r3, [sp, #4]
 801bb04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801bb08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb0c:	3301      	adds	r3, #1
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801bb14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bb18:	fbb2 f6f3 	udiv	r6, r2, r3
 801bb1c:	d331      	bcc.n	801bb82 <quorem+0x9e>
 801bb1e:	f04f 0e00 	mov.w	lr, #0
 801bb22:	4640      	mov	r0, r8
 801bb24:	46ac      	mov	ip, r5
 801bb26:	46f2      	mov	sl, lr
 801bb28:	f850 2b04 	ldr.w	r2, [r0], #4
 801bb2c:	b293      	uxth	r3, r2
 801bb2e:	fb06 e303 	mla	r3, r6, r3, lr
 801bb32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801bb36:	b29b      	uxth	r3, r3
 801bb38:	ebaa 0303 	sub.w	r3, sl, r3
 801bb3c:	f8dc a000 	ldr.w	sl, [ip]
 801bb40:	0c12      	lsrs	r2, r2, #16
 801bb42:	fa13 f38a 	uxtah	r3, r3, sl
 801bb46:	fb06 e202 	mla	r2, r6, r2, lr
 801bb4a:	9300      	str	r3, [sp, #0]
 801bb4c:	9b00      	ldr	r3, [sp, #0]
 801bb4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bb52:	b292      	uxth	r2, r2
 801bb54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bb58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bb5c:	f8bd 3000 	ldrh.w	r3, [sp]
 801bb60:	4581      	cmp	r9, r0
 801bb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb66:	f84c 3b04 	str.w	r3, [ip], #4
 801bb6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bb6e:	d2db      	bcs.n	801bb28 <quorem+0x44>
 801bb70:	f855 300b 	ldr.w	r3, [r5, fp]
 801bb74:	b92b      	cbnz	r3, 801bb82 <quorem+0x9e>
 801bb76:	9b01      	ldr	r3, [sp, #4]
 801bb78:	3b04      	subs	r3, #4
 801bb7a:	429d      	cmp	r5, r3
 801bb7c:	461a      	mov	r2, r3
 801bb7e:	d32e      	bcc.n	801bbde <quorem+0xfa>
 801bb80:	613c      	str	r4, [r7, #16]
 801bb82:	4638      	mov	r0, r7
 801bb84:	f001 fc92 	bl	801d4ac <__mcmp>
 801bb88:	2800      	cmp	r0, #0
 801bb8a:	db24      	blt.n	801bbd6 <quorem+0xf2>
 801bb8c:	3601      	adds	r6, #1
 801bb8e:	4628      	mov	r0, r5
 801bb90:	f04f 0c00 	mov.w	ip, #0
 801bb94:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb98:	f8d0 e000 	ldr.w	lr, [r0]
 801bb9c:	b293      	uxth	r3, r2
 801bb9e:	ebac 0303 	sub.w	r3, ip, r3
 801bba2:	0c12      	lsrs	r2, r2, #16
 801bba4:	fa13 f38e 	uxtah	r3, r3, lr
 801bba8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bbac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bbb0:	b29b      	uxth	r3, r3
 801bbb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bbb6:	45c1      	cmp	r9, r8
 801bbb8:	f840 3b04 	str.w	r3, [r0], #4
 801bbbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bbc0:	d2e8      	bcs.n	801bb94 <quorem+0xb0>
 801bbc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bbc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bbca:	b922      	cbnz	r2, 801bbd6 <quorem+0xf2>
 801bbcc:	3b04      	subs	r3, #4
 801bbce:	429d      	cmp	r5, r3
 801bbd0:	461a      	mov	r2, r3
 801bbd2:	d30a      	bcc.n	801bbea <quorem+0x106>
 801bbd4:	613c      	str	r4, [r7, #16]
 801bbd6:	4630      	mov	r0, r6
 801bbd8:	b003      	add	sp, #12
 801bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbde:	6812      	ldr	r2, [r2, #0]
 801bbe0:	3b04      	subs	r3, #4
 801bbe2:	2a00      	cmp	r2, #0
 801bbe4:	d1cc      	bne.n	801bb80 <quorem+0x9c>
 801bbe6:	3c01      	subs	r4, #1
 801bbe8:	e7c7      	b.n	801bb7a <quorem+0x96>
 801bbea:	6812      	ldr	r2, [r2, #0]
 801bbec:	3b04      	subs	r3, #4
 801bbee:	2a00      	cmp	r2, #0
 801bbf0:	d1f0      	bne.n	801bbd4 <quorem+0xf0>
 801bbf2:	3c01      	subs	r4, #1
 801bbf4:	e7eb      	b.n	801bbce <quorem+0xea>
 801bbf6:	2000      	movs	r0, #0
 801bbf8:	e7ee      	b.n	801bbd8 <quorem+0xf4>
 801bbfa:	0000      	movs	r0, r0
 801bbfc:	0000      	movs	r0, r0
	...

0801bc00 <_dtoa_r>:
 801bc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc04:	ed2d 8b04 	vpush	{d8-d9}
 801bc08:	ec57 6b10 	vmov	r6, r7, d0
 801bc0c:	b093      	sub	sp, #76	; 0x4c
 801bc0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bc10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bc14:	9106      	str	r1, [sp, #24]
 801bc16:	ee10 aa10 	vmov	sl, s0
 801bc1a:	4604      	mov	r4, r0
 801bc1c:	9209      	str	r2, [sp, #36]	; 0x24
 801bc1e:	930c      	str	r3, [sp, #48]	; 0x30
 801bc20:	46bb      	mov	fp, r7
 801bc22:	b975      	cbnz	r5, 801bc42 <_dtoa_r+0x42>
 801bc24:	2010      	movs	r0, #16
 801bc26:	f001 f94d 	bl	801cec4 <malloc>
 801bc2a:	4602      	mov	r2, r0
 801bc2c:	6260      	str	r0, [r4, #36]	; 0x24
 801bc2e:	b920      	cbnz	r0, 801bc3a <_dtoa_r+0x3a>
 801bc30:	4ba7      	ldr	r3, [pc, #668]	; (801bed0 <_dtoa_r+0x2d0>)
 801bc32:	21ea      	movs	r1, #234	; 0xea
 801bc34:	48a7      	ldr	r0, [pc, #668]	; (801bed4 <_dtoa_r+0x2d4>)
 801bc36:	f002 f8bd 	bl	801ddb4 <__assert_func>
 801bc3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bc3e:	6005      	str	r5, [r0, #0]
 801bc40:	60c5      	str	r5, [r0, #12]
 801bc42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc44:	6819      	ldr	r1, [r3, #0]
 801bc46:	b151      	cbz	r1, 801bc5e <_dtoa_r+0x5e>
 801bc48:	685a      	ldr	r2, [r3, #4]
 801bc4a:	604a      	str	r2, [r1, #4]
 801bc4c:	2301      	movs	r3, #1
 801bc4e:	4093      	lsls	r3, r2
 801bc50:	608b      	str	r3, [r1, #8]
 801bc52:	4620      	mov	r0, r4
 801bc54:	f001 f99e 	bl	801cf94 <_Bfree>
 801bc58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bc5a:	2200      	movs	r2, #0
 801bc5c:	601a      	str	r2, [r3, #0]
 801bc5e:	1e3b      	subs	r3, r7, #0
 801bc60:	bfaa      	itet	ge
 801bc62:	2300      	movge	r3, #0
 801bc64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801bc68:	f8c8 3000 	strge.w	r3, [r8]
 801bc6c:	4b9a      	ldr	r3, [pc, #616]	; (801bed8 <_dtoa_r+0x2d8>)
 801bc6e:	bfbc      	itt	lt
 801bc70:	2201      	movlt	r2, #1
 801bc72:	f8c8 2000 	strlt.w	r2, [r8]
 801bc76:	ea33 030b 	bics.w	r3, r3, fp
 801bc7a:	d11b      	bne.n	801bcb4 <_dtoa_r+0xb4>
 801bc7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc7e:	f242 730f 	movw	r3, #9999	; 0x270f
 801bc82:	6013      	str	r3, [r2, #0]
 801bc84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bc88:	4333      	orrs	r3, r6
 801bc8a:	f000 8592 	beq.w	801c7b2 <_dtoa_r+0xbb2>
 801bc8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc90:	b963      	cbnz	r3, 801bcac <_dtoa_r+0xac>
 801bc92:	4b92      	ldr	r3, [pc, #584]	; (801bedc <_dtoa_r+0x2dc>)
 801bc94:	e022      	b.n	801bcdc <_dtoa_r+0xdc>
 801bc96:	4b92      	ldr	r3, [pc, #584]	; (801bee0 <_dtoa_r+0x2e0>)
 801bc98:	9301      	str	r3, [sp, #4]
 801bc9a:	3308      	adds	r3, #8
 801bc9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bc9e:	6013      	str	r3, [r2, #0]
 801bca0:	9801      	ldr	r0, [sp, #4]
 801bca2:	b013      	add	sp, #76	; 0x4c
 801bca4:	ecbd 8b04 	vpop	{d8-d9}
 801bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcac:	4b8b      	ldr	r3, [pc, #556]	; (801bedc <_dtoa_r+0x2dc>)
 801bcae:	9301      	str	r3, [sp, #4]
 801bcb0:	3303      	adds	r3, #3
 801bcb2:	e7f3      	b.n	801bc9c <_dtoa_r+0x9c>
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	4650      	mov	r0, sl
 801bcba:	4659      	mov	r1, fp
 801bcbc:	f7fd fec4 	bl	8019a48 <__aeabi_dcmpeq>
 801bcc0:	ec4b ab19 	vmov	d9, sl, fp
 801bcc4:	4680      	mov	r8, r0
 801bcc6:	b158      	cbz	r0, 801bce0 <_dtoa_r+0xe0>
 801bcc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bcca:	2301      	movs	r3, #1
 801bccc:	6013      	str	r3, [r2, #0]
 801bcce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bcd0:	2b00      	cmp	r3, #0
 801bcd2:	f000 856b 	beq.w	801c7ac <_dtoa_r+0xbac>
 801bcd6:	4883      	ldr	r0, [pc, #524]	; (801bee4 <_dtoa_r+0x2e4>)
 801bcd8:	6018      	str	r0, [r3, #0]
 801bcda:	1e43      	subs	r3, r0, #1
 801bcdc:	9301      	str	r3, [sp, #4]
 801bcde:	e7df      	b.n	801bca0 <_dtoa_r+0xa0>
 801bce0:	ec4b ab10 	vmov	d0, sl, fp
 801bce4:	aa10      	add	r2, sp, #64	; 0x40
 801bce6:	a911      	add	r1, sp, #68	; 0x44
 801bce8:	4620      	mov	r0, r4
 801bcea:	f001 fd01 	bl	801d6f0 <__d2b>
 801bcee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801bcf2:	ee08 0a10 	vmov	s16, r0
 801bcf6:	2d00      	cmp	r5, #0
 801bcf8:	f000 8084 	beq.w	801be04 <_dtoa_r+0x204>
 801bcfc:	ee19 3a90 	vmov	r3, s19
 801bd00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bd04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bd08:	4656      	mov	r6, sl
 801bd0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bd0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bd12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bd16:	4b74      	ldr	r3, [pc, #464]	; (801bee8 <_dtoa_r+0x2e8>)
 801bd18:	2200      	movs	r2, #0
 801bd1a:	4630      	mov	r0, r6
 801bd1c:	4639      	mov	r1, r7
 801bd1e:	f7fd fa73 	bl	8019208 <__aeabi_dsub>
 801bd22:	a365      	add	r3, pc, #404	; (adr r3, 801beb8 <_dtoa_r+0x2b8>)
 801bd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd28:	f7fd fc26 	bl	8019578 <__aeabi_dmul>
 801bd2c:	a364      	add	r3, pc, #400	; (adr r3, 801bec0 <_dtoa_r+0x2c0>)
 801bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd32:	f7fd fa6b 	bl	801920c <__adddf3>
 801bd36:	4606      	mov	r6, r0
 801bd38:	4628      	mov	r0, r5
 801bd3a:	460f      	mov	r7, r1
 801bd3c:	f7fd fbb2 	bl	80194a4 <__aeabi_i2d>
 801bd40:	a361      	add	r3, pc, #388	; (adr r3, 801bec8 <_dtoa_r+0x2c8>)
 801bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd46:	f7fd fc17 	bl	8019578 <__aeabi_dmul>
 801bd4a:	4602      	mov	r2, r0
 801bd4c:	460b      	mov	r3, r1
 801bd4e:	4630      	mov	r0, r6
 801bd50:	4639      	mov	r1, r7
 801bd52:	f7fd fa5b 	bl	801920c <__adddf3>
 801bd56:	4606      	mov	r6, r0
 801bd58:	460f      	mov	r7, r1
 801bd5a:	f7fd febd 	bl	8019ad8 <__aeabi_d2iz>
 801bd5e:	2200      	movs	r2, #0
 801bd60:	9000      	str	r0, [sp, #0]
 801bd62:	2300      	movs	r3, #0
 801bd64:	4630      	mov	r0, r6
 801bd66:	4639      	mov	r1, r7
 801bd68:	f7fd fe78 	bl	8019a5c <__aeabi_dcmplt>
 801bd6c:	b150      	cbz	r0, 801bd84 <_dtoa_r+0x184>
 801bd6e:	9800      	ldr	r0, [sp, #0]
 801bd70:	f7fd fb98 	bl	80194a4 <__aeabi_i2d>
 801bd74:	4632      	mov	r2, r6
 801bd76:	463b      	mov	r3, r7
 801bd78:	f7fd fe66 	bl	8019a48 <__aeabi_dcmpeq>
 801bd7c:	b910      	cbnz	r0, 801bd84 <_dtoa_r+0x184>
 801bd7e:	9b00      	ldr	r3, [sp, #0]
 801bd80:	3b01      	subs	r3, #1
 801bd82:	9300      	str	r3, [sp, #0]
 801bd84:	9b00      	ldr	r3, [sp, #0]
 801bd86:	2b16      	cmp	r3, #22
 801bd88:	d85a      	bhi.n	801be40 <_dtoa_r+0x240>
 801bd8a:	9a00      	ldr	r2, [sp, #0]
 801bd8c:	4b57      	ldr	r3, [pc, #348]	; (801beec <_dtoa_r+0x2ec>)
 801bd8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd96:	ec51 0b19 	vmov	r0, r1, d9
 801bd9a:	f7fd fe5f 	bl	8019a5c <__aeabi_dcmplt>
 801bd9e:	2800      	cmp	r0, #0
 801bda0:	d050      	beq.n	801be44 <_dtoa_r+0x244>
 801bda2:	9b00      	ldr	r3, [sp, #0]
 801bda4:	3b01      	subs	r3, #1
 801bda6:	9300      	str	r3, [sp, #0]
 801bda8:	2300      	movs	r3, #0
 801bdaa:	930b      	str	r3, [sp, #44]	; 0x2c
 801bdac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdae:	1b5d      	subs	r5, r3, r5
 801bdb0:	1e6b      	subs	r3, r5, #1
 801bdb2:	9305      	str	r3, [sp, #20]
 801bdb4:	bf45      	ittet	mi
 801bdb6:	f1c5 0301 	rsbmi	r3, r5, #1
 801bdba:	9304      	strmi	r3, [sp, #16]
 801bdbc:	2300      	movpl	r3, #0
 801bdbe:	2300      	movmi	r3, #0
 801bdc0:	bf4c      	ite	mi
 801bdc2:	9305      	strmi	r3, [sp, #20]
 801bdc4:	9304      	strpl	r3, [sp, #16]
 801bdc6:	9b00      	ldr	r3, [sp, #0]
 801bdc8:	2b00      	cmp	r3, #0
 801bdca:	db3d      	blt.n	801be48 <_dtoa_r+0x248>
 801bdcc:	9b05      	ldr	r3, [sp, #20]
 801bdce:	9a00      	ldr	r2, [sp, #0]
 801bdd0:	920a      	str	r2, [sp, #40]	; 0x28
 801bdd2:	4413      	add	r3, r2
 801bdd4:	9305      	str	r3, [sp, #20]
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	9307      	str	r3, [sp, #28]
 801bdda:	9b06      	ldr	r3, [sp, #24]
 801bddc:	2b09      	cmp	r3, #9
 801bdde:	f200 8089 	bhi.w	801bef4 <_dtoa_r+0x2f4>
 801bde2:	2b05      	cmp	r3, #5
 801bde4:	bfc4      	itt	gt
 801bde6:	3b04      	subgt	r3, #4
 801bde8:	9306      	strgt	r3, [sp, #24]
 801bdea:	9b06      	ldr	r3, [sp, #24]
 801bdec:	f1a3 0302 	sub.w	r3, r3, #2
 801bdf0:	bfcc      	ite	gt
 801bdf2:	2500      	movgt	r5, #0
 801bdf4:	2501      	movle	r5, #1
 801bdf6:	2b03      	cmp	r3, #3
 801bdf8:	f200 8087 	bhi.w	801bf0a <_dtoa_r+0x30a>
 801bdfc:	e8df f003 	tbb	[pc, r3]
 801be00:	59383a2d 	.word	0x59383a2d
 801be04:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801be08:	441d      	add	r5, r3
 801be0a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801be0e:	2b20      	cmp	r3, #32
 801be10:	bfc1      	itttt	gt
 801be12:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801be16:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801be1a:	fa0b f303 	lslgt.w	r3, fp, r3
 801be1e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801be22:	bfda      	itte	le
 801be24:	f1c3 0320 	rsble	r3, r3, #32
 801be28:	fa06 f003 	lslle.w	r0, r6, r3
 801be2c:	4318      	orrgt	r0, r3
 801be2e:	f7fd fb29 	bl	8019484 <__aeabi_ui2d>
 801be32:	2301      	movs	r3, #1
 801be34:	4606      	mov	r6, r0
 801be36:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801be3a:	3d01      	subs	r5, #1
 801be3c:	930e      	str	r3, [sp, #56]	; 0x38
 801be3e:	e76a      	b.n	801bd16 <_dtoa_r+0x116>
 801be40:	2301      	movs	r3, #1
 801be42:	e7b2      	b.n	801bdaa <_dtoa_r+0x1aa>
 801be44:	900b      	str	r0, [sp, #44]	; 0x2c
 801be46:	e7b1      	b.n	801bdac <_dtoa_r+0x1ac>
 801be48:	9b04      	ldr	r3, [sp, #16]
 801be4a:	9a00      	ldr	r2, [sp, #0]
 801be4c:	1a9b      	subs	r3, r3, r2
 801be4e:	9304      	str	r3, [sp, #16]
 801be50:	4253      	negs	r3, r2
 801be52:	9307      	str	r3, [sp, #28]
 801be54:	2300      	movs	r3, #0
 801be56:	930a      	str	r3, [sp, #40]	; 0x28
 801be58:	e7bf      	b.n	801bdda <_dtoa_r+0x1da>
 801be5a:	2300      	movs	r3, #0
 801be5c:	9308      	str	r3, [sp, #32]
 801be5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be60:	2b00      	cmp	r3, #0
 801be62:	dc55      	bgt.n	801bf10 <_dtoa_r+0x310>
 801be64:	2301      	movs	r3, #1
 801be66:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801be6a:	461a      	mov	r2, r3
 801be6c:	9209      	str	r2, [sp, #36]	; 0x24
 801be6e:	e00c      	b.n	801be8a <_dtoa_r+0x28a>
 801be70:	2301      	movs	r3, #1
 801be72:	e7f3      	b.n	801be5c <_dtoa_r+0x25c>
 801be74:	2300      	movs	r3, #0
 801be76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801be78:	9308      	str	r3, [sp, #32]
 801be7a:	9b00      	ldr	r3, [sp, #0]
 801be7c:	4413      	add	r3, r2
 801be7e:	9302      	str	r3, [sp, #8]
 801be80:	3301      	adds	r3, #1
 801be82:	2b01      	cmp	r3, #1
 801be84:	9303      	str	r3, [sp, #12]
 801be86:	bfb8      	it	lt
 801be88:	2301      	movlt	r3, #1
 801be8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801be8c:	2200      	movs	r2, #0
 801be8e:	6042      	str	r2, [r0, #4]
 801be90:	2204      	movs	r2, #4
 801be92:	f102 0614 	add.w	r6, r2, #20
 801be96:	429e      	cmp	r6, r3
 801be98:	6841      	ldr	r1, [r0, #4]
 801be9a:	d93d      	bls.n	801bf18 <_dtoa_r+0x318>
 801be9c:	4620      	mov	r0, r4
 801be9e:	f001 f839 	bl	801cf14 <_Balloc>
 801bea2:	9001      	str	r0, [sp, #4]
 801bea4:	2800      	cmp	r0, #0
 801bea6:	d13b      	bne.n	801bf20 <_dtoa_r+0x320>
 801bea8:	4b11      	ldr	r3, [pc, #68]	; (801bef0 <_dtoa_r+0x2f0>)
 801beaa:	4602      	mov	r2, r0
 801beac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801beb0:	e6c0      	b.n	801bc34 <_dtoa_r+0x34>
 801beb2:	2301      	movs	r3, #1
 801beb4:	e7df      	b.n	801be76 <_dtoa_r+0x276>
 801beb6:	bf00      	nop
 801beb8:	636f4361 	.word	0x636f4361
 801bebc:	3fd287a7 	.word	0x3fd287a7
 801bec0:	8b60c8b3 	.word	0x8b60c8b3
 801bec4:	3fc68a28 	.word	0x3fc68a28
 801bec8:	509f79fb 	.word	0x509f79fb
 801becc:	3fd34413 	.word	0x3fd34413
 801bed0:	08052ade 	.word	0x08052ade
 801bed4:	08052af5 	.word	0x08052af5
 801bed8:	7ff00000 	.word	0x7ff00000
 801bedc:	08052ada 	.word	0x08052ada
 801bee0:	08052ad1 	.word	0x08052ad1
 801bee4:	08052951 	.word	0x08052951
 801bee8:	3ff80000 	.word	0x3ff80000
 801beec:	08052c60 	.word	0x08052c60
 801bef0:	08052b50 	.word	0x08052b50
 801bef4:	2501      	movs	r5, #1
 801bef6:	2300      	movs	r3, #0
 801bef8:	9306      	str	r3, [sp, #24]
 801befa:	9508      	str	r5, [sp, #32]
 801befc:	f04f 33ff 	mov.w	r3, #4294967295
 801bf00:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bf04:	2200      	movs	r2, #0
 801bf06:	2312      	movs	r3, #18
 801bf08:	e7b0      	b.n	801be6c <_dtoa_r+0x26c>
 801bf0a:	2301      	movs	r3, #1
 801bf0c:	9308      	str	r3, [sp, #32]
 801bf0e:	e7f5      	b.n	801befc <_dtoa_r+0x2fc>
 801bf10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf12:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bf16:	e7b8      	b.n	801be8a <_dtoa_r+0x28a>
 801bf18:	3101      	adds	r1, #1
 801bf1a:	6041      	str	r1, [r0, #4]
 801bf1c:	0052      	lsls	r2, r2, #1
 801bf1e:	e7b8      	b.n	801be92 <_dtoa_r+0x292>
 801bf20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bf22:	9a01      	ldr	r2, [sp, #4]
 801bf24:	601a      	str	r2, [r3, #0]
 801bf26:	9b03      	ldr	r3, [sp, #12]
 801bf28:	2b0e      	cmp	r3, #14
 801bf2a:	f200 809d 	bhi.w	801c068 <_dtoa_r+0x468>
 801bf2e:	2d00      	cmp	r5, #0
 801bf30:	f000 809a 	beq.w	801c068 <_dtoa_r+0x468>
 801bf34:	9b00      	ldr	r3, [sp, #0]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	dd32      	ble.n	801bfa0 <_dtoa_r+0x3a0>
 801bf3a:	4ab7      	ldr	r2, [pc, #732]	; (801c218 <_dtoa_r+0x618>)
 801bf3c:	f003 030f 	and.w	r3, r3, #15
 801bf40:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bf44:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bf48:	9b00      	ldr	r3, [sp, #0]
 801bf4a:	05d8      	lsls	r0, r3, #23
 801bf4c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bf50:	d516      	bpl.n	801bf80 <_dtoa_r+0x380>
 801bf52:	4bb2      	ldr	r3, [pc, #712]	; (801c21c <_dtoa_r+0x61c>)
 801bf54:	ec51 0b19 	vmov	r0, r1, d9
 801bf58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bf5c:	f7fd fc36 	bl	80197cc <__aeabi_ddiv>
 801bf60:	f007 070f 	and.w	r7, r7, #15
 801bf64:	4682      	mov	sl, r0
 801bf66:	468b      	mov	fp, r1
 801bf68:	2503      	movs	r5, #3
 801bf6a:	4eac      	ldr	r6, [pc, #688]	; (801c21c <_dtoa_r+0x61c>)
 801bf6c:	b957      	cbnz	r7, 801bf84 <_dtoa_r+0x384>
 801bf6e:	4642      	mov	r2, r8
 801bf70:	464b      	mov	r3, r9
 801bf72:	4650      	mov	r0, sl
 801bf74:	4659      	mov	r1, fp
 801bf76:	f7fd fc29 	bl	80197cc <__aeabi_ddiv>
 801bf7a:	4682      	mov	sl, r0
 801bf7c:	468b      	mov	fp, r1
 801bf7e:	e028      	b.n	801bfd2 <_dtoa_r+0x3d2>
 801bf80:	2502      	movs	r5, #2
 801bf82:	e7f2      	b.n	801bf6a <_dtoa_r+0x36a>
 801bf84:	07f9      	lsls	r1, r7, #31
 801bf86:	d508      	bpl.n	801bf9a <_dtoa_r+0x39a>
 801bf88:	4640      	mov	r0, r8
 801bf8a:	4649      	mov	r1, r9
 801bf8c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bf90:	f7fd faf2 	bl	8019578 <__aeabi_dmul>
 801bf94:	3501      	adds	r5, #1
 801bf96:	4680      	mov	r8, r0
 801bf98:	4689      	mov	r9, r1
 801bf9a:	107f      	asrs	r7, r7, #1
 801bf9c:	3608      	adds	r6, #8
 801bf9e:	e7e5      	b.n	801bf6c <_dtoa_r+0x36c>
 801bfa0:	f000 809b 	beq.w	801c0da <_dtoa_r+0x4da>
 801bfa4:	9b00      	ldr	r3, [sp, #0]
 801bfa6:	4f9d      	ldr	r7, [pc, #628]	; (801c21c <_dtoa_r+0x61c>)
 801bfa8:	425e      	negs	r6, r3
 801bfaa:	4b9b      	ldr	r3, [pc, #620]	; (801c218 <_dtoa_r+0x618>)
 801bfac:	f006 020f 	and.w	r2, r6, #15
 801bfb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb8:	ec51 0b19 	vmov	r0, r1, d9
 801bfbc:	f7fd fadc 	bl	8019578 <__aeabi_dmul>
 801bfc0:	1136      	asrs	r6, r6, #4
 801bfc2:	4682      	mov	sl, r0
 801bfc4:	468b      	mov	fp, r1
 801bfc6:	2300      	movs	r3, #0
 801bfc8:	2502      	movs	r5, #2
 801bfca:	2e00      	cmp	r6, #0
 801bfcc:	d17a      	bne.n	801c0c4 <_dtoa_r+0x4c4>
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d1d3      	bne.n	801bf7a <_dtoa_r+0x37a>
 801bfd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f000 8082 	beq.w	801c0de <_dtoa_r+0x4de>
 801bfda:	4b91      	ldr	r3, [pc, #580]	; (801c220 <_dtoa_r+0x620>)
 801bfdc:	2200      	movs	r2, #0
 801bfde:	4650      	mov	r0, sl
 801bfe0:	4659      	mov	r1, fp
 801bfe2:	f7fd fd3b 	bl	8019a5c <__aeabi_dcmplt>
 801bfe6:	2800      	cmp	r0, #0
 801bfe8:	d079      	beq.n	801c0de <_dtoa_r+0x4de>
 801bfea:	9b03      	ldr	r3, [sp, #12]
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d076      	beq.n	801c0de <_dtoa_r+0x4de>
 801bff0:	9b02      	ldr	r3, [sp, #8]
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	dd36      	ble.n	801c064 <_dtoa_r+0x464>
 801bff6:	9b00      	ldr	r3, [sp, #0]
 801bff8:	4650      	mov	r0, sl
 801bffa:	4659      	mov	r1, fp
 801bffc:	1e5f      	subs	r7, r3, #1
 801bffe:	2200      	movs	r2, #0
 801c000:	4b88      	ldr	r3, [pc, #544]	; (801c224 <_dtoa_r+0x624>)
 801c002:	f7fd fab9 	bl	8019578 <__aeabi_dmul>
 801c006:	9e02      	ldr	r6, [sp, #8]
 801c008:	4682      	mov	sl, r0
 801c00a:	468b      	mov	fp, r1
 801c00c:	3501      	adds	r5, #1
 801c00e:	4628      	mov	r0, r5
 801c010:	f7fd fa48 	bl	80194a4 <__aeabi_i2d>
 801c014:	4652      	mov	r2, sl
 801c016:	465b      	mov	r3, fp
 801c018:	f7fd faae 	bl	8019578 <__aeabi_dmul>
 801c01c:	4b82      	ldr	r3, [pc, #520]	; (801c228 <_dtoa_r+0x628>)
 801c01e:	2200      	movs	r2, #0
 801c020:	f7fd f8f4 	bl	801920c <__adddf3>
 801c024:	46d0      	mov	r8, sl
 801c026:	46d9      	mov	r9, fp
 801c028:	4682      	mov	sl, r0
 801c02a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801c02e:	2e00      	cmp	r6, #0
 801c030:	d158      	bne.n	801c0e4 <_dtoa_r+0x4e4>
 801c032:	4b7e      	ldr	r3, [pc, #504]	; (801c22c <_dtoa_r+0x62c>)
 801c034:	2200      	movs	r2, #0
 801c036:	4640      	mov	r0, r8
 801c038:	4649      	mov	r1, r9
 801c03a:	f7fd f8e5 	bl	8019208 <__aeabi_dsub>
 801c03e:	4652      	mov	r2, sl
 801c040:	465b      	mov	r3, fp
 801c042:	4680      	mov	r8, r0
 801c044:	4689      	mov	r9, r1
 801c046:	f7fd fd27 	bl	8019a98 <__aeabi_dcmpgt>
 801c04a:	2800      	cmp	r0, #0
 801c04c:	f040 8295 	bne.w	801c57a <_dtoa_r+0x97a>
 801c050:	4652      	mov	r2, sl
 801c052:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801c056:	4640      	mov	r0, r8
 801c058:	4649      	mov	r1, r9
 801c05a:	f7fd fcff 	bl	8019a5c <__aeabi_dcmplt>
 801c05e:	2800      	cmp	r0, #0
 801c060:	f040 8289 	bne.w	801c576 <_dtoa_r+0x976>
 801c064:	ec5b ab19 	vmov	sl, fp, d9
 801c068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	f2c0 8148 	blt.w	801c300 <_dtoa_r+0x700>
 801c070:	9a00      	ldr	r2, [sp, #0]
 801c072:	2a0e      	cmp	r2, #14
 801c074:	f300 8144 	bgt.w	801c300 <_dtoa_r+0x700>
 801c078:	4b67      	ldr	r3, [pc, #412]	; (801c218 <_dtoa_r+0x618>)
 801c07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c07e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801c082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c084:	2b00      	cmp	r3, #0
 801c086:	f280 80d5 	bge.w	801c234 <_dtoa_r+0x634>
 801c08a:	9b03      	ldr	r3, [sp, #12]
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	f300 80d1 	bgt.w	801c234 <_dtoa_r+0x634>
 801c092:	f040 826f 	bne.w	801c574 <_dtoa_r+0x974>
 801c096:	4b65      	ldr	r3, [pc, #404]	; (801c22c <_dtoa_r+0x62c>)
 801c098:	2200      	movs	r2, #0
 801c09a:	4640      	mov	r0, r8
 801c09c:	4649      	mov	r1, r9
 801c09e:	f7fd fa6b 	bl	8019578 <__aeabi_dmul>
 801c0a2:	4652      	mov	r2, sl
 801c0a4:	465b      	mov	r3, fp
 801c0a6:	f7fd fced 	bl	8019a84 <__aeabi_dcmpge>
 801c0aa:	9e03      	ldr	r6, [sp, #12]
 801c0ac:	4637      	mov	r7, r6
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	f040 8245 	bne.w	801c53e <_dtoa_r+0x93e>
 801c0b4:	9d01      	ldr	r5, [sp, #4]
 801c0b6:	2331      	movs	r3, #49	; 0x31
 801c0b8:	f805 3b01 	strb.w	r3, [r5], #1
 801c0bc:	9b00      	ldr	r3, [sp, #0]
 801c0be:	3301      	adds	r3, #1
 801c0c0:	9300      	str	r3, [sp, #0]
 801c0c2:	e240      	b.n	801c546 <_dtoa_r+0x946>
 801c0c4:	07f2      	lsls	r2, r6, #31
 801c0c6:	d505      	bpl.n	801c0d4 <_dtoa_r+0x4d4>
 801c0c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c0cc:	f7fd fa54 	bl	8019578 <__aeabi_dmul>
 801c0d0:	3501      	adds	r5, #1
 801c0d2:	2301      	movs	r3, #1
 801c0d4:	1076      	asrs	r6, r6, #1
 801c0d6:	3708      	adds	r7, #8
 801c0d8:	e777      	b.n	801bfca <_dtoa_r+0x3ca>
 801c0da:	2502      	movs	r5, #2
 801c0dc:	e779      	b.n	801bfd2 <_dtoa_r+0x3d2>
 801c0de:	9f00      	ldr	r7, [sp, #0]
 801c0e0:	9e03      	ldr	r6, [sp, #12]
 801c0e2:	e794      	b.n	801c00e <_dtoa_r+0x40e>
 801c0e4:	9901      	ldr	r1, [sp, #4]
 801c0e6:	4b4c      	ldr	r3, [pc, #304]	; (801c218 <_dtoa_r+0x618>)
 801c0e8:	4431      	add	r1, r6
 801c0ea:	910d      	str	r1, [sp, #52]	; 0x34
 801c0ec:	9908      	ldr	r1, [sp, #32]
 801c0ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c0f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c0f6:	2900      	cmp	r1, #0
 801c0f8:	d043      	beq.n	801c182 <_dtoa_r+0x582>
 801c0fa:	494d      	ldr	r1, [pc, #308]	; (801c230 <_dtoa_r+0x630>)
 801c0fc:	2000      	movs	r0, #0
 801c0fe:	f7fd fb65 	bl	80197cc <__aeabi_ddiv>
 801c102:	4652      	mov	r2, sl
 801c104:	465b      	mov	r3, fp
 801c106:	f7fd f87f 	bl	8019208 <__aeabi_dsub>
 801c10a:	9d01      	ldr	r5, [sp, #4]
 801c10c:	4682      	mov	sl, r0
 801c10e:	468b      	mov	fp, r1
 801c110:	4649      	mov	r1, r9
 801c112:	4640      	mov	r0, r8
 801c114:	f7fd fce0 	bl	8019ad8 <__aeabi_d2iz>
 801c118:	4606      	mov	r6, r0
 801c11a:	f7fd f9c3 	bl	80194a4 <__aeabi_i2d>
 801c11e:	4602      	mov	r2, r0
 801c120:	460b      	mov	r3, r1
 801c122:	4640      	mov	r0, r8
 801c124:	4649      	mov	r1, r9
 801c126:	f7fd f86f 	bl	8019208 <__aeabi_dsub>
 801c12a:	3630      	adds	r6, #48	; 0x30
 801c12c:	f805 6b01 	strb.w	r6, [r5], #1
 801c130:	4652      	mov	r2, sl
 801c132:	465b      	mov	r3, fp
 801c134:	4680      	mov	r8, r0
 801c136:	4689      	mov	r9, r1
 801c138:	f7fd fc90 	bl	8019a5c <__aeabi_dcmplt>
 801c13c:	2800      	cmp	r0, #0
 801c13e:	d163      	bne.n	801c208 <_dtoa_r+0x608>
 801c140:	4642      	mov	r2, r8
 801c142:	464b      	mov	r3, r9
 801c144:	4936      	ldr	r1, [pc, #216]	; (801c220 <_dtoa_r+0x620>)
 801c146:	2000      	movs	r0, #0
 801c148:	f7fd f85e 	bl	8019208 <__aeabi_dsub>
 801c14c:	4652      	mov	r2, sl
 801c14e:	465b      	mov	r3, fp
 801c150:	f7fd fc84 	bl	8019a5c <__aeabi_dcmplt>
 801c154:	2800      	cmp	r0, #0
 801c156:	f040 80b5 	bne.w	801c2c4 <_dtoa_r+0x6c4>
 801c15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c15c:	429d      	cmp	r5, r3
 801c15e:	d081      	beq.n	801c064 <_dtoa_r+0x464>
 801c160:	4b30      	ldr	r3, [pc, #192]	; (801c224 <_dtoa_r+0x624>)
 801c162:	2200      	movs	r2, #0
 801c164:	4650      	mov	r0, sl
 801c166:	4659      	mov	r1, fp
 801c168:	f7fd fa06 	bl	8019578 <__aeabi_dmul>
 801c16c:	4b2d      	ldr	r3, [pc, #180]	; (801c224 <_dtoa_r+0x624>)
 801c16e:	4682      	mov	sl, r0
 801c170:	468b      	mov	fp, r1
 801c172:	4640      	mov	r0, r8
 801c174:	4649      	mov	r1, r9
 801c176:	2200      	movs	r2, #0
 801c178:	f7fd f9fe 	bl	8019578 <__aeabi_dmul>
 801c17c:	4680      	mov	r8, r0
 801c17e:	4689      	mov	r9, r1
 801c180:	e7c6      	b.n	801c110 <_dtoa_r+0x510>
 801c182:	4650      	mov	r0, sl
 801c184:	4659      	mov	r1, fp
 801c186:	f7fd f9f7 	bl	8019578 <__aeabi_dmul>
 801c18a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c18c:	9d01      	ldr	r5, [sp, #4]
 801c18e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c190:	4682      	mov	sl, r0
 801c192:	468b      	mov	fp, r1
 801c194:	4649      	mov	r1, r9
 801c196:	4640      	mov	r0, r8
 801c198:	f7fd fc9e 	bl	8019ad8 <__aeabi_d2iz>
 801c19c:	4606      	mov	r6, r0
 801c19e:	f7fd f981 	bl	80194a4 <__aeabi_i2d>
 801c1a2:	3630      	adds	r6, #48	; 0x30
 801c1a4:	4602      	mov	r2, r0
 801c1a6:	460b      	mov	r3, r1
 801c1a8:	4640      	mov	r0, r8
 801c1aa:	4649      	mov	r1, r9
 801c1ac:	f7fd f82c 	bl	8019208 <__aeabi_dsub>
 801c1b0:	f805 6b01 	strb.w	r6, [r5], #1
 801c1b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c1b6:	429d      	cmp	r5, r3
 801c1b8:	4680      	mov	r8, r0
 801c1ba:	4689      	mov	r9, r1
 801c1bc:	f04f 0200 	mov.w	r2, #0
 801c1c0:	d124      	bne.n	801c20c <_dtoa_r+0x60c>
 801c1c2:	4b1b      	ldr	r3, [pc, #108]	; (801c230 <_dtoa_r+0x630>)
 801c1c4:	4650      	mov	r0, sl
 801c1c6:	4659      	mov	r1, fp
 801c1c8:	f7fd f820 	bl	801920c <__adddf3>
 801c1cc:	4602      	mov	r2, r0
 801c1ce:	460b      	mov	r3, r1
 801c1d0:	4640      	mov	r0, r8
 801c1d2:	4649      	mov	r1, r9
 801c1d4:	f7fd fc60 	bl	8019a98 <__aeabi_dcmpgt>
 801c1d8:	2800      	cmp	r0, #0
 801c1da:	d173      	bne.n	801c2c4 <_dtoa_r+0x6c4>
 801c1dc:	4652      	mov	r2, sl
 801c1de:	465b      	mov	r3, fp
 801c1e0:	4913      	ldr	r1, [pc, #76]	; (801c230 <_dtoa_r+0x630>)
 801c1e2:	2000      	movs	r0, #0
 801c1e4:	f7fd f810 	bl	8019208 <__aeabi_dsub>
 801c1e8:	4602      	mov	r2, r0
 801c1ea:	460b      	mov	r3, r1
 801c1ec:	4640      	mov	r0, r8
 801c1ee:	4649      	mov	r1, r9
 801c1f0:	f7fd fc34 	bl	8019a5c <__aeabi_dcmplt>
 801c1f4:	2800      	cmp	r0, #0
 801c1f6:	f43f af35 	beq.w	801c064 <_dtoa_r+0x464>
 801c1fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c1fc:	1e6b      	subs	r3, r5, #1
 801c1fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801c200:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c204:	2b30      	cmp	r3, #48	; 0x30
 801c206:	d0f8      	beq.n	801c1fa <_dtoa_r+0x5fa>
 801c208:	9700      	str	r7, [sp, #0]
 801c20a:	e049      	b.n	801c2a0 <_dtoa_r+0x6a0>
 801c20c:	4b05      	ldr	r3, [pc, #20]	; (801c224 <_dtoa_r+0x624>)
 801c20e:	f7fd f9b3 	bl	8019578 <__aeabi_dmul>
 801c212:	4680      	mov	r8, r0
 801c214:	4689      	mov	r9, r1
 801c216:	e7bd      	b.n	801c194 <_dtoa_r+0x594>
 801c218:	08052c60 	.word	0x08052c60
 801c21c:	08052c38 	.word	0x08052c38
 801c220:	3ff00000 	.word	0x3ff00000
 801c224:	40240000 	.word	0x40240000
 801c228:	401c0000 	.word	0x401c0000
 801c22c:	40140000 	.word	0x40140000
 801c230:	3fe00000 	.word	0x3fe00000
 801c234:	9d01      	ldr	r5, [sp, #4]
 801c236:	4656      	mov	r6, sl
 801c238:	465f      	mov	r7, fp
 801c23a:	4642      	mov	r2, r8
 801c23c:	464b      	mov	r3, r9
 801c23e:	4630      	mov	r0, r6
 801c240:	4639      	mov	r1, r7
 801c242:	f7fd fac3 	bl	80197cc <__aeabi_ddiv>
 801c246:	f7fd fc47 	bl	8019ad8 <__aeabi_d2iz>
 801c24a:	4682      	mov	sl, r0
 801c24c:	f7fd f92a 	bl	80194a4 <__aeabi_i2d>
 801c250:	4642      	mov	r2, r8
 801c252:	464b      	mov	r3, r9
 801c254:	f7fd f990 	bl	8019578 <__aeabi_dmul>
 801c258:	4602      	mov	r2, r0
 801c25a:	460b      	mov	r3, r1
 801c25c:	4630      	mov	r0, r6
 801c25e:	4639      	mov	r1, r7
 801c260:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c264:	f7fc ffd0 	bl	8019208 <__aeabi_dsub>
 801c268:	f805 6b01 	strb.w	r6, [r5], #1
 801c26c:	9e01      	ldr	r6, [sp, #4]
 801c26e:	9f03      	ldr	r7, [sp, #12]
 801c270:	1bae      	subs	r6, r5, r6
 801c272:	42b7      	cmp	r7, r6
 801c274:	4602      	mov	r2, r0
 801c276:	460b      	mov	r3, r1
 801c278:	d135      	bne.n	801c2e6 <_dtoa_r+0x6e6>
 801c27a:	f7fc ffc7 	bl	801920c <__adddf3>
 801c27e:	4642      	mov	r2, r8
 801c280:	464b      	mov	r3, r9
 801c282:	4606      	mov	r6, r0
 801c284:	460f      	mov	r7, r1
 801c286:	f7fd fc07 	bl	8019a98 <__aeabi_dcmpgt>
 801c28a:	b9d0      	cbnz	r0, 801c2c2 <_dtoa_r+0x6c2>
 801c28c:	4642      	mov	r2, r8
 801c28e:	464b      	mov	r3, r9
 801c290:	4630      	mov	r0, r6
 801c292:	4639      	mov	r1, r7
 801c294:	f7fd fbd8 	bl	8019a48 <__aeabi_dcmpeq>
 801c298:	b110      	cbz	r0, 801c2a0 <_dtoa_r+0x6a0>
 801c29a:	f01a 0f01 	tst.w	sl, #1
 801c29e:	d110      	bne.n	801c2c2 <_dtoa_r+0x6c2>
 801c2a0:	4620      	mov	r0, r4
 801c2a2:	ee18 1a10 	vmov	r1, s16
 801c2a6:	f000 fe75 	bl	801cf94 <_Bfree>
 801c2aa:	2300      	movs	r3, #0
 801c2ac:	9800      	ldr	r0, [sp, #0]
 801c2ae:	702b      	strb	r3, [r5, #0]
 801c2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c2b2:	3001      	adds	r0, #1
 801c2b4:	6018      	str	r0, [r3, #0]
 801c2b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	f43f acf1 	beq.w	801bca0 <_dtoa_r+0xa0>
 801c2be:	601d      	str	r5, [r3, #0]
 801c2c0:	e4ee      	b.n	801bca0 <_dtoa_r+0xa0>
 801c2c2:	9f00      	ldr	r7, [sp, #0]
 801c2c4:	462b      	mov	r3, r5
 801c2c6:	461d      	mov	r5, r3
 801c2c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c2cc:	2a39      	cmp	r2, #57	; 0x39
 801c2ce:	d106      	bne.n	801c2de <_dtoa_r+0x6de>
 801c2d0:	9a01      	ldr	r2, [sp, #4]
 801c2d2:	429a      	cmp	r2, r3
 801c2d4:	d1f7      	bne.n	801c2c6 <_dtoa_r+0x6c6>
 801c2d6:	9901      	ldr	r1, [sp, #4]
 801c2d8:	2230      	movs	r2, #48	; 0x30
 801c2da:	3701      	adds	r7, #1
 801c2dc:	700a      	strb	r2, [r1, #0]
 801c2de:	781a      	ldrb	r2, [r3, #0]
 801c2e0:	3201      	adds	r2, #1
 801c2e2:	701a      	strb	r2, [r3, #0]
 801c2e4:	e790      	b.n	801c208 <_dtoa_r+0x608>
 801c2e6:	4ba6      	ldr	r3, [pc, #664]	; (801c580 <_dtoa_r+0x980>)
 801c2e8:	2200      	movs	r2, #0
 801c2ea:	f7fd f945 	bl	8019578 <__aeabi_dmul>
 801c2ee:	2200      	movs	r2, #0
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	4606      	mov	r6, r0
 801c2f4:	460f      	mov	r7, r1
 801c2f6:	f7fd fba7 	bl	8019a48 <__aeabi_dcmpeq>
 801c2fa:	2800      	cmp	r0, #0
 801c2fc:	d09d      	beq.n	801c23a <_dtoa_r+0x63a>
 801c2fe:	e7cf      	b.n	801c2a0 <_dtoa_r+0x6a0>
 801c300:	9a08      	ldr	r2, [sp, #32]
 801c302:	2a00      	cmp	r2, #0
 801c304:	f000 80d7 	beq.w	801c4b6 <_dtoa_r+0x8b6>
 801c308:	9a06      	ldr	r2, [sp, #24]
 801c30a:	2a01      	cmp	r2, #1
 801c30c:	f300 80ba 	bgt.w	801c484 <_dtoa_r+0x884>
 801c310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c312:	2a00      	cmp	r2, #0
 801c314:	f000 80b2 	beq.w	801c47c <_dtoa_r+0x87c>
 801c318:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c31c:	9e07      	ldr	r6, [sp, #28]
 801c31e:	9d04      	ldr	r5, [sp, #16]
 801c320:	9a04      	ldr	r2, [sp, #16]
 801c322:	441a      	add	r2, r3
 801c324:	9204      	str	r2, [sp, #16]
 801c326:	9a05      	ldr	r2, [sp, #20]
 801c328:	2101      	movs	r1, #1
 801c32a:	441a      	add	r2, r3
 801c32c:	4620      	mov	r0, r4
 801c32e:	9205      	str	r2, [sp, #20]
 801c330:	f000 ff32 	bl	801d198 <__i2b>
 801c334:	4607      	mov	r7, r0
 801c336:	2d00      	cmp	r5, #0
 801c338:	dd0c      	ble.n	801c354 <_dtoa_r+0x754>
 801c33a:	9b05      	ldr	r3, [sp, #20]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	dd09      	ble.n	801c354 <_dtoa_r+0x754>
 801c340:	42ab      	cmp	r3, r5
 801c342:	9a04      	ldr	r2, [sp, #16]
 801c344:	bfa8      	it	ge
 801c346:	462b      	movge	r3, r5
 801c348:	1ad2      	subs	r2, r2, r3
 801c34a:	9204      	str	r2, [sp, #16]
 801c34c:	9a05      	ldr	r2, [sp, #20]
 801c34e:	1aed      	subs	r5, r5, r3
 801c350:	1ad3      	subs	r3, r2, r3
 801c352:	9305      	str	r3, [sp, #20]
 801c354:	9b07      	ldr	r3, [sp, #28]
 801c356:	b31b      	cbz	r3, 801c3a0 <_dtoa_r+0x7a0>
 801c358:	9b08      	ldr	r3, [sp, #32]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	f000 80af 	beq.w	801c4be <_dtoa_r+0x8be>
 801c360:	2e00      	cmp	r6, #0
 801c362:	dd13      	ble.n	801c38c <_dtoa_r+0x78c>
 801c364:	4639      	mov	r1, r7
 801c366:	4632      	mov	r2, r6
 801c368:	4620      	mov	r0, r4
 801c36a:	f000 ffd5 	bl	801d318 <__pow5mult>
 801c36e:	ee18 2a10 	vmov	r2, s16
 801c372:	4601      	mov	r1, r0
 801c374:	4607      	mov	r7, r0
 801c376:	4620      	mov	r0, r4
 801c378:	f000 ff24 	bl	801d1c4 <__multiply>
 801c37c:	ee18 1a10 	vmov	r1, s16
 801c380:	4680      	mov	r8, r0
 801c382:	4620      	mov	r0, r4
 801c384:	f000 fe06 	bl	801cf94 <_Bfree>
 801c388:	ee08 8a10 	vmov	s16, r8
 801c38c:	9b07      	ldr	r3, [sp, #28]
 801c38e:	1b9a      	subs	r2, r3, r6
 801c390:	d006      	beq.n	801c3a0 <_dtoa_r+0x7a0>
 801c392:	ee18 1a10 	vmov	r1, s16
 801c396:	4620      	mov	r0, r4
 801c398:	f000 ffbe 	bl	801d318 <__pow5mult>
 801c39c:	ee08 0a10 	vmov	s16, r0
 801c3a0:	2101      	movs	r1, #1
 801c3a2:	4620      	mov	r0, r4
 801c3a4:	f000 fef8 	bl	801d198 <__i2b>
 801c3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	4606      	mov	r6, r0
 801c3ae:	f340 8088 	ble.w	801c4c2 <_dtoa_r+0x8c2>
 801c3b2:	461a      	mov	r2, r3
 801c3b4:	4601      	mov	r1, r0
 801c3b6:	4620      	mov	r0, r4
 801c3b8:	f000 ffae 	bl	801d318 <__pow5mult>
 801c3bc:	9b06      	ldr	r3, [sp, #24]
 801c3be:	2b01      	cmp	r3, #1
 801c3c0:	4606      	mov	r6, r0
 801c3c2:	f340 8081 	ble.w	801c4c8 <_dtoa_r+0x8c8>
 801c3c6:	f04f 0800 	mov.w	r8, #0
 801c3ca:	6933      	ldr	r3, [r6, #16]
 801c3cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c3d0:	6918      	ldr	r0, [r3, #16]
 801c3d2:	f000 fe91 	bl	801d0f8 <__hi0bits>
 801c3d6:	f1c0 0020 	rsb	r0, r0, #32
 801c3da:	9b05      	ldr	r3, [sp, #20]
 801c3dc:	4418      	add	r0, r3
 801c3de:	f010 001f 	ands.w	r0, r0, #31
 801c3e2:	f000 8092 	beq.w	801c50a <_dtoa_r+0x90a>
 801c3e6:	f1c0 0320 	rsb	r3, r0, #32
 801c3ea:	2b04      	cmp	r3, #4
 801c3ec:	f340 808a 	ble.w	801c504 <_dtoa_r+0x904>
 801c3f0:	f1c0 001c 	rsb	r0, r0, #28
 801c3f4:	9b04      	ldr	r3, [sp, #16]
 801c3f6:	4403      	add	r3, r0
 801c3f8:	9304      	str	r3, [sp, #16]
 801c3fa:	9b05      	ldr	r3, [sp, #20]
 801c3fc:	4403      	add	r3, r0
 801c3fe:	4405      	add	r5, r0
 801c400:	9305      	str	r3, [sp, #20]
 801c402:	9b04      	ldr	r3, [sp, #16]
 801c404:	2b00      	cmp	r3, #0
 801c406:	dd07      	ble.n	801c418 <_dtoa_r+0x818>
 801c408:	ee18 1a10 	vmov	r1, s16
 801c40c:	461a      	mov	r2, r3
 801c40e:	4620      	mov	r0, r4
 801c410:	f000 ffdc 	bl	801d3cc <__lshift>
 801c414:	ee08 0a10 	vmov	s16, r0
 801c418:	9b05      	ldr	r3, [sp, #20]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	dd05      	ble.n	801c42a <_dtoa_r+0x82a>
 801c41e:	4631      	mov	r1, r6
 801c420:	461a      	mov	r2, r3
 801c422:	4620      	mov	r0, r4
 801c424:	f000 ffd2 	bl	801d3cc <__lshift>
 801c428:	4606      	mov	r6, r0
 801c42a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d06e      	beq.n	801c50e <_dtoa_r+0x90e>
 801c430:	ee18 0a10 	vmov	r0, s16
 801c434:	4631      	mov	r1, r6
 801c436:	f001 f839 	bl	801d4ac <__mcmp>
 801c43a:	2800      	cmp	r0, #0
 801c43c:	da67      	bge.n	801c50e <_dtoa_r+0x90e>
 801c43e:	9b00      	ldr	r3, [sp, #0]
 801c440:	3b01      	subs	r3, #1
 801c442:	ee18 1a10 	vmov	r1, s16
 801c446:	9300      	str	r3, [sp, #0]
 801c448:	220a      	movs	r2, #10
 801c44a:	2300      	movs	r3, #0
 801c44c:	4620      	mov	r0, r4
 801c44e:	f000 fdc3 	bl	801cfd8 <__multadd>
 801c452:	9b08      	ldr	r3, [sp, #32]
 801c454:	ee08 0a10 	vmov	s16, r0
 801c458:	2b00      	cmp	r3, #0
 801c45a:	f000 81b1 	beq.w	801c7c0 <_dtoa_r+0xbc0>
 801c45e:	2300      	movs	r3, #0
 801c460:	4639      	mov	r1, r7
 801c462:	220a      	movs	r2, #10
 801c464:	4620      	mov	r0, r4
 801c466:	f000 fdb7 	bl	801cfd8 <__multadd>
 801c46a:	9b02      	ldr	r3, [sp, #8]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	4607      	mov	r7, r0
 801c470:	f300 808e 	bgt.w	801c590 <_dtoa_r+0x990>
 801c474:	9b06      	ldr	r3, [sp, #24]
 801c476:	2b02      	cmp	r3, #2
 801c478:	dc51      	bgt.n	801c51e <_dtoa_r+0x91e>
 801c47a:	e089      	b.n	801c590 <_dtoa_r+0x990>
 801c47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c47e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c482:	e74b      	b.n	801c31c <_dtoa_r+0x71c>
 801c484:	9b03      	ldr	r3, [sp, #12]
 801c486:	1e5e      	subs	r6, r3, #1
 801c488:	9b07      	ldr	r3, [sp, #28]
 801c48a:	42b3      	cmp	r3, r6
 801c48c:	bfbf      	itttt	lt
 801c48e:	9b07      	ldrlt	r3, [sp, #28]
 801c490:	9607      	strlt	r6, [sp, #28]
 801c492:	1af2      	sublt	r2, r6, r3
 801c494:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c496:	bfb6      	itet	lt
 801c498:	189b      	addlt	r3, r3, r2
 801c49a:	1b9e      	subge	r6, r3, r6
 801c49c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c49e:	9b03      	ldr	r3, [sp, #12]
 801c4a0:	bfb8      	it	lt
 801c4a2:	2600      	movlt	r6, #0
 801c4a4:	2b00      	cmp	r3, #0
 801c4a6:	bfb7      	itett	lt
 801c4a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c4ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c4b0:	1a9d      	sublt	r5, r3, r2
 801c4b2:	2300      	movlt	r3, #0
 801c4b4:	e734      	b.n	801c320 <_dtoa_r+0x720>
 801c4b6:	9e07      	ldr	r6, [sp, #28]
 801c4b8:	9d04      	ldr	r5, [sp, #16]
 801c4ba:	9f08      	ldr	r7, [sp, #32]
 801c4bc:	e73b      	b.n	801c336 <_dtoa_r+0x736>
 801c4be:	9a07      	ldr	r2, [sp, #28]
 801c4c0:	e767      	b.n	801c392 <_dtoa_r+0x792>
 801c4c2:	9b06      	ldr	r3, [sp, #24]
 801c4c4:	2b01      	cmp	r3, #1
 801c4c6:	dc18      	bgt.n	801c4fa <_dtoa_r+0x8fa>
 801c4c8:	f1ba 0f00 	cmp.w	sl, #0
 801c4cc:	d115      	bne.n	801c4fa <_dtoa_r+0x8fa>
 801c4ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c4d2:	b993      	cbnz	r3, 801c4fa <_dtoa_r+0x8fa>
 801c4d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c4d8:	0d1b      	lsrs	r3, r3, #20
 801c4da:	051b      	lsls	r3, r3, #20
 801c4dc:	b183      	cbz	r3, 801c500 <_dtoa_r+0x900>
 801c4de:	9b04      	ldr	r3, [sp, #16]
 801c4e0:	3301      	adds	r3, #1
 801c4e2:	9304      	str	r3, [sp, #16]
 801c4e4:	9b05      	ldr	r3, [sp, #20]
 801c4e6:	3301      	adds	r3, #1
 801c4e8:	9305      	str	r3, [sp, #20]
 801c4ea:	f04f 0801 	mov.w	r8, #1
 801c4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	f47f af6a 	bne.w	801c3ca <_dtoa_r+0x7ca>
 801c4f6:	2001      	movs	r0, #1
 801c4f8:	e76f      	b.n	801c3da <_dtoa_r+0x7da>
 801c4fa:	f04f 0800 	mov.w	r8, #0
 801c4fe:	e7f6      	b.n	801c4ee <_dtoa_r+0x8ee>
 801c500:	4698      	mov	r8, r3
 801c502:	e7f4      	b.n	801c4ee <_dtoa_r+0x8ee>
 801c504:	f43f af7d 	beq.w	801c402 <_dtoa_r+0x802>
 801c508:	4618      	mov	r0, r3
 801c50a:	301c      	adds	r0, #28
 801c50c:	e772      	b.n	801c3f4 <_dtoa_r+0x7f4>
 801c50e:	9b03      	ldr	r3, [sp, #12]
 801c510:	2b00      	cmp	r3, #0
 801c512:	dc37      	bgt.n	801c584 <_dtoa_r+0x984>
 801c514:	9b06      	ldr	r3, [sp, #24]
 801c516:	2b02      	cmp	r3, #2
 801c518:	dd34      	ble.n	801c584 <_dtoa_r+0x984>
 801c51a:	9b03      	ldr	r3, [sp, #12]
 801c51c:	9302      	str	r3, [sp, #8]
 801c51e:	9b02      	ldr	r3, [sp, #8]
 801c520:	b96b      	cbnz	r3, 801c53e <_dtoa_r+0x93e>
 801c522:	4631      	mov	r1, r6
 801c524:	2205      	movs	r2, #5
 801c526:	4620      	mov	r0, r4
 801c528:	f000 fd56 	bl	801cfd8 <__multadd>
 801c52c:	4601      	mov	r1, r0
 801c52e:	4606      	mov	r6, r0
 801c530:	ee18 0a10 	vmov	r0, s16
 801c534:	f000 ffba 	bl	801d4ac <__mcmp>
 801c538:	2800      	cmp	r0, #0
 801c53a:	f73f adbb 	bgt.w	801c0b4 <_dtoa_r+0x4b4>
 801c53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c540:	9d01      	ldr	r5, [sp, #4]
 801c542:	43db      	mvns	r3, r3
 801c544:	9300      	str	r3, [sp, #0]
 801c546:	f04f 0800 	mov.w	r8, #0
 801c54a:	4631      	mov	r1, r6
 801c54c:	4620      	mov	r0, r4
 801c54e:	f000 fd21 	bl	801cf94 <_Bfree>
 801c552:	2f00      	cmp	r7, #0
 801c554:	f43f aea4 	beq.w	801c2a0 <_dtoa_r+0x6a0>
 801c558:	f1b8 0f00 	cmp.w	r8, #0
 801c55c:	d005      	beq.n	801c56a <_dtoa_r+0x96a>
 801c55e:	45b8      	cmp	r8, r7
 801c560:	d003      	beq.n	801c56a <_dtoa_r+0x96a>
 801c562:	4641      	mov	r1, r8
 801c564:	4620      	mov	r0, r4
 801c566:	f000 fd15 	bl	801cf94 <_Bfree>
 801c56a:	4639      	mov	r1, r7
 801c56c:	4620      	mov	r0, r4
 801c56e:	f000 fd11 	bl	801cf94 <_Bfree>
 801c572:	e695      	b.n	801c2a0 <_dtoa_r+0x6a0>
 801c574:	2600      	movs	r6, #0
 801c576:	4637      	mov	r7, r6
 801c578:	e7e1      	b.n	801c53e <_dtoa_r+0x93e>
 801c57a:	9700      	str	r7, [sp, #0]
 801c57c:	4637      	mov	r7, r6
 801c57e:	e599      	b.n	801c0b4 <_dtoa_r+0x4b4>
 801c580:	40240000 	.word	0x40240000
 801c584:	9b08      	ldr	r3, [sp, #32]
 801c586:	2b00      	cmp	r3, #0
 801c588:	f000 80ca 	beq.w	801c720 <_dtoa_r+0xb20>
 801c58c:	9b03      	ldr	r3, [sp, #12]
 801c58e:	9302      	str	r3, [sp, #8]
 801c590:	2d00      	cmp	r5, #0
 801c592:	dd05      	ble.n	801c5a0 <_dtoa_r+0x9a0>
 801c594:	4639      	mov	r1, r7
 801c596:	462a      	mov	r2, r5
 801c598:	4620      	mov	r0, r4
 801c59a:	f000 ff17 	bl	801d3cc <__lshift>
 801c59e:	4607      	mov	r7, r0
 801c5a0:	f1b8 0f00 	cmp.w	r8, #0
 801c5a4:	d05b      	beq.n	801c65e <_dtoa_r+0xa5e>
 801c5a6:	6879      	ldr	r1, [r7, #4]
 801c5a8:	4620      	mov	r0, r4
 801c5aa:	f000 fcb3 	bl	801cf14 <_Balloc>
 801c5ae:	4605      	mov	r5, r0
 801c5b0:	b928      	cbnz	r0, 801c5be <_dtoa_r+0x9be>
 801c5b2:	4b87      	ldr	r3, [pc, #540]	; (801c7d0 <_dtoa_r+0xbd0>)
 801c5b4:	4602      	mov	r2, r0
 801c5b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c5ba:	f7ff bb3b 	b.w	801bc34 <_dtoa_r+0x34>
 801c5be:	693a      	ldr	r2, [r7, #16]
 801c5c0:	3202      	adds	r2, #2
 801c5c2:	0092      	lsls	r2, r2, #2
 801c5c4:	f107 010c 	add.w	r1, r7, #12
 801c5c8:	300c      	adds	r0, #12
 801c5ca:	f000 fc95 	bl	801cef8 <memcpy>
 801c5ce:	2201      	movs	r2, #1
 801c5d0:	4629      	mov	r1, r5
 801c5d2:	4620      	mov	r0, r4
 801c5d4:	f000 fefa 	bl	801d3cc <__lshift>
 801c5d8:	9b01      	ldr	r3, [sp, #4]
 801c5da:	f103 0901 	add.w	r9, r3, #1
 801c5de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c5e2:	4413      	add	r3, r2
 801c5e4:	9305      	str	r3, [sp, #20]
 801c5e6:	f00a 0301 	and.w	r3, sl, #1
 801c5ea:	46b8      	mov	r8, r7
 801c5ec:	9304      	str	r3, [sp, #16]
 801c5ee:	4607      	mov	r7, r0
 801c5f0:	4631      	mov	r1, r6
 801c5f2:	ee18 0a10 	vmov	r0, s16
 801c5f6:	f7ff fa75 	bl	801bae4 <quorem>
 801c5fa:	4641      	mov	r1, r8
 801c5fc:	9002      	str	r0, [sp, #8]
 801c5fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c602:	ee18 0a10 	vmov	r0, s16
 801c606:	f000 ff51 	bl	801d4ac <__mcmp>
 801c60a:	463a      	mov	r2, r7
 801c60c:	9003      	str	r0, [sp, #12]
 801c60e:	4631      	mov	r1, r6
 801c610:	4620      	mov	r0, r4
 801c612:	f000 ff67 	bl	801d4e4 <__mdiff>
 801c616:	68c2      	ldr	r2, [r0, #12]
 801c618:	f109 3bff 	add.w	fp, r9, #4294967295
 801c61c:	4605      	mov	r5, r0
 801c61e:	bb02      	cbnz	r2, 801c662 <_dtoa_r+0xa62>
 801c620:	4601      	mov	r1, r0
 801c622:	ee18 0a10 	vmov	r0, s16
 801c626:	f000 ff41 	bl	801d4ac <__mcmp>
 801c62a:	4602      	mov	r2, r0
 801c62c:	4629      	mov	r1, r5
 801c62e:	4620      	mov	r0, r4
 801c630:	9207      	str	r2, [sp, #28]
 801c632:	f000 fcaf 	bl	801cf94 <_Bfree>
 801c636:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c63a:	ea43 0102 	orr.w	r1, r3, r2
 801c63e:	9b04      	ldr	r3, [sp, #16]
 801c640:	430b      	orrs	r3, r1
 801c642:	464d      	mov	r5, r9
 801c644:	d10f      	bne.n	801c666 <_dtoa_r+0xa66>
 801c646:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c64a:	d02a      	beq.n	801c6a2 <_dtoa_r+0xaa2>
 801c64c:	9b03      	ldr	r3, [sp, #12]
 801c64e:	2b00      	cmp	r3, #0
 801c650:	dd02      	ble.n	801c658 <_dtoa_r+0xa58>
 801c652:	9b02      	ldr	r3, [sp, #8]
 801c654:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c658:	f88b a000 	strb.w	sl, [fp]
 801c65c:	e775      	b.n	801c54a <_dtoa_r+0x94a>
 801c65e:	4638      	mov	r0, r7
 801c660:	e7ba      	b.n	801c5d8 <_dtoa_r+0x9d8>
 801c662:	2201      	movs	r2, #1
 801c664:	e7e2      	b.n	801c62c <_dtoa_r+0xa2c>
 801c666:	9b03      	ldr	r3, [sp, #12]
 801c668:	2b00      	cmp	r3, #0
 801c66a:	db04      	blt.n	801c676 <_dtoa_r+0xa76>
 801c66c:	9906      	ldr	r1, [sp, #24]
 801c66e:	430b      	orrs	r3, r1
 801c670:	9904      	ldr	r1, [sp, #16]
 801c672:	430b      	orrs	r3, r1
 801c674:	d122      	bne.n	801c6bc <_dtoa_r+0xabc>
 801c676:	2a00      	cmp	r2, #0
 801c678:	ddee      	ble.n	801c658 <_dtoa_r+0xa58>
 801c67a:	ee18 1a10 	vmov	r1, s16
 801c67e:	2201      	movs	r2, #1
 801c680:	4620      	mov	r0, r4
 801c682:	f000 fea3 	bl	801d3cc <__lshift>
 801c686:	4631      	mov	r1, r6
 801c688:	ee08 0a10 	vmov	s16, r0
 801c68c:	f000 ff0e 	bl	801d4ac <__mcmp>
 801c690:	2800      	cmp	r0, #0
 801c692:	dc03      	bgt.n	801c69c <_dtoa_r+0xa9c>
 801c694:	d1e0      	bne.n	801c658 <_dtoa_r+0xa58>
 801c696:	f01a 0f01 	tst.w	sl, #1
 801c69a:	d0dd      	beq.n	801c658 <_dtoa_r+0xa58>
 801c69c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c6a0:	d1d7      	bne.n	801c652 <_dtoa_r+0xa52>
 801c6a2:	2339      	movs	r3, #57	; 0x39
 801c6a4:	f88b 3000 	strb.w	r3, [fp]
 801c6a8:	462b      	mov	r3, r5
 801c6aa:	461d      	mov	r5, r3
 801c6ac:	3b01      	subs	r3, #1
 801c6ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c6b2:	2a39      	cmp	r2, #57	; 0x39
 801c6b4:	d071      	beq.n	801c79a <_dtoa_r+0xb9a>
 801c6b6:	3201      	adds	r2, #1
 801c6b8:	701a      	strb	r2, [r3, #0]
 801c6ba:	e746      	b.n	801c54a <_dtoa_r+0x94a>
 801c6bc:	2a00      	cmp	r2, #0
 801c6be:	dd07      	ble.n	801c6d0 <_dtoa_r+0xad0>
 801c6c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c6c4:	d0ed      	beq.n	801c6a2 <_dtoa_r+0xaa2>
 801c6c6:	f10a 0301 	add.w	r3, sl, #1
 801c6ca:	f88b 3000 	strb.w	r3, [fp]
 801c6ce:	e73c      	b.n	801c54a <_dtoa_r+0x94a>
 801c6d0:	9b05      	ldr	r3, [sp, #20]
 801c6d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c6d6:	4599      	cmp	r9, r3
 801c6d8:	d047      	beq.n	801c76a <_dtoa_r+0xb6a>
 801c6da:	ee18 1a10 	vmov	r1, s16
 801c6de:	2300      	movs	r3, #0
 801c6e0:	220a      	movs	r2, #10
 801c6e2:	4620      	mov	r0, r4
 801c6e4:	f000 fc78 	bl	801cfd8 <__multadd>
 801c6e8:	45b8      	cmp	r8, r7
 801c6ea:	ee08 0a10 	vmov	s16, r0
 801c6ee:	f04f 0300 	mov.w	r3, #0
 801c6f2:	f04f 020a 	mov.w	r2, #10
 801c6f6:	4641      	mov	r1, r8
 801c6f8:	4620      	mov	r0, r4
 801c6fa:	d106      	bne.n	801c70a <_dtoa_r+0xb0a>
 801c6fc:	f000 fc6c 	bl	801cfd8 <__multadd>
 801c700:	4680      	mov	r8, r0
 801c702:	4607      	mov	r7, r0
 801c704:	f109 0901 	add.w	r9, r9, #1
 801c708:	e772      	b.n	801c5f0 <_dtoa_r+0x9f0>
 801c70a:	f000 fc65 	bl	801cfd8 <__multadd>
 801c70e:	4639      	mov	r1, r7
 801c710:	4680      	mov	r8, r0
 801c712:	2300      	movs	r3, #0
 801c714:	220a      	movs	r2, #10
 801c716:	4620      	mov	r0, r4
 801c718:	f000 fc5e 	bl	801cfd8 <__multadd>
 801c71c:	4607      	mov	r7, r0
 801c71e:	e7f1      	b.n	801c704 <_dtoa_r+0xb04>
 801c720:	9b03      	ldr	r3, [sp, #12]
 801c722:	9302      	str	r3, [sp, #8]
 801c724:	9d01      	ldr	r5, [sp, #4]
 801c726:	ee18 0a10 	vmov	r0, s16
 801c72a:	4631      	mov	r1, r6
 801c72c:	f7ff f9da 	bl	801bae4 <quorem>
 801c730:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c734:	9b01      	ldr	r3, [sp, #4]
 801c736:	f805 ab01 	strb.w	sl, [r5], #1
 801c73a:	1aea      	subs	r2, r5, r3
 801c73c:	9b02      	ldr	r3, [sp, #8]
 801c73e:	4293      	cmp	r3, r2
 801c740:	dd09      	ble.n	801c756 <_dtoa_r+0xb56>
 801c742:	ee18 1a10 	vmov	r1, s16
 801c746:	2300      	movs	r3, #0
 801c748:	220a      	movs	r2, #10
 801c74a:	4620      	mov	r0, r4
 801c74c:	f000 fc44 	bl	801cfd8 <__multadd>
 801c750:	ee08 0a10 	vmov	s16, r0
 801c754:	e7e7      	b.n	801c726 <_dtoa_r+0xb26>
 801c756:	9b02      	ldr	r3, [sp, #8]
 801c758:	2b00      	cmp	r3, #0
 801c75a:	bfc8      	it	gt
 801c75c:	461d      	movgt	r5, r3
 801c75e:	9b01      	ldr	r3, [sp, #4]
 801c760:	bfd8      	it	le
 801c762:	2501      	movle	r5, #1
 801c764:	441d      	add	r5, r3
 801c766:	f04f 0800 	mov.w	r8, #0
 801c76a:	ee18 1a10 	vmov	r1, s16
 801c76e:	2201      	movs	r2, #1
 801c770:	4620      	mov	r0, r4
 801c772:	f000 fe2b 	bl	801d3cc <__lshift>
 801c776:	4631      	mov	r1, r6
 801c778:	ee08 0a10 	vmov	s16, r0
 801c77c:	f000 fe96 	bl	801d4ac <__mcmp>
 801c780:	2800      	cmp	r0, #0
 801c782:	dc91      	bgt.n	801c6a8 <_dtoa_r+0xaa8>
 801c784:	d102      	bne.n	801c78c <_dtoa_r+0xb8c>
 801c786:	f01a 0f01 	tst.w	sl, #1
 801c78a:	d18d      	bne.n	801c6a8 <_dtoa_r+0xaa8>
 801c78c:	462b      	mov	r3, r5
 801c78e:	461d      	mov	r5, r3
 801c790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c794:	2a30      	cmp	r2, #48	; 0x30
 801c796:	d0fa      	beq.n	801c78e <_dtoa_r+0xb8e>
 801c798:	e6d7      	b.n	801c54a <_dtoa_r+0x94a>
 801c79a:	9a01      	ldr	r2, [sp, #4]
 801c79c:	429a      	cmp	r2, r3
 801c79e:	d184      	bne.n	801c6aa <_dtoa_r+0xaaa>
 801c7a0:	9b00      	ldr	r3, [sp, #0]
 801c7a2:	3301      	adds	r3, #1
 801c7a4:	9300      	str	r3, [sp, #0]
 801c7a6:	2331      	movs	r3, #49	; 0x31
 801c7a8:	7013      	strb	r3, [r2, #0]
 801c7aa:	e6ce      	b.n	801c54a <_dtoa_r+0x94a>
 801c7ac:	4b09      	ldr	r3, [pc, #36]	; (801c7d4 <_dtoa_r+0xbd4>)
 801c7ae:	f7ff ba95 	b.w	801bcdc <_dtoa_r+0xdc>
 801c7b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c7b4:	2b00      	cmp	r3, #0
 801c7b6:	f47f aa6e 	bne.w	801bc96 <_dtoa_r+0x96>
 801c7ba:	4b07      	ldr	r3, [pc, #28]	; (801c7d8 <_dtoa_r+0xbd8>)
 801c7bc:	f7ff ba8e 	b.w	801bcdc <_dtoa_r+0xdc>
 801c7c0:	9b02      	ldr	r3, [sp, #8]
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	dcae      	bgt.n	801c724 <_dtoa_r+0xb24>
 801c7c6:	9b06      	ldr	r3, [sp, #24]
 801c7c8:	2b02      	cmp	r3, #2
 801c7ca:	f73f aea8 	bgt.w	801c51e <_dtoa_r+0x91e>
 801c7ce:	e7a9      	b.n	801c724 <_dtoa_r+0xb24>
 801c7d0:	08052b50 	.word	0x08052b50
 801c7d4:	08052950 	.word	0x08052950
 801c7d8:	08052ad1 	.word	0x08052ad1

0801c7dc <rshift>:
 801c7dc:	6903      	ldr	r3, [r0, #16]
 801c7de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c7e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c7ea:	f100 0414 	add.w	r4, r0, #20
 801c7ee:	dd45      	ble.n	801c87c <rshift+0xa0>
 801c7f0:	f011 011f 	ands.w	r1, r1, #31
 801c7f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c7f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c7fc:	d10c      	bne.n	801c818 <rshift+0x3c>
 801c7fe:	f100 0710 	add.w	r7, r0, #16
 801c802:	4629      	mov	r1, r5
 801c804:	42b1      	cmp	r1, r6
 801c806:	d334      	bcc.n	801c872 <rshift+0x96>
 801c808:	1a9b      	subs	r3, r3, r2
 801c80a:	009b      	lsls	r3, r3, #2
 801c80c:	1eea      	subs	r2, r5, #3
 801c80e:	4296      	cmp	r6, r2
 801c810:	bf38      	it	cc
 801c812:	2300      	movcc	r3, #0
 801c814:	4423      	add	r3, r4
 801c816:	e015      	b.n	801c844 <rshift+0x68>
 801c818:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c81c:	f1c1 0820 	rsb	r8, r1, #32
 801c820:	40cf      	lsrs	r7, r1
 801c822:	f105 0e04 	add.w	lr, r5, #4
 801c826:	46a1      	mov	r9, r4
 801c828:	4576      	cmp	r6, lr
 801c82a:	46f4      	mov	ip, lr
 801c82c:	d815      	bhi.n	801c85a <rshift+0x7e>
 801c82e:	1a9a      	subs	r2, r3, r2
 801c830:	0092      	lsls	r2, r2, #2
 801c832:	3a04      	subs	r2, #4
 801c834:	3501      	adds	r5, #1
 801c836:	42ae      	cmp	r6, r5
 801c838:	bf38      	it	cc
 801c83a:	2200      	movcc	r2, #0
 801c83c:	18a3      	adds	r3, r4, r2
 801c83e:	50a7      	str	r7, [r4, r2]
 801c840:	b107      	cbz	r7, 801c844 <rshift+0x68>
 801c842:	3304      	adds	r3, #4
 801c844:	1b1a      	subs	r2, r3, r4
 801c846:	42a3      	cmp	r3, r4
 801c848:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c84c:	bf08      	it	eq
 801c84e:	2300      	moveq	r3, #0
 801c850:	6102      	str	r2, [r0, #16]
 801c852:	bf08      	it	eq
 801c854:	6143      	streq	r3, [r0, #20]
 801c856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c85a:	f8dc c000 	ldr.w	ip, [ip]
 801c85e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c862:	ea4c 0707 	orr.w	r7, ip, r7
 801c866:	f849 7b04 	str.w	r7, [r9], #4
 801c86a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c86e:	40cf      	lsrs	r7, r1
 801c870:	e7da      	b.n	801c828 <rshift+0x4c>
 801c872:	f851 cb04 	ldr.w	ip, [r1], #4
 801c876:	f847 cf04 	str.w	ip, [r7, #4]!
 801c87a:	e7c3      	b.n	801c804 <rshift+0x28>
 801c87c:	4623      	mov	r3, r4
 801c87e:	e7e1      	b.n	801c844 <rshift+0x68>

0801c880 <__hexdig_fun>:
 801c880:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c884:	2b09      	cmp	r3, #9
 801c886:	d802      	bhi.n	801c88e <__hexdig_fun+0xe>
 801c888:	3820      	subs	r0, #32
 801c88a:	b2c0      	uxtb	r0, r0
 801c88c:	4770      	bx	lr
 801c88e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c892:	2b05      	cmp	r3, #5
 801c894:	d801      	bhi.n	801c89a <__hexdig_fun+0x1a>
 801c896:	3847      	subs	r0, #71	; 0x47
 801c898:	e7f7      	b.n	801c88a <__hexdig_fun+0xa>
 801c89a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c89e:	2b05      	cmp	r3, #5
 801c8a0:	d801      	bhi.n	801c8a6 <__hexdig_fun+0x26>
 801c8a2:	3827      	subs	r0, #39	; 0x27
 801c8a4:	e7f1      	b.n	801c88a <__hexdig_fun+0xa>
 801c8a6:	2000      	movs	r0, #0
 801c8a8:	4770      	bx	lr
	...

0801c8ac <__gethex>:
 801c8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c8b0:	ed2d 8b02 	vpush	{d8}
 801c8b4:	b089      	sub	sp, #36	; 0x24
 801c8b6:	ee08 0a10 	vmov	s16, r0
 801c8ba:	9304      	str	r3, [sp, #16]
 801c8bc:	4bb4      	ldr	r3, [pc, #720]	; (801cb90 <__gethex+0x2e4>)
 801c8be:	681b      	ldr	r3, [r3, #0]
 801c8c0:	9301      	str	r3, [sp, #4]
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	468b      	mov	fp, r1
 801c8c6:	4690      	mov	r8, r2
 801c8c8:	f7fc fc40 	bl	801914c <strlen>
 801c8cc:	9b01      	ldr	r3, [sp, #4]
 801c8ce:	f8db 2000 	ldr.w	r2, [fp]
 801c8d2:	4403      	add	r3, r0
 801c8d4:	4682      	mov	sl, r0
 801c8d6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c8da:	9305      	str	r3, [sp, #20]
 801c8dc:	1c93      	adds	r3, r2, #2
 801c8de:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801c8e2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801c8e6:	32fe      	adds	r2, #254	; 0xfe
 801c8e8:	18d1      	adds	r1, r2, r3
 801c8ea:	461f      	mov	r7, r3
 801c8ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c8f0:	9100      	str	r1, [sp, #0]
 801c8f2:	2830      	cmp	r0, #48	; 0x30
 801c8f4:	d0f8      	beq.n	801c8e8 <__gethex+0x3c>
 801c8f6:	f7ff ffc3 	bl	801c880 <__hexdig_fun>
 801c8fa:	4604      	mov	r4, r0
 801c8fc:	2800      	cmp	r0, #0
 801c8fe:	d13a      	bne.n	801c976 <__gethex+0xca>
 801c900:	9901      	ldr	r1, [sp, #4]
 801c902:	4652      	mov	r2, sl
 801c904:	4638      	mov	r0, r7
 801c906:	f001 fa33 	bl	801dd70 <strncmp>
 801c90a:	4605      	mov	r5, r0
 801c90c:	2800      	cmp	r0, #0
 801c90e:	d168      	bne.n	801c9e2 <__gethex+0x136>
 801c910:	f817 000a 	ldrb.w	r0, [r7, sl]
 801c914:	eb07 060a 	add.w	r6, r7, sl
 801c918:	f7ff ffb2 	bl	801c880 <__hexdig_fun>
 801c91c:	2800      	cmp	r0, #0
 801c91e:	d062      	beq.n	801c9e6 <__gethex+0x13a>
 801c920:	4633      	mov	r3, r6
 801c922:	7818      	ldrb	r0, [r3, #0]
 801c924:	2830      	cmp	r0, #48	; 0x30
 801c926:	461f      	mov	r7, r3
 801c928:	f103 0301 	add.w	r3, r3, #1
 801c92c:	d0f9      	beq.n	801c922 <__gethex+0x76>
 801c92e:	f7ff ffa7 	bl	801c880 <__hexdig_fun>
 801c932:	2301      	movs	r3, #1
 801c934:	fab0 f480 	clz	r4, r0
 801c938:	0964      	lsrs	r4, r4, #5
 801c93a:	4635      	mov	r5, r6
 801c93c:	9300      	str	r3, [sp, #0]
 801c93e:	463a      	mov	r2, r7
 801c940:	4616      	mov	r6, r2
 801c942:	3201      	adds	r2, #1
 801c944:	7830      	ldrb	r0, [r6, #0]
 801c946:	f7ff ff9b 	bl	801c880 <__hexdig_fun>
 801c94a:	2800      	cmp	r0, #0
 801c94c:	d1f8      	bne.n	801c940 <__gethex+0x94>
 801c94e:	9901      	ldr	r1, [sp, #4]
 801c950:	4652      	mov	r2, sl
 801c952:	4630      	mov	r0, r6
 801c954:	f001 fa0c 	bl	801dd70 <strncmp>
 801c958:	b980      	cbnz	r0, 801c97c <__gethex+0xd0>
 801c95a:	b94d      	cbnz	r5, 801c970 <__gethex+0xc4>
 801c95c:	eb06 050a 	add.w	r5, r6, sl
 801c960:	462a      	mov	r2, r5
 801c962:	4616      	mov	r6, r2
 801c964:	3201      	adds	r2, #1
 801c966:	7830      	ldrb	r0, [r6, #0]
 801c968:	f7ff ff8a 	bl	801c880 <__hexdig_fun>
 801c96c:	2800      	cmp	r0, #0
 801c96e:	d1f8      	bne.n	801c962 <__gethex+0xb6>
 801c970:	1bad      	subs	r5, r5, r6
 801c972:	00ad      	lsls	r5, r5, #2
 801c974:	e004      	b.n	801c980 <__gethex+0xd4>
 801c976:	2400      	movs	r4, #0
 801c978:	4625      	mov	r5, r4
 801c97a:	e7e0      	b.n	801c93e <__gethex+0x92>
 801c97c:	2d00      	cmp	r5, #0
 801c97e:	d1f7      	bne.n	801c970 <__gethex+0xc4>
 801c980:	7833      	ldrb	r3, [r6, #0]
 801c982:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c986:	2b50      	cmp	r3, #80	; 0x50
 801c988:	d13b      	bne.n	801ca02 <__gethex+0x156>
 801c98a:	7873      	ldrb	r3, [r6, #1]
 801c98c:	2b2b      	cmp	r3, #43	; 0x2b
 801c98e:	d02c      	beq.n	801c9ea <__gethex+0x13e>
 801c990:	2b2d      	cmp	r3, #45	; 0x2d
 801c992:	d02e      	beq.n	801c9f2 <__gethex+0x146>
 801c994:	1c71      	adds	r1, r6, #1
 801c996:	f04f 0900 	mov.w	r9, #0
 801c99a:	7808      	ldrb	r0, [r1, #0]
 801c99c:	f7ff ff70 	bl	801c880 <__hexdig_fun>
 801c9a0:	1e43      	subs	r3, r0, #1
 801c9a2:	b2db      	uxtb	r3, r3
 801c9a4:	2b18      	cmp	r3, #24
 801c9a6:	d82c      	bhi.n	801ca02 <__gethex+0x156>
 801c9a8:	f1a0 0210 	sub.w	r2, r0, #16
 801c9ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c9b0:	f7ff ff66 	bl	801c880 <__hexdig_fun>
 801c9b4:	1e43      	subs	r3, r0, #1
 801c9b6:	b2db      	uxtb	r3, r3
 801c9b8:	2b18      	cmp	r3, #24
 801c9ba:	d91d      	bls.n	801c9f8 <__gethex+0x14c>
 801c9bc:	f1b9 0f00 	cmp.w	r9, #0
 801c9c0:	d000      	beq.n	801c9c4 <__gethex+0x118>
 801c9c2:	4252      	negs	r2, r2
 801c9c4:	4415      	add	r5, r2
 801c9c6:	f8cb 1000 	str.w	r1, [fp]
 801c9ca:	b1e4      	cbz	r4, 801ca06 <__gethex+0x15a>
 801c9cc:	9b00      	ldr	r3, [sp, #0]
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	bf14      	ite	ne
 801c9d2:	2700      	movne	r7, #0
 801c9d4:	2706      	moveq	r7, #6
 801c9d6:	4638      	mov	r0, r7
 801c9d8:	b009      	add	sp, #36	; 0x24
 801c9da:	ecbd 8b02 	vpop	{d8}
 801c9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c9e2:	463e      	mov	r6, r7
 801c9e4:	4625      	mov	r5, r4
 801c9e6:	2401      	movs	r4, #1
 801c9e8:	e7ca      	b.n	801c980 <__gethex+0xd4>
 801c9ea:	f04f 0900 	mov.w	r9, #0
 801c9ee:	1cb1      	adds	r1, r6, #2
 801c9f0:	e7d3      	b.n	801c99a <__gethex+0xee>
 801c9f2:	f04f 0901 	mov.w	r9, #1
 801c9f6:	e7fa      	b.n	801c9ee <__gethex+0x142>
 801c9f8:	230a      	movs	r3, #10
 801c9fa:	fb03 0202 	mla	r2, r3, r2, r0
 801c9fe:	3a10      	subs	r2, #16
 801ca00:	e7d4      	b.n	801c9ac <__gethex+0x100>
 801ca02:	4631      	mov	r1, r6
 801ca04:	e7df      	b.n	801c9c6 <__gethex+0x11a>
 801ca06:	1bf3      	subs	r3, r6, r7
 801ca08:	3b01      	subs	r3, #1
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	2b07      	cmp	r3, #7
 801ca0e:	dc0b      	bgt.n	801ca28 <__gethex+0x17c>
 801ca10:	ee18 0a10 	vmov	r0, s16
 801ca14:	f000 fa7e 	bl	801cf14 <_Balloc>
 801ca18:	4604      	mov	r4, r0
 801ca1a:	b940      	cbnz	r0, 801ca2e <__gethex+0x182>
 801ca1c:	4b5d      	ldr	r3, [pc, #372]	; (801cb94 <__gethex+0x2e8>)
 801ca1e:	4602      	mov	r2, r0
 801ca20:	21de      	movs	r1, #222	; 0xde
 801ca22:	485d      	ldr	r0, [pc, #372]	; (801cb98 <__gethex+0x2ec>)
 801ca24:	f001 f9c6 	bl	801ddb4 <__assert_func>
 801ca28:	3101      	adds	r1, #1
 801ca2a:	105b      	asrs	r3, r3, #1
 801ca2c:	e7ee      	b.n	801ca0c <__gethex+0x160>
 801ca2e:	f100 0914 	add.w	r9, r0, #20
 801ca32:	f04f 0b00 	mov.w	fp, #0
 801ca36:	f1ca 0301 	rsb	r3, sl, #1
 801ca3a:	f8cd 9008 	str.w	r9, [sp, #8]
 801ca3e:	f8cd b000 	str.w	fp, [sp]
 801ca42:	9306      	str	r3, [sp, #24]
 801ca44:	42b7      	cmp	r7, r6
 801ca46:	d340      	bcc.n	801caca <__gethex+0x21e>
 801ca48:	9802      	ldr	r0, [sp, #8]
 801ca4a:	9b00      	ldr	r3, [sp, #0]
 801ca4c:	f840 3b04 	str.w	r3, [r0], #4
 801ca50:	eba0 0009 	sub.w	r0, r0, r9
 801ca54:	1080      	asrs	r0, r0, #2
 801ca56:	0146      	lsls	r6, r0, #5
 801ca58:	6120      	str	r0, [r4, #16]
 801ca5a:	4618      	mov	r0, r3
 801ca5c:	f000 fb4c 	bl	801d0f8 <__hi0bits>
 801ca60:	1a30      	subs	r0, r6, r0
 801ca62:	f8d8 6000 	ldr.w	r6, [r8]
 801ca66:	42b0      	cmp	r0, r6
 801ca68:	dd63      	ble.n	801cb32 <__gethex+0x286>
 801ca6a:	1b87      	subs	r7, r0, r6
 801ca6c:	4639      	mov	r1, r7
 801ca6e:	4620      	mov	r0, r4
 801ca70:	f000 fef0 	bl	801d854 <__any_on>
 801ca74:	4682      	mov	sl, r0
 801ca76:	b1a8      	cbz	r0, 801caa4 <__gethex+0x1f8>
 801ca78:	1e7b      	subs	r3, r7, #1
 801ca7a:	1159      	asrs	r1, r3, #5
 801ca7c:	f003 021f 	and.w	r2, r3, #31
 801ca80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801ca84:	f04f 0a01 	mov.w	sl, #1
 801ca88:	fa0a f202 	lsl.w	r2, sl, r2
 801ca8c:	420a      	tst	r2, r1
 801ca8e:	d009      	beq.n	801caa4 <__gethex+0x1f8>
 801ca90:	4553      	cmp	r3, sl
 801ca92:	dd05      	ble.n	801caa0 <__gethex+0x1f4>
 801ca94:	1eb9      	subs	r1, r7, #2
 801ca96:	4620      	mov	r0, r4
 801ca98:	f000 fedc 	bl	801d854 <__any_on>
 801ca9c:	2800      	cmp	r0, #0
 801ca9e:	d145      	bne.n	801cb2c <__gethex+0x280>
 801caa0:	f04f 0a02 	mov.w	sl, #2
 801caa4:	4639      	mov	r1, r7
 801caa6:	4620      	mov	r0, r4
 801caa8:	f7ff fe98 	bl	801c7dc <rshift>
 801caac:	443d      	add	r5, r7
 801caae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cab2:	42ab      	cmp	r3, r5
 801cab4:	da4c      	bge.n	801cb50 <__gethex+0x2a4>
 801cab6:	ee18 0a10 	vmov	r0, s16
 801caba:	4621      	mov	r1, r4
 801cabc:	f000 fa6a 	bl	801cf94 <_Bfree>
 801cac0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cac2:	2300      	movs	r3, #0
 801cac4:	6013      	str	r3, [r2, #0]
 801cac6:	27a3      	movs	r7, #163	; 0xa3
 801cac8:	e785      	b.n	801c9d6 <__gethex+0x12a>
 801caca:	1e73      	subs	r3, r6, #1
 801cacc:	9a05      	ldr	r2, [sp, #20]
 801cace:	9303      	str	r3, [sp, #12]
 801cad0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801cad4:	4293      	cmp	r3, r2
 801cad6:	d019      	beq.n	801cb0c <__gethex+0x260>
 801cad8:	f1bb 0f20 	cmp.w	fp, #32
 801cadc:	d107      	bne.n	801caee <__gethex+0x242>
 801cade:	9b02      	ldr	r3, [sp, #8]
 801cae0:	9a00      	ldr	r2, [sp, #0]
 801cae2:	f843 2b04 	str.w	r2, [r3], #4
 801cae6:	9302      	str	r3, [sp, #8]
 801cae8:	2300      	movs	r3, #0
 801caea:	9300      	str	r3, [sp, #0]
 801caec:	469b      	mov	fp, r3
 801caee:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801caf2:	f7ff fec5 	bl	801c880 <__hexdig_fun>
 801caf6:	9b00      	ldr	r3, [sp, #0]
 801caf8:	f000 000f 	and.w	r0, r0, #15
 801cafc:	fa00 f00b 	lsl.w	r0, r0, fp
 801cb00:	4303      	orrs	r3, r0
 801cb02:	9300      	str	r3, [sp, #0]
 801cb04:	f10b 0b04 	add.w	fp, fp, #4
 801cb08:	9b03      	ldr	r3, [sp, #12]
 801cb0a:	e00d      	b.n	801cb28 <__gethex+0x27c>
 801cb0c:	9b03      	ldr	r3, [sp, #12]
 801cb0e:	9a06      	ldr	r2, [sp, #24]
 801cb10:	4413      	add	r3, r2
 801cb12:	42bb      	cmp	r3, r7
 801cb14:	d3e0      	bcc.n	801cad8 <__gethex+0x22c>
 801cb16:	4618      	mov	r0, r3
 801cb18:	9901      	ldr	r1, [sp, #4]
 801cb1a:	9307      	str	r3, [sp, #28]
 801cb1c:	4652      	mov	r2, sl
 801cb1e:	f001 f927 	bl	801dd70 <strncmp>
 801cb22:	9b07      	ldr	r3, [sp, #28]
 801cb24:	2800      	cmp	r0, #0
 801cb26:	d1d7      	bne.n	801cad8 <__gethex+0x22c>
 801cb28:	461e      	mov	r6, r3
 801cb2a:	e78b      	b.n	801ca44 <__gethex+0x198>
 801cb2c:	f04f 0a03 	mov.w	sl, #3
 801cb30:	e7b8      	b.n	801caa4 <__gethex+0x1f8>
 801cb32:	da0a      	bge.n	801cb4a <__gethex+0x29e>
 801cb34:	1a37      	subs	r7, r6, r0
 801cb36:	4621      	mov	r1, r4
 801cb38:	ee18 0a10 	vmov	r0, s16
 801cb3c:	463a      	mov	r2, r7
 801cb3e:	f000 fc45 	bl	801d3cc <__lshift>
 801cb42:	1bed      	subs	r5, r5, r7
 801cb44:	4604      	mov	r4, r0
 801cb46:	f100 0914 	add.w	r9, r0, #20
 801cb4a:	f04f 0a00 	mov.w	sl, #0
 801cb4e:	e7ae      	b.n	801caae <__gethex+0x202>
 801cb50:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801cb54:	42a8      	cmp	r0, r5
 801cb56:	dd72      	ble.n	801cc3e <__gethex+0x392>
 801cb58:	1b45      	subs	r5, r0, r5
 801cb5a:	42ae      	cmp	r6, r5
 801cb5c:	dc36      	bgt.n	801cbcc <__gethex+0x320>
 801cb5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb62:	2b02      	cmp	r3, #2
 801cb64:	d02a      	beq.n	801cbbc <__gethex+0x310>
 801cb66:	2b03      	cmp	r3, #3
 801cb68:	d02c      	beq.n	801cbc4 <__gethex+0x318>
 801cb6a:	2b01      	cmp	r3, #1
 801cb6c:	d11c      	bne.n	801cba8 <__gethex+0x2fc>
 801cb6e:	42ae      	cmp	r6, r5
 801cb70:	d11a      	bne.n	801cba8 <__gethex+0x2fc>
 801cb72:	2e01      	cmp	r6, #1
 801cb74:	d112      	bne.n	801cb9c <__gethex+0x2f0>
 801cb76:	9a04      	ldr	r2, [sp, #16]
 801cb78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801cb7c:	6013      	str	r3, [r2, #0]
 801cb7e:	2301      	movs	r3, #1
 801cb80:	6123      	str	r3, [r4, #16]
 801cb82:	f8c9 3000 	str.w	r3, [r9]
 801cb86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cb88:	2762      	movs	r7, #98	; 0x62
 801cb8a:	601c      	str	r4, [r3, #0]
 801cb8c:	e723      	b.n	801c9d6 <__gethex+0x12a>
 801cb8e:	bf00      	nop
 801cb90:	08052bc8 	.word	0x08052bc8
 801cb94:	08052b50 	.word	0x08052b50
 801cb98:	08052b61 	.word	0x08052b61
 801cb9c:	1e71      	subs	r1, r6, #1
 801cb9e:	4620      	mov	r0, r4
 801cba0:	f000 fe58 	bl	801d854 <__any_on>
 801cba4:	2800      	cmp	r0, #0
 801cba6:	d1e6      	bne.n	801cb76 <__gethex+0x2ca>
 801cba8:	ee18 0a10 	vmov	r0, s16
 801cbac:	4621      	mov	r1, r4
 801cbae:	f000 f9f1 	bl	801cf94 <_Bfree>
 801cbb2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cbb4:	2300      	movs	r3, #0
 801cbb6:	6013      	str	r3, [r2, #0]
 801cbb8:	2750      	movs	r7, #80	; 0x50
 801cbba:	e70c      	b.n	801c9d6 <__gethex+0x12a>
 801cbbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d1f2      	bne.n	801cba8 <__gethex+0x2fc>
 801cbc2:	e7d8      	b.n	801cb76 <__gethex+0x2ca>
 801cbc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d1d5      	bne.n	801cb76 <__gethex+0x2ca>
 801cbca:	e7ed      	b.n	801cba8 <__gethex+0x2fc>
 801cbcc:	1e6f      	subs	r7, r5, #1
 801cbce:	f1ba 0f00 	cmp.w	sl, #0
 801cbd2:	d131      	bne.n	801cc38 <__gethex+0x38c>
 801cbd4:	b127      	cbz	r7, 801cbe0 <__gethex+0x334>
 801cbd6:	4639      	mov	r1, r7
 801cbd8:	4620      	mov	r0, r4
 801cbda:	f000 fe3b 	bl	801d854 <__any_on>
 801cbde:	4682      	mov	sl, r0
 801cbe0:	117b      	asrs	r3, r7, #5
 801cbe2:	2101      	movs	r1, #1
 801cbe4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801cbe8:	f007 071f 	and.w	r7, r7, #31
 801cbec:	fa01 f707 	lsl.w	r7, r1, r7
 801cbf0:	421f      	tst	r7, r3
 801cbf2:	4629      	mov	r1, r5
 801cbf4:	4620      	mov	r0, r4
 801cbf6:	bf18      	it	ne
 801cbf8:	f04a 0a02 	orrne.w	sl, sl, #2
 801cbfc:	1b76      	subs	r6, r6, r5
 801cbfe:	f7ff fded 	bl	801c7dc <rshift>
 801cc02:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cc06:	2702      	movs	r7, #2
 801cc08:	f1ba 0f00 	cmp.w	sl, #0
 801cc0c:	d048      	beq.n	801cca0 <__gethex+0x3f4>
 801cc0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cc12:	2b02      	cmp	r3, #2
 801cc14:	d015      	beq.n	801cc42 <__gethex+0x396>
 801cc16:	2b03      	cmp	r3, #3
 801cc18:	d017      	beq.n	801cc4a <__gethex+0x39e>
 801cc1a:	2b01      	cmp	r3, #1
 801cc1c:	d109      	bne.n	801cc32 <__gethex+0x386>
 801cc1e:	f01a 0f02 	tst.w	sl, #2
 801cc22:	d006      	beq.n	801cc32 <__gethex+0x386>
 801cc24:	f8d9 0000 	ldr.w	r0, [r9]
 801cc28:	ea4a 0a00 	orr.w	sl, sl, r0
 801cc2c:	f01a 0f01 	tst.w	sl, #1
 801cc30:	d10e      	bne.n	801cc50 <__gethex+0x3a4>
 801cc32:	f047 0710 	orr.w	r7, r7, #16
 801cc36:	e033      	b.n	801cca0 <__gethex+0x3f4>
 801cc38:	f04f 0a01 	mov.w	sl, #1
 801cc3c:	e7d0      	b.n	801cbe0 <__gethex+0x334>
 801cc3e:	2701      	movs	r7, #1
 801cc40:	e7e2      	b.n	801cc08 <__gethex+0x35c>
 801cc42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc44:	f1c3 0301 	rsb	r3, r3, #1
 801cc48:	9315      	str	r3, [sp, #84]	; 0x54
 801cc4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cc4c:	2b00      	cmp	r3, #0
 801cc4e:	d0f0      	beq.n	801cc32 <__gethex+0x386>
 801cc50:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cc54:	f104 0314 	add.w	r3, r4, #20
 801cc58:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cc5c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cc60:	f04f 0c00 	mov.w	ip, #0
 801cc64:	4618      	mov	r0, r3
 801cc66:	f853 2b04 	ldr.w	r2, [r3], #4
 801cc6a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cc6e:	d01c      	beq.n	801ccaa <__gethex+0x3fe>
 801cc70:	3201      	adds	r2, #1
 801cc72:	6002      	str	r2, [r0, #0]
 801cc74:	2f02      	cmp	r7, #2
 801cc76:	f104 0314 	add.w	r3, r4, #20
 801cc7a:	d13f      	bne.n	801ccfc <__gethex+0x450>
 801cc7c:	f8d8 2000 	ldr.w	r2, [r8]
 801cc80:	3a01      	subs	r2, #1
 801cc82:	42b2      	cmp	r2, r6
 801cc84:	d10a      	bne.n	801cc9c <__gethex+0x3f0>
 801cc86:	1171      	asrs	r1, r6, #5
 801cc88:	2201      	movs	r2, #1
 801cc8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cc8e:	f006 061f 	and.w	r6, r6, #31
 801cc92:	fa02 f606 	lsl.w	r6, r2, r6
 801cc96:	421e      	tst	r6, r3
 801cc98:	bf18      	it	ne
 801cc9a:	4617      	movne	r7, r2
 801cc9c:	f047 0720 	orr.w	r7, r7, #32
 801cca0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cca2:	601c      	str	r4, [r3, #0]
 801cca4:	9b04      	ldr	r3, [sp, #16]
 801cca6:	601d      	str	r5, [r3, #0]
 801cca8:	e695      	b.n	801c9d6 <__gethex+0x12a>
 801ccaa:	4299      	cmp	r1, r3
 801ccac:	f843 cc04 	str.w	ip, [r3, #-4]
 801ccb0:	d8d8      	bhi.n	801cc64 <__gethex+0x3b8>
 801ccb2:	68a3      	ldr	r3, [r4, #8]
 801ccb4:	459b      	cmp	fp, r3
 801ccb6:	db19      	blt.n	801ccec <__gethex+0x440>
 801ccb8:	6861      	ldr	r1, [r4, #4]
 801ccba:	ee18 0a10 	vmov	r0, s16
 801ccbe:	3101      	adds	r1, #1
 801ccc0:	f000 f928 	bl	801cf14 <_Balloc>
 801ccc4:	4681      	mov	r9, r0
 801ccc6:	b918      	cbnz	r0, 801ccd0 <__gethex+0x424>
 801ccc8:	4b1a      	ldr	r3, [pc, #104]	; (801cd34 <__gethex+0x488>)
 801ccca:	4602      	mov	r2, r0
 801cccc:	2184      	movs	r1, #132	; 0x84
 801ccce:	e6a8      	b.n	801ca22 <__gethex+0x176>
 801ccd0:	6922      	ldr	r2, [r4, #16]
 801ccd2:	3202      	adds	r2, #2
 801ccd4:	f104 010c 	add.w	r1, r4, #12
 801ccd8:	0092      	lsls	r2, r2, #2
 801ccda:	300c      	adds	r0, #12
 801ccdc:	f000 f90c 	bl	801cef8 <memcpy>
 801cce0:	4621      	mov	r1, r4
 801cce2:	ee18 0a10 	vmov	r0, s16
 801cce6:	f000 f955 	bl	801cf94 <_Bfree>
 801ccea:	464c      	mov	r4, r9
 801ccec:	6923      	ldr	r3, [r4, #16]
 801ccee:	1c5a      	adds	r2, r3, #1
 801ccf0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ccf4:	6122      	str	r2, [r4, #16]
 801ccf6:	2201      	movs	r2, #1
 801ccf8:	615a      	str	r2, [r3, #20]
 801ccfa:	e7bb      	b.n	801cc74 <__gethex+0x3c8>
 801ccfc:	6922      	ldr	r2, [r4, #16]
 801ccfe:	455a      	cmp	r2, fp
 801cd00:	dd0b      	ble.n	801cd1a <__gethex+0x46e>
 801cd02:	2101      	movs	r1, #1
 801cd04:	4620      	mov	r0, r4
 801cd06:	f7ff fd69 	bl	801c7dc <rshift>
 801cd0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cd0e:	3501      	adds	r5, #1
 801cd10:	42ab      	cmp	r3, r5
 801cd12:	f6ff aed0 	blt.w	801cab6 <__gethex+0x20a>
 801cd16:	2701      	movs	r7, #1
 801cd18:	e7c0      	b.n	801cc9c <__gethex+0x3f0>
 801cd1a:	f016 061f 	ands.w	r6, r6, #31
 801cd1e:	d0fa      	beq.n	801cd16 <__gethex+0x46a>
 801cd20:	4453      	add	r3, sl
 801cd22:	f1c6 0620 	rsb	r6, r6, #32
 801cd26:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801cd2a:	f000 f9e5 	bl	801d0f8 <__hi0bits>
 801cd2e:	42b0      	cmp	r0, r6
 801cd30:	dbe7      	blt.n	801cd02 <__gethex+0x456>
 801cd32:	e7f0      	b.n	801cd16 <__gethex+0x46a>
 801cd34:	08052b50 	.word	0x08052b50

0801cd38 <L_shift>:
 801cd38:	f1c2 0208 	rsb	r2, r2, #8
 801cd3c:	0092      	lsls	r2, r2, #2
 801cd3e:	b570      	push	{r4, r5, r6, lr}
 801cd40:	f1c2 0620 	rsb	r6, r2, #32
 801cd44:	6843      	ldr	r3, [r0, #4]
 801cd46:	6804      	ldr	r4, [r0, #0]
 801cd48:	fa03 f506 	lsl.w	r5, r3, r6
 801cd4c:	432c      	orrs	r4, r5
 801cd4e:	40d3      	lsrs	r3, r2
 801cd50:	6004      	str	r4, [r0, #0]
 801cd52:	f840 3f04 	str.w	r3, [r0, #4]!
 801cd56:	4288      	cmp	r0, r1
 801cd58:	d3f4      	bcc.n	801cd44 <L_shift+0xc>
 801cd5a:	bd70      	pop	{r4, r5, r6, pc}

0801cd5c <__match>:
 801cd5c:	b530      	push	{r4, r5, lr}
 801cd5e:	6803      	ldr	r3, [r0, #0]
 801cd60:	3301      	adds	r3, #1
 801cd62:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cd66:	b914      	cbnz	r4, 801cd6e <__match+0x12>
 801cd68:	6003      	str	r3, [r0, #0]
 801cd6a:	2001      	movs	r0, #1
 801cd6c:	bd30      	pop	{r4, r5, pc}
 801cd6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cd76:	2d19      	cmp	r5, #25
 801cd78:	bf98      	it	ls
 801cd7a:	3220      	addls	r2, #32
 801cd7c:	42a2      	cmp	r2, r4
 801cd7e:	d0f0      	beq.n	801cd62 <__match+0x6>
 801cd80:	2000      	movs	r0, #0
 801cd82:	e7f3      	b.n	801cd6c <__match+0x10>

0801cd84 <__hexnan>:
 801cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd88:	680b      	ldr	r3, [r1, #0]
 801cd8a:	115e      	asrs	r6, r3, #5
 801cd8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd90:	f013 031f 	ands.w	r3, r3, #31
 801cd94:	b087      	sub	sp, #28
 801cd96:	bf18      	it	ne
 801cd98:	3604      	addne	r6, #4
 801cd9a:	2500      	movs	r5, #0
 801cd9c:	1f37      	subs	r7, r6, #4
 801cd9e:	4690      	mov	r8, r2
 801cda0:	6802      	ldr	r2, [r0, #0]
 801cda2:	9301      	str	r3, [sp, #4]
 801cda4:	4682      	mov	sl, r0
 801cda6:	f846 5c04 	str.w	r5, [r6, #-4]
 801cdaa:	46b9      	mov	r9, r7
 801cdac:	463c      	mov	r4, r7
 801cdae:	9502      	str	r5, [sp, #8]
 801cdb0:	46ab      	mov	fp, r5
 801cdb2:	7851      	ldrb	r1, [r2, #1]
 801cdb4:	1c53      	adds	r3, r2, #1
 801cdb6:	9303      	str	r3, [sp, #12]
 801cdb8:	b341      	cbz	r1, 801ce0c <__hexnan+0x88>
 801cdba:	4608      	mov	r0, r1
 801cdbc:	9205      	str	r2, [sp, #20]
 801cdbe:	9104      	str	r1, [sp, #16]
 801cdc0:	f7ff fd5e 	bl	801c880 <__hexdig_fun>
 801cdc4:	2800      	cmp	r0, #0
 801cdc6:	d14f      	bne.n	801ce68 <__hexnan+0xe4>
 801cdc8:	9904      	ldr	r1, [sp, #16]
 801cdca:	9a05      	ldr	r2, [sp, #20]
 801cdcc:	2920      	cmp	r1, #32
 801cdce:	d818      	bhi.n	801ce02 <__hexnan+0x7e>
 801cdd0:	9b02      	ldr	r3, [sp, #8]
 801cdd2:	459b      	cmp	fp, r3
 801cdd4:	dd13      	ble.n	801cdfe <__hexnan+0x7a>
 801cdd6:	454c      	cmp	r4, r9
 801cdd8:	d206      	bcs.n	801cde8 <__hexnan+0x64>
 801cdda:	2d07      	cmp	r5, #7
 801cddc:	dc04      	bgt.n	801cde8 <__hexnan+0x64>
 801cdde:	462a      	mov	r2, r5
 801cde0:	4649      	mov	r1, r9
 801cde2:	4620      	mov	r0, r4
 801cde4:	f7ff ffa8 	bl	801cd38 <L_shift>
 801cde8:	4544      	cmp	r4, r8
 801cdea:	d950      	bls.n	801ce8e <__hexnan+0x10a>
 801cdec:	2300      	movs	r3, #0
 801cdee:	f1a4 0904 	sub.w	r9, r4, #4
 801cdf2:	f844 3c04 	str.w	r3, [r4, #-4]
 801cdf6:	f8cd b008 	str.w	fp, [sp, #8]
 801cdfa:	464c      	mov	r4, r9
 801cdfc:	461d      	mov	r5, r3
 801cdfe:	9a03      	ldr	r2, [sp, #12]
 801ce00:	e7d7      	b.n	801cdb2 <__hexnan+0x2e>
 801ce02:	2929      	cmp	r1, #41	; 0x29
 801ce04:	d156      	bne.n	801ceb4 <__hexnan+0x130>
 801ce06:	3202      	adds	r2, #2
 801ce08:	f8ca 2000 	str.w	r2, [sl]
 801ce0c:	f1bb 0f00 	cmp.w	fp, #0
 801ce10:	d050      	beq.n	801ceb4 <__hexnan+0x130>
 801ce12:	454c      	cmp	r4, r9
 801ce14:	d206      	bcs.n	801ce24 <__hexnan+0xa0>
 801ce16:	2d07      	cmp	r5, #7
 801ce18:	dc04      	bgt.n	801ce24 <__hexnan+0xa0>
 801ce1a:	462a      	mov	r2, r5
 801ce1c:	4649      	mov	r1, r9
 801ce1e:	4620      	mov	r0, r4
 801ce20:	f7ff ff8a 	bl	801cd38 <L_shift>
 801ce24:	4544      	cmp	r4, r8
 801ce26:	d934      	bls.n	801ce92 <__hexnan+0x10e>
 801ce28:	f1a8 0204 	sub.w	r2, r8, #4
 801ce2c:	4623      	mov	r3, r4
 801ce2e:	f853 1b04 	ldr.w	r1, [r3], #4
 801ce32:	f842 1f04 	str.w	r1, [r2, #4]!
 801ce36:	429f      	cmp	r7, r3
 801ce38:	d2f9      	bcs.n	801ce2e <__hexnan+0xaa>
 801ce3a:	1b3b      	subs	r3, r7, r4
 801ce3c:	f023 0303 	bic.w	r3, r3, #3
 801ce40:	3304      	adds	r3, #4
 801ce42:	3401      	adds	r4, #1
 801ce44:	3e03      	subs	r6, #3
 801ce46:	42b4      	cmp	r4, r6
 801ce48:	bf88      	it	hi
 801ce4a:	2304      	movhi	r3, #4
 801ce4c:	4443      	add	r3, r8
 801ce4e:	2200      	movs	r2, #0
 801ce50:	f843 2b04 	str.w	r2, [r3], #4
 801ce54:	429f      	cmp	r7, r3
 801ce56:	d2fb      	bcs.n	801ce50 <__hexnan+0xcc>
 801ce58:	683b      	ldr	r3, [r7, #0]
 801ce5a:	b91b      	cbnz	r3, 801ce64 <__hexnan+0xe0>
 801ce5c:	4547      	cmp	r7, r8
 801ce5e:	d127      	bne.n	801ceb0 <__hexnan+0x12c>
 801ce60:	2301      	movs	r3, #1
 801ce62:	603b      	str	r3, [r7, #0]
 801ce64:	2005      	movs	r0, #5
 801ce66:	e026      	b.n	801ceb6 <__hexnan+0x132>
 801ce68:	3501      	adds	r5, #1
 801ce6a:	2d08      	cmp	r5, #8
 801ce6c:	f10b 0b01 	add.w	fp, fp, #1
 801ce70:	dd06      	ble.n	801ce80 <__hexnan+0xfc>
 801ce72:	4544      	cmp	r4, r8
 801ce74:	d9c3      	bls.n	801cdfe <__hexnan+0x7a>
 801ce76:	2300      	movs	r3, #0
 801ce78:	f844 3c04 	str.w	r3, [r4, #-4]
 801ce7c:	2501      	movs	r5, #1
 801ce7e:	3c04      	subs	r4, #4
 801ce80:	6822      	ldr	r2, [r4, #0]
 801ce82:	f000 000f 	and.w	r0, r0, #15
 801ce86:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801ce8a:	6022      	str	r2, [r4, #0]
 801ce8c:	e7b7      	b.n	801cdfe <__hexnan+0x7a>
 801ce8e:	2508      	movs	r5, #8
 801ce90:	e7b5      	b.n	801cdfe <__hexnan+0x7a>
 801ce92:	9b01      	ldr	r3, [sp, #4]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d0df      	beq.n	801ce58 <__hexnan+0xd4>
 801ce98:	f04f 32ff 	mov.w	r2, #4294967295
 801ce9c:	f1c3 0320 	rsb	r3, r3, #32
 801cea0:	fa22 f303 	lsr.w	r3, r2, r3
 801cea4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cea8:	401a      	ands	r2, r3
 801ceaa:	f846 2c04 	str.w	r2, [r6, #-4]
 801ceae:	e7d3      	b.n	801ce58 <__hexnan+0xd4>
 801ceb0:	3f04      	subs	r7, #4
 801ceb2:	e7d1      	b.n	801ce58 <__hexnan+0xd4>
 801ceb4:	2004      	movs	r0, #4
 801ceb6:	b007      	add	sp, #28
 801ceb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cebc <_localeconv_r>:
 801cebc:	4800      	ldr	r0, [pc, #0]	; (801cec0 <_localeconv_r+0x4>)
 801cebe:	4770      	bx	lr
 801cec0:	200001bc 	.word	0x200001bc

0801cec4 <malloc>:
 801cec4:	4b02      	ldr	r3, [pc, #8]	; (801ced0 <malloc+0xc>)
 801cec6:	4601      	mov	r1, r0
 801cec8:	6818      	ldr	r0, [r3, #0]
 801ceca:	f000 bd67 	b.w	801d99c <_malloc_r>
 801cece:	bf00      	nop
 801ced0:	20000064 	.word	0x20000064

0801ced4 <__ascii_mbtowc>:
 801ced4:	b082      	sub	sp, #8
 801ced6:	b901      	cbnz	r1, 801ceda <__ascii_mbtowc+0x6>
 801ced8:	a901      	add	r1, sp, #4
 801ceda:	b142      	cbz	r2, 801ceee <__ascii_mbtowc+0x1a>
 801cedc:	b14b      	cbz	r3, 801cef2 <__ascii_mbtowc+0x1e>
 801cede:	7813      	ldrb	r3, [r2, #0]
 801cee0:	600b      	str	r3, [r1, #0]
 801cee2:	7812      	ldrb	r2, [r2, #0]
 801cee4:	1e10      	subs	r0, r2, #0
 801cee6:	bf18      	it	ne
 801cee8:	2001      	movne	r0, #1
 801ceea:	b002      	add	sp, #8
 801ceec:	4770      	bx	lr
 801ceee:	4610      	mov	r0, r2
 801cef0:	e7fb      	b.n	801ceea <__ascii_mbtowc+0x16>
 801cef2:	f06f 0001 	mvn.w	r0, #1
 801cef6:	e7f8      	b.n	801ceea <__ascii_mbtowc+0x16>

0801cef8 <memcpy>:
 801cef8:	440a      	add	r2, r1
 801cefa:	4291      	cmp	r1, r2
 801cefc:	f100 33ff 	add.w	r3, r0, #4294967295
 801cf00:	d100      	bne.n	801cf04 <memcpy+0xc>
 801cf02:	4770      	bx	lr
 801cf04:	b510      	push	{r4, lr}
 801cf06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cf0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf0e:	4291      	cmp	r1, r2
 801cf10:	d1f9      	bne.n	801cf06 <memcpy+0xe>
 801cf12:	bd10      	pop	{r4, pc}

0801cf14 <_Balloc>:
 801cf14:	b570      	push	{r4, r5, r6, lr}
 801cf16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cf18:	4604      	mov	r4, r0
 801cf1a:	460d      	mov	r5, r1
 801cf1c:	b976      	cbnz	r6, 801cf3c <_Balloc+0x28>
 801cf1e:	2010      	movs	r0, #16
 801cf20:	f7ff ffd0 	bl	801cec4 <malloc>
 801cf24:	4602      	mov	r2, r0
 801cf26:	6260      	str	r0, [r4, #36]	; 0x24
 801cf28:	b920      	cbnz	r0, 801cf34 <_Balloc+0x20>
 801cf2a:	4b18      	ldr	r3, [pc, #96]	; (801cf8c <_Balloc+0x78>)
 801cf2c:	4818      	ldr	r0, [pc, #96]	; (801cf90 <_Balloc+0x7c>)
 801cf2e:	2166      	movs	r1, #102	; 0x66
 801cf30:	f000 ff40 	bl	801ddb4 <__assert_func>
 801cf34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cf38:	6006      	str	r6, [r0, #0]
 801cf3a:	60c6      	str	r6, [r0, #12]
 801cf3c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cf3e:	68f3      	ldr	r3, [r6, #12]
 801cf40:	b183      	cbz	r3, 801cf64 <_Balloc+0x50>
 801cf42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf44:	68db      	ldr	r3, [r3, #12]
 801cf46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cf4a:	b9b8      	cbnz	r0, 801cf7c <_Balloc+0x68>
 801cf4c:	2101      	movs	r1, #1
 801cf4e:	fa01 f605 	lsl.w	r6, r1, r5
 801cf52:	1d72      	adds	r2, r6, #5
 801cf54:	0092      	lsls	r2, r2, #2
 801cf56:	4620      	mov	r0, r4
 801cf58:	f000 fc9d 	bl	801d896 <_calloc_r>
 801cf5c:	b160      	cbz	r0, 801cf78 <_Balloc+0x64>
 801cf5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cf62:	e00e      	b.n	801cf82 <_Balloc+0x6e>
 801cf64:	2221      	movs	r2, #33	; 0x21
 801cf66:	2104      	movs	r1, #4
 801cf68:	4620      	mov	r0, r4
 801cf6a:	f000 fc94 	bl	801d896 <_calloc_r>
 801cf6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf70:	60f0      	str	r0, [r6, #12]
 801cf72:	68db      	ldr	r3, [r3, #12]
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d1e4      	bne.n	801cf42 <_Balloc+0x2e>
 801cf78:	2000      	movs	r0, #0
 801cf7a:	bd70      	pop	{r4, r5, r6, pc}
 801cf7c:	6802      	ldr	r2, [r0, #0]
 801cf7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cf82:	2300      	movs	r3, #0
 801cf84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cf88:	e7f7      	b.n	801cf7a <_Balloc+0x66>
 801cf8a:	bf00      	nop
 801cf8c:	08052ade 	.word	0x08052ade
 801cf90:	08052bdc 	.word	0x08052bdc

0801cf94 <_Bfree>:
 801cf94:	b570      	push	{r4, r5, r6, lr}
 801cf96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801cf98:	4605      	mov	r5, r0
 801cf9a:	460c      	mov	r4, r1
 801cf9c:	b976      	cbnz	r6, 801cfbc <_Bfree+0x28>
 801cf9e:	2010      	movs	r0, #16
 801cfa0:	f7ff ff90 	bl	801cec4 <malloc>
 801cfa4:	4602      	mov	r2, r0
 801cfa6:	6268      	str	r0, [r5, #36]	; 0x24
 801cfa8:	b920      	cbnz	r0, 801cfb4 <_Bfree+0x20>
 801cfaa:	4b09      	ldr	r3, [pc, #36]	; (801cfd0 <_Bfree+0x3c>)
 801cfac:	4809      	ldr	r0, [pc, #36]	; (801cfd4 <_Bfree+0x40>)
 801cfae:	218a      	movs	r1, #138	; 0x8a
 801cfb0:	f000 ff00 	bl	801ddb4 <__assert_func>
 801cfb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cfb8:	6006      	str	r6, [r0, #0]
 801cfba:	60c6      	str	r6, [r0, #12]
 801cfbc:	b13c      	cbz	r4, 801cfce <_Bfree+0x3a>
 801cfbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801cfc0:	6862      	ldr	r2, [r4, #4]
 801cfc2:	68db      	ldr	r3, [r3, #12]
 801cfc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cfc8:	6021      	str	r1, [r4, #0]
 801cfca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cfce:	bd70      	pop	{r4, r5, r6, pc}
 801cfd0:	08052ade 	.word	0x08052ade
 801cfd4:	08052bdc 	.word	0x08052bdc

0801cfd8 <__multadd>:
 801cfd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfdc:	690d      	ldr	r5, [r1, #16]
 801cfde:	4607      	mov	r7, r0
 801cfe0:	460c      	mov	r4, r1
 801cfe2:	461e      	mov	r6, r3
 801cfe4:	f101 0c14 	add.w	ip, r1, #20
 801cfe8:	2000      	movs	r0, #0
 801cfea:	f8dc 3000 	ldr.w	r3, [ip]
 801cfee:	b299      	uxth	r1, r3
 801cff0:	fb02 6101 	mla	r1, r2, r1, r6
 801cff4:	0c1e      	lsrs	r6, r3, #16
 801cff6:	0c0b      	lsrs	r3, r1, #16
 801cff8:	fb02 3306 	mla	r3, r2, r6, r3
 801cffc:	b289      	uxth	r1, r1
 801cffe:	3001      	adds	r0, #1
 801d000:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801d004:	4285      	cmp	r5, r0
 801d006:	f84c 1b04 	str.w	r1, [ip], #4
 801d00a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801d00e:	dcec      	bgt.n	801cfea <__multadd+0x12>
 801d010:	b30e      	cbz	r6, 801d056 <__multadd+0x7e>
 801d012:	68a3      	ldr	r3, [r4, #8]
 801d014:	42ab      	cmp	r3, r5
 801d016:	dc19      	bgt.n	801d04c <__multadd+0x74>
 801d018:	6861      	ldr	r1, [r4, #4]
 801d01a:	4638      	mov	r0, r7
 801d01c:	3101      	adds	r1, #1
 801d01e:	f7ff ff79 	bl	801cf14 <_Balloc>
 801d022:	4680      	mov	r8, r0
 801d024:	b928      	cbnz	r0, 801d032 <__multadd+0x5a>
 801d026:	4602      	mov	r2, r0
 801d028:	4b0c      	ldr	r3, [pc, #48]	; (801d05c <__multadd+0x84>)
 801d02a:	480d      	ldr	r0, [pc, #52]	; (801d060 <__multadd+0x88>)
 801d02c:	21b5      	movs	r1, #181	; 0xb5
 801d02e:	f000 fec1 	bl	801ddb4 <__assert_func>
 801d032:	6922      	ldr	r2, [r4, #16]
 801d034:	3202      	adds	r2, #2
 801d036:	f104 010c 	add.w	r1, r4, #12
 801d03a:	0092      	lsls	r2, r2, #2
 801d03c:	300c      	adds	r0, #12
 801d03e:	f7ff ff5b 	bl	801cef8 <memcpy>
 801d042:	4621      	mov	r1, r4
 801d044:	4638      	mov	r0, r7
 801d046:	f7ff ffa5 	bl	801cf94 <_Bfree>
 801d04a:	4644      	mov	r4, r8
 801d04c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d050:	3501      	adds	r5, #1
 801d052:	615e      	str	r6, [r3, #20]
 801d054:	6125      	str	r5, [r4, #16]
 801d056:	4620      	mov	r0, r4
 801d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d05c:	08052b50 	.word	0x08052b50
 801d060:	08052bdc 	.word	0x08052bdc

0801d064 <__s2b>:
 801d064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d068:	460c      	mov	r4, r1
 801d06a:	4615      	mov	r5, r2
 801d06c:	461f      	mov	r7, r3
 801d06e:	2209      	movs	r2, #9
 801d070:	3308      	adds	r3, #8
 801d072:	4606      	mov	r6, r0
 801d074:	fb93 f3f2 	sdiv	r3, r3, r2
 801d078:	2100      	movs	r1, #0
 801d07a:	2201      	movs	r2, #1
 801d07c:	429a      	cmp	r2, r3
 801d07e:	db09      	blt.n	801d094 <__s2b+0x30>
 801d080:	4630      	mov	r0, r6
 801d082:	f7ff ff47 	bl	801cf14 <_Balloc>
 801d086:	b940      	cbnz	r0, 801d09a <__s2b+0x36>
 801d088:	4602      	mov	r2, r0
 801d08a:	4b19      	ldr	r3, [pc, #100]	; (801d0f0 <__s2b+0x8c>)
 801d08c:	4819      	ldr	r0, [pc, #100]	; (801d0f4 <__s2b+0x90>)
 801d08e:	21ce      	movs	r1, #206	; 0xce
 801d090:	f000 fe90 	bl	801ddb4 <__assert_func>
 801d094:	0052      	lsls	r2, r2, #1
 801d096:	3101      	adds	r1, #1
 801d098:	e7f0      	b.n	801d07c <__s2b+0x18>
 801d09a:	9b08      	ldr	r3, [sp, #32]
 801d09c:	6143      	str	r3, [r0, #20]
 801d09e:	2d09      	cmp	r5, #9
 801d0a0:	f04f 0301 	mov.w	r3, #1
 801d0a4:	6103      	str	r3, [r0, #16]
 801d0a6:	dd16      	ble.n	801d0d6 <__s2b+0x72>
 801d0a8:	f104 0909 	add.w	r9, r4, #9
 801d0ac:	46c8      	mov	r8, r9
 801d0ae:	442c      	add	r4, r5
 801d0b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801d0b4:	4601      	mov	r1, r0
 801d0b6:	3b30      	subs	r3, #48	; 0x30
 801d0b8:	220a      	movs	r2, #10
 801d0ba:	4630      	mov	r0, r6
 801d0bc:	f7ff ff8c 	bl	801cfd8 <__multadd>
 801d0c0:	45a0      	cmp	r8, r4
 801d0c2:	d1f5      	bne.n	801d0b0 <__s2b+0x4c>
 801d0c4:	f1a5 0408 	sub.w	r4, r5, #8
 801d0c8:	444c      	add	r4, r9
 801d0ca:	1b2d      	subs	r5, r5, r4
 801d0cc:	1963      	adds	r3, r4, r5
 801d0ce:	42bb      	cmp	r3, r7
 801d0d0:	db04      	blt.n	801d0dc <__s2b+0x78>
 801d0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d0d6:	340a      	adds	r4, #10
 801d0d8:	2509      	movs	r5, #9
 801d0da:	e7f6      	b.n	801d0ca <__s2b+0x66>
 801d0dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d0e0:	4601      	mov	r1, r0
 801d0e2:	3b30      	subs	r3, #48	; 0x30
 801d0e4:	220a      	movs	r2, #10
 801d0e6:	4630      	mov	r0, r6
 801d0e8:	f7ff ff76 	bl	801cfd8 <__multadd>
 801d0ec:	e7ee      	b.n	801d0cc <__s2b+0x68>
 801d0ee:	bf00      	nop
 801d0f0:	08052b50 	.word	0x08052b50
 801d0f4:	08052bdc 	.word	0x08052bdc

0801d0f8 <__hi0bits>:
 801d0f8:	0c03      	lsrs	r3, r0, #16
 801d0fa:	041b      	lsls	r3, r3, #16
 801d0fc:	b9d3      	cbnz	r3, 801d134 <__hi0bits+0x3c>
 801d0fe:	0400      	lsls	r0, r0, #16
 801d100:	2310      	movs	r3, #16
 801d102:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d106:	bf04      	itt	eq
 801d108:	0200      	lsleq	r0, r0, #8
 801d10a:	3308      	addeq	r3, #8
 801d10c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d110:	bf04      	itt	eq
 801d112:	0100      	lsleq	r0, r0, #4
 801d114:	3304      	addeq	r3, #4
 801d116:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d11a:	bf04      	itt	eq
 801d11c:	0080      	lsleq	r0, r0, #2
 801d11e:	3302      	addeq	r3, #2
 801d120:	2800      	cmp	r0, #0
 801d122:	db05      	blt.n	801d130 <__hi0bits+0x38>
 801d124:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d128:	f103 0301 	add.w	r3, r3, #1
 801d12c:	bf08      	it	eq
 801d12e:	2320      	moveq	r3, #32
 801d130:	4618      	mov	r0, r3
 801d132:	4770      	bx	lr
 801d134:	2300      	movs	r3, #0
 801d136:	e7e4      	b.n	801d102 <__hi0bits+0xa>

0801d138 <__lo0bits>:
 801d138:	6803      	ldr	r3, [r0, #0]
 801d13a:	f013 0207 	ands.w	r2, r3, #7
 801d13e:	4601      	mov	r1, r0
 801d140:	d00b      	beq.n	801d15a <__lo0bits+0x22>
 801d142:	07da      	lsls	r2, r3, #31
 801d144:	d423      	bmi.n	801d18e <__lo0bits+0x56>
 801d146:	0798      	lsls	r0, r3, #30
 801d148:	bf49      	itett	mi
 801d14a:	085b      	lsrmi	r3, r3, #1
 801d14c:	089b      	lsrpl	r3, r3, #2
 801d14e:	2001      	movmi	r0, #1
 801d150:	600b      	strmi	r3, [r1, #0]
 801d152:	bf5c      	itt	pl
 801d154:	600b      	strpl	r3, [r1, #0]
 801d156:	2002      	movpl	r0, #2
 801d158:	4770      	bx	lr
 801d15a:	b298      	uxth	r0, r3
 801d15c:	b9a8      	cbnz	r0, 801d18a <__lo0bits+0x52>
 801d15e:	0c1b      	lsrs	r3, r3, #16
 801d160:	2010      	movs	r0, #16
 801d162:	b2da      	uxtb	r2, r3
 801d164:	b90a      	cbnz	r2, 801d16a <__lo0bits+0x32>
 801d166:	3008      	adds	r0, #8
 801d168:	0a1b      	lsrs	r3, r3, #8
 801d16a:	071a      	lsls	r2, r3, #28
 801d16c:	bf04      	itt	eq
 801d16e:	091b      	lsreq	r3, r3, #4
 801d170:	3004      	addeq	r0, #4
 801d172:	079a      	lsls	r2, r3, #30
 801d174:	bf04      	itt	eq
 801d176:	089b      	lsreq	r3, r3, #2
 801d178:	3002      	addeq	r0, #2
 801d17a:	07da      	lsls	r2, r3, #31
 801d17c:	d403      	bmi.n	801d186 <__lo0bits+0x4e>
 801d17e:	085b      	lsrs	r3, r3, #1
 801d180:	f100 0001 	add.w	r0, r0, #1
 801d184:	d005      	beq.n	801d192 <__lo0bits+0x5a>
 801d186:	600b      	str	r3, [r1, #0]
 801d188:	4770      	bx	lr
 801d18a:	4610      	mov	r0, r2
 801d18c:	e7e9      	b.n	801d162 <__lo0bits+0x2a>
 801d18e:	2000      	movs	r0, #0
 801d190:	4770      	bx	lr
 801d192:	2020      	movs	r0, #32
 801d194:	4770      	bx	lr
	...

0801d198 <__i2b>:
 801d198:	b510      	push	{r4, lr}
 801d19a:	460c      	mov	r4, r1
 801d19c:	2101      	movs	r1, #1
 801d19e:	f7ff feb9 	bl	801cf14 <_Balloc>
 801d1a2:	4602      	mov	r2, r0
 801d1a4:	b928      	cbnz	r0, 801d1b2 <__i2b+0x1a>
 801d1a6:	4b05      	ldr	r3, [pc, #20]	; (801d1bc <__i2b+0x24>)
 801d1a8:	4805      	ldr	r0, [pc, #20]	; (801d1c0 <__i2b+0x28>)
 801d1aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d1ae:	f000 fe01 	bl	801ddb4 <__assert_func>
 801d1b2:	2301      	movs	r3, #1
 801d1b4:	6144      	str	r4, [r0, #20]
 801d1b6:	6103      	str	r3, [r0, #16]
 801d1b8:	bd10      	pop	{r4, pc}
 801d1ba:	bf00      	nop
 801d1bc:	08052b50 	.word	0x08052b50
 801d1c0:	08052bdc 	.word	0x08052bdc

0801d1c4 <__multiply>:
 801d1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1c8:	4691      	mov	r9, r2
 801d1ca:	690a      	ldr	r2, [r1, #16]
 801d1cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d1d0:	429a      	cmp	r2, r3
 801d1d2:	bfb8      	it	lt
 801d1d4:	460b      	movlt	r3, r1
 801d1d6:	460c      	mov	r4, r1
 801d1d8:	bfbc      	itt	lt
 801d1da:	464c      	movlt	r4, r9
 801d1dc:	4699      	movlt	r9, r3
 801d1de:	6927      	ldr	r7, [r4, #16]
 801d1e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801d1e4:	68a3      	ldr	r3, [r4, #8]
 801d1e6:	6861      	ldr	r1, [r4, #4]
 801d1e8:	eb07 060a 	add.w	r6, r7, sl
 801d1ec:	42b3      	cmp	r3, r6
 801d1ee:	b085      	sub	sp, #20
 801d1f0:	bfb8      	it	lt
 801d1f2:	3101      	addlt	r1, #1
 801d1f4:	f7ff fe8e 	bl	801cf14 <_Balloc>
 801d1f8:	b930      	cbnz	r0, 801d208 <__multiply+0x44>
 801d1fa:	4602      	mov	r2, r0
 801d1fc:	4b44      	ldr	r3, [pc, #272]	; (801d310 <__multiply+0x14c>)
 801d1fe:	4845      	ldr	r0, [pc, #276]	; (801d314 <__multiply+0x150>)
 801d200:	f240 115d 	movw	r1, #349	; 0x15d
 801d204:	f000 fdd6 	bl	801ddb4 <__assert_func>
 801d208:	f100 0514 	add.w	r5, r0, #20
 801d20c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d210:	462b      	mov	r3, r5
 801d212:	2200      	movs	r2, #0
 801d214:	4543      	cmp	r3, r8
 801d216:	d321      	bcc.n	801d25c <__multiply+0x98>
 801d218:	f104 0314 	add.w	r3, r4, #20
 801d21c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801d220:	f109 0314 	add.w	r3, r9, #20
 801d224:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801d228:	9202      	str	r2, [sp, #8]
 801d22a:	1b3a      	subs	r2, r7, r4
 801d22c:	3a15      	subs	r2, #21
 801d22e:	f022 0203 	bic.w	r2, r2, #3
 801d232:	3204      	adds	r2, #4
 801d234:	f104 0115 	add.w	r1, r4, #21
 801d238:	428f      	cmp	r7, r1
 801d23a:	bf38      	it	cc
 801d23c:	2204      	movcc	r2, #4
 801d23e:	9201      	str	r2, [sp, #4]
 801d240:	9a02      	ldr	r2, [sp, #8]
 801d242:	9303      	str	r3, [sp, #12]
 801d244:	429a      	cmp	r2, r3
 801d246:	d80c      	bhi.n	801d262 <__multiply+0x9e>
 801d248:	2e00      	cmp	r6, #0
 801d24a:	dd03      	ble.n	801d254 <__multiply+0x90>
 801d24c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d250:	2b00      	cmp	r3, #0
 801d252:	d05a      	beq.n	801d30a <__multiply+0x146>
 801d254:	6106      	str	r6, [r0, #16]
 801d256:	b005      	add	sp, #20
 801d258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d25c:	f843 2b04 	str.w	r2, [r3], #4
 801d260:	e7d8      	b.n	801d214 <__multiply+0x50>
 801d262:	f8b3 a000 	ldrh.w	sl, [r3]
 801d266:	f1ba 0f00 	cmp.w	sl, #0
 801d26a:	d024      	beq.n	801d2b6 <__multiply+0xf2>
 801d26c:	f104 0e14 	add.w	lr, r4, #20
 801d270:	46a9      	mov	r9, r5
 801d272:	f04f 0c00 	mov.w	ip, #0
 801d276:	f85e 2b04 	ldr.w	r2, [lr], #4
 801d27a:	f8d9 1000 	ldr.w	r1, [r9]
 801d27e:	fa1f fb82 	uxth.w	fp, r2
 801d282:	b289      	uxth	r1, r1
 801d284:	fb0a 110b 	mla	r1, sl, fp, r1
 801d288:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d28c:	f8d9 2000 	ldr.w	r2, [r9]
 801d290:	4461      	add	r1, ip
 801d292:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d296:	fb0a c20b 	mla	r2, sl, fp, ip
 801d29a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801d29e:	b289      	uxth	r1, r1
 801d2a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801d2a4:	4577      	cmp	r7, lr
 801d2a6:	f849 1b04 	str.w	r1, [r9], #4
 801d2aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801d2ae:	d8e2      	bhi.n	801d276 <__multiply+0xb2>
 801d2b0:	9a01      	ldr	r2, [sp, #4]
 801d2b2:	f845 c002 	str.w	ip, [r5, r2]
 801d2b6:	9a03      	ldr	r2, [sp, #12]
 801d2b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d2bc:	3304      	adds	r3, #4
 801d2be:	f1b9 0f00 	cmp.w	r9, #0
 801d2c2:	d020      	beq.n	801d306 <__multiply+0x142>
 801d2c4:	6829      	ldr	r1, [r5, #0]
 801d2c6:	f104 0c14 	add.w	ip, r4, #20
 801d2ca:	46ae      	mov	lr, r5
 801d2cc:	f04f 0a00 	mov.w	sl, #0
 801d2d0:	f8bc b000 	ldrh.w	fp, [ip]
 801d2d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801d2d8:	fb09 220b 	mla	r2, r9, fp, r2
 801d2dc:	4492      	add	sl, r2
 801d2de:	b289      	uxth	r1, r1
 801d2e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801d2e4:	f84e 1b04 	str.w	r1, [lr], #4
 801d2e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 801d2ec:	f8be 1000 	ldrh.w	r1, [lr]
 801d2f0:	0c12      	lsrs	r2, r2, #16
 801d2f2:	fb09 1102 	mla	r1, r9, r2, r1
 801d2f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801d2fa:	4567      	cmp	r7, ip
 801d2fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801d300:	d8e6      	bhi.n	801d2d0 <__multiply+0x10c>
 801d302:	9a01      	ldr	r2, [sp, #4]
 801d304:	50a9      	str	r1, [r5, r2]
 801d306:	3504      	adds	r5, #4
 801d308:	e79a      	b.n	801d240 <__multiply+0x7c>
 801d30a:	3e01      	subs	r6, #1
 801d30c:	e79c      	b.n	801d248 <__multiply+0x84>
 801d30e:	bf00      	nop
 801d310:	08052b50 	.word	0x08052b50
 801d314:	08052bdc 	.word	0x08052bdc

0801d318 <__pow5mult>:
 801d318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d31c:	4615      	mov	r5, r2
 801d31e:	f012 0203 	ands.w	r2, r2, #3
 801d322:	4606      	mov	r6, r0
 801d324:	460f      	mov	r7, r1
 801d326:	d007      	beq.n	801d338 <__pow5mult+0x20>
 801d328:	4c25      	ldr	r4, [pc, #148]	; (801d3c0 <__pow5mult+0xa8>)
 801d32a:	3a01      	subs	r2, #1
 801d32c:	2300      	movs	r3, #0
 801d32e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d332:	f7ff fe51 	bl	801cfd8 <__multadd>
 801d336:	4607      	mov	r7, r0
 801d338:	10ad      	asrs	r5, r5, #2
 801d33a:	d03d      	beq.n	801d3b8 <__pow5mult+0xa0>
 801d33c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d33e:	b97c      	cbnz	r4, 801d360 <__pow5mult+0x48>
 801d340:	2010      	movs	r0, #16
 801d342:	f7ff fdbf 	bl	801cec4 <malloc>
 801d346:	4602      	mov	r2, r0
 801d348:	6270      	str	r0, [r6, #36]	; 0x24
 801d34a:	b928      	cbnz	r0, 801d358 <__pow5mult+0x40>
 801d34c:	4b1d      	ldr	r3, [pc, #116]	; (801d3c4 <__pow5mult+0xac>)
 801d34e:	481e      	ldr	r0, [pc, #120]	; (801d3c8 <__pow5mult+0xb0>)
 801d350:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d354:	f000 fd2e 	bl	801ddb4 <__assert_func>
 801d358:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d35c:	6004      	str	r4, [r0, #0]
 801d35e:	60c4      	str	r4, [r0, #12]
 801d360:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d364:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d368:	b94c      	cbnz	r4, 801d37e <__pow5mult+0x66>
 801d36a:	f240 2171 	movw	r1, #625	; 0x271
 801d36e:	4630      	mov	r0, r6
 801d370:	f7ff ff12 	bl	801d198 <__i2b>
 801d374:	2300      	movs	r3, #0
 801d376:	f8c8 0008 	str.w	r0, [r8, #8]
 801d37a:	4604      	mov	r4, r0
 801d37c:	6003      	str	r3, [r0, #0]
 801d37e:	f04f 0900 	mov.w	r9, #0
 801d382:	07eb      	lsls	r3, r5, #31
 801d384:	d50a      	bpl.n	801d39c <__pow5mult+0x84>
 801d386:	4639      	mov	r1, r7
 801d388:	4622      	mov	r2, r4
 801d38a:	4630      	mov	r0, r6
 801d38c:	f7ff ff1a 	bl	801d1c4 <__multiply>
 801d390:	4639      	mov	r1, r7
 801d392:	4680      	mov	r8, r0
 801d394:	4630      	mov	r0, r6
 801d396:	f7ff fdfd 	bl	801cf94 <_Bfree>
 801d39a:	4647      	mov	r7, r8
 801d39c:	106d      	asrs	r5, r5, #1
 801d39e:	d00b      	beq.n	801d3b8 <__pow5mult+0xa0>
 801d3a0:	6820      	ldr	r0, [r4, #0]
 801d3a2:	b938      	cbnz	r0, 801d3b4 <__pow5mult+0x9c>
 801d3a4:	4622      	mov	r2, r4
 801d3a6:	4621      	mov	r1, r4
 801d3a8:	4630      	mov	r0, r6
 801d3aa:	f7ff ff0b 	bl	801d1c4 <__multiply>
 801d3ae:	6020      	str	r0, [r4, #0]
 801d3b0:	f8c0 9000 	str.w	r9, [r0]
 801d3b4:	4604      	mov	r4, r0
 801d3b6:	e7e4      	b.n	801d382 <__pow5mult+0x6a>
 801d3b8:	4638      	mov	r0, r7
 801d3ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d3be:	bf00      	nop
 801d3c0:	08052d28 	.word	0x08052d28
 801d3c4:	08052ade 	.word	0x08052ade
 801d3c8:	08052bdc 	.word	0x08052bdc

0801d3cc <__lshift>:
 801d3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3d0:	460c      	mov	r4, r1
 801d3d2:	6849      	ldr	r1, [r1, #4]
 801d3d4:	6923      	ldr	r3, [r4, #16]
 801d3d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d3da:	68a3      	ldr	r3, [r4, #8]
 801d3dc:	4607      	mov	r7, r0
 801d3de:	4691      	mov	r9, r2
 801d3e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d3e4:	f108 0601 	add.w	r6, r8, #1
 801d3e8:	42b3      	cmp	r3, r6
 801d3ea:	db0b      	blt.n	801d404 <__lshift+0x38>
 801d3ec:	4638      	mov	r0, r7
 801d3ee:	f7ff fd91 	bl	801cf14 <_Balloc>
 801d3f2:	4605      	mov	r5, r0
 801d3f4:	b948      	cbnz	r0, 801d40a <__lshift+0x3e>
 801d3f6:	4602      	mov	r2, r0
 801d3f8:	4b2a      	ldr	r3, [pc, #168]	; (801d4a4 <__lshift+0xd8>)
 801d3fa:	482b      	ldr	r0, [pc, #172]	; (801d4a8 <__lshift+0xdc>)
 801d3fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d400:	f000 fcd8 	bl	801ddb4 <__assert_func>
 801d404:	3101      	adds	r1, #1
 801d406:	005b      	lsls	r3, r3, #1
 801d408:	e7ee      	b.n	801d3e8 <__lshift+0x1c>
 801d40a:	2300      	movs	r3, #0
 801d40c:	f100 0114 	add.w	r1, r0, #20
 801d410:	f100 0210 	add.w	r2, r0, #16
 801d414:	4618      	mov	r0, r3
 801d416:	4553      	cmp	r3, sl
 801d418:	db37      	blt.n	801d48a <__lshift+0xbe>
 801d41a:	6920      	ldr	r0, [r4, #16]
 801d41c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d420:	f104 0314 	add.w	r3, r4, #20
 801d424:	f019 091f 	ands.w	r9, r9, #31
 801d428:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d42c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801d430:	d02f      	beq.n	801d492 <__lshift+0xc6>
 801d432:	f1c9 0e20 	rsb	lr, r9, #32
 801d436:	468a      	mov	sl, r1
 801d438:	f04f 0c00 	mov.w	ip, #0
 801d43c:	681a      	ldr	r2, [r3, #0]
 801d43e:	fa02 f209 	lsl.w	r2, r2, r9
 801d442:	ea42 020c 	orr.w	r2, r2, ip
 801d446:	f84a 2b04 	str.w	r2, [sl], #4
 801d44a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d44e:	4298      	cmp	r0, r3
 801d450:	fa22 fc0e 	lsr.w	ip, r2, lr
 801d454:	d8f2      	bhi.n	801d43c <__lshift+0x70>
 801d456:	1b03      	subs	r3, r0, r4
 801d458:	3b15      	subs	r3, #21
 801d45a:	f023 0303 	bic.w	r3, r3, #3
 801d45e:	3304      	adds	r3, #4
 801d460:	f104 0215 	add.w	r2, r4, #21
 801d464:	4290      	cmp	r0, r2
 801d466:	bf38      	it	cc
 801d468:	2304      	movcc	r3, #4
 801d46a:	f841 c003 	str.w	ip, [r1, r3]
 801d46e:	f1bc 0f00 	cmp.w	ip, #0
 801d472:	d001      	beq.n	801d478 <__lshift+0xac>
 801d474:	f108 0602 	add.w	r6, r8, #2
 801d478:	3e01      	subs	r6, #1
 801d47a:	4638      	mov	r0, r7
 801d47c:	612e      	str	r6, [r5, #16]
 801d47e:	4621      	mov	r1, r4
 801d480:	f7ff fd88 	bl	801cf94 <_Bfree>
 801d484:	4628      	mov	r0, r5
 801d486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d48a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d48e:	3301      	adds	r3, #1
 801d490:	e7c1      	b.n	801d416 <__lshift+0x4a>
 801d492:	3904      	subs	r1, #4
 801d494:	f853 2b04 	ldr.w	r2, [r3], #4
 801d498:	f841 2f04 	str.w	r2, [r1, #4]!
 801d49c:	4298      	cmp	r0, r3
 801d49e:	d8f9      	bhi.n	801d494 <__lshift+0xc8>
 801d4a0:	e7ea      	b.n	801d478 <__lshift+0xac>
 801d4a2:	bf00      	nop
 801d4a4:	08052b50 	.word	0x08052b50
 801d4a8:	08052bdc 	.word	0x08052bdc

0801d4ac <__mcmp>:
 801d4ac:	b530      	push	{r4, r5, lr}
 801d4ae:	6902      	ldr	r2, [r0, #16]
 801d4b0:	690c      	ldr	r4, [r1, #16]
 801d4b2:	1b12      	subs	r2, r2, r4
 801d4b4:	d10e      	bne.n	801d4d4 <__mcmp+0x28>
 801d4b6:	f100 0314 	add.w	r3, r0, #20
 801d4ba:	3114      	adds	r1, #20
 801d4bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d4c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d4c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d4c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d4cc:	42a5      	cmp	r5, r4
 801d4ce:	d003      	beq.n	801d4d8 <__mcmp+0x2c>
 801d4d0:	d305      	bcc.n	801d4de <__mcmp+0x32>
 801d4d2:	2201      	movs	r2, #1
 801d4d4:	4610      	mov	r0, r2
 801d4d6:	bd30      	pop	{r4, r5, pc}
 801d4d8:	4283      	cmp	r3, r0
 801d4da:	d3f3      	bcc.n	801d4c4 <__mcmp+0x18>
 801d4dc:	e7fa      	b.n	801d4d4 <__mcmp+0x28>
 801d4de:	f04f 32ff 	mov.w	r2, #4294967295
 801d4e2:	e7f7      	b.n	801d4d4 <__mcmp+0x28>

0801d4e4 <__mdiff>:
 801d4e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4e8:	460c      	mov	r4, r1
 801d4ea:	4606      	mov	r6, r0
 801d4ec:	4611      	mov	r1, r2
 801d4ee:	4620      	mov	r0, r4
 801d4f0:	4690      	mov	r8, r2
 801d4f2:	f7ff ffdb 	bl	801d4ac <__mcmp>
 801d4f6:	1e05      	subs	r5, r0, #0
 801d4f8:	d110      	bne.n	801d51c <__mdiff+0x38>
 801d4fa:	4629      	mov	r1, r5
 801d4fc:	4630      	mov	r0, r6
 801d4fe:	f7ff fd09 	bl	801cf14 <_Balloc>
 801d502:	b930      	cbnz	r0, 801d512 <__mdiff+0x2e>
 801d504:	4b3a      	ldr	r3, [pc, #232]	; (801d5f0 <__mdiff+0x10c>)
 801d506:	4602      	mov	r2, r0
 801d508:	f240 2132 	movw	r1, #562	; 0x232
 801d50c:	4839      	ldr	r0, [pc, #228]	; (801d5f4 <__mdiff+0x110>)
 801d50e:	f000 fc51 	bl	801ddb4 <__assert_func>
 801d512:	2301      	movs	r3, #1
 801d514:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d51c:	bfa4      	itt	ge
 801d51e:	4643      	movge	r3, r8
 801d520:	46a0      	movge	r8, r4
 801d522:	4630      	mov	r0, r6
 801d524:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d528:	bfa6      	itte	ge
 801d52a:	461c      	movge	r4, r3
 801d52c:	2500      	movge	r5, #0
 801d52e:	2501      	movlt	r5, #1
 801d530:	f7ff fcf0 	bl	801cf14 <_Balloc>
 801d534:	b920      	cbnz	r0, 801d540 <__mdiff+0x5c>
 801d536:	4b2e      	ldr	r3, [pc, #184]	; (801d5f0 <__mdiff+0x10c>)
 801d538:	4602      	mov	r2, r0
 801d53a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d53e:	e7e5      	b.n	801d50c <__mdiff+0x28>
 801d540:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d544:	6926      	ldr	r6, [r4, #16]
 801d546:	60c5      	str	r5, [r0, #12]
 801d548:	f104 0914 	add.w	r9, r4, #20
 801d54c:	f108 0514 	add.w	r5, r8, #20
 801d550:	f100 0e14 	add.w	lr, r0, #20
 801d554:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801d558:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801d55c:	f108 0210 	add.w	r2, r8, #16
 801d560:	46f2      	mov	sl, lr
 801d562:	2100      	movs	r1, #0
 801d564:	f859 3b04 	ldr.w	r3, [r9], #4
 801d568:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d56c:	fa1f f883 	uxth.w	r8, r3
 801d570:	fa11 f18b 	uxtah	r1, r1, fp
 801d574:	0c1b      	lsrs	r3, r3, #16
 801d576:	eba1 0808 	sub.w	r8, r1, r8
 801d57a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d57e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d582:	fa1f f888 	uxth.w	r8, r8
 801d586:	1419      	asrs	r1, r3, #16
 801d588:	454e      	cmp	r6, r9
 801d58a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d58e:	f84a 3b04 	str.w	r3, [sl], #4
 801d592:	d8e7      	bhi.n	801d564 <__mdiff+0x80>
 801d594:	1b33      	subs	r3, r6, r4
 801d596:	3b15      	subs	r3, #21
 801d598:	f023 0303 	bic.w	r3, r3, #3
 801d59c:	3304      	adds	r3, #4
 801d59e:	3415      	adds	r4, #21
 801d5a0:	42a6      	cmp	r6, r4
 801d5a2:	bf38      	it	cc
 801d5a4:	2304      	movcc	r3, #4
 801d5a6:	441d      	add	r5, r3
 801d5a8:	4473      	add	r3, lr
 801d5aa:	469e      	mov	lr, r3
 801d5ac:	462e      	mov	r6, r5
 801d5ae:	4566      	cmp	r6, ip
 801d5b0:	d30e      	bcc.n	801d5d0 <__mdiff+0xec>
 801d5b2:	f10c 0203 	add.w	r2, ip, #3
 801d5b6:	1b52      	subs	r2, r2, r5
 801d5b8:	f022 0203 	bic.w	r2, r2, #3
 801d5bc:	3d03      	subs	r5, #3
 801d5be:	45ac      	cmp	ip, r5
 801d5c0:	bf38      	it	cc
 801d5c2:	2200      	movcc	r2, #0
 801d5c4:	441a      	add	r2, r3
 801d5c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d5ca:	b17b      	cbz	r3, 801d5ec <__mdiff+0x108>
 801d5cc:	6107      	str	r7, [r0, #16]
 801d5ce:	e7a3      	b.n	801d518 <__mdiff+0x34>
 801d5d0:	f856 8b04 	ldr.w	r8, [r6], #4
 801d5d4:	fa11 f288 	uxtah	r2, r1, r8
 801d5d8:	1414      	asrs	r4, r2, #16
 801d5da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801d5de:	b292      	uxth	r2, r2
 801d5e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801d5e4:	f84e 2b04 	str.w	r2, [lr], #4
 801d5e8:	1421      	asrs	r1, r4, #16
 801d5ea:	e7e0      	b.n	801d5ae <__mdiff+0xca>
 801d5ec:	3f01      	subs	r7, #1
 801d5ee:	e7ea      	b.n	801d5c6 <__mdiff+0xe2>
 801d5f0:	08052b50 	.word	0x08052b50
 801d5f4:	08052bdc 	.word	0x08052bdc

0801d5f8 <__ulp>:
 801d5f8:	b082      	sub	sp, #8
 801d5fa:	ed8d 0b00 	vstr	d0, [sp]
 801d5fe:	9b01      	ldr	r3, [sp, #4]
 801d600:	4912      	ldr	r1, [pc, #72]	; (801d64c <__ulp+0x54>)
 801d602:	4019      	ands	r1, r3
 801d604:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801d608:	2900      	cmp	r1, #0
 801d60a:	dd05      	ble.n	801d618 <__ulp+0x20>
 801d60c:	2200      	movs	r2, #0
 801d60e:	460b      	mov	r3, r1
 801d610:	ec43 2b10 	vmov	d0, r2, r3
 801d614:	b002      	add	sp, #8
 801d616:	4770      	bx	lr
 801d618:	4249      	negs	r1, r1
 801d61a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801d61e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801d622:	f04f 0200 	mov.w	r2, #0
 801d626:	f04f 0300 	mov.w	r3, #0
 801d62a:	da04      	bge.n	801d636 <__ulp+0x3e>
 801d62c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801d630:	fa41 f300 	asr.w	r3, r1, r0
 801d634:	e7ec      	b.n	801d610 <__ulp+0x18>
 801d636:	f1a0 0114 	sub.w	r1, r0, #20
 801d63a:	291e      	cmp	r1, #30
 801d63c:	bfda      	itte	le
 801d63e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801d642:	fa20 f101 	lsrle.w	r1, r0, r1
 801d646:	2101      	movgt	r1, #1
 801d648:	460a      	mov	r2, r1
 801d64a:	e7e1      	b.n	801d610 <__ulp+0x18>
 801d64c:	7ff00000 	.word	0x7ff00000

0801d650 <__b2d>:
 801d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d652:	6905      	ldr	r5, [r0, #16]
 801d654:	f100 0714 	add.w	r7, r0, #20
 801d658:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801d65c:	1f2e      	subs	r6, r5, #4
 801d65e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801d662:	4620      	mov	r0, r4
 801d664:	f7ff fd48 	bl	801d0f8 <__hi0bits>
 801d668:	f1c0 0320 	rsb	r3, r0, #32
 801d66c:	280a      	cmp	r0, #10
 801d66e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801d6ec <__b2d+0x9c>
 801d672:	600b      	str	r3, [r1, #0]
 801d674:	dc14      	bgt.n	801d6a0 <__b2d+0x50>
 801d676:	f1c0 0e0b 	rsb	lr, r0, #11
 801d67a:	fa24 f10e 	lsr.w	r1, r4, lr
 801d67e:	42b7      	cmp	r7, r6
 801d680:	ea41 030c 	orr.w	r3, r1, ip
 801d684:	bf34      	ite	cc
 801d686:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d68a:	2100      	movcs	r1, #0
 801d68c:	3015      	adds	r0, #21
 801d68e:	fa04 f000 	lsl.w	r0, r4, r0
 801d692:	fa21 f10e 	lsr.w	r1, r1, lr
 801d696:	ea40 0201 	orr.w	r2, r0, r1
 801d69a:	ec43 2b10 	vmov	d0, r2, r3
 801d69e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6a0:	42b7      	cmp	r7, r6
 801d6a2:	bf3a      	itte	cc
 801d6a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801d6a8:	f1a5 0608 	subcc.w	r6, r5, #8
 801d6ac:	2100      	movcs	r1, #0
 801d6ae:	380b      	subs	r0, #11
 801d6b0:	d017      	beq.n	801d6e2 <__b2d+0x92>
 801d6b2:	f1c0 0c20 	rsb	ip, r0, #32
 801d6b6:	fa04 f500 	lsl.w	r5, r4, r0
 801d6ba:	42be      	cmp	r6, r7
 801d6bc:	fa21 f40c 	lsr.w	r4, r1, ip
 801d6c0:	ea45 0504 	orr.w	r5, r5, r4
 801d6c4:	bf8c      	ite	hi
 801d6c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801d6ca:	2400      	movls	r4, #0
 801d6cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801d6d0:	fa01 f000 	lsl.w	r0, r1, r0
 801d6d4:	fa24 f40c 	lsr.w	r4, r4, ip
 801d6d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801d6dc:	ea40 0204 	orr.w	r2, r0, r4
 801d6e0:	e7db      	b.n	801d69a <__b2d+0x4a>
 801d6e2:	ea44 030c 	orr.w	r3, r4, ip
 801d6e6:	460a      	mov	r2, r1
 801d6e8:	e7d7      	b.n	801d69a <__b2d+0x4a>
 801d6ea:	bf00      	nop
 801d6ec:	3ff00000 	.word	0x3ff00000

0801d6f0 <__d2b>:
 801d6f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d6f4:	4689      	mov	r9, r1
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	ec57 6b10 	vmov	r6, r7, d0
 801d6fc:	4690      	mov	r8, r2
 801d6fe:	f7ff fc09 	bl	801cf14 <_Balloc>
 801d702:	4604      	mov	r4, r0
 801d704:	b930      	cbnz	r0, 801d714 <__d2b+0x24>
 801d706:	4602      	mov	r2, r0
 801d708:	4b25      	ldr	r3, [pc, #148]	; (801d7a0 <__d2b+0xb0>)
 801d70a:	4826      	ldr	r0, [pc, #152]	; (801d7a4 <__d2b+0xb4>)
 801d70c:	f240 310a 	movw	r1, #778	; 0x30a
 801d710:	f000 fb50 	bl	801ddb4 <__assert_func>
 801d714:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d718:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d71c:	bb35      	cbnz	r5, 801d76c <__d2b+0x7c>
 801d71e:	2e00      	cmp	r6, #0
 801d720:	9301      	str	r3, [sp, #4]
 801d722:	d028      	beq.n	801d776 <__d2b+0x86>
 801d724:	4668      	mov	r0, sp
 801d726:	9600      	str	r6, [sp, #0]
 801d728:	f7ff fd06 	bl	801d138 <__lo0bits>
 801d72c:	9900      	ldr	r1, [sp, #0]
 801d72e:	b300      	cbz	r0, 801d772 <__d2b+0x82>
 801d730:	9a01      	ldr	r2, [sp, #4]
 801d732:	f1c0 0320 	rsb	r3, r0, #32
 801d736:	fa02 f303 	lsl.w	r3, r2, r3
 801d73a:	430b      	orrs	r3, r1
 801d73c:	40c2      	lsrs	r2, r0
 801d73e:	6163      	str	r3, [r4, #20]
 801d740:	9201      	str	r2, [sp, #4]
 801d742:	9b01      	ldr	r3, [sp, #4]
 801d744:	61a3      	str	r3, [r4, #24]
 801d746:	2b00      	cmp	r3, #0
 801d748:	bf14      	ite	ne
 801d74a:	2202      	movne	r2, #2
 801d74c:	2201      	moveq	r2, #1
 801d74e:	6122      	str	r2, [r4, #16]
 801d750:	b1d5      	cbz	r5, 801d788 <__d2b+0x98>
 801d752:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d756:	4405      	add	r5, r0
 801d758:	f8c9 5000 	str.w	r5, [r9]
 801d75c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d760:	f8c8 0000 	str.w	r0, [r8]
 801d764:	4620      	mov	r0, r4
 801d766:	b003      	add	sp, #12
 801d768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d76c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d770:	e7d5      	b.n	801d71e <__d2b+0x2e>
 801d772:	6161      	str	r1, [r4, #20]
 801d774:	e7e5      	b.n	801d742 <__d2b+0x52>
 801d776:	a801      	add	r0, sp, #4
 801d778:	f7ff fcde 	bl	801d138 <__lo0bits>
 801d77c:	9b01      	ldr	r3, [sp, #4]
 801d77e:	6163      	str	r3, [r4, #20]
 801d780:	2201      	movs	r2, #1
 801d782:	6122      	str	r2, [r4, #16]
 801d784:	3020      	adds	r0, #32
 801d786:	e7e3      	b.n	801d750 <__d2b+0x60>
 801d788:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d78c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d790:	f8c9 0000 	str.w	r0, [r9]
 801d794:	6918      	ldr	r0, [r3, #16]
 801d796:	f7ff fcaf 	bl	801d0f8 <__hi0bits>
 801d79a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d79e:	e7df      	b.n	801d760 <__d2b+0x70>
 801d7a0:	08052b50 	.word	0x08052b50
 801d7a4:	08052bdc 	.word	0x08052bdc

0801d7a8 <__ratio>:
 801d7a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	4688      	mov	r8, r1
 801d7ae:	4669      	mov	r1, sp
 801d7b0:	4681      	mov	r9, r0
 801d7b2:	f7ff ff4d 	bl	801d650 <__b2d>
 801d7b6:	a901      	add	r1, sp, #4
 801d7b8:	4640      	mov	r0, r8
 801d7ba:	ec55 4b10 	vmov	r4, r5, d0
 801d7be:	f7ff ff47 	bl	801d650 <__b2d>
 801d7c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d7c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d7ca:	eba3 0c02 	sub.w	ip, r3, r2
 801d7ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d7d2:	1a9b      	subs	r3, r3, r2
 801d7d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d7d8:	ec51 0b10 	vmov	r0, r1, d0
 801d7dc:	2b00      	cmp	r3, #0
 801d7de:	bfd6      	itet	le
 801d7e0:	460a      	movle	r2, r1
 801d7e2:	462a      	movgt	r2, r5
 801d7e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d7e8:	468b      	mov	fp, r1
 801d7ea:	462f      	mov	r7, r5
 801d7ec:	bfd4      	ite	le
 801d7ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801d7f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	ee10 2a10 	vmov	r2, s0
 801d7fc:	465b      	mov	r3, fp
 801d7fe:	4639      	mov	r1, r7
 801d800:	f7fb ffe4 	bl	80197cc <__aeabi_ddiv>
 801d804:	ec41 0b10 	vmov	d0, r0, r1
 801d808:	b003      	add	sp, #12
 801d80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d80e <__copybits>:
 801d80e:	3901      	subs	r1, #1
 801d810:	b570      	push	{r4, r5, r6, lr}
 801d812:	1149      	asrs	r1, r1, #5
 801d814:	6914      	ldr	r4, [r2, #16]
 801d816:	3101      	adds	r1, #1
 801d818:	f102 0314 	add.w	r3, r2, #20
 801d81c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d820:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d824:	1f05      	subs	r5, r0, #4
 801d826:	42a3      	cmp	r3, r4
 801d828:	d30c      	bcc.n	801d844 <__copybits+0x36>
 801d82a:	1aa3      	subs	r3, r4, r2
 801d82c:	3b11      	subs	r3, #17
 801d82e:	f023 0303 	bic.w	r3, r3, #3
 801d832:	3211      	adds	r2, #17
 801d834:	42a2      	cmp	r2, r4
 801d836:	bf88      	it	hi
 801d838:	2300      	movhi	r3, #0
 801d83a:	4418      	add	r0, r3
 801d83c:	2300      	movs	r3, #0
 801d83e:	4288      	cmp	r0, r1
 801d840:	d305      	bcc.n	801d84e <__copybits+0x40>
 801d842:	bd70      	pop	{r4, r5, r6, pc}
 801d844:	f853 6b04 	ldr.w	r6, [r3], #4
 801d848:	f845 6f04 	str.w	r6, [r5, #4]!
 801d84c:	e7eb      	b.n	801d826 <__copybits+0x18>
 801d84e:	f840 3b04 	str.w	r3, [r0], #4
 801d852:	e7f4      	b.n	801d83e <__copybits+0x30>

0801d854 <__any_on>:
 801d854:	f100 0214 	add.w	r2, r0, #20
 801d858:	6900      	ldr	r0, [r0, #16]
 801d85a:	114b      	asrs	r3, r1, #5
 801d85c:	4298      	cmp	r0, r3
 801d85e:	b510      	push	{r4, lr}
 801d860:	db11      	blt.n	801d886 <__any_on+0x32>
 801d862:	dd0a      	ble.n	801d87a <__any_on+0x26>
 801d864:	f011 011f 	ands.w	r1, r1, #31
 801d868:	d007      	beq.n	801d87a <__any_on+0x26>
 801d86a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d86e:	fa24 f001 	lsr.w	r0, r4, r1
 801d872:	fa00 f101 	lsl.w	r1, r0, r1
 801d876:	428c      	cmp	r4, r1
 801d878:	d10b      	bne.n	801d892 <__any_on+0x3e>
 801d87a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d87e:	4293      	cmp	r3, r2
 801d880:	d803      	bhi.n	801d88a <__any_on+0x36>
 801d882:	2000      	movs	r0, #0
 801d884:	bd10      	pop	{r4, pc}
 801d886:	4603      	mov	r3, r0
 801d888:	e7f7      	b.n	801d87a <__any_on+0x26>
 801d88a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d88e:	2900      	cmp	r1, #0
 801d890:	d0f5      	beq.n	801d87e <__any_on+0x2a>
 801d892:	2001      	movs	r0, #1
 801d894:	e7f6      	b.n	801d884 <__any_on+0x30>

0801d896 <_calloc_r>:
 801d896:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d898:	fba1 2402 	umull	r2, r4, r1, r2
 801d89c:	b94c      	cbnz	r4, 801d8b2 <_calloc_r+0x1c>
 801d89e:	4611      	mov	r1, r2
 801d8a0:	9201      	str	r2, [sp, #4]
 801d8a2:	f000 f87b 	bl	801d99c <_malloc_r>
 801d8a6:	9a01      	ldr	r2, [sp, #4]
 801d8a8:	4605      	mov	r5, r0
 801d8aa:	b930      	cbnz	r0, 801d8ba <_calloc_r+0x24>
 801d8ac:	4628      	mov	r0, r5
 801d8ae:	b003      	add	sp, #12
 801d8b0:	bd30      	pop	{r4, r5, pc}
 801d8b2:	220c      	movs	r2, #12
 801d8b4:	6002      	str	r2, [r0, #0]
 801d8b6:	2500      	movs	r5, #0
 801d8b8:	e7f8      	b.n	801d8ac <_calloc_r+0x16>
 801d8ba:	4621      	mov	r1, r4
 801d8bc:	f7fc fbb4 	bl	801a028 <memset>
 801d8c0:	e7f4      	b.n	801d8ac <_calloc_r+0x16>
	...

0801d8c4 <_free_r>:
 801d8c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d8c6:	2900      	cmp	r1, #0
 801d8c8:	d044      	beq.n	801d954 <_free_r+0x90>
 801d8ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d8ce:	9001      	str	r0, [sp, #4]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	f1a1 0404 	sub.w	r4, r1, #4
 801d8d6:	bfb8      	it	lt
 801d8d8:	18e4      	addlt	r4, r4, r3
 801d8da:	f000 fab5 	bl	801de48 <__malloc_lock>
 801d8de:	4a1e      	ldr	r2, [pc, #120]	; (801d958 <_free_r+0x94>)
 801d8e0:	9801      	ldr	r0, [sp, #4]
 801d8e2:	6813      	ldr	r3, [r2, #0]
 801d8e4:	b933      	cbnz	r3, 801d8f4 <_free_r+0x30>
 801d8e6:	6063      	str	r3, [r4, #4]
 801d8e8:	6014      	str	r4, [r2, #0]
 801d8ea:	b003      	add	sp, #12
 801d8ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d8f0:	f000 bab0 	b.w	801de54 <__malloc_unlock>
 801d8f4:	42a3      	cmp	r3, r4
 801d8f6:	d908      	bls.n	801d90a <_free_r+0x46>
 801d8f8:	6825      	ldr	r5, [r4, #0]
 801d8fa:	1961      	adds	r1, r4, r5
 801d8fc:	428b      	cmp	r3, r1
 801d8fe:	bf01      	itttt	eq
 801d900:	6819      	ldreq	r1, [r3, #0]
 801d902:	685b      	ldreq	r3, [r3, #4]
 801d904:	1949      	addeq	r1, r1, r5
 801d906:	6021      	streq	r1, [r4, #0]
 801d908:	e7ed      	b.n	801d8e6 <_free_r+0x22>
 801d90a:	461a      	mov	r2, r3
 801d90c:	685b      	ldr	r3, [r3, #4]
 801d90e:	b10b      	cbz	r3, 801d914 <_free_r+0x50>
 801d910:	42a3      	cmp	r3, r4
 801d912:	d9fa      	bls.n	801d90a <_free_r+0x46>
 801d914:	6811      	ldr	r1, [r2, #0]
 801d916:	1855      	adds	r5, r2, r1
 801d918:	42a5      	cmp	r5, r4
 801d91a:	d10b      	bne.n	801d934 <_free_r+0x70>
 801d91c:	6824      	ldr	r4, [r4, #0]
 801d91e:	4421      	add	r1, r4
 801d920:	1854      	adds	r4, r2, r1
 801d922:	42a3      	cmp	r3, r4
 801d924:	6011      	str	r1, [r2, #0]
 801d926:	d1e0      	bne.n	801d8ea <_free_r+0x26>
 801d928:	681c      	ldr	r4, [r3, #0]
 801d92a:	685b      	ldr	r3, [r3, #4]
 801d92c:	6053      	str	r3, [r2, #4]
 801d92e:	4421      	add	r1, r4
 801d930:	6011      	str	r1, [r2, #0]
 801d932:	e7da      	b.n	801d8ea <_free_r+0x26>
 801d934:	d902      	bls.n	801d93c <_free_r+0x78>
 801d936:	230c      	movs	r3, #12
 801d938:	6003      	str	r3, [r0, #0]
 801d93a:	e7d6      	b.n	801d8ea <_free_r+0x26>
 801d93c:	6825      	ldr	r5, [r4, #0]
 801d93e:	1961      	adds	r1, r4, r5
 801d940:	428b      	cmp	r3, r1
 801d942:	bf04      	itt	eq
 801d944:	6819      	ldreq	r1, [r3, #0]
 801d946:	685b      	ldreq	r3, [r3, #4]
 801d948:	6063      	str	r3, [r4, #4]
 801d94a:	bf04      	itt	eq
 801d94c:	1949      	addeq	r1, r1, r5
 801d94e:	6021      	streq	r1, [r4, #0]
 801d950:	6054      	str	r4, [r2, #4]
 801d952:	e7ca      	b.n	801d8ea <_free_r+0x26>
 801d954:	b003      	add	sp, #12
 801d956:	bd30      	pop	{r4, r5, pc}
 801d958:	20000a10 	.word	0x20000a10

0801d95c <sbrk_aligned>:
 801d95c:	b570      	push	{r4, r5, r6, lr}
 801d95e:	4e0e      	ldr	r6, [pc, #56]	; (801d998 <sbrk_aligned+0x3c>)
 801d960:	460c      	mov	r4, r1
 801d962:	6831      	ldr	r1, [r6, #0]
 801d964:	4605      	mov	r5, r0
 801d966:	b911      	cbnz	r1, 801d96e <sbrk_aligned+0x12>
 801d968:	f000 f9f2 	bl	801dd50 <_sbrk_r>
 801d96c:	6030      	str	r0, [r6, #0]
 801d96e:	4621      	mov	r1, r4
 801d970:	4628      	mov	r0, r5
 801d972:	f000 f9ed 	bl	801dd50 <_sbrk_r>
 801d976:	1c43      	adds	r3, r0, #1
 801d978:	d00a      	beq.n	801d990 <sbrk_aligned+0x34>
 801d97a:	1cc4      	adds	r4, r0, #3
 801d97c:	f024 0403 	bic.w	r4, r4, #3
 801d980:	42a0      	cmp	r0, r4
 801d982:	d007      	beq.n	801d994 <sbrk_aligned+0x38>
 801d984:	1a21      	subs	r1, r4, r0
 801d986:	4628      	mov	r0, r5
 801d988:	f000 f9e2 	bl	801dd50 <_sbrk_r>
 801d98c:	3001      	adds	r0, #1
 801d98e:	d101      	bne.n	801d994 <sbrk_aligned+0x38>
 801d990:	f04f 34ff 	mov.w	r4, #4294967295
 801d994:	4620      	mov	r0, r4
 801d996:	bd70      	pop	{r4, r5, r6, pc}
 801d998:	20000a14 	.word	0x20000a14

0801d99c <_malloc_r>:
 801d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9a0:	1ccd      	adds	r5, r1, #3
 801d9a2:	f025 0503 	bic.w	r5, r5, #3
 801d9a6:	3508      	adds	r5, #8
 801d9a8:	2d0c      	cmp	r5, #12
 801d9aa:	bf38      	it	cc
 801d9ac:	250c      	movcc	r5, #12
 801d9ae:	2d00      	cmp	r5, #0
 801d9b0:	4607      	mov	r7, r0
 801d9b2:	db01      	blt.n	801d9b8 <_malloc_r+0x1c>
 801d9b4:	42a9      	cmp	r1, r5
 801d9b6:	d905      	bls.n	801d9c4 <_malloc_r+0x28>
 801d9b8:	230c      	movs	r3, #12
 801d9ba:	603b      	str	r3, [r7, #0]
 801d9bc:	2600      	movs	r6, #0
 801d9be:	4630      	mov	r0, r6
 801d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9c4:	4e2e      	ldr	r6, [pc, #184]	; (801da80 <_malloc_r+0xe4>)
 801d9c6:	f000 fa3f 	bl	801de48 <__malloc_lock>
 801d9ca:	6833      	ldr	r3, [r6, #0]
 801d9cc:	461c      	mov	r4, r3
 801d9ce:	bb34      	cbnz	r4, 801da1e <_malloc_r+0x82>
 801d9d0:	4629      	mov	r1, r5
 801d9d2:	4638      	mov	r0, r7
 801d9d4:	f7ff ffc2 	bl	801d95c <sbrk_aligned>
 801d9d8:	1c43      	adds	r3, r0, #1
 801d9da:	4604      	mov	r4, r0
 801d9dc:	d14d      	bne.n	801da7a <_malloc_r+0xde>
 801d9de:	6834      	ldr	r4, [r6, #0]
 801d9e0:	4626      	mov	r6, r4
 801d9e2:	2e00      	cmp	r6, #0
 801d9e4:	d140      	bne.n	801da68 <_malloc_r+0xcc>
 801d9e6:	6823      	ldr	r3, [r4, #0]
 801d9e8:	4631      	mov	r1, r6
 801d9ea:	4638      	mov	r0, r7
 801d9ec:	eb04 0803 	add.w	r8, r4, r3
 801d9f0:	f000 f9ae 	bl	801dd50 <_sbrk_r>
 801d9f4:	4580      	cmp	r8, r0
 801d9f6:	d13a      	bne.n	801da6e <_malloc_r+0xd2>
 801d9f8:	6821      	ldr	r1, [r4, #0]
 801d9fa:	3503      	adds	r5, #3
 801d9fc:	1a6d      	subs	r5, r5, r1
 801d9fe:	f025 0503 	bic.w	r5, r5, #3
 801da02:	3508      	adds	r5, #8
 801da04:	2d0c      	cmp	r5, #12
 801da06:	bf38      	it	cc
 801da08:	250c      	movcc	r5, #12
 801da0a:	4629      	mov	r1, r5
 801da0c:	4638      	mov	r0, r7
 801da0e:	f7ff ffa5 	bl	801d95c <sbrk_aligned>
 801da12:	3001      	adds	r0, #1
 801da14:	d02b      	beq.n	801da6e <_malloc_r+0xd2>
 801da16:	6823      	ldr	r3, [r4, #0]
 801da18:	442b      	add	r3, r5
 801da1a:	6023      	str	r3, [r4, #0]
 801da1c:	e00e      	b.n	801da3c <_malloc_r+0xa0>
 801da1e:	6822      	ldr	r2, [r4, #0]
 801da20:	1b52      	subs	r2, r2, r5
 801da22:	d41e      	bmi.n	801da62 <_malloc_r+0xc6>
 801da24:	2a0b      	cmp	r2, #11
 801da26:	d916      	bls.n	801da56 <_malloc_r+0xba>
 801da28:	1961      	adds	r1, r4, r5
 801da2a:	42a3      	cmp	r3, r4
 801da2c:	6025      	str	r5, [r4, #0]
 801da2e:	bf18      	it	ne
 801da30:	6059      	strne	r1, [r3, #4]
 801da32:	6863      	ldr	r3, [r4, #4]
 801da34:	bf08      	it	eq
 801da36:	6031      	streq	r1, [r6, #0]
 801da38:	5162      	str	r2, [r4, r5]
 801da3a:	604b      	str	r3, [r1, #4]
 801da3c:	4638      	mov	r0, r7
 801da3e:	f104 060b 	add.w	r6, r4, #11
 801da42:	f000 fa07 	bl	801de54 <__malloc_unlock>
 801da46:	f026 0607 	bic.w	r6, r6, #7
 801da4a:	1d23      	adds	r3, r4, #4
 801da4c:	1af2      	subs	r2, r6, r3
 801da4e:	d0b6      	beq.n	801d9be <_malloc_r+0x22>
 801da50:	1b9b      	subs	r3, r3, r6
 801da52:	50a3      	str	r3, [r4, r2]
 801da54:	e7b3      	b.n	801d9be <_malloc_r+0x22>
 801da56:	6862      	ldr	r2, [r4, #4]
 801da58:	42a3      	cmp	r3, r4
 801da5a:	bf0c      	ite	eq
 801da5c:	6032      	streq	r2, [r6, #0]
 801da5e:	605a      	strne	r2, [r3, #4]
 801da60:	e7ec      	b.n	801da3c <_malloc_r+0xa0>
 801da62:	4623      	mov	r3, r4
 801da64:	6864      	ldr	r4, [r4, #4]
 801da66:	e7b2      	b.n	801d9ce <_malloc_r+0x32>
 801da68:	4634      	mov	r4, r6
 801da6a:	6876      	ldr	r6, [r6, #4]
 801da6c:	e7b9      	b.n	801d9e2 <_malloc_r+0x46>
 801da6e:	230c      	movs	r3, #12
 801da70:	603b      	str	r3, [r7, #0]
 801da72:	4638      	mov	r0, r7
 801da74:	f000 f9ee 	bl	801de54 <__malloc_unlock>
 801da78:	e7a1      	b.n	801d9be <_malloc_r+0x22>
 801da7a:	6025      	str	r5, [r4, #0]
 801da7c:	e7de      	b.n	801da3c <_malloc_r+0xa0>
 801da7e:	bf00      	nop
 801da80:	20000a10 	.word	0x20000a10

0801da84 <__ssputs_r>:
 801da84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801da88:	688e      	ldr	r6, [r1, #8]
 801da8a:	429e      	cmp	r6, r3
 801da8c:	4682      	mov	sl, r0
 801da8e:	460c      	mov	r4, r1
 801da90:	4690      	mov	r8, r2
 801da92:	461f      	mov	r7, r3
 801da94:	d838      	bhi.n	801db08 <__ssputs_r+0x84>
 801da96:	898a      	ldrh	r2, [r1, #12]
 801da98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801da9c:	d032      	beq.n	801db04 <__ssputs_r+0x80>
 801da9e:	6825      	ldr	r5, [r4, #0]
 801daa0:	6909      	ldr	r1, [r1, #16]
 801daa2:	eba5 0901 	sub.w	r9, r5, r1
 801daa6:	6965      	ldr	r5, [r4, #20]
 801daa8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801daac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dab0:	3301      	adds	r3, #1
 801dab2:	444b      	add	r3, r9
 801dab4:	106d      	asrs	r5, r5, #1
 801dab6:	429d      	cmp	r5, r3
 801dab8:	bf38      	it	cc
 801daba:	461d      	movcc	r5, r3
 801dabc:	0553      	lsls	r3, r2, #21
 801dabe:	d531      	bpl.n	801db24 <__ssputs_r+0xa0>
 801dac0:	4629      	mov	r1, r5
 801dac2:	f7ff ff6b 	bl	801d99c <_malloc_r>
 801dac6:	4606      	mov	r6, r0
 801dac8:	b950      	cbnz	r0, 801dae0 <__ssputs_r+0x5c>
 801daca:	230c      	movs	r3, #12
 801dacc:	f8ca 3000 	str.w	r3, [sl]
 801dad0:	89a3      	ldrh	r3, [r4, #12]
 801dad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dad6:	81a3      	strh	r3, [r4, #12]
 801dad8:	f04f 30ff 	mov.w	r0, #4294967295
 801dadc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dae0:	6921      	ldr	r1, [r4, #16]
 801dae2:	464a      	mov	r2, r9
 801dae4:	f7ff fa08 	bl	801cef8 <memcpy>
 801dae8:	89a3      	ldrh	r3, [r4, #12]
 801daea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801daee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801daf2:	81a3      	strh	r3, [r4, #12]
 801daf4:	6126      	str	r6, [r4, #16]
 801daf6:	6165      	str	r5, [r4, #20]
 801daf8:	444e      	add	r6, r9
 801dafa:	eba5 0509 	sub.w	r5, r5, r9
 801dafe:	6026      	str	r6, [r4, #0]
 801db00:	60a5      	str	r5, [r4, #8]
 801db02:	463e      	mov	r6, r7
 801db04:	42be      	cmp	r6, r7
 801db06:	d900      	bls.n	801db0a <__ssputs_r+0x86>
 801db08:	463e      	mov	r6, r7
 801db0a:	6820      	ldr	r0, [r4, #0]
 801db0c:	4632      	mov	r2, r6
 801db0e:	4641      	mov	r1, r8
 801db10:	f000 f980 	bl	801de14 <memmove>
 801db14:	68a3      	ldr	r3, [r4, #8]
 801db16:	1b9b      	subs	r3, r3, r6
 801db18:	60a3      	str	r3, [r4, #8]
 801db1a:	6823      	ldr	r3, [r4, #0]
 801db1c:	4433      	add	r3, r6
 801db1e:	6023      	str	r3, [r4, #0]
 801db20:	2000      	movs	r0, #0
 801db22:	e7db      	b.n	801dadc <__ssputs_r+0x58>
 801db24:	462a      	mov	r2, r5
 801db26:	f000 f99b 	bl	801de60 <_realloc_r>
 801db2a:	4606      	mov	r6, r0
 801db2c:	2800      	cmp	r0, #0
 801db2e:	d1e1      	bne.n	801daf4 <__ssputs_r+0x70>
 801db30:	6921      	ldr	r1, [r4, #16]
 801db32:	4650      	mov	r0, sl
 801db34:	f7ff fec6 	bl	801d8c4 <_free_r>
 801db38:	e7c7      	b.n	801daca <__ssputs_r+0x46>
	...

0801db3c <_svfiprintf_r>:
 801db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db40:	4698      	mov	r8, r3
 801db42:	898b      	ldrh	r3, [r1, #12]
 801db44:	061b      	lsls	r3, r3, #24
 801db46:	b09d      	sub	sp, #116	; 0x74
 801db48:	4607      	mov	r7, r0
 801db4a:	460d      	mov	r5, r1
 801db4c:	4614      	mov	r4, r2
 801db4e:	d50e      	bpl.n	801db6e <_svfiprintf_r+0x32>
 801db50:	690b      	ldr	r3, [r1, #16]
 801db52:	b963      	cbnz	r3, 801db6e <_svfiprintf_r+0x32>
 801db54:	2140      	movs	r1, #64	; 0x40
 801db56:	f7ff ff21 	bl	801d99c <_malloc_r>
 801db5a:	6028      	str	r0, [r5, #0]
 801db5c:	6128      	str	r0, [r5, #16]
 801db5e:	b920      	cbnz	r0, 801db6a <_svfiprintf_r+0x2e>
 801db60:	230c      	movs	r3, #12
 801db62:	603b      	str	r3, [r7, #0]
 801db64:	f04f 30ff 	mov.w	r0, #4294967295
 801db68:	e0d1      	b.n	801dd0e <_svfiprintf_r+0x1d2>
 801db6a:	2340      	movs	r3, #64	; 0x40
 801db6c:	616b      	str	r3, [r5, #20]
 801db6e:	2300      	movs	r3, #0
 801db70:	9309      	str	r3, [sp, #36]	; 0x24
 801db72:	2320      	movs	r3, #32
 801db74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db78:	f8cd 800c 	str.w	r8, [sp, #12]
 801db7c:	2330      	movs	r3, #48	; 0x30
 801db7e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801dd28 <_svfiprintf_r+0x1ec>
 801db82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db86:	f04f 0901 	mov.w	r9, #1
 801db8a:	4623      	mov	r3, r4
 801db8c:	469a      	mov	sl, r3
 801db8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db92:	b10a      	cbz	r2, 801db98 <_svfiprintf_r+0x5c>
 801db94:	2a25      	cmp	r2, #37	; 0x25
 801db96:	d1f9      	bne.n	801db8c <_svfiprintf_r+0x50>
 801db98:	ebba 0b04 	subs.w	fp, sl, r4
 801db9c:	d00b      	beq.n	801dbb6 <_svfiprintf_r+0x7a>
 801db9e:	465b      	mov	r3, fp
 801dba0:	4622      	mov	r2, r4
 801dba2:	4629      	mov	r1, r5
 801dba4:	4638      	mov	r0, r7
 801dba6:	f7ff ff6d 	bl	801da84 <__ssputs_r>
 801dbaa:	3001      	adds	r0, #1
 801dbac:	f000 80aa 	beq.w	801dd04 <_svfiprintf_r+0x1c8>
 801dbb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dbb2:	445a      	add	r2, fp
 801dbb4:	9209      	str	r2, [sp, #36]	; 0x24
 801dbb6:	f89a 3000 	ldrb.w	r3, [sl]
 801dbba:	2b00      	cmp	r3, #0
 801dbbc:	f000 80a2 	beq.w	801dd04 <_svfiprintf_r+0x1c8>
 801dbc0:	2300      	movs	r3, #0
 801dbc2:	f04f 32ff 	mov.w	r2, #4294967295
 801dbc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbca:	f10a 0a01 	add.w	sl, sl, #1
 801dbce:	9304      	str	r3, [sp, #16]
 801dbd0:	9307      	str	r3, [sp, #28]
 801dbd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbd6:	931a      	str	r3, [sp, #104]	; 0x68
 801dbd8:	4654      	mov	r4, sl
 801dbda:	2205      	movs	r2, #5
 801dbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbe0:	4851      	ldr	r0, [pc, #324]	; (801dd28 <_svfiprintf_r+0x1ec>)
 801dbe2:	f7fb fabd 	bl	8019160 <memchr>
 801dbe6:	9a04      	ldr	r2, [sp, #16]
 801dbe8:	b9d8      	cbnz	r0, 801dc22 <_svfiprintf_r+0xe6>
 801dbea:	06d0      	lsls	r0, r2, #27
 801dbec:	bf44      	itt	mi
 801dbee:	2320      	movmi	r3, #32
 801dbf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbf4:	0711      	lsls	r1, r2, #28
 801dbf6:	bf44      	itt	mi
 801dbf8:	232b      	movmi	r3, #43	; 0x2b
 801dbfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbfe:	f89a 3000 	ldrb.w	r3, [sl]
 801dc02:	2b2a      	cmp	r3, #42	; 0x2a
 801dc04:	d015      	beq.n	801dc32 <_svfiprintf_r+0xf6>
 801dc06:	9a07      	ldr	r2, [sp, #28]
 801dc08:	4654      	mov	r4, sl
 801dc0a:	2000      	movs	r0, #0
 801dc0c:	f04f 0c0a 	mov.w	ip, #10
 801dc10:	4621      	mov	r1, r4
 801dc12:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc16:	3b30      	subs	r3, #48	; 0x30
 801dc18:	2b09      	cmp	r3, #9
 801dc1a:	d94e      	bls.n	801dcba <_svfiprintf_r+0x17e>
 801dc1c:	b1b0      	cbz	r0, 801dc4c <_svfiprintf_r+0x110>
 801dc1e:	9207      	str	r2, [sp, #28]
 801dc20:	e014      	b.n	801dc4c <_svfiprintf_r+0x110>
 801dc22:	eba0 0308 	sub.w	r3, r0, r8
 801dc26:	fa09 f303 	lsl.w	r3, r9, r3
 801dc2a:	4313      	orrs	r3, r2
 801dc2c:	9304      	str	r3, [sp, #16]
 801dc2e:	46a2      	mov	sl, r4
 801dc30:	e7d2      	b.n	801dbd8 <_svfiprintf_r+0x9c>
 801dc32:	9b03      	ldr	r3, [sp, #12]
 801dc34:	1d19      	adds	r1, r3, #4
 801dc36:	681b      	ldr	r3, [r3, #0]
 801dc38:	9103      	str	r1, [sp, #12]
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	bfbb      	ittet	lt
 801dc3e:	425b      	neglt	r3, r3
 801dc40:	f042 0202 	orrlt.w	r2, r2, #2
 801dc44:	9307      	strge	r3, [sp, #28]
 801dc46:	9307      	strlt	r3, [sp, #28]
 801dc48:	bfb8      	it	lt
 801dc4a:	9204      	strlt	r2, [sp, #16]
 801dc4c:	7823      	ldrb	r3, [r4, #0]
 801dc4e:	2b2e      	cmp	r3, #46	; 0x2e
 801dc50:	d10c      	bne.n	801dc6c <_svfiprintf_r+0x130>
 801dc52:	7863      	ldrb	r3, [r4, #1]
 801dc54:	2b2a      	cmp	r3, #42	; 0x2a
 801dc56:	d135      	bne.n	801dcc4 <_svfiprintf_r+0x188>
 801dc58:	9b03      	ldr	r3, [sp, #12]
 801dc5a:	1d1a      	adds	r2, r3, #4
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	9203      	str	r2, [sp, #12]
 801dc60:	2b00      	cmp	r3, #0
 801dc62:	bfb8      	it	lt
 801dc64:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc68:	3402      	adds	r4, #2
 801dc6a:	9305      	str	r3, [sp, #20]
 801dc6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801dd38 <_svfiprintf_r+0x1fc>
 801dc70:	7821      	ldrb	r1, [r4, #0]
 801dc72:	2203      	movs	r2, #3
 801dc74:	4650      	mov	r0, sl
 801dc76:	f7fb fa73 	bl	8019160 <memchr>
 801dc7a:	b140      	cbz	r0, 801dc8e <_svfiprintf_r+0x152>
 801dc7c:	2340      	movs	r3, #64	; 0x40
 801dc7e:	eba0 000a 	sub.w	r0, r0, sl
 801dc82:	fa03 f000 	lsl.w	r0, r3, r0
 801dc86:	9b04      	ldr	r3, [sp, #16]
 801dc88:	4303      	orrs	r3, r0
 801dc8a:	3401      	adds	r4, #1
 801dc8c:	9304      	str	r3, [sp, #16]
 801dc8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc92:	4826      	ldr	r0, [pc, #152]	; (801dd2c <_svfiprintf_r+0x1f0>)
 801dc94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc98:	2206      	movs	r2, #6
 801dc9a:	f7fb fa61 	bl	8019160 <memchr>
 801dc9e:	2800      	cmp	r0, #0
 801dca0:	d038      	beq.n	801dd14 <_svfiprintf_r+0x1d8>
 801dca2:	4b23      	ldr	r3, [pc, #140]	; (801dd30 <_svfiprintf_r+0x1f4>)
 801dca4:	bb1b      	cbnz	r3, 801dcee <_svfiprintf_r+0x1b2>
 801dca6:	9b03      	ldr	r3, [sp, #12]
 801dca8:	3307      	adds	r3, #7
 801dcaa:	f023 0307 	bic.w	r3, r3, #7
 801dcae:	3308      	adds	r3, #8
 801dcb0:	9303      	str	r3, [sp, #12]
 801dcb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcb4:	4433      	add	r3, r6
 801dcb6:	9309      	str	r3, [sp, #36]	; 0x24
 801dcb8:	e767      	b.n	801db8a <_svfiprintf_r+0x4e>
 801dcba:	fb0c 3202 	mla	r2, ip, r2, r3
 801dcbe:	460c      	mov	r4, r1
 801dcc0:	2001      	movs	r0, #1
 801dcc2:	e7a5      	b.n	801dc10 <_svfiprintf_r+0xd4>
 801dcc4:	2300      	movs	r3, #0
 801dcc6:	3401      	adds	r4, #1
 801dcc8:	9305      	str	r3, [sp, #20]
 801dcca:	4619      	mov	r1, r3
 801dccc:	f04f 0c0a 	mov.w	ip, #10
 801dcd0:	4620      	mov	r0, r4
 801dcd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcd6:	3a30      	subs	r2, #48	; 0x30
 801dcd8:	2a09      	cmp	r2, #9
 801dcda:	d903      	bls.n	801dce4 <_svfiprintf_r+0x1a8>
 801dcdc:	2b00      	cmp	r3, #0
 801dcde:	d0c5      	beq.n	801dc6c <_svfiprintf_r+0x130>
 801dce0:	9105      	str	r1, [sp, #20]
 801dce2:	e7c3      	b.n	801dc6c <_svfiprintf_r+0x130>
 801dce4:	fb0c 2101 	mla	r1, ip, r1, r2
 801dce8:	4604      	mov	r4, r0
 801dcea:	2301      	movs	r3, #1
 801dcec:	e7f0      	b.n	801dcd0 <_svfiprintf_r+0x194>
 801dcee:	ab03      	add	r3, sp, #12
 801dcf0:	9300      	str	r3, [sp, #0]
 801dcf2:	462a      	mov	r2, r5
 801dcf4:	4b0f      	ldr	r3, [pc, #60]	; (801dd34 <_svfiprintf_r+0x1f8>)
 801dcf6:	a904      	add	r1, sp, #16
 801dcf8:	4638      	mov	r0, r7
 801dcfa:	f7fc fa3d 	bl	801a178 <_printf_float>
 801dcfe:	1c42      	adds	r2, r0, #1
 801dd00:	4606      	mov	r6, r0
 801dd02:	d1d6      	bne.n	801dcb2 <_svfiprintf_r+0x176>
 801dd04:	89ab      	ldrh	r3, [r5, #12]
 801dd06:	065b      	lsls	r3, r3, #25
 801dd08:	f53f af2c 	bmi.w	801db64 <_svfiprintf_r+0x28>
 801dd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd0e:	b01d      	add	sp, #116	; 0x74
 801dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd14:	ab03      	add	r3, sp, #12
 801dd16:	9300      	str	r3, [sp, #0]
 801dd18:	462a      	mov	r2, r5
 801dd1a:	4b06      	ldr	r3, [pc, #24]	; (801dd34 <_svfiprintf_r+0x1f8>)
 801dd1c:	a904      	add	r1, sp, #16
 801dd1e:	4638      	mov	r0, r7
 801dd20:	f7fc fcce 	bl	801a6c0 <_printf_i>
 801dd24:	e7eb      	b.n	801dcfe <_svfiprintf_r+0x1c2>
 801dd26:	bf00      	nop
 801dd28:	08052d34 	.word	0x08052d34
 801dd2c:	08052d3e 	.word	0x08052d3e
 801dd30:	0801a179 	.word	0x0801a179
 801dd34:	0801da85 	.word	0x0801da85
 801dd38:	08052d3a 	.word	0x08052d3a
 801dd3c:	00000000 	.word	0x00000000

0801dd40 <nan>:
 801dd40:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801dd48 <nan+0x8>
 801dd44:	4770      	bx	lr
 801dd46:	bf00      	nop
 801dd48:	00000000 	.word	0x00000000
 801dd4c:	7ff80000 	.word	0x7ff80000

0801dd50 <_sbrk_r>:
 801dd50:	b538      	push	{r3, r4, r5, lr}
 801dd52:	4d06      	ldr	r5, [pc, #24]	; (801dd6c <_sbrk_r+0x1c>)
 801dd54:	2300      	movs	r3, #0
 801dd56:	4604      	mov	r4, r0
 801dd58:	4608      	mov	r0, r1
 801dd5a:	602b      	str	r3, [r5, #0]
 801dd5c:	f7e8 f8a6 	bl	8005eac <_sbrk>
 801dd60:	1c43      	adds	r3, r0, #1
 801dd62:	d102      	bne.n	801dd6a <_sbrk_r+0x1a>
 801dd64:	682b      	ldr	r3, [r5, #0]
 801dd66:	b103      	cbz	r3, 801dd6a <_sbrk_r+0x1a>
 801dd68:	6023      	str	r3, [r4, #0]
 801dd6a:	bd38      	pop	{r3, r4, r5, pc}
 801dd6c:	20000a18 	.word	0x20000a18

0801dd70 <strncmp>:
 801dd70:	b510      	push	{r4, lr}
 801dd72:	b17a      	cbz	r2, 801dd94 <strncmp+0x24>
 801dd74:	4603      	mov	r3, r0
 801dd76:	3901      	subs	r1, #1
 801dd78:	1884      	adds	r4, r0, r2
 801dd7a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801dd7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801dd82:	4290      	cmp	r0, r2
 801dd84:	d101      	bne.n	801dd8a <strncmp+0x1a>
 801dd86:	42a3      	cmp	r3, r4
 801dd88:	d101      	bne.n	801dd8e <strncmp+0x1e>
 801dd8a:	1a80      	subs	r0, r0, r2
 801dd8c:	bd10      	pop	{r4, pc}
 801dd8e:	2800      	cmp	r0, #0
 801dd90:	d1f3      	bne.n	801dd7a <strncmp+0xa>
 801dd92:	e7fa      	b.n	801dd8a <strncmp+0x1a>
 801dd94:	4610      	mov	r0, r2
 801dd96:	e7f9      	b.n	801dd8c <strncmp+0x1c>

0801dd98 <__ascii_wctomb>:
 801dd98:	b149      	cbz	r1, 801ddae <__ascii_wctomb+0x16>
 801dd9a:	2aff      	cmp	r2, #255	; 0xff
 801dd9c:	bf85      	ittet	hi
 801dd9e:	238a      	movhi	r3, #138	; 0x8a
 801dda0:	6003      	strhi	r3, [r0, #0]
 801dda2:	700a      	strbls	r2, [r1, #0]
 801dda4:	f04f 30ff 	movhi.w	r0, #4294967295
 801dda8:	bf98      	it	ls
 801ddaa:	2001      	movls	r0, #1
 801ddac:	4770      	bx	lr
 801ddae:	4608      	mov	r0, r1
 801ddb0:	4770      	bx	lr
	...

0801ddb4 <__assert_func>:
 801ddb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ddb6:	4614      	mov	r4, r2
 801ddb8:	461a      	mov	r2, r3
 801ddba:	4b09      	ldr	r3, [pc, #36]	; (801dde0 <__assert_func+0x2c>)
 801ddbc:	681b      	ldr	r3, [r3, #0]
 801ddbe:	4605      	mov	r5, r0
 801ddc0:	68d8      	ldr	r0, [r3, #12]
 801ddc2:	b14c      	cbz	r4, 801ddd8 <__assert_func+0x24>
 801ddc4:	4b07      	ldr	r3, [pc, #28]	; (801dde4 <__assert_func+0x30>)
 801ddc6:	9100      	str	r1, [sp, #0]
 801ddc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ddcc:	4906      	ldr	r1, [pc, #24]	; (801dde8 <__assert_func+0x34>)
 801ddce:	462b      	mov	r3, r5
 801ddd0:	f000 f80e 	bl	801ddf0 <fiprintf>
 801ddd4:	f000 fa8c 	bl	801e2f0 <abort>
 801ddd8:	4b04      	ldr	r3, [pc, #16]	; (801ddec <__assert_func+0x38>)
 801ddda:	461c      	mov	r4, r3
 801dddc:	e7f3      	b.n	801ddc6 <__assert_func+0x12>
 801ddde:	bf00      	nop
 801dde0:	20000064 	.word	0x20000064
 801dde4:	08052d45 	.word	0x08052d45
 801dde8:	08052d52 	.word	0x08052d52
 801ddec:	08052d80 	.word	0x08052d80

0801ddf0 <fiprintf>:
 801ddf0:	b40e      	push	{r1, r2, r3}
 801ddf2:	b503      	push	{r0, r1, lr}
 801ddf4:	4601      	mov	r1, r0
 801ddf6:	ab03      	add	r3, sp, #12
 801ddf8:	4805      	ldr	r0, [pc, #20]	; (801de10 <fiprintf+0x20>)
 801ddfa:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddfe:	6800      	ldr	r0, [r0, #0]
 801de00:	9301      	str	r3, [sp, #4]
 801de02:	f000 f885 	bl	801df10 <_vfiprintf_r>
 801de06:	b002      	add	sp, #8
 801de08:	f85d eb04 	ldr.w	lr, [sp], #4
 801de0c:	b003      	add	sp, #12
 801de0e:	4770      	bx	lr
 801de10:	20000064 	.word	0x20000064

0801de14 <memmove>:
 801de14:	4288      	cmp	r0, r1
 801de16:	b510      	push	{r4, lr}
 801de18:	eb01 0402 	add.w	r4, r1, r2
 801de1c:	d902      	bls.n	801de24 <memmove+0x10>
 801de1e:	4284      	cmp	r4, r0
 801de20:	4623      	mov	r3, r4
 801de22:	d807      	bhi.n	801de34 <memmove+0x20>
 801de24:	1e43      	subs	r3, r0, #1
 801de26:	42a1      	cmp	r1, r4
 801de28:	d008      	beq.n	801de3c <memmove+0x28>
 801de2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801de2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801de32:	e7f8      	b.n	801de26 <memmove+0x12>
 801de34:	4402      	add	r2, r0
 801de36:	4601      	mov	r1, r0
 801de38:	428a      	cmp	r2, r1
 801de3a:	d100      	bne.n	801de3e <memmove+0x2a>
 801de3c:	bd10      	pop	{r4, pc}
 801de3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801de42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801de46:	e7f7      	b.n	801de38 <memmove+0x24>

0801de48 <__malloc_lock>:
 801de48:	4801      	ldr	r0, [pc, #4]	; (801de50 <__malloc_lock+0x8>)
 801de4a:	f000 bc11 	b.w	801e670 <__retarget_lock_acquire_recursive>
 801de4e:	bf00      	nop
 801de50:	20000a1c 	.word	0x20000a1c

0801de54 <__malloc_unlock>:
 801de54:	4801      	ldr	r0, [pc, #4]	; (801de5c <__malloc_unlock+0x8>)
 801de56:	f000 bc0c 	b.w	801e672 <__retarget_lock_release_recursive>
 801de5a:	bf00      	nop
 801de5c:	20000a1c 	.word	0x20000a1c

0801de60 <_realloc_r>:
 801de60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de64:	4680      	mov	r8, r0
 801de66:	4614      	mov	r4, r2
 801de68:	460e      	mov	r6, r1
 801de6a:	b921      	cbnz	r1, 801de76 <_realloc_r+0x16>
 801de6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de70:	4611      	mov	r1, r2
 801de72:	f7ff bd93 	b.w	801d99c <_malloc_r>
 801de76:	b92a      	cbnz	r2, 801de84 <_realloc_r+0x24>
 801de78:	f7ff fd24 	bl	801d8c4 <_free_r>
 801de7c:	4625      	mov	r5, r4
 801de7e:	4628      	mov	r0, r5
 801de80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de84:	f000 fc5c 	bl	801e740 <_malloc_usable_size_r>
 801de88:	4284      	cmp	r4, r0
 801de8a:	4607      	mov	r7, r0
 801de8c:	d802      	bhi.n	801de94 <_realloc_r+0x34>
 801de8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801de92:	d812      	bhi.n	801deba <_realloc_r+0x5a>
 801de94:	4621      	mov	r1, r4
 801de96:	4640      	mov	r0, r8
 801de98:	f7ff fd80 	bl	801d99c <_malloc_r>
 801de9c:	4605      	mov	r5, r0
 801de9e:	2800      	cmp	r0, #0
 801dea0:	d0ed      	beq.n	801de7e <_realloc_r+0x1e>
 801dea2:	42bc      	cmp	r4, r7
 801dea4:	4622      	mov	r2, r4
 801dea6:	4631      	mov	r1, r6
 801dea8:	bf28      	it	cs
 801deaa:	463a      	movcs	r2, r7
 801deac:	f7ff f824 	bl	801cef8 <memcpy>
 801deb0:	4631      	mov	r1, r6
 801deb2:	4640      	mov	r0, r8
 801deb4:	f7ff fd06 	bl	801d8c4 <_free_r>
 801deb8:	e7e1      	b.n	801de7e <_realloc_r+0x1e>
 801deba:	4635      	mov	r5, r6
 801debc:	e7df      	b.n	801de7e <_realloc_r+0x1e>

0801debe <__sfputc_r>:
 801debe:	6893      	ldr	r3, [r2, #8]
 801dec0:	3b01      	subs	r3, #1
 801dec2:	2b00      	cmp	r3, #0
 801dec4:	b410      	push	{r4}
 801dec6:	6093      	str	r3, [r2, #8]
 801dec8:	da08      	bge.n	801dedc <__sfputc_r+0x1e>
 801deca:	6994      	ldr	r4, [r2, #24]
 801decc:	42a3      	cmp	r3, r4
 801dece:	db01      	blt.n	801ded4 <__sfputc_r+0x16>
 801ded0:	290a      	cmp	r1, #10
 801ded2:	d103      	bne.n	801dedc <__sfputc_r+0x1e>
 801ded4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ded8:	f000 b94a 	b.w	801e170 <__swbuf_r>
 801dedc:	6813      	ldr	r3, [r2, #0]
 801dede:	1c58      	adds	r0, r3, #1
 801dee0:	6010      	str	r0, [r2, #0]
 801dee2:	7019      	strb	r1, [r3, #0]
 801dee4:	4608      	mov	r0, r1
 801dee6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801deea:	4770      	bx	lr

0801deec <__sfputs_r>:
 801deec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deee:	4606      	mov	r6, r0
 801def0:	460f      	mov	r7, r1
 801def2:	4614      	mov	r4, r2
 801def4:	18d5      	adds	r5, r2, r3
 801def6:	42ac      	cmp	r4, r5
 801def8:	d101      	bne.n	801defe <__sfputs_r+0x12>
 801defa:	2000      	movs	r0, #0
 801defc:	e007      	b.n	801df0e <__sfputs_r+0x22>
 801defe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df02:	463a      	mov	r2, r7
 801df04:	4630      	mov	r0, r6
 801df06:	f7ff ffda 	bl	801debe <__sfputc_r>
 801df0a:	1c43      	adds	r3, r0, #1
 801df0c:	d1f3      	bne.n	801def6 <__sfputs_r+0xa>
 801df0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801df10 <_vfiprintf_r>:
 801df10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df14:	460d      	mov	r5, r1
 801df16:	b09d      	sub	sp, #116	; 0x74
 801df18:	4614      	mov	r4, r2
 801df1a:	4698      	mov	r8, r3
 801df1c:	4606      	mov	r6, r0
 801df1e:	b118      	cbz	r0, 801df28 <_vfiprintf_r+0x18>
 801df20:	6983      	ldr	r3, [r0, #24]
 801df22:	b90b      	cbnz	r3, 801df28 <_vfiprintf_r+0x18>
 801df24:	f000 fb06 	bl	801e534 <__sinit>
 801df28:	4b89      	ldr	r3, [pc, #548]	; (801e150 <_vfiprintf_r+0x240>)
 801df2a:	429d      	cmp	r5, r3
 801df2c:	d11b      	bne.n	801df66 <_vfiprintf_r+0x56>
 801df2e:	6875      	ldr	r5, [r6, #4]
 801df30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df32:	07d9      	lsls	r1, r3, #31
 801df34:	d405      	bmi.n	801df42 <_vfiprintf_r+0x32>
 801df36:	89ab      	ldrh	r3, [r5, #12]
 801df38:	059a      	lsls	r2, r3, #22
 801df3a:	d402      	bmi.n	801df42 <_vfiprintf_r+0x32>
 801df3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df3e:	f000 fb97 	bl	801e670 <__retarget_lock_acquire_recursive>
 801df42:	89ab      	ldrh	r3, [r5, #12]
 801df44:	071b      	lsls	r3, r3, #28
 801df46:	d501      	bpl.n	801df4c <_vfiprintf_r+0x3c>
 801df48:	692b      	ldr	r3, [r5, #16]
 801df4a:	b9eb      	cbnz	r3, 801df88 <_vfiprintf_r+0x78>
 801df4c:	4629      	mov	r1, r5
 801df4e:	4630      	mov	r0, r6
 801df50:	f000 f960 	bl	801e214 <__swsetup_r>
 801df54:	b1c0      	cbz	r0, 801df88 <_vfiprintf_r+0x78>
 801df56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df58:	07dc      	lsls	r4, r3, #31
 801df5a:	d50e      	bpl.n	801df7a <_vfiprintf_r+0x6a>
 801df5c:	f04f 30ff 	mov.w	r0, #4294967295
 801df60:	b01d      	add	sp, #116	; 0x74
 801df62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df66:	4b7b      	ldr	r3, [pc, #492]	; (801e154 <_vfiprintf_r+0x244>)
 801df68:	429d      	cmp	r5, r3
 801df6a:	d101      	bne.n	801df70 <_vfiprintf_r+0x60>
 801df6c:	68b5      	ldr	r5, [r6, #8]
 801df6e:	e7df      	b.n	801df30 <_vfiprintf_r+0x20>
 801df70:	4b79      	ldr	r3, [pc, #484]	; (801e158 <_vfiprintf_r+0x248>)
 801df72:	429d      	cmp	r5, r3
 801df74:	bf08      	it	eq
 801df76:	68f5      	ldreq	r5, [r6, #12]
 801df78:	e7da      	b.n	801df30 <_vfiprintf_r+0x20>
 801df7a:	89ab      	ldrh	r3, [r5, #12]
 801df7c:	0598      	lsls	r0, r3, #22
 801df7e:	d4ed      	bmi.n	801df5c <_vfiprintf_r+0x4c>
 801df80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df82:	f000 fb76 	bl	801e672 <__retarget_lock_release_recursive>
 801df86:	e7e9      	b.n	801df5c <_vfiprintf_r+0x4c>
 801df88:	2300      	movs	r3, #0
 801df8a:	9309      	str	r3, [sp, #36]	; 0x24
 801df8c:	2320      	movs	r3, #32
 801df8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df92:	f8cd 800c 	str.w	r8, [sp, #12]
 801df96:	2330      	movs	r3, #48	; 0x30
 801df98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e15c <_vfiprintf_r+0x24c>
 801df9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dfa0:	f04f 0901 	mov.w	r9, #1
 801dfa4:	4623      	mov	r3, r4
 801dfa6:	469a      	mov	sl, r3
 801dfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dfac:	b10a      	cbz	r2, 801dfb2 <_vfiprintf_r+0xa2>
 801dfae:	2a25      	cmp	r2, #37	; 0x25
 801dfb0:	d1f9      	bne.n	801dfa6 <_vfiprintf_r+0x96>
 801dfb2:	ebba 0b04 	subs.w	fp, sl, r4
 801dfb6:	d00b      	beq.n	801dfd0 <_vfiprintf_r+0xc0>
 801dfb8:	465b      	mov	r3, fp
 801dfba:	4622      	mov	r2, r4
 801dfbc:	4629      	mov	r1, r5
 801dfbe:	4630      	mov	r0, r6
 801dfc0:	f7ff ff94 	bl	801deec <__sfputs_r>
 801dfc4:	3001      	adds	r0, #1
 801dfc6:	f000 80aa 	beq.w	801e11e <_vfiprintf_r+0x20e>
 801dfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfcc:	445a      	add	r2, fp
 801dfce:	9209      	str	r2, [sp, #36]	; 0x24
 801dfd0:	f89a 3000 	ldrb.w	r3, [sl]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	f000 80a2 	beq.w	801e11e <_vfiprintf_r+0x20e>
 801dfda:	2300      	movs	r3, #0
 801dfdc:	f04f 32ff 	mov.w	r2, #4294967295
 801dfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dfe4:	f10a 0a01 	add.w	sl, sl, #1
 801dfe8:	9304      	str	r3, [sp, #16]
 801dfea:	9307      	str	r3, [sp, #28]
 801dfec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dff0:	931a      	str	r3, [sp, #104]	; 0x68
 801dff2:	4654      	mov	r4, sl
 801dff4:	2205      	movs	r2, #5
 801dff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dffa:	4858      	ldr	r0, [pc, #352]	; (801e15c <_vfiprintf_r+0x24c>)
 801dffc:	f7fb f8b0 	bl	8019160 <memchr>
 801e000:	9a04      	ldr	r2, [sp, #16]
 801e002:	b9d8      	cbnz	r0, 801e03c <_vfiprintf_r+0x12c>
 801e004:	06d1      	lsls	r1, r2, #27
 801e006:	bf44      	itt	mi
 801e008:	2320      	movmi	r3, #32
 801e00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e00e:	0713      	lsls	r3, r2, #28
 801e010:	bf44      	itt	mi
 801e012:	232b      	movmi	r3, #43	; 0x2b
 801e014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e018:	f89a 3000 	ldrb.w	r3, [sl]
 801e01c:	2b2a      	cmp	r3, #42	; 0x2a
 801e01e:	d015      	beq.n	801e04c <_vfiprintf_r+0x13c>
 801e020:	9a07      	ldr	r2, [sp, #28]
 801e022:	4654      	mov	r4, sl
 801e024:	2000      	movs	r0, #0
 801e026:	f04f 0c0a 	mov.w	ip, #10
 801e02a:	4621      	mov	r1, r4
 801e02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e030:	3b30      	subs	r3, #48	; 0x30
 801e032:	2b09      	cmp	r3, #9
 801e034:	d94e      	bls.n	801e0d4 <_vfiprintf_r+0x1c4>
 801e036:	b1b0      	cbz	r0, 801e066 <_vfiprintf_r+0x156>
 801e038:	9207      	str	r2, [sp, #28]
 801e03a:	e014      	b.n	801e066 <_vfiprintf_r+0x156>
 801e03c:	eba0 0308 	sub.w	r3, r0, r8
 801e040:	fa09 f303 	lsl.w	r3, r9, r3
 801e044:	4313      	orrs	r3, r2
 801e046:	9304      	str	r3, [sp, #16]
 801e048:	46a2      	mov	sl, r4
 801e04a:	e7d2      	b.n	801dff2 <_vfiprintf_r+0xe2>
 801e04c:	9b03      	ldr	r3, [sp, #12]
 801e04e:	1d19      	adds	r1, r3, #4
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	9103      	str	r1, [sp, #12]
 801e054:	2b00      	cmp	r3, #0
 801e056:	bfbb      	ittet	lt
 801e058:	425b      	neglt	r3, r3
 801e05a:	f042 0202 	orrlt.w	r2, r2, #2
 801e05e:	9307      	strge	r3, [sp, #28]
 801e060:	9307      	strlt	r3, [sp, #28]
 801e062:	bfb8      	it	lt
 801e064:	9204      	strlt	r2, [sp, #16]
 801e066:	7823      	ldrb	r3, [r4, #0]
 801e068:	2b2e      	cmp	r3, #46	; 0x2e
 801e06a:	d10c      	bne.n	801e086 <_vfiprintf_r+0x176>
 801e06c:	7863      	ldrb	r3, [r4, #1]
 801e06e:	2b2a      	cmp	r3, #42	; 0x2a
 801e070:	d135      	bne.n	801e0de <_vfiprintf_r+0x1ce>
 801e072:	9b03      	ldr	r3, [sp, #12]
 801e074:	1d1a      	adds	r2, r3, #4
 801e076:	681b      	ldr	r3, [r3, #0]
 801e078:	9203      	str	r2, [sp, #12]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	bfb8      	it	lt
 801e07e:	f04f 33ff 	movlt.w	r3, #4294967295
 801e082:	3402      	adds	r4, #2
 801e084:	9305      	str	r3, [sp, #20]
 801e086:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e16c <_vfiprintf_r+0x25c>
 801e08a:	7821      	ldrb	r1, [r4, #0]
 801e08c:	2203      	movs	r2, #3
 801e08e:	4650      	mov	r0, sl
 801e090:	f7fb f866 	bl	8019160 <memchr>
 801e094:	b140      	cbz	r0, 801e0a8 <_vfiprintf_r+0x198>
 801e096:	2340      	movs	r3, #64	; 0x40
 801e098:	eba0 000a 	sub.w	r0, r0, sl
 801e09c:	fa03 f000 	lsl.w	r0, r3, r0
 801e0a0:	9b04      	ldr	r3, [sp, #16]
 801e0a2:	4303      	orrs	r3, r0
 801e0a4:	3401      	adds	r4, #1
 801e0a6:	9304      	str	r3, [sp, #16]
 801e0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0ac:	482c      	ldr	r0, [pc, #176]	; (801e160 <_vfiprintf_r+0x250>)
 801e0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e0b2:	2206      	movs	r2, #6
 801e0b4:	f7fb f854 	bl	8019160 <memchr>
 801e0b8:	2800      	cmp	r0, #0
 801e0ba:	d03f      	beq.n	801e13c <_vfiprintf_r+0x22c>
 801e0bc:	4b29      	ldr	r3, [pc, #164]	; (801e164 <_vfiprintf_r+0x254>)
 801e0be:	bb1b      	cbnz	r3, 801e108 <_vfiprintf_r+0x1f8>
 801e0c0:	9b03      	ldr	r3, [sp, #12]
 801e0c2:	3307      	adds	r3, #7
 801e0c4:	f023 0307 	bic.w	r3, r3, #7
 801e0c8:	3308      	adds	r3, #8
 801e0ca:	9303      	str	r3, [sp, #12]
 801e0cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ce:	443b      	add	r3, r7
 801e0d0:	9309      	str	r3, [sp, #36]	; 0x24
 801e0d2:	e767      	b.n	801dfa4 <_vfiprintf_r+0x94>
 801e0d4:	fb0c 3202 	mla	r2, ip, r2, r3
 801e0d8:	460c      	mov	r4, r1
 801e0da:	2001      	movs	r0, #1
 801e0dc:	e7a5      	b.n	801e02a <_vfiprintf_r+0x11a>
 801e0de:	2300      	movs	r3, #0
 801e0e0:	3401      	adds	r4, #1
 801e0e2:	9305      	str	r3, [sp, #20]
 801e0e4:	4619      	mov	r1, r3
 801e0e6:	f04f 0c0a 	mov.w	ip, #10
 801e0ea:	4620      	mov	r0, r4
 801e0ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0f0:	3a30      	subs	r2, #48	; 0x30
 801e0f2:	2a09      	cmp	r2, #9
 801e0f4:	d903      	bls.n	801e0fe <_vfiprintf_r+0x1ee>
 801e0f6:	2b00      	cmp	r3, #0
 801e0f8:	d0c5      	beq.n	801e086 <_vfiprintf_r+0x176>
 801e0fa:	9105      	str	r1, [sp, #20]
 801e0fc:	e7c3      	b.n	801e086 <_vfiprintf_r+0x176>
 801e0fe:	fb0c 2101 	mla	r1, ip, r1, r2
 801e102:	4604      	mov	r4, r0
 801e104:	2301      	movs	r3, #1
 801e106:	e7f0      	b.n	801e0ea <_vfiprintf_r+0x1da>
 801e108:	ab03      	add	r3, sp, #12
 801e10a:	9300      	str	r3, [sp, #0]
 801e10c:	462a      	mov	r2, r5
 801e10e:	4b16      	ldr	r3, [pc, #88]	; (801e168 <_vfiprintf_r+0x258>)
 801e110:	a904      	add	r1, sp, #16
 801e112:	4630      	mov	r0, r6
 801e114:	f7fc f830 	bl	801a178 <_printf_float>
 801e118:	4607      	mov	r7, r0
 801e11a:	1c78      	adds	r0, r7, #1
 801e11c:	d1d6      	bne.n	801e0cc <_vfiprintf_r+0x1bc>
 801e11e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e120:	07d9      	lsls	r1, r3, #31
 801e122:	d405      	bmi.n	801e130 <_vfiprintf_r+0x220>
 801e124:	89ab      	ldrh	r3, [r5, #12]
 801e126:	059a      	lsls	r2, r3, #22
 801e128:	d402      	bmi.n	801e130 <_vfiprintf_r+0x220>
 801e12a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e12c:	f000 faa1 	bl	801e672 <__retarget_lock_release_recursive>
 801e130:	89ab      	ldrh	r3, [r5, #12]
 801e132:	065b      	lsls	r3, r3, #25
 801e134:	f53f af12 	bmi.w	801df5c <_vfiprintf_r+0x4c>
 801e138:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e13a:	e711      	b.n	801df60 <_vfiprintf_r+0x50>
 801e13c:	ab03      	add	r3, sp, #12
 801e13e:	9300      	str	r3, [sp, #0]
 801e140:	462a      	mov	r2, r5
 801e142:	4b09      	ldr	r3, [pc, #36]	; (801e168 <_vfiprintf_r+0x258>)
 801e144:	a904      	add	r1, sp, #16
 801e146:	4630      	mov	r0, r6
 801e148:	f7fc faba 	bl	801a6c0 <_printf_i>
 801e14c:	e7e4      	b.n	801e118 <_vfiprintf_r+0x208>
 801e14e:	bf00      	nop
 801e150:	08052da4 	.word	0x08052da4
 801e154:	08052dc4 	.word	0x08052dc4
 801e158:	08052d84 	.word	0x08052d84
 801e15c:	08052d34 	.word	0x08052d34
 801e160:	08052d3e 	.word	0x08052d3e
 801e164:	0801a179 	.word	0x0801a179
 801e168:	0801deed 	.word	0x0801deed
 801e16c:	08052d3a 	.word	0x08052d3a

0801e170 <__swbuf_r>:
 801e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e172:	460e      	mov	r6, r1
 801e174:	4614      	mov	r4, r2
 801e176:	4605      	mov	r5, r0
 801e178:	b118      	cbz	r0, 801e182 <__swbuf_r+0x12>
 801e17a:	6983      	ldr	r3, [r0, #24]
 801e17c:	b90b      	cbnz	r3, 801e182 <__swbuf_r+0x12>
 801e17e:	f000 f9d9 	bl	801e534 <__sinit>
 801e182:	4b21      	ldr	r3, [pc, #132]	; (801e208 <__swbuf_r+0x98>)
 801e184:	429c      	cmp	r4, r3
 801e186:	d12b      	bne.n	801e1e0 <__swbuf_r+0x70>
 801e188:	686c      	ldr	r4, [r5, #4]
 801e18a:	69a3      	ldr	r3, [r4, #24]
 801e18c:	60a3      	str	r3, [r4, #8]
 801e18e:	89a3      	ldrh	r3, [r4, #12]
 801e190:	071a      	lsls	r2, r3, #28
 801e192:	d52f      	bpl.n	801e1f4 <__swbuf_r+0x84>
 801e194:	6923      	ldr	r3, [r4, #16]
 801e196:	b36b      	cbz	r3, 801e1f4 <__swbuf_r+0x84>
 801e198:	6923      	ldr	r3, [r4, #16]
 801e19a:	6820      	ldr	r0, [r4, #0]
 801e19c:	1ac0      	subs	r0, r0, r3
 801e19e:	6963      	ldr	r3, [r4, #20]
 801e1a0:	b2f6      	uxtb	r6, r6
 801e1a2:	4283      	cmp	r3, r0
 801e1a4:	4637      	mov	r7, r6
 801e1a6:	dc04      	bgt.n	801e1b2 <__swbuf_r+0x42>
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	f000 f92e 	bl	801e40c <_fflush_r>
 801e1b0:	bb30      	cbnz	r0, 801e200 <__swbuf_r+0x90>
 801e1b2:	68a3      	ldr	r3, [r4, #8]
 801e1b4:	3b01      	subs	r3, #1
 801e1b6:	60a3      	str	r3, [r4, #8]
 801e1b8:	6823      	ldr	r3, [r4, #0]
 801e1ba:	1c5a      	adds	r2, r3, #1
 801e1bc:	6022      	str	r2, [r4, #0]
 801e1be:	701e      	strb	r6, [r3, #0]
 801e1c0:	6963      	ldr	r3, [r4, #20]
 801e1c2:	3001      	adds	r0, #1
 801e1c4:	4283      	cmp	r3, r0
 801e1c6:	d004      	beq.n	801e1d2 <__swbuf_r+0x62>
 801e1c8:	89a3      	ldrh	r3, [r4, #12]
 801e1ca:	07db      	lsls	r3, r3, #31
 801e1cc:	d506      	bpl.n	801e1dc <__swbuf_r+0x6c>
 801e1ce:	2e0a      	cmp	r6, #10
 801e1d0:	d104      	bne.n	801e1dc <__swbuf_r+0x6c>
 801e1d2:	4621      	mov	r1, r4
 801e1d4:	4628      	mov	r0, r5
 801e1d6:	f000 f919 	bl	801e40c <_fflush_r>
 801e1da:	b988      	cbnz	r0, 801e200 <__swbuf_r+0x90>
 801e1dc:	4638      	mov	r0, r7
 801e1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e1e0:	4b0a      	ldr	r3, [pc, #40]	; (801e20c <__swbuf_r+0x9c>)
 801e1e2:	429c      	cmp	r4, r3
 801e1e4:	d101      	bne.n	801e1ea <__swbuf_r+0x7a>
 801e1e6:	68ac      	ldr	r4, [r5, #8]
 801e1e8:	e7cf      	b.n	801e18a <__swbuf_r+0x1a>
 801e1ea:	4b09      	ldr	r3, [pc, #36]	; (801e210 <__swbuf_r+0xa0>)
 801e1ec:	429c      	cmp	r4, r3
 801e1ee:	bf08      	it	eq
 801e1f0:	68ec      	ldreq	r4, [r5, #12]
 801e1f2:	e7ca      	b.n	801e18a <__swbuf_r+0x1a>
 801e1f4:	4621      	mov	r1, r4
 801e1f6:	4628      	mov	r0, r5
 801e1f8:	f000 f80c 	bl	801e214 <__swsetup_r>
 801e1fc:	2800      	cmp	r0, #0
 801e1fe:	d0cb      	beq.n	801e198 <__swbuf_r+0x28>
 801e200:	f04f 37ff 	mov.w	r7, #4294967295
 801e204:	e7ea      	b.n	801e1dc <__swbuf_r+0x6c>
 801e206:	bf00      	nop
 801e208:	08052da4 	.word	0x08052da4
 801e20c:	08052dc4 	.word	0x08052dc4
 801e210:	08052d84 	.word	0x08052d84

0801e214 <__swsetup_r>:
 801e214:	4b32      	ldr	r3, [pc, #200]	; (801e2e0 <__swsetup_r+0xcc>)
 801e216:	b570      	push	{r4, r5, r6, lr}
 801e218:	681d      	ldr	r5, [r3, #0]
 801e21a:	4606      	mov	r6, r0
 801e21c:	460c      	mov	r4, r1
 801e21e:	b125      	cbz	r5, 801e22a <__swsetup_r+0x16>
 801e220:	69ab      	ldr	r3, [r5, #24]
 801e222:	b913      	cbnz	r3, 801e22a <__swsetup_r+0x16>
 801e224:	4628      	mov	r0, r5
 801e226:	f000 f985 	bl	801e534 <__sinit>
 801e22a:	4b2e      	ldr	r3, [pc, #184]	; (801e2e4 <__swsetup_r+0xd0>)
 801e22c:	429c      	cmp	r4, r3
 801e22e:	d10f      	bne.n	801e250 <__swsetup_r+0x3c>
 801e230:	686c      	ldr	r4, [r5, #4]
 801e232:	89a3      	ldrh	r3, [r4, #12]
 801e234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e238:	0719      	lsls	r1, r3, #28
 801e23a:	d42c      	bmi.n	801e296 <__swsetup_r+0x82>
 801e23c:	06dd      	lsls	r5, r3, #27
 801e23e:	d411      	bmi.n	801e264 <__swsetup_r+0x50>
 801e240:	2309      	movs	r3, #9
 801e242:	6033      	str	r3, [r6, #0]
 801e244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e248:	81a3      	strh	r3, [r4, #12]
 801e24a:	f04f 30ff 	mov.w	r0, #4294967295
 801e24e:	e03e      	b.n	801e2ce <__swsetup_r+0xba>
 801e250:	4b25      	ldr	r3, [pc, #148]	; (801e2e8 <__swsetup_r+0xd4>)
 801e252:	429c      	cmp	r4, r3
 801e254:	d101      	bne.n	801e25a <__swsetup_r+0x46>
 801e256:	68ac      	ldr	r4, [r5, #8]
 801e258:	e7eb      	b.n	801e232 <__swsetup_r+0x1e>
 801e25a:	4b24      	ldr	r3, [pc, #144]	; (801e2ec <__swsetup_r+0xd8>)
 801e25c:	429c      	cmp	r4, r3
 801e25e:	bf08      	it	eq
 801e260:	68ec      	ldreq	r4, [r5, #12]
 801e262:	e7e6      	b.n	801e232 <__swsetup_r+0x1e>
 801e264:	0758      	lsls	r0, r3, #29
 801e266:	d512      	bpl.n	801e28e <__swsetup_r+0x7a>
 801e268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e26a:	b141      	cbz	r1, 801e27e <__swsetup_r+0x6a>
 801e26c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e270:	4299      	cmp	r1, r3
 801e272:	d002      	beq.n	801e27a <__swsetup_r+0x66>
 801e274:	4630      	mov	r0, r6
 801e276:	f7ff fb25 	bl	801d8c4 <_free_r>
 801e27a:	2300      	movs	r3, #0
 801e27c:	6363      	str	r3, [r4, #52]	; 0x34
 801e27e:	89a3      	ldrh	r3, [r4, #12]
 801e280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e284:	81a3      	strh	r3, [r4, #12]
 801e286:	2300      	movs	r3, #0
 801e288:	6063      	str	r3, [r4, #4]
 801e28a:	6923      	ldr	r3, [r4, #16]
 801e28c:	6023      	str	r3, [r4, #0]
 801e28e:	89a3      	ldrh	r3, [r4, #12]
 801e290:	f043 0308 	orr.w	r3, r3, #8
 801e294:	81a3      	strh	r3, [r4, #12]
 801e296:	6923      	ldr	r3, [r4, #16]
 801e298:	b94b      	cbnz	r3, 801e2ae <__swsetup_r+0x9a>
 801e29a:	89a3      	ldrh	r3, [r4, #12]
 801e29c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e2a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e2a4:	d003      	beq.n	801e2ae <__swsetup_r+0x9a>
 801e2a6:	4621      	mov	r1, r4
 801e2a8:	4630      	mov	r0, r6
 801e2aa:	f000 fa09 	bl	801e6c0 <__smakebuf_r>
 801e2ae:	89a0      	ldrh	r0, [r4, #12]
 801e2b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e2b4:	f010 0301 	ands.w	r3, r0, #1
 801e2b8:	d00a      	beq.n	801e2d0 <__swsetup_r+0xbc>
 801e2ba:	2300      	movs	r3, #0
 801e2bc:	60a3      	str	r3, [r4, #8]
 801e2be:	6963      	ldr	r3, [r4, #20]
 801e2c0:	425b      	negs	r3, r3
 801e2c2:	61a3      	str	r3, [r4, #24]
 801e2c4:	6923      	ldr	r3, [r4, #16]
 801e2c6:	b943      	cbnz	r3, 801e2da <__swsetup_r+0xc6>
 801e2c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e2cc:	d1ba      	bne.n	801e244 <__swsetup_r+0x30>
 801e2ce:	bd70      	pop	{r4, r5, r6, pc}
 801e2d0:	0781      	lsls	r1, r0, #30
 801e2d2:	bf58      	it	pl
 801e2d4:	6963      	ldrpl	r3, [r4, #20]
 801e2d6:	60a3      	str	r3, [r4, #8]
 801e2d8:	e7f4      	b.n	801e2c4 <__swsetup_r+0xb0>
 801e2da:	2000      	movs	r0, #0
 801e2dc:	e7f7      	b.n	801e2ce <__swsetup_r+0xba>
 801e2de:	bf00      	nop
 801e2e0:	20000064 	.word	0x20000064
 801e2e4:	08052da4 	.word	0x08052da4
 801e2e8:	08052dc4 	.word	0x08052dc4
 801e2ec:	08052d84 	.word	0x08052d84

0801e2f0 <abort>:
 801e2f0:	b508      	push	{r3, lr}
 801e2f2:	2006      	movs	r0, #6
 801e2f4:	f000 fa54 	bl	801e7a0 <raise>
 801e2f8:	2001      	movs	r0, #1
 801e2fa:	f7e7 fcec 	bl	8005cd6 <_exit>
	...

0801e300 <__sflush_r>:
 801e300:	898a      	ldrh	r2, [r1, #12]
 801e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e306:	4605      	mov	r5, r0
 801e308:	0710      	lsls	r0, r2, #28
 801e30a:	460c      	mov	r4, r1
 801e30c:	d458      	bmi.n	801e3c0 <__sflush_r+0xc0>
 801e30e:	684b      	ldr	r3, [r1, #4]
 801e310:	2b00      	cmp	r3, #0
 801e312:	dc05      	bgt.n	801e320 <__sflush_r+0x20>
 801e314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e316:	2b00      	cmp	r3, #0
 801e318:	dc02      	bgt.n	801e320 <__sflush_r+0x20>
 801e31a:	2000      	movs	r0, #0
 801e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e322:	2e00      	cmp	r6, #0
 801e324:	d0f9      	beq.n	801e31a <__sflush_r+0x1a>
 801e326:	2300      	movs	r3, #0
 801e328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e32c:	682f      	ldr	r7, [r5, #0]
 801e32e:	602b      	str	r3, [r5, #0]
 801e330:	d032      	beq.n	801e398 <__sflush_r+0x98>
 801e332:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e334:	89a3      	ldrh	r3, [r4, #12]
 801e336:	075a      	lsls	r2, r3, #29
 801e338:	d505      	bpl.n	801e346 <__sflush_r+0x46>
 801e33a:	6863      	ldr	r3, [r4, #4]
 801e33c:	1ac0      	subs	r0, r0, r3
 801e33e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e340:	b10b      	cbz	r3, 801e346 <__sflush_r+0x46>
 801e342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e344:	1ac0      	subs	r0, r0, r3
 801e346:	2300      	movs	r3, #0
 801e348:	4602      	mov	r2, r0
 801e34a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e34c:	6a21      	ldr	r1, [r4, #32]
 801e34e:	4628      	mov	r0, r5
 801e350:	47b0      	blx	r6
 801e352:	1c43      	adds	r3, r0, #1
 801e354:	89a3      	ldrh	r3, [r4, #12]
 801e356:	d106      	bne.n	801e366 <__sflush_r+0x66>
 801e358:	6829      	ldr	r1, [r5, #0]
 801e35a:	291d      	cmp	r1, #29
 801e35c:	d82c      	bhi.n	801e3b8 <__sflush_r+0xb8>
 801e35e:	4a2a      	ldr	r2, [pc, #168]	; (801e408 <__sflush_r+0x108>)
 801e360:	40ca      	lsrs	r2, r1
 801e362:	07d6      	lsls	r6, r2, #31
 801e364:	d528      	bpl.n	801e3b8 <__sflush_r+0xb8>
 801e366:	2200      	movs	r2, #0
 801e368:	6062      	str	r2, [r4, #4]
 801e36a:	04d9      	lsls	r1, r3, #19
 801e36c:	6922      	ldr	r2, [r4, #16]
 801e36e:	6022      	str	r2, [r4, #0]
 801e370:	d504      	bpl.n	801e37c <__sflush_r+0x7c>
 801e372:	1c42      	adds	r2, r0, #1
 801e374:	d101      	bne.n	801e37a <__sflush_r+0x7a>
 801e376:	682b      	ldr	r3, [r5, #0]
 801e378:	b903      	cbnz	r3, 801e37c <__sflush_r+0x7c>
 801e37a:	6560      	str	r0, [r4, #84]	; 0x54
 801e37c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e37e:	602f      	str	r7, [r5, #0]
 801e380:	2900      	cmp	r1, #0
 801e382:	d0ca      	beq.n	801e31a <__sflush_r+0x1a>
 801e384:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e388:	4299      	cmp	r1, r3
 801e38a:	d002      	beq.n	801e392 <__sflush_r+0x92>
 801e38c:	4628      	mov	r0, r5
 801e38e:	f7ff fa99 	bl	801d8c4 <_free_r>
 801e392:	2000      	movs	r0, #0
 801e394:	6360      	str	r0, [r4, #52]	; 0x34
 801e396:	e7c1      	b.n	801e31c <__sflush_r+0x1c>
 801e398:	6a21      	ldr	r1, [r4, #32]
 801e39a:	2301      	movs	r3, #1
 801e39c:	4628      	mov	r0, r5
 801e39e:	47b0      	blx	r6
 801e3a0:	1c41      	adds	r1, r0, #1
 801e3a2:	d1c7      	bne.n	801e334 <__sflush_r+0x34>
 801e3a4:	682b      	ldr	r3, [r5, #0]
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d0c4      	beq.n	801e334 <__sflush_r+0x34>
 801e3aa:	2b1d      	cmp	r3, #29
 801e3ac:	d001      	beq.n	801e3b2 <__sflush_r+0xb2>
 801e3ae:	2b16      	cmp	r3, #22
 801e3b0:	d101      	bne.n	801e3b6 <__sflush_r+0xb6>
 801e3b2:	602f      	str	r7, [r5, #0]
 801e3b4:	e7b1      	b.n	801e31a <__sflush_r+0x1a>
 801e3b6:	89a3      	ldrh	r3, [r4, #12]
 801e3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3bc:	81a3      	strh	r3, [r4, #12]
 801e3be:	e7ad      	b.n	801e31c <__sflush_r+0x1c>
 801e3c0:	690f      	ldr	r7, [r1, #16]
 801e3c2:	2f00      	cmp	r7, #0
 801e3c4:	d0a9      	beq.n	801e31a <__sflush_r+0x1a>
 801e3c6:	0793      	lsls	r3, r2, #30
 801e3c8:	680e      	ldr	r6, [r1, #0]
 801e3ca:	bf08      	it	eq
 801e3cc:	694b      	ldreq	r3, [r1, #20]
 801e3ce:	600f      	str	r7, [r1, #0]
 801e3d0:	bf18      	it	ne
 801e3d2:	2300      	movne	r3, #0
 801e3d4:	eba6 0807 	sub.w	r8, r6, r7
 801e3d8:	608b      	str	r3, [r1, #8]
 801e3da:	f1b8 0f00 	cmp.w	r8, #0
 801e3de:	dd9c      	ble.n	801e31a <__sflush_r+0x1a>
 801e3e0:	6a21      	ldr	r1, [r4, #32]
 801e3e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e3e4:	4643      	mov	r3, r8
 801e3e6:	463a      	mov	r2, r7
 801e3e8:	4628      	mov	r0, r5
 801e3ea:	47b0      	blx	r6
 801e3ec:	2800      	cmp	r0, #0
 801e3ee:	dc06      	bgt.n	801e3fe <__sflush_r+0xfe>
 801e3f0:	89a3      	ldrh	r3, [r4, #12]
 801e3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e3f6:	81a3      	strh	r3, [r4, #12]
 801e3f8:	f04f 30ff 	mov.w	r0, #4294967295
 801e3fc:	e78e      	b.n	801e31c <__sflush_r+0x1c>
 801e3fe:	4407      	add	r7, r0
 801e400:	eba8 0800 	sub.w	r8, r8, r0
 801e404:	e7e9      	b.n	801e3da <__sflush_r+0xda>
 801e406:	bf00      	nop
 801e408:	20400001 	.word	0x20400001

0801e40c <_fflush_r>:
 801e40c:	b538      	push	{r3, r4, r5, lr}
 801e40e:	690b      	ldr	r3, [r1, #16]
 801e410:	4605      	mov	r5, r0
 801e412:	460c      	mov	r4, r1
 801e414:	b913      	cbnz	r3, 801e41c <_fflush_r+0x10>
 801e416:	2500      	movs	r5, #0
 801e418:	4628      	mov	r0, r5
 801e41a:	bd38      	pop	{r3, r4, r5, pc}
 801e41c:	b118      	cbz	r0, 801e426 <_fflush_r+0x1a>
 801e41e:	6983      	ldr	r3, [r0, #24]
 801e420:	b90b      	cbnz	r3, 801e426 <_fflush_r+0x1a>
 801e422:	f000 f887 	bl	801e534 <__sinit>
 801e426:	4b14      	ldr	r3, [pc, #80]	; (801e478 <_fflush_r+0x6c>)
 801e428:	429c      	cmp	r4, r3
 801e42a:	d11b      	bne.n	801e464 <_fflush_r+0x58>
 801e42c:	686c      	ldr	r4, [r5, #4]
 801e42e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e432:	2b00      	cmp	r3, #0
 801e434:	d0ef      	beq.n	801e416 <_fflush_r+0xa>
 801e436:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e438:	07d0      	lsls	r0, r2, #31
 801e43a:	d404      	bmi.n	801e446 <_fflush_r+0x3a>
 801e43c:	0599      	lsls	r1, r3, #22
 801e43e:	d402      	bmi.n	801e446 <_fflush_r+0x3a>
 801e440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e442:	f000 f915 	bl	801e670 <__retarget_lock_acquire_recursive>
 801e446:	4628      	mov	r0, r5
 801e448:	4621      	mov	r1, r4
 801e44a:	f7ff ff59 	bl	801e300 <__sflush_r>
 801e44e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e450:	07da      	lsls	r2, r3, #31
 801e452:	4605      	mov	r5, r0
 801e454:	d4e0      	bmi.n	801e418 <_fflush_r+0xc>
 801e456:	89a3      	ldrh	r3, [r4, #12]
 801e458:	059b      	lsls	r3, r3, #22
 801e45a:	d4dd      	bmi.n	801e418 <_fflush_r+0xc>
 801e45c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e45e:	f000 f908 	bl	801e672 <__retarget_lock_release_recursive>
 801e462:	e7d9      	b.n	801e418 <_fflush_r+0xc>
 801e464:	4b05      	ldr	r3, [pc, #20]	; (801e47c <_fflush_r+0x70>)
 801e466:	429c      	cmp	r4, r3
 801e468:	d101      	bne.n	801e46e <_fflush_r+0x62>
 801e46a:	68ac      	ldr	r4, [r5, #8]
 801e46c:	e7df      	b.n	801e42e <_fflush_r+0x22>
 801e46e:	4b04      	ldr	r3, [pc, #16]	; (801e480 <_fflush_r+0x74>)
 801e470:	429c      	cmp	r4, r3
 801e472:	bf08      	it	eq
 801e474:	68ec      	ldreq	r4, [r5, #12]
 801e476:	e7da      	b.n	801e42e <_fflush_r+0x22>
 801e478:	08052da4 	.word	0x08052da4
 801e47c:	08052dc4 	.word	0x08052dc4
 801e480:	08052d84 	.word	0x08052d84

0801e484 <std>:
 801e484:	2300      	movs	r3, #0
 801e486:	b510      	push	{r4, lr}
 801e488:	4604      	mov	r4, r0
 801e48a:	e9c0 3300 	strd	r3, r3, [r0]
 801e48e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e492:	6083      	str	r3, [r0, #8]
 801e494:	8181      	strh	r1, [r0, #12]
 801e496:	6643      	str	r3, [r0, #100]	; 0x64
 801e498:	81c2      	strh	r2, [r0, #14]
 801e49a:	6183      	str	r3, [r0, #24]
 801e49c:	4619      	mov	r1, r3
 801e49e:	2208      	movs	r2, #8
 801e4a0:	305c      	adds	r0, #92	; 0x5c
 801e4a2:	f7fb fdc1 	bl	801a028 <memset>
 801e4a6:	4b05      	ldr	r3, [pc, #20]	; (801e4bc <std+0x38>)
 801e4a8:	6263      	str	r3, [r4, #36]	; 0x24
 801e4aa:	4b05      	ldr	r3, [pc, #20]	; (801e4c0 <std+0x3c>)
 801e4ac:	62a3      	str	r3, [r4, #40]	; 0x28
 801e4ae:	4b05      	ldr	r3, [pc, #20]	; (801e4c4 <std+0x40>)
 801e4b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e4b2:	4b05      	ldr	r3, [pc, #20]	; (801e4c8 <std+0x44>)
 801e4b4:	6224      	str	r4, [r4, #32]
 801e4b6:	6323      	str	r3, [r4, #48]	; 0x30
 801e4b8:	bd10      	pop	{r4, pc}
 801e4ba:	bf00      	nop
 801e4bc:	0801e7d9 	.word	0x0801e7d9
 801e4c0:	0801e7fb 	.word	0x0801e7fb
 801e4c4:	0801e833 	.word	0x0801e833
 801e4c8:	0801e857 	.word	0x0801e857

0801e4cc <_cleanup_r>:
 801e4cc:	4901      	ldr	r1, [pc, #4]	; (801e4d4 <_cleanup_r+0x8>)
 801e4ce:	f000 b8af 	b.w	801e630 <_fwalk_reent>
 801e4d2:	bf00      	nop
 801e4d4:	0801e40d 	.word	0x0801e40d

0801e4d8 <__sfmoreglue>:
 801e4d8:	b570      	push	{r4, r5, r6, lr}
 801e4da:	2268      	movs	r2, #104	; 0x68
 801e4dc:	1e4d      	subs	r5, r1, #1
 801e4de:	4355      	muls	r5, r2
 801e4e0:	460e      	mov	r6, r1
 801e4e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e4e6:	f7ff fa59 	bl	801d99c <_malloc_r>
 801e4ea:	4604      	mov	r4, r0
 801e4ec:	b140      	cbz	r0, 801e500 <__sfmoreglue+0x28>
 801e4ee:	2100      	movs	r1, #0
 801e4f0:	e9c0 1600 	strd	r1, r6, [r0]
 801e4f4:	300c      	adds	r0, #12
 801e4f6:	60a0      	str	r0, [r4, #8]
 801e4f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e4fc:	f7fb fd94 	bl	801a028 <memset>
 801e500:	4620      	mov	r0, r4
 801e502:	bd70      	pop	{r4, r5, r6, pc}

0801e504 <__sfp_lock_acquire>:
 801e504:	4801      	ldr	r0, [pc, #4]	; (801e50c <__sfp_lock_acquire+0x8>)
 801e506:	f000 b8b3 	b.w	801e670 <__retarget_lock_acquire_recursive>
 801e50a:	bf00      	nop
 801e50c:	20000a1d 	.word	0x20000a1d

0801e510 <__sfp_lock_release>:
 801e510:	4801      	ldr	r0, [pc, #4]	; (801e518 <__sfp_lock_release+0x8>)
 801e512:	f000 b8ae 	b.w	801e672 <__retarget_lock_release_recursive>
 801e516:	bf00      	nop
 801e518:	20000a1d 	.word	0x20000a1d

0801e51c <__sinit_lock_acquire>:
 801e51c:	4801      	ldr	r0, [pc, #4]	; (801e524 <__sinit_lock_acquire+0x8>)
 801e51e:	f000 b8a7 	b.w	801e670 <__retarget_lock_acquire_recursive>
 801e522:	bf00      	nop
 801e524:	20000a1e 	.word	0x20000a1e

0801e528 <__sinit_lock_release>:
 801e528:	4801      	ldr	r0, [pc, #4]	; (801e530 <__sinit_lock_release+0x8>)
 801e52a:	f000 b8a2 	b.w	801e672 <__retarget_lock_release_recursive>
 801e52e:	bf00      	nop
 801e530:	20000a1e 	.word	0x20000a1e

0801e534 <__sinit>:
 801e534:	b510      	push	{r4, lr}
 801e536:	4604      	mov	r4, r0
 801e538:	f7ff fff0 	bl	801e51c <__sinit_lock_acquire>
 801e53c:	69a3      	ldr	r3, [r4, #24]
 801e53e:	b11b      	cbz	r3, 801e548 <__sinit+0x14>
 801e540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e544:	f7ff bff0 	b.w	801e528 <__sinit_lock_release>
 801e548:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e54c:	6523      	str	r3, [r4, #80]	; 0x50
 801e54e:	4b13      	ldr	r3, [pc, #76]	; (801e59c <__sinit+0x68>)
 801e550:	4a13      	ldr	r2, [pc, #76]	; (801e5a0 <__sinit+0x6c>)
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	62a2      	str	r2, [r4, #40]	; 0x28
 801e556:	42a3      	cmp	r3, r4
 801e558:	bf04      	itt	eq
 801e55a:	2301      	moveq	r3, #1
 801e55c:	61a3      	streq	r3, [r4, #24]
 801e55e:	4620      	mov	r0, r4
 801e560:	f000 f820 	bl	801e5a4 <__sfp>
 801e564:	6060      	str	r0, [r4, #4]
 801e566:	4620      	mov	r0, r4
 801e568:	f000 f81c 	bl	801e5a4 <__sfp>
 801e56c:	60a0      	str	r0, [r4, #8]
 801e56e:	4620      	mov	r0, r4
 801e570:	f000 f818 	bl	801e5a4 <__sfp>
 801e574:	2200      	movs	r2, #0
 801e576:	60e0      	str	r0, [r4, #12]
 801e578:	2104      	movs	r1, #4
 801e57a:	6860      	ldr	r0, [r4, #4]
 801e57c:	f7ff ff82 	bl	801e484 <std>
 801e580:	68a0      	ldr	r0, [r4, #8]
 801e582:	2201      	movs	r2, #1
 801e584:	2109      	movs	r1, #9
 801e586:	f7ff ff7d 	bl	801e484 <std>
 801e58a:	68e0      	ldr	r0, [r4, #12]
 801e58c:	2202      	movs	r2, #2
 801e58e:	2112      	movs	r1, #18
 801e590:	f7ff ff78 	bl	801e484 <std>
 801e594:	2301      	movs	r3, #1
 801e596:	61a3      	str	r3, [r4, #24]
 801e598:	e7d2      	b.n	801e540 <__sinit+0xc>
 801e59a:	bf00      	nop
 801e59c:	0805293c 	.word	0x0805293c
 801e5a0:	0801e4cd 	.word	0x0801e4cd

0801e5a4 <__sfp>:
 801e5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e5a6:	4607      	mov	r7, r0
 801e5a8:	f7ff ffac 	bl	801e504 <__sfp_lock_acquire>
 801e5ac:	4b1e      	ldr	r3, [pc, #120]	; (801e628 <__sfp+0x84>)
 801e5ae:	681e      	ldr	r6, [r3, #0]
 801e5b0:	69b3      	ldr	r3, [r6, #24]
 801e5b2:	b913      	cbnz	r3, 801e5ba <__sfp+0x16>
 801e5b4:	4630      	mov	r0, r6
 801e5b6:	f7ff ffbd 	bl	801e534 <__sinit>
 801e5ba:	3648      	adds	r6, #72	; 0x48
 801e5bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e5c0:	3b01      	subs	r3, #1
 801e5c2:	d503      	bpl.n	801e5cc <__sfp+0x28>
 801e5c4:	6833      	ldr	r3, [r6, #0]
 801e5c6:	b30b      	cbz	r3, 801e60c <__sfp+0x68>
 801e5c8:	6836      	ldr	r6, [r6, #0]
 801e5ca:	e7f7      	b.n	801e5bc <__sfp+0x18>
 801e5cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e5d0:	b9d5      	cbnz	r5, 801e608 <__sfp+0x64>
 801e5d2:	4b16      	ldr	r3, [pc, #88]	; (801e62c <__sfp+0x88>)
 801e5d4:	60e3      	str	r3, [r4, #12]
 801e5d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e5da:	6665      	str	r5, [r4, #100]	; 0x64
 801e5dc:	f000 f847 	bl	801e66e <__retarget_lock_init_recursive>
 801e5e0:	f7ff ff96 	bl	801e510 <__sfp_lock_release>
 801e5e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e5e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e5ec:	6025      	str	r5, [r4, #0]
 801e5ee:	61a5      	str	r5, [r4, #24]
 801e5f0:	2208      	movs	r2, #8
 801e5f2:	4629      	mov	r1, r5
 801e5f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e5f8:	f7fb fd16 	bl	801a028 <memset>
 801e5fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e600:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e604:	4620      	mov	r0, r4
 801e606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e608:	3468      	adds	r4, #104	; 0x68
 801e60a:	e7d9      	b.n	801e5c0 <__sfp+0x1c>
 801e60c:	2104      	movs	r1, #4
 801e60e:	4638      	mov	r0, r7
 801e610:	f7ff ff62 	bl	801e4d8 <__sfmoreglue>
 801e614:	4604      	mov	r4, r0
 801e616:	6030      	str	r0, [r6, #0]
 801e618:	2800      	cmp	r0, #0
 801e61a:	d1d5      	bne.n	801e5c8 <__sfp+0x24>
 801e61c:	f7ff ff78 	bl	801e510 <__sfp_lock_release>
 801e620:	230c      	movs	r3, #12
 801e622:	603b      	str	r3, [r7, #0]
 801e624:	e7ee      	b.n	801e604 <__sfp+0x60>
 801e626:	bf00      	nop
 801e628:	0805293c 	.word	0x0805293c
 801e62c:	ffff0001 	.word	0xffff0001

0801e630 <_fwalk_reent>:
 801e630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e634:	4606      	mov	r6, r0
 801e636:	4688      	mov	r8, r1
 801e638:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e63c:	2700      	movs	r7, #0
 801e63e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e642:	f1b9 0901 	subs.w	r9, r9, #1
 801e646:	d505      	bpl.n	801e654 <_fwalk_reent+0x24>
 801e648:	6824      	ldr	r4, [r4, #0]
 801e64a:	2c00      	cmp	r4, #0
 801e64c:	d1f7      	bne.n	801e63e <_fwalk_reent+0xe>
 801e64e:	4638      	mov	r0, r7
 801e650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e654:	89ab      	ldrh	r3, [r5, #12]
 801e656:	2b01      	cmp	r3, #1
 801e658:	d907      	bls.n	801e66a <_fwalk_reent+0x3a>
 801e65a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e65e:	3301      	adds	r3, #1
 801e660:	d003      	beq.n	801e66a <_fwalk_reent+0x3a>
 801e662:	4629      	mov	r1, r5
 801e664:	4630      	mov	r0, r6
 801e666:	47c0      	blx	r8
 801e668:	4307      	orrs	r7, r0
 801e66a:	3568      	adds	r5, #104	; 0x68
 801e66c:	e7e9      	b.n	801e642 <_fwalk_reent+0x12>

0801e66e <__retarget_lock_init_recursive>:
 801e66e:	4770      	bx	lr

0801e670 <__retarget_lock_acquire_recursive>:
 801e670:	4770      	bx	lr

0801e672 <__retarget_lock_release_recursive>:
 801e672:	4770      	bx	lr

0801e674 <__swhatbuf_r>:
 801e674:	b570      	push	{r4, r5, r6, lr}
 801e676:	460e      	mov	r6, r1
 801e678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e67c:	2900      	cmp	r1, #0
 801e67e:	b096      	sub	sp, #88	; 0x58
 801e680:	4614      	mov	r4, r2
 801e682:	461d      	mov	r5, r3
 801e684:	da08      	bge.n	801e698 <__swhatbuf_r+0x24>
 801e686:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e68a:	2200      	movs	r2, #0
 801e68c:	602a      	str	r2, [r5, #0]
 801e68e:	061a      	lsls	r2, r3, #24
 801e690:	d410      	bmi.n	801e6b4 <__swhatbuf_r+0x40>
 801e692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e696:	e00e      	b.n	801e6b6 <__swhatbuf_r+0x42>
 801e698:	466a      	mov	r2, sp
 801e69a:	f000 f903 	bl	801e8a4 <_fstat_r>
 801e69e:	2800      	cmp	r0, #0
 801e6a0:	dbf1      	blt.n	801e686 <__swhatbuf_r+0x12>
 801e6a2:	9a01      	ldr	r2, [sp, #4]
 801e6a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e6a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e6ac:	425a      	negs	r2, r3
 801e6ae:	415a      	adcs	r2, r3
 801e6b0:	602a      	str	r2, [r5, #0]
 801e6b2:	e7ee      	b.n	801e692 <__swhatbuf_r+0x1e>
 801e6b4:	2340      	movs	r3, #64	; 0x40
 801e6b6:	2000      	movs	r0, #0
 801e6b8:	6023      	str	r3, [r4, #0]
 801e6ba:	b016      	add	sp, #88	; 0x58
 801e6bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e6c0 <__smakebuf_r>:
 801e6c0:	898b      	ldrh	r3, [r1, #12]
 801e6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e6c4:	079d      	lsls	r5, r3, #30
 801e6c6:	4606      	mov	r6, r0
 801e6c8:	460c      	mov	r4, r1
 801e6ca:	d507      	bpl.n	801e6dc <__smakebuf_r+0x1c>
 801e6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e6d0:	6023      	str	r3, [r4, #0]
 801e6d2:	6123      	str	r3, [r4, #16]
 801e6d4:	2301      	movs	r3, #1
 801e6d6:	6163      	str	r3, [r4, #20]
 801e6d8:	b002      	add	sp, #8
 801e6da:	bd70      	pop	{r4, r5, r6, pc}
 801e6dc:	ab01      	add	r3, sp, #4
 801e6de:	466a      	mov	r2, sp
 801e6e0:	f7ff ffc8 	bl	801e674 <__swhatbuf_r>
 801e6e4:	9900      	ldr	r1, [sp, #0]
 801e6e6:	4605      	mov	r5, r0
 801e6e8:	4630      	mov	r0, r6
 801e6ea:	f7ff f957 	bl	801d99c <_malloc_r>
 801e6ee:	b948      	cbnz	r0, 801e704 <__smakebuf_r+0x44>
 801e6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6f4:	059a      	lsls	r2, r3, #22
 801e6f6:	d4ef      	bmi.n	801e6d8 <__smakebuf_r+0x18>
 801e6f8:	f023 0303 	bic.w	r3, r3, #3
 801e6fc:	f043 0302 	orr.w	r3, r3, #2
 801e700:	81a3      	strh	r3, [r4, #12]
 801e702:	e7e3      	b.n	801e6cc <__smakebuf_r+0xc>
 801e704:	4b0d      	ldr	r3, [pc, #52]	; (801e73c <__smakebuf_r+0x7c>)
 801e706:	62b3      	str	r3, [r6, #40]	; 0x28
 801e708:	89a3      	ldrh	r3, [r4, #12]
 801e70a:	6020      	str	r0, [r4, #0]
 801e70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e710:	81a3      	strh	r3, [r4, #12]
 801e712:	9b00      	ldr	r3, [sp, #0]
 801e714:	6163      	str	r3, [r4, #20]
 801e716:	9b01      	ldr	r3, [sp, #4]
 801e718:	6120      	str	r0, [r4, #16]
 801e71a:	b15b      	cbz	r3, 801e734 <__smakebuf_r+0x74>
 801e71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e720:	4630      	mov	r0, r6
 801e722:	f000 f8d1 	bl	801e8c8 <_isatty_r>
 801e726:	b128      	cbz	r0, 801e734 <__smakebuf_r+0x74>
 801e728:	89a3      	ldrh	r3, [r4, #12]
 801e72a:	f023 0303 	bic.w	r3, r3, #3
 801e72e:	f043 0301 	orr.w	r3, r3, #1
 801e732:	81a3      	strh	r3, [r4, #12]
 801e734:	89a0      	ldrh	r0, [r4, #12]
 801e736:	4305      	orrs	r5, r0
 801e738:	81a5      	strh	r5, [r4, #12]
 801e73a:	e7cd      	b.n	801e6d8 <__smakebuf_r+0x18>
 801e73c:	0801e4cd 	.word	0x0801e4cd

0801e740 <_malloc_usable_size_r>:
 801e740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e744:	1f18      	subs	r0, r3, #4
 801e746:	2b00      	cmp	r3, #0
 801e748:	bfbc      	itt	lt
 801e74a:	580b      	ldrlt	r3, [r1, r0]
 801e74c:	18c0      	addlt	r0, r0, r3
 801e74e:	4770      	bx	lr

0801e750 <_raise_r>:
 801e750:	291f      	cmp	r1, #31
 801e752:	b538      	push	{r3, r4, r5, lr}
 801e754:	4604      	mov	r4, r0
 801e756:	460d      	mov	r5, r1
 801e758:	d904      	bls.n	801e764 <_raise_r+0x14>
 801e75a:	2316      	movs	r3, #22
 801e75c:	6003      	str	r3, [r0, #0]
 801e75e:	f04f 30ff 	mov.w	r0, #4294967295
 801e762:	bd38      	pop	{r3, r4, r5, pc}
 801e764:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e766:	b112      	cbz	r2, 801e76e <_raise_r+0x1e>
 801e768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e76c:	b94b      	cbnz	r3, 801e782 <_raise_r+0x32>
 801e76e:	4620      	mov	r0, r4
 801e770:	f000 f830 	bl	801e7d4 <_getpid_r>
 801e774:	462a      	mov	r2, r5
 801e776:	4601      	mov	r1, r0
 801e778:	4620      	mov	r0, r4
 801e77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e77e:	f000 b817 	b.w	801e7b0 <_kill_r>
 801e782:	2b01      	cmp	r3, #1
 801e784:	d00a      	beq.n	801e79c <_raise_r+0x4c>
 801e786:	1c59      	adds	r1, r3, #1
 801e788:	d103      	bne.n	801e792 <_raise_r+0x42>
 801e78a:	2316      	movs	r3, #22
 801e78c:	6003      	str	r3, [r0, #0]
 801e78e:	2001      	movs	r0, #1
 801e790:	e7e7      	b.n	801e762 <_raise_r+0x12>
 801e792:	2400      	movs	r4, #0
 801e794:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e798:	4628      	mov	r0, r5
 801e79a:	4798      	blx	r3
 801e79c:	2000      	movs	r0, #0
 801e79e:	e7e0      	b.n	801e762 <_raise_r+0x12>

0801e7a0 <raise>:
 801e7a0:	4b02      	ldr	r3, [pc, #8]	; (801e7ac <raise+0xc>)
 801e7a2:	4601      	mov	r1, r0
 801e7a4:	6818      	ldr	r0, [r3, #0]
 801e7a6:	f7ff bfd3 	b.w	801e750 <_raise_r>
 801e7aa:	bf00      	nop
 801e7ac:	20000064 	.word	0x20000064

0801e7b0 <_kill_r>:
 801e7b0:	b538      	push	{r3, r4, r5, lr}
 801e7b2:	4d07      	ldr	r5, [pc, #28]	; (801e7d0 <_kill_r+0x20>)
 801e7b4:	2300      	movs	r3, #0
 801e7b6:	4604      	mov	r4, r0
 801e7b8:	4608      	mov	r0, r1
 801e7ba:	4611      	mov	r1, r2
 801e7bc:	602b      	str	r3, [r5, #0]
 801e7be:	f7e7 fa7a 	bl	8005cb6 <_kill>
 801e7c2:	1c43      	adds	r3, r0, #1
 801e7c4:	d102      	bne.n	801e7cc <_kill_r+0x1c>
 801e7c6:	682b      	ldr	r3, [r5, #0]
 801e7c8:	b103      	cbz	r3, 801e7cc <_kill_r+0x1c>
 801e7ca:	6023      	str	r3, [r4, #0]
 801e7cc:	bd38      	pop	{r3, r4, r5, pc}
 801e7ce:	bf00      	nop
 801e7d0:	20000a18 	.word	0x20000a18

0801e7d4 <_getpid_r>:
 801e7d4:	f7e7 ba67 	b.w	8005ca6 <_getpid>

0801e7d8 <__sread>:
 801e7d8:	b510      	push	{r4, lr}
 801e7da:	460c      	mov	r4, r1
 801e7dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7e0:	f000 f894 	bl	801e90c <_read_r>
 801e7e4:	2800      	cmp	r0, #0
 801e7e6:	bfab      	itete	ge
 801e7e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e7ea:	89a3      	ldrhlt	r3, [r4, #12]
 801e7ec:	181b      	addge	r3, r3, r0
 801e7ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e7f2:	bfac      	ite	ge
 801e7f4:	6563      	strge	r3, [r4, #84]	; 0x54
 801e7f6:	81a3      	strhlt	r3, [r4, #12]
 801e7f8:	bd10      	pop	{r4, pc}

0801e7fa <__swrite>:
 801e7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7fe:	461f      	mov	r7, r3
 801e800:	898b      	ldrh	r3, [r1, #12]
 801e802:	05db      	lsls	r3, r3, #23
 801e804:	4605      	mov	r5, r0
 801e806:	460c      	mov	r4, r1
 801e808:	4616      	mov	r6, r2
 801e80a:	d505      	bpl.n	801e818 <__swrite+0x1e>
 801e80c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e810:	2302      	movs	r3, #2
 801e812:	2200      	movs	r2, #0
 801e814:	f000 f868 	bl	801e8e8 <_lseek_r>
 801e818:	89a3      	ldrh	r3, [r4, #12]
 801e81a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e81e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e822:	81a3      	strh	r3, [r4, #12]
 801e824:	4632      	mov	r2, r6
 801e826:	463b      	mov	r3, r7
 801e828:	4628      	mov	r0, r5
 801e82a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e82e:	f000 b817 	b.w	801e860 <_write_r>

0801e832 <__sseek>:
 801e832:	b510      	push	{r4, lr}
 801e834:	460c      	mov	r4, r1
 801e836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e83a:	f000 f855 	bl	801e8e8 <_lseek_r>
 801e83e:	1c43      	adds	r3, r0, #1
 801e840:	89a3      	ldrh	r3, [r4, #12]
 801e842:	bf15      	itete	ne
 801e844:	6560      	strne	r0, [r4, #84]	; 0x54
 801e846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e84a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e84e:	81a3      	strheq	r3, [r4, #12]
 801e850:	bf18      	it	ne
 801e852:	81a3      	strhne	r3, [r4, #12]
 801e854:	bd10      	pop	{r4, pc}

0801e856 <__sclose>:
 801e856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e85a:	f000 b813 	b.w	801e884 <_close_r>
	...

0801e860 <_write_r>:
 801e860:	b538      	push	{r3, r4, r5, lr}
 801e862:	4d07      	ldr	r5, [pc, #28]	; (801e880 <_write_r+0x20>)
 801e864:	4604      	mov	r4, r0
 801e866:	4608      	mov	r0, r1
 801e868:	4611      	mov	r1, r2
 801e86a:	2200      	movs	r2, #0
 801e86c:	602a      	str	r2, [r5, #0]
 801e86e:	461a      	mov	r2, r3
 801e870:	f7e7 fa58 	bl	8005d24 <_write>
 801e874:	1c43      	adds	r3, r0, #1
 801e876:	d102      	bne.n	801e87e <_write_r+0x1e>
 801e878:	682b      	ldr	r3, [r5, #0]
 801e87a:	b103      	cbz	r3, 801e87e <_write_r+0x1e>
 801e87c:	6023      	str	r3, [r4, #0]
 801e87e:	bd38      	pop	{r3, r4, r5, pc}
 801e880:	20000a18 	.word	0x20000a18

0801e884 <_close_r>:
 801e884:	b538      	push	{r3, r4, r5, lr}
 801e886:	4d06      	ldr	r5, [pc, #24]	; (801e8a0 <_close_r+0x1c>)
 801e888:	2300      	movs	r3, #0
 801e88a:	4604      	mov	r4, r0
 801e88c:	4608      	mov	r0, r1
 801e88e:	602b      	str	r3, [r5, #0]
 801e890:	f7e7 fa64 	bl	8005d5c <_close>
 801e894:	1c43      	adds	r3, r0, #1
 801e896:	d102      	bne.n	801e89e <_close_r+0x1a>
 801e898:	682b      	ldr	r3, [r5, #0]
 801e89a:	b103      	cbz	r3, 801e89e <_close_r+0x1a>
 801e89c:	6023      	str	r3, [r4, #0]
 801e89e:	bd38      	pop	{r3, r4, r5, pc}
 801e8a0:	20000a18 	.word	0x20000a18

0801e8a4 <_fstat_r>:
 801e8a4:	b538      	push	{r3, r4, r5, lr}
 801e8a6:	4d07      	ldr	r5, [pc, #28]	; (801e8c4 <_fstat_r+0x20>)
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	4604      	mov	r4, r0
 801e8ac:	4608      	mov	r0, r1
 801e8ae:	4611      	mov	r1, r2
 801e8b0:	602b      	str	r3, [r5, #0]
 801e8b2:	f7e7 fa5f 	bl	8005d74 <_fstat>
 801e8b6:	1c43      	adds	r3, r0, #1
 801e8b8:	d102      	bne.n	801e8c0 <_fstat_r+0x1c>
 801e8ba:	682b      	ldr	r3, [r5, #0]
 801e8bc:	b103      	cbz	r3, 801e8c0 <_fstat_r+0x1c>
 801e8be:	6023      	str	r3, [r4, #0]
 801e8c0:	bd38      	pop	{r3, r4, r5, pc}
 801e8c2:	bf00      	nop
 801e8c4:	20000a18 	.word	0x20000a18

0801e8c8 <_isatty_r>:
 801e8c8:	b538      	push	{r3, r4, r5, lr}
 801e8ca:	4d06      	ldr	r5, [pc, #24]	; (801e8e4 <_isatty_r+0x1c>)
 801e8cc:	2300      	movs	r3, #0
 801e8ce:	4604      	mov	r4, r0
 801e8d0:	4608      	mov	r0, r1
 801e8d2:	602b      	str	r3, [r5, #0]
 801e8d4:	f7e7 fa5e 	bl	8005d94 <_isatty>
 801e8d8:	1c43      	adds	r3, r0, #1
 801e8da:	d102      	bne.n	801e8e2 <_isatty_r+0x1a>
 801e8dc:	682b      	ldr	r3, [r5, #0]
 801e8de:	b103      	cbz	r3, 801e8e2 <_isatty_r+0x1a>
 801e8e0:	6023      	str	r3, [r4, #0]
 801e8e2:	bd38      	pop	{r3, r4, r5, pc}
 801e8e4:	20000a18 	.word	0x20000a18

0801e8e8 <_lseek_r>:
 801e8e8:	b538      	push	{r3, r4, r5, lr}
 801e8ea:	4d07      	ldr	r5, [pc, #28]	; (801e908 <_lseek_r+0x20>)
 801e8ec:	4604      	mov	r4, r0
 801e8ee:	4608      	mov	r0, r1
 801e8f0:	4611      	mov	r1, r2
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	602a      	str	r2, [r5, #0]
 801e8f6:	461a      	mov	r2, r3
 801e8f8:	f7e7 fa57 	bl	8005daa <_lseek>
 801e8fc:	1c43      	adds	r3, r0, #1
 801e8fe:	d102      	bne.n	801e906 <_lseek_r+0x1e>
 801e900:	682b      	ldr	r3, [r5, #0]
 801e902:	b103      	cbz	r3, 801e906 <_lseek_r+0x1e>
 801e904:	6023      	str	r3, [r4, #0]
 801e906:	bd38      	pop	{r3, r4, r5, pc}
 801e908:	20000a18 	.word	0x20000a18

0801e90c <_read_r>:
 801e90c:	b538      	push	{r3, r4, r5, lr}
 801e90e:	4d07      	ldr	r5, [pc, #28]	; (801e92c <_read_r+0x20>)
 801e910:	4604      	mov	r4, r0
 801e912:	4608      	mov	r0, r1
 801e914:	4611      	mov	r1, r2
 801e916:	2200      	movs	r2, #0
 801e918:	602a      	str	r2, [r5, #0]
 801e91a:	461a      	mov	r2, r3
 801e91c:	f7e7 f9e5 	bl	8005cea <_read>
 801e920:	1c43      	adds	r3, r0, #1
 801e922:	d102      	bne.n	801e92a <_read_r+0x1e>
 801e924:	682b      	ldr	r3, [r5, #0]
 801e926:	b103      	cbz	r3, 801e92a <_read_r+0x1e>
 801e928:	6023      	str	r3, [r4, #0]
 801e92a:	bd38      	pop	{r3, r4, r5, pc}
 801e92c:	20000a18 	.word	0x20000a18

0801e930 <memcmp>:
 801e930:	b510      	push	{r4, lr}
 801e932:	3901      	subs	r1, #1
 801e934:	4402      	add	r2, r0
 801e936:	4290      	cmp	r0, r2
 801e938:	d101      	bne.n	801e93e <memcmp+0xe>
 801e93a:	2000      	movs	r0, #0
 801e93c:	e005      	b.n	801e94a <memcmp+0x1a>
 801e93e:	7803      	ldrb	r3, [r0, #0]
 801e940:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e944:	42a3      	cmp	r3, r4
 801e946:	d001      	beq.n	801e94c <memcmp+0x1c>
 801e948:	1b18      	subs	r0, r3, r4
 801e94a:	bd10      	pop	{r4, pc}
 801e94c:	3001      	adds	r0, #1
 801e94e:	e7f2      	b.n	801e936 <memcmp+0x6>

0801e950 <floor>:
 801e950:	ec51 0b10 	vmov	r0, r1, d0
 801e954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e958:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801e95c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801e960:	2e13      	cmp	r6, #19
 801e962:	ee10 5a10 	vmov	r5, s0
 801e966:	ee10 8a10 	vmov	r8, s0
 801e96a:	460c      	mov	r4, r1
 801e96c:	dc32      	bgt.n	801e9d4 <floor+0x84>
 801e96e:	2e00      	cmp	r6, #0
 801e970:	da14      	bge.n	801e99c <floor+0x4c>
 801e972:	a333      	add	r3, pc, #204	; (adr r3, 801ea40 <floor+0xf0>)
 801e974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e978:	f7fa fc48 	bl	801920c <__adddf3>
 801e97c:	2200      	movs	r2, #0
 801e97e:	2300      	movs	r3, #0
 801e980:	f7fb f88a 	bl	8019a98 <__aeabi_dcmpgt>
 801e984:	b138      	cbz	r0, 801e996 <floor+0x46>
 801e986:	2c00      	cmp	r4, #0
 801e988:	da57      	bge.n	801ea3a <floor+0xea>
 801e98a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e98e:	431d      	orrs	r5, r3
 801e990:	d001      	beq.n	801e996 <floor+0x46>
 801e992:	4c2d      	ldr	r4, [pc, #180]	; (801ea48 <floor+0xf8>)
 801e994:	2500      	movs	r5, #0
 801e996:	4621      	mov	r1, r4
 801e998:	4628      	mov	r0, r5
 801e99a:	e025      	b.n	801e9e8 <floor+0x98>
 801e99c:	4f2b      	ldr	r7, [pc, #172]	; (801ea4c <floor+0xfc>)
 801e99e:	4137      	asrs	r7, r6
 801e9a0:	ea01 0307 	and.w	r3, r1, r7
 801e9a4:	4303      	orrs	r3, r0
 801e9a6:	d01f      	beq.n	801e9e8 <floor+0x98>
 801e9a8:	a325      	add	r3, pc, #148	; (adr r3, 801ea40 <floor+0xf0>)
 801e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9ae:	f7fa fc2d 	bl	801920c <__adddf3>
 801e9b2:	2200      	movs	r2, #0
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	f7fb f86f 	bl	8019a98 <__aeabi_dcmpgt>
 801e9ba:	2800      	cmp	r0, #0
 801e9bc:	d0eb      	beq.n	801e996 <floor+0x46>
 801e9be:	2c00      	cmp	r4, #0
 801e9c0:	bfbe      	ittt	lt
 801e9c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e9c6:	fa43 f606 	asrlt.w	r6, r3, r6
 801e9ca:	19a4      	addlt	r4, r4, r6
 801e9cc:	ea24 0407 	bic.w	r4, r4, r7
 801e9d0:	2500      	movs	r5, #0
 801e9d2:	e7e0      	b.n	801e996 <floor+0x46>
 801e9d4:	2e33      	cmp	r6, #51	; 0x33
 801e9d6:	dd0b      	ble.n	801e9f0 <floor+0xa0>
 801e9d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e9dc:	d104      	bne.n	801e9e8 <floor+0x98>
 801e9de:	ee10 2a10 	vmov	r2, s0
 801e9e2:	460b      	mov	r3, r1
 801e9e4:	f7fa fc12 	bl	801920c <__adddf3>
 801e9e8:	ec41 0b10 	vmov	d0, r0, r1
 801e9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e9f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e9f4:	f04f 33ff 	mov.w	r3, #4294967295
 801e9f8:	fa23 f707 	lsr.w	r7, r3, r7
 801e9fc:	4207      	tst	r7, r0
 801e9fe:	d0f3      	beq.n	801e9e8 <floor+0x98>
 801ea00:	a30f      	add	r3, pc, #60	; (adr r3, 801ea40 <floor+0xf0>)
 801ea02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea06:	f7fa fc01 	bl	801920c <__adddf3>
 801ea0a:	2200      	movs	r2, #0
 801ea0c:	2300      	movs	r3, #0
 801ea0e:	f7fb f843 	bl	8019a98 <__aeabi_dcmpgt>
 801ea12:	2800      	cmp	r0, #0
 801ea14:	d0bf      	beq.n	801e996 <floor+0x46>
 801ea16:	2c00      	cmp	r4, #0
 801ea18:	da02      	bge.n	801ea20 <floor+0xd0>
 801ea1a:	2e14      	cmp	r6, #20
 801ea1c:	d103      	bne.n	801ea26 <floor+0xd6>
 801ea1e:	3401      	adds	r4, #1
 801ea20:	ea25 0507 	bic.w	r5, r5, r7
 801ea24:	e7b7      	b.n	801e996 <floor+0x46>
 801ea26:	2301      	movs	r3, #1
 801ea28:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ea2c:	fa03 f606 	lsl.w	r6, r3, r6
 801ea30:	4435      	add	r5, r6
 801ea32:	4545      	cmp	r5, r8
 801ea34:	bf38      	it	cc
 801ea36:	18e4      	addcc	r4, r4, r3
 801ea38:	e7f2      	b.n	801ea20 <floor+0xd0>
 801ea3a:	2500      	movs	r5, #0
 801ea3c:	462c      	mov	r4, r5
 801ea3e:	e7aa      	b.n	801e996 <floor+0x46>
 801ea40:	8800759c 	.word	0x8800759c
 801ea44:	7e37e43c 	.word	0x7e37e43c
 801ea48:	bff00000 	.word	0xbff00000
 801ea4c:	000fffff 	.word	0x000fffff

0801ea50 <pow>:
 801ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ea52:	ed2d 8b02 	vpush	{d8}
 801ea56:	eeb0 8a40 	vmov.f32	s16, s0
 801ea5a:	eef0 8a60 	vmov.f32	s17, s1
 801ea5e:	ec55 4b11 	vmov	r4, r5, d1
 801ea62:	f000 f865 	bl	801eb30 <__ieee754_pow>
 801ea66:	4622      	mov	r2, r4
 801ea68:	462b      	mov	r3, r5
 801ea6a:	4620      	mov	r0, r4
 801ea6c:	4629      	mov	r1, r5
 801ea6e:	ec57 6b10 	vmov	r6, r7, d0
 801ea72:	f7fb f81b 	bl	8019aac <__aeabi_dcmpun>
 801ea76:	2800      	cmp	r0, #0
 801ea78:	d13b      	bne.n	801eaf2 <pow+0xa2>
 801ea7a:	ec51 0b18 	vmov	r0, r1, d8
 801ea7e:	2200      	movs	r2, #0
 801ea80:	2300      	movs	r3, #0
 801ea82:	f7fa ffe1 	bl	8019a48 <__aeabi_dcmpeq>
 801ea86:	b1b8      	cbz	r0, 801eab8 <pow+0x68>
 801ea88:	2200      	movs	r2, #0
 801ea8a:	2300      	movs	r3, #0
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	4629      	mov	r1, r5
 801ea90:	f7fa ffda 	bl	8019a48 <__aeabi_dcmpeq>
 801ea94:	2800      	cmp	r0, #0
 801ea96:	d146      	bne.n	801eb26 <pow+0xd6>
 801ea98:	ec45 4b10 	vmov	d0, r4, r5
 801ea9c:	f000 fe61 	bl	801f762 <finite>
 801eaa0:	b338      	cbz	r0, 801eaf2 <pow+0xa2>
 801eaa2:	2200      	movs	r2, #0
 801eaa4:	2300      	movs	r3, #0
 801eaa6:	4620      	mov	r0, r4
 801eaa8:	4629      	mov	r1, r5
 801eaaa:	f7fa ffd7 	bl	8019a5c <__aeabi_dcmplt>
 801eaae:	b300      	cbz	r0, 801eaf2 <pow+0xa2>
 801eab0:	f7fb fa90 	bl	8019fd4 <__errno>
 801eab4:	2322      	movs	r3, #34	; 0x22
 801eab6:	e01b      	b.n	801eaf0 <pow+0xa0>
 801eab8:	ec47 6b10 	vmov	d0, r6, r7
 801eabc:	f000 fe51 	bl	801f762 <finite>
 801eac0:	b9e0      	cbnz	r0, 801eafc <pow+0xac>
 801eac2:	eeb0 0a48 	vmov.f32	s0, s16
 801eac6:	eef0 0a68 	vmov.f32	s1, s17
 801eaca:	f000 fe4a 	bl	801f762 <finite>
 801eace:	b1a8      	cbz	r0, 801eafc <pow+0xac>
 801ead0:	ec45 4b10 	vmov	d0, r4, r5
 801ead4:	f000 fe45 	bl	801f762 <finite>
 801ead8:	b180      	cbz	r0, 801eafc <pow+0xac>
 801eada:	4632      	mov	r2, r6
 801eadc:	463b      	mov	r3, r7
 801eade:	4630      	mov	r0, r6
 801eae0:	4639      	mov	r1, r7
 801eae2:	f7fa ffe3 	bl	8019aac <__aeabi_dcmpun>
 801eae6:	2800      	cmp	r0, #0
 801eae8:	d0e2      	beq.n	801eab0 <pow+0x60>
 801eaea:	f7fb fa73 	bl	8019fd4 <__errno>
 801eaee:	2321      	movs	r3, #33	; 0x21
 801eaf0:	6003      	str	r3, [r0, #0]
 801eaf2:	ecbd 8b02 	vpop	{d8}
 801eaf6:	ec47 6b10 	vmov	d0, r6, r7
 801eafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eafc:	2200      	movs	r2, #0
 801eafe:	2300      	movs	r3, #0
 801eb00:	4630      	mov	r0, r6
 801eb02:	4639      	mov	r1, r7
 801eb04:	f7fa ffa0 	bl	8019a48 <__aeabi_dcmpeq>
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	d0f2      	beq.n	801eaf2 <pow+0xa2>
 801eb0c:	eeb0 0a48 	vmov.f32	s0, s16
 801eb10:	eef0 0a68 	vmov.f32	s1, s17
 801eb14:	f000 fe25 	bl	801f762 <finite>
 801eb18:	2800      	cmp	r0, #0
 801eb1a:	d0ea      	beq.n	801eaf2 <pow+0xa2>
 801eb1c:	ec45 4b10 	vmov	d0, r4, r5
 801eb20:	f000 fe1f 	bl	801f762 <finite>
 801eb24:	e7c3      	b.n	801eaae <pow+0x5e>
 801eb26:	4f01      	ldr	r7, [pc, #4]	; (801eb2c <pow+0xdc>)
 801eb28:	2600      	movs	r6, #0
 801eb2a:	e7e2      	b.n	801eaf2 <pow+0xa2>
 801eb2c:	3ff00000 	.word	0x3ff00000

0801eb30 <__ieee754_pow>:
 801eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb34:	ed2d 8b06 	vpush	{d8-d10}
 801eb38:	b089      	sub	sp, #36	; 0x24
 801eb3a:	ed8d 1b00 	vstr	d1, [sp]
 801eb3e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801eb42:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801eb46:	ea58 0102 	orrs.w	r1, r8, r2
 801eb4a:	ec57 6b10 	vmov	r6, r7, d0
 801eb4e:	d115      	bne.n	801eb7c <__ieee754_pow+0x4c>
 801eb50:	19b3      	adds	r3, r6, r6
 801eb52:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801eb56:	4152      	adcs	r2, r2
 801eb58:	4299      	cmp	r1, r3
 801eb5a:	4b89      	ldr	r3, [pc, #548]	; (801ed80 <__ieee754_pow+0x250>)
 801eb5c:	4193      	sbcs	r3, r2
 801eb5e:	f080 84d2 	bcs.w	801f506 <__ieee754_pow+0x9d6>
 801eb62:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eb66:	4630      	mov	r0, r6
 801eb68:	4639      	mov	r1, r7
 801eb6a:	f7fa fb4f 	bl	801920c <__adddf3>
 801eb6e:	ec41 0b10 	vmov	d0, r0, r1
 801eb72:	b009      	add	sp, #36	; 0x24
 801eb74:	ecbd 8b06 	vpop	{d8-d10}
 801eb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb7c:	4b81      	ldr	r3, [pc, #516]	; (801ed84 <__ieee754_pow+0x254>)
 801eb7e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801eb82:	429c      	cmp	r4, r3
 801eb84:	ee10 aa10 	vmov	sl, s0
 801eb88:	463d      	mov	r5, r7
 801eb8a:	dc06      	bgt.n	801eb9a <__ieee754_pow+0x6a>
 801eb8c:	d101      	bne.n	801eb92 <__ieee754_pow+0x62>
 801eb8e:	2e00      	cmp	r6, #0
 801eb90:	d1e7      	bne.n	801eb62 <__ieee754_pow+0x32>
 801eb92:	4598      	cmp	r8, r3
 801eb94:	dc01      	bgt.n	801eb9a <__ieee754_pow+0x6a>
 801eb96:	d10f      	bne.n	801ebb8 <__ieee754_pow+0x88>
 801eb98:	b172      	cbz	r2, 801ebb8 <__ieee754_pow+0x88>
 801eb9a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801eb9e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801eba2:	ea55 050a 	orrs.w	r5, r5, sl
 801eba6:	d1dc      	bne.n	801eb62 <__ieee754_pow+0x32>
 801eba8:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ebac:	18db      	adds	r3, r3, r3
 801ebae:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801ebb2:	4152      	adcs	r2, r2
 801ebb4:	429d      	cmp	r5, r3
 801ebb6:	e7d0      	b.n	801eb5a <__ieee754_pow+0x2a>
 801ebb8:	2d00      	cmp	r5, #0
 801ebba:	da3b      	bge.n	801ec34 <__ieee754_pow+0x104>
 801ebbc:	4b72      	ldr	r3, [pc, #456]	; (801ed88 <__ieee754_pow+0x258>)
 801ebbe:	4598      	cmp	r8, r3
 801ebc0:	dc51      	bgt.n	801ec66 <__ieee754_pow+0x136>
 801ebc2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801ebc6:	4598      	cmp	r8, r3
 801ebc8:	f340 84ac 	ble.w	801f524 <__ieee754_pow+0x9f4>
 801ebcc:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ebd0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ebd4:	2b14      	cmp	r3, #20
 801ebd6:	dd0f      	ble.n	801ebf8 <__ieee754_pow+0xc8>
 801ebd8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ebdc:	fa22 f103 	lsr.w	r1, r2, r3
 801ebe0:	fa01 f303 	lsl.w	r3, r1, r3
 801ebe4:	4293      	cmp	r3, r2
 801ebe6:	f040 849d 	bne.w	801f524 <__ieee754_pow+0x9f4>
 801ebea:	f001 0101 	and.w	r1, r1, #1
 801ebee:	f1c1 0302 	rsb	r3, r1, #2
 801ebf2:	9304      	str	r3, [sp, #16]
 801ebf4:	b182      	cbz	r2, 801ec18 <__ieee754_pow+0xe8>
 801ebf6:	e05f      	b.n	801ecb8 <__ieee754_pow+0x188>
 801ebf8:	2a00      	cmp	r2, #0
 801ebfa:	d15b      	bne.n	801ecb4 <__ieee754_pow+0x184>
 801ebfc:	f1c3 0314 	rsb	r3, r3, #20
 801ec00:	fa48 f103 	asr.w	r1, r8, r3
 801ec04:	fa01 f303 	lsl.w	r3, r1, r3
 801ec08:	4543      	cmp	r3, r8
 801ec0a:	f040 8488 	bne.w	801f51e <__ieee754_pow+0x9ee>
 801ec0e:	f001 0101 	and.w	r1, r1, #1
 801ec12:	f1c1 0302 	rsb	r3, r1, #2
 801ec16:	9304      	str	r3, [sp, #16]
 801ec18:	4b5c      	ldr	r3, [pc, #368]	; (801ed8c <__ieee754_pow+0x25c>)
 801ec1a:	4598      	cmp	r8, r3
 801ec1c:	d132      	bne.n	801ec84 <__ieee754_pow+0x154>
 801ec1e:	f1b9 0f00 	cmp.w	r9, #0
 801ec22:	f280 8478 	bge.w	801f516 <__ieee754_pow+0x9e6>
 801ec26:	4959      	ldr	r1, [pc, #356]	; (801ed8c <__ieee754_pow+0x25c>)
 801ec28:	4632      	mov	r2, r6
 801ec2a:	463b      	mov	r3, r7
 801ec2c:	2000      	movs	r0, #0
 801ec2e:	f7fa fdcd 	bl	80197cc <__aeabi_ddiv>
 801ec32:	e79c      	b.n	801eb6e <__ieee754_pow+0x3e>
 801ec34:	2300      	movs	r3, #0
 801ec36:	9304      	str	r3, [sp, #16]
 801ec38:	2a00      	cmp	r2, #0
 801ec3a:	d13d      	bne.n	801ecb8 <__ieee754_pow+0x188>
 801ec3c:	4b51      	ldr	r3, [pc, #324]	; (801ed84 <__ieee754_pow+0x254>)
 801ec3e:	4598      	cmp	r8, r3
 801ec40:	d1ea      	bne.n	801ec18 <__ieee754_pow+0xe8>
 801ec42:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801ec46:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ec4a:	ea53 030a 	orrs.w	r3, r3, sl
 801ec4e:	f000 845a 	beq.w	801f506 <__ieee754_pow+0x9d6>
 801ec52:	4b4f      	ldr	r3, [pc, #316]	; (801ed90 <__ieee754_pow+0x260>)
 801ec54:	429c      	cmp	r4, r3
 801ec56:	dd08      	ble.n	801ec6a <__ieee754_pow+0x13a>
 801ec58:	f1b9 0f00 	cmp.w	r9, #0
 801ec5c:	f2c0 8457 	blt.w	801f50e <__ieee754_pow+0x9de>
 801ec60:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec64:	e783      	b.n	801eb6e <__ieee754_pow+0x3e>
 801ec66:	2302      	movs	r3, #2
 801ec68:	e7e5      	b.n	801ec36 <__ieee754_pow+0x106>
 801ec6a:	f1b9 0f00 	cmp.w	r9, #0
 801ec6e:	f04f 0000 	mov.w	r0, #0
 801ec72:	f04f 0100 	mov.w	r1, #0
 801ec76:	f6bf af7a 	bge.w	801eb6e <__ieee754_pow+0x3e>
 801ec7a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ec7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801ec82:	e774      	b.n	801eb6e <__ieee754_pow+0x3e>
 801ec84:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801ec88:	d106      	bne.n	801ec98 <__ieee754_pow+0x168>
 801ec8a:	4632      	mov	r2, r6
 801ec8c:	463b      	mov	r3, r7
 801ec8e:	4630      	mov	r0, r6
 801ec90:	4639      	mov	r1, r7
 801ec92:	f7fa fc71 	bl	8019578 <__aeabi_dmul>
 801ec96:	e76a      	b.n	801eb6e <__ieee754_pow+0x3e>
 801ec98:	4b3e      	ldr	r3, [pc, #248]	; (801ed94 <__ieee754_pow+0x264>)
 801ec9a:	4599      	cmp	r9, r3
 801ec9c:	d10c      	bne.n	801ecb8 <__ieee754_pow+0x188>
 801ec9e:	2d00      	cmp	r5, #0
 801eca0:	db0a      	blt.n	801ecb8 <__ieee754_pow+0x188>
 801eca2:	ec47 6b10 	vmov	d0, r6, r7
 801eca6:	b009      	add	sp, #36	; 0x24
 801eca8:	ecbd 8b06 	vpop	{d8-d10}
 801ecac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecb0:	f000 bc6c 	b.w	801f58c <__ieee754_sqrt>
 801ecb4:	2300      	movs	r3, #0
 801ecb6:	9304      	str	r3, [sp, #16]
 801ecb8:	ec47 6b10 	vmov	d0, r6, r7
 801ecbc:	f000 fd48 	bl	801f750 <fabs>
 801ecc0:	ec51 0b10 	vmov	r0, r1, d0
 801ecc4:	f1ba 0f00 	cmp.w	sl, #0
 801ecc8:	d129      	bne.n	801ed1e <__ieee754_pow+0x1ee>
 801ecca:	b124      	cbz	r4, 801ecd6 <__ieee754_pow+0x1a6>
 801eccc:	4b2f      	ldr	r3, [pc, #188]	; (801ed8c <__ieee754_pow+0x25c>)
 801ecce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801ecd2:	429a      	cmp	r2, r3
 801ecd4:	d123      	bne.n	801ed1e <__ieee754_pow+0x1ee>
 801ecd6:	f1b9 0f00 	cmp.w	r9, #0
 801ecda:	da05      	bge.n	801ece8 <__ieee754_pow+0x1b8>
 801ecdc:	4602      	mov	r2, r0
 801ecde:	460b      	mov	r3, r1
 801ece0:	2000      	movs	r0, #0
 801ece2:	492a      	ldr	r1, [pc, #168]	; (801ed8c <__ieee754_pow+0x25c>)
 801ece4:	f7fa fd72 	bl	80197cc <__aeabi_ddiv>
 801ece8:	2d00      	cmp	r5, #0
 801ecea:	f6bf af40 	bge.w	801eb6e <__ieee754_pow+0x3e>
 801ecee:	9b04      	ldr	r3, [sp, #16]
 801ecf0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801ecf4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801ecf8:	4323      	orrs	r3, r4
 801ecfa:	d108      	bne.n	801ed0e <__ieee754_pow+0x1de>
 801ecfc:	4602      	mov	r2, r0
 801ecfe:	460b      	mov	r3, r1
 801ed00:	4610      	mov	r0, r2
 801ed02:	4619      	mov	r1, r3
 801ed04:	f7fa fa80 	bl	8019208 <__aeabi_dsub>
 801ed08:	4602      	mov	r2, r0
 801ed0a:	460b      	mov	r3, r1
 801ed0c:	e78f      	b.n	801ec2e <__ieee754_pow+0xfe>
 801ed0e:	9b04      	ldr	r3, [sp, #16]
 801ed10:	2b01      	cmp	r3, #1
 801ed12:	f47f af2c 	bne.w	801eb6e <__ieee754_pow+0x3e>
 801ed16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ed1a:	4619      	mov	r1, r3
 801ed1c:	e727      	b.n	801eb6e <__ieee754_pow+0x3e>
 801ed1e:	0feb      	lsrs	r3, r5, #31
 801ed20:	3b01      	subs	r3, #1
 801ed22:	9306      	str	r3, [sp, #24]
 801ed24:	9a06      	ldr	r2, [sp, #24]
 801ed26:	9b04      	ldr	r3, [sp, #16]
 801ed28:	4313      	orrs	r3, r2
 801ed2a:	d102      	bne.n	801ed32 <__ieee754_pow+0x202>
 801ed2c:	4632      	mov	r2, r6
 801ed2e:	463b      	mov	r3, r7
 801ed30:	e7e6      	b.n	801ed00 <__ieee754_pow+0x1d0>
 801ed32:	4b19      	ldr	r3, [pc, #100]	; (801ed98 <__ieee754_pow+0x268>)
 801ed34:	4598      	cmp	r8, r3
 801ed36:	f340 80fb 	ble.w	801ef30 <__ieee754_pow+0x400>
 801ed3a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801ed3e:	4598      	cmp	r8, r3
 801ed40:	4b13      	ldr	r3, [pc, #76]	; (801ed90 <__ieee754_pow+0x260>)
 801ed42:	dd0c      	ble.n	801ed5e <__ieee754_pow+0x22e>
 801ed44:	429c      	cmp	r4, r3
 801ed46:	dc0f      	bgt.n	801ed68 <__ieee754_pow+0x238>
 801ed48:	f1b9 0f00 	cmp.w	r9, #0
 801ed4c:	da0f      	bge.n	801ed6e <__ieee754_pow+0x23e>
 801ed4e:	2000      	movs	r0, #0
 801ed50:	b009      	add	sp, #36	; 0x24
 801ed52:	ecbd 8b06 	vpop	{d8-d10}
 801ed56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed5a:	f000 bcf0 	b.w	801f73e <__math_oflow>
 801ed5e:	429c      	cmp	r4, r3
 801ed60:	dbf2      	blt.n	801ed48 <__ieee754_pow+0x218>
 801ed62:	4b0a      	ldr	r3, [pc, #40]	; (801ed8c <__ieee754_pow+0x25c>)
 801ed64:	429c      	cmp	r4, r3
 801ed66:	dd19      	ble.n	801ed9c <__ieee754_pow+0x26c>
 801ed68:	f1b9 0f00 	cmp.w	r9, #0
 801ed6c:	dcef      	bgt.n	801ed4e <__ieee754_pow+0x21e>
 801ed6e:	2000      	movs	r0, #0
 801ed70:	b009      	add	sp, #36	; 0x24
 801ed72:	ecbd 8b06 	vpop	{d8-d10}
 801ed76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed7a:	f000 bcd7 	b.w	801f72c <__math_uflow>
 801ed7e:	bf00      	nop
 801ed80:	fff00000 	.word	0xfff00000
 801ed84:	7ff00000 	.word	0x7ff00000
 801ed88:	433fffff 	.word	0x433fffff
 801ed8c:	3ff00000 	.word	0x3ff00000
 801ed90:	3fefffff 	.word	0x3fefffff
 801ed94:	3fe00000 	.word	0x3fe00000
 801ed98:	41e00000 	.word	0x41e00000
 801ed9c:	4b60      	ldr	r3, [pc, #384]	; (801ef20 <__ieee754_pow+0x3f0>)
 801ed9e:	2200      	movs	r2, #0
 801eda0:	f7fa fa32 	bl	8019208 <__aeabi_dsub>
 801eda4:	a354      	add	r3, pc, #336	; (adr r3, 801eef8 <__ieee754_pow+0x3c8>)
 801eda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edaa:	4604      	mov	r4, r0
 801edac:	460d      	mov	r5, r1
 801edae:	f7fa fbe3 	bl	8019578 <__aeabi_dmul>
 801edb2:	a353      	add	r3, pc, #332	; (adr r3, 801ef00 <__ieee754_pow+0x3d0>)
 801edb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801edb8:	4606      	mov	r6, r0
 801edba:	460f      	mov	r7, r1
 801edbc:	4620      	mov	r0, r4
 801edbe:	4629      	mov	r1, r5
 801edc0:	f7fa fbda 	bl	8019578 <__aeabi_dmul>
 801edc4:	4b57      	ldr	r3, [pc, #348]	; (801ef24 <__ieee754_pow+0x3f4>)
 801edc6:	4682      	mov	sl, r0
 801edc8:	468b      	mov	fp, r1
 801edca:	2200      	movs	r2, #0
 801edcc:	4620      	mov	r0, r4
 801edce:	4629      	mov	r1, r5
 801edd0:	f7fa fbd2 	bl	8019578 <__aeabi_dmul>
 801edd4:	4602      	mov	r2, r0
 801edd6:	460b      	mov	r3, r1
 801edd8:	a14b      	add	r1, pc, #300	; (adr r1, 801ef08 <__ieee754_pow+0x3d8>)
 801edda:	e9d1 0100 	ldrd	r0, r1, [r1]
 801edde:	f7fa fa13 	bl	8019208 <__aeabi_dsub>
 801ede2:	4622      	mov	r2, r4
 801ede4:	462b      	mov	r3, r5
 801ede6:	f7fa fbc7 	bl	8019578 <__aeabi_dmul>
 801edea:	4602      	mov	r2, r0
 801edec:	460b      	mov	r3, r1
 801edee:	2000      	movs	r0, #0
 801edf0:	494d      	ldr	r1, [pc, #308]	; (801ef28 <__ieee754_pow+0x3f8>)
 801edf2:	f7fa fa09 	bl	8019208 <__aeabi_dsub>
 801edf6:	4622      	mov	r2, r4
 801edf8:	4680      	mov	r8, r0
 801edfa:	4689      	mov	r9, r1
 801edfc:	462b      	mov	r3, r5
 801edfe:	4620      	mov	r0, r4
 801ee00:	4629      	mov	r1, r5
 801ee02:	f7fa fbb9 	bl	8019578 <__aeabi_dmul>
 801ee06:	4602      	mov	r2, r0
 801ee08:	460b      	mov	r3, r1
 801ee0a:	4640      	mov	r0, r8
 801ee0c:	4649      	mov	r1, r9
 801ee0e:	f7fa fbb3 	bl	8019578 <__aeabi_dmul>
 801ee12:	a33f      	add	r3, pc, #252	; (adr r3, 801ef10 <__ieee754_pow+0x3e0>)
 801ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee18:	f7fa fbae 	bl	8019578 <__aeabi_dmul>
 801ee1c:	4602      	mov	r2, r0
 801ee1e:	460b      	mov	r3, r1
 801ee20:	4650      	mov	r0, sl
 801ee22:	4659      	mov	r1, fp
 801ee24:	f7fa f9f0 	bl	8019208 <__aeabi_dsub>
 801ee28:	4602      	mov	r2, r0
 801ee2a:	460b      	mov	r3, r1
 801ee2c:	4680      	mov	r8, r0
 801ee2e:	4689      	mov	r9, r1
 801ee30:	4630      	mov	r0, r6
 801ee32:	4639      	mov	r1, r7
 801ee34:	f7fa f9ea 	bl	801920c <__adddf3>
 801ee38:	2000      	movs	r0, #0
 801ee3a:	4632      	mov	r2, r6
 801ee3c:	463b      	mov	r3, r7
 801ee3e:	4604      	mov	r4, r0
 801ee40:	460d      	mov	r5, r1
 801ee42:	f7fa f9e1 	bl	8019208 <__aeabi_dsub>
 801ee46:	4602      	mov	r2, r0
 801ee48:	460b      	mov	r3, r1
 801ee4a:	4640      	mov	r0, r8
 801ee4c:	4649      	mov	r1, r9
 801ee4e:	f7fa f9db 	bl	8019208 <__aeabi_dsub>
 801ee52:	9b04      	ldr	r3, [sp, #16]
 801ee54:	9a06      	ldr	r2, [sp, #24]
 801ee56:	3b01      	subs	r3, #1
 801ee58:	4313      	orrs	r3, r2
 801ee5a:	4682      	mov	sl, r0
 801ee5c:	468b      	mov	fp, r1
 801ee5e:	f040 81e7 	bne.w	801f230 <__ieee754_pow+0x700>
 801ee62:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801ef18 <__ieee754_pow+0x3e8>
 801ee66:	eeb0 8a47 	vmov.f32	s16, s14
 801ee6a:	eef0 8a67 	vmov.f32	s17, s15
 801ee6e:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ee72:	2600      	movs	r6, #0
 801ee74:	4632      	mov	r2, r6
 801ee76:	463b      	mov	r3, r7
 801ee78:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ee7c:	f7fa f9c4 	bl	8019208 <__aeabi_dsub>
 801ee80:	4622      	mov	r2, r4
 801ee82:	462b      	mov	r3, r5
 801ee84:	f7fa fb78 	bl	8019578 <__aeabi_dmul>
 801ee88:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ee8c:	4680      	mov	r8, r0
 801ee8e:	4689      	mov	r9, r1
 801ee90:	4650      	mov	r0, sl
 801ee92:	4659      	mov	r1, fp
 801ee94:	f7fa fb70 	bl	8019578 <__aeabi_dmul>
 801ee98:	4602      	mov	r2, r0
 801ee9a:	460b      	mov	r3, r1
 801ee9c:	4640      	mov	r0, r8
 801ee9e:	4649      	mov	r1, r9
 801eea0:	f7fa f9b4 	bl	801920c <__adddf3>
 801eea4:	4632      	mov	r2, r6
 801eea6:	463b      	mov	r3, r7
 801eea8:	4680      	mov	r8, r0
 801eeaa:	4689      	mov	r9, r1
 801eeac:	4620      	mov	r0, r4
 801eeae:	4629      	mov	r1, r5
 801eeb0:	f7fa fb62 	bl	8019578 <__aeabi_dmul>
 801eeb4:	460b      	mov	r3, r1
 801eeb6:	4604      	mov	r4, r0
 801eeb8:	460d      	mov	r5, r1
 801eeba:	4602      	mov	r2, r0
 801eebc:	4649      	mov	r1, r9
 801eebe:	4640      	mov	r0, r8
 801eec0:	f7fa f9a4 	bl	801920c <__adddf3>
 801eec4:	4b19      	ldr	r3, [pc, #100]	; (801ef2c <__ieee754_pow+0x3fc>)
 801eec6:	4299      	cmp	r1, r3
 801eec8:	ec45 4b19 	vmov	d9, r4, r5
 801eecc:	4606      	mov	r6, r0
 801eece:	460f      	mov	r7, r1
 801eed0:	468b      	mov	fp, r1
 801eed2:	f340 82f1 	ble.w	801f4b8 <__ieee754_pow+0x988>
 801eed6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801eeda:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801eede:	4303      	orrs	r3, r0
 801eee0:	f000 81e4 	beq.w	801f2ac <__ieee754_pow+0x77c>
 801eee4:	ec51 0b18 	vmov	r0, r1, d8
 801eee8:	2200      	movs	r2, #0
 801eeea:	2300      	movs	r3, #0
 801eeec:	f7fa fdb6 	bl	8019a5c <__aeabi_dcmplt>
 801eef0:	3800      	subs	r0, #0
 801eef2:	bf18      	it	ne
 801eef4:	2001      	movne	r0, #1
 801eef6:	e72b      	b.n	801ed50 <__ieee754_pow+0x220>
 801eef8:	60000000 	.word	0x60000000
 801eefc:	3ff71547 	.word	0x3ff71547
 801ef00:	f85ddf44 	.word	0xf85ddf44
 801ef04:	3e54ae0b 	.word	0x3e54ae0b
 801ef08:	55555555 	.word	0x55555555
 801ef0c:	3fd55555 	.word	0x3fd55555
 801ef10:	652b82fe 	.word	0x652b82fe
 801ef14:	3ff71547 	.word	0x3ff71547
 801ef18:	00000000 	.word	0x00000000
 801ef1c:	bff00000 	.word	0xbff00000
 801ef20:	3ff00000 	.word	0x3ff00000
 801ef24:	3fd00000 	.word	0x3fd00000
 801ef28:	3fe00000 	.word	0x3fe00000
 801ef2c:	408fffff 	.word	0x408fffff
 801ef30:	4bd5      	ldr	r3, [pc, #852]	; (801f288 <__ieee754_pow+0x758>)
 801ef32:	402b      	ands	r3, r5
 801ef34:	2200      	movs	r2, #0
 801ef36:	b92b      	cbnz	r3, 801ef44 <__ieee754_pow+0x414>
 801ef38:	4bd4      	ldr	r3, [pc, #848]	; (801f28c <__ieee754_pow+0x75c>)
 801ef3a:	f7fa fb1d 	bl	8019578 <__aeabi_dmul>
 801ef3e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801ef42:	460c      	mov	r4, r1
 801ef44:	1523      	asrs	r3, r4, #20
 801ef46:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ef4a:	4413      	add	r3, r2
 801ef4c:	9305      	str	r3, [sp, #20]
 801ef4e:	4bd0      	ldr	r3, [pc, #832]	; (801f290 <__ieee754_pow+0x760>)
 801ef50:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ef54:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ef58:	429c      	cmp	r4, r3
 801ef5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ef5e:	dd08      	ble.n	801ef72 <__ieee754_pow+0x442>
 801ef60:	4bcc      	ldr	r3, [pc, #816]	; (801f294 <__ieee754_pow+0x764>)
 801ef62:	429c      	cmp	r4, r3
 801ef64:	f340 8162 	ble.w	801f22c <__ieee754_pow+0x6fc>
 801ef68:	9b05      	ldr	r3, [sp, #20]
 801ef6a:	3301      	adds	r3, #1
 801ef6c:	9305      	str	r3, [sp, #20]
 801ef6e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ef72:	2400      	movs	r4, #0
 801ef74:	00e3      	lsls	r3, r4, #3
 801ef76:	9307      	str	r3, [sp, #28]
 801ef78:	4bc7      	ldr	r3, [pc, #796]	; (801f298 <__ieee754_pow+0x768>)
 801ef7a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ef7e:	ed93 7b00 	vldr	d7, [r3]
 801ef82:	4629      	mov	r1, r5
 801ef84:	ec53 2b17 	vmov	r2, r3, d7
 801ef88:	eeb0 9a47 	vmov.f32	s18, s14
 801ef8c:	eef0 9a67 	vmov.f32	s19, s15
 801ef90:	4682      	mov	sl, r0
 801ef92:	f7fa f939 	bl	8019208 <__aeabi_dsub>
 801ef96:	4652      	mov	r2, sl
 801ef98:	4606      	mov	r6, r0
 801ef9a:	460f      	mov	r7, r1
 801ef9c:	462b      	mov	r3, r5
 801ef9e:	ec51 0b19 	vmov	r0, r1, d9
 801efa2:	f7fa f933 	bl	801920c <__adddf3>
 801efa6:	4602      	mov	r2, r0
 801efa8:	460b      	mov	r3, r1
 801efaa:	2000      	movs	r0, #0
 801efac:	49bb      	ldr	r1, [pc, #748]	; (801f29c <__ieee754_pow+0x76c>)
 801efae:	f7fa fc0d 	bl	80197cc <__aeabi_ddiv>
 801efb2:	ec41 0b1a 	vmov	d10, r0, r1
 801efb6:	4602      	mov	r2, r0
 801efb8:	460b      	mov	r3, r1
 801efba:	4630      	mov	r0, r6
 801efbc:	4639      	mov	r1, r7
 801efbe:	f7fa fadb 	bl	8019578 <__aeabi_dmul>
 801efc2:	2300      	movs	r3, #0
 801efc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801efc8:	9302      	str	r3, [sp, #8]
 801efca:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801efce:	46ab      	mov	fp, r5
 801efd0:	106d      	asrs	r5, r5, #1
 801efd2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801efd6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801efda:	ec41 0b18 	vmov	d8, r0, r1
 801efde:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801efe2:	2200      	movs	r2, #0
 801efe4:	4640      	mov	r0, r8
 801efe6:	4649      	mov	r1, r9
 801efe8:	4614      	mov	r4, r2
 801efea:	461d      	mov	r5, r3
 801efec:	f7fa fac4 	bl	8019578 <__aeabi_dmul>
 801eff0:	4602      	mov	r2, r0
 801eff2:	460b      	mov	r3, r1
 801eff4:	4630      	mov	r0, r6
 801eff6:	4639      	mov	r1, r7
 801eff8:	f7fa f906 	bl	8019208 <__aeabi_dsub>
 801effc:	ec53 2b19 	vmov	r2, r3, d9
 801f000:	4606      	mov	r6, r0
 801f002:	460f      	mov	r7, r1
 801f004:	4620      	mov	r0, r4
 801f006:	4629      	mov	r1, r5
 801f008:	f7fa f8fe 	bl	8019208 <__aeabi_dsub>
 801f00c:	4602      	mov	r2, r0
 801f00e:	460b      	mov	r3, r1
 801f010:	4650      	mov	r0, sl
 801f012:	4659      	mov	r1, fp
 801f014:	f7fa f8f8 	bl	8019208 <__aeabi_dsub>
 801f018:	4642      	mov	r2, r8
 801f01a:	464b      	mov	r3, r9
 801f01c:	f7fa faac 	bl	8019578 <__aeabi_dmul>
 801f020:	4602      	mov	r2, r0
 801f022:	460b      	mov	r3, r1
 801f024:	4630      	mov	r0, r6
 801f026:	4639      	mov	r1, r7
 801f028:	f7fa f8ee 	bl	8019208 <__aeabi_dsub>
 801f02c:	ec53 2b1a 	vmov	r2, r3, d10
 801f030:	f7fa faa2 	bl	8019578 <__aeabi_dmul>
 801f034:	ec53 2b18 	vmov	r2, r3, d8
 801f038:	ec41 0b19 	vmov	d9, r0, r1
 801f03c:	ec51 0b18 	vmov	r0, r1, d8
 801f040:	f7fa fa9a 	bl	8019578 <__aeabi_dmul>
 801f044:	a37c      	add	r3, pc, #496	; (adr r3, 801f238 <__ieee754_pow+0x708>)
 801f046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f04a:	4604      	mov	r4, r0
 801f04c:	460d      	mov	r5, r1
 801f04e:	f7fa fa93 	bl	8019578 <__aeabi_dmul>
 801f052:	a37b      	add	r3, pc, #492	; (adr r3, 801f240 <__ieee754_pow+0x710>)
 801f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f058:	f7fa f8d8 	bl	801920c <__adddf3>
 801f05c:	4622      	mov	r2, r4
 801f05e:	462b      	mov	r3, r5
 801f060:	f7fa fa8a 	bl	8019578 <__aeabi_dmul>
 801f064:	a378      	add	r3, pc, #480	; (adr r3, 801f248 <__ieee754_pow+0x718>)
 801f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f06a:	f7fa f8cf 	bl	801920c <__adddf3>
 801f06e:	4622      	mov	r2, r4
 801f070:	462b      	mov	r3, r5
 801f072:	f7fa fa81 	bl	8019578 <__aeabi_dmul>
 801f076:	a376      	add	r3, pc, #472	; (adr r3, 801f250 <__ieee754_pow+0x720>)
 801f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f07c:	f7fa f8c6 	bl	801920c <__adddf3>
 801f080:	4622      	mov	r2, r4
 801f082:	462b      	mov	r3, r5
 801f084:	f7fa fa78 	bl	8019578 <__aeabi_dmul>
 801f088:	a373      	add	r3, pc, #460	; (adr r3, 801f258 <__ieee754_pow+0x728>)
 801f08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f08e:	f7fa f8bd 	bl	801920c <__adddf3>
 801f092:	4622      	mov	r2, r4
 801f094:	462b      	mov	r3, r5
 801f096:	f7fa fa6f 	bl	8019578 <__aeabi_dmul>
 801f09a:	a371      	add	r3, pc, #452	; (adr r3, 801f260 <__ieee754_pow+0x730>)
 801f09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0a0:	f7fa f8b4 	bl	801920c <__adddf3>
 801f0a4:	4622      	mov	r2, r4
 801f0a6:	4606      	mov	r6, r0
 801f0a8:	460f      	mov	r7, r1
 801f0aa:	462b      	mov	r3, r5
 801f0ac:	4620      	mov	r0, r4
 801f0ae:	4629      	mov	r1, r5
 801f0b0:	f7fa fa62 	bl	8019578 <__aeabi_dmul>
 801f0b4:	4602      	mov	r2, r0
 801f0b6:	460b      	mov	r3, r1
 801f0b8:	4630      	mov	r0, r6
 801f0ba:	4639      	mov	r1, r7
 801f0bc:	f7fa fa5c 	bl	8019578 <__aeabi_dmul>
 801f0c0:	4642      	mov	r2, r8
 801f0c2:	4604      	mov	r4, r0
 801f0c4:	460d      	mov	r5, r1
 801f0c6:	464b      	mov	r3, r9
 801f0c8:	ec51 0b18 	vmov	r0, r1, d8
 801f0cc:	f7fa f89e 	bl	801920c <__adddf3>
 801f0d0:	ec53 2b19 	vmov	r2, r3, d9
 801f0d4:	f7fa fa50 	bl	8019578 <__aeabi_dmul>
 801f0d8:	4622      	mov	r2, r4
 801f0da:	462b      	mov	r3, r5
 801f0dc:	f7fa f896 	bl	801920c <__adddf3>
 801f0e0:	4642      	mov	r2, r8
 801f0e2:	4682      	mov	sl, r0
 801f0e4:	468b      	mov	fp, r1
 801f0e6:	464b      	mov	r3, r9
 801f0e8:	4640      	mov	r0, r8
 801f0ea:	4649      	mov	r1, r9
 801f0ec:	f7fa fa44 	bl	8019578 <__aeabi_dmul>
 801f0f0:	4b6b      	ldr	r3, [pc, #428]	; (801f2a0 <__ieee754_pow+0x770>)
 801f0f2:	2200      	movs	r2, #0
 801f0f4:	4606      	mov	r6, r0
 801f0f6:	460f      	mov	r7, r1
 801f0f8:	f7fa f888 	bl	801920c <__adddf3>
 801f0fc:	4652      	mov	r2, sl
 801f0fe:	465b      	mov	r3, fp
 801f100:	f7fa f884 	bl	801920c <__adddf3>
 801f104:	2000      	movs	r0, #0
 801f106:	4604      	mov	r4, r0
 801f108:	460d      	mov	r5, r1
 801f10a:	4602      	mov	r2, r0
 801f10c:	460b      	mov	r3, r1
 801f10e:	4640      	mov	r0, r8
 801f110:	4649      	mov	r1, r9
 801f112:	f7fa fa31 	bl	8019578 <__aeabi_dmul>
 801f116:	4b62      	ldr	r3, [pc, #392]	; (801f2a0 <__ieee754_pow+0x770>)
 801f118:	4680      	mov	r8, r0
 801f11a:	4689      	mov	r9, r1
 801f11c:	2200      	movs	r2, #0
 801f11e:	4620      	mov	r0, r4
 801f120:	4629      	mov	r1, r5
 801f122:	f7fa f871 	bl	8019208 <__aeabi_dsub>
 801f126:	4632      	mov	r2, r6
 801f128:	463b      	mov	r3, r7
 801f12a:	f7fa f86d 	bl	8019208 <__aeabi_dsub>
 801f12e:	4602      	mov	r2, r0
 801f130:	460b      	mov	r3, r1
 801f132:	4650      	mov	r0, sl
 801f134:	4659      	mov	r1, fp
 801f136:	f7fa f867 	bl	8019208 <__aeabi_dsub>
 801f13a:	ec53 2b18 	vmov	r2, r3, d8
 801f13e:	f7fa fa1b 	bl	8019578 <__aeabi_dmul>
 801f142:	4622      	mov	r2, r4
 801f144:	4606      	mov	r6, r0
 801f146:	460f      	mov	r7, r1
 801f148:	462b      	mov	r3, r5
 801f14a:	ec51 0b19 	vmov	r0, r1, d9
 801f14e:	f7fa fa13 	bl	8019578 <__aeabi_dmul>
 801f152:	4602      	mov	r2, r0
 801f154:	460b      	mov	r3, r1
 801f156:	4630      	mov	r0, r6
 801f158:	4639      	mov	r1, r7
 801f15a:	f7fa f857 	bl	801920c <__adddf3>
 801f15e:	4606      	mov	r6, r0
 801f160:	460f      	mov	r7, r1
 801f162:	4602      	mov	r2, r0
 801f164:	460b      	mov	r3, r1
 801f166:	4640      	mov	r0, r8
 801f168:	4649      	mov	r1, r9
 801f16a:	f7fa f84f 	bl	801920c <__adddf3>
 801f16e:	a33e      	add	r3, pc, #248	; (adr r3, 801f268 <__ieee754_pow+0x738>)
 801f170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f174:	2000      	movs	r0, #0
 801f176:	4604      	mov	r4, r0
 801f178:	460d      	mov	r5, r1
 801f17a:	f7fa f9fd 	bl	8019578 <__aeabi_dmul>
 801f17e:	4642      	mov	r2, r8
 801f180:	ec41 0b18 	vmov	d8, r0, r1
 801f184:	464b      	mov	r3, r9
 801f186:	4620      	mov	r0, r4
 801f188:	4629      	mov	r1, r5
 801f18a:	f7fa f83d 	bl	8019208 <__aeabi_dsub>
 801f18e:	4602      	mov	r2, r0
 801f190:	460b      	mov	r3, r1
 801f192:	4630      	mov	r0, r6
 801f194:	4639      	mov	r1, r7
 801f196:	f7fa f837 	bl	8019208 <__aeabi_dsub>
 801f19a:	a335      	add	r3, pc, #212	; (adr r3, 801f270 <__ieee754_pow+0x740>)
 801f19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1a0:	f7fa f9ea 	bl	8019578 <__aeabi_dmul>
 801f1a4:	a334      	add	r3, pc, #208	; (adr r3, 801f278 <__ieee754_pow+0x748>)
 801f1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1aa:	4606      	mov	r6, r0
 801f1ac:	460f      	mov	r7, r1
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	4629      	mov	r1, r5
 801f1b2:	f7fa f9e1 	bl	8019578 <__aeabi_dmul>
 801f1b6:	4602      	mov	r2, r0
 801f1b8:	460b      	mov	r3, r1
 801f1ba:	4630      	mov	r0, r6
 801f1bc:	4639      	mov	r1, r7
 801f1be:	f7fa f825 	bl	801920c <__adddf3>
 801f1c2:	9a07      	ldr	r2, [sp, #28]
 801f1c4:	4b37      	ldr	r3, [pc, #220]	; (801f2a4 <__ieee754_pow+0x774>)
 801f1c6:	4413      	add	r3, r2
 801f1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1cc:	f7fa f81e 	bl	801920c <__adddf3>
 801f1d0:	4682      	mov	sl, r0
 801f1d2:	9805      	ldr	r0, [sp, #20]
 801f1d4:	468b      	mov	fp, r1
 801f1d6:	f7fa f965 	bl	80194a4 <__aeabi_i2d>
 801f1da:	9a07      	ldr	r2, [sp, #28]
 801f1dc:	4b32      	ldr	r3, [pc, #200]	; (801f2a8 <__ieee754_pow+0x778>)
 801f1de:	4413      	add	r3, r2
 801f1e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801f1e4:	4606      	mov	r6, r0
 801f1e6:	460f      	mov	r7, r1
 801f1e8:	4652      	mov	r2, sl
 801f1ea:	465b      	mov	r3, fp
 801f1ec:	ec51 0b18 	vmov	r0, r1, d8
 801f1f0:	f7fa f80c 	bl	801920c <__adddf3>
 801f1f4:	4642      	mov	r2, r8
 801f1f6:	464b      	mov	r3, r9
 801f1f8:	f7fa f808 	bl	801920c <__adddf3>
 801f1fc:	4632      	mov	r2, r6
 801f1fe:	463b      	mov	r3, r7
 801f200:	f7fa f804 	bl	801920c <__adddf3>
 801f204:	2000      	movs	r0, #0
 801f206:	4632      	mov	r2, r6
 801f208:	463b      	mov	r3, r7
 801f20a:	4604      	mov	r4, r0
 801f20c:	460d      	mov	r5, r1
 801f20e:	f7f9 fffb 	bl	8019208 <__aeabi_dsub>
 801f212:	4642      	mov	r2, r8
 801f214:	464b      	mov	r3, r9
 801f216:	f7f9 fff7 	bl	8019208 <__aeabi_dsub>
 801f21a:	ec53 2b18 	vmov	r2, r3, d8
 801f21e:	f7f9 fff3 	bl	8019208 <__aeabi_dsub>
 801f222:	4602      	mov	r2, r0
 801f224:	460b      	mov	r3, r1
 801f226:	4650      	mov	r0, sl
 801f228:	4659      	mov	r1, fp
 801f22a:	e610      	b.n	801ee4e <__ieee754_pow+0x31e>
 801f22c:	2401      	movs	r4, #1
 801f22e:	e6a1      	b.n	801ef74 <__ieee754_pow+0x444>
 801f230:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801f280 <__ieee754_pow+0x750>
 801f234:	e617      	b.n	801ee66 <__ieee754_pow+0x336>
 801f236:	bf00      	nop
 801f238:	4a454eef 	.word	0x4a454eef
 801f23c:	3fca7e28 	.word	0x3fca7e28
 801f240:	93c9db65 	.word	0x93c9db65
 801f244:	3fcd864a 	.word	0x3fcd864a
 801f248:	a91d4101 	.word	0xa91d4101
 801f24c:	3fd17460 	.word	0x3fd17460
 801f250:	518f264d 	.word	0x518f264d
 801f254:	3fd55555 	.word	0x3fd55555
 801f258:	db6fabff 	.word	0xdb6fabff
 801f25c:	3fdb6db6 	.word	0x3fdb6db6
 801f260:	33333303 	.word	0x33333303
 801f264:	3fe33333 	.word	0x3fe33333
 801f268:	e0000000 	.word	0xe0000000
 801f26c:	3feec709 	.word	0x3feec709
 801f270:	dc3a03fd 	.word	0xdc3a03fd
 801f274:	3feec709 	.word	0x3feec709
 801f278:	145b01f5 	.word	0x145b01f5
 801f27c:	be3e2fe0 	.word	0xbe3e2fe0
 801f280:	00000000 	.word	0x00000000
 801f284:	3ff00000 	.word	0x3ff00000
 801f288:	7ff00000 	.word	0x7ff00000
 801f28c:	43400000 	.word	0x43400000
 801f290:	0003988e 	.word	0x0003988e
 801f294:	000bb679 	.word	0x000bb679
 801f298:	08052de8 	.word	0x08052de8
 801f29c:	3ff00000 	.word	0x3ff00000
 801f2a0:	40080000 	.word	0x40080000
 801f2a4:	08052e08 	.word	0x08052e08
 801f2a8:	08052df8 	.word	0x08052df8
 801f2ac:	a3b5      	add	r3, pc, #724	; (adr r3, 801f584 <__ieee754_pow+0xa54>)
 801f2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2b2:	4640      	mov	r0, r8
 801f2b4:	4649      	mov	r1, r9
 801f2b6:	f7f9 ffa9 	bl	801920c <__adddf3>
 801f2ba:	4622      	mov	r2, r4
 801f2bc:	ec41 0b1a 	vmov	d10, r0, r1
 801f2c0:	462b      	mov	r3, r5
 801f2c2:	4630      	mov	r0, r6
 801f2c4:	4639      	mov	r1, r7
 801f2c6:	f7f9 ff9f 	bl	8019208 <__aeabi_dsub>
 801f2ca:	4602      	mov	r2, r0
 801f2cc:	460b      	mov	r3, r1
 801f2ce:	ec51 0b1a 	vmov	r0, r1, d10
 801f2d2:	f7fa fbe1 	bl	8019a98 <__aeabi_dcmpgt>
 801f2d6:	2800      	cmp	r0, #0
 801f2d8:	f47f ae04 	bne.w	801eee4 <__ieee754_pow+0x3b4>
 801f2dc:	4aa4      	ldr	r2, [pc, #656]	; (801f570 <__ieee754_pow+0xa40>)
 801f2de:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	f340 8108 	ble.w	801f4f8 <__ieee754_pow+0x9c8>
 801f2e8:	151b      	asrs	r3, r3, #20
 801f2ea:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801f2ee:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801f2f2:	fa4a f303 	asr.w	r3, sl, r3
 801f2f6:	445b      	add	r3, fp
 801f2f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f2fc:	4e9d      	ldr	r6, [pc, #628]	; (801f574 <__ieee754_pow+0xa44>)
 801f2fe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801f302:	4116      	asrs	r6, r2
 801f304:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801f308:	2000      	movs	r0, #0
 801f30a:	ea23 0106 	bic.w	r1, r3, r6
 801f30e:	f1c2 0214 	rsb	r2, r2, #20
 801f312:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801f316:	fa4a fa02 	asr.w	sl, sl, r2
 801f31a:	f1bb 0f00 	cmp.w	fp, #0
 801f31e:	4602      	mov	r2, r0
 801f320:	460b      	mov	r3, r1
 801f322:	4620      	mov	r0, r4
 801f324:	4629      	mov	r1, r5
 801f326:	bfb8      	it	lt
 801f328:	f1ca 0a00 	rsblt	sl, sl, #0
 801f32c:	f7f9 ff6c 	bl	8019208 <__aeabi_dsub>
 801f330:	ec41 0b19 	vmov	d9, r0, r1
 801f334:	4642      	mov	r2, r8
 801f336:	464b      	mov	r3, r9
 801f338:	ec51 0b19 	vmov	r0, r1, d9
 801f33c:	f7f9 ff66 	bl	801920c <__adddf3>
 801f340:	a37b      	add	r3, pc, #492	; (adr r3, 801f530 <__ieee754_pow+0xa00>)
 801f342:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f346:	2000      	movs	r0, #0
 801f348:	4604      	mov	r4, r0
 801f34a:	460d      	mov	r5, r1
 801f34c:	f7fa f914 	bl	8019578 <__aeabi_dmul>
 801f350:	ec53 2b19 	vmov	r2, r3, d9
 801f354:	4606      	mov	r6, r0
 801f356:	460f      	mov	r7, r1
 801f358:	4620      	mov	r0, r4
 801f35a:	4629      	mov	r1, r5
 801f35c:	f7f9 ff54 	bl	8019208 <__aeabi_dsub>
 801f360:	4602      	mov	r2, r0
 801f362:	460b      	mov	r3, r1
 801f364:	4640      	mov	r0, r8
 801f366:	4649      	mov	r1, r9
 801f368:	f7f9 ff4e 	bl	8019208 <__aeabi_dsub>
 801f36c:	a372      	add	r3, pc, #456	; (adr r3, 801f538 <__ieee754_pow+0xa08>)
 801f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f372:	f7fa f901 	bl	8019578 <__aeabi_dmul>
 801f376:	a372      	add	r3, pc, #456	; (adr r3, 801f540 <__ieee754_pow+0xa10>)
 801f378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f37c:	4680      	mov	r8, r0
 801f37e:	4689      	mov	r9, r1
 801f380:	4620      	mov	r0, r4
 801f382:	4629      	mov	r1, r5
 801f384:	f7fa f8f8 	bl	8019578 <__aeabi_dmul>
 801f388:	4602      	mov	r2, r0
 801f38a:	460b      	mov	r3, r1
 801f38c:	4640      	mov	r0, r8
 801f38e:	4649      	mov	r1, r9
 801f390:	f7f9 ff3c 	bl	801920c <__adddf3>
 801f394:	4604      	mov	r4, r0
 801f396:	460d      	mov	r5, r1
 801f398:	4602      	mov	r2, r0
 801f39a:	460b      	mov	r3, r1
 801f39c:	4630      	mov	r0, r6
 801f39e:	4639      	mov	r1, r7
 801f3a0:	f7f9 ff34 	bl	801920c <__adddf3>
 801f3a4:	4632      	mov	r2, r6
 801f3a6:	463b      	mov	r3, r7
 801f3a8:	4680      	mov	r8, r0
 801f3aa:	4689      	mov	r9, r1
 801f3ac:	f7f9 ff2c 	bl	8019208 <__aeabi_dsub>
 801f3b0:	4602      	mov	r2, r0
 801f3b2:	460b      	mov	r3, r1
 801f3b4:	4620      	mov	r0, r4
 801f3b6:	4629      	mov	r1, r5
 801f3b8:	f7f9 ff26 	bl	8019208 <__aeabi_dsub>
 801f3bc:	4642      	mov	r2, r8
 801f3be:	4606      	mov	r6, r0
 801f3c0:	460f      	mov	r7, r1
 801f3c2:	464b      	mov	r3, r9
 801f3c4:	4640      	mov	r0, r8
 801f3c6:	4649      	mov	r1, r9
 801f3c8:	f7fa f8d6 	bl	8019578 <__aeabi_dmul>
 801f3cc:	a35e      	add	r3, pc, #376	; (adr r3, 801f548 <__ieee754_pow+0xa18>)
 801f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3d2:	4604      	mov	r4, r0
 801f3d4:	460d      	mov	r5, r1
 801f3d6:	f7fa f8cf 	bl	8019578 <__aeabi_dmul>
 801f3da:	a35d      	add	r3, pc, #372	; (adr r3, 801f550 <__ieee754_pow+0xa20>)
 801f3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3e0:	f7f9 ff12 	bl	8019208 <__aeabi_dsub>
 801f3e4:	4622      	mov	r2, r4
 801f3e6:	462b      	mov	r3, r5
 801f3e8:	f7fa f8c6 	bl	8019578 <__aeabi_dmul>
 801f3ec:	a35a      	add	r3, pc, #360	; (adr r3, 801f558 <__ieee754_pow+0xa28>)
 801f3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f3f2:	f7f9 ff0b 	bl	801920c <__adddf3>
 801f3f6:	4622      	mov	r2, r4
 801f3f8:	462b      	mov	r3, r5
 801f3fa:	f7fa f8bd 	bl	8019578 <__aeabi_dmul>
 801f3fe:	a358      	add	r3, pc, #352	; (adr r3, 801f560 <__ieee754_pow+0xa30>)
 801f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f404:	f7f9 ff00 	bl	8019208 <__aeabi_dsub>
 801f408:	4622      	mov	r2, r4
 801f40a:	462b      	mov	r3, r5
 801f40c:	f7fa f8b4 	bl	8019578 <__aeabi_dmul>
 801f410:	a355      	add	r3, pc, #340	; (adr r3, 801f568 <__ieee754_pow+0xa38>)
 801f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f416:	f7f9 fef9 	bl	801920c <__adddf3>
 801f41a:	4622      	mov	r2, r4
 801f41c:	462b      	mov	r3, r5
 801f41e:	f7fa f8ab 	bl	8019578 <__aeabi_dmul>
 801f422:	4602      	mov	r2, r0
 801f424:	460b      	mov	r3, r1
 801f426:	4640      	mov	r0, r8
 801f428:	4649      	mov	r1, r9
 801f42a:	f7f9 feed 	bl	8019208 <__aeabi_dsub>
 801f42e:	4604      	mov	r4, r0
 801f430:	460d      	mov	r5, r1
 801f432:	4602      	mov	r2, r0
 801f434:	460b      	mov	r3, r1
 801f436:	4640      	mov	r0, r8
 801f438:	4649      	mov	r1, r9
 801f43a:	f7fa f89d 	bl	8019578 <__aeabi_dmul>
 801f43e:	2200      	movs	r2, #0
 801f440:	ec41 0b19 	vmov	d9, r0, r1
 801f444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801f448:	4620      	mov	r0, r4
 801f44a:	4629      	mov	r1, r5
 801f44c:	f7f9 fedc 	bl	8019208 <__aeabi_dsub>
 801f450:	4602      	mov	r2, r0
 801f452:	460b      	mov	r3, r1
 801f454:	ec51 0b19 	vmov	r0, r1, d9
 801f458:	f7fa f9b8 	bl	80197cc <__aeabi_ddiv>
 801f45c:	4632      	mov	r2, r6
 801f45e:	4604      	mov	r4, r0
 801f460:	460d      	mov	r5, r1
 801f462:	463b      	mov	r3, r7
 801f464:	4640      	mov	r0, r8
 801f466:	4649      	mov	r1, r9
 801f468:	f7fa f886 	bl	8019578 <__aeabi_dmul>
 801f46c:	4632      	mov	r2, r6
 801f46e:	463b      	mov	r3, r7
 801f470:	f7f9 fecc 	bl	801920c <__adddf3>
 801f474:	4602      	mov	r2, r0
 801f476:	460b      	mov	r3, r1
 801f478:	4620      	mov	r0, r4
 801f47a:	4629      	mov	r1, r5
 801f47c:	f7f9 fec4 	bl	8019208 <__aeabi_dsub>
 801f480:	4642      	mov	r2, r8
 801f482:	464b      	mov	r3, r9
 801f484:	f7f9 fec0 	bl	8019208 <__aeabi_dsub>
 801f488:	460b      	mov	r3, r1
 801f48a:	4602      	mov	r2, r0
 801f48c:	493a      	ldr	r1, [pc, #232]	; (801f578 <__ieee754_pow+0xa48>)
 801f48e:	2000      	movs	r0, #0
 801f490:	f7f9 feba 	bl	8019208 <__aeabi_dsub>
 801f494:	ec41 0b10 	vmov	d0, r0, r1
 801f498:	ee10 3a90 	vmov	r3, s1
 801f49c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801f4a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f4a4:	da2b      	bge.n	801f4fe <__ieee754_pow+0x9ce>
 801f4a6:	4650      	mov	r0, sl
 801f4a8:	f000 f966 	bl	801f778 <scalbn>
 801f4ac:	ec51 0b10 	vmov	r0, r1, d0
 801f4b0:	ec53 2b18 	vmov	r2, r3, d8
 801f4b4:	f7ff bbed 	b.w	801ec92 <__ieee754_pow+0x162>
 801f4b8:	4b30      	ldr	r3, [pc, #192]	; (801f57c <__ieee754_pow+0xa4c>)
 801f4ba:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801f4be:	429e      	cmp	r6, r3
 801f4c0:	f77f af0c 	ble.w	801f2dc <__ieee754_pow+0x7ac>
 801f4c4:	4b2e      	ldr	r3, [pc, #184]	; (801f580 <__ieee754_pow+0xa50>)
 801f4c6:	440b      	add	r3, r1
 801f4c8:	4303      	orrs	r3, r0
 801f4ca:	d009      	beq.n	801f4e0 <__ieee754_pow+0x9b0>
 801f4cc:	ec51 0b18 	vmov	r0, r1, d8
 801f4d0:	2200      	movs	r2, #0
 801f4d2:	2300      	movs	r3, #0
 801f4d4:	f7fa fac2 	bl	8019a5c <__aeabi_dcmplt>
 801f4d8:	3800      	subs	r0, #0
 801f4da:	bf18      	it	ne
 801f4dc:	2001      	movne	r0, #1
 801f4de:	e447      	b.n	801ed70 <__ieee754_pow+0x240>
 801f4e0:	4622      	mov	r2, r4
 801f4e2:	462b      	mov	r3, r5
 801f4e4:	f7f9 fe90 	bl	8019208 <__aeabi_dsub>
 801f4e8:	4642      	mov	r2, r8
 801f4ea:	464b      	mov	r3, r9
 801f4ec:	f7fa faca 	bl	8019a84 <__aeabi_dcmpge>
 801f4f0:	2800      	cmp	r0, #0
 801f4f2:	f43f aef3 	beq.w	801f2dc <__ieee754_pow+0x7ac>
 801f4f6:	e7e9      	b.n	801f4cc <__ieee754_pow+0x99c>
 801f4f8:	f04f 0a00 	mov.w	sl, #0
 801f4fc:	e71a      	b.n	801f334 <__ieee754_pow+0x804>
 801f4fe:	ec51 0b10 	vmov	r0, r1, d0
 801f502:	4619      	mov	r1, r3
 801f504:	e7d4      	b.n	801f4b0 <__ieee754_pow+0x980>
 801f506:	491c      	ldr	r1, [pc, #112]	; (801f578 <__ieee754_pow+0xa48>)
 801f508:	2000      	movs	r0, #0
 801f50a:	f7ff bb30 	b.w	801eb6e <__ieee754_pow+0x3e>
 801f50e:	2000      	movs	r0, #0
 801f510:	2100      	movs	r1, #0
 801f512:	f7ff bb2c 	b.w	801eb6e <__ieee754_pow+0x3e>
 801f516:	4630      	mov	r0, r6
 801f518:	4639      	mov	r1, r7
 801f51a:	f7ff bb28 	b.w	801eb6e <__ieee754_pow+0x3e>
 801f51e:	9204      	str	r2, [sp, #16]
 801f520:	f7ff bb7a 	b.w	801ec18 <__ieee754_pow+0xe8>
 801f524:	2300      	movs	r3, #0
 801f526:	f7ff bb64 	b.w	801ebf2 <__ieee754_pow+0xc2>
 801f52a:	bf00      	nop
 801f52c:	f3af 8000 	nop.w
 801f530:	00000000 	.word	0x00000000
 801f534:	3fe62e43 	.word	0x3fe62e43
 801f538:	fefa39ef 	.word	0xfefa39ef
 801f53c:	3fe62e42 	.word	0x3fe62e42
 801f540:	0ca86c39 	.word	0x0ca86c39
 801f544:	be205c61 	.word	0xbe205c61
 801f548:	72bea4d0 	.word	0x72bea4d0
 801f54c:	3e663769 	.word	0x3e663769
 801f550:	c5d26bf1 	.word	0xc5d26bf1
 801f554:	3ebbbd41 	.word	0x3ebbbd41
 801f558:	af25de2c 	.word	0xaf25de2c
 801f55c:	3f11566a 	.word	0x3f11566a
 801f560:	16bebd93 	.word	0x16bebd93
 801f564:	3f66c16c 	.word	0x3f66c16c
 801f568:	5555553e 	.word	0x5555553e
 801f56c:	3fc55555 	.word	0x3fc55555
 801f570:	3fe00000 	.word	0x3fe00000
 801f574:	000fffff 	.word	0x000fffff
 801f578:	3ff00000 	.word	0x3ff00000
 801f57c:	4090cbff 	.word	0x4090cbff
 801f580:	3f6f3400 	.word	0x3f6f3400
 801f584:	652b82fe 	.word	0x652b82fe
 801f588:	3c971547 	.word	0x3c971547

0801f58c <__ieee754_sqrt>:
 801f58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f590:	ec55 4b10 	vmov	r4, r5, d0
 801f594:	4e55      	ldr	r6, [pc, #340]	; (801f6ec <__ieee754_sqrt+0x160>)
 801f596:	43ae      	bics	r6, r5
 801f598:	ee10 0a10 	vmov	r0, s0
 801f59c:	ee10 3a10 	vmov	r3, s0
 801f5a0:	462a      	mov	r2, r5
 801f5a2:	4629      	mov	r1, r5
 801f5a4:	d110      	bne.n	801f5c8 <__ieee754_sqrt+0x3c>
 801f5a6:	ee10 2a10 	vmov	r2, s0
 801f5aa:	462b      	mov	r3, r5
 801f5ac:	f7f9 ffe4 	bl	8019578 <__aeabi_dmul>
 801f5b0:	4602      	mov	r2, r0
 801f5b2:	460b      	mov	r3, r1
 801f5b4:	4620      	mov	r0, r4
 801f5b6:	4629      	mov	r1, r5
 801f5b8:	f7f9 fe28 	bl	801920c <__adddf3>
 801f5bc:	4604      	mov	r4, r0
 801f5be:	460d      	mov	r5, r1
 801f5c0:	ec45 4b10 	vmov	d0, r4, r5
 801f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5c8:	2d00      	cmp	r5, #0
 801f5ca:	dc10      	bgt.n	801f5ee <__ieee754_sqrt+0x62>
 801f5cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801f5d0:	4330      	orrs	r0, r6
 801f5d2:	d0f5      	beq.n	801f5c0 <__ieee754_sqrt+0x34>
 801f5d4:	b15d      	cbz	r5, 801f5ee <__ieee754_sqrt+0x62>
 801f5d6:	ee10 2a10 	vmov	r2, s0
 801f5da:	462b      	mov	r3, r5
 801f5dc:	ee10 0a10 	vmov	r0, s0
 801f5e0:	f7f9 fe12 	bl	8019208 <__aeabi_dsub>
 801f5e4:	4602      	mov	r2, r0
 801f5e6:	460b      	mov	r3, r1
 801f5e8:	f7fa f8f0 	bl	80197cc <__aeabi_ddiv>
 801f5ec:	e7e6      	b.n	801f5bc <__ieee754_sqrt+0x30>
 801f5ee:	1512      	asrs	r2, r2, #20
 801f5f0:	d074      	beq.n	801f6dc <__ieee754_sqrt+0x150>
 801f5f2:	07d4      	lsls	r4, r2, #31
 801f5f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801f5f8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801f5fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801f600:	bf5e      	ittt	pl
 801f602:	0fda      	lsrpl	r2, r3, #31
 801f604:	005b      	lslpl	r3, r3, #1
 801f606:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801f60a:	2400      	movs	r4, #0
 801f60c:	0fda      	lsrs	r2, r3, #31
 801f60e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801f612:	107f      	asrs	r7, r7, #1
 801f614:	005b      	lsls	r3, r3, #1
 801f616:	2516      	movs	r5, #22
 801f618:	4620      	mov	r0, r4
 801f61a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801f61e:	1886      	adds	r6, r0, r2
 801f620:	428e      	cmp	r6, r1
 801f622:	bfde      	ittt	le
 801f624:	1b89      	suble	r1, r1, r6
 801f626:	18b0      	addle	r0, r6, r2
 801f628:	18a4      	addle	r4, r4, r2
 801f62a:	0049      	lsls	r1, r1, #1
 801f62c:	3d01      	subs	r5, #1
 801f62e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801f632:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801f636:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f63a:	d1f0      	bne.n	801f61e <__ieee754_sqrt+0x92>
 801f63c:	462a      	mov	r2, r5
 801f63e:	f04f 0e20 	mov.w	lr, #32
 801f642:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801f646:	4281      	cmp	r1, r0
 801f648:	eb06 0c05 	add.w	ip, r6, r5
 801f64c:	dc02      	bgt.n	801f654 <__ieee754_sqrt+0xc8>
 801f64e:	d113      	bne.n	801f678 <__ieee754_sqrt+0xec>
 801f650:	459c      	cmp	ip, r3
 801f652:	d811      	bhi.n	801f678 <__ieee754_sqrt+0xec>
 801f654:	f1bc 0f00 	cmp.w	ip, #0
 801f658:	eb0c 0506 	add.w	r5, ip, r6
 801f65c:	da43      	bge.n	801f6e6 <__ieee754_sqrt+0x15a>
 801f65e:	2d00      	cmp	r5, #0
 801f660:	db41      	blt.n	801f6e6 <__ieee754_sqrt+0x15a>
 801f662:	f100 0801 	add.w	r8, r0, #1
 801f666:	1a09      	subs	r1, r1, r0
 801f668:	459c      	cmp	ip, r3
 801f66a:	bf88      	it	hi
 801f66c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801f670:	eba3 030c 	sub.w	r3, r3, ip
 801f674:	4432      	add	r2, r6
 801f676:	4640      	mov	r0, r8
 801f678:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801f67c:	f1be 0e01 	subs.w	lr, lr, #1
 801f680:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801f684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801f688:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801f68c:	d1db      	bne.n	801f646 <__ieee754_sqrt+0xba>
 801f68e:	430b      	orrs	r3, r1
 801f690:	d006      	beq.n	801f6a0 <__ieee754_sqrt+0x114>
 801f692:	1c50      	adds	r0, r2, #1
 801f694:	bf13      	iteet	ne
 801f696:	3201      	addne	r2, #1
 801f698:	3401      	addeq	r4, #1
 801f69a:	4672      	moveq	r2, lr
 801f69c:	f022 0201 	bicne.w	r2, r2, #1
 801f6a0:	1063      	asrs	r3, r4, #1
 801f6a2:	0852      	lsrs	r2, r2, #1
 801f6a4:	07e1      	lsls	r1, r4, #31
 801f6a6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801f6aa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801f6ae:	bf48      	it	mi
 801f6b0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801f6b4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801f6b8:	4614      	mov	r4, r2
 801f6ba:	e781      	b.n	801f5c0 <__ieee754_sqrt+0x34>
 801f6bc:	0ad9      	lsrs	r1, r3, #11
 801f6be:	3815      	subs	r0, #21
 801f6c0:	055b      	lsls	r3, r3, #21
 801f6c2:	2900      	cmp	r1, #0
 801f6c4:	d0fa      	beq.n	801f6bc <__ieee754_sqrt+0x130>
 801f6c6:	02cd      	lsls	r5, r1, #11
 801f6c8:	d50a      	bpl.n	801f6e0 <__ieee754_sqrt+0x154>
 801f6ca:	f1c2 0420 	rsb	r4, r2, #32
 801f6ce:	fa23 f404 	lsr.w	r4, r3, r4
 801f6d2:	1e55      	subs	r5, r2, #1
 801f6d4:	4093      	lsls	r3, r2
 801f6d6:	4321      	orrs	r1, r4
 801f6d8:	1b42      	subs	r2, r0, r5
 801f6da:	e78a      	b.n	801f5f2 <__ieee754_sqrt+0x66>
 801f6dc:	4610      	mov	r0, r2
 801f6de:	e7f0      	b.n	801f6c2 <__ieee754_sqrt+0x136>
 801f6e0:	0049      	lsls	r1, r1, #1
 801f6e2:	3201      	adds	r2, #1
 801f6e4:	e7ef      	b.n	801f6c6 <__ieee754_sqrt+0x13a>
 801f6e6:	4680      	mov	r8, r0
 801f6e8:	e7bd      	b.n	801f666 <__ieee754_sqrt+0xda>
 801f6ea:	bf00      	nop
 801f6ec:	7ff00000 	.word	0x7ff00000

0801f6f0 <with_errno>:
 801f6f0:	b570      	push	{r4, r5, r6, lr}
 801f6f2:	4604      	mov	r4, r0
 801f6f4:	460d      	mov	r5, r1
 801f6f6:	4616      	mov	r6, r2
 801f6f8:	f7fa fc6c 	bl	8019fd4 <__errno>
 801f6fc:	4629      	mov	r1, r5
 801f6fe:	6006      	str	r6, [r0, #0]
 801f700:	4620      	mov	r0, r4
 801f702:	bd70      	pop	{r4, r5, r6, pc}

0801f704 <xflow>:
 801f704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f706:	4614      	mov	r4, r2
 801f708:	461d      	mov	r5, r3
 801f70a:	b108      	cbz	r0, 801f710 <xflow+0xc>
 801f70c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f710:	e9cd 2300 	strd	r2, r3, [sp]
 801f714:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f718:	4620      	mov	r0, r4
 801f71a:	4629      	mov	r1, r5
 801f71c:	f7f9 ff2c 	bl	8019578 <__aeabi_dmul>
 801f720:	2222      	movs	r2, #34	; 0x22
 801f722:	b003      	add	sp, #12
 801f724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f728:	f7ff bfe2 	b.w	801f6f0 <with_errno>

0801f72c <__math_uflow>:
 801f72c:	b508      	push	{r3, lr}
 801f72e:	2200      	movs	r2, #0
 801f730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801f734:	f7ff ffe6 	bl	801f704 <xflow>
 801f738:	ec41 0b10 	vmov	d0, r0, r1
 801f73c:	bd08      	pop	{r3, pc}

0801f73e <__math_oflow>:
 801f73e:	b508      	push	{r3, lr}
 801f740:	2200      	movs	r2, #0
 801f742:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801f746:	f7ff ffdd 	bl	801f704 <xflow>
 801f74a:	ec41 0b10 	vmov	d0, r0, r1
 801f74e:	bd08      	pop	{r3, pc}

0801f750 <fabs>:
 801f750:	ec51 0b10 	vmov	r0, r1, d0
 801f754:	ee10 2a10 	vmov	r2, s0
 801f758:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f75c:	ec43 2b10 	vmov	d0, r2, r3
 801f760:	4770      	bx	lr

0801f762 <finite>:
 801f762:	b082      	sub	sp, #8
 801f764:	ed8d 0b00 	vstr	d0, [sp]
 801f768:	9801      	ldr	r0, [sp, #4]
 801f76a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801f76e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f772:	0fc0      	lsrs	r0, r0, #31
 801f774:	b002      	add	sp, #8
 801f776:	4770      	bx	lr

0801f778 <scalbn>:
 801f778:	b570      	push	{r4, r5, r6, lr}
 801f77a:	ec55 4b10 	vmov	r4, r5, d0
 801f77e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801f782:	4606      	mov	r6, r0
 801f784:	462b      	mov	r3, r5
 801f786:	b99a      	cbnz	r2, 801f7b0 <scalbn+0x38>
 801f788:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801f78c:	4323      	orrs	r3, r4
 801f78e:	d036      	beq.n	801f7fe <scalbn+0x86>
 801f790:	4b39      	ldr	r3, [pc, #228]	; (801f878 <scalbn+0x100>)
 801f792:	4629      	mov	r1, r5
 801f794:	ee10 0a10 	vmov	r0, s0
 801f798:	2200      	movs	r2, #0
 801f79a:	f7f9 feed 	bl	8019578 <__aeabi_dmul>
 801f79e:	4b37      	ldr	r3, [pc, #220]	; (801f87c <scalbn+0x104>)
 801f7a0:	429e      	cmp	r6, r3
 801f7a2:	4604      	mov	r4, r0
 801f7a4:	460d      	mov	r5, r1
 801f7a6:	da10      	bge.n	801f7ca <scalbn+0x52>
 801f7a8:	a32b      	add	r3, pc, #172	; (adr r3, 801f858 <scalbn+0xe0>)
 801f7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ae:	e03a      	b.n	801f826 <scalbn+0xae>
 801f7b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f7b4:	428a      	cmp	r2, r1
 801f7b6:	d10c      	bne.n	801f7d2 <scalbn+0x5a>
 801f7b8:	ee10 2a10 	vmov	r2, s0
 801f7bc:	4620      	mov	r0, r4
 801f7be:	4629      	mov	r1, r5
 801f7c0:	f7f9 fd24 	bl	801920c <__adddf3>
 801f7c4:	4604      	mov	r4, r0
 801f7c6:	460d      	mov	r5, r1
 801f7c8:	e019      	b.n	801f7fe <scalbn+0x86>
 801f7ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f7ce:	460b      	mov	r3, r1
 801f7d0:	3a36      	subs	r2, #54	; 0x36
 801f7d2:	4432      	add	r2, r6
 801f7d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f7d8:	428a      	cmp	r2, r1
 801f7da:	dd08      	ble.n	801f7ee <scalbn+0x76>
 801f7dc:	2d00      	cmp	r5, #0
 801f7de:	a120      	add	r1, pc, #128	; (adr r1, 801f860 <scalbn+0xe8>)
 801f7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7e4:	da1c      	bge.n	801f820 <scalbn+0xa8>
 801f7e6:	a120      	add	r1, pc, #128	; (adr r1, 801f868 <scalbn+0xf0>)
 801f7e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f7ec:	e018      	b.n	801f820 <scalbn+0xa8>
 801f7ee:	2a00      	cmp	r2, #0
 801f7f0:	dd08      	ble.n	801f804 <scalbn+0x8c>
 801f7f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f7f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f7fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f7fe:	ec45 4b10 	vmov	d0, r4, r5
 801f802:	bd70      	pop	{r4, r5, r6, pc}
 801f804:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f808:	da19      	bge.n	801f83e <scalbn+0xc6>
 801f80a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f80e:	429e      	cmp	r6, r3
 801f810:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801f814:	dd0a      	ble.n	801f82c <scalbn+0xb4>
 801f816:	a112      	add	r1, pc, #72	; (adr r1, 801f860 <scalbn+0xe8>)
 801f818:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d1e2      	bne.n	801f7e6 <scalbn+0x6e>
 801f820:	a30f      	add	r3, pc, #60	; (adr r3, 801f860 <scalbn+0xe8>)
 801f822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f826:	f7f9 fea7 	bl	8019578 <__aeabi_dmul>
 801f82a:	e7cb      	b.n	801f7c4 <scalbn+0x4c>
 801f82c:	a10a      	add	r1, pc, #40	; (adr r1, 801f858 <scalbn+0xe0>)
 801f82e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f832:	2b00      	cmp	r3, #0
 801f834:	d0b8      	beq.n	801f7a8 <scalbn+0x30>
 801f836:	a10e      	add	r1, pc, #56	; (adr r1, 801f870 <scalbn+0xf8>)
 801f838:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f83c:	e7b4      	b.n	801f7a8 <scalbn+0x30>
 801f83e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f842:	3236      	adds	r2, #54	; 0x36
 801f844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f848:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f84c:	4620      	mov	r0, r4
 801f84e:	4b0c      	ldr	r3, [pc, #48]	; (801f880 <scalbn+0x108>)
 801f850:	2200      	movs	r2, #0
 801f852:	e7e8      	b.n	801f826 <scalbn+0xae>
 801f854:	f3af 8000 	nop.w
 801f858:	c2f8f359 	.word	0xc2f8f359
 801f85c:	01a56e1f 	.word	0x01a56e1f
 801f860:	8800759c 	.word	0x8800759c
 801f864:	7e37e43c 	.word	0x7e37e43c
 801f868:	8800759c 	.word	0x8800759c
 801f86c:	fe37e43c 	.word	0xfe37e43c
 801f870:	c2f8f359 	.word	0xc2f8f359
 801f874:	81a56e1f 	.word	0x81a56e1f
 801f878:	43500000 	.word	0x43500000
 801f87c:	ffff3cb0 	.word	0xffff3cb0
 801f880:	3c900000 	.word	0x3c900000

0801f884 <_init>:
 801f884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f886:	bf00      	nop
 801f888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f88a:	bc08      	pop	{r3}
 801f88c:	469e      	mov	lr, r3
 801f88e:	4770      	bx	lr

0801f890 <_fini>:
 801f890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f892:	bf00      	nop
 801f894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f896:	bc08      	pop	{r3}
 801f898:	469e      	mov	lr, r3
 801f89a:	4770      	bx	lr
