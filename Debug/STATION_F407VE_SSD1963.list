
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e86c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000333d8  0801ea00  0801ea00  0002ea00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08051dd8  08051dd8  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08051dd8  08051dd8  00061dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08051de0  08051de0  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08051de0  08051de0  00061de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08051de4  08051de4  00061de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08051de8  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          0000066c  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b7d7  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000321a  00000000  00000000  0008ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  0008ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  0008eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196ae  00000000  00000000  0008ed20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf8e4  00000000  00000000  000a83ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b34  00000000  00000000  00177d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024b72  00000000  00000000  0017e838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e9e4 	.word	0x0801e9e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801e9e4 	.word	0x0801e9e4

080001d0 <AT24XX_IsConnected>:

#if (FREERTOS_IS_ENABLE == 1)
#include "cmsis_os.h"
#endif

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
    if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, 100) == HAL_OK)
 80001d4:	2364      	movs	r3, #100	; 0x64
 80001d6:	2201      	movs	r2, #1
 80001d8:	21ae      	movs	r1, #174	; 0xae
 80001da:	4806      	ldr	r0, [pc, #24]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001dc:	f00d f896 	bl	800d30c <HAL_I2C_IsDeviceReady>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d101      	bne.n	80001ea <AT24XX_IsConnected+0x1a>
        return true;
 80001e6:	2301      	movs	r3, #1
 80001e8:	e001      	b.n	80001ee <AT24XX_IsConnected+0x1e>
    else
        return false;
 80001ea:	2300      	movs	r3, #0
 80001ec:	bf00      	nop
}
 80001ee:	4618      	mov	r0, r3
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	200002bc 	.word	0x200002bc

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
    if(size_of_data > 16)
        return false;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
    if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
        return false;
 800020c:	2300      	movs	r3, #0
 800020e:	e016      	b.n	800023e <AT24XX_Save+0x46>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
    if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, 100) == HAL_OK)
#else
    if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	2164      	movs	r1, #100	; 0x64
 8000218:	9102      	str	r1, [sp, #8]
 800021a:	9301      	str	r3, [sp, #4]
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2310      	movs	r3, #16
 8000222:	21ae      	movs	r1, #174	; 0xae
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000226:	f00c f8eb 	bl	800c400 <HAL_I2C_Mem_Write>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d104      	bne.n	800023a <AT24XX_Save+0x42>
#endif
    {
#if (FREERTOS_IS_ENABLE == 1)
        osDelay(5);
#else
        HAL_Delay(5);
 8000230:	2005      	movs	r0, #5
 8000232:	f005 ffad 	bl	8006190 <HAL_Delay>
#endif
        return true;
 8000236:	2301      	movs	r3, #1
 8000238:	e001      	b.n	800023e <AT24XX_Save+0x46>
    } else
        return false;
 800023a:	2300      	movs	r3, #0
 800023c:	bf00      	nop
}
 800023e:	4618      	mov	r0, r3
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	200002bc 	.word	0x200002bc

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
    if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, 100) == HAL_OK)
#else
    if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data,
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	2164      	movs	r1, #100	; 0x64
 8000262:	9102      	str	r1, [sp, #8]
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2310      	movs	r3, #16
 800026c:	21ae      	movs	r1, #174	; 0xae
 800026e:	4807      	ldr	r0, [pc, #28]	; (800028c <AT24XX_Load+0x40>)
 8000270:	f00c f9c0 	bl	800c5f4 <HAL_I2C_Mem_Read>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d101      	bne.n	800027e <AT24XX_Load+0x32>
                         size_of_data, 100) == HAL_OK)
#endif
    {
        return true;
 800027a:	2301      	movs	r3, #1
 800027c:	e001      	b.n	8000282 <AT24XX_Load+0x36>
    } else
        return false;
 800027e:	2300      	movs	r3, #0
 8000280:	bf00      	nop
}
 8000282:	4618      	mov	r0, r3
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200002bc 	.word	0x200002bc

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
    uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
    AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
    return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
    uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
    AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 fafc 	bl	801892c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 f813 	bl	801836c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d fbab 	bl	801dab0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 f9b9 	bl	80186d8 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f018 fcab 	bl	8018cc8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 f946 	bl	8018628 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 f92d 	bl	8018604 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d fbfb 	bl	801dbb0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00a fc81 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00a fd74 	bl	800af04 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	200002bc 	.word	0x200002bc
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a fc09 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00a fcfc 	bl	800af04 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	200002bc 	.word	0x200002bc
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a fb6c 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00a fc60 	bl	800af04 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fa88 	bl	800ad0a <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fa7c 	bl	800ad0a <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fa70 	bl	800ad0a <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fa66 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a fb5b 	bl	800af04 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fa38 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a fb2d 	bl	800af04 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a f9d4 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fac9 	bl	800af04 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a f9c1 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fab5 	bl	800af04 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200002bc 	.word	0x200002bc
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f017 fe1c 	bl	80186d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f017 fc5b 	bl	801836c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f017 ff35 	bl	801892c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d f86b 	bl	801dbb0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f017 fdf8 	bl	80186d8 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f017 fdf0 	bl	80186d8 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f017 ff11 	bl	801892c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 fc24 	bl	8018368 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f017 fdd3 	bl	80186d8 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 fc17 	bl	801836c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f017 fd98 	bl	80186d8 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 fbd7 	bl	801836c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f017 feb1 	bl	801892c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f017 fd7f 	bl	80186d8 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f017 fd76 	bl	80186d8 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01c ffd6 	bl	801dbb0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f017 fd63 	bl	80186d8 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 fba2 	bl	801836c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f017 fe7c 	bl	801892c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	2364      	movs	r3, #100	; 0x64
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	21d0      	movs	r1, #208	; 0xd0
 8000d0a:	4827      	ldr	r0, [pc, #156]	; (8000da8 <DS3231_Update+0xb2>)
 8000d0c:	f009 fffd 	bl	800ad0a <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d10:	2364      	movs	r3, #100	; 0x64
 8000d12:	9300      	str	r3, [sp, #0]
 8000d14:	2313      	movs	r3, #19
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <DS3231_Update+0xb6>)
 8000d18:	21d0      	movs	r1, #208	; 0xd0
 8000d1a:	4823      	ldr	r0, [pc, #140]	; (8000da8 <DS3231_Update+0xb2>)
 8000d1c:	f00a f8f2 	bl	800af04 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <DS3231_Update+0xb6>)
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d28:	4b20      	ldr	r3, [pc, #128]	; (8000dac <DS3231_Update+0xb6>)
 8000d2a:	785a      	ldrb	r2, [r3, #1]
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d30:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <DS3231_Update+0xb6>)
 8000d32:	789a      	ldrb	r2, [r3, #2]
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <DS3231_Update+0xb6>)
 8000d3a:	78da      	ldrb	r2, [r3, #3]
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d40:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <DS3231_Update+0xb6>)
 8000d42:	791a      	ldrb	r2, [r3, #4]
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <DS3231_Update+0xb6>)
 8000d4a:	795a      	ldrb	r2, [r3, #5]
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <DS3231_Update+0xb6>)
 8000d52:	799a      	ldrb	r2, [r3, #6]
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <DS3231_Update+0xb6>)
 8000d5a:	79da      	ldrb	r2, [r3, #7]
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <DS3231_Update+0xb6>)
 8000d62:	7a1a      	ldrb	r2, [r3, #8]
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <DS3231_Update+0xb6>)
 8000d6a:	7a5a      	ldrb	r2, [r3, #9]
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d70:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <DS3231_Update+0xb6>)
 8000d72:	7a9a      	ldrb	r2, [r3, #10]
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d78:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <DS3231_Update+0xb6>)
 8000d7a:	7ada      	ldrb	r2, [r3, #11]
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d80:	4b0a      	ldr	r3, [pc, #40]	; (8000dac <DS3231_Update+0xb6>)
 8000d82:	7b1a      	ldrb	r2, [r3, #12]
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <DS3231_Update+0xb6>)
 8000d8a:	7b5a      	ldrb	r2, [r3, #13]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <DS3231_Update+0xb6>)
 8000d92:	7b9a      	ldrb	r2, [r3, #14]
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <DS3231_Update+0xb6>)
 8000d9a:	7bda      	ldrb	r2, [r3, #15]
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	741a      	strb	r2, [r3, #16]
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	200002bc 	.word	0x200002bc
 8000dac:	20000280 	.word	0x20000280
 8000db0:	20000294 	.word	0x20000294

08000db4 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000db8:	f7ff ff9d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <DS3231_getSec+0x18>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff7f 	bl	8000cc4 <bcdToDec>
 8000dc6:	4603      	mov	r3, r0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000280 	.word	0x20000280

08000dd0 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd4:	f7ff ff8f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <DS3231_getMin+0x18>)
 8000dda:	785b      	ldrb	r3, [r3, #1]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff71 	bl	8000cc4 <bcdToDec>
 8000de2:	4603      	mov	r3, r0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000280 	.word	0x20000280

08000dec <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df0:	f7ff ff81 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <DS3231_getHrs+0x18>)
 8000df6:	789b      	ldrb	r3, [r3, #2]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f7ff ff63 	bl	8000cc4 <bcdToDec>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000280 	.word	0x20000280

08000e08 <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e0c:	f7ff ff73 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <DS3231_getDay+0x18>)
 8000e12:	78db      	ldrb	r3, [r3, #3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff55 	bl	8000cc4 <bcdToDec>
 8000e1a:	4603      	mov	r3, r0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000280 	.word	0x20000280

08000e24 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e28:	f7ff ff65 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	; (8000e3c <DS3231_getDate+0x18>)
 8000e2e:	791b      	ldrb	r3, [r3, #4]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff47 	bl	8000cc4 <bcdToDec>
 8000e36:	4603      	mov	r3, r0
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	20000280 	.word	0x20000280

08000e40 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e44:	f7ff ff57 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <DS3231_getMonth+0x18>)
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff39 	bl	8000cc4 <bcdToDec>
 8000e52:	4603      	mov	r3, r0
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000280 	.word	0x20000280

08000e5c <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e60:	f7ff ff49 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <DS3231_getYear+0x18>)
 8000e66:	799b      	ldrb	r3, [r3, #6]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff2b 	bl	8000cc4 <bcdToDec>
 8000e6e:	4603      	mov	r3, r0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000280 	.word	0x20000280

08000e78 <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e7c:	f7ff ff3b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <DS3231_getAlarm1Sec+0x18>)
 8000e82:	79db      	ldrb	r3, [r3, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff1d 	bl	8000cc4 <bcdToDec>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000280 	.word	0x20000280

08000e94 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e98:	f7ff ff2d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <DS3231_getAlarm1Min+0x18>)
 8000e9e:	7a1b      	ldrb	r3, [r3, #8]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff ff0f 	bl	8000cc4 <bcdToDec>
 8000ea6:	4603      	mov	r3, r0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000280 	.word	0x20000280

08000eb0 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb4:	f7ff ff1f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <DS3231_getAlarm1Hour+0x18>)
 8000eba:	7a5b      	ldrb	r3, [r3, #9]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff01 	bl	8000cc4 <bcdToDec>
 8000ec2:	4603      	mov	r3, r0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000280 	.word	0x20000280

08000ecc <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed0:	f7ff ff11 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <DS3231_getAlarm1Day+0x18>)
 8000ed6:	7a9b      	ldrb	r3, [r3, #10]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fef3 	bl	8000cc4 <bcdToDec>
 8000ede:	4603      	mov	r3, r0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000280 	.word	0x20000280

08000ee8 <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eec:	f7ff ff03 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <DS3231_getAlarm1Date+0x18>)
 8000ef2:	7adb      	ldrb	r3, [r3, #11]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fee5 	bl	8000cc4 <bcdToDec>
 8000efa:	4603      	mov	r3, r0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000280 	.word	0x20000280

08000f04 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f08:	f7ff fef5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <DS3231_getAlarm2Min+0x18>)
 8000f0e:	7b1b      	ldrb	r3, [r3, #12]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fed7 	bl	8000cc4 <bcdToDec>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000280 	.word	0x20000280

08000f20 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f24:	f7ff fee7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <DS3231_getAlarm2Hour+0x18>)
 8000f2a:	7b5b      	ldrb	r3, [r3, #13]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fec9 	bl	8000cc4 <bcdToDec>
 8000f32:	4603      	mov	r3, r0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000280 	.word	0x20000280

08000f3c <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f40:	f7ff fed9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <DS3231_getAlarm2Day+0x18>)
 8000f46:	7b9b      	ldrb	r3, [r3, #14]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff febb 	bl	8000cc4 <bcdToDec>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000280 	.word	0x20000280

08000f58 <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f5c:	f7ff fecb 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <DS3231_getAlarm2Date+0x18>)
 8000f62:	7bdb      	ldrb	r3, [r3, #15]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fead 	bl	8000cc4 <bcdToDec>
 8000f6a:	4603      	mov	r3, r0
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000280 	.word	0x20000280

08000f74 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7a:	f7ff febc 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f7e:	4b1f      	ldr	r3, [pc, #124]	; (8000ffc <DS3231_getTemp+0x88>)
 8000f80:	7c5b      	ldrb	r3, [r3, #17]
 8000f82:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <DS3231_getTemp+0x88>)
 8000f86:	7c9b      	ldrb	r3, [r3, #18]
 8000f88:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8a:	f04f 0200 	mov.w	r2, #0
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f96:	7bbb      	ldrb	r3, [r7, #14]
 8000f98:	099b      	lsrs	r3, r3, #6
 8000f9a:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000f9c:	7bbb      	ldrb	r3, [r7, #14]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa4:	7bbb      	ldrb	r3, [r7, #14]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f017 fb1c 	bl	80185e4 <__aeabi_ui2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <DS3231_getTemp+0x8c>)
 8000fba:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fbe:	f017 fb8b 	bl	80186d8 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f017 fb19 	bl	8018604 <__aeabi_i2d>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fda:	f017 f9c7 	bl	801836c <__adddf3>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fea:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fee:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff2:	eef0 0a67 	vmov.f32	s1, s15
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000280 	.word	0x20000280
 8001000:	3fd00000 	.word	0x3fd00000

08001004 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800100e:	f7ff fe72 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fe33 	bl	8000c80 <decToBcd>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <DS3231_setSec+0x38>)
 8001020:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001022:	2364      	movs	r3, #100	; 0x64
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2311      	movs	r3, #17
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <DS3231_setSec+0x38>)
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <DS3231_setSec+0x3c>)
 800102e:	f009 fe6c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000294 	.word	0x20000294
 8001040:	200002bc 	.word	0x200002bc

08001044 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800104e:	f7ff fe52 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fe13 	bl	8000c80 <decToBcd>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <DS3231_setMin+0x38>)
 8001060:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001062:	2364      	movs	r3, #100	; 0x64
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2311      	movs	r3, #17
 8001068:	4a04      	ldr	r2, [pc, #16]	; (800107c <DS3231_setMin+0x38>)
 800106a:	21d0      	movs	r1, #208	; 0xd0
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <DS3231_setMin+0x3c>)
 800106e:	f009 fe4c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000294 	.word	0x20000294
 8001080:	200002bc 	.word	0x200002bc

08001084 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af02      	add	r7, sp, #8
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800108e:	f7ff fe32 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fdf3 	bl	8000c80 <decToBcd>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <DS3231_setHrs+0x38>)
 80010a0:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a2:	2364      	movs	r3, #100	; 0x64
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2311      	movs	r3, #17
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <DS3231_setHrs+0x38>)
 80010aa:	21d0      	movs	r1, #208	; 0xd0
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <DS3231_setHrs+0x3c>)
 80010ae:	f009 fe2c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000294 	.word	0x20000294
 80010c0:	200002bc 	.word	0x200002bc

080010c4 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af02      	add	r7, sp, #8
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010ce:	f7ff fe12 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fdd3 	bl	8000c80 <decToBcd>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <DS3231_setDay+0x38>)
 80010e0:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2311      	movs	r3, #17
 80010e8:	4a04      	ldr	r2, [pc, #16]	; (80010fc <DS3231_setDay+0x38>)
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <DS3231_setDay+0x3c>)
 80010ee:	f009 fe0c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000294 	.word	0x20000294
 8001100:	200002bc 	.word	0x200002bc

08001104 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af02      	add	r7, sp, #8
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800110e:	f7ff fdf2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fdb3 	bl	8000c80 <decToBcd>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <DS3231_setDate+0x38>)
 8001120:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001122:	2364      	movs	r3, #100	; 0x64
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2311      	movs	r3, #17
 8001128:	4a04      	ldr	r2, [pc, #16]	; (800113c <DS3231_setDate+0x38>)
 800112a:	21d0      	movs	r1, #208	; 0xd0
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <DS3231_setDate+0x3c>)
 800112e:	f009 fdec 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000294 	.word	0x20000294
 8001140:	200002bc 	.word	0x200002bc

08001144 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800114e:	f7ff fdd2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd93 	bl	8000c80 <decToBcd>
 800115a:	4603      	mov	r3, r0
 800115c:	461a      	mov	r2, r3
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <DS3231_setMonth+0x38>)
 8001160:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001162:	2364      	movs	r3, #100	; 0x64
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2311      	movs	r3, #17
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <DS3231_setMonth+0x38>)
 800116a:	21d0      	movs	r1, #208	; 0xd0
 800116c:	4804      	ldr	r0, [pc, #16]	; (8001180 <DS3231_setMonth+0x3c>)
 800116e:	f009 fdcc 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000294 	.word	0x20000294
 8001180:	200002bc 	.word	0x200002bc

08001184 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af02      	add	r7, sp, #8
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800118e:	f7ff fdb2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd73 	bl	8000c80 <decToBcd>
 800119a:	4603      	mov	r3, r0
 800119c:	461a      	mov	r2, r3
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <DS3231_setYear+0x38>)
 80011a0:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2311      	movs	r3, #17
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <DS3231_setYear+0x38>)
 80011aa:	21d0      	movs	r1, #208	; 0xd0
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <DS3231_setYear+0x3c>)
 80011ae:	f009 fdac 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000294 	.word	0x20000294
 80011c0:	200002bc 	.word	0x200002bc

080011c4 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011ce:	f7ff fd92 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff fd53 	bl	8000c80 <decToBcd>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <DS3231_setAlarm1Sec+0x38>)
 80011e0:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	2311      	movs	r3, #17
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <DS3231_setAlarm1Sec+0x38>)
 80011ea:	21d0      	movs	r1, #208	; 0xd0
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x3c>)
 80011ee:	f009 fd8c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000294 	.word	0x20000294
 8001200:	200002bc 	.word	0x200002bc

08001204 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800120e:	f7ff fd72 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fd33 	bl	8000c80 <decToBcd>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <DS3231_setAlarm1Min+0x38>)
 8001220:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2311      	movs	r3, #17
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <DS3231_setAlarm1Min+0x38>)
 800122a:	21d0      	movs	r1, #208	; 0xd0
 800122c:	4804      	ldr	r0, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x3c>)
 800122e:	f009 fd6c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000294 	.word	0x20000294
 8001240:	200002bc 	.word	0x200002bc

08001244 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800124e:	f7ff fd52 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd13 	bl	8000c80 <decToBcd>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <DS3231_setAlarm1Hour+0x38>)
 8001260:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	9300      	str	r3, [sp, #0]
 8001266:	2311      	movs	r3, #17
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <DS3231_setAlarm1Hour+0x38>)
 800126a:	21d0      	movs	r1, #208	; 0xd0
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x3c>)
 800126e:	f009 fd4c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000294 	.word	0x20000294
 8001280:	200002bc 	.word	0x200002bc

08001284 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800128e:	f7ff fd32 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcf3 	bl	8000c80 <decToBcd>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <DS3231_setAlarm1Day+0x38>)
 80012a0:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2311      	movs	r3, #17
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <DS3231_setAlarm1Day+0x38>)
 80012aa:	21d0      	movs	r1, #208	; 0xd0
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x3c>)
 80012ae:	f009 fd2c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000294 	.word	0x20000294
 80012c0:	200002bc 	.word	0x200002bc

080012c4 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012ce:	f7ff fd12 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fcd3 	bl	8000c80 <decToBcd>
 80012da:	4603      	mov	r3, r0
 80012dc:	461a      	mov	r2, r3
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <DS3231_setAlarm1Date+0x38>)
 80012e0:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e2:	2364      	movs	r3, #100	; 0x64
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2311      	movs	r3, #17
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <DS3231_setAlarm1Date+0x38>)
 80012ea:	21d0      	movs	r1, #208	; 0xd0
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x3c>)
 80012ee:	f009 fd0c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000294 	.word	0x20000294
 8001300:	200002bc 	.word	0x200002bc

08001304 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af02      	add	r7, sp, #8
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800130e:	f7ff fcf2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fcb3 	bl	8000c80 <decToBcd>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <DS3231_setAlarm2Min+0x38>)
 8001320:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001322:	2364      	movs	r3, #100	; 0x64
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2311      	movs	r3, #17
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <DS3231_setAlarm2Min+0x38>)
 800132a:	21d0      	movs	r1, #208	; 0xd0
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x3c>)
 800132e:	f009 fcec 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000294 	.word	0x20000294
 8001340:	200002bc 	.word	0x200002bc

08001344 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800134e:	f7ff fcd2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fc93 	bl	8000c80 <decToBcd>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <DS3231_setAlarm2Hour+0x38>)
 8001360:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	2311      	movs	r3, #17
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <DS3231_setAlarm2Hour+0x38>)
 800136a:	21d0      	movs	r1, #208	; 0xd0
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x3c>)
 800136e:	f009 fccc 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000294 	.word	0x20000294
 8001380:	200002bc 	.word	0x200002bc

08001384 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af02      	add	r7, sp, #8
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 800138e:	f7ff fcb2 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fc73 	bl	8000c80 <decToBcd>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b07      	ldr	r3, [pc, #28]	; (80013bc <DS3231_setAlarm2Day+0x38>)
 80013a0:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a2:	2364      	movs	r3, #100	; 0x64
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2311      	movs	r3, #17
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <DS3231_setAlarm2Day+0x38>)
 80013aa:	21d0      	movs	r1, #208	; 0xd0
 80013ac:	4804      	ldr	r0, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x3c>)
 80013ae:	f009 fcac 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000294 	.word	0x20000294
 80013c0:	200002bc 	.word	0x200002bc

080013c4 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013ce:	f7ff fc92 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fc53 	bl	8000c80 <decToBcd>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <DS3231_setAlarm2Date+0x38>)
 80013e0:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e2:	2364      	movs	r3, #100	; 0x64
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2311      	movs	r3, #17
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <DS3231_setAlarm2Date+0x38>)
 80013ea:	21d0      	movs	r1, #208	; 0xd0
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x3c>)
 80013ee:	f009 fc8c 	bl	800ad0a <HAL_I2C_Master_Transmit>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000294 	.word	0x20000294
 8001400:	200002bc 	.word	0x200002bc

08001404 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001404:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001408:	b088      	sub	sp, #32
 800140a:	af00      	add	r7, sp, #0
 800140c:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001410:	f7ff fd24 	bl	8000e5c <DS3231_getYear>
 8001414:	4603      	mov	r3, r0
 8001416:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 8001418:	f7ff fd12 	bl	8000e40 <DS3231_getMonth>
 800141c:	4603      	mov	r3, r0
 800141e:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001420:	f7ff fd00 	bl	8000e24 <DS3231_getDate>
 8001424:	4603      	mov	r3, r0
 8001426:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 8001428:	f7ff fce0 	bl	8000dec <DS3231_getHrs>
 800142c:	4603      	mov	r3, r0
 800142e:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001430:	f7ff fcce 	bl	8000dd0 <DS3231_getMin>
 8001434:	4603      	mov	r3, r0
 8001436:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 8001438:	f7ff fcbc 	bl	8000db4 <DS3231_getSec>
 800143c:	4603      	mov	r3, r0
 800143e:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001440:	4a35      	ldr	r2, [pc, #212]	; (8001518 <DS3231_getUnix+0x114>)
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	ca07      	ldmia	r2, {r0, r1, r2}
 8001448:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 800144c:	7ebb      	ldrb	r3, [r7, #26]
 800144e:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001450:	2300      	movs	r3, #0
 8001452:	777b      	strb	r3, [r7, #29]
 8001454:	e00b      	b.n	800146e <DS3231_getUnix+0x6a>
        dc += dim[i];
 8001456:	7f7b      	ldrb	r3, [r7, #29]
 8001458:	3320      	adds	r3, #32
 800145a:	443b      	add	r3, r7
 800145c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001460:	b29a      	uxth	r2, r3
 8001462:	8bfb      	ldrh	r3, [r7, #30]
 8001464:	4413      	add	r3, r2
 8001466:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001468:	7f7b      	ldrb	r3, [r7, #29]
 800146a:	3301      	adds	r3, #1
 800146c:	777b      	strb	r3, [r7, #29]
 800146e:	7f7a      	ldrb	r2, [r7, #29]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	3b01      	subs	r3, #1
 8001474:	429a      	cmp	r2, r3
 8001476:	dbee      	blt.n	8001456 <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 8001478:	7efb      	ldrb	r3, [r7, #27]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d908      	bls.n	8001490 <DS3231_getUnix+0x8c>
 800147e:	7f3b      	ldrb	r3, [r7, #28]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d102      	bne.n	8001490 <DS3231_getUnix+0x8c>
        ++dc;
 800148a:	8bfb      	ldrh	r3, [r7, #30]
 800148c:	3301      	adds	r3, #1
 800148e:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001490:	7f3b      	ldrb	r3, [r7, #28]
 8001492:	b29b      	uxth	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	00d2      	lsls	r2, r2, #3
 8001498:	441a      	add	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	4413      	add	r3, r2
 800149e:	461a      	mov	r2, r3
 80014a0:	0091      	lsls	r1, r2, #2
 80014a2:	461a      	mov	r2, r3
 80014a4:	460b      	mov	r3, r1
 80014a6:	4413      	add	r3, r2
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	8bfb      	ldrh	r3, [r7, #30]
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	7f3b      	ldrb	r3, [r7, #28]
 80014b2:	3303      	adds	r3, #3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	da00      	bge.n	80014ba <DS3231_getUnix+0xb6>
 80014b8:	3303      	adds	r3, #3
 80014ba:	109b      	asrs	r3, r3, #2
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3b01      	subs	r3, #1
 80014c4:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014c6:	8bfa      	ldrh	r2, [r7, #30]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	461a      	mov	r2, r3
 80014d2:	7e7b      	ldrb	r3, [r7, #25]
 80014d4:	441a      	add	r2, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	1a9b      	subs	r3, r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	461a      	mov	r2, r3
 80014e0:	7e3b      	ldrb	r3, [r7, #24]
 80014e2:	441a      	add	r2, r3
 80014e4:	4613      	mov	r3, r2
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	1a9b      	subs	r3, r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	461a      	mov	r2, r3
 80014ee:	7dfb      	ldrb	r3, [r7, #23]
 80014f0:	441a      	add	r2, r3
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <DS3231_getUnix+0x118>)
 80014f4:	4413      	add	r3, r2
 80014f6:	17da      	asrs	r2, r3, #31
 80014f8:	461c      	mov	r4, r3
 80014fa:	4615      	mov	r5, r2
 80014fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001500:	eb14 0802 	adds.w	r8, r4, r2
 8001504:	eb45 0903 	adc.w	r9, r5, r3
 8001508:	4642      	mov	r2, r8
 800150a:	464b      	mov	r3, r9
}
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001518:	080517fc 	.word	0x080517fc
 800151c:	386d4380 	.word	0x386d4380

08001520 <normalize>:

double normalize(double v) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152a:	ed97 0b00 	vldr	d0, [r7]
 800152e:	f01c fabf 	bl	801dab0 <floor>
 8001532:	ec53 2b10 	vmov	r2, r3, d0
 8001536:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153a:	f016 ff15 	bl	8018368 <__aeabi_dsub>
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001552:	f017 fb33 	bl	8018bbc <__aeabi_dcmplt>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00a      	beq.n	8001572 <normalize+0x52>
        v = v + 1;
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <normalize+0x68>)
 8001562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001566:	f016 ff01 	bl	801836c <__adddf3>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001576:	ec43 2b17 	vmov	d7, r2, r3
}
 800157a:	eeb0 0a47 	vmov.f32	s0, s14
 800157e:	eef0 0a67 	vmov.f32	s1, s15
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	3ff00000 	.word	0x3ff00000

0800158c <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 800158c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001590:	b0a0      	sub	sp, #128	; 0x80
 8001592:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001594:	f7ff fc62 	bl	8000e5c <DS3231_getYear>
 8001598:	4603      	mov	r3, r0
 800159a:	b29b      	uxth	r3, r3
 800159c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a4:	f7ff fc4c 	bl	8000e40 <DS3231_getMonth>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015ae:	f7ff fc39 	bl	8000e24 <DS3231_getDate>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015bc:	4618      	mov	r0, r3
 80015be:	f017 f821 	bl	8018604 <__aeabi_i2d>
 80015c2:	4604      	mov	r4, r0
 80015c4:	460d      	mov	r5, r1
 80015c6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ca:	f1c3 010c 	rsb	r1, r3, #12
 80015ce:	4b9a      	ldr	r3, [pc, #616]	; (8001838 <DS3231_getMoonDay+0x2ac>)
 80015d0:	fb83 2301 	smull	r2, r3, r3, r1
 80015d4:	109a      	asrs	r2, r3, #2
 80015d6:	17cb      	asrs	r3, r1, #31
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f017 f812 	bl	8018604 <__aeabi_i2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4620      	mov	r0, r4
 80015e6:	4629      	mov	r1, r5
 80015e8:	f016 febe 	bl	8018368 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f017 fbd0 	bl	8018d98 <__aeabi_d2ulz>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001600:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001604:	3309      	adds	r3, #9
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	61bb      	str	r3, [r7, #24]
 800160a:	61fa      	str	r2, [r7, #28]
 800160c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001610:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001614:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001618:	2a0c      	cmp	r2, #12
 800161a:	f173 0300 	sbcs.w	r3, r3, #0
 800161e:	d30b      	bcc.n	8001638 <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001620:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001624:	f1b2 010c 	subs.w	r1, r2, #12
 8001628:	6139      	str	r1, [r7, #16]
 800162a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001634:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 8001638:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800163c:	f241 2168 	movw	r1, #4712	; 0x1268
 8001640:	1851      	adds	r1, r2, r1
 8001642:	6339      	str	r1, [r7, #48]	; 0x30
 8001644:	f143 0300 	adc.w	r3, r3, #0
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
 800164a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800164e:	f017 f80d 	bl	801866c <__aeabi_ul2d>
 8001652:	a36f      	add	r3, pc, #444	; (adr r3, 8001810 <DS3231_getMoonDay+0x284>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f017 f83e 	bl	80186d8 <__aeabi_dmul>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	ec43 2b17 	vmov	d7, r2, r3
 8001664:	eeb0 0a47 	vmov.f32	s0, s14
 8001668:	eef0 0a67 	vmov.f32	s1, s15
 800166c:	f01c fa20 	bl	801dab0 <floor>
 8001670:	ec53 2b10 	vmov	r2, r3, d0
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	f017 fb8e 	bl	8018d98 <__aeabi_d2ulz>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001684:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001688:	f016 fff0 	bl	801866c <__aeabi_ul2d>
 800168c:	a362      	add	r3, pc, #392	; (adr r3, 8001818 <DS3231_getMoonDay+0x28c>)
 800168e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001692:	f017 f821 	bl	80186d8 <__aeabi_dmul>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4610      	mov	r0, r2
 800169c:	4619      	mov	r1, r3
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b66      	ldr	r3, [pc, #408]	; (800183c <DS3231_getMoonDay+0x2b0>)
 80016a4:	f016 fe62 	bl	801836c <__adddf3>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	ec43 2b17 	vmov	d7, r2, r3
 80016b0:	eeb0 0a47 	vmov.f32	s0, s14
 80016b4:	eef0 0a67 	vmov.f32	s1, s15
 80016b8:	f01c f9fa 	bl	801dab0 <floor>
 80016bc:	ec53 2b10 	vmov	r2, r3, d0
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f017 fb68 	bl	8018d98 <__aeabi_d2ulz>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d4:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	f017 fb7a 	bl	8018dd4 <__aeabi_uldivmod>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ea:	f143 0300 	adc.w	r3, r3, #0
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f4:	f016 ffba 	bl	801866c <__aeabi_ul2d>
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	4b50      	ldr	r3, [pc, #320]	; (8001840 <DS3231_getMoonDay+0x2b4>)
 80016fe:	f016 ffeb 	bl	80186d8 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	ec43 2b17 	vmov	d7, r2, r3
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	eef0 0a67 	vmov.f32	s1, s15
 8001712:	f01c f9cd 	bl	801dab0 <floor>
 8001716:	ec51 0b10 	vmov	r0, r1, d0
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b49      	ldr	r3, [pc, #292]	; (8001844 <DS3231_getMoonDay+0x2b8>)
 8001720:	f016 fe22 	bl	8018368 <__aeabi_dsub>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4610      	mov	r0, r2
 800172a:	4619      	mov	r1, r3
 800172c:	f017 fb34 	bl	8018d98 <__aeabi_d2ulz>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 8001738:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800173c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001740:	eb10 0a02 	adds.w	sl, r0, r2
 8001744:	eb41 0b03 	adc.w	fp, r1, r3
 8001748:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800174c:	2200      	movs	r2, #0
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	627a      	str	r2, [r7, #36]	; 0x24
 8001752:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001756:	460b      	mov	r3, r1
 8001758:	eb1a 0803 	adds.w	r8, sl, r3
 800175c:	4613      	mov	r3, r2
 800175e:	eb4b 0903 	adc.w	r9, fp, r3
 8001762:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	f149 0300 	adc.w	r3, r9, #0
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001772:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 8001776:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177a:	4933      	ldr	r1, [pc, #204]	; (8001848 <DS3231_getMoonDay+0x2bc>)
 800177c:	428a      	cmp	r2, r1
 800177e:	f173 0300 	sbcs.w	r3, r3, #0
 8001782:	d30c      	bcc.n	800179e <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001784:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800178c:	1a84      	subs	r4, r0, r2
 800178e:	603c      	str	r4, [r7, #0]
 8001790:	eb61 0303 	sbc.w	r3, r1, r3
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179a:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 800179e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a2:	f016 ff63 	bl	801866c <__aeabi_ul2d>
 80017a6:	a31e      	add	r3, pc, #120	; (adr r3, 8001820 <DS3231_getMoonDay+0x294>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f016 fddc 	bl	8018368 <__aeabi_dsub>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4610      	mov	r0, r2
 80017b6:	4619      	mov	r1, r3
 80017b8:	a31b      	add	r3, pc, #108	; (adr r3, 8001828 <DS3231_getMoonDay+0x29c>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f017 f8b5 	bl	801892c <__aeabi_ddiv>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	ec43 2b17 	vmov	d7, r2, r3
 80017ca:	eeb0 0a47 	vmov.f32	s0, s14
 80017ce:	eef0 0a67 	vmov.f32	s1, s15
 80017d2:	f7ff fea5 	bl	8001520 <normalize>
 80017d6:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017da:	a315      	add	r3, pc, #84	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a4>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e4:	f016 ff78 	bl	80186d8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f017 fa6a 	bl	8018cc8 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fa:	ee07 3a90 	vmov	s15, r3
}
 80017fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001802:	3780      	adds	r7, #128	; 0x80
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4604      	mov	r4, r0
 8001854:	4608      	mov	r0, r1
 8001856:	4611      	mov	r1, r2
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	80fb      	strh	r3, [r7, #6]
 800185e:	4603      	mov	r3, r0
 8001860:	80bb      	strh	r3, [r7, #4]
 8001862:	460b      	mov	r3, r1
 8001864:	807b      	strh	r3, [r7, #2]
 8001866:	4613      	mov	r3, r2
 8001868:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	88bb      	ldrh	r3, [r7, #4]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	8b39      	ldrh	r1, [r7, #24]
 8001872:	883a      	ldrh	r2, [r7, #0]
 8001874:	1a8a      	subs	r2, r1, r2
 8001876:	fb03 f202 	mul.w	r2, r3, r2
 800187a:	8879      	ldrh	r1, [r7, #2]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	1acb      	subs	r3, r1, r3
 8001880:	fb92 f2f3 	sdiv	r2, r2, r3
 8001884:	883b      	ldrh	r3, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f016 febb 	bl	8018604 <__aeabi_i2d>
 800188e:	4602      	mov	r2, r0
 8001890:	460b      	mov	r3, r1
 8001892:	ec43 2b17 	vmov	d7, r2, r3
}
 8001896:	eeb0 0a47 	vmov.f32	s0, s14
 800189a:	eef0 0a67 	vmov.f32	s1, s15
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}

080018a4 <byteL>:

uint8_t byteL(uint16_t val) {
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <byteH>:

uint8_t byteH(uint16_t val) {
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 80018c8:	88fb      	ldrh	r3, [r7, #6]
 80018ca:	0a1b      	lsrs	r3, r3, #8
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	460a      	mov	r2, r1
 80018e6:	71fb      	strb	r3, [r7, #7]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 80018ec:	79bb      	ldrb	r3, [r7, #6]
 80018ee:	021b      	lsls	r3, r3, #8
 80018f0:	b21a      	sxth	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	b29b      	uxth	r3, r3
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_UART_RxCpltCallback+0x3c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10f      	bne.n	800193a <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	1c5a      	adds	r2, r3, #1
 8001920:	b2d1      	uxtb	r1, r2
 8001922:	4a09      	ldr	r2, [pc, #36]	; (8001948 <HAL_UART_RxCpltCallback+0x40>)
 8001924:	7011      	strb	r1, [r2, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 800192a:	7819      	ldrb	r1, [r3, #0]
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <HAL_UART_RxCpltCallback+0x48>)
 800192e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001930:	2201      	movs	r2, #1
 8001932:	4906      	ldr	r1, [pc, #24]	; (800194c <HAL_UART_RxCpltCallback+0x44>)
 8001934:	4807      	ldr	r0, [pc, #28]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001936:	f013 fd69 	bl	801540c <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40011000 	.word	0x40011000
 8001948:	2000085c 	.word	0x2000085c
 800194c:	2000085d 	.word	0x2000085d
 8001950:	2000084c 	.word	0x2000084c
 8001954:	200003c0 	.word	0x200003c0

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	b0b3      	sub	sp, #204	; 0xcc
 800195c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195e:	f004 fb31 	bl	8005fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001962:	f001 ff41 	bl	80037e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001966:	f002 f8a1 	bl	8003aac <MX_GPIO_Init>
  MX_FSMC_Init();
 800196a:	f002 f965 	bl	8003c38 <MX_FSMC_Init>
  MX_I2C1_Init();
 800196e:	f001 ffd9 	bl	8003924 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001972:	f002 f871 	bl	8003a58 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001976:	f002 f839 	bl	80039ec <MX_SPI3_Init>
  MX_SPI2_Init();
 800197a:	f002 f801 	bl	8003980 <MX_SPI2_Init>
  MX_DAC_Init();
 800197e:	f001 ff9d 	bl	80038bc <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 8001982:	f003 fc75 	bl	8005270 <LCD_Init>
	XPT2046_Init();
 8001986:	f004 fa25 	bl	8005dd4 <XPT2046_Init>

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 800198a:	23ff      	movs	r3, #255	; 0xff
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001992:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001996:	2100      	movs	r1, #0
 8001998:	2000      	movs	r0, #0
 800199a:	f002 fa95 	bl	8003ec8 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 800199e:	2300      	movs	r3, #0
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 80019a6:	f240 321e 	movw	r2, #798	; 0x31e
 80019aa:	2101      	movs	r1, #1
 80019ac:	2001      	movs	r0, #1
 80019ae:	f002 fa8b 	bl	8003ec8 <LCD_Rect_Fill>

	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, RED);
 80019b2:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2301      	movs	r3, #1
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <main+0x310>)
 80019be:	4aab      	ldr	r2, [pc, #684]	; (8001c6c <main+0x314>)
 80019c0:	217f      	movs	r1, #127	; 0x7f
 80019c2:	2014      	movs	r0, #20
 80019c4:	f003 fbda 	bl	800517c <LCD_Font>
	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 80019ce:	e027      	b.n	8001a20 <main+0xc8>
 80019d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019d4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019d8:	b29b      	uxth	r3, r3
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fc56 	bl	8000290 <AT24XX_Read>
 80019e4:	4603      	mov	r3, r0
 80019e6:	461c      	mov	r4, r3
 80019e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fc4a 	bl	8000290 <AT24XX_Read>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4619      	mov	r1, r3
 8001a00:	4620      	mov	r0, r4
 8001a02:	f7ff ff6b 	bl	80018dc <byteS>
 8001a06:	4603      	mov	r3, r0
 8001a08:	461a      	mov	r2, r3
 8001a0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a0e:	b211      	sxth	r1, r2
 8001a10:	4a97      	ldr	r2, [pc, #604]	; (8001c70 <main+0x318>)
 8001a12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8001a20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8001a24:	2b9a      	cmp	r3, #154	; 0x9a
 8001a26:	d9d3      	bls.n	80019d0 <main+0x78>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001a2e:	e027      	b.n	8001a80 <main+0x128>
 8001a30:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a34:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fc26 	bl	8000290 <AT24XX_Read>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461c      	mov	r4, r3
 8001a48:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fc1a 	bl	8000290 <AT24XX_Read>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4620      	mov	r0, r4
 8001a62:	f7ff ff3b 	bl	80018dc <byteS>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a6e:	b211      	sxth	r1, r2
 8001a70:	4a80      	ldr	r2, [pc, #512]	; (8001c74 <main+0x31c>)
 8001a72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001a76:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8001a80:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001a84:	2b9a      	cmp	r3, #154	; 0x9a
 8001a86:	d9d3      	bls.n	8001a30 <main+0xd8>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001a8e:	e027      	b.n	8001ae0 <main+0x188>
 8001a90:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001a94:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fbf6 	bl	8000290 <AT24XX_Read>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fbea 	bl	8000290 <AT24XX_Read>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	f7ff ff0b 	bl	80018dc <byteS>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ace:	b211      	sxth	r1, r2
 8001ad0:	4a69      	ldr	r2, [pc, #420]	; (8001c78 <main+0x320>)
 8001ad2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ad6:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ada:	3301      	adds	r3, #1
 8001adc:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8001ae0:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 8001ae4:	2b9a      	cmp	r3, #154	; 0x9a
 8001ae6:	d9d3      	bls.n	8001a90 <main+0x138>
	LCD_Font(20, 127, "Waiting for I2C", &DejaVu_Sans_48, 1, BLACK);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	2301      	movs	r3, #1
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <main+0x310>)
 8001af2:	4a5e      	ldr	r2, [pc, #376]	; (8001c6c <main+0x314>)
 8001af4:	217f      	movs	r1, #127	; 0x7f
 8001af6:	2014      	movs	r0, #20
 8001af8:	f003 fb40 	bl	800517c <LCD_Font>

	BME280_Init();
 8001afc:	f7fe fe6e 	bl	80007dc <BME280_Init>

//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001b00:	4a5e      	ldr	r2, [pc, #376]	; (8001c7c <main+0x324>)
 8001b02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b06:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b08:	c303      	stmia	r3!, {r0, r1}
 8001b0a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001b0c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	220a      	movs	r2, #10
 8001b14:	485a      	ldr	r0, [pc, #360]	; (8001c80 <main+0x328>)
 8001b16:	f013 fb00 	bl	801511a <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001b1a:	4b5a      	ldr	r3, [pc, #360]	; (8001c84 <main+0x32c>)
 8001b1c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001b20:	461d      	mov	r5, r3
 8001b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b26:	682b      	ldr	r3, [r5, #0]
 8001b28:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001b2a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b2e:	2214      	movs	r2, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	4853      	ldr	r0, [pc, #332]	; (8001c80 <main+0x328>)
 8001b34:	f013 fc25 	bl	8015382 <HAL_UART_Transmit_IT>

//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001b38:	2210      	movs	r2, #16
 8001b3a:	4953      	ldr	r1, [pc, #332]	; (8001c88 <main+0x330>)
 8001b3c:	4850      	ldr	r0, [pc, #320]	; (8001c80 <main+0x328>)
 8001b3e:	f013 fc65 	bl	801540c <HAL_UART_Receive_IT>
//	HAL_UART_Receive_DMA (&huart1, rx_buffer, UART_RX_BUFFER_SIZE);

	for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b48:	e008      	b.n	8001b5c <main+0x204>
 8001b4a:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <main+0x334>)
 8001b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b50:	6353      	str	r3, [r2, #52]	; 0x34
 8001b52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b56:	3301      	adds	r3, #1
 8001b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d9f1      	bls.n	8001b4a <main+0x1f2>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001b66:	2120      	movs	r1, #32
 8001b68:	4849      	ldr	r0, [pc, #292]	; (8001c90 <main+0x338>)
 8001b6a:	f008 fec5 	bl	800a8f8 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d12c      	bne.n	8001bce <main+0x276>

			uint16_t touchX = getX();
 8001b74:	f004 f9f2 	bl	8005f5c <getX>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			uint16_t touchY = getY();
 8001b7e:	f004 fa07 	bl	8005f90 <getY>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			if (touchX && touchY && touchX != 0x0DB)
 8001b88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d012      	beq.n	8001bb6 <main+0x25e>
 8001b90:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d00e      	beq.n	8001bb6 <main+0x25e>
 8001b98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001b9c:	2bdb      	cmp	r3, #219	; 0xdb
 8001b9e:	d00a      	beq.n	8001bb6 <main+0x25e>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001ba0:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 8001ba4:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 8001ba8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f002 f989 	bl	8003ec8 <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	4836      	ldr	r0, [pc, #216]	; (8001c94 <main+0x33c>)
 8001bbc:	f008 feb4 	bl	800a928 <HAL_GPIO_WritePin>
			touchX = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			touchY = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001bcc:	e004      	b.n	8001bd8 <main+0x280>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	4830      	ldr	r0, [pc, #192]	; (8001c94 <main+0x33c>)
 8001bd4:	f008 fea8 	bl	800a928 <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001bd8:	f7ff f8ec 	bl	8000db4 <DS3231_getSec>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <main+0x340>)
 8001be2:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <main+0x344>)
 8001be6:	781a      	ldrb	r2, [r3, #0]
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <main+0x340>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d0ba      	beq.n	8001b66 <main+0x20e>

			rtcMin = DS3231_getMin();
 8001bf0:	f7ff f8ee 	bl	8000dd0 <DS3231_getMin>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <main+0x348>)
 8001bfa:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001bfc:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <main+0x34c>)
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2301      	movs	r3, #1
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	2300      	movs	r3, #0
 8001c06:	2208      	movs	r2, #8
 8001c08:	2123      	movs	r1, #35	; 0x23
 8001c0a:	20aa      	movs	r0, #170	; 0xaa
 8001c0c:	f002 fda0 	bl	8004750 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001c10:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <main+0x34c>)
 8001c12:	9301      	str	r3, [sp, #4]
 8001c14:	2301      	movs	r3, #1
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2208      	movs	r2, #8
 8001c1c:	214b      	movs	r1, #75	; 0x4b
 8001c1e:	20aa      	movs	r0, #170	; 0xaa
 8001c20:	f002 fd96 	bl	8004750 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <main+0x340>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d03a      	beq.n	8001ca8 <main+0x350>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001c32:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <main+0x34c>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2301      	movs	r3, #1
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	2123      	movs	r1, #35	; 0x23
 8001c40:	20aa      	movs	r0, #170	; 0xaa
 8001c42:	f002 fd85 	bl	8004750 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001c46:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <main+0x34c>)
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2301      	movs	r3, #1
 8001c50:	2207      	movs	r2, #7
 8001c52:	214b      	movs	r1, #75	; 0x4b
 8001c54:	20aa      	movs	r0, #170	; 0xaa
 8001c56:	f002 fd7b 	bl	8004750 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c60:	480b      	ldr	r0, [pc, #44]	; (8001c90 <main+0x338>)
 8001c62:	f008 fe61 	bl	800a928 <HAL_GPIO_WritePin>
 8001c66:	e039      	b.n	8001cdc <main+0x384>
 8001c68:	08029130 	.word	0x08029130
 8001c6c:	0805180c 	.word	0x0805180c
 8001c70:	200004a4 	.word	0x200004a4
 8001c74:	200005dc 	.word	0x200005dc
 8001c78:	20000714 	.word	0x20000714
 8001c7c:	0805187c 	.word	0x0805187c
 8001c80:	200003c0 	.word	0x200003c0
 8001c84:	08051888 	.word	0x08051888
 8001c88:	2000085d 	.word	0x2000085d
 8001c8c:	40010000 	.word	0x40010000
 8001c90:	40020800 	.word	0x40020800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	20000455 	.word	0x20000455
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000456 	.word	0x20000456
 8001ca4:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2301      	movs	r3, #1
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	2123      	movs	r1, #35	; 0x23
 8001cb6:	20aa      	movs	r0, #170	; 0xaa
 8001cb8:	f002 fd4a 	bl	8004750 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	214b      	movs	r1, #75	; 0x4b
 8001cca:	20aa      	movs	r0, #170	; 0xaa
 8001ccc:	f002 fd40 	bl	8004750 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cd6:	48bb      	ldr	r0, [pc, #748]	; (8001fc4 <main+0x66c>)
 8001cd8:	f008 fe26 	bl	800a928 <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001cdc:	4bba      	ldr	r3, [pc, #744]	; (8001fc8 <main+0x670>)
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4bba      	ldr	r3, [pc, #744]	; (8001fcc <main+0x674>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	f001 8082 	beq.w	8002dee <main+0x1496>

				rtcHrs = DS3231_getHrs();
 8001cea:	f7ff f87f 	bl	8000dec <DS3231_getHrs>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4bb7      	ldr	r3, [pc, #732]	; (8001fd0 <main+0x678>)
 8001cf4:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001cf6:	4bb4      	ldr	r3, [pc, #720]	; (8001fc8 <main+0x670>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d00:	49b4      	ldr	r1, [pc, #720]	; (8001fd4 <main+0x67c>)
 8001d02:	4618      	mov	r0, r3
 8001d04:	f018 f8c8 	bl	8019e98 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2301      	movs	r3, #1
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4bb0      	ldr	r3, [pc, #704]	; (8001fd8 <main+0x680>)
 8001d16:	2164      	movs	r1, #100	; 0x64
 8001d18:	20b2      	movs	r0, #178	; 0xb2
 8001d1a:	f003 fa2f 	bl	800517c <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001d1e:	4bab      	ldr	r3, [pc, #684]	; (8001fcc <main+0x674>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d28:	49aa      	ldr	r1, [pc, #680]	; (8001fd4 <main+0x67c>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f018 f8b4 	bl	8019e98 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001d30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d34:	4ba9      	ldr	r3, [pc, #676]	; (8001fdc <main+0x684>)
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	4ba6      	ldr	r3, [pc, #664]	; (8001fd8 <main+0x680>)
 8001d3e:	2164      	movs	r1, #100	; 0x64
 8001d40:	20b2      	movs	r0, #178	; 0xb2
 8001d42:	f003 fa1b 	bl	800517c <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001d46:	4ba6      	ldr	r3, [pc, #664]	; (8001fe0 <main+0x688>)
 8001d48:	781a      	ldrb	r2, [r3, #0]
 8001d4a:	4ba1      	ldr	r3, [pc, #644]	; (8001fd0 <main+0x678>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	f000 80fb 	beq.w	8001f4a <main+0x5f2>

					rtcDay = DS3231_getDay();
 8001d54:	f7ff f858 	bl	8000e08 <DS3231_getDay>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4ba1      	ldr	r3, [pc, #644]	; (8001fe4 <main+0x68c>)
 8001d5e:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001d60:	f7ff f860 	bl	8000e24 <DS3231_getDate>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b9f      	ldr	r3, [pc, #636]	; (8001fe8 <main+0x690>)
 8001d6a:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001d6c:	f7ff f868 	bl	8000e40 <DS3231_getMonth>
 8001d70:	4603      	mov	r3, r0
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b9d      	ldr	r3, [pc, #628]	; (8001fec <main+0x694>)
 8001d76:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001d78:	f7ff f870 	bl	8000e5c <DS3231_getYear>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b9b      	ldr	r3, [pc, #620]	; (8001ff0 <main+0x698>)
 8001d82:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001d84:	4b96      	ldr	r3, [pc, #600]	; (8001fe0 <main+0x688>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d8e:	4991      	ldr	r1, [pc, #580]	; (8001fd4 <main+0x67c>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f018 f881 	bl	8019e98 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001d96:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9301      	str	r3, [sp, #4]
 8001d9e:	2301      	movs	r3, #1
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <main+0x680>)
 8001da4:	2164      	movs	r1, #100	; 0x64
 8001da6:	2000      	movs	r0, #0
 8001da8:	f003 f9e8 	bl	800517c <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001dac:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <main+0x678>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001db6:	4987      	ldr	r1, [pc, #540]	; (8001fd4 <main+0x67c>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f018 f86d 	bl	8019e98 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001dbe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001dc2:	4b86      	ldr	r3, [pc, #536]	; (8001fdc <main+0x684>)
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4b83      	ldr	r3, [pc, #524]	; (8001fd8 <main+0x680>)
 8001dcc:	2164      	movs	r1, #100	; 0x64
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f003 f9d4 	bl	800517c <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8001dd4:	4b87      	ldr	r3, [pc, #540]	; (8001ff4 <main+0x69c>)
 8001dd6:	781a      	ldrb	r2, [r3, #0]
 8001dd8:	4b82      	ldr	r3, [pc, #520]	; (8001fe4 <main+0x68c>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	f000 80a8 	beq.w	8001f32 <main+0x5da>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8001de2:	4b80      	ldr	r3, [pc, #512]	; (8001fe4 <main+0x68c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	1d5a      	adds	r2, r3, #5
 8001de8:	4b83      	ldr	r3, [pc, #524]	; (8001ff8 <main+0x6a0>)
 8001dea:	fb83 1302 	smull	r1, r3, r3, r2
 8001dee:	4413      	add	r3, r2
 8001df0:	1099      	asrs	r1, r3, #2
 8001df2:	17d3      	asrs	r3, r2, #31
 8001df4:	1ac9      	subs	r1, r1, r3
 8001df6:	460b      	mov	r3, r1
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	1a5b      	subs	r3, r3, r1
 8001dfc:	1ad1      	subs	r1, r2, r3
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	; (8001ffc <main+0x6a4>)
 8001e00:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e04:	2300      	movs	r3, #0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	2301      	movs	r3, #1
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	4b7c      	ldr	r3, [pc, #496]	; (8002000 <main+0x6a8>)
 8001e0e:	218c      	movs	r1, #140	; 0x8c
 8001e10:	2005      	movs	r0, #5
 8001e12:	f003 f9b3 	bl	800517c <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 8001e16:	4b73      	ldr	r3, [pc, #460]	; (8001fe4 <main+0x68c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	1d9a      	adds	r2, r3, #6
 8001e1c:	4b76      	ldr	r3, [pc, #472]	; (8001ff8 <main+0x6a0>)
 8001e1e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e22:	4413      	add	r3, r2
 8001e24:	1099      	asrs	r1, r3, #2
 8001e26:	17d3      	asrs	r3, r2, #31
 8001e28:	1ac9      	subs	r1, r1, r3
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	1a5b      	subs	r3, r3, r1
 8001e30:	1ad1      	subs	r1, r2, r3
 8001e32:	4b72      	ldr	r3, [pc, #456]	; (8001ffc <main+0x6a4>)
 8001e34:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001e38:	23ff      	movs	r3, #255	; 0xff
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <main+0x6a8>)
 8001e42:	218c      	movs	r1, #140	; 0x8c
 8001e44:	2005      	movs	r0, #5
 8001e46:	f003 f999 	bl	800517c <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 8001e4a:	4b68      	ldr	r3, [pc, #416]	; (8001fec <main+0x694>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f103 010a 	add.w	r1, r3, #10
 8001e52:	4b6c      	ldr	r3, [pc, #432]	; (8002004 <main+0x6ac>)
 8001e54:	fb83 2301 	smull	r2, r3, r3, r1
 8001e58:	105a      	asrs	r2, r3, #1
 8001e5a:	17cb      	asrs	r3, r1, #31
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	1aca      	subs	r2, r1, r3
 8001e68:	4b67      	ldr	r3, [pc, #412]	; (8002008 <main+0x6b0>)
 8001e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	2301      	movs	r3, #1
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <main+0x6a8>)
 8001e78:	218c      	movs	r1, #140	; 0x8c
 8001e7a:	2096      	movs	r0, #150	; 0x96
 8001e7c:	f003 f97e 	bl	800517c <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 8001e80:	4b5a      	ldr	r3, [pc, #360]	; (8001fec <main+0x694>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f103 010b 	add.w	r1, r3, #11
 8001e88:	4b5e      	ldr	r3, [pc, #376]	; (8002004 <main+0x6ac>)
 8001e8a:	fb83 2301 	smull	r2, r3, r3, r1
 8001e8e:	105a      	asrs	r2, r3, #1
 8001e90:	17cb      	asrs	r3, r1, #31
 8001e92:	1ad2      	subs	r2, r2, r3
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	1aca      	subs	r2, r1, r3
 8001e9e:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <main+0x6b0>)
 8001ea0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ea4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	4b54      	ldr	r3, [pc, #336]	; (8002000 <main+0x6a8>)
 8001eb0:	218c      	movs	r1, #140	; 0x8c
 8001eb2:	2096      	movs	r0, #150	; 0x96
 8001eb4:	f003 f962 	bl	800517c <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 8001eb8:	4b54      	ldr	r3, [pc, #336]	; (800200c <main+0x6b4>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b54      	ldr	r3, [pc, #336]	; (8002010 <main+0x6b8>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <main+0x6bc>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4951      	ldr	r1, [pc, #324]	; (8002018 <main+0x6c0>)
 8001ed2:	f017 ffe1 	bl	8019e98 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8001ed6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001eda:	2300      	movs	r3, #0
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <main+0x6a8>)
 8001ee4:	218c      	movs	r1, #140	; 0x8c
 8001ee6:	20fa      	movs	r0, #250	; 0xfa
 8001ee8:	f003 f948 	bl	800517c <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8001eec:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <main+0x690>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <main+0x694>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <main+0x698>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	460b      	mov	r3, r1
 8001f04:	4944      	ldr	r1, [pc, #272]	; (8002018 <main+0x6c0>)
 8001f06:	f017 ffc7 	bl	8019e98 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 8001f0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2301      	movs	r3, #1
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	4b39      	ldr	r3, [pc, #228]	; (8002000 <main+0x6a8>)
 8001f1a:	218c      	movs	r1, #140	; 0x8c
 8001f1c:	20fa      	movs	r0, #250	; 0xfa
 8001f1e:	f003 f92d 	bl	800517c <LCD_Font>

						rtcDayLast = rtcDay;
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <main+0x68c>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	4b33      	ldr	r3, [pc, #204]	; (8001ff4 <main+0x69c>)
 8001f28:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <main+0x690>)
 8001f2c:	781a      	ldrb	r2, [r3, #0]
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <main+0x6b4>)
 8001f30:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <main+0x694>)
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	4b36      	ldr	r3, [pc, #216]	; (8002010 <main+0x6b8>)
 8001f38:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <main+0x698>)
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	4b35      	ldr	r3, [pc, #212]	; (8002014 <main+0x6bc>)
 8001f40:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <main+0x678>)
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <main+0x688>)
 8001f48:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	; (8001fcc <main+0x674>)
 8001f4c:	781a      	ldrb	r2, [r3, #0]
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <main+0x670>)
 8001f50:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	f7fe fa47 	bl	80003e8 <BME280_getTemperature>
 8001f5a:	ee10 3a10 	vmov	r3, s0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f016 fb62 	bl	8018628 <__aeabi_f2d>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	492c      	ldr	r1, [pc, #176]	; (800201c <main+0x6c4>)
 8001f6a:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f72:	f7fe fab1 	bl	80004d8 <BME280_getHumidity>
 8001f76:	ee10 3a10 	vmov	r3, s0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f016 fb54 	bl	8018628 <__aeabi_f2d>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4926      	ldr	r1, [pc, #152]	; (8002020 <main+0x6c8>)
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 8001f8a:	f7fe fb45 	bl	8000618 <BME280_getPressure>
 8001f8e:	eef0 7a40 	vmov.f32	s15, s0
 8001f92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f96:	ee17 3a90 	vmov	r3, s15
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <main+0x6cc>)
 8001f9e:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <main+0x6cc>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001fa8:	f240 8721 	bls.w	8002dee <main+0x1496>
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <main+0x6cc>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	f240 424b 	movw	r2, #1099	; 0x44b
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	f200 871a 	bhi.w	8002dee <main+0x1496>
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <main+0x6c4>)
 8001fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fc0:	e032      	b.n	8002028 <main+0x6d0>
 8001fc2:	bf00      	nop
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	20000001 	.word	0x20000001
 8001fcc:	20000456 	.word	0x20000456
 8001fd0:	20000457 	.word	0x20000457
 8001fd4:	0805181c 	.word	0x0805181c
 8001fd8:	080517c8 	.word	0x080517c8
 8001fdc:	00ffa500 	.word	0x00ffa500
 8001fe0:	20000002 	.word	0x20000002
 8001fe4:	20000458 	.word	0x20000458
 8001fe8:	20000459 	.word	0x20000459
 8001fec:	2000045a 	.word	0x2000045a
 8001ff0:	2000045b 	.word	0x2000045b
 8001ff4:	2000045c 	.word	0x2000045c
 8001ff8:	92492493 	.word	0x92492493
 8001ffc:	20000008 	.word	0x20000008
 8002000:	08029130 	.word	0x08029130
 8002004:	2aaaaaab 	.word	0x2aaaaaab
 8002008:	20000024 	.word	0x20000024
 800200c:	2000045d 	.word	0x2000045d
 8002010:	2000045e 	.word	0x2000045e
 8002014:	2000045f 	.word	0x2000045f
 8002018:	08051824 	.word	0x08051824
 800201c:	20000460 	.word	0x20000460
 8002020:	20000470 	.word	0x20000470
 8002024:	200004a0 	.word	0x200004a0
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b8a      	ldr	r3, [pc, #552]	; (8002258 <main+0x900>)
 800202e:	f016 fdc5 	bl	8018bbc <__aeabi_dcmplt>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 86da 	beq.w	8002dee <main+0x1496>
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <main+0x904>)
 800203c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	4b86      	ldr	r3, [pc, #536]	; (8002260 <main+0x908>)
 8002046:	f016 fdd7 	bl	8018bf8 <__aeabi_dcmpgt>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 86ce 	beq.w	8002dee <main+0x1496>
 8002052:	4b84      	ldr	r3, [pc, #528]	; (8002264 <main+0x90c>)
 8002054:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	f016 fdca 	bl	8018bf8 <__aeabi_dcmpgt>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 86c1 	beq.w	8002dee <main+0x1496>
 800206c:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <main+0x90c>)
 800206e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	4b7c      	ldr	r3, [pc, #496]	; (8002268 <main+0x910>)
 8002078:	f016 fda0 	bl	8018bbc <__aeabi_dcmplt>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 86b5 	beq.w	8002dee <main+0x1496>

					if (temperature != temperatureLast) {
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <main+0x904>)
 8002086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208a:	4b78      	ldr	r3, [pc, #480]	; (800226c <main+0x914>)
 800208c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002090:	f016 fd8a 	bl	8018ba8 <__aeabi_dcmpeq>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 8120 	bne.w	80022dc <main+0x984>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 800209c:	4b73      	ldr	r3, [pc, #460]	; (800226c <main+0x914>)
 800209e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	4b72      	ldr	r3, [pc, #456]	; (8002270 <main+0x918>)
 80020a8:	f016 fd9c 	bl	8018be4 <__aeabi_dcmpge>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d116      	bne.n	80020e0 <main+0x788>
 80020b2:	4b6e      	ldr	r3, [pc, #440]	; (800226c <main+0x914>)
 80020b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	f016 fd7c 	bl	8018bbc <__aeabi_dcmplt>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01c      	beq.n	8002104 <main+0x7ac>
 80020ca:	4b68      	ldr	r3, [pc, #416]	; (800226c <main+0x914>)
 80020cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	4b67      	ldr	r3, [pc, #412]	; (8002274 <main+0x91c>)
 80020d6:	f016 fd8f 	bl	8018bf8 <__aeabi_dcmpgt>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <main+0x7ac>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 80020e0:	4b62      	ldr	r3, [pc, #392]	; (800226c <main+0x914>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	1d38      	adds	r0, r7, #4
 80020e8:	4963      	ldr	r1, [pc, #396]	; (8002278 <main+0x920>)
 80020ea:	f017 fed5 	bl	8019e98 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80020ee:	1d3a      	adds	r2, r7, #4
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2301      	movs	r3, #1
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4b60      	ldr	r3, [pc, #384]	; (800227c <main+0x924>)
 80020fa:	21bb      	movs	r1, #187	; 0xbb
 80020fc:	2001      	movs	r0, #1
 80020fe:	f003 f83d 	bl	800517c <LCD_Font>
 8002102:	e04c      	b.n	800219e <main+0x846>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002104:	4b59      	ldr	r3, [pc, #356]	; (800226c <main+0x914>)
 8002106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <main+0x918>)
 8002110:	f016 fd54 	bl	8018bbc <__aeabi_dcmplt>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01d      	beq.n	8002156 <main+0x7fe>
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <main+0x914>)
 800211c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	f016 fd66 	bl	8018bf8 <__aeabi_dcmpgt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d011      	beq.n	8002156 <main+0x7fe>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <main+0x914>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	1d38      	adds	r0, r7, #4
 800213a:	494f      	ldr	r1, [pc, #316]	; (8002278 <main+0x920>)
 800213c:	f017 feac 	bl	8019e98 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002140:	1d3a      	adds	r2, r7, #4
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2301      	movs	r3, #1
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	4b4c      	ldr	r3, [pc, #304]	; (800227c <main+0x924>)
 800214c:	21bb      	movs	r1, #187	; 0xbb
 800214e:	201b      	movs	r0, #27
 8002150:	f003 f814 	bl	800517c <LCD_Font>
 8002154:	e023      	b.n	800219e <main+0x846>
						}
						else if (temperatureLast <= -10) {
 8002156:	4b45      	ldr	r3, [pc, #276]	; (800226c <main+0x914>)
 8002158:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b44      	ldr	r3, [pc, #272]	; (8002274 <main+0x91c>)
 8002162:	f016 fd35 	bl	8018bd0 <__aeabi_dcmple>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d018      	beq.n	800219e <main+0x846>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 800216c:	4b3f      	ldr	r3, [pc, #252]	; (800226c <main+0x914>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	f016 fd5f 	bl	8018c38 <__aeabi_d2iz>
 800217a:	4603      	mov	r3, r0
 800217c:	b25b      	sxtb	r3, r3
 800217e:	461a      	mov	r2, r3
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	493f      	ldr	r1, [pc, #252]	; (8002280 <main+0x928>)
 8002184:	4618      	mov	r0, r3
 8002186:	f017 fe87 	bl	8019e98 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 800218a:	1d3a      	adds	r2, r7, #4
 800218c:	2300      	movs	r3, #0
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2301      	movs	r3, #1
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <main+0x924>)
 8002196:	21bb      	movs	r1, #187	; 0xbb
 8002198:	2001      	movs	r0, #1
 800219a:	f002 ffef 	bl	800517c <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <main+0x904>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b31      	ldr	r3, [pc, #196]	; (8002270 <main+0x918>)
 80021aa:	f016 fd1b 	bl	8018be4 <__aeabi_dcmpge>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d116      	bne.n	80021e2 <main+0x88a>
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <main+0x904>)
 80021b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	f016 fcfb 	bl	8018bbc <__aeabi_dcmplt>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01c      	beq.n	8002206 <main+0x8ae>
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <main+0x904>)
 80021ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021d2:	f04f 0200 	mov.w	r2, #0
 80021d6:	4b27      	ldr	r3, [pc, #156]	; (8002274 <main+0x91c>)
 80021d8:	f016 fd0e 	bl	8018bf8 <__aeabi_dcmpgt>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <main+0x8ae>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <main+0x904>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	1d38      	adds	r0, r7, #4
 80021ea:	4923      	ldr	r1, [pc, #140]	; (8002278 <main+0x920>)
 80021ec:	f017 fe54 	bl	8019e98 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80021f0:	1d3a      	adds	r2, r7, #4
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <main+0x92c>)
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2301      	movs	r3, #1
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <main+0x924>)
 80021fc:	21bb      	movs	r1, #187	; 0xbb
 80021fe:	2001      	movs	r0, #1
 8002200:	f002 ffbc 	bl	800517c <LCD_Font>
 8002204:	e064      	b.n	80022d0 <main+0x978>
						}
						else if (temperature < 10 && temperature > 0) {
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <main+0x904>)
 8002208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220c:	f04f 0200 	mov.w	r2, #0
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <main+0x918>)
 8002212:	f016 fcd3 	bl	8018bbc <__aeabi_dcmplt>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d035      	beq.n	8002288 <main+0x930>
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <main+0x904>)
 800221e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f016 fce5 	bl	8018bf8 <__aeabi_dcmpgt>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d029      	beq.n	8002288 <main+0x930>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <main+0x904>)
 8002236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223a:	1d38      	adds	r0, r7, #4
 800223c:	490e      	ldr	r1, [pc, #56]	; (8002278 <main+0x920>)
 800223e:	f017 fe2b 	bl	8019e98 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002242:	1d3a      	adds	r2, r7, #4
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <main+0x92c>)
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	2301      	movs	r3, #1
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <main+0x924>)
 800224e:	21bb      	movs	r1, #187	; 0xbb
 8002250:	201b      	movs	r0, #27
 8002252:	f002 ff93 	bl	800517c <LCD_Font>
 8002256:	e03b      	b.n	80022d0 <main+0x978>
 8002258:	40554000 	.word	0x40554000
 800225c:	20000460 	.word	0x20000460
 8002260:	c0440000 	.word	0xc0440000
 8002264:	20000470 	.word	0x20000470
 8002268:	40590000 	.word	0x40590000
 800226c:	20000468 	.word	0x20000468
 8002270:	40240000 	.word	0x40240000
 8002274:	c0240000 	.word	0xc0240000
 8002278:	08051834 	.word	0x08051834
 800227c:	08029130 	.word	0x08029130
 8002280:	0805183c 	.word	0x0805183c
 8002284:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 8002288:	4bae      	ldr	r3, [pc, #696]	; (8002544 <main+0xbec>)
 800228a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	4bad      	ldr	r3, [pc, #692]	; (8002548 <main+0xbf0>)
 8002294:	f016 fc9c 	bl	8018bd0 <__aeabi_dcmple>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d018      	beq.n	80022d0 <main+0x978>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 800229e:	4ba9      	ldr	r3, [pc, #676]	; (8002544 <main+0xbec>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	f016 fcc6 	bl	8018c38 <__aeabi_d2iz>
 80022ac:	4603      	mov	r3, r0
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	461a      	mov	r2, r3
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	49a5      	ldr	r1, [pc, #660]	; (800254c <main+0xbf4>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f017 fdee 	bl	8019e98 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 80022bc:	1d3a      	adds	r2, r7, #4
 80022be:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <main+0xbf8>)
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	2301      	movs	r3, #1
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	4ba3      	ldr	r3, [pc, #652]	; (8002554 <main+0xbfc>)
 80022c8:	21bb      	movs	r1, #187	; 0xbb
 80022ca:	2001      	movs	r0, #1
 80022cc:	f002 ff56 	bl	800517c <LCD_Font>
						}

						temperatureLast = temperature;
 80022d0:	4b9c      	ldr	r3, [pc, #624]	; (8002544 <main+0xbec>)
 80022d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d6:	49a0      	ldr	r1, [pc, #640]	; (8002558 <main+0xc00>)
 80022d8:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 80022dc:	4b9f      	ldr	r3, [pc, #636]	; (800255c <main+0xc04>)
 80022de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e2:	4b9f      	ldr	r3, [pc, #636]	; (8002560 <main+0xc08>)
 80022e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e8:	f016 fc5e 	bl	8018ba8 <__aeabi_dcmpeq>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15b      	bne.n	80023aa <main+0xa52>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 80022f2:	4b9b      	ldr	r3, [pc, #620]	; (8002560 <main+0xc08>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f107 000c 	add.w	r0, r7, #12
 80022fc:	4999      	ldr	r1, [pc, #612]	; (8002564 <main+0xc0c>)
 80022fe:	f017 fdcb 	bl	8019e98 <siprintf>
						if (humidityLast >= 10)
 8002302:	4b97      	ldr	r3, [pc, #604]	; (8002560 <main+0xc08>)
 8002304:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	4b96      	ldr	r3, [pc, #600]	; (8002568 <main+0xc10>)
 800230e:	f016 fc69 	bl	8018be4 <__aeabi_dcmpge>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00b      	beq.n	8002330 <main+0x9d8>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002318:	f107 020c 	add.w	r2, r7, #12
 800231c:	2300      	movs	r3, #0
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	2301      	movs	r3, #1
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	4b8b      	ldr	r3, [pc, #556]	; (8002554 <main+0xbfc>)
 8002326:	21bb      	movs	r1, #187	; 0xbb
 8002328:	20a0      	movs	r0, #160	; 0xa0
 800232a:	f002 ff27 	bl	800517c <LCD_Font>
 800232e:	e00a      	b.n	8002346 <main+0x9ee>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002330:	f107 020c 	add.w	r2, r7, #12
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2301      	movs	r3, #1
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4b85      	ldr	r3, [pc, #532]	; (8002554 <main+0xbfc>)
 800233e:	21bb      	movs	r1, #187	; 0xbb
 8002340:	20ba      	movs	r0, #186	; 0xba
 8002342:	f002 ff1b 	bl	800517c <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 8002346:	4b85      	ldr	r3, [pc, #532]	; (800255c <main+0xc04>)
 8002348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234c:	f107 000c 	add.w	r0, r7, #12
 8002350:	4984      	ldr	r1, [pc, #528]	; (8002564 <main+0xc0c>)
 8002352:	f017 fda1 	bl	8019e98 <siprintf>
						if (humidity >= 10)
 8002356:	4b81      	ldr	r3, [pc, #516]	; (800255c <main+0xc04>)
 8002358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b81      	ldr	r3, [pc, #516]	; (8002568 <main+0xc10>)
 8002362:	f016 fc3f 	bl	8018be4 <__aeabi_dcmpge>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <main+0xa2e>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 800236c:	f107 020c 	add.w	r2, r7, #12
 8002370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2301      	movs	r3, #1
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	4b76      	ldr	r3, [pc, #472]	; (8002554 <main+0xbfc>)
 800237c:	21bb      	movs	r1, #187	; 0xbb
 800237e:	20a0      	movs	r0, #160	; 0xa0
 8002380:	f002 fefc 	bl	800517c <LCD_Font>
 8002384:	e00b      	b.n	800239e <main+0xa46>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 8002386:	f107 020c 	add.w	r2, r7, #12
 800238a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2301      	movs	r3, #1
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	4b6f      	ldr	r3, [pc, #444]	; (8002554 <main+0xbfc>)
 8002396:	21bb      	movs	r1, #187	; 0xbb
 8002398:	20ba      	movs	r0, #186	; 0xba
 800239a:	f002 feef 	bl	800517c <LCD_Font>

						humidityLast = humidity;
 800239e:	4b6f      	ldr	r3, [pc, #444]	; (800255c <main+0xc04>)
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	496e      	ldr	r1, [pc, #440]	; (8002560 <main+0xc08>)
 80023a6:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80023aa:	4b70      	ldr	r3, [pc, #448]	; (800256c <main+0xc14>)
 80023ac:	881a      	ldrh	r2, [r3, #0]
 80023ae:	4b70      	ldr	r3, [pc, #448]	; (8002570 <main+0xc18>)
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d057      	beq.n	8002466 <main+0xb0e>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02d", pressureLast);
 80023b6:	4b6d      	ldr	r3, [pc, #436]	; (800256c <main+0xc14>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023be:	d309      	bcc.n	80023d4 <main+0xa7c>
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <main+0xc14>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	496a      	ldr	r1, [pc, #424]	; (8002574 <main+0xc1c>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f017 fd63 	bl	8019e98 <siprintf>
 80023d2:	e008      	b.n	80023e6 <main+0xa8e>
						else sprintf(weatherPrintP, "%02dP", pressureLast);
 80023d4:	4b65      	ldr	r3, [pc, #404]	; (800256c <main+0xc14>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4966      	ldr	r1, [pc, #408]	; (8002578 <main+0xc20>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f017 fd59 	bl	8019e98 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 80023e6:	f107 0214 	add.w	r2, r7, #20
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2301      	movs	r3, #1
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	4b58      	ldr	r3, [pc, #352]	; (8002554 <main+0xbfc>)
 80023f4:	21bb      	movs	r1, #187	; 0xbb
 80023f6:	f240 1041 	movw	r0, #321	; 0x141
 80023fa:	f002 febf 	bl	800517c <LCD_Font>

						if (pressure <= 1000) sprintf(weatherPrintP, "%02d", pressure);
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <main+0xc18>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002406:	d809      	bhi.n	800241c <main+0xac4>
 8002408:	4b59      	ldr	r3, [pc, #356]	; (8002570 <main+0xc18>)
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4958      	ldr	r1, [pc, #352]	; (8002574 <main+0xc1c>)
 8002414:	4618      	mov	r0, r3
 8002416:	f017 fd3f 	bl	8019e98 <siprintf>
 800241a:	e008      	b.n	800242e <main+0xad6>
						else sprintf(weatherPrintP, "0%02dP", pressure);
 800241c:	4b54      	ldr	r3, [pc, #336]	; (8002570 <main+0xc18>)
 800241e:	881b      	ldrh	r3, [r3, #0]
 8002420:	461a      	mov	r2, r3
 8002422:	f107 0314 	add.w	r3, r7, #20
 8002426:	4955      	ldr	r1, [pc, #340]	; (800257c <main+0xc24>)
 8002428:	4618      	mov	r0, r3
 800242a:	f017 fd35 	bl	8019e98 <siprintf>
						LCD_Font(321, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 800242e:	f107 0214 	add.w	r2, r7, #20
 8002432:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2301      	movs	r3, #1
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <main+0xbfc>)
 800243e:	21bb      	movs	r1, #187	; 0xbb
 8002440:	f240 1041 	movw	r0, #321	; 0x141
 8002444:	f002 fe9a 	bl	800517c <LCD_Font>
						LCD_Font(321, 187, "0", &DejaVu_Sans_48, 1, BLACK);
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2301      	movs	r3, #1
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <main+0xbfc>)
 8002452:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <main+0xc28>)
 8002454:	21bb      	movs	r1, #187	; 0xbb
 8002456:	f240 1041 	movw	r0, #321	; 0x141
 800245a:	f002 fe8f 	bl	800517c <LCD_Font>

						pressureLast = pressure;
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <main+0xc18>)
 8002460:	881a      	ldrh	r2, [r3, #0]
 8002462:	4b42      	ldr	r3, [pc, #264]	; (800256c <main+0xc14>)
 8002464:	801a      	strh	r2, [r3, #0]
					}

					if (AT24XX_Read(0) != rtcHrs) {
 8002466:	2000      	movs	r0, #0
 8002468:	f7fd ff12 	bl	8000290 <AT24XX_Read>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b44      	ldr	r3, [pc, #272]	; (8002584 <main+0xc2c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	f000 81e1 	beq.w	800283c <main+0xee4>

						AT24XX_Update(0, rtcHrs);
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <main+0xc2c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	2000      	movs	r0, #0
 8002482:	f7fd ff2f 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8002486:	2300      	movs	r3, #0
 8002488:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800248c:	e027      	b.n	80024de <main+0xb86>
 800248e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8002492:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002496:	b29b      	uxth	r3, r3
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	f7fd fef7 	bl	8000290 <AT24XX_Read>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461c      	mov	r4, r3
 80024a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fd feeb 	bl	8000290 <AT24XX_Read>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4619      	mov	r1, r3
 80024be:	4620      	mov	r0, r4
 80024c0:	f7ff fa0c 	bl	80018dc <byteS>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80024cc:	b211      	sxth	r1, r2
 80024ce:	4a2e      	ldr	r2, [pc, #184]	; (8002588 <main+0xc30>)
 80024d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80024d4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80024d8:	3301      	adds	r3, #1
 80024da:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80024de:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80024e2:	2b9a      	cmp	r3, #154	; 0x9a
 80024e4:	d9d3      	bls.n	800248e <main+0xb36>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 80024e6:	239a      	movs	r3, #154	; 0x9a
 80024e8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80024ec:	e00f      	b.n	800250e <main+0xbb6>
 80024ee:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 80024f8:	4923      	ldr	r1, [pc, #140]	; (8002588 <main+0xc30>)
 80024fa:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80024fe:	4a22      	ldr	r2, [pc, #136]	; (8002588 <main+0xc30>)
 8002500:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002504:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002508:	3b01      	subs	r3, #1
 800250a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800250e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1eb      	bne.n	80024ee <main+0xb96>
						hT[0] = (uint16_t) (temperature * 10);
 8002516:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <main+0xbec>)
 8002518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	4b11      	ldr	r3, [pc, #68]	; (8002568 <main+0xc10>)
 8002522:	f016 f8d9 	bl	80186d8 <__aeabi_dmul>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4610      	mov	r0, r2
 800252c:	4619      	mov	r1, r3
 800252e:	f016 fbab 	bl	8018c88 <__aeabi_d2uiz>
 8002532:	4603      	mov	r3, r0
 8002534:	b29b      	uxth	r3, r3
 8002536:	b21a      	sxth	r2, r3
 8002538:	4b13      	ldr	r3, [pc, #76]	; (8002588 <main+0xc30>)
 800253a:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 800253c:	2300      	movs	r3, #0
 800253e:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8002542:	e052      	b.n	80025ea <main+0xc92>
 8002544:	20000460 	.word	0x20000460
 8002548:	c0240000 	.word	0xc0240000
 800254c:	0805183c 	.word	0x0805183c
 8002550:	00ffa500 	.word	0x00ffa500
 8002554:	08029130 	.word	0x08029130
 8002558:	20000468 	.word	0x20000468
 800255c:	20000470 	.word	0x20000470
 8002560:	20000478 	.word	0x20000478
 8002564:	08051844 	.word	0x08051844
 8002568:	40240000 	.word	0x40240000
 800256c:	200004a2 	.word	0x200004a2
 8002570:	200004a0 	.word	0x200004a0
 8002574:	0805181c 	.word	0x0805181c
 8002578:	0805184c 	.word	0x0805184c
 800257c:	08051854 	.word	0x08051854
 8002580:	0805185c 	.word	0x0805185c
 8002584:	20000457 	.word	0x20000457
 8002588:	200004a4 	.word	0x200004a4
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 800258c:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8002590:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002594:	b29b      	uxth	r3, r3
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	b29c      	uxth	r4, r3
 800259a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800259e:	4a86      	ldr	r2, [pc, #536]	; (80027b8 <main+0xe60>)
 80025a0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff f97c 	bl	80018a4 <byteL>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7fd fe97 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 80025b6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	b29b      	uxth	r3, r3
 80025be:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 80025c2:	b29c      	uxth	r4, r3
 80025c4:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80025c8:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <main+0xe60>)
 80025ca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff f974 	bl	80018be <byteH>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4619      	mov	r1, r3
 80025da:	4620      	mov	r0, r4
 80025dc:	f7fd fe82 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 80025e0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80025ea:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80025ee:	2b9a      	cmp	r3, #154	; 0x9a
 80025f0:	d9cc      	bls.n	800258c <main+0xc34>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80025f8:	e027      	b.n	800264a <main+0xcf2>
 80025fa:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80025fe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002602:	b29b      	uxth	r3, r3
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	b29b      	uxth	r3, r3
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fe41 	bl	8000290 <AT24XX_Read>
 800260e:	4603      	mov	r3, r0
 8002610:	461c      	mov	r4, r3
 8002612:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	b29b      	uxth	r3, r3
 800261a:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fe35 	bl	8000290 <AT24XX_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	4619      	mov	r1, r3
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff f956 	bl	80018dc <byteS>
 8002630:	4603      	mov	r3, r0
 8002632:	461a      	mov	r2, r3
 8002634:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002638:	b211      	sxth	r1, r2
 800263a:	4a60      	ldr	r2, [pc, #384]	; (80027bc <main+0xe64>)
 800263c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002640:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002644:	3301      	adds	r3, #1
 8002646:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800264a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800264e:	2b9a      	cmp	r3, #154	; 0x9a
 8002650:	d9d3      	bls.n	80025fa <main+0xca2>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 8002652:	239a      	movs	r3, #154	; 0x9a
 8002654:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002658:	e00f      	b.n	800267a <main+0xd22>
 800265a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800265e:	1e5a      	subs	r2, r3, #1
 8002660:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002664:	4955      	ldr	r1, [pc, #340]	; (80027bc <main+0xe64>)
 8002666:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800266a:	4a54      	ldr	r2, [pc, #336]	; (80027bc <main+0xe64>)
 800266c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002670:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002674:	3b01      	subs	r3, #1
 8002676:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800267a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1eb      	bne.n	800265a <main+0xd02>
						hH[0] = (uint16_t) (humidity * 10);
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <main+0xe68>)
 8002684:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <main+0xe6c>)
 800268e:	f016 f823 	bl	80186d8 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f016 faf5 	bl	8018c88 <__aeabi_d2uiz>
 800269e:	4603      	mov	r3, r0
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	b21a      	sxth	r2, r3
 80026a4:	4b45      	ldr	r3, [pc, #276]	; (80027bc <main+0xe64>)
 80026a6:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80026a8:	2300      	movs	r3, #0
 80026aa:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80026ae:	e02e      	b.n	800270e <main+0xdb6>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 80026b0:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80026b4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	b29c      	uxth	r4, r3
 80026be:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80026c2:	4a3e      	ldr	r2, [pc, #248]	; (80027bc <main+0xe64>)
 80026c4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff f8ea 	bl	80018a4 <byteL>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	4620      	mov	r0, r4
 80026d6:	f7fd fe05 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 80026da:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 80026e6:	b29c      	uxth	r4, r3
 80026e8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80026ec:	4a33      	ldr	r2, [pc, #204]	; (80027bc <main+0xe64>)
 80026ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f8e2 	bl	80018be <byteH>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4620      	mov	r0, r4
 8002700:	f7fd fdf0 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002704:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002708:	3301      	adds	r3, #1
 800270a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800270e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8002712:	2b9a      	cmp	r3, #154	; 0x9a
 8002714:	d9cc      	bls.n	80026b0 <main+0xd58>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002716:	2300      	movs	r3, #0
 8002718:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800271c:	e027      	b.n	800276e <main+0xe16>
 800271e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002722:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002726:	b29b      	uxth	r3, r3
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	b29b      	uxth	r3, r3
 800272c:	4618      	mov	r0, r3
 800272e:	f7fd fdaf 	bl	8000290 <AT24XX_Read>
 8002732:	4603      	mov	r3, r0
 8002734:	461c      	mov	r4, r3
 8002736:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	b29b      	uxth	r3, r3
 800273e:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	f7fd fda3 	bl	8000290 <AT24XX_Read>
 800274a:	4603      	mov	r3, r0
 800274c:	4619      	mov	r1, r3
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff f8c4 	bl	80018dc <byteS>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800275c:	b211      	sxth	r1, r2
 800275e:	4a1a      	ldr	r2, [pc, #104]	; (80027c8 <main+0xe70>)
 8002760:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002764:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002768:	3301      	adds	r3, #1
 800276a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800276e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002772:	2b9a      	cmp	r3, #154	; 0x9a
 8002774:	d9d3      	bls.n	800271e <main+0xdc6>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 8002776:	239a      	movs	r3, #154	; 0x9a
 8002778:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800277c:	e00f      	b.n	800279e <main+0xe46>
 800277e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002782:	1e5a      	subs	r2, r3, #1
 8002784:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002788:	490f      	ldr	r1, [pc, #60]	; (80027c8 <main+0xe70>)
 800278a:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <main+0xe70>)
 8002790:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002794:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8002798:	3b01      	subs	r3, #1
 800279a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800279e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1eb      	bne.n	800277e <main+0xe26>
						hP[0] = (uint16_t)pressure;
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <main+0xe74>)
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b21a      	sxth	r2, r3
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <main+0xe70>)
 80027ae:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80027b6:	e03a      	b.n	800282e <main+0xed6>
 80027b8:	200004a4 	.word	0x200004a4
 80027bc:	200005dc 	.word	0x200005dc
 80027c0:	20000470 	.word	0x20000470
 80027c4:	40240000 	.word	0x40240000
 80027c8:	20000714 	.word	0x20000714
 80027cc:	200004a0 	.word	0x200004a0
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 80027d0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80027d4:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 80027d8:	b29b      	uxth	r3, r3
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	b29c      	uxth	r4, r3
 80027de:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80027e2:	4abc      	ldr	r2, [pc, #752]	; (8002ad4 <main+0x117c>)
 80027e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff f85a 	bl	80018a4 <byteL>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4619      	mov	r1, r3
 80027f4:	4620      	mov	r0, r4
 80027f6:	f7fd fd75 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 80027fa:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002806:	b29c      	uxth	r4, r3
 8002808:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800280c:	4ab1      	ldr	r2, [pc, #708]	; (8002ad4 <main+0x117c>)
 800280e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002812:	b29b      	uxth	r3, r3
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff f852 	bl	80018be <byteH>
 800281a:	4603      	mov	r3, r0
 800281c:	4619      	mov	r1, r3
 800281e:	4620      	mov	r0, r4
 8002820:	f7fd fd60 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002824:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002828:	3301      	adds	r3, #1
 800282a:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800282e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002832:	2b9a      	cmp	r3, #154	; 0x9a
 8002834:	d9cc      	bls.n	80027d0 <main+0xe78>
						}

						viewGraphs = 0;
 8002836:	4ba8      	ldr	r3, [pc, #672]	; (8002ad8 <main+0x1180>)
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 800283c:	23ff      	movs	r3, #255	; 0xff
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2301      	movs	r3, #1
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2381      	movs	r3, #129	; 0x81
 8002846:	229d      	movs	r2, #157	; 0x9d
 8002848:	21bd      	movs	r1, #189	; 0xbd
 800284a:	2002      	movs	r0, #2
 800284c:	f001 fce2 	bl	8004214 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002850:	4ba2      	ldr	r3, [pc, #648]	; (8002adc <main+0x1184>)
 8002852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4ba1      	ldr	r3, [pc, #644]	; (8002ae0 <main+0x1188>)
 800285c:	f015 ff3c 	bl	80186d8 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4610      	mov	r0, r2
 8002866:	4619      	mov	r1, r3
 8002868:	f016 f9e6 	bl	8018c38 <__aeabi_d2iz>
 800286c:	4603      	mov	r3, r0
 800286e:	b21b      	sxth	r3, r3
 8002870:	b298      	uxth	r0, r3
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	f44f 7291 	mov.w	r2, #290	; 0x122
 800287c:	21e2      	movs	r1, #226	; 0xe2
 800287e:	f7fe ffe5 	bl	800184c <map>
 8002882:	ec53 2b10 	vmov	r2, r3, d0
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f016 f9d5 	bl	8018c38 <__aeabi_d2iz>
 800288e:	4603      	mov	r3, r0
 8002890:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap < 0) valMap = 0;
 8002894:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002898:	2b00      	cmp	r3, #0
 800289a:	da02      	bge.n	80028a2 <main+0xf4a>
 800289c:	2300      	movs	r3, #0
 800289e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap > 127) valMap = 127;
 80028a2:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80028a6:	2b7f      	cmp	r3, #127	; 0x7f
 80028a8:	dd02      	ble.n	80028b0 <main+0xf58>
 80028aa:	237f      	movs	r3, #127	; 0x7f
 80028ac:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 80028b0:	2300      	movs	r3, #0
 80028b2:	9301      	str	r3, [sp, #4]
 80028b4:	2301      	movs	r3, #1
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	f240 133d 	movw	r3, #317	; 0x13d
 80028bc:	229e      	movs	r2, #158	; 0x9e
 80028be:	21bf      	movs	r1, #191	; 0xbf
 80028c0:	209e      	movs	r0, #158	; 0x9e
 80028c2:	f001 fb3f 	bl	8003f44 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028c6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d023      	beq.n	8002916 <main+0xfbe>
 80028ce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80028d2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80028d6:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028d8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80028dc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80028ea:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80028ee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	2100      	movs	r1, #0
 80028fc:	f001 fa01 	bl	8003d02 <RGB>
 8002900:	4603      	mov	r3, r0
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	2301      	movs	r3, #1
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	f240 133d 	movw	r3, #317	; 0x13d
 800290c:	229e      	movs	r2, #158	; 0x9e
 800290e:	4621      	mov	r1, r4
 8002910:	209e      	movs	r0, #158	; 0x9e
 8002912:	f001 fb17 	bl	8003f44 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002916:	23ff      	movs	r3, #255	; 0xff
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2301      	movs	r3, #1
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2381      	movs	r3, #129	; 0x81
 8002920:	229d      	movs	r2, #157	; 0x9d
 8002922:	21bd      	movs	r1, #189	; 0xbd
 8002924:	20a1      	movs	r0, #161	; 0xa1
 8002926:	f001 fc75 	bl	8004214 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 800292a:	4b6e      	ldr	r3, [pc, #440]	; (8002ae4 <main+0x118c>)
 800292c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <main+0x1188>)
 8002936:	f015 fecf 	bl	80186d8 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
 8002942:	f016 f979 	bl	8018c38 <__aeabi_d2iz>
 8002946:	4603      	mov	r3, r0
 8002948:	b21b      	sxth	r3, r3
 800294a:	b298      	uxth	r0, r3
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	2300      	movs	r3, #0
 8002952:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002956:	2150      	movs	r1, #80	; 0x50
 8002958:	f7fe ff78 	bl	800184c <map>
 800295c:	ec53 2b10 	vmov	r2, r3, d0
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f016 f968 	bl	8018c38 <__aeabi_d2iz>
 8002968:	4603      	mov	r3, r0
 800296a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap < 0) valMap = 0;
 800296e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002972:	2b00      	cmp	r3, #0
 8002974:	da02      	bge.n	800297c <main+0x1024>
 8002976:	2300      	movs	r3, #0
 8002978:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap > 127) valMap = 127;
 800297c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002980:	2b7f      	cmp	r3, #127	; 0x7f
 8002982:	dd02      	ble.n	800298a <main+0x1032>
 8002984:	237f      	movs	r3, #127	; 0x7f
 8002986:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 800298a:	2300      	movs	r3, #0
 800298c:	9301      	str	r3, [sp, #4]
 800298e:	2301      	movs	r3, #1
 8002990:	9300      	str	r3, [sp, #0]
 8002992:	f240 133d 	movw	r3, #317	; 0x13d
 8002996:	f240 123d 	movw	r2, #317	; 0x13d
 800299a:	21bf      	movs	r1, #191	; 0xbf
 800299c:	f240 103d 	movw	r0, #317	; 0x13d
 80029a0:	f001 fad0 	bl	8003f44 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029a4:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d025      	beq.n	80029f8 <main+0x10a0>
 80029ac:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80029b0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 80029b4:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029b6:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80029ba:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 80029c8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 80029cc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	2100      	movs	r1, #0
 80029da:	f001 f992 	bl	8003d02 <RGB>
 80029de:	4603      	mov	r3, r0
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	2301      	movs	r3, #1
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	f240 133d 	movw	r3, #317	; 0x13d
 80029ea:	f240 123d 	movw	r2, #317	; 0x13d
 80029ee:	4621      	mov	r1, r4
 80029f0:	f240 103d 	movw	r0, #317	; 0x13d
 80029f4:	f001 faa6 	bl	8003f44 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 80029f8:	23ff      	movs	r3, #255	; 0xff
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	2301      	movs	r3, #1
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2381      	movs	r3, #129	; 0x81
 8002a02:	229d      	movs	r2, #157	; 0x9d
 8002a04:	21bd      	movs	r1, #189	; 0xbd
 8002a06:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002a0a:	f001 fc03 	bl	8004214 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002a0e:	4b36      	ldr	r3, [pc, #216]	; (8002ae8 <main+0x1190>)
 8002a10:	8818      	ldrh	r0, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	f240 4229 	movw	r2, #1065	; 0x429
 8002a1c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002a20:	f7fe ff14 	bl	800184c <map>
 8002a24:	ec53 2b10 	vmov	r2, r3, d0
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f016 f904 	bl	8018c38 <__aeabi_d2iz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap < 0) valMap = 0;
 8002a36:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	da02      	bge.n	8002a44 <main+0x10ec>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					if (valMap > 127) valMap = 127;
 8002a44:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002a48:	2b7f      	cmp	r3, #127	; 0x7f
 8002a4a:	dd02      	ble.n	8002a52 <main+0x10fa>
 8002a4c:	237f      	movs	r3, #127	; 0x7f
 8002a4e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002a52:	2300      	movs	r3, #0
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	2301      	movs	r3, #1
 8002a58:	9300      	str	r3, [sp, #0]
 8002a5a:	f240 133d 	movw	r3, #317	; 0x13d
 8002a5e:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002a62:	21bf      	movs	r1, #191	; 0xbf
 8002a64:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002a68:	f001 fa6c 	bl	8003f44 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a6c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d025      	beq.n	8002ac0 <main+0x1168>
 8002a74:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a78:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002a7c:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a7e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002a82:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002a90:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002a94:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	f001 f92e 	bl	8003d02 <RGB>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	9301      	str	r3, [sp, #4]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	f240 133d 	movw	r3, #317	; 0x13d
 8002ab2:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002abc:	f001 fa42 	bl	8003f44 <LCD_Line>

					if (!viewGraphs) {
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <main+0x1180>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f040 8192 	bne.w	8002dee <main+0x1496>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002ad0:	e07b      	b.n	8002bca <main+0x1272>
 8002ad2:	bf00      	nop
 8002ad4:	20000714 	.word	0x20000714
 8002ad8:	20000454 	.word	0x20000454
 8002adc:	20000460 	.word	0x20000460
 8002ae0:	40240000 	.word	0x40240000
 8002ae4:	20000470 	.word	0x20000470
 8002ae8:	200004a0 	.word	0x200004a0
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002aec:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002af0:	4ab3      	ldr	r2, [pc, #716]	; (8002dc0 <main+0x1468>)
 8002af2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002af6:	b298      	uxth	r0, r3
 8002af8:	2380      	movs	r3, #128	; 0x80
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	2300      	movs	r3, #0
 8002afe:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002b02:	21e2      	movs	r1, #226	; 0xe2
 8002b04:	f7fe fea2 	bl	800184c <map>
 8002b08:	ec53 2b10 	vmov	r2, r3, d0
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f016 f892 	bl	8018c38 <__aeabi_d2iz>
 8002b14:	4603      	mov	r3, r0
 8002b16:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap < 0) valMap = 0;
 8002b1a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da02      	bge.n	8002b28 <main+0x11d0>
 8002b22:	2300      	movs	r3, #0
 8002b24:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap > 127) valMap = 127;
 8002b28:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b2e:	dd02      	ble.n	8002b36 <main+0x11de>
 8002b30:	237f      	movs	r3, #127	; 0x7f
 8002b32:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002b36:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b3a:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b3e:	b298      	uxth	r0, r3
 8002b40:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b44:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	f240 133d 	movw	r3, #317	; 0x13d
 8002b56:	21bf      	movs	r1, #191	; 0xbf
 8002b58:	f001 f9f4 	bl	8003f44 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b5c:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d02d      	beq.n	8002bc0 <main+0x1268>
 8002b64:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b68:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b6c:	b29c      	uxth	r4, r3
 8002b6e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002b72:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b76:	b29d      	uxth	r5, r3
 8002b78:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b7c:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002b80:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b82:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002b86:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b94:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002b98:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	f001 f8ac 	bl	8003d02 <RGB>
 8002baa:	4603      	mov	r3, r0
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f240 133d 	movw	r3, #317	; 0x13d
 8002bb6:	4632      	mov	r2, r6
 8002bb8:	4629      	mov	r1, r5
 8002bba:	4620      	mov	r0, r4
 8002bbc:	f001 f9c2 	bl	8003f44 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002bc0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002bca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002bce:	2b9a      	cmp	r3, #154	; 0x9a
 8002bd0:	d98c      	bls.n	8002aec <main+0x1194>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002bd8:	e06e      	b.n	8002cb8 <main+0x1360>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002bda:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002bde:	4a79      	ldr	r2, [pc, #484]	; (8002dc4 <main+0x146c>)
 8002be0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002be4:	b298      	uxth	r0, r3
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002bf0:	2150      	movs	r1, #80	; 0x50
 8002bf2:	f7fe fe2b 	bl	800184c <map>
 8002bf6:	ec53 2b10 	vmov	r2, r3, d0
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f016 f81b 	bl	8018c38 <__aeabi_d2iz>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap < 0) valMap = 0;
 8002c08:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da02      	bge.n	8002c16 <main+0x12be>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap > 127) valMap = 127;
 8002c16:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002c1a:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1c:	dd02      	ble.n	8002c24 <main+0x12cc>
 8002c1e:	237f      	movs	r3, #127	; 0x7f
 8002c20:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002c24:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c28:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c2c:	b298      	uxth	r0, r3
 8002c2e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c32:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	2300      	movs	r3, #0
 8002c3a:	9301      	str	r3, [sp, #4]
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	9300      	str	r3, [sp, #0]
 8002c40:	f240 133d 	movw	r3, #317	; 0x13d
 8002c44:	21bf      	movs	r1, #191	; 0xbf
 8002c46:	f001 f97d 	bl	8003f44 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c4a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d02d      	beq.n	8002cae <main+0x1356>
 8002c52:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c56:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c5a:	b29c      	uxth	r4, r3
 8002c5c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002c60:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c64:	b29d      	uxth	r5, r3
 8002c66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002c6a:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002c6e:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c70:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002c74:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c82:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002c86:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	461a      	mov	r2, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	f001 f835 	bl	8003d02 <RGB>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	f240 133d 	movw	r3, #317	; 0x13d
 8002ca4:	4632      	mov	r2, r6
 8002ca6:	4629      	mov	r1, r5
 8002ca8:	4620      	mov	r0, r4
 8002caa:	f001 f94b 	bl	8003f44 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002cae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002cb8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002cbc:	2b9a      	cmp	r3, #154	; 0x9a
 8002cbe:	d98c      	bls.n	8002bda <main+0x1282>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002cc6:	e073      	b.n	8002db0 <main+0x1458>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002cc8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002ccc:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <main+0x1470>)
 8002cce:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002cd2:	b298      	uxth	r0, r3
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f240 4229 	movw	r2, #1065	; 0x429
 8002cde:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002ce2:	f7fe fdb3 	bl	800184c <map>
 8002ce6:	ec53 2b10 	vmov	r2, r3, d0
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f015 ffa3 	bl	8018c38 <__aeabi_d2iz>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap < 0) valMap = 0;
 8002cf8:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	da02      	bge.n	8002d06 <main+0x13ae>
 8002d00:	2300      	movs	r3, #0
 8002d02:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							if (valMap > 127) valMap = 127;
 8002d06:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002d0a:	2b7f      	cmp	r3, #127	; 0x7f
 8002d0c:	dd02      	ble.n	8002d14 <main+0x13bc>
 8002d0e:	237f      	movs	r3, #127	; 0x7f
 8002d10:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002d14:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002d18:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	b298      	uxth	r0, r3
 8002d20:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002d24:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d28:	3301      	adds	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	2301      	movs	r3, #1
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	f240 133d 	movw	r3, #317	; 0x13d
 8002d38:	21bf      	movs	r1, #191	; 0xbf
 8002d3a:	f001 f903 	bl	8003f44 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d3e:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02f      	beq.n	8002da6 <main+0x144e>
 8002d46:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002d4a:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d4e:	3301      	adds	r3, #1
 8002d50:	b29c      	uxth	r4, r3
 8002d52:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d56:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002d5a:	b29d      	uxth	r5, r3
 8002d5c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002d60:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002d64:	3301      	adds	r3, #1
 8002d66:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d68:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002d6c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d7a:	f9b7 30a0 	ldrsh.w	r3, [r7, #160]	; 0xa0
 8002d7e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f000 ffb9 	bl	8003d02 <RGB>
 8002d90:	4603      	mov	r3, r0
 8002d92:	9301      	str	r3, [sp, #4]
 8002d94:	2301      	movs	r3, #1
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	f240 133d 	movw	r3, #317	; 0x13d
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	4629      	mov	r1, r5
 8002da0:	4620      	mov	r0, r4
 8002da2:	f001 f8cf 	bl	8003f44 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002da6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002daa:	3301      	adds	r3, #1
 8002dac:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002db0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002db4:	2b9a      	cmp	r3, #154	; 0x9a
 8002db6:	d987      	bls.n	8002cc8 <main+0x1370>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002db8:	2300      	movs	r3, #0
 8002dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dbe:	e00e      	b.n	8002dde <main+0x1486>
 8002dc0:	200004a4 	.word	0x200004a4
 8002dc4:	200005dc 	.word	0x200005dc
 8002dc8:	20000714 	.word	0x20000714
 8002dcc:	4a8e      	ldr	r2, [pc, #568]	; (8003008 <main+0x16b0>)
 8002dce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dd2:	6353      	str	r3, [r2, #52]	; 0x34
 8002dd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002dd8:	3301      	adds	r3, #1
 8002dda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de6:	d9f1      	bls.n	8002dcc <main+0x1474>
						viewGraphs = 1;
 8002de8:	4b88      	ldr	r3, [pc, #544]	; (800300c <main+0x16b4>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 8002dee:	4b88      	ldr	r3, [pc, #544]	; (8003010 <main+0x16b8>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8393 	beq.w	800351e <main+0x1bc6>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8002df8:	2202      	movs	r2, #2
 8002dfa:	4986      	ldr	r1, [pc, #536]	; (8003014 <main+0x16bc>)
 8002dfc:	4886      	ldr	r0, [pc, #536]	; (8003018 <main+0x16c0>)
 8002dfe:	f01a fe47 	bl	801da90 <memcmp>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f040 808a 	bne.w	8002f1e <main+0x15c6>

					char val[2];

					val[0] = rx_buffer[2];
 8002e0a:	4b83      	ldr	r3, [pc, #524]	; (8003018 <main+0x16c0>)
 8002e0c:	789b      	ldrb	r3, [r3, #2]
 8002e0e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 8002e12:	4b81      	ldr	r3, [pc, #516]	; (8003018 <main+0x16c0>)
 8002e14:	78db      	ldrb	r3, [r3, #3]
 8002e16:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f016 f983 	bl	801912a <atoi>
 8002e24:	4603      	mov	r3, r0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f92b 	bl	8001084 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 8002e2e:	4b7a      	ldr	r3, [pc, #488]	; (8003018 <main+0x16c0>)
 8002e30:	791b      	ldrb	r3, [r3, #4]
 8002e32:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 8002e36:	4b78      	ldr	r3, [pc, #480]	; (8003018 <main+0x16c0>)
 8002e38:	795b      	ldrb	r3, [r3, #5]
 8002e3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 8002e3e:	f107 0320 	add.w	r3, r7, #32
 8002e42:	4618      	mov	r0, r3
 8002e44:	f016 f971 	bl	801912a <atoi>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe f8f9 	bl	8001044 <DS3231_setMin>

					val[0] = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	4618      	mov	r0, r3
 8002e64:	f016 f961 	bl	801912a <atoi>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe f8c9 	bl	8001004 <DS3231_setSec>

					val[0] = rx_buffer[6];
 8002e72:	4b69      	ldr	r3, [pc, #420]	; (8003018 <main+0x16c0>)
 8002e74:	799b      	ldrb	r3, [r3, #6]
 8002e76:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 8002e7a:	4b67      	ldr	r3, [pc, #412]	; (8003018 <main+0x16c0>)
 8002e7c:	79db      	ldrb	r3, [r3, #7]
 8002e7e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 8002e82:	f107 0320 	add.w	r3, r7, #32
 8002e86:	4618      	mov	r0, r3
 8002e88:	f016 f94f 	bl	801912a <atoi>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7fe f937 	bl	8001104 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8002e96:	4b60      	ldr	r3, [pc, #384]	; (8003018 <main+0x16c0>)
 8002e98:	7a1b      	ldrb	r3, [r3, #8]
 8002e9a:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <main+0x16c0>)
 8002ea0:	7a5b      	ldrb	r3, [r3, #9]
 8002ea2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 8002ea6:	f107 0320 	add.w	r3, r7, #32
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f016 f93d 	bl	801912a <atoi>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fe f945 	bl	8001144 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <main+0x16c0>)
 8002ebc:	7a9b      	ldrb	r3, [r3, #10]
 8002ebe:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 8002ec2:	4b55      	ldr	r3, [pc, #340]	; (8003018 <main+0x16c0>)
 8002ec4:	7adb      	ldrb	r3, [r3, #11]
 8002ec6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 8002eca:	f107 0320 	add.w	r3, r7, #32
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f016 f92b 	bl	801912a <atoi>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fe f953 	bl	8001184 <DS3231_setYear>

					val[1] = rx_buffer[12];
 8002ede:	4b4e      	ldr	r3, [pc, #312]	; (8003018 <main+0x16c0>)
 8002ee0:	7b1b      	ldrb	r3, [r3, #12]
 8002ee2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 8002ee6:	f107 0320 	add.w	r3, r7, #32
 8002eea:	4618      	mov	r0, r3
 8002eec:	f016 f91d 	bl	801912a <atoi>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fe f8e5 	bl	80010c4 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8002efa:	2300      	movs	r3, #0
 8002efc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f00:	e008      	b.n	8002f14 <main+0x15bc>
 8002f02:	4a41      	ldr	r2, [pc, #260]	; (8003008 <main+0x16b0>)
 8002f04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f08:	6353      	str	r3, [r2, #52]	; 0x34
 8002f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f0e:	3301      	adds	r3, #1
 8002f10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1c:	d9f1      	bls.n	8002f02 <main+0x15aa>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 8002f1e:	2202      	movs	r2, #2
 8002f20:	493e      	ldr	r1, [pc, #248]	; (800301c <main+0x16c4>)
 8002f22:	483d      	ldr	r0, [pc, #244]	; (8003018 <main+0x16c0>)
 8002f24:	f01a fdb4 	bl	801da90 <memcmp>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d122      	bne.n	8002f74 <main+0x161c>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 8002f2e:	2300      	movs	r3, #0
 8002f30:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002f34:	e00a      	b.n	8002f4c <main+0x15f4>
 8002f36:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd f9d1 	bl	80002e4 <AT24XX_Update>
 8002f42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002f46:	3301      	adds	r3, #1
 8002f48:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002f4c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d3ef      	bcc.n	8002f36 <main+0x15de>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 8002f56:	4b32      	ldr	r3, [pc, #200]	; (8003020 <main+0x16c8>)
 8002f58:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002f5c:	461d      	mov	r5, r3
 8002f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f62:	682b      	ldr	r3, [r5, #0]
 8002f64:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8002f66:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002f6a:	2364      	movs	r3, #100	; 0x64
 8002f6c:	2214      	movs	r2, #20
 8002f6e:	482d      	ldr	r0, [pc, #180]	; (8003024 <main+0x16cc>)
 8002f70:	f012 f8d3 	bl	801511a <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 8002f74:	2202      	movs	r2, #2
 8002f76:	492c      	ldr	r1, [pc, #176]	; (8003028 <main+0x16d0>)
 8002f78:	4827      	ldr	r0, [pc, #156]	; (8003018 <main+0x16c0>)
 8002f7a:	f01a fd89 	bl	801da90 <memcmp>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f040 82b7 	bne.w	80034f4 <main+0x1b9c>

					char valT[4] = { 0 };
 8002f86:	2300      	movs	r3, #0
 8002f88:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8002f90:	e00f      	b.n	8002fb2 <main+0x165a>
 8002f92:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002f96:	1c9a      	adds	r2, r3, #2
 8002f98:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002f9c:	491e      	ldr	r1, [pc, #120]	; (8003018 <main+0x16c0>)
 8002f9e:	5c8a      	ldrb	r2, [r1, r2]
 8002fa0:	33c0      	adds	r3, #192	; 0xc0
 8002fa2:	443b      	add	r3, r7
 8002fa4:	f803 2c78 	strb.w	r2, [r3, #-120]
 8002fa8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002fac:	3301      	adds	r3, #1
 8002fae:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8002fb2:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d9eb      	bls.n	8002f92 <main+0x163a>

					temperatureRemote = atoi(valT);
 8002fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f016 f8b3 	bl	801912a <atoi>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f015 fb1c 	bl	8018604 <__aeabi_i2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4916      	ldr	r1, [pc, #88]	; (800302c <main+0x16d4>)
 8002fd2:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <main+0x16d4>)
 8002fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	4b13      	ldr	r3, [pc, #76]	; (8003030 <main+0x16d8>)
 8002fe2:	f015 fca3 	bl	801892c <__aeabi_ddiv>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4910      	ldr	r1, [pc, #64]	; (800302c <main+0x16d4>)
 8002fec:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <main+0x16dc>)
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8003004:	e028      	b.n	8003058 <main+0x1700>
 8003006:	bf00      	nop
 8003008:	40010000 	.word	0x40010000
 800300c:	20000454 	.word	0x20000454
 8003010:	2000085c 	.word	0x2000085c
 8003014:	08051860 	.word	0x08051860
 8003018:	2000084c 	.word	0x2000084c
 800301c:	08051864 	.word	0x08051864
 8003020:	0805189c 	.word	0x0805189c
 8003024:	200003c0 	.word	0x200003c0
 8003028:	08051868 	.word	0x08051868
 800302c:	20000480 	.word	0x20000480
 8003030:	40240000 	.word	0x40240000
 8003034:	080517d4 	.word	0x080517d4
 8003038:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800303c:	1d9a      	adds	r2, r3, #6
 800303e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003042:	499d      	ldr	r1, [pc, #628]	; (80032b8 <main+0x1960>)
 8003044:	5c8a      	ldrb	r2, [r1, r2]
 8003046:	33c0      	adds	r3, #192	; 0xc0
 8003048:	443b      	add	r3, r7
 800304a:	f803 2c7c 	strb.w	r2, [r3, #-124]
 800304e:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003052:	3301      	adds	r3, #1
 8003054:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8003058:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800305c:	2b02      	cmp	r3, #2
 800305e:	d9eb      	bls.n	8003038 <main+0x16e0>

					humidityRemote = atoi(valH);
 8003060:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003064:	4618      	mov	r0, r3
 8003066:	f016 f860 	bl	801912a <atoi>
 800306a:	4603      	mov	r3, r0
 800306c:	4618      	mov	r0, r3
 800306e:	f015 fac9 	bl	8018604 <__aeabi_i2d>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4991      	ldr	r1, [pc, #580]	; (80032bc <main+0x1964>)
 8003078:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 800307c:	4b8f      	ldr	r3, [pc, #572]	; (80032bc <main+0x1964>)
 800307e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	4b8e      	ldr	r3, [pc, #568]	; (80032c0 <main+0x1968>)
 8003088:	f015 fc50 	bl	801892c <__aeabi_ddiv>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	498a      	ldr	r1, [pc, #552]	; (80032bc <main+0x1964>)
 8003092:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <main+0x196c>)
 8003098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800309c:	4b8a      	ldr	r3, [pc, #552]	; (80032c8 <main+0x1970>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f015 fd81 	bl	8018ba8 <__aeabi_dcmpeq>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d115      	bne.n	80030d8 <main+0x1780>
 80030ac:	4b85      	ldr	r3, [pc, #532]	; (80032c4 <main+0x196c>)
 80030ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	4b85      	ldr	r3, [pc, #532]	; (80032cc <main+0x1974>)
 80030b8:	f015 fd80 	bl	8018bbc <__aeabi_dcmplt>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <main+0x1780>
 80030c2:	4b80      	ldr	r3, [pc, #512]	; (80032c4 <main+0x196c>)
 80030c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <main+0x1978>)
 80030ce:	f015 fd93 	bl	8018bf8 <__aeabi_dcmpgt>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d118      	bne.n	800310a <main+0x17b2>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030d8:	4b78      	ldr	r3, [pc, #480]	; (80032bc <main+0x1964>)
 80030da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030de:	4b7d      	ldr	r3, [pc, #500]	; (80032d4 <main+0x197c>)
 80030e0:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 80030e4:	f015 fd60 	bl	8018ba8 <__aeabi_dcmpeq>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f040 8202 	bne.w	80034f4 <main+0x1b9c>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 80030f0:	4b72      	ldr	r3, [pc, #456]	; (80032bc <main+0x1964>)
 80030f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f015 fd7b 	bl	8018bf8 <__aeabi_dcmpgt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 81f5 	beq.w	80034f4 <main+0x1b9c>

						remoteSensorLastUpdate = 0;
 800310a:	4b73      	ldr	r3, [pc, #460]	; (80032d8 <main+0x1980>)
 800310c:	2200      	movs	r2, #0
 800310e:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003110:	4b72      	ldr	r3, [pc, #456]	; (80032dc <main+0x1984>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	461a      	mov	r2, r3
 8003116:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800311a:	4971      	ldr	r1, [pc, #452]	; (80032e0 <main+0x1988>)
 800311c:	4618      	mov	r0, r3
 800311e:	f016 febb 	bl	8019e98 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003122:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003126:	2300      	movs	r3, #0
 8003128:	9301      	str	r3, [sp, #4]
 800312a:	2301      	movs	r3, #1
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <main+0x198c>)
 8003130:	2128      	movs	r1, #40	; 0x28
 8003132:	f240 1077 	movw	r0, #375	; 0x177
 8003136:	f002 f821 	bl	800517c <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <main+0x1970>)
 800313c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	4b68      	ldr	r3, [pc, #416]	; (80032e8 <main+0x1990>)
 8003146:	f015 fd43 	bl	8018bd0 <__aeabi_dcmple>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d014      	beq.n	800317a <main+0x1822>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003150:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <main+0x1970>)
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800315a:	4964      	ldr	r1, [pc, #400]	; (80032ec <main+0x1994>)
 800315c:	f016 fe9c 	bl	8019e98 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003160:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003164:	2300      	movs	r3, #0
 8003166:	9301      	str	r3, [sp, #4]
 8003168:	2301      	movs	r3, #1
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4b5d      	ldr	r3, [pc, #372]	; (80032e4 <main+0x198c>)
 800316e:	215a      	movs	r1, #90	; 0x5a
 8003170:	f240 1061 	movw	r0, #353	; 0x161
 8003174:	f002 f802 	bl	800517c <LCD_Font>
 8003178:	e076      	b.n	8003268 <main+0x1910>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 800317a:	4b53      	ldr	r3, [pc, #332]	; (80032c8 <main+0x1970>)
 800317c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	f015 fd18 	bl	8018bbc <__aeabi_dcmplt>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01f      	beq.n	80031d2 <main+0x187a>
 8003192:	4b4d      	ldr	r3, [pc, #308]	; (80032c8 <main+0x1970>)
 8003194:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003198:	f04f 0200 	mov.w	r2, #0
 800319c:	4b52      	ldr	r3, [pc, #328]	; (80032e8 <main+0x1990>)
 800319e:	f015 fd2b 	bl	8018bf8 <__aeabi_dcmpgt>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d014      	beq.n	80031d2 <main+0x187a>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80031a8:	4b47      	ldr	r3, [pc, #284]	; (80032c8 <main+0x1970>)
 80031aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ae:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80031b2:	494e      	ldr	r1, [pc, #312]	; (80032ec <main+0x1994>)
 80031b4:	f016 fe70 	bl	8019e98 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80031b8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80031bc:	2300      	movs	r3, #0
 80031be:	9301      	str	r3, [sp, #4]
 80031c0:	2301      	movs	r3, #1
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <main+0x198c>)
 80031c6:	215a      	movs	r1, #90	; 0x5a
 80031c8:	f240 1081 	movw	r0, #385	; 0x181
 80031cc:	f001 ffd6 	bl	800517c <LCD_Font>
 80031d0:	e04a      	b.n	8003268 <main+0x1910>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <main+0x1970>)
 80031d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	f015 fd0a 	bl	8018bf8 <__aeabi_dcmpgt>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01f      	beq.n	800322a <main+0x18d2>
 80031ea:	4b37      	ldr	r3, [pc, #220]	; (80032c8 <main+0x1970>)
 80031ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	4b32      	ldr	r3, [pc, #200]	; (80032c0 <main+0x1968>)
 80031f6:	f015 fce1 	bl	8018bbc <__aeabi_dcmplt>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d014      	beq.n	800322a <main+0x18d2>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003200:	4b31      	ldr	r3, [pc, #196]	; (80032c8 <main+0x1970>)
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800320a:	4939      	ldr	r1, [pc, #228]	; (80032f0 <main+0x1998>)
 800320c:	f016 fe44 	bl	8019e98 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003210:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003214:	2300      	movs	r3, #0
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2301      	movs	r3, #1
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <main+0x198c>)
 800321e:	215a      	movs	r1, #90	; 0x5a
 8003220:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003224:	f001 ffaa 	bl	800517c <LCD_Font>
 8003228:	e01e      	b.n	8003268 <main+0x1910>
						}
						else if (temperatureRemoteLast >= 10) {
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <main+0x1970>)
 800322c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <main+0x1968>)
 8003236:	f015 fcd5 	bl	8018be4 <__aeabi_dcmpge>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <main+0x1910>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <main+0x1970>)
 8003242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003246:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800324a:	4929      	ldr	r1, [pc, #164]	; (80032f0 <main+0x1998>)
 800324c:	f016 fe24 	bl	8019e98 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003250:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003254:	2300      	movs	r3, #0
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	2301      	movs	r3, #1
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <main+0x198c>)
 800325e:	215a      	movs	r1, #90	; 0x5a
 8003260:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003264:	f001 ff8a 	bl	800517c <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 8003268:	4b16      	ldr	r3, [pc, #88]	; (80032c4 <main+0x196c>)
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	4916      	ldr	r1, [pc, #88]	; (80032c8 <main+0x1970>)
 8003270:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <main+0x1970>)
 8003276:	e9d3 0100 	ldrd	r0, r1, [r3]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <main+0x1990>)
 8003280:	f015 fca6 	bl	8018bd0 <__aeabi_dcmple>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d034      	beq.n	80032f4 <main+0x199c>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800328a:	4b0f      	ldr	r3, [pc, #60]	; (80032c8 <main+0x1970>)
 800328c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003290:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <main+0x1994>)
 8003296:	f016 fdff 	bl	8019e98 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800329a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800329e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a2:	9301      	str	r3, [sp, #4]
 80032a4:	2301      	movs	r3, #1
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <main+0x198c>)
 80032aa:	215a      	movs	r1, #90	; 0x5a
 80032ac:	f240 1061 	movw	r0, #353	; 0x161
 80032b0:	f001 ff64 	bl	800517c <LCD_Font>
 80032b4:	e098      	b.n	80033e8 <main+0x1a90>
 80032b6:	bf00      	nop
 80032b8:	2000084c 	.word	0x2000084c
 80032bc:	20000490 	.word	0x20000490
 80032c0:	40240000 	.word	0x40240000
 80032c4:	20000480 	.word	0x20000480
 80032c8:	20000488 	.word	0x20000488
 80032cc:	40554000 	.word	0x40554000
 80032d0:	c0440000 	.word	0xc0440000
 80032d4:	20000498 	.word	0x20000498
 80032d8:	20000004 	.word	0x20000004
 80032dc:	20000000 	.word	0x20000000
 80032e0:	0805181c 	.word	0x0805181c
 80032e4:	08029130 	.word	0x08029130
 80032e8:	c0240000 	.word	0xc0240000
 80032ec:	0805186c 	.word	0x0805186c
 80032f0:	08051874 	.word	0x08051874
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80032f4:	4bac      	ldr	r3, [pc, #688]	; (80035a8 <main+0x1c50>)
 80032f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032fa:	f04f 0200 	mov.w	r2, #0
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f015 fc5b 	bl	8018bbc <__aeabi_dcmplt>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <main+0x19f6>
 800330c:	4ba6      	ldr	r3, [pc, #664]	; (80035a8 <main+0x1c50>)
 800330e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	4ba5      	ldr	r3, [pc, #660]	; (80035ac <main+0x1c54>)
 8003318:	f015 fc6e 	bl	8018bf8 <__aeabi_dcmpgt>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <main+0x19f6>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003322:	4ba1      	ldr	r3, [pc, #644]	; (80035a8 <main+0x1c50>)
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800332c:	49a0      	ldr	r1, [pc, #640]	; (80035b0 <main+0x1c58>)
 800332e:	f016 fdb3 	bl	8019e98 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 8003332:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	2301      	movs	r3, #1
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <main+0x1c5c>)
 8003342:	215a      	movs	r1, #90	; 0x5a
 8003344:	f240 1081 	movw	r0, #385	; 0x181
 8003348:	f001 ff18 	bl	800517c <LCD_Font>
 800334c:	e04c      	b.n	80033e8 <main+0x1a90>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800334e:	4b96      	ldr	r3, [pc, #600]	; (80035a8 <main+0x1c50>)
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	f015 fc4c 	bl	8018bf8 <__aeabi_dcmpgt>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d020      	beq.n	80033a8 <main+0x1a50>
 8003366:	4b90      	ldr	r3, [pc, #576]	; (80035a8 <main+0x1c50>)
 8003368:	e9d3 0100 	ldrd	r0, r1, [r3]
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	4b91      	ldr	r3, [pc, #580]	; (80035b8 <main+0x1c60>)
 8003372:	f015 fc23 	bl	8018bbc <__aeabi_dcmplt>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <main+0x1a50>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800337c:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <main+0x1c50>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003386:	498d      	ldr	r1, [pc, #564]	; (80035bc <main+0x1c64>)
 8003388:	f016 fd86 	bl	8019e98 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800338c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003394:	9301      	str	r3, [sp, #4]
 8003396:	2301      	movs	r3, #1
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	4b86      	ldr	r3, [pc, #536]	; (80035b4 <main+0x1c5c>)
 800339c:	215a      	movs	r1, #90	; 0x5a
 800339e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80033a2:	f001 feeb 	bl	800517c <LCD_Font>
 80033a6:	e01f      	b.n	80033e8 <main+0x1a90>
						}
						else if (temperatureRemoteLast >= 10) {
 80033a8:	4b7f      	ldr	r3, [pc, #508]	; (80035a8 <main+0x1c50>)
 80033aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	4b81      	ldr	r3, [pc, #516]	; (80035b8 <main+0x1c60>)
 80033b4:	f015 fc16 	bl	8018be4 <__aeabi_dcmpge>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <main+0x1a90>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <main+0x1c50>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80033c8:	497c      	ldr	r1, [pc, #496]	; (80035bc <main+0x1c64>)
 80033ca:	f016 fd65 	bl	8019e98 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80033ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2301      	movs	r3, #1
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4b75      	ldr	r3, [pc, #468]	; (80035b4 <main+0x1c5c>)
 80033de:	215a      	movs	r1, #90	; 0x5a
 80033e0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80033e4:	f001 feca 	bl	800517c <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 80033e8:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <main+0x1c68>)
 80033ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	4b71      	ldr	r3, [pc, #452]	; (80035b8 <main+0x1c60>)
 80033f4:	f015 fbf6 	bl	8018be4 <__aeabi_dcmpge>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d014      	beq.n	8003428 <main+0x1ad0>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <main+0x1c68>)
 8003400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003404:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003408:	4969      	ldr	r1, [pc, #420]	; (80035b0 <main+0x1c58>)
 800340a:	f016 fd45 	bl	8019e98 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800340e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003412:	2300      	movs	r3, #0
 8003414:	9301      	str	r3, [sp, #4]
 8003416:	2301      	movs	r3, #1
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	4b66      	ldr	r3, [pc, #408]	; (80035b4 <main+0x1c5c>)
 800341c:	2128      	movs	r1, #40	; 0x28
 800341e:	f240 1073 	movw	r0, #371	; 0x173
 8003422:	f001 feab 	bl	800517c <LCD_Font>
 8003426:	e01e      	b.n	8003466 <main+0x1b0e>
						}
						else if (humidityRemoteLast < 10) {
 8003428:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <main+0x1c68>)
 800342a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4b61      	ldr	r3, [pc, #388]	; (80035b8 <main+0x1c60>)
 8003434:	f015 fbc2 	bl	8018bbc <__aeabi_dcmplt>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d013      	beq.n	8003466 <main+0x1b0e>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800343e:	4b60      	ldr	r3, [pc, #384]	; (80035c0 <main+0x1c68>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003448:	4959      	ldr	r1, [pc, #356]	; (80035b0 <main+0x1c58>)
 800344a:	f016 fd25 	bl	8019e98 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800344e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003452:	2300      	movs	r3, #0
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	2301      	movs	r3, #1
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <main+0x1c5c>)
 800345c:	2128      	movs	r1, #40	; 0x28
 800345e:	f240 1093 	movw	r0, #403	; 0x193
 8003462:	f001 fe8b 	bl	800517c <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 8003466:	4b57      	ldr	r3, [pc, #348]	; (80035c4 <main+0x1c6c>)
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	4954      	ldr	r1, [pc, #336]	; (80035c0 <main+0x1c68>)
 800346e:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <main+0x1c68>)
 8003474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b4e      	ldr	r3, [pc, #312]	; (80035b8 <main+0x1c60>)
 800347e:	f015 fbb1 	bl	8018be4 <__aeabi_dcmpge>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d015      	beq.n	80034b4 <main+0x1b5c>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003488:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <main+0x1c68>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003492:	4947      	ldr	r1, [pc, #284]	; (80035b0 <main+0x1c58>)
 8003494:	f016 fd00 	bl	8019e98 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003498:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800349c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034a0:	9301      	str	r3, [sp, #4]
 80034a2:	2301      	movs	r3, #1
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <main+0x1c5c>)
 80034a8:	2128      	movs	r1, #40	; 0x28
 80034aa:	f240 1073 	movw	r0, #371	; 0x173
 80034ae:	f001 fe65 	bl	800517c <LCD_Font>
 80034b2:	e01f      	b.n	80034f4 <main+0x1b9c>
						}
						else if (humidityRemoteLast < 10) {
 80034b4:	4b42      	ldr	r3, [pc, #264]	; (80035c0 <main+0x1c68>)
 80034b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	4b3e      	ldr	r3, [pc, #248]	; (80035b8 <main+0x1c60>)
 80034c0:	f015 fb7c 	bl	8018bbc <__aeabi_dcmplt>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d014      	beq.n	80034f4 <main+0x1b9c>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	; (80035c0 <main+0x1c68>)
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80034d4:	4936      	ldr	r1, [pc, #216]	; (80035b0 <main+0x1c58>)
 80034d6:	f016 fcdf 	bl	8019e98 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 80034da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034e2:	9301      	str	r3, [sp, #4]
 80034e4:	2301      	movs	r3, #1
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <main+0x1c5c>)
 80034ea:	2128      	movs	r1, #40	; 0x28
 80034ec:	f240 1093 	movw	r0, #403	; 0x193
 80034f0:	f001 fe44 	bl	800517c <LCD_Font>
						}
					}
				}
				rx_index = 0;
 80034f4:	4b34      	ldr	r3, [pc, #208]	; (80035c8 <main+0x1c70>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8003500:	e009      	b.n	8003516 <main+0x1bbe>
 8003502:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003506:	4a31      	ldr	r2, [pc, #196]	; (80035cc <main+0x1c74>)
 8003508:	2100      	movs	r1, #0
 800350a:	54d1      	strb	r1, [r2, r3]
 800350c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003510:	3301      	adds	r3, #1
 8003512:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8003516:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800351a:	2b0f      	cmp	r3, #15
 800351c:	d9f1      	bls.n	8003502 <main+0x1baa>
			}

			remoteSensorLastUpdate++;
 800351e:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <main+0x1c78>)
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	3301      	adds	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <main+0x1c78>)
 8003528:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <main+0x1c78>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	f240 813e 	bls.w	80037b0 <main+0x1e58>

				if (temperatureRemoteLast && humidityRemoteLast) {
 8003534:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <main+0x1c50>)
 8003536:	e9d3 0100 	ldrd	r0, r1, [r3]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f015 fb31 	bl	8018ba8 <__aeabi_dcmpeq>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	f040 8107 	bne.w	800375c <main+0x1e04>
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <main+0x1c68>)
 8003550:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	f015 fb24 	bl	8018ba8 <__aeabi_dcmpeq>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	f040 80fa 	bne.w	800375c <main+0x1e04>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 8003568:	4b0f      	ldr	r3, [pc, #60]	; (80035a8 <main+0x1c50>)
 800356a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <main+0x1c54>)
 8003574:	f015 fb2c 	bl	8018bd0 <__aeabi_dcmple>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d02a      	beq.n	80035d4 <main+0x1c7c>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <main+0x1c50>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003588:	4909      	ldr	r1, [pc, #36]	; (80035b0 <main+0x1c58>)
 800358a:	f016 fc85 	bl	8019e98 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800358e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003592:	2300      	movs	r3, #0
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	2301      	movs	r3, #1
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <main+0x1c5c>)
 800359c:	215a      	movs	r1, #90	; 0x5a
 800359e:	f240 1061 	movw	r0, #353	; 0x161
 80035a2:	f001 fdeb 	bl	800517c <LCD_Font>
 80035a6:	e08c      	b.n	80036c2 <main+0x1d6a>
 80035a8:	20000488 	.word	0x20000488
 80035ac:	c0240000 	.word	0xc0240000
 80035b0:	0805186c 	.word	0x0805186c
 80035b4:	08029130 	.word	0x08029130
 80035b8:	40240000 	.word	0x40240000
 80035bc:	08051874 	.word	0x08051874
 80035c0:	20000498 	.word	0x20000498
 80035c4:	20000490 	.word	0x20000490
 80035c8:	2000085c 	.word	0x2000085c
 80035cc:	2000084c 	.word	0x2000084c
 80035d0:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80035d4:	4b79      	ldr	r3, [pc, #484]	; (80037bc <main+0x1e64>)
 80035d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f015 faeb 	bl	8018bbc <__aeabi_dcmplt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01f      	beq.n	800362c <main+0x1cd4>
 80035ec:	4b73      	ldr	r3, [pc, #460]	; (80037bc <main+0x1e64>)
 80035ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	4b72      	ldr	r3, [pc, #456]	; (80037c0 <main+0x1e68>)
 80035f8:	f015 fafe 	bl	8018bf8 <__aeabi_dcmpgt>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d014      	beq.n	800362c <main+0x1cd4>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003602:	4b6e      	ldr	r3, [pc, #440]	; (80037bc <main+0x1e64>)
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800360c:	496d      	ldr	r1, [pc, #436]	; (80037c4 <main+0x1e6c>)
 800360e:	f016 fc43 	bl	8019e98 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003612:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003616:	2300      	movs	r3, #0
 8003618:	9301      	str	r3, [sp, #4]
 800361a:	2301      	movs	r3, #1
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	4b6a      	ldr	r3, [pc, #424]	; (80037c8 <main+0x1e70>)
 8003620:	215a      	movs	r1, #90	; 0x5a
 8003622:	f240 1081 	movw	r0, #385	; 0x181
 8003626:	f001 fda9 	bl	800517c <LCD_Font>
 800362a:	e04a      	b.n	80036c2 <main+0x1d6a>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800362c:	4b63      	ldr	r3, [pc, #396]	; (80037bc <main+0x1e64>)
 800362e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	f015 fadd 	bl	8018bf8 <__aeabi_dcmpgt>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01f      	beq.n	8003684 <main+0x1d2c>
 8003644:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <main+0x1e64>)
 8003646:	e9d3 0100 	ldrd	r0, r1, [r3]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	4b5f      	ldr	r3, [pc, #380]	; (80037cc <main+0x1e74>)
 8003650:	f015 fab4 	bl	8018bbc <__aeabi_dcmplt>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d014      	beq.n	8003684 <main+0x1d2c>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800365a:	4b58      	ldr	r3, [pc, #352]	; (80037bc <main+0x1e64>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003664:	495a      	ldr	r1, [pc, #360]	; (80037d0 <main+0x1e78>)
 8003666:	f016 fc17 	bl	8019e98 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800366a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800366e:	2300      	movs	r3, #0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2301      	movs	r3, #1
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4b54      	ldr	r3, [pc, #336]	; (80037c8 <main+0x1e70>)
 8003678:	215a      	movs	r1, #90	; 0x5a
 800367a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 800367e:	f001 fd7d 	bl	800517c <LCD_Font>
 8003682:	e01e      	b.n	80036c2 <main+0x1d6a>
					}
					else if (temperatureRemoteLast >= 10) {
 8003684:	4b4d      	ldr	r3, [pc, #308]	; (80037bc <main+0x1e64>)
 8003686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800368a:	f04f 0200 	mov.w	r2, #0
 800368e:	4b4f      	ldr	r3, [pc, #316]	; (80037cc <main+0x1e74>)
 8003690:	f015 faa8 	bl	8018be4 <__aeabi_dcmpge>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <main+0x1d6a>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800369a:	4b48      	ldr	r3, [pc, #288]	; (80037bc <main+0x1e64>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80036a4:	494a      	ldr	r1, [pc, #296]	; (80037d0 <main+0x1e78>)
 80036a6:	f016 fbf7 	bl	8019e98 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80036aa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80036ae:	2300      	movs	r3, #0
 80036b0:	9301      	str	r3, [sp, #4]
 80036b2:	2301      	movs	r3, #1
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	4b44      	ldr	r3, [pc, #272]	; (80037c8 <main+0x1e70>)
 80036b8:	215a      	movs	r1, #90	; 0x5a
 80036ba:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80036be:	f001 fd5d 	bl	800517c <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 80036c2:	4b44      	ldr	r3, [pc, #272]	; (80037d4 <main+0x1e7c>)
 80036c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	4b3f      	ldr	r3, [pc, #252]	; (80037cc <main+0x1e74>)
 80036ce:	f015 fa89 	bl	8018be4 <__aeabi_dcmpge>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d014      	beq.n	8003702 <main+0x1daa>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036d8:	4b3e      	ldr	r3, [pc, #248]	; (80037d4 <main+0x1e7c>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80036e2:	4938      	ldr	r1, [pc, #224]	; (80037c4 <main+0x1e6c>)
 80036e4:	f016 fbd8 	bl	8019e98 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036e8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80036ec:	2300      	movs	r3, #0
 80036ee:	9301      	str	r3, [sp, #4]
 80036f0:	2301      	movs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <main+0x1e70>)
 80036f6:	2128      	movs	r1, #40	; 0x28
 80036f8:	f240 1073 	movw	r0, #371	; 0x173
 80036fc:	f001 fd3e 	bl	800517c <LCD_Font>
 8003700:	e01e      	b.n	8003740 <main+0x1de8>
					}
					else if (humidityRemoteLast < 10) {
 8003702:	4b34      	ldr	r3, [pc, #208]	; (80037d4 <main+0x1e7c>)
 8003704:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <main+0x1e74>)
 800370e:	f015 fa55 	bl	8018bbc <__aeabi_dcmplt>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d013      	beq.n	8003740 <main+0x1de8>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <main+0x1e7c>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003722:	4928      	ldr	r1, [pc, #160]	; (80037c4 <main+0x1e6c>)
 8003724:	f016 fbb8 	bl	8019e98 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003728:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800372c:	2300      	movs	r3, #0
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2301      	movs	r3, #1
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <main+0x1e70>)
 8003736:	2128      	movs	r1, #40	; 0x28
 8003738:	f240 1093 	movw	r0, #403	; 0x193
 800373c:	f001 fd1e 	bl	800517c <LCD_Font>
					}

					temperatureRemoteLast = 0;
 8003740:	491e      	ldr	r1, [pc, #120]	; (80037bc <main+0x1e64>)
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 800374e:	4921      	ldr	r1, [pc, #132]	; (80037d4 <main+0x1e7c>)
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 800375c:	4b1e      	ldr	r3, [pc, #120]	; (80037d8 <main+0x1e80>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003766:	491d      	ldr	r1, [pc, #116]	; (80037dc <main+0x1e84>)
 8003768:	4618      	mov	r0, r3
 800376a:	f016 fb95 	bl	8019e98 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800376e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003772:	2300      	movs	r3, #0
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2301      	movs	r3, #1
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <main+0x1e70>)
 800377c:	2128      	movs	r1, #40	; 0x28
 800377e:	f240 1077 	movw	r0, #375	; 0x177
 8003782:	f001 fcfb 	bl	800517c <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 8003786:	4b16      	ldr	r3, [pc, #88]	; (80037e0 <main+0x1e88>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	461a      	mov	r2, r3
 800378c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003790:	4912      	ldr	r1, [pc, #72]	; (80037dc <main+0x1e84>)
 8003792:	4618      	mov	r0, r3
 8003794:	f016 fb80 	bl	8019e98 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003798:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <main+0x1e8c>)
 800379e:	9301      	str	r3, [sp, #4]
 80037a0:	2301      	movs	r3, #1
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <main+0x1e70>)
 80037a6:	2128      	movs	r1, #40	; 0x28
 80037a8:	f240 1077 	movw	r0, #375	; 0x177
 80037ac:	f001 fce6 	bl	800517c <LCD_Font>
			}
			rtcSecLast = rtcSec;
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <main+0x1e88>)
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <main+0x1e80>)
 80037b6:	701a      	strb	r2, [r3, #0]
	{
 80037b8:	f7fe b9d5 	b.w	8001b66 <main+0x20e>
 80037bc:	20000488 	.word	0x20000488
 80037c0:	c0240000 	.word	0xc0240000
 80037c4:	0805186c 	.word	0x0805186c
 80037c8:	08029130 	.word	0x08029130
 80037cc:	40240000 	.word	0x40240000
 80037d0:	08051874 	.word	0x08051874
 80037d4:	20000498 	.word	0x20000498
 80037d8:	20000000 	.word	0x20000000
 80037dc:	0805181c 	.word	0x0805181c
 80037e0:	20000455 	.word	0x20000455
 80037e4:	00ffa500 	.word	0x00ffa500

080037e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b094      	sub	sp, #80	; 0x50
 80037ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ee:	f107 0320 	add.w	r3, r7, #32
 80037f2:	2230      	movs	r2, #48	; 0x30
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f015 fcc6 	bl	8019188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800380c:	2300      	movs	r3, #0
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	4b28      	ldr	r3, [pc, #160]	; (80038b4 <SystemClock_Config+0xcc>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <SystemClock_Config+0xcc>)
 8003816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800381a:	6413      	str	r3, [r2, #64]	; 0x40
 800381c:	4b25      	ldr	r3, [pc, #148]	; (80038b4 <SystemClock_Config+0xcc>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003828:	2300      	movs	r3, #0
 800382a:	60bb      	str	r3, [r7, #8]
 800382c:	4b22      	ldr	r3, [pc, #136]	; (80038b8 <SystemClock_Config+0xd0>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a21      	ldr	r2, [pc, #132]	; (80038b8 <SystemClock_Config+0xd0>)
 8003832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <SystemClock_Config+0xd0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003844:	2301      	movs	r3, #1
 8003846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800384e:	2302      	movs	r3, #2
 8003850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003858:	2304      	movs	r3, #4
 800385a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800385c:	23a8      	movs	r3, #168	; 0xa8
 800385e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003860:	2302      	movs	r3, #2
 8003862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003864:	2307      	movs	r3, #7
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003868:	f107 0320 	add.w	r3, r7, #32
 800386c:	4618      	mov	r0, r3
 800386e:	f00d fcaf 	bl	80111d0 <HAL_RCC_OscConfig>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003878:	f000 fa3e 	bl	8003cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800387c:	230f      	movs	r3, #15
 800387e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003880:	2302      	movs	r3, #2
 8003882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800388c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003894:	f107 030c 	add.w	r3, r7, #12
 8003898:	2105      	movs	r1, #5
 800389a:	4618      	mov	r0, r3
 800389c:	f00d ff10 	bl	80116c0 <HAL_RCC_ClockConfig>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80038a6:	f000 fa27 	bl	8003cf8 <Error_Handler>
  }
}
 80038aa:	bf00      	nop
 80038ac:	3750      	adds	r7, #80	; 0x50
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40023800 	.word	0x40023800
 80038b8:	40007000 	.word	0x40007000

080038bc <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80038c2:	463b      	mov	r3, r7
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80038ca:	4b14      	ldr	r3, [pc, #80]	; (800391c <MX_DAC_Init+0x60>)
 80038cc:	4a14      	ldr	r2, [pc, #80]	; (8003920 <MX_DAC_Init+0x64>)
 80038ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80038d0:	4812      	ldr	r0, [pc, #72]	; (800391c <MX_DAC_Init+0x60>)
 80038d2:	f003 f898 	bl	8006a06 <HAL_DAC_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80038dc:	f000 fa0c 	bl	8003cf8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80038e8:	463b      	mov	r3, r7
 80038ea:	2200      	movs	r2, #0
 80038ec:	4619      	mov	r1, r3
 80038ee:	480b      	ldr	r0, [pc, #44]	; (800391c <MX_DAC_Init+0x60>)
 80038f0:	f003 fb0d 	bl	8006f0e <HAL_DAC_ConfigChannel>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80038fa:	f000 f9fd 	bl	8003cf8 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80038fe:	463b      	mov	r3, r7
 8003900:	2210      	movs	r2, #16
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_DAC_Init+0x60>)
 8003906:	f003 fb02 	bl	8006f0e <HAL_DAC_ConfigChannel>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003910:	f000 f9f2 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200002a8 	.word	0x200002a8
 8003920:	40007400 	.word	0x40007400

08003924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <MX_I2C1_Init+0x50>)
 800392a:	4a13      	ldr	r2, [pc, #76]	; (8003978 <MX_I2C1_Init+0x54>)
 800392c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_I2C1_Init+0x50>)
 8003930:	4a12      	ldr	r2, [pc, #72]	; (800397c <MX_I2C1_Init+0x58>)
 8003932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <MX_I2C1_Init+0x50>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_I2C1_Init+0x50>)
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_I2C1_Init+0x50>)
 8003942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <MX_I2C1_Init+0x50>)
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_I2C1_Init+0x50>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <MX_I2C1_Init+0x50>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_I2C1_Init+0x50>)
 800395c:	2200      	movs	r2, #0
 800395e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003960:	4804      	ldr	r0, [pc, #16]	; (8003974 <MX_I2C1_Init+0x50>)
 8003962:	f007 f860 	bl	800aa26 <HAL_I2C_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800396c:	f000 f9c4 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	200002bc 	.word	0x200002bc
 8003978:	40005400 	.word	0x40005400
 800397c:	000186a0 	.word	0x000186a0

08003980 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <MX_SPI2_Init+0x64>)
 8003986:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <MX_SPI2_Init+0x68>)
 8003988:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <MX_SPI2_Init+0x64>)
 800398c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003990:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <MX_SPI2_Init+0x64>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <MX_SPI2_Init+0x64>)
 800399a:	2200      	movs	r2, #0
 800399c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800399e:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80039b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039b4:	2238      	movs	r2, #56	; 0x38
 80039b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039cc:	220a      	movs	r2, #10
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80039d0:	4804      	ldr	r0, [pc, #16]	; (80039e4 <MX_SPI2_Init+0x64>)
 80039d2:	f00e fc95 	bl	8012300 <HAL_SPI_Init>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80039dc:	f000 f98c 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80039e0:	bf00      	nop
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	20000310 	.word	0x20000310
 80039e8:	40003800 	.word	0x40003800

080039ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80039f0:	4b17      	ldr	r3, [pc, #92]	; (8003a50 <MX_SPI3_Init+0x64>)
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <MX_SPI3_Init+0x68>)
 80039f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <MX_SPI3_Init+0x64>)
 80039f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80039fe:	4b14      	ldr	r3, [pc, #80]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a0a:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003a1c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a20:	2238      	movs	r2, #56	; 0x38
 8003a22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a38:	220a      	movs	r2, #10
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003a3c:	4804      	ldr	r0, [pc, #16]	; (8003a50 <MX_SPI3_Init+0x64>)
 8003a3e:	f00e fc5f 	bl	8012300 <HAL_SPI_Init>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003a48:	f000 f956 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000368 	.word	0x20000368
 8003a54:	40003c00 	.word	0x40003c00

08003a58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <MX_USART1_UART_Init+0x50>)
 8003a60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a64:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003a68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a7e:	220c      	movs	r2, #12
 8003a80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a8e:	4805      	ldr	r0, [pc, #20]	; (8003aa4 <MX_USART1_UART_Init+0x4c>)
 8003a90:	f011 f99c 	bl	8014dcc <HAL_UART_Init>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a9a:	f000 f92d 	bl	8003cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a9e:	bf00      	nop
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200003c0 	.word	0x200003c0
 8003aa8:	40011000 	.word	0x40011000

08003aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08c      	sub	sp, #48	; 0x30
 8003ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	4b57      	ldr	r3, [pc, #348]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	4a56      	ldr	r2, [pc, #344]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003acc:	f043 0310 	orr.w	r3, r3, #16
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	4b54      	ldr	r3, [pc, #336]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60bb      	str	r3, [r7, #8]
 8003ae2:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a4f      	ldr	r2, [pc, #316]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003ae8:	f043 0304 	orr.w	r3, r3, #4
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	4b49      	ldr	r3, [pc, #292]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4a48      	ldr	r2, [pc, #288]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b08:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0a:	4b46      	ldr	r3, [pc, #280]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1e:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6313      	str	r3, [r2, #48]	; 0x30
 8003b26:	4b3f      	ldr	r3, [pc, #252]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	617b      	str	r3, [r7, #20]
 8003b36:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	4a3a      	ldr	r2, [pc, #232]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6313      	str	r3, [r2, #48]	; 0x30
 8003b42:	4b38      	ldr	r3, [pc, #224]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b56:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5e:	4b31      	ldr	r3, [pc, #196]	; (8003c24 <MX_GPIO_Init+0x178>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	2140      	movs	r1, #64	; 0x40
 8003b6e:	482e      	ldr	r0, [pc, #184]	; (8003c28 <MX_GPIO_Init+0x17c>)
 8003b70:	f006 feda 	bl	800a928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	482b      	ldr	r0, [pc, #172]	; (8003c28 <MX_GPIO_Init+0x17c>)
 8003b7a:	f006 fed5 	bl	800a928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003b84:	4829      	ldr	r0, [pc, #164]	; (8003c2c <MX_GPIO_Init+0x180>)
 8003b86:	f006 fecf 	bl	800a928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	4828      	ldr	r0, [pc, #160]	; (8003c30 <MX_GPIO_Init+0x184>)
 8003b90:	f006 feca 	bl	800a928 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003b94:	2318      	movs	r3, #24
 8003b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ba0:	f107 031c 	add.w	r3, r7, #28
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4823      	ldr	r0, [pc, #140]	; (8003c34 <MX_GPIO_Init+0x188>)
 8003ba8:	f006 fc0e 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003bac:	23c0      	movs	r3, #192	; 0xc0
 8003bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4819      	ldr	r0, [pc, #100]	; (8003c28 <MX_GPIO_Init+0x17c>)
 8003bc4:	f006 fc00 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4814      	ldr	r0, [pc, #80]	; (8003c2c <MX_GPIO_Init+0x180>)
 8003bdc:	f006 fbf4 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be6:	2301      	movs	r3, #1
 8003be8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <MX_GPIO_Init+0x180>)
 8003bfa:	f006 fbe5 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003bfe:	2304      	movs	r3, #4
 8003c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c02:	2301      	movs	r3, #1
 8003c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	4806      	ldr	r0, [pc, #24]	; (8003c30 <MX_GPIO_Init+0x184>)
 8003c16:	f006 fbd7 	bl	800a3c8 <HAL_GPIO_Init>

}
 8003c1a:	bf00      	nop
 8003c1c:	3730      	adds	r7, #48	; 0x30
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	40023800 	.word	0x40023800
 8003c28:	40020000 	.word	0x40020000
 8003c2c:	40020800 	.word	0x40020800
 8003c30:	40020c00 	.word	0x40020c00
 8003c34:	40021000 	.word	0x40021000

08003c38 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003c3e:	1d3b      	adds	r3, r7, #4
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
 8003c4c:	615a      	str	r2, [r3, #20]
 8003c4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003c50:	4b27      	ldr	r3, [pc, #156]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c52:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003c56:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003c58:	4b25      	ldr	r3, [pc, #148]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c5a:	4a26      	ldr	r2, [pc, #152]	; (8003cf4 <MX_FSMC_Init+0xbc>)
 8003c5c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003c5e:	4b24      	ldr	r3, [pc, #144]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003c64:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003c70:	4b1f      	ldr	r3, [pc, #124]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c72:	2210      	movs	r2, #16
 8003c74:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003c7c:	4b1c      	ldr	r3, [pc, #112]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003c8e:	4b18      	ldr	r3, [pc, #96]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c94:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003c96:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003c9c:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003ca2:	4b13      	ldr	r3, [pc, #76]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8003cae:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8003cb8:	230f      	movs	r3, #15
 8003cba:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8003cc8:	2311      	movs	r3, #17
 8003cca:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4806      	ldr	r0, [pc, #24]	; (8003cf0 <MX_FSMC_Init+0xb8>)
 8003cd8:	f010 fdce 	bl	8014878 <HAL_SRAM_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8003ce2:	f000 f809 	bl	8003cf8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8003ce6:	bf00      	nop
 8003ce8:	3720      	adds	r7, #32
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	20000404 	.word	0x20000404
 8003cf4:	a0000104 	.word	0xa0000104

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfc:	b672      	cpsid	i
}
 8003cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d00:	e7fe      	b.n	8003d00 <Error_Handler+0x8>

08003d02 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	4603      	mov	r3, r0
 8003d0a:	71fb      	strb	r3, [r7, #7]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	71bb      	strb	r3, [r7, #6]
 8003d10:	4613      	mov	r3, r2
 8003d12:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	041a      	lsls	r2, r3, #16
 8003d18:	79bb      	ldrb	r3, [r7, #6]
 8003d1a:	021b      	lsls	r3, r3, #8
 8003d1c:	441a      	add	r2, r3
 8003d1e:	797b      	ldrb	r3, [r7, #5]
 8003d20:	4413      	add	r3, r2
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	6039      	str	r1, [r7, #0]
 8003d38:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <H24_RGB565+0x4a>
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	02db      	lsls	r3, r3, #11
 8003d58:	b21a      	sxth	r2, r3
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	089b      	lsrs	r3, r3, #2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	015b      	lsls	r3, r3, #5
 8003d62:	b21b      	sxth	r3, r3
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b21a      	sxth	r2, r3
 8003d68:	7b7b      	ldrb	r3, [r7, #13]
 8003d6a:	08db      	lsrs	r3, r3, #3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	b21b      	sxth	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b21b      	sxth	r3, r3
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	e012      	b.n	8003d9e <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 8003d78:	7b7b      	ldrb	r3, [r7, #13]
 8003d7a:	08db      	lsrs	r3, r3, #3
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	02db      	lsls	r3, r3, #11
 8003d80:	b21a      	sxth	r2, r3
 8003d82:	7bbb      	ldrb	r3, [r7, #14]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	015b      	lsls	r3, r3, #5
 8003d8a:	b21b      	sxth	r3, r3
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	b21a      	sxth	r2, r3
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b21b      	sxth	r3, r3
 8003d9c:	b29b      	uxth	r3, r3
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8003db4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	8013      	strh	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e005      	b.n	8003de4 <LCD_Send_Dat+0x1c>
	DAT = dat;
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <LCD_Send_Dat+0x30>)
 8003dda:	88fb      	ldrh	r3, [r7, #6]
 8003ddc:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	3301      	adds	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f6      	beq.n	8003dd8 <LCD_Send_Dat+0x10>
}
 8003dea:	bf00      	nop
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	60080000 	.word	0x60080000

08003dfc <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003dfc:	b590      	push	{r4, r7, lr}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	4611      	mov	r1, r2
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4623      	mov	r3, r4
 8003e0c:	80fb      	strh	r3, [r7, #6]
 8003e0e:	4603      	mov	r3, r0
 8003e10:	80bb      	strh	r3, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	807b      	strh	r3, [r7, #2]
 8003e16:	4613      	mov	r3, r2
 8003e18:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 8003e1a:	202a      	movs	r0, #42	; 0x2a
 8003e1c:	f7ff ffc5 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8003e20:	88bb      	ldrh	r3, [r7, #4]
 8003e22:	0a1b      	lsrs	r3, r3, #8
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ffce 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8003e2c:	88bb      	ldrh	r3, [r7, #4]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff ffc8 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 8003e38:	883b      	ldrh	r3, [r7, #0]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ffc2 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8003e44:	883b      	ldrh	r3, [r7, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff ffbc 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 8003e50:	202b      	movs	r0, #43	; 0x2b
 8003e52:	f7ff ffaa 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	0a1b      	lsrs	r3, r3, #8
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff ffb3 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff ffad 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 8003e6e:	887b      	ldrh	r3, [r7, #2]
 8003e70:	0a1b      	lsrs	r3, r3, #8
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ffa7 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 8003e7a:	887b      	ldrh	r3, [r7, #2]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ffa1 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 8003e86:	202c      	movs	r0, #44	; 0x2c
 8003e88:	f7ff ff8f 	bl	8003daa <LCD_Send_Cmd>
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd90      	pop	{r4, r7, pc}

08003e94 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	603a      	str	r2, [r7, #0]
 8003e9e:	80fb      	strh	r3, [r7, #6]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 8003ea4:	88bb      	ldrh	r3, [r7, #4]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	88b9      	ldrh	r1, [r7, #4]
 8003eaa:	88f8      	ldrh	r0, [r7, #6]
 8003eac:	f7ff ffa6 	bl	8003dfc <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8003eb0:	6839      	ldr	r1, [r7, #0]
 8003eb2:	2001      	movs	r0, #1
 8003eb4:	f7ff ff3b 	bl	8003d2e <H24_RGB565>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff ff84 	bl	8003dc8 <LCD_Send_Dat>
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4604      	mov	r4, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4623      	mov	r3, r4
 8003ed8:	80fb      	strh	r3, [r7, #6]
 8003eda:	4603      	mov	r3, r0
 8003edc:	80bb      	strh	r3, [r7, #4]
 8003ede:	460b      	mov	r3, r1
 8003ee0:	807b      	strh	r3, [r7, #2]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 8003eea:	887b      	ldrh	r3, [r7, #2]
 8003eec:	883a      	ldrh	r2, [r7, #0]
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8003ef4:	88ba      	ldrh	r2, [r7, #4]
 8003ef6:	883b      	ldrh	r3, [r7, #0]
 8003ef8:	4413      	add	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29c      	uxth	r4, r3
 8003f00:	88fa      	ldrh	r2, [r7, #6]
 8003f02:	887b      	ldrh	r3, [r7, #2]
 8003f04:	4413      	add	r3, r2
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	88f9      	ldrh	r1, [r7, #6]
 8003f0e:	88b8      	ldrh	r0, [r7, #4]
 8003f10:	4622      	mov	r2, r4
 8003f12:	f7ff ff73 	bl	8003dfc <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8003f16:	2300      	movs	r3, #0
 8003f18:	60fb      	str	r3, [r7, #12]
 8003f1a:	e00a      	b.n	8003f32 <LCD_Rect_Fill+0x6a>
 8003f1c:	6a39      	ldr	r1, [r7, #32]
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7ff ff05 	bl	8003d2e <H24_RGB565>
 8003f24:	4603      	mov	r3, r0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff ff4e 	bl	8003dc8 <LCD_Send_Dat>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d3f0      	bcc.n	8003f1c <LCD_Rect_Fill+0x54>
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}

08003f44 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8003f44:	b590      	push	{r4, r7, lr}
 8003f46:	b08b      	sub	sp, #44	; 0x2c
 8003f48:	af02      	add	r7, sp, #8
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	80fb      	strh	r3, [r7, #6]
 8003f56:	4603      	mov	r3, r0
 8003f58:	80bb      	strh	r3, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	807b      	strh	r3, [r7, #2]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	88fb      	ldrh	r3, [r7, #6]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bfb8      	it	lt
 8003f6c:	425b      	neglt	r3, r3
 8003f6e:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8003f70:	883a      	ldrh	r2, [r7, #0]
 8003f72:	88bb      	ldrh	r3, [r7, #4]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	bfb8      	it	lt
 8003f7a:	425b      	neglt	r3, r3
 8003f7c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 8003f7e:	88fa      	ldrh	r2, [r7, #6]
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d201      	bcs.n	8003f8a <LCD_Line+0x46>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e001      	b.n	8003f8e <LCD_Line+0x4a>
 8003f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f8e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8003f90:	88ba      	ldrh	r2, [r7, #4]
 8003f92:	883b      	ldrh	r3, [r7, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d201      	bcs.n	8003f9c <LCD_Line+0x58>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e001      	b.n	8003fa0 <LCD_Line+0x5c>
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8003fae:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fb8:	b29c      	uxth	r4, r3
 8003fba:	88b9      	ldrh	r1, [r7, #4]
 8003fbc:	88f8      	ldrh	r0, [r7, #6]
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	f7ff ff80 	bl	8003ec8 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d103      	bne.n	8003fd8 <LCD_Line+0x94>
 8003fd0:	88ba      	ldrh	r2, [r7, #4]
 8003fd2:	883b      	ldrh	r3, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d01e      	beq.n	8004016 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	425b      	negs	r3, r3
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	dd08      	ble.n	8003ffa <LCD_Line+0xb6>
		{
			error -= deltaY;
 8003fe8:	69fa      	ldr	r2, [r7, #28]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	88fb      	ldrh	r3, [r7, #6]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	dad5      	bge.n	8003fae <LCD_Line+0x6a>
		{
			error += deltaX;
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	4413      	add	r3, r2
 8004008:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	b29a      	uxth	r2, r3
 800400e:	88bb      	ldrh	r3, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004014:	e7cb      	b.n	8003fae <LCD_Line+0x6a>
		break;
 8004016:	bf00      	nop
		}
	}
}
 8004018:	bf00      	nop
 800401a:	3724      	adds	r7, #36	; 0x24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd90      	pop	{r4, r7, pc}

08004020 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af02      	add	r7, sp, #8
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4623      	mov	r3, r4
 8004030:	80fb      	strh	r3, [r7, #6]
 8004032:	4603      	mov	r3, r0
 8004034:	80bb      	strh	r3, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	807b      	strh	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 800403e:	883c      	ldrh	r4, [r7, #0]
 8004040:	887a      	ldrh	r2, [r7, #2]
 8004042:	88b9      	ldrh	r1, [r7, #4]
 8004044:	88f8      	ldrh	r0, [r7, #6]
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4623      	mov	r3, r4
 8004052:	f7ff ff77 	bl	8003f44 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 8004056:	8bbc      	ldrh	r4, [r7, #28]
 8004058:	8b3a      	ldrh	r2, [r7, #24]
 800405a:	8839      	ldrh	r1, [r7, #0]
 800405c:	8878      	ldrh	r0, [r7, #2]
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4623      	mov	r3, r4
 800406a:	f7ff ff6b 	bl	8003f44 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 800406e:	88bc      	ldrh	r4, [r7, #4]
 8004070:	88fa      	ldrh	r2, [r7, #6]
 8004072:	8bb9      	ldrh	r1, [r7, #28]
 8004074:	8b38      	ldrh	r0, [r7, #24]
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	4623      	mov	r3, r4
 8004082:	f7ff ff5f 	bl	8003f44 <LCD_Line>
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}

0800408e <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b08d      	sub	sp, #52	; 0x34
 8004092:	af02      	add	r7, sp, #8
 8004094:	4604      	mov	r4, r0
 8004096:	4608      	mov	r0, r1
 8004098:	4611      	mov	r1, r2
 800409a:	461a      	mov	r2, r3
 800409c:	4623      	mov	r3, r4
 800409e:	80fb      	strh	r3, [r7, #6]
 80040a0:	4603      	mov	r3, r0
 80040a2:	80bb      	strh	r3, [r7, #4]
 80040a4:	460b      	mov	r3, r1
 80040a6:	807b      	strh	r3, [r7, #2]
 80040a8:	4613      	mov	r3, r2
 80040aa:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80040ac:	2300      	movs	r3, #0
 80040ae:	823b      	strh	r3, [r7, #16]
 80040b0:	2300      	movs	r3, #0
 80040b2:	81fb      	strh	r3, [r7, #14]
 80040b4:	2300      	movs	r3, #0
 80040b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040b8:	2300      	movs	r3, #0
 80040ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80040bc:	2300      	movs	r3, #0
 80040be:	847b      	strh	r3, [r7, #34]	; 0x22
 80040c0:	2300      	movs	r3, #0
 80040c2:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80040c4:	2300      	movs	r3, #0
 80040c6:	83fb      	strh	r3, [r7, #30]
 80040c8:	2300      	movs	r3, #0
 80040ca:	83bb      	strh	r3, [r7, #28]
 80040cc:	2300      	movs	r3, #0
 80040ce:	837b      	strh	r3, [r7, #26]
 80040d0:	2300      	movs	r3, #0
 80040d2:	833b      	strh	r3, [r7, #24]
 80040d4:	2300      	movs	r3, #0
 80040d6:	82fb      	strh	r3, [r7, #22]
 80040d8:	2300      	movs	r3, #0
 80040da:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	88fb      	ldrh	r3, [r7, #6]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	425b      	neglt	r3, r3
 80040ec:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 80040ee:	883a      	ldrh	r2, [r7, #0]
 80040f0:	88bb      	ldrh	r3, [r7, #4]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bfb8      	it	lt
 80040f8:	425b      	neglt	r3, r3
 80040fa:	81fb      	strh	r3, [r7, #14]
	x = x1;
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004100:	88bb      	ldrh	r3, [r7, #4]
 8004102:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 8004104:	887a      	ldrh	r2, [r7, #2]
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	429a      	cmp	r2, r3
 800410a:	d304      	bcc.n	8004116 <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 800410c:	2301      	movs	r3, #1
 800410e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004110:	2301      	movs	r3, #1
 8004112:	843b      	strh	r3, [r7, #32]
 8004114:	e005      	b.n	8004122 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 8004116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800411a:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 800411c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004120:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8004122:	883a      	ldrh	r2, [r7, #0]
 8004124:	88bb      	ldrh	r3, [r7, #4]
 8004126:	429a      	cmp	r2, r3
 8004128:	d304      	bcc.n	8004134 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 800412e:	2301      	movs	r3, #1
 8004130:	83bb      	strh	r3, [r7, #28]
 8004132:	e005      	b.n	8004140 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004138:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800413a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800413e:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004140:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004144:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004148:	429a      	cmp	r2, r3
 800414a:	db10      	blt.n	800416e <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 8004150:	2300      	movs	r3, #0
 8004152:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8004154:	8a3b      	ldrh	r3, [r7, #16]
 8004156:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8004158:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800415c:	0fda      	lsrs	r2, r3, #31
 800415e:	4413      	add	r3, r2
 8004160:	105b      	asrs	r3, r3, #1
 8004162:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8004168:	8a3b      	ldrh	r3, [r7, #16]
 800416a:	82bb      	strh	r3, [r7, #20]
 800416c:	e00f      	b.n	800418e <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 800416e:	2300      	movs	r3, #0
 8004170:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8004172:	2300      	movs	r3, #0
 8004174:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8004176:	89fb      	ldrh	r3, [r7, #14]
 8004178:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 800417a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800417e:	0fda      	lsrs	r2, r3, #31
 8004180:	4413      	add	r3, r2
 8004182:	105b      	asrs	r3, r3, #1
 8004184:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8004186:	8a3b      	ldrh	r3, [r7, #16]
 8004188:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800418e:	2300      	movs	r3, #0
 8004190:	827b      	strh	r3, [r7, #18]
 8004192:	e034      	b.n	80041fe <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 8004194:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004196:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004198:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800419a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800419c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	2301      	movs	r3, #1
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7ff fecd 	bl	8003f44 <LCD_Line>

		num += numadd;
 80041aa:	8b3a      	ldrh	r2, [r7, #24]
 80041ac:	8afb      	ldrh	r3, [r7, #22]
 80041ae:	4413      	add	r3, r2
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 80041b4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80041b8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80041bc:	429a      	cmp	r2, r3
 80041be:	db0e      	blt.n	80041de <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 80041c0:	8b3a      	ldrh	r2, [r7, #24]
 80041c2:	8b7b      	ldrh	r3, [r7, #26]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 80041ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041ce:	4413      	add	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 80041d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d6:	8bfb      	ldrh	r3, [r7, #30]
 80041d8:	4413      	add	r3, r2
 80041da:	b29b      	uxth	r3, r3
 80041dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 80041de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041e0:	8c3b      	ldrh	r3, [r7, #32]
 80041e2:	4413      	add	r3, r2
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 80041e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041ea:	8bbb      	ldrh	r3, [r7, #28]
 80041ec:	4413      	add	r3, r2
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80041f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3301      	adds	r3, #1
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	827b      	strh	r3, [r7, #18]
 80041fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004202:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004206:	429a      	cmp	r2, r3
 8004208:	ddc4      	ble.n	8004194 <LCD_Triangle_Fill+0x106>
	}
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	372c      	adds	r7, #44	; 0x2c
 8004210:	46bd      	mov	sp, r7
 8004212:	bd90      	pop	{r4, r7, pc}

08004214 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b085      	sub	sp, #20
 8004218:	af02      	add	r7, sp, #8
 800421a:	4604      	mov	r4, r0
 800421c:	4608      	mov	r0, r1
 800421e:	4611      	mov	r1, r2
 8004220:	461a      	mov	r2, r3
 8004222:	4623      	mov	r3, r4
 8004224:	80fb      	strh	r3, [r7, #6]
 8004226:	4603      	mov	r3, r0
 8004228:	80bb      	strh	r3, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	807b      	strh	r3, [r7, #2]
 800422e:	4613      	mov	r3, r2
 8004230:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004232:	88fa      	ldrh	r2, [r7, #6]
 8004234:	887b      	ldrh	r3, [r7, #2]
 8004236:	4413      	add	r3, r2
 8004238:	b29a      	uxth	r2, r3
 800423a:	88bc      	ldrh	r4, [r7, #4]
 800423c:	88b9      	ldrh	r1, [r7, #4]
 800423e:	88f8      	ldrh	r0, [r7, #6]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	7e3b      	ldrb	r3, [r7, #24]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4623      	mov	r3, r4
 800424a:	f7ff fe7b 	bl	8003f44 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 800424e:	88ba      	ldrh	r2, [r7, #4]
 8004250:	883b      	ldrh	r3, [r7, #0]
 8004252:	4413      	add	r3, r2
 8004254:	b299      	uxth	r1, r3
 8004256:	88fa      	ldrh	r2, [r7, #6]
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	4413      	add	r3, r2
 800425c:	b29c      	uxth	r4, r3
 800425e:	88ba      	ldrh	r2, [r7, #4]
 8004260:	883b      	ldrh	r3, [r7, #0]
 8004262:	4413      	add	r3, r2
 8004264:	b29a      	uxth	r2, r3
 8004266:	88f8      	ldrh	r0, [r7, #6]
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	7e3b      	ldrb	r3, [r7, #24]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	4622      	mov	r2, r4
 8004274:	f7ff fe66 	bl	8003f44 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8004278:	88ba      	ldrh	r2, [r7, #4]
 800427a:	883b      	ldrh	r3, [r7, #0]
 800427c:	4413      	add	r3, r2
 800427e:	b29c      	uxth	r4, r3
 8004280:	88fa      	ldrh	r2, [r7, #6]
 8004282:	88b9      	ldrh	r1, [r7, #4]
 8004284:	88f8      	ldrh	r0, [r7, #6]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	7e3b      	ldrb	r3, [r7, #24]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	4623      	mov	r3, r4
 8004290:	f7ff fe58 	bl	8003f44 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	887b      	ldrh	r3, [r7, #2]
 8004298:	4413      	add	r3, r2
 800429a:	b298      	uxth	r0, r3
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	887b      	ldrh	r3, [r7, #2]
 80042a0:	4413      	add	r3, r2
 80042a2:	b29c      	uxth	r4, r3
 80042a4:	88ba      	ldrh	r2, [r7, #4]
 80042a6:	883b      	ldrh	r3, [r7, #0]
 80042a8:	4413      	add	r3, r2
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	88b9      	ldrh	r1, [r7, #4]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	7e3b      	ldrb	r3, [r7, #24]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	4613      	mov	r3, r2
 80042b8:	4622      	mov	r2, r4
 80042ba:	f7ff fe43 	bl	8003f44 <LCD_Line>
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd90      	pop	{r4, r7, pc}

080042c6 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 80042c6:	b590      	push	{r4, r7, lr}
 80042c8:	b08b      	sub	sp, #44	; 0x2c
 80042ca:	af02      	add	r7, sp, #8
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	461a      	mov	r2, r3
 80042d4:	4623      	mov	r3, r4
 80042d6:	80fb      	strh	r3, [r7, #6]
 80042d8:	4603      	mov	r3, r0
 80042da:	80bb      	strh	r3, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
 80042e0:	4613      	mov	r3, r2
 80042e2:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 80042e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80042ec:	fb02 f303 	mul.w	r3, r2, r3
 80042f0:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 80042f2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80042f6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80042fa:	fb02 f303 	mul.w	r3, r2, r3
 80042fe:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 800430c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 8101 	beq.w	8004518 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004316:	2300      	movs	r3, #0
 8004318:	83fb      	strh	r3, [r7, #30]
 800431a:	883b      	ldrh	r3, [r7, #0]
 800431c:	83bb      	strh	r3, [r7, #28]
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	005a      	lsls	r2, r3, #1
 8004322:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	f1c3 0301 	rsb	r3, r3, #1
 800432c:	6979      	ldr	r1, [r7, #20]
 800432e:	fb01 f303 	mul.w	r3, r1, r3
 8004332:	4413      	add	r3, r2
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e062      	b.n	80043fe <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	8bfb      	ldrh	r3, [r7, #30]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	b298      	uxth	r0, r3
 8004340:	88ba      	ldrh	r2, [r7, #4]
 8004342:	8bbb      	ldrh	r3, [r7, #28]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	b299      	uxth	r1, r3
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	8bfb      	ldrh	r3, [r7, #30]
 800434c:	4413      	add	r3, r2
 800434e:	b29a      	uxth	r2, r3
 8004350:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004354:	b29b      	uxth	r3, r3
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	b29b      	uxth	r3, r3
 800435a:	3301      	adds	r3, #1
 800435c:	b29c      	uxth	r4, r3
 800435e:	88ba      	ldrh	r2, [r7, #4]
 8004360:	8bbb      	ldrh	r3, [r7, #28]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	b29a      	uxth	r2, r3
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4613      	mov	r3, r2
 8004372:	4622      	mov	r2, r4
 8004374:	f7ff fde6 	bl	8003f44 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004378:	88fa      	ldrh	r2, [r7, #6]
 800437a:	8bfb      	ldrh	r3, [r7, #30]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	b298      	uxth	r0, r3
 8004380:	88ba      	ldrh	r2, [r7, #4]
 8004382:	8bbb      	ldrh	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	b299      	uxth	r1, r3
 8004388:	88fa      	ldrh	r2, [r7, #6]
 800438a:	8bfb      	ldrh	r3, [r7, #30]
 800438c:	4413      	add	r3, r2
 800438e:	b29a      	uxth	r2, r3
 8004390:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004394:	b29b      	uxth	r3, r3
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	b29b      	uxth	r3, r3
 800439a:	3301      	adds	r3, #1
 800439c:	b29c      	uxth	r4, r3
 800439e:	88ba      	ldrh	r2, [r7, #4]
 80043a0:	8bbb      	ldrh	r3, [r7, #28]
 80043a2:	4413      	add	r3, r2
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a8:	9301      	str	r3, [sp, #4]
 80043aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	4622      	mov	r2, r4
 80043b4:	f7ff fdc6 	bl	8003f44 <LCD_Line>
			if (s >= 0)
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	db0f      	blt.n	80043de <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 80043be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80043c2:	f1c3 0301 	rsb	r3, r3, #1
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4413      	add	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
				y--;
 80043d2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	3b01      	subs	r3, #1
 80043da:	b29b      	uxth	r3, r3
 80043dc:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 80043de:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	3306      	adds	r3, #6
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	fb02 f303 	mul.w	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4413      	add	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 80043f2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	83fb      	strh	r3, [r7, #30]
 80043fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fb03 f202 	mul.w	r2, r3, r2
 8004408:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800440c:	6979      	ldr	r1, [r7, #20]
 800440e:	fb01 f303 	mul.w	r3, r1, r3
 8004412:	429a      	cmp	r2, r3
 8004414:	dd90      	ble.n	8004338 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	83fb      	strh	r3, [r7, #30]
 800441a:	2300      	movs	r3, #0
 800441c:	83bb      	strh	r3, [r7, #28]
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	005a      	lsls	r2, r3, #1
 8004422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004426:	005b      	lsls	r3, r3, #1
 8004428:	f1c3 0301 	rsb	r3, r3, #1
 800442c:	6939      	ldr	r1, [r7, #16]
 800442e:	fb01 f303 	mul.w	r3, r1, r3
 8004432:	4413      	add	r3, r2
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	e062      	b.n	80044fe <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	8bfb      	ldrh	r3, [r7, #30]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	b298      	uxth	r0, r3
 8004440:	88ba      	ldrh	r2, [r7, #4]
 8004442:	8bbb      	ldrh	r3, [r7, #28]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	b299      	uxth	r1, r3
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	8bfb      	ldrh	r3, [r7, #30]
 800444c:	4413      	add	r3, r2
 800444e:	b29a      	uxth	r2, r3
 8004450:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004454:	b29b      	uxth	r3, r3
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	b29b      	uxth	r3, r3
 800445a:	3301      	adds	r3, #1
 800445c:	b29c      	uxth	r4, r3
 800445e:	88ba      	ldrh	r2, [r7, #4]
 8004460:	8bbb      	ldrh	r3, [r7, #28]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	b29a      	uxth	r2, r3
 8004466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4613      	mov	r3, r2
 8004472:	4622      	mov	r2, r4
 8004474:	f7ff fd66 	bl	8003f44 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8004478:	88fa      	ldrh	r2, [r7, #6]
 800447a:	8bfb      	ldrh	r3, [r7, #30]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	b298      	uxth	r0, r3
 8004480:	88ba      	ldrh	r2, [r7, #4]
 8004482:	8bbb      	ldrh	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	b299      	uxth	r1, r3
 8004488:	88fa      	ldrh	r2, [r7, #6]
 800448a:	8bfb      	ldrh	r3, [r7, #30]
 800448c:	4413      	add	r3, r2
 800448e:	b29a      	uxth	r2, r3
 8004490:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004494:	b29b      	uxth	r3, r3
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	b29b      	uxth	r3, r3
 800449a:	3301      	adds	r3, #1
 800449c:	b29c      	uxth	r4, r3
 800449e:	88ba      	ldrh	r2, [r7, #4]
 80044a0:	8bbb      	ldrh	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a8:	9301      	str	r3, [sp, #4]
 80044aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044ae:	9300      	str	r3, [sp, #0]
 80044b0:	4613      	mov	r3, r2
 80044b2:	4622      	mov	r2, r4
 80044b4:	f7ff fd46 	bl	8003f44 <LCD_Line>
			if (s >= 0)
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db0f      	blt.n	80044de <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 80044be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044c2:	f1c3 0301 	rsb	r3, r3, #1
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4413      	add	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
				x--;
 80044d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29b      	uxth	r3, r3
 80044dc:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 80044de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	3306      	adds	r3, #6
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	4413      	add	r3, r2
 80044f0:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 80044f2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3301      	adds	r3, #1
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	83bb      	strh	r3, [r7, #28]
 80044fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	fb03 f202 	mul.w	r2, r3, r2
 8004508:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800450c:	6939      	ldr	r1, [r7, #16]
 800450e:	fb01 f303 	mul.w	r3, r1, r3
 8004512:	429a      	cmp	r2, r3
 8004514:	dd90      	ble.n	8004438 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 8004516:	e117      	b.n	8004748 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004518:	2300      	movs	r3, #0
 800451a:	83fb      	strh	r3, [r7, #30]
 800451c:	883b      	ldrh	r3, [r7, #0]
 800451e:	83bb      	strh	r3, [r7, #28]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	005a      	lsls	r2, r3, #1
 8004524:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	f1c3 0301 	rsb	r3, r3, #1
 800452e:	6979      	ldr	r1, [r7, #20]
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
 8004538:	e06e      	b.n	8004618 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	8bfb      	ldrh	r3, [r7, #30]
 800453e:	4413      	add	r3, r2
 8004540:	b298      	uxth	r0, r3
 8004542:	88ba      	ldrh	r2, [r7, #4]
 8004544:	8bbb      	ldrh	r3, [r7, #28]
 8004546:	4413      	add	r3, r2
 8004548:	b299      	uxth	r1, r3
 800454a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800454e:	b29a      	uxth	r2, r3
 8004550:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004554:	b29c      	uxth	r4, r3
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4623      	mov	r3, r4
 800455c:	f7ff fcb4 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	8bfb      	ldrh	r3, [r7, #30]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	b298      	uxth	r0, r3
 8004568:	88ba      	ldrh	r2, [r7, #4]
 800456a:	8bbb      	ldrh	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	b299      	uxth	r1, r3
 8004570:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004574:	b29a      	uxth	r2, r3
 8004576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800457a:	b29c      	uxth	r4, r3
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4623      	mov	r3, r4
 8004582:	f7ff fca1 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	8bfb      	ldrh	r3, [r7, #30]
 800458a:	4413      	add	r3, r2
 800458c:	b298      	uxth	r0, r3
 800458e:	88ba      	ldrh	r2, [r7, #4]
 8004590:	8bbb      	ldrh	r3, [r7, #28]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	b299      	uxth	r1, r3
 8004596:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800459a:	b29a      	uxth	r2, r3
 800459c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045a0:	b29c      	uxth	r4, r3
 80045a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4623      	mov	r3, r4
 80045a8:	f7ff fc8e 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80045ac:	88fa      	ldrh	r2, [r7, #6]
 80045ae:	8bfb      	ldrh	r3, [r7, #30]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	b298      	uxth	r0, r3
 80045b4:	88ba      	ldrh	r2, [r7, #4]
 80045b6:	8bbb      	ldrh	r3, [r7, #28]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	b299      	uxth	r1, r3
 80045bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045c6:	b29c      	uxth	r4, r3
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	9300      	str	r3, [sp, #0]
 80045cc:	4623      	mov	r3, r4
 80045ce:	f7ff fc7b 	bl	8003ec8 <LCD_Rect_Fill>
			if (s >= 0)
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	db0f      	blt.n	80045f8 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 80045d8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045dc:	f1c3 0301 	rsb	r3, r3, #1
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4413      	add	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
				y--;
 80045ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	3b01      	subs	r3, #1
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 80045f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	3306      	adds	r3, #6
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	4413      	add	r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800460c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004610:	b29b      	uxth	r3, r3
 8004612:	3301      	adds	r3, #1
 8004614:	b29b      	uxth	r3, r3
 8004616:	83fb      	strh	r3, [r7, #30]
 8004618:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	fb03 f202 	mul.w	r2, r3, r2
 8004622:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004626:	6979      	ldr	r1, [r7, #20]
 8004628:	fb01 f303 	mul.w	r3, r1, r3
 800462c:	429a      	cmp	r2, r3
 800462e:	dd84      	ble.n	800453a <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004630:	887b      	ldrh	r3, [r7, #2]
 8004632:	83fb      	strh	r3, [r7, #30]
 8004634:	2300      	movs	r3, #0
 8004636:	83bb      	strh	r3, [r7, #28]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	005a      	lsls	r2, r3, #1
 800463c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	f1c3 0301 	rsb	r3, r3, #1
 8004646:	6939      	ldr	r1, [r7, #16]
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e06e      	b.n	8004730 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	8bfb      	ldrh	r3, [r7, #30]
 8004656:	4413      	add	r3, r2
 8004658:	b298      	uxth	r0, r3
 800465a:	88ba      	ldrh	r2, [r7, #4]
 800465c:	8bbb      	ldrh	r3, [r7, #28]
 800465e:	4413      	add	r3, r2
 8004660:	b299      	uxth	r1, r3
 8004662:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004666:	b29a      	uxth	r2, r3
 8004668:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800466c:	b29c      	uxth	r4, r3
 800466e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	4623      	mov	r3, r4
 8004674:	f7ff fc28 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	8bfb      	ldrh	r3, [r7, #30]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	b298      	uxth	r0, r3
 8004680:	88ba      	ldrh	r2, [r7, #4]
 8004682:	8bbb      	ldrh	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	b299      	uxth	r1, r3
 8004688:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800468c:	b29a      	uxth	r2, r3
 800468e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004692:	b29c      	uxth	r4, r3
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	4623      	mov	r3, r4
 800469a:	f7ff fc15 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	8bfb      	ldrh	r3, [r7, #30]
 80046a2:	4413      	add	r3, r2
 80046a4:	b298      	uxth	r0, r3
 80046a6:	88ba      	ldrh	r2, [r7, #4]
 80046a8:	8bbb      	ldrh	r3, [r7, #28]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b299      	uxth	r1, r3
 80046ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046b8:	b29c      	uxth	r4, r3
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	4623      	mov	r3, r4
 80046c0:	f7ff fc02 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80046c4:	88fa      	ldrh	r2, [r7, #6]
 80046c6:	8bfb      	ldrh	r3, [r7, #30]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	b298      	uxth	r0, r3
 80046cc:	88ba      	ldrh	r2, [r7, #4]
 80046ce:	8bbb      	ldrh	r3, [r7, #28]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	b299      	uxth	r1, r3
 80046d4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046d8:	b29a      	uxth	r2, r3
 80046da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046de:	b29c      	uxth	r4, r3
 80046e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	4623      	mov	r3, r4
 80046e6:	f7ff fbef 	bl	8003ec8 <LCD_Rect_Fill>
			if (s >= 0)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	db0f      	blt.n	8004710 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 80046f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80046f4:	f1c3 0301 	rsb	r3, r3, #1
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	fb02 f303 	mul.w	r3, r2, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4413      	add	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
				x--;
 8004704:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004708:	b29b      	uxth	r3, r3
 800470a:	3b01      	subs	r3, #1
 800470c:	b29b      	uxth	r3, r3
 800470e:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004710:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	3306      	adds	r3, #6
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	fb02 f303 	mul.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4413      	add	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004724:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004728:	b29b      	uxth	r3, r3
 800472a:	3301      	adds	r3, #1
 800472c:	b29b      	uxth	r3, r3
 800472e:	83bb      	strh	r3, [r7, #28]
 8004730:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	fb03 f202 	mul.w	r2, r3, r2
 800473a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800473e:	6939      	ldr	r1, [r7, #16]
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	429a      	cmp	r2, r3
 8004746:	dd84      	ble.n	8004652 <LCD_Ellipse+0x38c>
}
 8004748:	bf00      	nop
 800474a:	3724      	adds	r7, #36	; 0x24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}

08004750 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af02      	add	r7, sp, #8
 8004756:	4604      	mov	r4, r0
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4623      	mov	r3, r4
 8004760:	80fb      	strh	r3, [r7, #6]
 8004762:	4603      	mov	r3, r0
 8004764:	80bb      	strh	r3, [r7, #4]
 8004766:	460b      	mov	r3, r1
 8004768:	70fb      	strb	r3, [r7, #3]
 800476a:	4613      	mov	r3, r2
 800476c:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004772:	78fb      	ldrb	r3, [r7, #3]
 8004774:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f1c3 0301 	rsb	r3, r3, #1
 800477c:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800477e:	e0fc      	b.n	800497a <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004780:	78bb      	ldrb	r3, [r7, #2]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d136      	bne.n	80047f4 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	b29b      	uxth	r3, r3
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	b298      	uxth	r0, r3
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	b29b      	uxth	r3, r3
 8004794:	88ba      	ldrh	r2, [r7, #4]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	b299      	uxth	r1, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	b29b      	uxth	r3, r3
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3301      	adds	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	b29c      	uxth	r4, r3
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	4623      	mov	r3, r4
 80047b8:	f7ff fb86 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	b29b      	uxth	r3, r3
 80047c0:	88fa      	ldrh	r2, [r7, #6]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	b298      	uxth	r0, r3
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	88ba      	ldrh	r2, [r7, #4]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	b299      	uxth	r1, r3
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3301      	adds	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3301      	adds	r3, #1
 80047e6:	b29c      	uxth	r4, r3
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	4623      	mov	r3, r4
 80047ee:	f7ff fb6b 	bl	8003ec8 <LCD_Rect_Fill>
 80047f2:	e0a7      	b.n	8004944 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	88fb      	ldrh	r3, [r7, #6]
 80047fa:	4413      	add	r3, r2
 80047fc:	b298      	uxth	r0, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	b29a      	uxth	r2, r3
 8004802:	88bb      	ldrh	r3, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	b299      	uxth	r1, r3
 8004808:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800480c:	b29a      	uxth	r2, r3
 800480e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004812:	b29c      	uxth	r4, r3
 8004814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	4623      	mov	r3, r4
 800481a:	f7ff fb55 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	b29a      	uxth	r2, r3
 8004822:	88fb      	ldrh	r3, [r7, #6]
 8004824:	4413      	add	r3, r2
 8004826:	b298      	uxth	r0, r3
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	b29a      	uxth	r2, r3
 800482c:	88bb      	ldrh	r3, [r7, #4]
 800482e:	4413      	add	r3, r2
 8004830:	b299      	uxth	r1, r3
 8004832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004836:	b29a      	uxth	r2, r3
 8004838:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800483c:	b29c      	uxth	r4, r3
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4623      	mov	r3, r4
 8004844:	f7ff fb40 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	b29b      	uxth	r3, r3
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	b298      	uxth	r0, r3
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	b29a      	uxth	r2, r3
 8004856:	88bb      	ldrh	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	b299      	uxth	r1, r3
 800485c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004860:	b29a      	uxth	r2, r3
 8004862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004866:	b29c      	uxth	r4, r3
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	4623      	mov	r3, r4
 800486e:	f7ff fb2b 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	b29b      	uxth	r3, r3
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	b298      	uxth	r0, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	b29a      	uxth	r2, r3
 8004880:	88bb      	ldrh	r3, [r7, #4]
 8004882:	4413      	add	r3, r2
 8004884:	b299      	uxth	r1, r3
 8004886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800488a:	b29a      	uxth	r2, r3
 800488c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004890:	b29c      	uxth	r4, r3
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	4623      	mov	r3, r4
 8004898:	f7ff fb16 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	88fb      	ldrh	r3, [r7, #6]
 80048a2:	4413      	add	r3, r2
 80048a4:	b298      	uxth	r0, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	88ba      	ldrh	r2, [r7, #4]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	b299      	uxth	r1, r3
 80048b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048ba:	b29c      	uxth	r4, r3
 80048bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4623      	mov	r3, r4
 80048c2:	f7ff fb01 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	4413      	add	r3, r2
 80048ce:	b298      	uxth	r0, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	88ba      	ldrh	r2, [r7, #4]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	b299      	uxth	r1, r3
 80048da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048de:	b29a      	uxth	r2, r3
 80048e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80048e4:	b29c      	uxth	r4, r3
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	4623      	mov	r3, r4
 80048ec:	f7ff faec 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	88fa      	ldrh	r2, [r7, #6]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	b298      	uxth	r0, r3
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	88ba      	ldrh	r2, [r7, #4]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	b299      	uxth	r1, r3
 8004904:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004908:	b29a      	uxth	r2, r3
 800490a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800490e:	b29c      	uxth	r4, r3
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4623      	mov	r3, r4
 8004916:	f7ff fad7 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	b29b      	uxth	r3, r3
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	b298      	uxth	r0, r3
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	b29b      	uxth	r3, r3
 8004928:	88ba      	ldrh	r2, [r7, #4]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	b299      	uxth	r1, r3
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004932:	b29a      	uxth	r2, r3
 8004934:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004938:	b29c      	uxth	r4, r3
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	4623      	mov	r3, r4
 8004940:	f7ff fac2 	bl	8003ec8 <LCD_Rect_Fill>
		}
		if (P < 0)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2b00      	cmp	r3, #0
 8004948:	da09      	bge.n	800495e <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1cda      	adds	r2, r3, #3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	4413      	add	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]
			a_++;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	3301      	adds	r3, #1
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	e00d      	b.n	800497a <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1d5a      	adds	r2, r3, #5
 8004962:	6979      	ldr	r1, [r7, #20]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
			a_++;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
			b_--;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3b01      	subs	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	429a      	cmp	r2, r3
 8004980:	f77f aefe 	ble.w	8004780 <LCD_Circle+0x30>
		}
	}
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd90      	pop	{r4, r7, pc}

0800498e <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 800498e:	b590      	push	{r4, r7, lr}
 8004990:	b089      	sub	sp, #36	; 0x24
 8004992:	af02      	add	r7, sp, #8
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	461a      	mov	r2, r3
 800499c:	4623      	mov	r3, r4
 800499e:	80fb      	strh	r3, [r7, #6]
 80049a0:	4603      	mov	r3, r0
 80049a2:	80bb      	strh	r3, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
 80049a8:	4613      	mov	r3, r2
 80049aa:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	f1c3 0301 	rsb	r3, r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80049b6:	2301      	movs	r3, #1
 80049b8:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80049ba:	887b      	ldrh	r3, [r7, #2]
 80049bc:	461a      	mov	r2, r3
 80049be:	03d2      	lsls	r2, r2, #15
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 80049d0:	e0cd      	b.n	8004b6e <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 80049d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0e      	blt.n	80049f8 <LCD_Circle_Helper+0x6a>
			y--;
 80049da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	3b01      	subs	r3, #1
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80049e6:	8a7b      	ldrh	r3, [r7, #18]
 80049e8:	3302      	adds	r3, #2
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80049ee:	8afa      	ldrh	r2, [r7, #22]
 80049f0:	8a7b      	ldrh	r3, [r7, #18]
 80049f2:	4413      	add	r3, r2
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80049f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	3301      	adds	r3, #1
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004a04:	8abb      	ldrh	r3, [r7, #20]
 8004a06:	3302      	adds	r3, #2
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004a0c:	8afa      	ldrh	r2, [r7, #22]
 8004a0e:	8abb      	ldrh	r3, [r7, #20]
 8004a10:	4413      	add	r3, r2
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004a16:	787b      	ldrb	r3, [r7, #1]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d025      	beq.n	8004a6c <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	8a3b      	ldrh	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	b298      	uxth	r0, r3
 8004a28:	88ba      	ldrh	r2, [r7, #4]
 8004a2a:	89fb      	ldrh	r3, [r7, #14]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	b299      	uxth	r1, r3
 8004a30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a3a:	b29c      	uxth	r4, r3
 8004a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4623      	mov	r3, r4
 8004a42:	f7ff fa41 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004a46:	88fa      	ldrh	r2, [r7, #6]
 8004a48:	89fb      	ldrh	r3, [r7, #14]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b298      	uxth	r0, r3
 8004a4e:	88ba      	ldrh	r2, [r7, #4]
 8004a50:	8a3b      	ldrh	r3, [r7, #16]
 8004a52:	4413      	add	r3, r2
 8004a54:	b299      	uxth	r1, r3
 8004a56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a60:	b29c      	uxth	r4, r3
 8004a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4623      	mov	r3, r4
 8004a68:	f7ff fa2e 	bl	8003ec8 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004a6c:	787b      	ldrb	r3, [r7, #1]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d025      	beq.n	8004ac2 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	8a3b      	ldrh	r3, [r7, #16]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	b298      	uxth	r0, r3
 8004a7e:	88ba      	ldrh	r2, [r7, #4]
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	b299      	uxth	r1, r3
 8004a86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a90:	b29c      	uxth	r4, r3
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	9300      	str	r3, [sp, #0]
 8004a96:	4623      	mov	r3, r4
 8004a98:	f7ff fa16 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004a9c:	88fa      	ldrh	r2, [r7, #6]
 8004a9e:	89fb      	ldrh	r3, [r7, #14]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	b298      	uxth	r0, r3
 8004aa4:	88ba      	ldrh	r2, [r7, #4]
 8004aa6:	8a3b      	ldrh	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	b299      	uxth	r1, r3
 8004aac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ab6:	b29c      	uxth	r4, r3
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4623      	mov	r3, r4
 8004abe:	f7ff fa03 	bl	8003ec8 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004ac2:	787b      	ldrb	r3, [r7, #1]
 8004ac4:	f003 0308 	and.w	r3, r3, #8
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d025      	beq.n	8004b18 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	89fb      	ldrh	r3, [r7, #14]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	b298      	uxth	r0, r3
 8004ad4:	88ba      	ldrh	r2, [r7, #4]
 8004ad6:	8a3b      	ldrh	r3, [r7, #16]
 8004ad8:	4413      	add	r3, r2
 8004ada:	b299      	uxth	r1, r3
 8004adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ae6:	b29c      	uxth	r4, r3
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4623      	mov	r3, r4
 8004aee:	f7ff f9eb 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	8a3b      	ldrh	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	b298      	uxth	r0, r3
 8004afa:	88ba      	ldrh	r2, [r7, #4]
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	4413      	add	r3, r2
 8004b00:	b299      	uxth	r1, r3
 8004b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b0c:	b29c      	uxth	r4, r3
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4623      	mov	r3, r4
 8004b14:	f7ff f9d8 	bl	8003ec8 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004b18:	787b      	ldrb	r3, [r7, #1]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d025      	beq.n	8004b6e <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	b298      	uxth	r0, r3
 8004b2a:	88ba      	ldrh	r2, [r7, #4]
 8004b2c:	8a3b      	ldrh	r3, [r7, #16]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	b299      	uxth	r1, r3
 8004b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b3c:	b29c      	uxth	r4, r3
 8004b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4623      	mov	r3, r4
 8004b44:	f7ff f9c0 	bl	8003ec8 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	8a3b      	ldrh	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	b298      	uxth	r0, r3
 8004b50:	88ba      	ldrh	r2, [r7, #4]
 8004b52:	89fb      	ldrh	r3, [r7, #14]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	b299      	uxth	r1, r3
 8004b58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b62:	b29c      	uxth	r4, r3
 8004b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	4623      	mov	r3, r4
 8004b6a:	f7ff f9ad 	bl	8003ec8 <LCD_Rect_Fill>
	while (x < y) {
 8004b6e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004b72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	f6ff af2b 	blt.w	80049d2 <LCD_Circle_Helper+0x44>
		}
	}
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd90      	pop	{r4, r7, pc}

08004b86 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004b86:	b590      	push	{r4, r7, lr}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af02      	add	r7, sp, #8
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	4608      	mov	r0, r1
 8004b90:	4611      	mov	r1, r2
 8004b92:	461a      	mov	r2, r3
 8004b94:	4623      	mov	r3, r4
 8004b96:	80fb      	strh	r3, [r7, #6]
 8004b98:	4603      	mov	r3, r0
 8004b9a:	80bb      	strh	r3, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	807b      	strh	r3, [r7, #2]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004ba4:	8b3a      	ldrh	r2, [r7, #24]
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	4413      	add	r3, r2
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3302      	adds	r3, #2
 8004bae:	b298      	uxth	r0, r3
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	887b      	ldrh	r3, [r7, #2]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	7f3b      	ldrb	r3, [r7, #28]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	8b3b      	ldrh	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	3b02      	subs	r3, #2
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	88bc      	ldrh	r4, [r7, #4]
 8004bcc:	88b9      	ldrh	r1, [r7, #4]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	9301      	str	r3, [sp, #4]
 8004bd2:	7f3b      	ldrb	r3, [r7, #28]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	f7ff f9b4 	bl	8003f44 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004bdc:	8b3a      	ldrh	r2, [r7, #24]
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	4413      	add	r3, r2
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	3302      	adds	r3, #2
 8004be6:	b298      	uxth	r0, r3
 8004be8:	88ba      	ldrh	r2, [r7, #4]
 8004bea:	883b      	ldrh	r3, [r7, #0]
 8004bec:	4413      	add	r3, r2
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b299      	uxth	r1, r3
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	7f3b      	ldrb	r3, [r7, #28]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4413      	add	r3, r2
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	8b3b      	ldrh	r3, [r7, #24]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b02      	subs	r3, #2
 8004c0c:	b29c      	uxth	r4, r3
 8004c0e:	88ba      	ldrh	r2, [r7, #4]
 8004c10:	883b      	ldrh	r3, [r7, #0]
 8004c12:	4413      	add	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	7f3b      	ldrb	r3, [r7, #28]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	4622      	mov	r2, r4
 8004c26:	f7ff f98d 	bl	8003f44 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004c2a:	8b3a      	ldrh	r2, [r7, #24]
 8004c2c:	88bb      	ldrh	r3, [r7, #4]
 8004c2e:	4413      	add	r3, r2
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3302      	adds	r3, #2
 8004c34:	b299      	uxth	r1, r3
 8004c36:	88ba      	ldrh	r2, [r7, #4]
 8004c38:	883b      	ldrh	r3, [r7, #0]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	7f3b      	ldrb	r3, [r7, #28]
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	8b3b      	ldrh	r3, [r7, #24]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b02      	subs	r3, #2
 8004c4e:	b29c      	uxth	r4, r3
 8004c50:	88fa      	ldrh	r2, [r7, #6]
 8004c52:	88f8      	ldrh	r0, [r7, #6]
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	9301      	str	r3, [sp, #4]
 8004c58:	7f3b      	ldrb	r3, [r7, #28]
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4623      	mov	r3, r4
 8004c5e:	f7ff f971 	bl	8003f44 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	887b      	ldrh	r3, [r7, #2]
 8004c66:	4413      	add	r3, r2
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b298      	uxth	r0, r3
 8004c6e:	8b3a      	ldrh	r2, [r7, #24]
 8004c70:	88bb      	ldrh	r3, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3302      	adds	r3, #2
 8004c78:	b299      	uxth	r1, r3
 8004c7a:	88fa      	ldrh	r2, [r7, #6]
 8004c7c:	887b      	ldrh	r3, [r7, #2]
 8004c7e:	4413      	add	r3, r2
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29c      	uxth	r4, r3
 8004c86:	88ba      	ldrh	r2, [r7, #4]
 8004c88:	883b      	ldrh	r3, [r7, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	7f3b      	ldrb	r3, [r7, #28]
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	8b3b      	ldrh	r3, [r7, #24]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	3b02      	subs	r3, #2
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	9301      	str	r3, [sp, #4]
 8004ca4:	7f3b      	ldrb	r3, [r7, #28]
 8004ca6:	9300      	str	r3, [sp, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	4622      	mov	r2, r4
 8004cac:	f7ff f94a 	bl	8003f44 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8004cb0:	8b3a      	ldrh	r2, [r7, #24]
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	3302      	adds	r3, #2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b218      	sxth	r0, r3
 8004cbe:	8b3a      	ldrh	r2, [r7, #24]
 8004cc0:	88bb      	ldrh	r3, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3302      	adds	r3, #2
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b219      	sxth	r1, r3
 8004ccc:	8b3b      	ldrh	r3, [r7, #24]
 8004cce:	3302      	adds	r3, #2
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b21a      	sxth	r2, r3
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	7f3b      	ldrb	r3, [r7, #28]
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	2301      	movs	r3, #1
 8004cde:	f7ff fe56 	bl	800498e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8004ce2:	88fa      	ldrh	r2, [r7, #6]
 8004ce4:	887b      	ldrh	r3, [r7, #2]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	8b3b      	ldrh	r3, [r7, #24]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b03      	subs	r3, #3
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	b218      	sxth	r0, r3
 8004cf6:	8b3a      	ldrh	r2, [r7, #24]
 8004cf8:	88bb      	ldrh	r3, [r7, #4]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	3302      	adds	r3, #2
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	b219      	sxth	r1, r3
 8004d04:	8b3b      	ldrh	r3, [r7, #24]
 8004d06:	3302      	adds	r3, #2
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	b21a      	sxth	r2, r3
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	7f3b      	ldrb	r3, [r7, #28]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2302      	movs	r3, #2
 8004d16:	f7ff fe3a 	bl	800498e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	887b      	ldrh	r3, [r7, #2]
 8004d1e:	4413      	add	r3, r2
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	8b3b      	ldrh	r3, [r7, #24]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b03      	subs	r3, #3
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	b218      	sxth	r0, r3
 8004d2e:	88ba      	ldrh	r2, [r7, #4]
 8004d30:	883b      	ldrh	r3, [r7, #0]
 8004d32:	4413      	add	r3, r2
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	8b3b      	ldrh	r3, [r7, #24]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b03      	subs	r3, #3
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	b219      	sxth	r1, r3
 8004d42:	8b3b      	ldrh	r3, [r7, #24]
 8004d44:	3302      	adds	r3, #2
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	b21a      	sxth	r2, r3
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	7f3b      	ldrb	r3, [r7, #28]
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2304      	movs	r3, #4
 8004d54:	f7ff fe1b 	bl	800498e <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 8004d58:	8b3a      	ldrh	r2, [r7, #24]
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	3302      	adds	r3, #2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	b218      	sxth	r0, r3
 8004d66:	88ba      	ldrh	r2, [r7, #4]
 8004d68:	883b      	ldrh	r3, [r7, #0]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	8b3b      	ldrh	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b03      	subs	r3, #3
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	b219      	sxth	r1, r3
 8004d7a:	8b3b      	ldrh	r3, [r7, #24]
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	6a3b      	ldr	r3, [r7, #32]
 8004d84:	9301      	str	r3, [sp, #4]
 8004d86:	7f3b      	ldrb	r3, [r7, #28]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2308      	movs	r3, #8
 8004d8c:	f7ff fdff 	bl	800498e <LCD_Circle_Helper>
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd90      	pop	{r4, r7, pc}

08004d98 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b089      	sub	sp, #36	; 0x24
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4608      	mov	r0, r1
 8004da2:	4611      	mov	r1, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4623      	mov	r3, r4
 8004da8:	80fb      	strh	r3, [r7, #6]
 8004daa:	4603      	mov	r3, r0
 8004dac:	80bb      	strh	r3, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	807b      	strh	r3, [r7, #2]
 8004db2:	4613      	mov	r3, r2
 8004db4:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	f1c3 0301 	rsb	r3, r3, #1
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	03d2      	lsls	r2, r2, #15
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004dd6:	887b      	ldrh	r3, [r7, #2]
 8004dd8:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004dda:	e0ab      	b.n	8004f34 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8004ddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	db0e      	blt.n	8004e02 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8004de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	3302      	adds	r3, #2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004df8:	8afa      	ldrh	r2, [r7, #22]
 8004dfa:	8a7b      	ldrh	r3, [r7, #18]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004e02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004e0e:	8abb      	ldrh	r3, [r7, #20]
 8004e10:	3302      	adds	r3, #2
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004e16:	8afa      	ldrh	r2, [r7, #22]
 8004e18:	8abb      	ldrh	r3, [r7, #20]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8004e20:	787b      	ldrb	r3, [r7, #1]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d03f      	beq.n	8004eaa <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	8a3b      	ldrh	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	b298      	uxth	r0, r3
 8004e32:	88ba      	ldrh	r2, [r7, #4]
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	b299      	uxth	r1, r3
 8004e3a:	88fa      	ldrh	r2, [r7, #6]
 8004e3c:	8a3b      	ldrh	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	b29c      	uxth	r4, r3
 8004e42:	88ba      	ldrh	r2, [r7, #4]
 8004e44:	89fb      	ldrh	r3, [r7, #14]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	89fb      	ldrh	r3, [r7, #14]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	4413      	add	r3, r2
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e56:	4413      	add	r3, r2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	2301      	movs	r3, #1
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	4613      	mov	r3, r2
 8004e64:	4622      	mov	r2, r4
 8004e66:	f7ff f86d 	bl	8003f44 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	4413      	add	r3, r2
 8004e70:	b298      	uxth	r0, r3
 8004e72:	88ba      	ldrh	r2, [r7, #4]
 8004e74:	8a3b      	ldrh	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	b299      	uxth	r1, r3
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	89fb      	ldrh	r3, [r7, #14]
 8004e7e:	4413      	add	r3, r2
 8004e80:	b29c      	uxth	r4, r3
 8004e82:	88ba      	ldrh	r2, [r7, #4]
 8004e84:	8a3b      	ldrh	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	8a3b      	ldrh	r3, [r7, #16]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e96:	4413      	add	r3, r2
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	4622      	mov	r2, r4
 8004ea6:	f7ff f84d 	bl	8003f44 <LCD_Line>
		}
		if (cornername & 0x2) {
 8004eaa:	787b      	ldrb	r3, [r7, #1]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d03f      	beq.n	8004f34 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8004eb4:	88fa      	ldrh	r2, [r7, #6]
 8004eb6:	8a3b      	ldrh	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	b298      	uxth	r0, r3
 8004ebc:	88ba      	ldrh	r2, [r7, #4]
 8004ebe:	89fb      	ldrh	r3, [r7, #14]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	b299      	uxth	r1, r3
 8004ec4:	88fa      	ldrh	r2, [r7, #6]
 8004ec6:	8a3b      	ldrh	r3, [r7, #16]
 8004ec8:	1ad3      	subs	r3, r2, r3
 8004eca:	b29c      	uxth	r4, r3
 8004ecc:	88ba      	ldrh	r2, [r7, #4]
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	89fb      	ldrh	r3, [r7, #14]
 8004ed6:	005b      	lsls	r3, r3, #1
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ee0:	4413      	add	r3, r2
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	2301      	movs	r3, #1
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4613      	mov	r3, r2
 8004eee:	4622      	mov	r2, r4
 8004ef0:	f7ff f828 	bl	8003f44 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8004ef4:	88fa      	ldrh	r2, [r7, #6]
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	b298      	uxth	r0, r3
 8004efc:	88ba      	ldrh	r2, [r7, #4]
 8004efe:	8a3b      	ldrh	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	b299      	uxth	r1, r3
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	89fb      	ldrh	r3, [r7, #14]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	b29c      	uxth	r4, r3
 8004f0c:	88ba      	ldrh	r2, [r7, #4]
 8004f0e:	8a3b      	ldrh	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	8a3b      	ldrh	r3, [r7, #16]
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f20:	4413      	add	r3, r2
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f26:	9301      	str	r3, [sp, #4]
 8004f28:	2301      	movs	r3, #1
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	4622      	mov	r2, r4
 8004f30:	f7ff f808 	bl	8003f44 <LCD_Line>
	while (x < y) {
 8004f34:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004f38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f6ff af4d 	blt.w	8004ddc <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	371c      	adds	r7, #28
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}

08004f4c <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	4604      	mov	r4, r0
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4623      	mov	r3, r4
 8004f5c:	80fb      	strh	r3, [r7, #6]
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80bb      	strh	r3, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	807b      	strh	r3, [r7, #2]
 8004f66:	4613      	mov	r3, r2
 8004f68:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 8004f6a:	88fa      	ldrh	r2, [r7, #6]
 8004f6c:	8b3b      	ldrh	r3, [r7, #24]
 8004f6e:	4413      	add	r3, r2
 8004f70:	b298      	uxth	r0, r3
 8004f72:	8b3b      	ldrh	r3, [r7, #24]
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	887a      	ldrh	r2, [r7, #2]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	883c      	ldrh	r4, [r7, #0]
 8004f80:	88b9      	ldrh	r1, [r7, #4]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	4623      	mov	r3, r4
 8004f88:	f7fe ff9e 	bl	8003ec8 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 8004f8c:	88fa      	ldrh	r2, [r7, #6]
 8004f8e:	887b      	ldrh	r3, [r7, #2]
 8004f90:	4413      	add	r3, r2
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	8b3b      	ldrh	r3, [r7, #24]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	b218      	sxth	r0, r3
 8004fa0:	88ba      	ldrh	r2, [r7, #4]
 8004fa2:	8b3b      	ldrh	r3, [r7, #24]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	b219      	sxth	r1, r3
 8004faa:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004fae:	8b3b      	ldrh	r3, [r7, #24]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	883a      	ldrh	r2, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	9201      	str	r2, [sp, #4]
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4622      	mov	r2, r4
 8004fca:	f7ff fee5 	bl	8004d98 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	8b3b      	ldrh	r3, [r7, #24]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b218      	sxth	r0, r3
 8004fd8:	88ba      	ldrh	r2, [r7, #4]
 8004fda:	8b3b      	ldrh	r3, [r7, #24]
 8004fdc:	4413      	add	r3, r2
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	b219      	sxth	r1, r3
 8004fe2:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8004fe6:	8b3b      	ldrh	r3, [r7, #24]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	883a      	ldrh	r2, [r7, #0]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	9201      	str	r2, [sp, #4]
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	2302      	movs	r3, #2
 8005000:	4622      	mov	r2, r4
 8005002:	f7ff fec9 	bl	8004d98 <LCD_Circle_Fill_Helper>
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	bd90      	pop	{r4, r7, pc}

0800500e <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 800500e:	b590      	push	{r4, r7, lr}
 8005010:	b08b      	sub	sp, #44	; 0x2c
 8005012:	af02      	add	r7, sp, #8
 8005014:	60ba      	str	r2, [r7, #8]
 8005016:	607b      	str	r3, [r7, #4]
 8005018:	4603      	mov	r3, r0
 800501a:	81fb      	strh	r3, [r7, #14]
 800501c:	460b      	mov	r3, r1
 800501e:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	777b      	strb	r3, [r7, #29]
 8005030:	2300      	movs	r3, #0
 8005032:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005038:	2300      	movs	r3, #0
 800503a:	763b      	strb	r3, [r7, #24]
 800503c:	e093      	b.n	8005166 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800503e:	2300      	movs	r3, #0
 8005040:	767b      	strb	r3, [r7, #25]
 8005042:	e052      	b.n	80050ea <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005044:	7f3b      	ldrb	r3, [r7, #28]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d109      	bne.n	800505e <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800504a:	8bfb      	ldrh	r3, [r7, #30]
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	83fa      	strh	r2, [r7, #30]
 8005050:	461a      	mov	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	4413      	add	r3, r2
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 800505e:	7f7a      	ldrb	r2, [r7, #29]
 8005060:	7f3b      	ldrb	r3, [r7, #28]
 8005062:	4013      	ands	r3, r2
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <LCD_Char+0x64>
			{
				set_pixels++;
 800506a:	8b7b      	ldrh	r3, [r7, #26]
 800506c:	3301      	adds	r3, #1
 800506e:	837b      	strh	r3, [r7, #26]
 8005070:	e035      	b.n	80050de <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8005072:	8b7b      	ldrh	r3, [r7, #26]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d032      	beq.n	80050de <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800507e:	461a      	mov	r2, r3
 8005080:	7e7b      	ldrb	r3, [r7, #25]
 8005082:	441a      	add	r2, r3
 8005084:	8b7b      	ldrh	r3, [r7, #26]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	b29a      	uxth	r2, r3
 800508a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800508e:	b29b      	uxth	r3, r3
 8005090:	fb12 f303 	smulbb	r3, r2, r3
 8005094:	b29a      	uxth	r2, r3
 8005096:	89fb      	ldrh	r3, [r7, #14]
 8005098:	4413      	add	r3, r2
 800509a:	b298      	uxth	r0, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80050a2:	461a      	mov	r2, r3
 80050a4:	7e3b      	ldrb	r3, [r7, #24]
 80050a6:	4413      	add	r3, r2
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	fb12 f303 	smulbb	r3, r2, r3
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	89bb      	ldrh	r3, [r7, #12]
 80050b8:	4413      	add	r3, r2
 80050ba:	b299      	uxth	r1, r3
 80050bc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	8b7a      	ldrh	r2, [r7, #26]
 80050c4:	fb12 f303 	smulbb	r3, r2, r3
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80050ce:	b29c      	uxth	r4, r3
 80050d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	4623      	mov	r3, r4
 80050d6:	f7fe fef7 	bl	8003ec8 <LCD_Rect_Fill>
				set_pixels = 0;
 80050da:	2300      	movs	r3, #0
 80050dc:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 80050de:	7f3b      	ldrb	r3, [r7, #28]
 80050e0:	085b      	lsrs	r3, r3, #1
 80050e2:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 80050e4:	7e7b      	ldrb	r3, [r7, #25]
 80050e6:	3301      	adds	r3, #1
 80050e8:	767b      	strb	r3, [r7, #25]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	789b      	ldrb	r3, [r3, #2]
 80050ee:	7e7a      	ldrb	r2, [r7, #25]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3a7      	bcc.n	8005044 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 80050f4:	8b7b      	ldrh	r3, [r7, #26]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d032      	beq.n	8005160 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005100:	461a      	mov	r2, r3
 8005102:	7e7b      	ldrb	r3, [r7, #25]
 8005104:	441a      	add	r2, r3
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	b29a      	uxth	r2, r3
 800510c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005110:	b29b      	uxth	r3, r3
 8005112:	fb12 f303 	smulbb	r3, r2, r3
 8005116:	b29a      	uxth	r2, r3
 8005118:	89fb      	ldrh	r3, [r7, #14]
 800511a:	4413      	add	r3, r2
 800511c:	b298      	uxth	r0, r3
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005124:	461a      	mov	r2, r3
 8005126:	7e3b      	ldrb	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	b29a      	uxth	r2, r3
 800512c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005130:	b29b      	uxth	r3, r3
 8005132:	fb12 f303 	smulbb	r3, r2, r3
 8005136:	b29a      	uxth	r2, r3
 8005138:	89bb      	ldrh	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	b299      	uxth	r1, r3
 800513e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005142:	b29b      	uxth	r3, r3
 8005144:	8b7a      	ldrh	r2, [r7, #26]
 8005146:	fb12 f303 	smulbb	r3, r2, r3
 800514a:	b29a      	uxth	r2, r3
 800514c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005150:	b29c      	uxth	r4, r3
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	4623      	mov	r3, r4
 8005158:	f7fe feb6 	bl	8003ec8 <LCD_Rect_Fill>
			set_pixels = 0;
 800515c:	2300      	movs	r3, #0
 800515e:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8005160:	7e3b      	ldrb	r3, [r7, #24]
 8005162:	3301      	adds	r3, #1
 8005164:	763b      	strb	r3, [r7, #24]
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	78db      	ldrb	r3, [r3, #3]
 800516a:	7e3a      	ldrb	r2, [r7, #24]
 800516c:	429a      	cmp	r2, r3
 800516e:	f4ff af66 	bcc.w	800503e <LCD_Char+0x30>
		}
	}
}
 8005172:	bf00      	nop
 8005174:	bf00      	nop
 8005176:	3724      	adds	r7, #36	; 0x24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}

0800517c <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b08f      	sub	sp, #60	; 0x3c
 8005180:	af02      	add	r7, sp, #8
 8005182:	60ba      	str	r2, [r7, #8]
 8005184:	607b      	str	r3, [r7, #4]
 8005186:	4603      	mov	r3, r0
 8005188:	81fb      	strh	r3, [r7, #14]
 800518a:	460b      	mov	r3, r1
 800518c:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 800518e:	89fb      	ldrh	r3, [r7, #14]
 8005190:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8005192:	89bb      	ldrh	r3, [r7, #12]
 8005194:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8005196:	f107 031c 	add.w	r3, r7, #28
 800519a:	220c      	movs	r2, #12
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4618      	mov	r0, r3
 80051a0:	f016 ff5a 	bl	801c058 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80051a4:	2300      	movs	r3, #0
 80051a6:	857b      	strh	r3, [r7, #42]	; 0x2a
 80051a8:	e056      	b.n	8005258 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80051aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 80051b6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051ba:	2b0a      	cmp	r3, #10
 80051bc:	d10f      	bne.n	80051de <LCD_Font+0x62>
		{
			cursor_x = x;
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 80051c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	fb12 f303 	smulbb	r3, r2, r3
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80051d6:	4413      	add	r3, r2
 80051d8:	b29b      	uxth	r3, r3
 80051da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80051dc:	e039      	b.n	8005252 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 80051de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051e2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d333      	bcc.n	8005252 <LCD_Font+0xd6>
 80051ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80051ee:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d82d      	bhi.n	8005252 <LCD_Font+0xd6>
 80051f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80051fa:	2b0d      	cmp	r3, #13
 80051fc:	d029      	beq.n	8005252 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 80051fe:	6a3a      	ldr	r2, [r7, #32]
 8005200:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005204:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8005208:	1a5b      	subs	r3, r3, r1
 800520a:	00db      	lsls	r3, r3, #3
 800520c:	18d1      	adds	r1, r2, r3
 800520e:	f107 0314 	add.w	r3, r7, #20
 8005212:	2208      	movs	r2, #8
 8005214:	4618      	mov	r0, r3
 8005216:	f016 ff1f 	bl	801c058 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800521a:	f107 041c 	add.w	r4, r7, #28
 800521e:	f107 0214 	add.w	r2, r7, #20
 8005222:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8005226:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800522a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	4623      	mov	r3, r4
 8005236:	f7ff feea 	bl	800500e <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800523a:	7e3b      	ldrb	r3, [r7, #24]
 800523c:	b29a      	uxth	r2, r3
 800523e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005242:	b29b      	uxth	r3, r3
 8005244:	fb12 f303 	smulbb	r3, r2, r3
 8005248:	b29a      	uxth	r2, r3
 800524a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800524c:	4413      	add	r3, r2
 800524e:	b29b      	uxth	r3, r3
 8005250:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8005252:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005254:	3301      	adds	r3, #1
 8005256:	857b      	strh	r3, [r7, #42]	; 0x2a
 8005258:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800525a:	68b8      	ldr	r0, [r7, #8]
 800525c:	f013 f824 	bl	80182a8 <strlen>
 8005260:	4603      	mov	r3, r0
 8005262:	429c      	cmp	r4, r3
 8005264:	d3a1      	bcc.n	80051aa <LCD_Font+0x2e>
		}
	}
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	3734      	adds	r7, #52	; 0x34
 800526c:	46bd      	mov	sp, r7
 800526e:	bd90      	pop	{r4, r7, pc}

08005270 <LCD_Init>:

void LCD_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 8005274:	2096      	movs	r0, #150	; 0x96
 8005276:	f000 ff8b 	bl	8006190 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 800527a:	2001      	movs	r0, #1
 800527c:	f7fe fd95 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 8005280:	2029      	movs	r0, #41	; 0x29
 8005282:	f7fe fd92 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 8005286:	20e2      	movs	r0, #226	; 0xe2
 8005288:	f7fe fd8f 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 800528c:	201d      	movs	r0, #29
 800528e:	f7fe fd9b 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 8005292:	2002      	movs	r0, #2
 8005294:	f7fe fd98 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 8005298:	20ff      	movs	r0, #255	; 0xff
 800529a:	f7fe fd95 	bl	8003dc8 <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 800529e:	20e0      	movs	r0, #224	; 0xe0
 80052a0:	f7fe fd83 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80052a4:	2001      	movs	r0, #1
 80052a6:	f7fe fd8f 	bl	8003dc8 <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80052aa:	2078      	movs	r0, #120	; 0x78
 80052ac:	f000 ff70 	bl	8006190 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 80052b0:	20e0      	movs	r0, #224	; 0xe0
 80052b2:	f7fe fd7a 	bl	8003daa <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 80052b6:	2003      	movs	r0, #3
 80052b8:	f7fe fd86 	bl	8003dc8 <LCD_Send_Dat>
	HAL_Delay(120);
 80052bc:	2078      	movs	r0, #120	; 0x78
 80052be:	f000 ff67 	bl	8006190 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7fe fd71 	bl	8003daa <LCD_Send_Cmd>
	HAL_Delay(120);
 80052c8:	2078      	movs	r0, #120	; 0x78
 80052ca:	f000 ff61 	bl	8006190 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 80052ce:	20e6      	movs	r0, #230	; 0xe6
 80052d0:	f7fe fd6b 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 80052d4:	2003      	movs	r0, #3
 80052d6:	f7fe fd77 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 80052da:	2085      	movs	r0, #133	; 0x85
 80052dc:	f7fe fd74 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 80052e0:	201d      	movs	r0, #29
 80052e2:	f7fe fd71 	bl	8003dc8 <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 80052e6:	20b0      	movs	r0, #176	; 0xb0
 80052e8:	f7fe fd5f 	bl	8003daa <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 80052ec:	20ae      	movs	r0, #174	; 0xae
 80052ee:	f7fe fd6b 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 80052f2:	2020      	movs	r0, #32
 80052f4:	f7fe fd68 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 80052f8:	2003      	movs	r0, #3
 80052fa:	f7fe fd65 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 80052fe:	201f      	movs	r0, #31
 8005300:	f7fe fd62 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8005304:	2001      	movs	r0, #1
 8005306:	f7fe fd5f 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 800530a:	20df      	movs	r0, #223	; 0xdf
 800530c:	f7fe fd5c 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005310:	202d      	movs	r0, #45	; 0x2d
 8005312:	f7fe fd59 	bl	8003dc8 <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 8005316:	20b4      	movs	r0, #180	; 0xb4
 8005318:	f7fe fd47 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 800531c:	2003      	movs	r0, #3
 800531e:	f7fe fd53 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005322:	20a0      	movs	r0, #160	; 0xa0
 8005324:	f7fe fd50 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 8005328:	2000      	movs	r0, #0
 800532a:	f7fe fd4d 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 800532e:	202e      	movs	r0, #46	; 0x2e
 8005330:	f7fe fd4a 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005334:	2030      	movs	r0, #48	; 0x30
 8005336:	f7fe fd47 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800533a:	2000      	movs	r0, #0
 800533c:	f7fe fd44 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005340:	200f      	movs	r0, #15
 8005342:	f7fe fd41 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 8005346:	2000      	movs	r0, #0
 8005348:	f7fe fd3e 	bl	8003dc8 <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 800534c:	20b6      	movs	r0, #182	; 0xb6
 800534e:	f7fe fd2c 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 8005352:	2002      	movs	r0, #2
 8005354:	f7fe fd38 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 8005358:	200d      	movs	r0, #13
 800535a:	f7fe fd35 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 800535e:	2000      	movs	r0, #0
 8005360:	f7fe fd32 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 8005364:	2010      	movs	r0, #16
 8005366:	f7fe fd2f 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 800536a:	2010      	movs	r0, #16
 800536c:	f7fe fd2c 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 8005370:	2008      	movs	r0, #8
 8005372:	f7fe fd29 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 8005376:	2000      	movs	r0, #0
 8005378:	f7fe fd26 	bl	8003dc8 <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 800537c:	20be      	movs	r0, #190	; 0xbe
 800537e:	f7fe fd14 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 8005382:	2008      	movs	r0, #8
 8005384:	f7fe fd20 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 8005388:	20ff      	movs	r0, #255	; 0xff
 800538a:	f7fe fd1d 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 800538e:	2001      	movs	r0, #1
 8005390:	f7fe fd1a 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 8005394:	2036      	movs	r0, #54	; 0x36
 8005396:	f7fe fd08 	bl	8003daa <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 800539a:	2003      	movs	r0, #3
 800539c:	f7fe fd14 	bl	8003dc8 <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80053a0:	20f0      	movs	r0, #240	; 0xf0
 80053a2:	f7fe fd02 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80053a6:	2003      	movs	r0, #3
 80053a8:	f7fe fd0e 	bl	8003dc8 <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 80053ac:	2029      	movs	r0, #41	; 0x29
 80053ae:	f7fe fcfc 	bl	8003daa <LCD_Send_Cmd>
}
 80053b2:	bf00      	nop
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	4603      	mov	r3, r0
 80053be:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 80053c0:	20be      	movs	r0, #190	; 0xbe
 80053c2:	f7fe fcf2 	bl	8003daa <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80053c6:	2008      	movs	r0, #8
 80053c8:	f7fe fcfe 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fcf9 	bl	8003dc8 <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 80053d6:	2001      	movs	r0, #1
 80053d8:	f7fe fcf6 	bl	8003dc8 <LCD_Send_Dat>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ea:	2300      	movs	r3, #0
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4b10      	ldr	r3, [pc, #64]	; (8005430 <HAL_MspInit+0x4c>)
 80053f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f2:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <HAL_MspInit+0x4c>)
 80053f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053f8:	6453      	str	r3, [r2, #68]	; 0x44
 80053fa:	4b0d      	ldr	r3, [pc, #52]	; (8005430 <HAL_MspInit+0x4c>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_MspInit+0x4c>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a08      	ldr	r2, [pc, #32]	; (8005430 <HAL_MspInit+0x4c>)
 8005410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_MspInit+0x4c>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800541e:	607b      	str	r3, [r7, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800543c:	f107 0314 	add.w	r3, r7, #20
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]
 8005448:	60da      	str	r2, [r3, #12]
 800544a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a17      	ldr	r2, [pc, #92]	; (80054b0 <HAL_DAC_MspInit+0x7c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d127      	bne.n	80054a6 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8005456:	2300      	movs	r3, #0
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	4a15      	ldr	r2, [pc, #84]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 8005460:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005464:	6413      	str	r3, [r2, #64]	; 0x40
 8005466:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	4b0f      	ldr	r3, [pc, #60]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	4a0e      	ldr	r2, [pc, #56]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 800547c:	f043 0301 	orr.w	r3, r3, #1
 8005480:	6313      	str	r3, [r2, #48]	; 0x30
 8005482:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <HAL_DAC_MspInit+0x80>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800548e:	2330      	movs	r3, #48	; 0x30
 8005490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005492:	2303      	movs	r3, #3
 8005494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800549a:	f107 0314 	add.w	r3, r7, #20
 800549e:	4619      	mov	r1, r3
 80054a0:	4805      	ldr	r0, [pc, #20]	; (80054b8 <HAL_DAC_MspInit+0x84>)
 80054a2:	f004 ff91 	bl	800a3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80054a6:	bf00      	nop
 80054a8:	3728      	adds	r7, #40	; 0x28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	40007400 	.word	0x40007400
 80054b4:	40023800 	.word	0x40023800
 80054b8:	40020000 	.word	0x40020000

080054bc <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <HAL_DAC_MspDeInit+0x30>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 80054ce:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <HAL_DAC_MspDeInit+0x34>)
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <HAL_DAC_MspDeInit+0x34>)
 80054d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054d8:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 80054da:	2130      	movs	r1, #48	; 0x30
 80054dc:	4805      	ldr	r0, [pc, #20]	; (80054f4 <HAL_DAC_MspDeInit+0x38>)
 80054de:	f005 f90f 	bl	800a700 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40007400 	.word	0x40007400
 80054f0:	40023800 	.word	0x40023800
 80054f4:	40020000 	.word	0x40020000

080054f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b08a      	sub	sp, #40	; 0x28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005500:	f107 0314 	add.w	r3, r7, #20
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	605a      	str	r2, [r3, #4]
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	60da      	str	r2, [r3, #12]
 800550e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_I2C_MspInit+0x84>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d12b      	bne.n	8005572 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b18      	ldr	r3, [pc, #96]	; (8005580 <HAL_I2C_MspInit+0x88>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4a17      	ldr	r2, [pc, #92]	; (8005580 <HAL_I2C_MspInit+0x88>)
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	6313      	str	r3, [r2, #48]	; 0x30
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <HAL_I2C_MspInit+0x88>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800553a:	2312      	movs	r3, #18
 800553c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800553e:	2301      	movs	r3, #1
 8005540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005542:	2303      	movs	r3, #3
 8005544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005546:	2304      	movs	r3, #4
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	4619      	mov	r1, r3
 8005550:	480c      	ldr	r0, [pc, #48]	; (8005584 <HAL_I2C_MspInit+0x8c>)
 8005552:	f004 ff39 	bl	800a3c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005556:	2300      	movs	r3, #0
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	4b09      	ldr	r3, [pc, #36]	; (8005580 <HAL_I2C_MspInit+0x88>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	4a08      	ldr	r2, [pc, #32]	; (8005580 <HAL_I2C_MspInit+0x88>)
 8005560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005564:	6413      	str	r3, [r2, #64]	; 0x40
 8005566:	4b06      	ldr	r3, [pc, #24]	; (8005580 <HAL_I2C_MspInit+0x88>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005572:	bf00      	nop
 8005574:	3728      	adds	r7, #40	; 0x28
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40005400 	.word	0x40005400
 8005580:	40023800 	.word	0x40023800
 8005584:	40020400 	.word	0x40020400

08005588 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <HAL_I2C_MspDeInit+0x38>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <HAL_I2C_MspDeInit+0x3c>)
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <HAL_I2C_MspDeInit+0x3c>)
 80055a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	4807      	ldr	r0, [pc, #28]	; (80055c8 <HAL_I2C_MspDeInit+0x40>)
 80055aa:	f005 f8a9 	bl	800a700 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	4805      	ldr	r0, [pc, #20]	; (80055c8 <HAL_I2C_MspDeInit+0x40>)
 80055b2:	f005 f8a5 	bl	800a700 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	40005400 	.word	0x40005400
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40020400 	.word	0x40020400

080055cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 031c 	add.w	r3, r7, #28
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a42      	ldr	r2, [pc, #264]	; (80056f4 <HAL_SPI_MspInit+0x128>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d12d      	bne.n	800564a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	4b41      	ldr	r3, [pc, #260]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	4a40      	ldr	r2, [pc, #256]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 80055f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055fc:	6413      	str	r3, [r2, #64]	; 0x40
 80055fe:	4b3e      	ldr	r3, [pc, #248]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b3a      	ldr	r3, [pc, #232]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a39      	ldr	r2, [pc, #228]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b37      	ldr	r3, [pc, #220]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0302 	and.w	r3, r3, #2
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005626:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005634:	2303      	movs	r3, #3
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005638:	2305      	movs	r3, #5
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	482e      	ldr	r0, [pc, #184]	; (80056fc <HAL_SPI_MspInit+0x130>)
 8005644:	f004 fec0 	bl	800a3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005648:	e050      	b.n	80056ec <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <HAL_SPI_MspInit+0x134>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d14b      	bne.n	80056ec <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005654:	2300      	movs	r3, #0
 8005656:	613b      	str	r3, [r7, #16]
 8005658:	4b27      	ldr	r3, [pc, #156]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	4a26      	ldr	r2, [pc, #152]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 800565e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005662:	6413      	str	r3, [r2, #64]	; 0x40
 8005664:	4b24      	ldr	r3, [pc, #144]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6313      	str	r3, [r2, #48]	; 0x30
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800568c:	2300      	movs	r3, #0
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	4b19      	ldr	r3, [pc, #100]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4a18      	ldr	r2, [pc, #96]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	6313      	str	r3, [r2, #48]	; 0x30
 800569c:	4b16      	ldr	r3, [pc, #88]	; (80056f8 <HAL_SPI_MspInit+0x12c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ae:	2302      	movs	r3, #2
 80056b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b6:	2303      	movs	r3, #3
 80056b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056ba:	2306      	movs	r3, #6
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056be:	f107 031c 	add.w	r3, r7, #28
 80056c2:	4619      	mov	r1, r3
 80056c4:	480f      	ldr	r0, [pc, #60]	; (8005704 <HAL_SPI_MspInit+0x138>)
 80056c6:	f004 fe7f 	bl	800a3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80056ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80056ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d0:	2302      	movs	r3, #2
 80056d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d8:	2303      	movs	r3, #3
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80056dc:	2306      	movs	r3, #6
 80056de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056e0:	f107 031c 	add.w	r3, r7, #28
 80056e4:	4619      	mov	r1, r3
 80056e6:	4808      	ldr	r0, [pc, #32]	; (8005708 <HAL_SPI_MspInit+0x13c>)
 80056e8:	f004 fe6e 	bl	800a3c8 <HAL_GPIO_Init>
}
 80056ec:	bf00      	nop
 80056ee:	3730      	adds	r7, #48	; 0x30
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40003800 	.word	0x40003800
 80056f8:	40023800 	.word	0x40023800
 80056fc:	40020400 	.word	0x40020400
 8005700:	40003c00 	.word	0x40003c00
 8005704:	40020000 	.word	0x40020000
 8005708:	40020800 	.word	0x40020800

0800570c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI2)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <HAL_SPI_MspDeInit+0x5c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d10b      	bne.n	8005736 <HAL_SPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800571e:	4b13      	ldr	r3, [pc, #76]	; (800576c <HAL_SPI_MspDeInit+0x60>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a12      	ldr	r2, [pc, #72]	; (800576c <HAL_SPI_MspDeInit+0x60>)
 8005724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800572a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800572e:	4810      	ldr	r0, [pc, #64]	; (8005770 <HAL_SPI_MspDeInit+0x64>)
 8005730:	f004 ffe6 	bl	800a700 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005734:	e014      	b.n	8005760 <HAL_SPI_MspDeInit+0x54>
  else if(hspi->Instance==SPI3)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <HAL_SPI_MspDeInit+0x68>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10f      	bne.n	8005760 <HAL_SPI_MspDeInit+0x54>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005740:	4b0a      	ldr	r3, [pc, #40]	; (800576c <HAL_SPI_MspDeInit+0x60>)
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	4a09      	ldr	r2, [pc, #36]	; (800576c <HAL_SPI_MspDeInit+0x60>)
 8005746:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800574a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 800574c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005750:	4809      	ldr	r0, [pc, #36]	; (8005778 <HAL_SPI_MspDeInit+0x6c>)
 8005752:	f004 ffd5 	bl	800a700 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005756:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800575a:	4808      	ldr	r0, [pc, #32]	; (800577c <HAL_SPI_MspDeInit+0x70>)
 800575c:	f004 ffd0 	bl	800a700 <HAL_GPIO_DeInit>
}
 8005760:	bf00      	nop
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40003800 	.word	0x40003800
 800576c:	40023800 	.word	0x40023800
 8005770:	40020400 	.word	0x40020400
 8005774:	40003c00 	.word	0x40003c00
 8005778:	40020000 	.word	0x40020000
 800577c:	40020800 	.word	0x40020800

08005780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b08a      	sub	sp, #40	; 0x28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005788:	f107 0314 	add.w	r3, r7, #20
 800578c:	2200      	movs	r2, #0
 800578e:	601a      	str	r2, [r3, #0]
 8005790:	605a      	str	r2, [r3, #4]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	60da      	str	r2, [r3, #12]
 8005796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <HAL_UART_MspInit+0x94>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d134      	bne.n	800580c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057ac:	f043 0310 	orr.w	r3, r3, #16
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f003 0310 	and.w	r3, r3, #16
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	4a14      	ldr	r2, [pc, #80]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	6313      	str	r3, [r2, #48]	; 0x30
 80057ce:	4b12      	ldr	r3, [pc, #72]	; (8005818 <HAL_UART_MspInit+0x98>)
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80057da:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80057de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e0:	2302      	movs	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057e8:	2303      	movs	r3, #3
 80057ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80057ec:	2307      	movs	r3, #7
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057f0:	f107 0314 	add.w	r3, r7, #20
 80057f4:	4619      	mov	r1, r3
 80057f6:	4809      	ldr	r0, [pc, #36]	; (800581c <HAL_UART_MspInit+0x9c>)
 80057f8:	f004 fde6 	bl	800a3c8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80057fc:	2200      	movs	r2, #0
 80057fe:	2100      	movs	r1, #0
 8005800:	2025      	movs	r0, #37	; 0x25
 8005802:	f000 ffbc 	bl	800677e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005806:	2025      	movs	r0, #37	; 0x25
 8005808:	f000 ffd5 	bl	80067b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800580c:	bf00      	nop
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40011000 	.word	0x40011000
 8005818:	40023800 	.word	0x40023800
 800581c:	40020000 	.word	0x40020000

08005820 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <HAL_UART_MspDeInit+0x38>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10d      	bne.n	800584e <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005832:	4b0a      	ldr	r3, [pc, #40]	; (800585c <HAL_UART_MspDeInit+0x3c>)
 8005834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005836:	4a09      	ldr	r2, [pc, #36]	; (800585c <HAL_UART_MspDeInit+0x3c>)
 8005838:	f023 0310 	bic.w	r3, r3, #16
 800583c:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800583e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005842:	4807      	ldr	r0, [pc, #28]	; (8005860 <HAL_UART_MspDeInit+0x40>)
 8005844:	f004 ff5c 	bl	800a700 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005848:	2025      	movs	r0, #37	; 0x25
 800584a:	f000 ffc2 	bl	80067d2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40011000 	.word	0x40011000
 800585c:	40023800 	.word	0x40023800
 8005860:	40020000 	.word	0x40020000

08005864 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800586a:	1d3b      	adds	r3, r7, #4
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	605a      	str	r2, [r3, #4]
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	60da      	str	r2, [r3, #12]
 8005876:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <HAL_FSMC_MspInit+0x88>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d131      	bne.n	80058e4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <HAL_FSMC_MspInit+0x88>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005886:	2300      	movs	r3, #0
 8005888:	603b      	str	r3, [r7, #0]
 800588a:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <HAL_FSMC_MspInit+0x8c>)
 800588c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588e:	4a18      	ldr	r2, [pc, #96]	; (80058f0 <HAL_FSMC_MspInit+0x8c>)
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	6393      	str	r3, [r2, #56]	; 0x38
 8005896:	4b16      	ldr	r3, [pc, #88]	; (80058f0 <HAL_FSMC_MspInit+0x8c>)
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	603b      	str	r3, [r7, #0]
 80058a0:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80058a2:	f64f 7380 	movw	r3, #65408	; 0xff80
 80058a6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a8:	2302      	movs	r3, #2
 80058aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058b0:	2303      	movs	r3, #3
 80058b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80058b4:	230c      	movs	r3, #12
 80058b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058b8:	1d3b      	adds	r3, r7, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	480d      	ldr	r0, [pc, #52]	; (80058f4 <HAL_FSMC_MspInit+0x90>)
 80058be:	f004 fd83 	bl	800a3c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80058c2:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80058c6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c8:	2302      	movs	r3, #2
 80058ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d0:	2303      	movs	r3, #3
 80058d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80058d4:	230c      	movs	r3, #12
 80058d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058d8:	1d3b      	adds	r3, r7, #4
 80058da:	4619      	mov	r1, r3
 80058dc:	4806      	ldr	r0, [pc, #24]	; (80058f8 <HAL_FSMC_MspInit+0x94>)
 80058de:	f004 fd73 	bl	800a3c8 <HAL_GPIO_Init>
 80058e2:	e000      	b.n	80058e6 <HAL_FSMC_MspInit+0x82>
    return;
 80058e4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	20000860 	.word	0x20000860
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40020c00 	.word	0x40020c00

080058fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005904:	f7ff ffae 	bl	8005864 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <HAL_FSMC_MspDeInit+0x38>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d113      	bne.n	8005944 <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <HAL_FSMC_MspDeInit+0x38>)
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <HAL_FSMC_MspDeInit+0x3c>)
 8005924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005926:	4a09      	ldr	r2, [pc, #36]	; (800594c <HAL_FSMC_MspDeInit+0x3c>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800592e:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005932:	4807      	ldr	r0, [pc, #28]	; (8005950 <HAL_FSMC_MspDeInit+0x40>)
 8005934:	f004 fee4 	bl	800a700 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005938:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 800593c:	4805      	ldr	r0, [pc, #20]	; (8005954 <HAL_FSMC_MspDeInit+0x44>)
 800593e:	f004 fedf 	bl	800a700 <HAL_GPIO_DeInit>
 8005942:	e000      	b.n	8005946 <HAL_FSMC_MspDeInit+0x36>
    return;
 8005944:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005946:	bd80      	pop	{r7, pc}
 8005948:	20000864 	.word	0x20000864
 800594c:	40023800 	.word	0x40023800
 8005950:	40021000 	.word	0x40021000
 8005954:	40020c00 	.word	0x40020c00

08005958 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005960:	f7ff ffd6 	bl	8005910 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005970:	e7fe      	b.n	8005970 <NMI_Handler+0x4>

08005972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005972:	b480      	push	{r7}
 8005974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005976:	e7fe      	b.n	8005976 <HardFault_Handler+0x4>

08005978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800597c:	e7fe      	b.n	800597c <MemManage_Handler+0x4>

0800597e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800597e:	b480      	push	{r7}
 8005980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005982:	e7fe      	b.n	8005982 <BusFault_Handler+0x4>

08005984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005988:	e7fe      	b.n	8005988 <UsageFault_Handler+0x4>

0800598a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800598a:	b480      	push	{r7}
 800598c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800598e:	bf00      	nop
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80059aa:	bf00      	nop
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80059b8:	f000 fb8a 	bl	80060d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}

080059c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <USART1_IRQHandler+0x10>)
 80059c6:	f010 fd9b 	bl	8016500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200003c0 	.word	0x200003c0

080059d4 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
}
 80059d8:	bf00      	nop
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <_getpid>:

int _getpid(void)
{
 80059e2:	b480      	push	{r7}
 80059e4:	af00      	add	r7, sp, #0
	return 1;
 80059e6:	2301      	movs	r3, #1
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <_kill>:

int _kill(int pid, int sig)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059fc:	f013 fb9a 	bl	8019134 <__errno>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2216      	movs	r2, #22
 8005a04:	601a      	str	r2, [r3, #0]
	return -1;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_exit>:

void _exit (int status)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ffe7 	bl	80059f2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005a24:	e7fe      	b.n	8005a24 <_exit+0x12>

08005a26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b086      	sub	sp, #24
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e00a      	b.n	8005a4e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a38:	f3af 8000 	nop.w
 8005a3c:	4601      	mov	r1, r0
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	60ba      	str	r2, [r7, #8]
 8005a44:	b2ca      	uxtb	r2, r1
 8005a46:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	dbf0      	blt.n	8005a38 <_read+0x12>
	}

return len;
 8005a56:	687b      	ldr	r3, [r7, #4]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3718      	adds	r7, #24
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e009      	b.n	8005a86 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	60ba      	str	r2, [r7, #8]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3301      	adds	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	dbf1      	blt.n	8005a72 <_write+0x12>
	}
	return len;
 8005a8e:	687b      	ldr	r3, [r7, #4]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3718      	adds	r7, #24
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_close>:

int _close(int file)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
	return -1;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ac0:	605a      	str	r2, [r3, #4]
	return 0;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <_isatty>:

int _isatty(int file)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	return 1;
 8005ad8:	2301      	movs	r3, #1
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b085      	sub	sp, #20
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	607a      	str	r2, [r7, #4]
	return 0;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3714      	adds	r7, #20
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <_open>:

int _open(char *path, int flags, ...)
{
 8005b00:	b40e      	push	{r1, r2, r3}
 8005b02:	b480      	push	{r7}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8005b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	b003      	add	sp, #12
 8005b1a:	4770      	bx	lr

08005b1c <_wait>:

int _wait(int *status)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 8005b24:	f013 fb06 	bl	8019134 <__errno>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	220a      	movs	r2, #10
 8005b2c:	601a      	str	r2, [r3, #0]
	return -1;
 8005b2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <_unlink>:

int _unlink(char *name)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b082      	sub	sp, #8
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 8005b42:	f013 faf7 	bl	8019134 <__errno>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2202      	movs	r2, #2
 8005b4a:	601a      	str	r2, [r3, #0]
	return -1;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <_times>:

int _times(struct tms *buf)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	return -1;
 8005b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <_stat>:

int _stat(char *file, struct stat *st)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b80:	605a      	str	r2, [r3, #4]
	return 0;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <_link>:

int _link(char *old, char *new)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 8005b9a:	f013 facb 	bl	8019134 <__errno>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	221f      	movs	r2, #31
 8005ba2:	601a      	str	r2, [r3, #0]
	return -1;
 8005ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <_fork>:

int _fork(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 8005bb4:	f013 fabe 	bl	8019134 <__errno>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	220b      	movs	r2, #11
 8005bbc:	601a      	str	r2, [r3, #0]
	return -1;
 8005bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <_execve>:

int _execve(char *name, char **argv, char **env)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 8005bd2:	f013 faaf 	bl	8019134 <__errno>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	220c      	movs	r2, #12
 8005bda:	601a      	str	r2, [r3, #0]
	return -1;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005bf0:	4a14      	ldr	r2, [pc, #80]	; (8005c44 <_sbrk+0x5c>)
 8005bf2:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <_sbrk+0x60>)
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005bfc:	4b13      	ldr	r3, [pc, #76]	; (8005c4c <_sbrk+0x64>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d102      	bne.n	8005c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <_sbrk+0x64>)
 8005c06:	4a12      	ldr	r2, [pc, #72]	; (8005c50 <_sbrk+0x68>)
 8005c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c0a:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <_sbrk+0x64>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d207      	bcs.n	8005c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c18:	f013 fa8c 	bl	8019134 <__errno>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	220c      	movs	r2, #12
 8005c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c22:	f04f 33ff 	mov.w	r3, #4294967295
 8005c26:	e009      	b.n	8005c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c28:	4b08      	ldr	r3, [pc, #32]	; (8005c4c <_sbrk+0x64>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <_sbrk+0x64>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4413      	add	r3, r2
 8005c36:	4a05      	ldr	r2, [pc, #20]	; (8005c4c <_sbrk+0x64>)
 8005c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3718      	adds	r7, #24
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20020000 	.word	0x20020000
 8005c48:	00000400 	.word	0x00000400
 8005c4c:	2000086c 	.word	0x2000086c
 8005c50:	200008a8 	.word	0x200008a8

08005c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c58:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <SystemInit+0x20>)
 8005c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c5e:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <SystemInit+0x20>)
 8005c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c68:	bf00      	nop
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	2302      	movs	r3, #2
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	2302      	movs	r3, #2
 8005c90:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8005c92:	4b34      	ldr	r3, [pc, #208]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d011      	beq.n	8005cc6 <SystemCoreClockUpdate+0x4e>
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	2b08      	cmp	r3, #8
 8005ca6:	d844      	bhi.n	8005d32 <SystemCoreClockUpdate+0xba>
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <SystemCoreClockUpdate+0x3e>
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d004      	beq.n	8005cbe <SystemCoreClockUpdate+0x46>
 8005cb4:	e03d      	b.n	8005d32 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8005cb6:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005cb8:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <SystemCoreClockUpdate+0xf4>)
 8005cba:	601a      	str	r2, [r3, #0]
      break;
 8005cbc:	e03d      	b.n	8005d3a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005cc0:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <SystemCoreClockUpdate+0xf8>)
 8005cc2:	601a      	str	r2, [r3, #0]
      break;
 8005cc4:	e039      	b.n	8005d3a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8005cc6:	4b27      	ldr	r3, [pc, #156]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	0d9b      	lsrs	r3, r3, #22
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cd2:	4b24      	ldr	r3, [pc, #144]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cda:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00c      	beq.n	8005cfc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005ce2:	4a23      	ldr	r2, [pc, #140]	; (8005d70 <SystemCoreClockUpdate+0xf8>)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005cec:	6852      	ldr	r2, [r2, #4]
 8005cee:	0992      	lsrs	r2, r2, #6
 8005cf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf4:	fb02 f303 	mul.w	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e00b      	b.n	8005d14 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <SystemCoreClockUpdate+0xf4>)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	4a17      	ldr	r2, [pc, #92]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005d06:	6852      	ldr	r2, [r2, #4]
 8005d08:	0992      	lsrs	r2, r2, #6
 8005d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
 8005d12:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8005d14:	4b13      	ldr	r3, [pc, #76]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	3301      	adds	r3, #1
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d2c:	4a0e      	ldr	r2, [pc, #56]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005d2e:	6013      	str	r3, [r2, #0]
      break;
 8005d30:	e003      	b.n	8005d3a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8005d32:	4b0d      	ldr	r3, [pc, #52]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005d34:	4a0d      	ldr	r2, [pc, #52]	; (8005d6c <SystemCoreClockUpdate+0xf4>)
 8005d36:	601a      	str	r2, [r3, #0]
      break;
 8005d38:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8005d3a:	4b0a      	ldr	r3, [pc, #40]	; (8005d64 <SystemCoreClockUpdate+0xec>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	4a0b      	ldr	r2, [pc, #44]	; (8005d74 <SystemCoreClockUpdate+0xfc>)
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
 8005d48:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8005d4a:	4b07      	ldr	r3, [pc, #28]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <SystemCoreClockUpdate+0xf0>)
 8005d56:	6013      	str	r3, [r2, #0]
}
 8005d58:	bf00      	nop
 8005d5a:	371c      	adds	r7, #28
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	40023800 	.word	0x40023800
 8005d68:	20000058 	.word	0x20000058
 8005d6c:	00f42400 	.word	0x00f42400
 8005d70:	007a1200 	.word	0x007a1200
 8005d74:	080517d8 	.word	0x080517d8

08005d78 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	ed87 0a05 	vstr	s0, [r7, #20]
 8005d82:	edc7 0a04 	vstr	s1, [r7, #16]
 8005d86:	ed87 1a03 	vstr	s2, [r7, #12]
 8005d8a:	edc7 1a02 	vstr	s3, [r7, #8]
 8005d8e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8005d92:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8005d9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d9e:	edd7 6a01 	vldr	s13, [r7, #4]
 8005da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005da6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005daa:	ee67 6a27 	vmul.f32	s13, s14, s15
 8005dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8005db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8005dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <XPT2046_Init>:

void XPT2046_Init(void)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8005dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ddc:	2201      	movs	r2, #1
 8005dde:	2180      	movs	r1, #128	; 0x80
 8005de0:	4809      	ldr	r0, [pc, #36]	; (8005e08 <XPT2046_Init+0x34>)
 8005de2:	f00c fb3e 	bl	8012462 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005dea:	2201      	movs	r2, #1
 8005dec:	2100      	movs	r1, #0
 8005dee:	4806      	ldr	r0, [pc, #24]	; (8005e08 <XPT2046_Init+0x34>)
 8005df0:	f00c fb37 	bl	8012462 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 8005df4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4802      	ldr	r0, [pc, #8]	; (8005e08 <XPT2046_Init+0x34>)
 8005dfe:	f00c fb30 	bl	8012462 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20000310 	.word	0x20000310

08005e0c <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b086      	sub	sp, #24
 8005e10:	af02      	add	r7, sp, #8
 8005e12:	4603      	mov	r3, r0
 8005e14:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 8005e16:	2001      	movs	r0, #1
 8005e18:	f000 f9ba 	bl	8006190 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8005e1c:	1df9      	adds	r1, r7, #7
 8005e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e22:	2201      	movs	r2, #1
 8005e24:	4814      	ldr	r0, [pc, #80]	; (8005e78 <getRaw+0x6c>)
 8005e26:	f00c fb1c 	bl	8012462 <HAL_SPI_Transmit>
	address = 0x00;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005e2e:	f107 020b 	add.w	r2, r7, #11
 8005e32:	1df9      	adds	r1, r7, #7
 8005e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	480e      	ldr	r0, [pc, #56]	; (8005e78 <getRaw+0x6c>)
 8005e3e:	f00c fd5d 	bl	80128fc <HAL_SPI_TransmitReceive>
	MSB = data;   
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 8005e46:	2300      	movs	r3, #0
 8005e48:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8005e4a:	f107 020b 	add.w	r2, r7, #11
 8005e4e:	1df9      	adds	r1, r7, #7
 8005e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	2301      	movs	r3, #1
 8005e58:	4807      	ldr	r0, [pc, #28]	; (8005e78 <getRaw+0x6c>)
 8005e5a:	f00c fd4f 	bl	80128fc <HAL_SPI_TransmitReceive>
	LSB = data;
 8005e5e:	7afb      	ldrb	r3, [r7, #11]
 8005e60:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 8005e62:	89fb      	ldrh	r3, [r7, #14]
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	89bb      	ldrh	r3, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	10db      	asrs	r3, r3, #3
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	bf00      	nop
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000310 	.word	0x20000310

08005e7c <X>:

inline static uint16_t X(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 8005e82:	20d0      	movs	r0, #208	; 0xd0
 8005e84:	f7ff ffc2 	bl	8005e0c <getRaw>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e92:	ed9f 2a11 	vldr	s4, [pc, #68]	; 8005ed8 <X+0x5c>
 8005e96:	eddf 1a11 	vldr	s3, [pc, #68]	; 8005edc <X+0x60>
 8005e9a:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8005ee0 <X+0x64>
 8005e9e:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005ee4 <X+0x68>
 8005ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ea6:	f7ff ff67 	bl	8005d78 <remap>
 8005eaa:	eef0 7a40 	vmov.f32	s15, s0
 8005eae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb2:	ee17 3a90 	vmov	r3, s15
 8005eb6:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d006      	beq.n	8005ecc <X+0x50>
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	f240 321e 	movw	r2, #798	; 0x31e
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d801      	bhi.n	8005ecc <X+0x50>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	e000      	b.n	8005ece <X+0x52>
	else return 0;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	4447c000 	.word	0x4447c000
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	457a0000 	.word	0x457a0000
 8005ee4:	43480000 	.word	0x43480000

08005ee8 <Y>:

inline static uint16_t Y(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 8005eee:	2090      	movs	r0, #144	; 0x90
 8005ef0:	f7ff ff8c 	bl	8005e0c <getRaw>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8005f4c <Y+0x64>
 8005f02:	eddf 1a13 	vldr	s3, [pc, #76]	; 8005f50 <Y+0x68>
 8005f06:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8005f54 <Y+0x6c>
 8005f0a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8005f58 <Y+0x70>
 8005f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f12:	f7ff ff31 	bl	8005d78 <remap>
 8005f16:	eef0 7a40 	vmov.f32	s15, s0
 8005f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f1e:	ee17 3a90 	vmov	r3, s15
 8005f22:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
 8005f24:	88fb      	ldrh	r3, [r7, #6]
 8005f26:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	80fb      	strh	r3, [r7, #6]
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <Y+0x58>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8005f3a:	d801      	bhi.n	8005f40 <Y+0x58>
 8005f3c:	88fb      	ldrh	r3, [r7, #6]
 8005f3e:	e000      	b.n	8005f42 <Y+0x5a>
	else return 0;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	43ef8000 	.word	0x43ef8000
 8005f50:	00000000 	.word	0x00000000
 8005f54:	456d8000 	.word	0x456d8000
 8005f58:	43480000 	.word	0x43480000

08005f5c <getX>:

uint16_t getX(void)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <getX+0x30>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 8005f68:	e007      	b.n	8005f7a <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 8005f6a:	f7ff ff87 	bl	8005e7c <X>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	80bb      	strh	r3, [r7, #4]
 8005f72:	f7ff ff83 	bl	8005e7c <X>
 8005f76:	4603      	mov	r3, r0
 8005f78:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 8005f7a:	88ba      	ldrh	r2, [r7, #4]
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d1f3      	bne.n	8005f6a <getX+0xe>
		}
		return x[0];
 8005f82:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	080517f0 	.word	0x080517f0

08005f90 <getY>:

uint16_t getY(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <getY+0x30>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 8005f9c:	e007      	b.n	8005fae <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 8005f9e:	f7ff ffa3 	bl	8005ee8 <Y>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	80bb      	strh	r3, [r7, #4]
 8005fa6:	f7ff ff9f 	bl	8005ee8 <Y>
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 8005fae:	88ba      	ldrh	r2, [r7, #4]
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d1f3      	bne.n	8005f9e <getY+0xe>
		}
		return y[0];
 8005fb6:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3708      	adds	r7, #8
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	080517f0 	.word	0x080517f0

08005fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fc8:	4b0e      	ldr	r3, [pc, #56]	; (8006004 <HAL_Init+0x40>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a0d      	ldr	r2, [pc, #52]	; (8006004 <HAL_Init+0x40>)
 8005fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fd4:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <HAL_Init+0x40>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <HAL_Init+0x40>)
 8005fda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fe0:	4b08      	ldr	r3, [pc, #32]	; (8006004 <HAL_Init+0x40>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a07      	ldr	r2, [pc, #28]	; (8006004 <HAL_Init+0x40>)
 8005fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fec:	2003      	movs	r0, #3
 8005fee:	f000 fbbb 	bl	8006768 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f000 f83b 	bl	800606e <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005ff8:	f7ff f9f4 	bl	80053e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	40023c00 	.word	0x40023c00

08006008 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <HAL_DeInit+0x54>)
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006014:	4b11      	ldr	r3, [pc, #68]	; (800605c <HAL_DeInit+0x54>)
 8006016:	2200      	movs	r2, #0
 8006018:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <HAL_DeInit+0x54>)
 800601c:	f04f 32ff 	mov.w	r2, #4294967295
 8006020:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006022:	4b0e      	ldr	r3, [pc, #56]	; (800605c <HAL_DeInit+0x54>)
 8006024:	2200      	movs	r2, #0
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_DeInit+0x54>)
 800602a:	f04f 32ff 	mov.w	r2, #4294967295
 800602e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006030:	4b0a      	ldr	r3, [pc, #40]	; (800605c <HAL_DeInit+0x54>)
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8006036:	4b09      	ldr	r3, [pc, #36]	; (800605c <HAL_DeInit+0x54>)
 8006038:	f04f 32ff 	mov.w	r2, #4294967295
 800603c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800603e:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_DeInit+0x54>)
 8006040:	2200      	movs	r2, #0
 8006042:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <HAL_DeInit+0x54>)
 8006046:	f04f 32ff 	mov.w	r2, #4294967295
 800604a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800604c:	4b03      	ldr	r3, [pc, #12]	; (800605c <HAL_DeInit+0x54>)
 800604e:	2200      	movs	r2, #0
 8006050:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006052:	f000 f805 	bl	8006060 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	bd80      	pop	{r7, pc}
 800605c:	40023800 	.word	0x40023800

08006060 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006064:	bf00      	nop
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b082      	sub	sp, #8
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006076:	4b13      	ldr	r3, [pc, #76]	; (80060c4 <HAL_InitTick+0x56>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <HAL_InitTick+0x5a>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	4619      	mov	r1, r3
 8006080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006084:	fbb3 f3f1 	udiv	r3, r3, r1
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fbb2 	bl	80067f6 <HAL_SYSTICK_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e00e      	b.n	80060ba <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b0f      	cmp	r3, #15
 80060a0:	d80a      	bhi.n	80060b8 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060a2:	2200      	movs	r2, #0
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	f04f 30ff 	mov.w	r0, #4294967295
 80060aa:	f000 fb68 	bl	800677e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80060ae:	4a07      	ldr	r2, [pc, #28]	; (80060cc <HAL_InitTick+0x5e>)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	e000      	b.n	80060ba <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000058 	.word	0x20000058
 80060c8:	20000060 	.word	0x20000060
 80060cc:	2000005c 	.word	0x2000005c

080060d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <HAL_IncTick+0x20>)
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <HAL_IncTick+0x24>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <HAL_IncTick+0x24>)
 80060e2:	6013      	str	r3, [r2, #0]
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	20000060 	.word	0x20000060
 80060f4:	20000870 	.word	0x20000870

080060f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return uwTick;
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <HAL_GetTick+0x14>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	20000870 	.word	0x20000870

08006110 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006114:	4b03      	ldr	r3, [pc, #12]	; (8006124 <HAL_GetTickPrio+0x14>)
 8006116:	681b      	ldr	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	2000005c 	.word	0x2000005c

08006128 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8006136:	4b0e      	ldr	r3, [pc, #56]	; (8006170 <HAL_SetTickFreq+0x48>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	79fa      	ldrb	r2, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d012      	beq.n	8006166 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <HAL_SetTickFreq+0x48>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <HAL_SetTickFreq+0x48>)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 800614c:	4b09      	ldr	r3, [pc, #36]	; (8006174 <HAL_SetTickFreq+0x4c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff ff8c 	bl	800606e <HAL_InitTick>
 8006156:	4603      	mov	r3, r0
 8006158:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006160:	4a03      	ldr	r2, [pc, #12]	; (8006170 <HAL_SetTickFreq+0x48>)
 8006162:	7bbb      	ldrb	r3, [r7, #14]
 8006164:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	20000060 	.word	0x20000060
 8006174:	2000005c 	.word	0x2000005c

08006178 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800617c:	4b03      	ldr	r3, [pc, #12]	; (800618c <HAL_GetTickFreq+0x14>)
 800617e:	781b      	ldrb	r3, [r3, #0]
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop
 800618c:	20000060 	.word	0x20000060

08006190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006198:	f7ff ffae 	bl	80060f8 <HAL_GetTick>
 800619c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d005      	beq.n	80061b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <HAL_Delay+0x44>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	461a      	mov	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80061b6:	bf00      	nop
 80061b8:	f7ff ff9e 	bl	80060f8 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d8f7      	bhi.n	80061b8 <HAL_Delay+0x28>
  {
  }
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000060 	.word	0x20000060

080061d8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80061dc:	4b05      	ldr	r3, [pc, #20]	; (80061f4 <HAL_SuspendTick+0x1c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a04      	ldr	r2, [pc, #16]	; (80061f4 <HAL_SuspendTick+0x1c>)
 80061e2:	f023 0302 	bic.w	r3, r3, #2
 80061e6:	6013      	str	r3, [r2, #0]
}
 80061e8:	bf00      	nop
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	e000e010 	.word	0xe000e010

080061f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <HAL_ResumeTick+0x1c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a04      	ldr	r2, [pc, #16]	; (8006214 <HAL_ResumeTick+0x1c>)
 8006202:	f043 0302 	orr.w	r3, r3, #2
 8006206:	6013      	str	r3, [r2, #0]
}
 8006208:	bf00      	nop
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr
 8006212:	bf00      	nop
 8006214:	e000e010 	.word	0xe000e010

08006218 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 800621c:	4b02      	ldr	r3, [pc, #8]	; (8006228 <HAL_GetHalVersion+0x10>)
}
 800621e:	4618      	mov	r0, r3
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	01070d00 	.word	0x01070d00

0800622c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8006230:	4b03      	ldr	r3, [pc, #12]	; (8006240 <HAL_GetREVID+0x14>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	0c1b      	lsrs	r3, r3, #16
}
 8006236:	4618      	mov	r0, r3
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	e0042000 	.word	0xe0042000

08006244 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006244:	b480      	push	{r7}
 8006246:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8006248:	4b04      	ldr	r3, [pc, #16]	; (800625c <HAL_GetDEVID+0x18>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8006250:	4618      	mov	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	e0042000 	.word	0xe0042000

08006260 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006264:	4b05      	ldr	r3, [pc, #20]	; (800627c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800626a:	f043 0301 	orr.w	r3, r3, #1
 800626e:	6053      	str	r3, [r2, #4]
}
 8006270:	bf00      	nop
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	e0042000 	.word	0xe0042000

08006280 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a04      	ldr	r2, [pc, #16]	; (800629c <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6053      	str	r3, [r2, #4]
}
 8006290:	bf00      	nop
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	e0042000 	.word	0xe0042000

080062a0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80062a4:	4b05      	ldr	r3, [pc, #20]	; (80062bc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a04      	ldr	r2, [pc, #16]	; (80062bc <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80062aa:	f043 0302 	orr.w	r3, r3, #2
 80062ae:	6053      	str	r3, [r2, #4]
}
 80062b0:	bf00      	nop
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	e0042000 	.word	0xe0042000

080062c0 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80062c4:	4b05      	ldr	r3, [pc, #20]	; (80062dc <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	4a04      	ldr	r2, [pc, #16]	; (80062dc <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80062ca:	f023 0302 	bic.w	r3, r3, #2
 80062ce:	6053      	str	r3, [r2, #4]
}
 80062d0:	bf00      	nop
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	e0042000 	.word	0xe0042000

080062e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80062e4:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	4a04      	ldr	r2, [pc, #16]	; (80062fc <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80062ea:	f043 0304 	orr.w	r3, r3, #4
 80062ee:	6053      	str	r3, [r2, #4]
}
 80062f0:	bf00      	nop
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	e0042000 	.word	0xe0042000

08006300 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800630a:	f023 0304 	bic.w	r3, r3, #4
 800630e:	6053      	str	r3, [r2, #4]
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	e0042000 	.word	0xe0042000

08006320 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006324:	4b03      	ldr	r3, [pc, #12]	; (8006334 <HAL_EnableCompensationCell+0x14>)
 8006326:	2201      	movs	r2, #1
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	42270400 	.word	0x42270400

08006338 <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 800633c:	4b03      	ldr	r3, [pc, #12]	; (800634c <HAL_DisableCompensationCell+0x14>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
}
 8006342:	bf00      	nop
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	42270400 	.word	0x42270400

08006350 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_GetUIDw0+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	1fff7a10 	.word	0x1fff7a10

08006368 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800636c:	4b03      	ldr	r3, [pc, #12]	; (800637c <HAL_GetUIDw1+0x14>)
 800636e:	681b      	ldr	r3, [r3, #0]
}
 8006370:	4618      	mov	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	1fff7a14 	.word	0x1fff7a14

08006380 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <HAL_GetUIDw2+0x14>)
 8006386:	681b      	ldr	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	1fff7a18 	.word	0x1fff7a18

08006398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a8:	4b0c      	ldr	r3, [pc, #48]	; (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063b4:	4013      	ands	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063ca:	4a04      	ldr	r2, [pc, #16]	; (80063dc <__NVIC_SetPriorityGrouping+0x44>)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	60d3      	str	r3, [r2, #12]
}
 80063d0:	bf00      	nop
 80063d2:	3714      	adds	r7, #20
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000ed00 	.word	0xe000ed00

080063e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <__NVIC_GetPriorityGrouping+0x18>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	0a1b      	lsrs	r3, r3, #8
 80063ea:	f003 0307 	and.w	r3, r3, #7
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	e000ed00 	.word	0xe000ed00

080063fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db0b      	blt.n	8006426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	f003 021f 	and.w	r2, r3, #31
 8006414:	4907      	ldr	r1, [pc, #28]	; (8006434 <__NVIC_EnableIRQ+0x38>)
 8006416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641a:	095b      	lsrs	r3, r3, #5
 800641c:	2001      	movs	r0, #1
 800641e:	fa00 f202 	lsl.w	r2, r0, r2
 8006422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	e000e100 	.word	0xe000e100

08006438 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006446:	2b00      	cmp	r3, #0
 8006448:	db12      	blt.n	8006470 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f003 021f 	and.w	r2, r3, #31
 8006450:	490a      	ldr	r1, [pc, #40]	; (800647c <__NVIC_DisableIRQ+0x44>)
 8006452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	2001      	movs	r0, #1
 800645a:	fa00 f202 	lsl.w	r2, r0, r2
 800645e:	3320      	adds	r3, #32
 8006460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006464:	f3bf 8f4f 	dsb	sy
}
 8006468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800646a:	f3bf 8f6f 	isb	sy
}
 800646e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	e000e100 	.word	0xe000e100

08006480 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800648a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648e:	2b00      	cmp	r3, #0
 8006490:	db0e      	blt.n	80064b0 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006492:	4a0b      	ldr	r2, [pc, #44]	; (80064c0 <__NVIC_GetPendingIRQ+0x40>)
 8006494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	3340      	adds	r3, #64	; 0x40
 800649c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	fa22 f303 	lsr.w	r3, r2, r3
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	e000      	b.n	80064b2 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80064b0:	2300      	movs	r3, #0
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
 80064be:	bf00      	nop
 80064c0:	e000e100 	.word	0xe000e100

080064c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	db0c      	blt.n	80064f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064d6:	79fb      	ldrb	r3, [r7, #7]
 80064d8:	f003 021f 	and.w	r2, r3, #31
 80064dc:	4907      	ldr	r1, [pc, #28]	; (80064fc <__NVIC_SetPendingIRQ+0x38>)
 80064de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e2:	095b      	lsrs	r3, r3, #5
 80064e4:	2001      	movs	r0, #1
 80064e6:	fa00 f202 	lsl.w	r2, r0, r2
 80064ea:	3340      	adds	r3, #64	; 0x40
 80064ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	e000e100 	.word	0xe000e100

08006500 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	4603      	mov	r3, r0
 8006508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800650a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800650e:	2b00      	cmp	r3, #0
 8006510:	db0c      	blt.n	800652c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	f003 021f 	and.w	r2, r3, #31
 8006518:	4907      	ldr	r1, [pc, #28]	; (8006538 <__NVIC_ClearPendingIRQ+0x38>)
 800651a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	2001      	movs	r0, #1
 8006522:	fa00 f202 	lsl.w	r2, r0, r2
 8006526:	3360      	adds	r3, #96	; 0x60
 8006528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	e000e100 	.word	0xe000e100

0800653c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800654a:	2b00      	cmp	r3, #0
 800654c:	db0e      	blt.n	800656c <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800654e:	4a0b      	ldr	r2, [pc, #44]	; (800657c <__NVIC_GetActive+0x40>)
 8006550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	3380      	adds	r3, #128	; 0x80
 8006558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800655c:	79fb      	ldrb	r3, [r7, #7]
 800655e:	f003 031f 	and.w	r3, r3, #31
 8006562:	fa22 f303 	lsr.w	r3, r2, r3
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	e000      	b.n	800656e <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 800656c:	2300      	movs	r3, #0
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr
 800657a:	bf00      	nop
 800657c:	e000e100 	.word	0xe000e100

08006580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	4603      	mov	r3, r0
 8006588:	6039      	str	r1, [r7, #0]
 800658a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800658c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006590:	2b00      	cmp	r3, #0
 8006592:	db0a      	blt.n	80065aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	490c      	ldr	r1, [pc, #48]	; (80065cc <__NVIC_SetPriority+0x4c>)
 800659a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659e:	0112      	lsls	r2, r2, #4
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	440b      	add	r3, r1
 80065a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065a8:	e00a      	b.n	80065c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	4908      	ldr	r1, [pc, #32]	; (80065d0 <__NVIC_SetPriority+0x50>)
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	f003 030f 	and.w	r3, r3, #15
 80065b6:	3b04      	subs	r3, #4
 80065b8:	0112      	lsls	r2, r2, #4
 80065ba:	b2d2      	uxtb	r2, r2
 80065bc:	440b      	add	r3, r1
 80065be:	761a      	strb	r2, [r3, #24]
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	e000e100 	.word	0xe000e100
 80065d0:	e000ed00 	.word	0xe000ed00

080065d4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	4603      	mov	r3, r0
 80065dc:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 80065de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	db09      	blt.n	80065fa <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 80065e6:	4a0d      	ldr	r2, [pc, #52]	; (800661c <__NVIC_GetPriority+0x48>)
 80065e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ec:	4413      	add	r3, r2
 80065ee:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	091b      	lsrs	r3, r3, #4
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	e009      	b.n	800660e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 80065fa:	4a09      	ldr	r2, [pc, #36]	; (8006620 <__NVIC_GetPriority+0x4c>)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	3b04      	subs	r3, #4
 8006604:	4413      	add	r3, r2
 8006606:	7e1b      	ldrb	r3, [r3, #24]
 8006608:	b2db      	uxtb	r3, r3
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	b2db      	uxtb	r3, r3
  }
}
 800660e:	4618      	mov	r0, r3
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e100 	.word	0xe000e100
 8006620:	e000ed00 	.word	0xe000ed00

08006624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	; 0x24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f1c3 0307 	rsb	r3, r3, #7
 800663e:	2b04      	cmp	r3, #4
 8006640:	bf28      	it	cs
 8006642:	2304      	movcs	r3, #4
 8006644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3304      	adds	r3, #4
 800664a:	2b06      	cmp	r3, #6
 800664c:	d902      	bls.n	8006654 <NVIC_EncodePriority+0x30>
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3b03      	subs	r3, #3
 8006652:	e000      	b.n	8006656 <NVIC_EncodePriority+0x32>
 8006654:	2300      	movs	r3, #0
 8006656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006658:	f04f 32ff 	mov.w	r2, #4294967295
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	43da      	mvns	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	401a      	ands	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800666c:	f04f 31ff 	mov.w	r1, #4294967295
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	fa01 f303 	lsl.w	r3, r1, r3
 8006676:	43d9      	mvns	r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800667c:	4313      	orrs	r3, r2
         );
}
 800667e:	4618      	mov	r0, r3
 8006680:	3724      	adds	r7, #36	; 0x24
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 800668a:	b480      	push	{r7}
 800668c:	b089      	sub	sp, #36	; 0x24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	60b9      	str	r1, [r7, #8]
 8006694:	607a      	str	r2, [r7, #4]
 8006696:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	f1c3 0307 	rsb	r3, r3, #7
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	bf28      	it	cs
 80066aa:	2304      	movcs	r3, #4
 80066ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3304      	adds	r3, #4
 80066b2:	2b06      	cmp	r3, #6
 80066b4:	d902      	bls.n	80066bc <NVIC_DecodePriority+0x32>
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	3b03      	subs	r3, #3
 80066ba:	e000      	b.n	80066be <NVIC_DecodePriority+0x34>
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	40da      	lsrs	r2, r3
 80066c6:	f04f 31ff 	mov.w	r1, #4294967295
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	fa01 f303 	lsl.w	r3, r1, r3
 80066d0:	43db      	mvns	r3, r3
 80066d2:	401a      	ands	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 80066d8:	f04f 32ff 	mov.w	r2, #4294967295
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43da      	mvns	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	401a      	ands	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	601a      	str	r2, [r3, #0]
}
 80066ec:	bf00      	nop
 80066ee:	3724      	adds	r7, #36	; 0x24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80066fc:	f3bf 8f4f 	dsb	sy
}
 8006700:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <__NVIC_SystemReset+0x24>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800670a:	4904      	ldr	r1, [pc, #16]	; (800671c <__NVIC_SystemReset+0x24>)
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <__NVIC_SystemReset+0x28>)
 800670e:	4313      	orrs	r3, r2
 8006710:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006712:	f3bf 8f4f 	dsb	sy
}
 8006716:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006718:	bf00      	nop
 800671a:	e7fd      	b.n	8006718 <__NVIC_SystemReset+0x20>
 800671c:	e000ed00 	.word	0xe000ed00
 8006720:	05fa0004 	.word	0x05fa0004

08006724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3b01      	subs	r3, #1
 8006730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006734:	d301      	bcc.n	800673a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006736:	2301      	movs	r3, #1
 8006738:	e00f      	b.n	800675a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <SysTick_Config+0x40>)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006742:	210f      	movs	r1, #15
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	f7ff ff1a 	bl	8006580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800674c:	4b05      	ldr	r3, [pc, #20]	; (8006764 <SysTick_Config+0x40>)
 800674e:	2200      	movs	r2, #0
 8006750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006752:	4b04      	ldr	r3, [pc, #16]	; (8006764 <SysTick_Config+0x40>)
 8006754:	2207      	movs	r2, #7
 8006756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	e000e010 	.word	0xe000e010

08006768 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f7ff fe11 	bl	8006398 <__NVIC_SetPriorityGrouping>
}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	4603      	mov	r3, r0
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006790:	f7ff fe26 	bl	80063e0 <__NVIC_GetPriorityGrouping>
 8006794:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	6978      	ldr	r0, [r7, #20]
 800679c:	f7ff ff42 	bl	8006624 <NVIC_EncodePriority>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067a6:	4611      	mov	r1, r2
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fee9 	bl	8006580 <__NVIC_SetPriority>
}
 80067ae:	bf00      	nop
 80067b0:	3718      	adds	r7, #24
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	4603      	mov	r3, r0
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7ff fe19 	bl	80063fc <__NVIC_EnableIRQ>
}
 80067ca:	bf00      	nop
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	4603      	mov	r3, r0
 80067da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80067dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff fe29 	bl	8006438 <__NVIC_DisableIRQ>
}
 80067e6:	bf00      	nop
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80067f2:	f7ff ff81 	bl	80066f8 <__NVIC_SystemReset>

080067f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b082      	sub	sp, #8
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff ff90 	bl	8006724 <SysTick_Config>
 8006804:	4603      	mov	r3, r0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006812:	f3bf 8f5f 	dmb	sy
}
 8006816:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_MPU_Disable+0x26>)
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	4a05      	ldr	r2, [pc, #20]	; (8006834 <HAL_MPU_Disable+0x26>)
 800681e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006822:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006824:	4b04      	ldr	r3, [pc, #16]	; (8006838 <HAL_MPU_Disable+0x2a>)
 8006826:	2200      	movs	r2, #0
 8006828:	605a      	str	r2, [r3, #4]
}
 800682a:	bf00      	nop
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	e000ed00 	.word	0xe000ed00
 8006838:	e000ed90 	.word	0xe000ed90

0800683c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006844:	4a0b      	ldr	r2, [pc, #44]	; (8006874 <HAL_MPU_Enable+0x38>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800684e:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <HAL_MPU_Enable+0x3c>)
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	4a09      	ldr	r2, [pc, #36]	; (8006878 <HAL_MPU_Enable+0x3c>)
 8006854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006858:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800685a:	f3bf 8f4f 	dsb	sy
}
 800685e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006860:	f3bf 8f6f 	isb	sy
}
 8006864:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	e000ed90 	.word	0xe000ed90
 8006878:	e000ed00 	.word	0xe000ed00

0800687c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	785a      	ldrb	r2, [r3, #1]
 8006888:	4b1d      	ldr	r3, [pc, #116]	; (8006900 <HAL_MPU_ConfigRegion+0x84>)
 800688a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d029      	beq.n	80068e8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <HAL_MPU_ConfigRegion+0x84>)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	7b1b      	ldrb	r3, [r3, #12]
 80068a0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	7adb      	ldrb	r3, [r3, #11]
 80068a6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068a8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	7a9b      	ldrb	r3, [r3, #10]
 80068ae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80068b0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	7b5b      	ldrb	r3, [r3, #13]
 80068b6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80068b8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	7b9b      	ldrb	r3, [r3, #14]
 80068be:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80068c0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	7bdb      	ldrb	r3, [r3, #15]
 80068c6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80068c8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	7a5b      	ldrb	r3, [r3, #9]
 80068ce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80068d0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7a1b      	ldrb	r3, [r3, #8]
 80068d6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80068d8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	7812      	ldrb	r2, [r2, #0]
 80068de:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068e0:	4a07      	ldr	r2, [pc, #28]	; (8006900 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80068e2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80068e4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 80068e6:	e005      	b.n	80068f4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 80068e8:	4b05      	ldr	r3, [pc, #20]	; (8006900 <HAL_MPU_ConfigRegion+0x84>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <HAL_MPU_ConfigRegion+0x84>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	611a      	str	r2, [r3, #16]
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	e000ed90 	.word	0xe000ed90

08006904 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8006908:	f7ff fd6a 	bl	80063e0 <__NVIC_GetPriorityGrouping>
 800690c:	4603      	mov	r3, r0
}
 800690e:	4618      	mov	r0, r3
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	4603      	mov	r3, r0
 8006920:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8006922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff fe54 	bl	80065d4 <__NVIC_GetPriority>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	68b9      	ldr	r1, [r7, #8]
 8006932:	f7ff feaa 	bl	800668a <NVIC_DecodePriority>
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b082      	sub	sp, #8
 8006942:	af00      	add	r7, sp, #0
 8006944:	4603      	mov	r3, r0
 8006946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff fdb9 	bl	80064c4 <__NVIC_SetPendingIRQ>
}
 8006952:	bf00      	nop
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b082      	sub	sp, #8
 800695e:	af00      	add	r7, sp, #0
 8006960:	4603      	mov	r3, r0
 8006962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8006964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff fd89 	bl	8006480 <__NVIC_GetPendingIRQ>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff fdba 	bl	8006500 <__NVIC_ClearPendingIRQ>
}
 800698c:	bf00      	nop
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 800699e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fdca 	bl	800653c <__NVIC_GetActive>
 80069a8:	4603      	mov	r3, r0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b04      	cmp	r3, #4
 80069be:	d106      	bne.n	80069ce <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80069c6:	f043 0304 	orr.w	r3, r3, #4
 80069ca:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80069cc:	e005      	b.n	80069da <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80069ce:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 80069d4:	f023 0304 	bic.w	r3, r3, #4
 80069d8:	6013      	str	r3, [r2, #0]
}
 80069da:	bf00      	nop
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	e000e010 	.word	0xe000e010

080069ec <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80069f0:	f000 f802 	bl	80069f8 <HAL_SYSTICK_Callback>
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d101      	bne.n	8006a18 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e014      	b.n	8006a42 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	791b      	ldrb	r3, [r3, #4]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d105      	bne.n	8006a2e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7fe fd03 	bl	8005434 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e00f      	b.n	8006a7c <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2202      	movs	r2, #2
 8006a60:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe fd2a 	bl	80054bc <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	795b      	ldrb	r3, [r3, #5]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_DAC_Start+0x16>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e040      	b.n	8006b1c <HAL_DAC_Start+0x98>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6819      	ldr	r1, [r3, #0]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	f003 0310 	and.w	r3, r3, #16
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10f      	bne.n	8006ae4 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8006ace:	2b3c      	cmp	r3, #60	; 0x3c
 8006ad0:	d11d      	bne.n	8006b0e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0201 	orr.w	r2, r2, #1
 8006ae0:	605a      	str	r2, [r3, #4]
 8006ae2:	e014      	b.n	8006b0e <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	213c      	movs	r1, #60	; 0x3c
 8006af6:	fa01 f303 	lsl.w	r3, r1, r3
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d107      	bne.n	8006b0e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f042 0202 	orr.w	r2, r2, #2
 8006b0c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	370c      	adds	r7, #12
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	6819      	ldr	r1, [r3, #0]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	f003 0310 	and.w	r3, r3, #16
 8006b3e:	2201      	movs	r2, #1
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	43da      	mvns	r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	795b      	ldrb	r3, [r3, #5]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <HAL_DAC_Start_DMA+0x22>
 8006b80:	2302      	movs	r3, #2
 8006b82:	e0ab      	b.n	8006cdc <HAL_DAC_Start_DMA+0x17a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2201      	movs	r2, #1
 8006b88:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d12f      	bne.n	8006bf6 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	4a52      	ldr	r2, [pc, #328]	; (8006ce4 <HAL_DAC_Start_DMA+0x182>)
 8006b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	4a51      	ldr	r2, [pc, #324]	; (8006ce8 <HAL_DAC_Start_DMA+0x186>)
 8006ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	4a50      	ldr	r2, [pc, #320]	; (8006cec <HAL_DAC_Start_DMA+0x18a>)
 8006bac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bbc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d013      	beq.n	8006bec <HAL_DAC_Start_DMA+0x8a>
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	2b08      	cmp	r3, #8
 8006bc8:	d845      	bhi.n	8006c56 <HAL_DAC_Start_DMA+0xf4>
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <HAL_DAC_Start_DMA+0x76>
 8006bd0:	6a3b      	ldr	r3, [r7, #32]
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d005      	beq.n	8006be2 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8006bd6:	e03e      	b.n	8006c56 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	613b      	str	r3, [r7, #16]
        break;
 8006be0:	e03c      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	330c      	adds	r3, #12
 8006be8:	613b      	str	r3, [r7, #16]
        break;
 8006bea:	e037      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	613b      	str	r3, [r7, #16]
        break;
 8006bf4:	e032      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	4a3d      	ldr	r2, [pc, #244]	; (8006cf0 <HAL_DAC_Start_DMA+0x18e>)
 8006bfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4a3c      	ldr	r2, [pc, #240]	; (8006cf4 <HAL_DAC_Start_DMA+0x192>)
 8006c04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	4a3b      	ldr	r2, [pc, #236]	; (8006cf8 <HAL_DAC_Start_DMA+0x196>)
 8006c0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c1c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d013      	beq.n	8006c4c <HAL_DAC_Start_DMA+0xea>
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d817      	bhi.n	8006c5a <HAL_DAC_Start_DMA+0xf8>
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d003      	beq.n	8006c38 <HAL_DAC_Start_DMA+0xd6>
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d005      	beq.n	8006c42 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8006c36:	e010      	b.n	8006c5a <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3314      	adds	r3, #20
 8006c3e:	613b      	str	r3, [r7, #16]
        break;
 8006c40:	e00c      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3318      	adds	r3, #24
 8006c48:	613b      	str	r3, [r7, #16]
        break;
 8006c4a:	e007      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	331c      	adds	r3, #28
 8006c52:	613b      	str	r3, [r7, #16]
        break;
 8006c54:	e002      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        break;
 8006c56:	bf00      	nop
 8006c58:	e000      	b.n	8006c5c <HAL_DAC_Start_DMA+0xfa>
        break;
 8006c5a:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d111      	bne.n	8006c86 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c70:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6898      	ldr	r0, [r3, #8]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	f000 fca5 	bl	80075ca <HAL_DMA_Start_IT>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]
 8006c84:	e010      	b.n	8006ca8 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8006c94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68d8      	ldr	r0, [r3, #12]
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	f000 fc93 	bl	80075ca <HAL_DMA_Start_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10c      	bne.n	8006cce <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6819      	ldr	r1, [r3, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	e005      	b.n	8006cda <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	f043 0204 	orr.w	r2, r3, #4
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	08006fdf 	.word	0x08006fdf
 8006ce8:	08007001 	.word	0x08007001
 8006cec:	0800701d 	.word	0x0800701d
 8006cf0:	080072d1 	.word	0x080072d1
 8006cf4:	080072f3 	.word	0x080072f3
 8006cf8:	0800730f 	.word	0x0800730f

08006cfc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b082      	sub	sp, #8
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	f003 0310 	and.w	r3, r3, #16
 8006d12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d16:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1a:	43da      	mvns	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	400a      	ands	r2, r1
 8006d22:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6819      	ldr	r1, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2201      	movs	r2, #1
 8006d32:	fa02 f303 	lsl.w	r3, r2, r3
 8006d36:	43da      	mvns	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	400a      	ands	r2, r1
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10d      	bne.n	8006d62 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 fc95 	bl	800767a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e00c      	b.n	8006d7c <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f000 fc87 	bl	800767a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8006d7a:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	d120      	bne.n	8006de6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006db2:	d118      	bne.n	8006de6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2204      	movs	r2, #4
 8006db8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	f043 0201 	orr.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dde:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f870 	bl	8006ec6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006df4:	d120      	bne.n	8006e38 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e04:	d118      	bne.n	8006e38 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2204      	movs	r2, #4
 8006e0a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	f043 0202 	orr.w	r2, r3, #2
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006e20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006e30:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa28 	bl	8007288 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b087      	sub	sp, #28
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d105      	bne.n	8006e6a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	3308      	adds	r3, #8
 8006e66:	617b      	str	r3, [r7, #20]
 8006e68:	e004      	b.n	8006e74 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3314      	adds	r3, #20
 8006e72:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	461a      	mov	r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr

08006e8a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006e8a:	b480      	push	{r7}
 8006e8c:	b083      	sub	sp, #12
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d104      	bne.n	8006ef8 <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	60fb      	str	r3, [r7, #12]
 8006ef6:	e003      	b.n	8006f00 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8006f00:	68fb      	ldr	r3, [r7, #12]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	b087      	sub	sp, #28
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	60f8      	str	r0, [r7, #12]
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	795b      	ldrb	r3, [r3, #5]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_DAC_ConfigChannel+0x18>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e03c      	b.n	8006fa0 <HAL_DAC_ConfigChannel+0x92>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f003 0310 	and.w	r3, r3, #16
 8006f40:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	fa02 f303 	lsl.w	r3, r2, r3
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	6819      	ldr	r1, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	22c0      	movs	r2, #192	; 0xc0
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	43da      	mvns	r2, r3
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	400a      	ands	r2, r1
 8006f90:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2201      	movs	r2, #1
 8006f96:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	371c      	adds	r7, #28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b083      	sub	sp, #12
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	791b      	ldrb	r3, [r3, #4]
 8006fb8:	b2db      	uxtb	r3, r3
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff ff4c 	bl	8006e8a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	711a      	strb	r2, [r3, #4]
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f7ff ff45 	bl	8006e9e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007014:	bf00      	nop
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007028:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	691b      	ldr	r3, [r3, #16]
 800702e:	f043 0204 	orr.w	r2, r3, #4
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	f7ff ff3b 	bl	8006eb2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2201      	movs	r2, #1
 8007040:	711a      	strb	r2, [r3, #4]
}
 8007042:	bf00      	nop
 8007044:	3710      	adds	r7, #16
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}

0800704a <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 800704a:	b480      	push	{r7}
 800704c:	b085      	sub	sp, #20
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007052:	2300      	movs	r3, #0
 8007054:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	795b      	ldrb	r3, [r3, #5]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d101      	bne.n	8007062 <HAL_DACEx_DualStart+0x18>
 800705e:	2302      	movs	r3, #2
 8007060:	e03b      	b.n	80070da <HAL_DACEx_DualStart+0x90>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f042 0201 	orr.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800708c:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007098:	2b3c      	cmp	r3, #60	; 0x3c
 800709a:	d103      	bne.n	80070a4 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80070ae:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80070b2:	d103      	bne.n	80070bc <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f043 0302 	orr.w	r3, r3, #2
 80070ba:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6859      	ldr	r1, [r3, #4]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b083      	sub	sp, #12
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f022 0201 	bic.w	r2, r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800710c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2201      	movs	r2, #1
 8007112:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	370c      	adds	r7, #12
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	795b      	ldrb	r3, [r3, #5]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_DACEx_TriangleWaveGenerate+0x18>
 8007136:	2302      	movs	r3, #2
 8007138:	e024      	b.n	8007184 <HAL_DACEx_TriangleWaveGenerate+0x62>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2202      	movs	r2, #2
 8007144:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8007156:	fa01 f303 	lsl.w	r3, r1, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	ea02 0103 	and.w	r1, r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f003 0310 	and.w	r3, r3, #16
 800716c:	409a      	lsls	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2201      	movs	r2, #1
 800717a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	795b      	ldrb	r3, [r3, #5]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d101      	bne.n	80071a8 <HAL_DACEx_NoiseWaveGenerate+0x18>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e024      	b.n	80071f2 <HAL_DACEx_NoiseWaveGenerate+0x62>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2202      	movs	r2, #2
 80071b2:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f003 0310 	and.w	r3, r3, #16
 80071c0:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80071c4:	fa01 f303 	lsl.w	r3, r1, r3
 80071c8:	43db      	mvns	r3, r3
 80071ca:	ea02 0103 	and.w	r1, r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	409a      	lsls	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr

080071fe <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 80071fe:	b480      	push	{r7}
 8007200:	b087      	sub	sp, #28
 8007202:	af00      	add	r7, sp, #0
 8007204:	60f8      	str	r0, [r7, #12]
 8007206:	60b9      	str	r1, [r7, #8]
 8007208:	607a      	str	r2, [r7, #4]
 800720a:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b08      	cmp	r3, #8
 8007210:	d105      	bne.n	800721e <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	021b      	lsls	r3, r3, #8
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e004      	b.n	8007228 <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	041b      	lsls	r3, r3, #16
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4313      	orrs	r3, r2
 8007226:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4413      	add	r3, r2
 8007234:	3320      	adds	r3, #32
 8007236:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	371c      	adds	r7, #28
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80072c2:	68fb      	ldr	r3, [r7, #12]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ffb4 	bl	800724c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2201      	movs	r2, #1
 80072e8:	711a      	strb	r2, [r3, #4]
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b084      	sub	sp, #16
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f7ff ffad 	bl	8007260 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007306:	bf00      	nop
 8007308:	3710      	adds	r7, #16
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f043 0204 	orr.w	r2, r3, #4
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007328:	68f8      	ldr	r0, [r7, #12]
 800732a:	f7ff ffa3 	bl	8007274 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2201      	movs	r2, #1
 8007332:	711a      	strb	r2, [r3, #4]
}
 8007334:	bf00      	nop
 8007336:	3710      	adds	r7, #16
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007348:	f7fe fed6 	bl	80060f8 <HAL_GetTick>
 800734c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e099      	b.n	800748c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f022 0201 	bic.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007378:	e00f      	b.n	800739a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800737a:	f7fe febd 	bl	80060f8 <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b05      	cmp	r3, #5
 8007386:	d908      	bls.n	800739a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2220      	movs	r2, #32
 800738c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2203      	movs	r2, #3
 8007392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e078      	b.n	800748c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e8      	bne.n	800737a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	4b38      	ldr	r3, [pc, #224]	; (8007494 <HAL_DMA_Init+0x158>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	2b04      	cmp	r3, #4
 80073f2:	d107      	bne.n	8007404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fc:	4313      	orrs	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0307 	bic.w	r3, r3, #7
 800741a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742a:	2b04      	cmp	r3, #4
 800742c:	d117      	bne.n	800745e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00e      	beq.n	800745e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fd4d 	bl	8007ee0 <DMA_CheckFifoParam>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2240      	movs	r2, #64	; 0x40
 8007450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800745a:	2301      	movs	r3, #1
 800745c:	e016      	b.n	800748c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 fd05 	bl	8007e76 <DMA_CalcBaseAndBitshift>
 800746c:	4603      	mov	r3, r0
 800746e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007474:	223f      	movs	r2, #63	; 0x3f
 8007476:	409a      	lsls	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	f010803f 	.word	0xf010803f

08007498 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e050      	b.n	800754c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d101      	bne.n	80074ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
 80074b8:	e048      	b.n	800754c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 0201 	bic.w	r2, r2, #1
 80074c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2200      	movs	r2, #0
 80074e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2200      	movs	r2, #0
 80074e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2221      	movs	r2, #33	; 0x21
 80074f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fcbb 	bl	8007e76 <DMA_CalcBaseAndBitshift>
 8007500:	4603      	mov	r3, r0
 8007502:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800752c:	223f      	movs	r2, #63	; 0x3f
 800752e:	409a      	lsls	r2, r3
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
 8007560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007562:	2300      	movs	r3, #0
 8007564:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800756c:	2b01      	cmp	r3, #1
 800756e:	d101      	bne.n	8007574 <HAL_DMA_Start+0x20>
 8007570:	2302      	movs	r3, #2
 8007572:	e026      	b.n	80075c2 <HAL_DMA_Start+0x6e>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d115      	bne.n	80075b4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	68b9      	ldr	r1, [r7, #8]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fc3c 	bl	8007e1a <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
 80075b2:	e005      	b.n	80075c0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075bc:	2302      	movs	r3, #2
 80075be:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3718      	adds	r7, #24
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b086      	sub	sp, #24
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
 80075d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d101      	bne.n	80075f0 <HAL_DMA_Start_IT+0x26>
 80075ec:	2302      	movs	r3, #2
 80075ee:	e040      	b.n	8007672 <HAL_DMA_Start_IT+0xa8>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b01      	cmp	r3, #1
 8007602:	d12f      	bne.n	8007664 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 fbfe 	bl	8007e1a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007622:	223f      	movs	r2, #63	; 0x3f
 8007624:	409a      	lsls	r2, r3
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0216 	orr.w	r2, r2, #22
 8007638:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	2b00      	cmp	r3, #0
 8007640:	d007      	beq.n	8007652 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0208 	orr.w	r2, r2, #8
 8007650:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f042 0201 	orr.w	r2, r2, #1
 8007660:	601a      	str	r2, [r3, #0]
 8007662:	e005      	b.n	8007670 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2200      	movs	r2, #0
 8007668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800766c:	2302      	movs	r3, #2
 800766e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007670:	7dfb      	ldrb	r3, [r7, #23]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3718      	adds	r7, #24
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b084      	sub	sp, #16
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007686:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007688:	f7fe fd36 	bl	80060f8 <HAL_GetTick>
 800768c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b02      	cmp	r3, #2
 8007698:	d008      	beq.n	80076ac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e052      	b.n	8007752 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f022 0216 	bic.w	r2, r2, #22
 80076ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076ca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d103      	bne.n	80076dc <HAL_DMA_Abort+0x62>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0208 	bic.w	r2, r2, #8
 80076ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0201 	bic.w	r2, r2, #1
 80076fa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80076fc:	e013      	b.n	8007726 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076fe:	f7fe fcfb 	bl	80060f8 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b05      	cmp	r3, #5
 800770a:	d90c      	bls.n	8007726 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2203      	movs	r2, #3
 8007716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e015      	b.n	8007752 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0301 	and.w	r3, r3, #1
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1e4      	bne.n	80076fe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007738:	223f      	movs	r2, #63	; 0x3f
 800773a:	409a      	lsls	r2, r3
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b02      	cmp	r3, #2
 800776c:	d004      	beq.n	8007778 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2280      	movs	r2, #128	; 0x80
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e00c      	b.n	8007792 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2205      	movs	r2, #5
 800777c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f022 0201 	bic.w	r2, r2, #1
 800778e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b08a      	sub	sp, #40	; 0x28
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	60f8      	str	r0, [r7, #12]
 80077a6:	460b      	mov	r3, r1
 80077a8:	607a      	str	r2, [r7, #4]
 80077aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 80077ac:	2300      	movs	r3, #0
 80077ae:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 80077b0:	f7fe fca2 	bl	80060f8 <HAL_GetTick>
 80077b4:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d008      	beq.n	80077d4 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2280      	movs	r2, #128	; 0x80
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	e0bf      	b.n	8007954 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d005      	beq.n	80077ee <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0b2      	b.n	8007954 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 80077ee:	7afb      	ldrb	r3, [r7, #11]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f8:	2220      	movs	r2, #32
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007800:	e005      	b.n	800780e <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007806:	2210      	movs	r2, #16
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007812:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 800781a:	e05a      	b.n	80078d2 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d017      	beq.n	8007854 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_DMA_PollForTransfer+0x9c>
 800782a:	f7fe fc65 	bl	80060f8 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d20c      	bcs.n	8007854 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2220      	movs	r2, #32
 800783e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007850:	2303      	movs	r3, #3
 8007852:	e07f      	b.n	8007954 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785e:	2208      	movs	r2, #8
 8007860:	409a      	lsls	r2, r3
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787a:	2208      	movs	r2, #8
 800787c:	409a      	lsls	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007886:	2201      	movs	r2, #1
 8007888:	409a      	lsls	r2, r3
 800788a:	6a3b      	ldr	r3, [r7, #32]
 800788c:	4013      	ands	r3, r2
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007896:	f043 0202 	orr.w	r2, r3, #2
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a2:	2201      	movs	r2, #1
 80078a4:	409a      	lsls	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	2204      	movs	r2, #4
 80078b0:	409a      	lsls	r2, r3
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	4013      	ands	r3, r2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f043 0204 	orr.w	r2, r3, #4
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ca:	2204      	movs	r2, #4
 80078cc:	409a      	lsls	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	4013      	ands	r3, r2
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d105      	bne.n	80078e8 <HAL_DMA_PollForTransfer+0x14a>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e0:	f003 0301 	and.w	r3, r3, #1
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d099      	beq.n	800781c <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d018      	beq.n	8007922 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f4:	f003 0301 	and.w	r3, r3, #1
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d012      	beq.n	8007922 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f7ff febc 	bl	800767a <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007906:	2230      	movs	r2, #48	; 0x30
 8007908:	409a      	lsls	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e018      	b.n	8007954 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007922:	7afb      	ldrb	r3, [r7, #11]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10e      	bne.n	8007946 <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792c:	2230      	movs	r2, #48	; 0x30
 800792e:	409a      	lsls	r2, r3
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007944:	e005      	b.n	8007952 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794a:	2210      	movs	r2, #16
 800794c:	409a      	lsls	r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8007952:	7ffb      	ldrb	r3, [r7, #31]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3728      	adds	r7, #40	; 0x28
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b086      	sub	sp, #24
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007964:	2300      	movs	r3, #0
 8007966:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007968:	4b8e      	ldr	r3, [pc, #568]	; (8007ba4 <HAL_DMA_IRQHandler+0x248>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a8e      	ldr	r2, [pc, #568]	; (8007ba8 <HAL_DMA_IRQHandler+0x24c>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	0a9b      	lsrs	r3, r3, #10
 8007974:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	2208      	movs	r2, #8
 8007988:	409a      	lsls	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4013      	ands	r3, r2
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01a      	beq.n	80079c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0304 	and.w	r3, r3, #4
 800799c:	2b00      	cmp	r3, #0
 800799e:	d013      	beq.n	80079c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f022 0204 	bic.w	r2, r2, #4
 80079ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079b4:	2208      	movs	r2, #8
 80079b6:	409a      	lsls	r2, r3
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c0:	f043 0201 	orr.w	r2, r3, #1
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079cc:	2201      	movs	r2, #1
 80079ce:	409a      	lsls	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4013      	ands	r3, r2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d012      	beq.n	80079fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00b      	beq.n	80079fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ea:	2201      	movs	r2, #1
 80079ec:	409a      	lsls	r2, r3
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a02:	2204      	movs	r2, #4
 8007a04:	409a      	lsls	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4013      	ands	r3, r2
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d012      	beq.n	8007a34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0302 	and.w	r3, r3, #2
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a20:	2204      	movs	r2, #4
 8007a22:	409a      	lsls	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2c:	f043 0204 	orr.w	r2, r3, #4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a38:	2210      	movs	r2, #16
 8007a3a:	409a      	lsls	r2, r3
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d043      	beq.n	8007acc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0308 	and.w	r3, r3, #8
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d03c      	beq.n	8007acc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a56:	2210      	movs	r2, #16
 8007a58:	409a      	lsls	r2, r3
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d018      	beq.n	8007a9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d108      	bne.n	8007a8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d024      	beq.n	8007acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	4798      	blx	r3
 8007a8a:	e01f      	b.n	8007acc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01b      	beq.n	8007acc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	4798      	blx	r3
 8007a9c:	e016      	b.n	8007acc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d107      	bne.n	8007abc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f022 0208 	bic.w	r2, r2, #8
 8007aba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d003      	beq.n	8007acc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	409a      	lsls	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 808f 	beq.w	8007bfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f000 8087 	beq.w	8007bfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af2:	2220      	movs	r2, #32
 8007af4:	409a      	lsls	r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	d136      	bne.n	8007b74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0216 	bic.w	r2, r2, #22
 8007b14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <HAL_DMA_IRQHandler+0x1da>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0208 	bic.w	r2, r2, #8
 8007b44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	223f      	movs	r2, #63	; 0x3f
 8007b4c:	409a      	lsls	r2, r3
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d07e      	beq.n	8007c68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	4798      	blx	r3
        }
        return;
 8007b72:	e079      	b.n	8007c68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d01d      	beq.n	8007bbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10d      	bne.n	8007bac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d031      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	4798      	blx	r3
 8007ba0:	e02c      	b.n	8007bfc <HAL_DMA_IRQHandler+0x2a0>
 8007ba2:	bf00      	nop
 8007ba4:	20000058 	.word	0x20000058
 8007ba8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d023      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
 8007bbc:	e01e      	b.n	8007bfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10f      	bne.n	8007bec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0210 	bic.w	r2, r2, #16
 8007bda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d032      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2205      	movs	r2, #5
 8007c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f022 0201 	bic.w	r2, r2, #1
 8007c26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60bb      	str	r3, [r7, #8]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d307      	bcc.n	8007c44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f2      	bne.n	8007c28 <HAL_DMA_IRQHandler+0x2cc>
 8007c42:	e000      	b.n	8007c46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007c44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d005      	beq.n	8007c6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
 8007c66:	e000      	b.n	8007c6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8007c68:	bf00      	nop
    }
  }
}
 8007c6a:	3718      	adds	r7, #24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_DMA_RegisterCallback+0x20>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e03c      	b.n	8007d0a <HAL_DMA_RegisterCallback+0x9a>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d129      	bne.n	8007cf8 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8007ca4:	7afb      	ldrb	r3, [r7, #11]
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d829      	bhi.n	8007cfe <HAL_DMA_RegisterCallback+0x8e>
 8007caa:	a201      	add	r2, pc, #4	; (adr r2, 8007cb0 <HAL_DMA_RegisterCallback+0x40>)
 8007cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb0:	08007cc9 	.word	0x08007cc9
 8007cb4:	08007cd1 	.word	0x08007cd1
 8007cb8:	08007cd9 	.word	0x08007cd9
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007ce9 	.word	0x08007ce9
 8007cc4:	08007cf1 	.word	0x08007cf1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8007cce:	e017      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007cd6:	e013      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8007cde:	e00f      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8007ce6:	e00b      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8007cee:	e007      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007cf6:	e003      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	75fb      	strb	r3, [r7, #23]
 8007cfc:	e000      	b.n	8007d00 <HAL_DMA_RegisterCallback+0x90>
      break;
 8007cfe:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	371c      	adds	r7, #28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b085      	sub	sp, #20
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	460b      	mov	r3, r1
 8007d20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d101      	bne.n	8007d34 <HAL_DMA_UnRegisterCallback+0x1e>
 8007d30:	2302      	movs	r3, #2
 8007d32:	e052      	b.n	8007dda <HAL_DMA_UnRegisterCallback+0xc4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d141      	bne.n	8007dcc <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	2b06      	cmp	r3, #6
 8007d4c:	d83b      	bhi.n	8007dc6 <HAL_DMA_UnRegisterCallback+0xb0>
 8007d4e:	a201      	add	r2, pc, #4	; (adr r2, 8007d54 <HAL_DMA_UnRegisterCallback+0x3e>)
 8007d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08007d89 	.word	0x08007d89
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	08007d99 	.word	0x08007d99
 8007d6c:	08007da1 	.word	0x08007da1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8007d76:	e02b      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007d7e:	e027      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8007d86:	e023      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8007d8e:	e01f      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8007d96:	e01b      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8007d9e:	e017      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 8007dc4:	e004      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007dca:	e001      	b.n	8007dd0 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007df4:	b2db      	uxtb	r3, r3
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b083      	sub	sp, #12
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	60b9      	str	r1, [r7, #8]
 8007e24:	607a      	str	r2, [r7, #4]
 8007e26:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e36:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	2b40      	cmp	r3, #64	; 0x40
 8007e46:	d108      	bne.n	8007e5a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007e58:	e007      	b.n	8007e6a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	60da      	str	r2, [r3, #12]
}
 8007e6a:	bf00      	nop
 8007e6c:	3714      	adds	r7, #20
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	3b10      	subs	r3, #16
 8007e86:	4a14      	ldr	r2, [pc, #80]	; (8007ed8 <DMA_CalcBaseAndBitshift+0x62>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e90:	4a12      	ldr	r2, [pc, #72]	; (8007edc <DMA_CalcBaseAndBitshift+0x66>)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	461a      	mov	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d909      	bls.n	8007eb8 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007eac:	f023 0303 	bic.w	r3, r3, #3
 8007eb0:	1d1a      	adds	r2, r3, #4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	659a      	str	r2, [r3, #88]	; 0x58
 8007eb6:	e007      	b.n	8007ec8 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ec0:	f023 0303 	bic.w	r3, r3, #3
 8007ec4:	687a      	ldr	r2, [r7, #4]
 8007ec6:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3714      	adds	r7, #20
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	aaaaaaab 	.word	0xaaaaaaab
 8007edc:	080517f4 	.word	0x080517f4

08007ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	699b      	ldr	r3, [r3, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d11f      	bne.n	8007f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b03      	cmp	r3, #3
 8007efe:	d856      	bhi.n	8007fae <DMA_CheckFifoParam+0xce>
 8007f00:	a201      	add	r2, pc, #4	; (adr r2, 8007f08 <DMA_CheckFifoParam+0x28>)
 8007f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f06:	bf00      	nop
 8007f08:	08007f19 	.word	0x08007f19
 8007f0c:	08007f2b 	.word	0x08007f2b
 8007f10:	08007f19 	.word	0x08007f19
 8007f14:	08007faf 	.word	0x08007faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d046      	beq.n	8007fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f28:	e043      	b.n	8007fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f32:	d140      	bne.n	8007fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f38:	e03d      	b.n	8007fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f42:	d121      	bne.n	8007f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d837      	bhi.n	8007fba <DMA_CheckFifoParam+0xda>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <DMA_CheckFifoParam+0x70>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007f67 	.word	0x08007f67
 8007f58:	08007f61 	.word	0x08007f61
 8007f5c:	08007f79 	.word	0x08007f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	73fb      	strb	r3, [r7, #15]
      break;
 8007f64:	e030      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d025      	beq.n	8007fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f76:	e022      	b.n	8007fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007f80:	d11f      	bne.n	8007fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007f86:	e01c      	b.n	8007fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d903      	bls.n	8007f96 <DMA_CheckFifoParam+0xb6>
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b03      	cmp	r3, #3
 8007f92:	d003      	beq.n	8007f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007f94:	e018      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9a:	e015      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00e      	beq.n	8007fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	73fb      	strb	r3, [r7, #15]
      break;
 8007fac:	e00b      	b.n	8007fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8007fae:	bf00      	nop
 8007fb0:	e00a      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007fb2:	bf00      	nop
 8007fb4:	e008      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007fb6:	bf00      	nop
 8007fb8:	e006      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007fba:	bf00      	nop
 8007fbc:	e004      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007fbe:	bf00      	nop
 8007fc0:	e002      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8007fc2:	bf00      	nop
 8007fc4:	e000      	b.n	8007fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8007fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3714      	adds	r7, #20
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b086      	sub	sp, #24
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
 8007fe2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b80      	cmp	r3, #128	; 0x80
 8007fee:	d106      	bne.n	8007ffe <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	75fb      	strb	r3, [r7, #23]
 8007ffc:	e031      	b.n	8008062 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008004:	2b01      	cmp	r3, #1
 8008006:	d101      	bne.n	800800c <HAL_DMAEx_MultiBufferStart+0x36>
 8008008:	2302      	movs	r3, #2
 800800a:	e02b      	b.n	8008064 <HAL_DMAEx_MultiBufferStart+0x8e>
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b01      	cmp	r3, #1
 800801e:	d11e      	bne.n	800805e <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008036:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008040:	6a3b      	ldr	r3, [r7, #32]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	68b9      	ldr	r1, [r7, #8]
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f001 f972 	bl	8009330 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e001      	b.n	8008062 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 800805e:	2302      	movs	r3, #2
 8008060:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008062:	7dfb      	ldrb	r3, [r7, #23]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b80      	cmp	r3, #128	; 0x80
 8008084:	d106      	bne.n	8008094 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f44f 7280 	mov.w	r2, #256	; 0x100
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f001 b911 	b.w	80092b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	d007      	beq.n	80080ac <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d105      	bne.n	80080b8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2240      	movs	r2, #64	; 0x40
 80080b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	f001 b8ff 	b.w	80092b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d102      	bne.n	80080c8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80080c2:	2302      	movs	r3, #2
 80080c4:	f001 b8f7 	b.w	80092b6 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	f041 80e5 	bne.w	80092a8 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2202      	movs	r2, #2
 80080e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80080fa:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	68b9      	ldr	r1, [r7, #8]
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f001 f910 	bl	8009330 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	461a      	mov	r2, r3
 8008116:	4b8d      	ldr	r3, [pc, #564]	; (800834c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8008118:	429a      	cmp	r2, r3
 800811a:	d960      	bls.n	80081de <HAL_DMAEx_MultiBufferStart_IT+0x172>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a8b      	ldr	r2, [pc, #556]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d057      	beq.n	80081d6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a8a      	ldr	r2, [pc, #552]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d050      	beq.n	80081d2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a88      	ldr	r2, [pc, #544]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d049      	beq.n	80081ce <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a87      	ldr	r2, [pc, #540]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d042      	beq.n	80081ca <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a85      	ldr	r2, [pc, #532]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d03a      	beq.n	80081c4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a84      	ldr	r2, [pc, #528]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d032      	beq.n	80081be <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a82      	ldr	r2, [pc, #520]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d02a      	beq.n	80081b8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a81      	ldr	r2, [pc, #516]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d022      	beq.n	80081b2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7f      	ldr	r2, [pc, #508]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d01a      	beq.n	80081ac <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a7e      	ldr	r2, [pc, #504]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d012      	beq.n	80081a6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a7c      	ldr	r2, [pc, #496]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00a      	beq.n	80081a0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a7b      	ldr	r2, [pc, #492]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d102      	bne.n	800819a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8008194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008198:	e01e      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800819a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800819e:	e01b      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081a4:	e018      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081aa:	e015      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081b0:	e012      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081b6:	e00f      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081bc:	e00c      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081c2:	e009      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081c8:	e006      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081ca:	2320      	movs	r3, #32
 80081cc:	e004      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081ce:	2320      	movs	r3, #32
 80081d0:	e002      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081d2:	2320      	movs	r3, #32
 80081d4:	e000      	b.n	80081d8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80081d6:	2320      	movs	r3, #32
 80081d8:	4a69      	ldr	r2, [pc, #420]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80081da:	60d3      	str	r3, [r2, #12]
 80081dc:	e14f      	b.n	800847e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	4b67      	ldr	r3, [pc, #412]	; (8008384 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d960      	bls.n	80082ac <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a58      	ldr	r2, [pc, #352]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d057      	beq.n	80082a4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a56      	ldr	r2, [pc, #344]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d050      	beq.n	80082a0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a55      	ldr	r2, [pc, #340]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d049      	beq.n	800829c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a53      	ldr	r2, [pc, #332]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d042      	beq.n	8008298 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a52      	ldr	r2, [pc, #328]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d03a      	beq.n	8008292 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a50      	ldr	r2, [pc, #320]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d032      	beq.n	800828c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a4f      	ldr	r2, [pc, #316]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d02a      	beq.n	8008286 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a4d      	ldr	r2, [pc, #308]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d022      	beq.n	8008280 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a4c      	ldr	r2, [pc, #304]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d01a      	beq.n	800827a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a4a      	ldr	r2, [pc, #296]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d012      	beq.n	8008274 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a49      	ldr	r2, [pc, #292]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00a      	beq.n	800826e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a47      	ldr	r2, [pc, #284]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d102      	bne.n	8008268 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8008262:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008266:	e01e      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008268:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800826c:	e01b      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800826e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008272:	e018      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008274:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008278:	e015      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800827a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800827e:	e012      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008284:	e00f      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008286:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800828a:	e00c      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800828c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008290:	e009      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008292:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008296:	e006      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8008298:	2320      	movs	r3, #32
 800829a:	e004      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800829c:	2320      	movs	r3, #32
 800829e:	e002      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80082a0:	2320      	movs	r3, #32
 80082a2:	e000      	b.n	80082a6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80082a4:	2320      	movs	r3, #32
 80082a6:	4a36      	ldr	r2, [pc, #216]	; (8008380 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80082a8:	6093      	str	r3, [r2, #8]
 80082aa:	e0e8      	b.n	800847e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4b35      	ldr	r3, [pc, #212]	; (8008388 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	f240 8082 	bls.w	80083be <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a24      	ldr	r2, [pc, #144]	; (8008350 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d078      	beq.n	80083b6 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a22      	ldr	r2, [pc, #136]	; (8008354 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d071      	beq.n	80083b2 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a21      	ldr	r2, [pc, #132]	; (8008358 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d06a      	beq.n	80083ae <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1f      	ldr	r2, [pc, #124]	; (800835c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d063      	beq.n	80083aa <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a1e      	ldr	r2, [pc, #120]	; (8008360 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d05b      	beq.n	80083a4 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a1c      	ldr	r2, [pc, #112]	; (8008364 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d053      	beq.n	800839e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1b      	ldr	r2, [pc, #108]	; (8008368 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d04b      	beq.n	8008398 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a19      	ldr	r2, [pc, #100]	; (800836c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d043      	beq.n	8008392 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a18      	ldr	r2, [pc, #96]	; (8008370 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d03b      	beq.n	800838c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a16      	ldr	r2, [pc, #88]	; (8008374 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d012      	beq.n	8008344 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a15      	ldr	r2, [pc, #84]	; (8008378 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00a      	beq.n	800833e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a13      	ldr	r2, [pc, #76]	; (800837c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d102      	bne.n	8008338 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008332:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008336:	e03f      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800833c:	e03c      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800833e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008342:	e039      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008344:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008348:	e036      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800834a:	bf00      	nop
 800834c:	40026458 	.word	0x40026458
 8008350:	40026010 	.word	0x40026010
 8008354:	40026410 	.word	0x40026410
 8008358:	40026070 	.word	0x40026070
 800835c:	40026470 	.word	0x40026470
 8008360:	40026028 	.word	0x40026028
 8008364:	40026428 	.word	0x40026428
 8008368:	40026088 	.word	0x40026088
 800836c:	40026488 	.word	0x40026488
 8008370:	40026040 	.word	0x40026040
 8008374:	40026440 	.word	0x40026440
 8008378:	400260a0 	.word	0x400260a0
 800837c:	400264a0 	.word	0x400264a0
 8008380:	40026400 	.word	0x40026400
 8008384:	400260b8 	.word	0x400260b8
 8008388:	40026058 	.word	0x40026058
 800838c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008390:	e012      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008396:	e00f      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800839c:	e00c      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800839e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083a2:	e009      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80083a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80083a8:	e006      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80083aa:	2320      	movs	r3, #32
 80083ac:	e004      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80083ae:	2320      	movs	r3, #32
 80083b0:	e002      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80083b2:	2320      	movs	r3, #32
 80083b4:	e000      	b.n	80083b8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80083b6:	2320      	movs	r3, #32
 80083b8:	4a8c      	ldr	r2, [pc, #560]	; (80085ec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80083ba:	60d3      	str	r3, [r2, #12]
 80083bc:	e05f      	b.n	800847e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a8b      	ldr	r2, [pc, #556]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d057      	beq.n	8008478 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a89      	ldr	r2, [pc, #548]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d050      	beq.n	8008474 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a88      	ldr	r2, [pc, #544]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d049      	beq.n	8008470 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a86      	ldr	r2, [pc, #536]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d042      	beq.n	800846c <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a85      	ldr	r2, [pc, #532]	; (8008600 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d03a      	beq.n	8008466 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a83      	ldr	r2, [pc, #524]	; (8008604 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d032      	beq.n	8008460 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a82      	ldr	r2, [pc, #520]	; (8008608 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d02a      	beq.n	800845a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a80      	ldr	r2, [pc, #512]	; (800860c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d022      	beq.n	8008454 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a7f      	ldr	r2, [pc, #508]	; (8008610 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d01a      	beq.n	800844e <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a7d      	ldr	r2, [pc, #500]	; (8008614 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d012      	beq.n	8008448 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a7c      	ldr	r2, [pc, #496]	; (8008618 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d00a      	beq.n	8008442 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a7a      	ldr	r2, [pc, #488]	; (800861c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d102      	bne.n	800843c <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8008436:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800843a:	e01e      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800843c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008440:	e01b      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008442:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008446:	e018      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008448:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800844c:	e015      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800844e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008452:	e012      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008458:	e00f      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800845a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800845e:	e00c      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008464:	e009      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008466:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800846a:	e006      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800846c:	2320      	movs	r3, #32
 800846e:	e004      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008470:	2320      	movs	r3, #32
 8008472:	e002      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008474:	2320      	movs	r3, #32
 8008476:	e000      	b.n	800847a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008478:	2320      	movs	r3, #32
 800847a:	4a5c      	ldr	r2, [pc, #368]	; (80085ec <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800847c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	461a      	mov	r2, r3
 8008484:	4b66      	ldr	r3, [pc, #408]	; (8008620 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8008486:	429a      	cmp	r2, r3
 8008488:	d960      	bls.n	800854c <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a58      	ldr	r2, [pc, #352]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d057      	beq.n	8008544 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a56      	ldr	r2, [pc, #344]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d050      	beq.n	8008540 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d049      	beq.n	800853c <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a53      	ldr	r2, [pc, #332]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d042      	beq.n	8008538 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a52      	ldr	r2, [pc, #328]	; (8008600 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d03a      	beq.n	8008532 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a50      	ldr	r2, [pc, #320]	; (8008604 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d032      	beq.n	800852c <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a4f      	ldr	r2, [pc, #316]	; (8008608 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d02a      	beq.n	8008526 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a4d      	ldr	r2, [pc, #308]	; (800860c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d022      	beq.n	8008520 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a4c      	ldr	r2, [pc, #304]	; (8008610 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d01a      	beq.n	800851a <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a4a      	ldr	r2, [pc, #296]	; (8008614 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d012      	beq.n	8008514 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a49      	ldr	r2, [pc, #292]	; (8008618 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d00a      	beq.n	800850e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a47      	ldr	r2, [pc, #284]	; (800861c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d102      	bne.n	8008508 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008502:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008506:	e01e      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008508:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800850c:	e01b      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800850e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008512:	e018      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008514:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008518:	e015      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800851a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800851e:	e012      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008524:	e00f      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800852a:	e00c      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800852c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008530:	e009      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008536:	e006      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008538:	2310      	movs	r3, #16
 800853a:	e004      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800853c:	2310      	movs	r3, #16
 800853e:	e002      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008540:	2310      	movs	r3, #16
 8008542:	e000      	b.n	8008546 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008544:	2310      	movs	r3, #16
 8008546:	4a37      	ldr	r2, [pc, #220]	; (8008624 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008548:	60d3      	str	r3, [r2, #12]
 800854a:	e14f      	b.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	4b35      	ldr	r3, [pc, #212]	; (8008628 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008554:	429a      	cmp	r2, r3
 8008556:	f240 8082 	bls.w	800865e <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a24      	ldr	r2, [pc, #144]	; (80085f0 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d078      	beq.n	8008656 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d071      	beq.n	8008652 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a21      	ldr	r2, [pc, #132]	; (80085f8 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d06a      	beq.n	800864e <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a1f      	ldr	r2, [pc, #124]	; (80085fc <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d063      	beq.n	800864a <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a1e      	ldr	r2, [pc, #120]	; (8008600 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d05b      	beq.n	8008644 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1c      	ldr	r2, [pc, #112]	; (8008604 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d053      	beq.n	800863e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1b      	ldr	r2, [pc, #108]	; (8008608 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d04b      	beq.n	8008638 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a19      	ldr	r2, [pc, #100]	; (800860c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d043      	beq.n	8008632 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a18      	ldr	r2, [pc, #96]	; (8008610 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d03b      	beq.n	800862c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a16      	ldr	r2, [pc, #88]	; (8008614 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d012      	beq.n	80085e4 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a15      	ldr	r2, [pc, #84]	; (8008618 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00a      	beq.n	80085de <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a13      	ldr	r2, [pc, #76]	; (800861c <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d102      	bne.n	80085d8 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80085d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085d6:	e03f      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80085d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085dc:	e03c      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80085de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085e2:	e039      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80085e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80085e8:	e036      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80085ea:	bf00      	nop
 80085ec:	40026000 	.word	0x40026000
 80085f0:	40026010 	.word	0x40026010
 80085f4:	40026410 	.word	0x40026410
 80085f8:	40026070 	.word	0x40026070
 80085fc:	40026470 	.word	0x40026470
 8008600:	40026028 	.word	0x40026028
 8008604:	40026428 	.word	0x40026428
 8008608:	40026088 	.word	0x40026088
 800860c:	40026488 	.word	0x40026488
 8008610:	40026040 	.word	0x40026040
 8008614:	40026440 	.word	0x40026440
 8008618:	400260a0 	.word	0x400260a0
 800861c:	400264a0 	.word	0x400264a0
 8008620:	40026458 	.word	0x40026458
 8008624:	40026400 	.word	0x40026400
 8008628:	400260b8 	.word	0x400260b8
 800862c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008630:	e012      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008636:	e00f      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	e00c      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800863e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008642:	e009      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008648:	e006      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800864a:	2310      	movs	r3, #16
 800864c:	e004      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800864e:	2310      	movs	r3, #16
 8008650:	e002      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008652:	2310      	movs	r3, #16
 8008654:	e000      	b.n	8008658 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008656:	2310      	movs	r3, #16
 8008658:	4a8c      	ldr	r2, [pc, #560]	; (800888c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 800865a:	6093      	str	r3, [r2, #8]
 800865c:	e0c6      	b.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	4b8a      	ldr	r3, [pc, #552]	; (8008890 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008666:	429a      	cmp	r2, r3
 8008668:	d960      	bls.n	800872c <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a89      	ldr	r2, [pc, #548]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d057      	beq.n	8008724 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a87      	ldr	r2, [pc, #540]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d050      	beq.n	8008720 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a86      	ldr	r2, [pc, #536]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d049      	beq.n	800871c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a84      	ldr	r2, [pc, #528]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d042      	beq.n	8008718 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a83      	ldr	r2, [pc, #524]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d03a      	beq.n	8008712 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a81      	ldr	r2, [pc, #516]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d032      	beq.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a80      	ldr	r2, [pc, #512]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d02a      	beq.n	8008706 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4a7e      	ldr	r2, [pc, #504]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d022      	beq.n	8008700 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a7d      	ldr	r2, [pc, #500]	; (80088b4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d01a      	beq.n	80086fa <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a7b      	ldr	r2, [pc, #492]	; (80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d012      	beq.n	80086f4 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a7a      	ldr	r2, [pc, #488]	; (80088bc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00a      	beq.n	80086ee <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a78      	ldr	r2, [pc, #480]	; (80088c0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d102      	bne.n	80086e8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80086e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086e6:	e01e      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80086e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80086ec:	e01b      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80086ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086f2:	e018      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80086f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086f8:	e015      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80086fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80086fe:	e012      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008700:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008704:	e00f      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800870a:	e00c      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800870c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008710:	e009      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008716:	e006      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008718:	2310      	movs	r3, #16
 800871a:	e004      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800871c:	2310      	movs	r3, #16
 800871e:	e002      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008720:	2310      	movs	r3, #16
 8008722:	e000      	b.n	8008726 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008724:	2310      	movs	r3, #16
 8008726:	4a67      	ldr	r2, [pc, #412]	; (80088c4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008728:	60d3      	str	r3, [r2, #12]
 800872a:	e05f      	b.n	80087ec <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a58      	ldr	r2, [pc, #352]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d057      	beq.n	80087e6 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a57      	ldr	r2, [pc, #348]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d050      	beq.n	80087e2 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a55      	ldr	r2, [pc, #340]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d049      	beq.n	80087de <HAL_DMAEx_MultiBufferStart_IT+0x772>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a54      	ldr	r2, [pc, #336]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d042      	beq.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a52      	ldr	r2, [pc, #328]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d03a      	beq.n	80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a51      	ldr	r2, [pc, #324]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d032      	beq.n	80087ce <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a4f      	ldr	r2, [pc, #316]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d02a      	beq.n	80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a4e      	ldr	r2, [pc, #312]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d022      	beq.n	80087c2 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a4c      	ldr	r2, [pc, #304]	; (80088b4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d01a      	beq.n	80087bc <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a4b      	ldr	r2, [pc, #300]	; (80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d012      	beq.n	80087b6 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a49      	ldr	r2, [pc, #292]	; (80088bc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00a      	beq.n	80087b0 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a48      	ldr	r2, [pc, #288]	; (80088c0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d102      	bne.n	80087aa <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80087a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087a8:	e01e      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80087ae:	e01b      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087b4:	e018      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087ba:	e015      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80087c0:	e012      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087c6:	e00f      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087cc:	e00c      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d2:	e009      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087d8:	e006      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087da:	2310      	movs	r3, #16
 80087dc:	e004      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087de:	2310      	movs	r3, #16
 80087e0:	e002      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087e2:	2310      	movs	r3, #16
 80087e4:	e000      	b.n	80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80087e6:	2310      	movs	r3, #16
 80087e8:	4a36      	ldr	r2, [pc, #216]	; (80088c4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80087ea:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	4b35      	ldr	r3, [pc, #212]	; (80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80087f4:	429a      	cmp	r2, r3
 80087f6:	f240 8082 	bls.w	80088fe <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a25      	ldr	r2, [pc, #148]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d078      	beq.n	80088f6 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a23      	ldr	r2, [pc, #140]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d071      	beq.n	80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a22      	ldr	r2, [pc, #136]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d06a      	beq.n	80088ee <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a20      	ldr	r2, [pc, #128]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d063      	beq.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1f      	ldr	r2, [pc, #124]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d05b      	beq.n	80088e4 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1d      	ldr	r2, [pc, #116]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d053      	beq.n	80088de <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1c      	ldr	r2, [pc, #112]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d04b      	beq.n	80088d8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a1a      	ldr	r2, [pc, #104]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d043      	beq.n	80088d2 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a19      	ldr	r2, [pc, #100]	; (80088b4 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d03b      	beq.n	80088cc <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a17      	ldr	r2, [pc, #92]	; (80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d012      	beq.n	8008884 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a16      	ldr	r2, [pc, #88]	; (80088bc <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00a      	beq.n	800887e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a14      	ldr	r2, [pc, #80]	; (80088c0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d102      	bne.n	8008878 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008872:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008876:	e03f      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800887c:	e03c      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800887e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008882:	e039      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008884:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008888:	e036      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800888a:	bf00      	nop
 800888c:	40026400 	.word	0x40026400
 8008890:	40026058 	.word	0x40026058
 8008894:	40026010 	.word	0x40026010
 8008898:	40026410 	.word	0x40026410
 800889c:	40026070 	.word	0x40026070
 80088a0:	40026470 	.word	0x40026470
 80088a4:	40026028 	.word	0x40026028
 80088a8:	40026428 	.word	0x40026428
 80088ac:	40026088 	.word	0x40026088
 80088b0:	40026488 	.word	0x40026488
 80088b4:	40026040 	.word	0x40026040
 80088b8:	40026440 	.word	0x40026440
 80088bc:	400260a0 	.word	0x400260a0
 80088c0:	400264a0 	.word	0x400264a0
 80088c4:	40026000 	.word	0x40026000
 80088c8:	40026458 	.word	0x40026458
 80088cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088d0:	e012      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088d6:	e00f      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088dc:	e00c      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e2:	e009      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e8:	e006      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088ea:	2308      	movs	r3, #8
 80088ec:	e004      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088ee:	2308      	movs	r3, #8
 80088f0:	e002      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088f2:	2308      	movs	r3, #8
 80088f4:	e000      	b.n	80088f8 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80088f6:	2308      	movs	r3, #8
 80088f8:	4a8c      	ldr	r2, [pc, #560]	; (8008b2c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80088fa:	60d3      	str	r3, [r2, #12]
 80088fc:	e14e      	b.n	8008b9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	4b8a      	ldr	r3, [pc, #552]	; (8008b30 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8008906:	429a      	cmp	r2, r3
 8008908:	d960      	bls.n	80089cc <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a89      	ldr	r2, [pc, #548]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d057      	beq.n	80089c4 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a87      	ldr	r2, [pc, #540]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d050      	beq.n	80089c0 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a86      	ldr	r2, [pc, #536]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d049      	beq.n	80089bc <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a84      	ldr	r2, [pc, #528]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d042      	beq.n	80089b8 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a83      	ldr	r2, [pc, #524]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d03a      	beq.n	80089b2 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a81      	ldr	r2, [pc, #516]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d032      	beq.n	80089ac <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4a80      	ldr	r2, [pc, #512]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d02a      	beq.n	80089a6 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	4a7e      	ldr	r2, [pc, #504]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d022      	beq.n	80089a0 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a7d      	ldr	r2, [pc, #500]	; (8008b54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d01a      	beq.n	800899a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a7b      	ldr	r2, [pc, #492]	; (8008b58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d012      	beq.n	8008994 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a7a      	ldr	r2, [pc, #488]	; (8008b5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00a      	beq.n	800898e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a78      	ldr	r2, [pc, #480]	; (8008b60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d102      	bne.n	8008988 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8008982:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008986:	e01e      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800898c:	e01b      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800898e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008992:	e018      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008994:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008998:	e015      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800899a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800899e:	e012      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089a4:	e00f      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089aa:	e00c      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b0:	e009      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b6:	e006      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089b8:	2308      	movs	r3, #8
 80089ba:	e004      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089bc:	2308      	movs	r3, #8
 80089be:	e002      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089c0:	2308      	movs	r3, #8
 80089c2:	e000      	b.n	80089c6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 80089c4:	2308      	movs	r3, #8
 80089c6:	4a59      	ldr	r2, [pc, #356]	; (8008b2c <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80089c8:	6093      	str	r3, [r2, #8]
 80089ca:	e0e7      	b.n	8008b9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461a      	mov	r2, r3
 80089d2:	4b64      	ldr	r3, [pc, #400]	; (8008b64 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d960      	bls.n	8008a9a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a55      	ldr	r2, [pc, #340]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d057      	beq.n	8008a92 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a54      	ldr	r2, [pc, #336]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d050      	beq.n	8008a8e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a52      	ldr	r2, [pc, #328]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d049      	beq.n	8008a8a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a51      	ldr	r2, [pc, #324]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d042      	beq.n	8008a86 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a4f      	ldr	r2, [pc, #316]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d03a      	beq.n	8008a80 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a4e      	ldr	r2, [pc, #312]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d032      	beq.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a4c      	ldr	r2, [pc, #304]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d02a      	beq.n	8008a74 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a4b      	ldr	r2, [pc, #300]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d022      	beq.n	8008a6e <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a49      	ldr	r2, [pc, #292]	; (8008b54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d01a      	beq.n	8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a48      	ldr	r2, [pc, #288]	; (8008b58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d012      	beq.n	8008a62 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a46      	ldr	r2, [pc, #280]	; (8008b5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00a      	beq.n	8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a45      	ldr	r2, [pc, #276]	; (8008b60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d102      	bne.n	8008a56 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8008a50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a54:	e01e      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008a5a:	e01b      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a60:	e018      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a66:	e015      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a6c:	e012      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a72:	e00f      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a78:	e00c      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a7e:	e009      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a84:	e006      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a86:	2308      	movs	r3, #8
 8008a88:	e004      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	e002      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a8e:	2308      	movs	r3, #8
 8008a90:	e000      	b.n	8008a94 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008a92:	2308      	movs	r3, #8
 8008a94:	4a34      	ldr	r2, [pc, #208]	; (8008b68 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8008a96:	60d3      	str	r3, [r2, #12]
 8008a98:	e080      	b.n	8008b9c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a25      	ldr	r2, [pc, #148]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d078      	beq.n	8008b96 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a23      	ldr	r2, [pc, #140]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d071      	beq.n	8008b92 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a22      	ldr	r2, [pc, #136]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d06a      	beq.n	8008b8e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a20      	ldr	r2, [pc, #128]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d063      	beq.n	8008b8a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1f      	ldr	r2, [pc, #124]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d05b      	beq.n	8008b84 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a1d      	ldr	r2, [pc, #116]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d053      	beq.n	8008b7e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d04b      	beq.n	8008b78 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a1a      	ldr	r2, [pc, #104]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d043      	beq.n	8008b72 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a19      	ldr	r2, [pc, #100]	; (8008b54 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d03b      	beq.n	8008b6c <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d012      	beq.n	8008b24 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00a      	beq.n	8008b1e <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a14      	ldr	r2, [pc, #80]	; (8008b60 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d102      	bne.n	8008b18 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8008b12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b16:	e03f      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b1c:	e03c      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b22:	e039      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b28:	e036      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b2a:	bf00      	nop
 8008b2c:	40026400 	.word	0x40026400
 8008b30:	400260b8 	.word	0x400260b8
 8008b34:	40026010 	.word	0x40026010
 8008b38:	40026410 	.word	0x40026410
 8008b3c:	40026070 	.word	0x40026070
 8008b40:	40026470 	.word	0x40026470
 8008b44:	40026028 	.word	0x40026028
 8008b48:	40026428 	.word	0x40026428
 8008b4c:	40026088 	.word	0x40026088
 8008b50:	40026488 	.word	0x40026488
 8008b54:	40026040 	.word	0x40026040
 8008b58:	40026440 	.word	0x40026440
 8008b5c:	400260a0 	.word	0x400260a0
 8008b60:	400264a0 	.word	0x400264a0
 8008b64:	40026058 	.word	0x40026058
 8008b68:	40026000 	.word	0x40026000
 8008b6c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b70:	e012      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b76:	e00f      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b7c:	e00c      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b82:	e009      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b88:	e006      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	e004      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b8e:	2308      	movs	r3, #8
 8008b90:	e002      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b92:	2308      	movs	r3, #8
 8008b94:	e000      	b.n	8008b98 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8008b96:	2308      	movs	r3, #8
 8008b98:	4a8a      	ldr	r2, [pc, #552]	; (8008dc4 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8008b9a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	4b89      	ldr	r3, [pc, #548]	; (8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d960      	bls.n	8008c6a <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a87      	ldr	r2, [pc, #540]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d057      	beq.n	8008c62 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a86      	ldr	r2, [pc, #536]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d050      	beq.n	8008c5e <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a84      	ldr	r2, [pc, #528]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d049      	beq.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a83      	ldr	r2, [pc, #524]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d042      	beq.n	8008c56 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a81      	ldr	r2, [pc, #516]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d03a      	beq.n	8008c50 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a80      	ldr	r2, [pc, #512]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d032      	beq.n	8008c4a <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a7e      	ldr	r2, [pc, #504]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d02a      	beq.n	8008c44 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a7d      	ldr	r2, [pc, #500]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d022      	beq.n	8008c3e <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a7b      	ldr	r2, [pc, #492]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d01a      	beq.n	8008c38 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a7a      	ldr	r2, [pc, #488]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d012      	beq.n	8008c32 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a78      	ldr	r2, [pc, #480]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00a      	beq.n	8008c2c <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a77      	ldr	r2, [pc, #476]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d102      	bne.n	8008c26 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8008c20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c24:	e01e      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c2a:	e01b      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c30:	e018      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c36:	e015      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c3c:	e012      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c42:	e00f      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c48:	e00c      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c4e:	e009      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c54:	e006      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c56:	2304      	movs	r3, #4
 8008c58:	e004      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c5a:	2304      	movs	r3, #4
 8008c5c:	e002      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c5e:	2304      	movs	r3, #4
 8008c60:	e000      	b.n	8008c64 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8008c62:	2304      	movs	r3, #4
 8008c64:	4a65      	ldr	r2, [pc, #404]	; (8008dfc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8008c66:	60d3      	str	r3, [r2, #12]
 8008c68:	e150      	b.n	8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	4b63      	ldr	r3, [pc, #396]	; (8008e00 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d960      	bls.n	8008d38 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a54      	ldr	r2, [pc, #336]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d057      	beq.n	8008d30 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a52      	ldr	r2, [pc, #328]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d050      	beq.n	8008d2c <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a51      	ldr	r2, [pc, #324]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d049      	beq.n	8008d28 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a4f      	ldr	r2, [pc, #316]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d042      	beq.n	8008d24 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4a4e      	ldr	r2, [pc, #312]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d03a      	beq.n	8008d1e <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a4c      	ldr	r2, [pc, #304]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d032      	beq.n	8008d18 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	4a4b      	ldr	r2, [pc, #300]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d02a      	beq.n	8008d12 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a49      	ldr	r2, [pc, #292]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d022      	beq.n	8008d0c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a48      	ldr	r2, [pc, #288]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d01a      	beq.n	8008d06 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a46      	ldr	r2, [pc, #280]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d012      	beq.n	8008d00 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a45      	ldr	r2, [pc, #276]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d00a      	beq.n	8008cfa <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a43      	ldr	r2, [pc, #268]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d102      	bne.n	8008cf4 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8008cee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008cf2:	e01e      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008cf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008cf8:	e01b      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008cfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008cfe:	e018      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d00:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d04:	e015      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008d0a:	e012      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d10:	e00f      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d16:	e00c      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d1c:	e009      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d22:	e006      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d24:	2304      	movs	r3, #4
 8008d26:	e004      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d28:	2304      	movs	r3, #4
 8008d2a:	e002      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	e000      	b.n	8008d32 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8008d30:	2304      	movs	r3, #4
 8008d32:	4a32      	ldr	r2, [pc, #200]	; (8008dfc <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8008d34:	6093      	str	r3, [r2, #8]
 8008d36:	e0e9      	b.n	8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	4b31      	ldr	r3, [pc, #196]	; (8008e04 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8008d40:	429a      	cmp	r2, r3
 8008d42:	f240 8083 	bls.w	8008e4c <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a20      	ldr	r2, [pc, #128]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d079      	beq.n	8008e44 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1e      	ldr	r2, [pc, #120]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d072      	beq.n	8008e40 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1d      	ldr	r2, [pc, #116]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d06b      	beq.n	8008e3c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1b      	ldr	r2, [pc, #108]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d064      	beq.n	8008e38 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1a      	ldr	r2, [pc, #104]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d05c      	beq.n	8008e32 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d054      	beq.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a17      	ldr	r2, [pc, #92]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d04c      	beq.n	8008e26 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a15      	ldr	r2, [pc, #84]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d044      	beq.n	8008e20 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a14      	ldr	r2, [pc, #80]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d03c      	beq.n	8008e1a <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d034      	beq.n	8008e14 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a11      	ldr	r2, [pc, #68]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d02c      	beq.n	8008e0e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a0f      	ldr	r2, [pc, #60]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d124      	bne.n	8008e08 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8008dbe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008dc2:	e040      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008dc4:	40026000 	.word	0x40026000
 8008dc8:	40026458 	.word	0x40026458
 8008dcc:	40026010 	.word	0x40026010
 8008dd0:	40026410 	.word	0x40026410
 8008dd4:	40026070 	.word	0x40026070
 8008dd8:	40026470 	.word	0x40026470
 8008ddc:	40026028 	.word	0x40026028
 8008de0:	40026428 	.word	0x40026428
 8008de4:	40026088 	.word	0x40026088
 8008de8:	40026488 	.word	0x40026488
 8008dec:	40026040 	.word	0x40026040
 8008df0:	40026440 	.word	0x40026440
 8008df4:	400260a0 	.word	0x400260a0
 8008df8:	400264a0 	.word	0x400264a0
 8008dfc:	40026400 	.word	0x40026400
 8008e00:	400260b8 	.word	0x400260b8
 8008e04:	40026058 	.word	0x40026058
 8008e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e0c:	e01b      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e12:	e018      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e18:	e015      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e1e:	e012      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e24:	e00f      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e2a:	e00c      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e30:	e009      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e36:	e006      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e38:	2304      	movs	r3, #4
 8008e3a:	e004      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e3c:	2304      	movs	r3, #4
 8008e3e:	e002      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e40:	2304      	movs	r3, #4
 8008e42:	e000      	b.n	8008e46 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8008e44:	2304      	movs	r3, #4
 8008e46:	4a8b      	ldr	r2, [pc, #556]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8008e48:	60d3      	str	r3, [r2, #12]
 8008e4a:	e05f      	b.n	8008f0c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a89      	ldr	r2, [pc, #548]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d057      	beq.n	8008f06 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a88      	ldr	r2, [pc, #544]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d050      	beq.n	8008f02 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a86      	ldr	r2, [pc, #536]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d049      	beq.n	8008efe <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a85      	ldr	r2, [pc, #532]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d042      	beq.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a83      	ldr	r2, [pc, #524]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d03a      	beq.n	8008ef4 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a82      	ldr	r2, [pc, #520]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d032      	beq.n	8008eee <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a80      	ldr	r2, [pc, #512]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d02a      	beq.n	8008ee8 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a7f      	ldr	r2, [pc, #508]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d022      	beq.n	8008ee2 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a7d      	ldr	r2, [pc, #500]	; (8009098 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d01a      	beq.n	8008edc <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a7c      	ldr	r2, [pc, #496]	; (800909c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d012      	beq.n	8008ed6 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a7a      	ldr	r2, [pc, #488]	; (80090a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d00a      	beq.n	8008ed0 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a79      	ldr	r2, [pc, #484]	; (80090a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d102      	bne.n	8008eca <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8008ec4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ec8:	e01e      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008eca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ece:	e01b      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ed4:	e018      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008ed6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008eda:	e015      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008edc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008ee0:	e012      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ee6:	e00f      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008ee8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008eec:	e00c      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008eee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef2:	e009      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ef8:	e006      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008efa:	2304      	movs	r3, #4
 8008efc:	e004      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008efe:	2304      	movs	r3, #4
 8008f00:	e002      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008f02:	2304      	movs	r3, #4
 8008f04:	e000      	b.n	8008f08 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8008f06:	2304      	movs	r3, #4
 8008f08:	4a5a      	ldr	r2, [pc, #360]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8008f0a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	461a      	mov	r2, r3
 8008f12:	4b65      	ldr	r3, [pc, #404]	; (80090a8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d95c      	bls.n	8008fd2 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a56      	ldr	r2, [pc, #344]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d053      	beq.n	8008fca <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a55      	ldr	r2, [pc, #340]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d04c      	beq.n	8008fc6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a53      	ldr	r2, [pc, #332]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d045      	beq.n	8008fc2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a52      	ldr	r2, [pc, #328]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d03e      	beq.n	8008fbe <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a50      	ldr	r2, [pc, #320]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d037      	beq.n	8008fba <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a4f      	ldr	r2, [pc, #316]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d030      	beq.n	8008fb6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a4d      	ldr	r2, [pc, #308]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d029      	beq.n	8008fb2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a4c      	ldr	r2, [pc, #304]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d022      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a4a      	ldr	r2, [pc, #296]	; (8009098 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d01a      	beq.n	8008fa8 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a49      	ldr	r2, [pc, #292]	; (800909c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d012      	beq.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a47      	ldr	r2, [pc, #284]	; (80090a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00a      	beq.n	8008f9c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a46      	ldr	r2, [pc, #280]	; (80090a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d102      	bne.n	8008f96 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8008f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f94:	e01a      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008f96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008f9a:	e017      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fa0:	e014      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fa6:	e011      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008fac:	e00e      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fae:	2340      	movs	r3, #64	; 0x40
 8008fb0:	e00c      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fb2:	2340      	movs	r3, #64	; 0x40
 8008fb4:	e00a      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fb6:	2340      	movs	r3, #64	; 0x40
 8008fb8:	e008      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fba:	2340      	movs	r3, #64	; 0x40
 8008fbc:	e006      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e004      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e002      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e000      	b.n	8008fcc <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8008fca:	2301      	movs	r3, #1
 8008fcc:	4a37      	ldr	r2, [pc, #220]	; (80090ac <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8008fce:	60d3      	str	r3, [r2, #12]
 8008fd0:	e141      	b.n	8009256 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4b35      	ldr	r3, [pc, #212]	; (80090b0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d97c      	bls.n	80090d8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a25      	ldr	r2, [pc, #148]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d073      	beq.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a23      	ldr	r2, [pc, #140]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d06c      	beq.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a22      	ldr	r2, [pc, #136]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d065      	beq.n	80090c8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a20      	ldr	r2, [pc, #128]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d05e      	beq.n	80090c4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a1f      	ldr	r2, [pc, #124]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d057      	beq.n	80090c0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a1d      	ldr	r2, [pc, #116]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d050      	beq.n	80090bc <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a1c      	ldr	r2, [pc, #112]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d049      	beq.n	80090b8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a1a      	ldr	r2, [pc, #104]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d042      	beq.n	80090b4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a19      	ldr	r2, [pc, #100]	; (8009098 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d01a      	beq.n	800906e <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a17      	ldr	r2, [pc, #92]	; (800909c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d012      	beq.n	8009068 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d00a      	beq.n	8009062 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a14      	ldr	r2, [pc, #80]	; (80090a4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d102      	bne.n	800905c <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8009056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800905a:	e03a      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800905c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009060:	e037      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009062:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009066:	e034      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800906c:	e031      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800906e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009072:	e02e      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009074:	40026000 	.word	0x40026000
 8009078:	40026010 	.word	0x40026010
 800907c:	40026410 	.word	0x40026410
 8009080:	40026070 	.word	0x40026070
 8009084:	40026470 	.word	0x40026470
 8009088:	40026028 	.word	0x40026028
 800908c:	40026428 	.word	0x40026428
 8009090:	40026088 	.word	0x40026088
 8009094:	40026488 	.word	0x40026488
 8009098:	40026040 	.word	0x40026040
 800909c:	40026440 	.word	0x40026440
 80090a0:	400260a0 	.word	0x400260a0
 80090a4:	400264a0 	.word	0x400264a0
 80090a8:	40026458 	.word	0x40026458
 80090ac:	40026400 	.word	0x40026400
 80090b0:	400260b8 	.word	0x400260b8
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	e00c      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090b8:	2340      	movs	r3, #64	; 0x40
 80090ba:	e00a      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090bc:	2340      	movs	r3, #64	; 0x40
 80090be:	e008      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	e006      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090c4:	2301      	movs	r3, #1
 80090c6:	e004      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090c8:	2301      	movs	r3, #1
 80090ca:	e002      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090cc:	2301      	movs	r3, #1
 80090ce:	e000      	b.n	80090d2 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80090d0:	2301      	movs	r3, #1
 80090d2:	4a7b      	ldr	r2, [pc, #492]	; (80092c0 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80090d4:	6093      	str	r3, [r2, #8]
 80090d6:	e0be      	b.n	8009256 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	461a      	mov	r2, r3
 80090de:	4b79      	ldr	r3, [pc, #484]	; (80092c4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d95c      	bls.n	800919e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a77      	ldr	r2, [pc, #476]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d053      	beq.n	8009196 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a76      	ldr	r2, [pc, #472]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d04c      	beq.n	8009192 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a74      	ldr	r2, [pc, #464]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d045      	beq.n	800918e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a73      	ldr	r2, [pc, #460]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d03e      	beq.n	800918a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a71      	ldr	r2, [pc, #452]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d037      	beq.n	8009186 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a70      	ldr	r2, [pc, #448]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d030      	beq.n	8009182 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a6e      	ldr	r2, [pc, #440]	; (80092e0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d029      	beq.n	800917e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a6d      	ldr	r2, [pc, #436]	; (80092e4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d022      	beq.n	800917a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a6b      	ldr	r2, [pc, #428]	; (80092e8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d01a      	beq.n	8009174 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a6a      	ldr	r2, [pc, #424]	; (80092ec <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d012      	beq.n	800916e <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a68      	ldr	r2, [pc, #416]	; (80092f0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d00a      	beq.n	8009168 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a67      	ldr	r2, [pc, #412]	; (80092f4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d102      	bne.n	8009162 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800915c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009160:	e01a      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009166:	e017      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800916c:	e014      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800916e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009172:	e011      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009178:	e00e      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800917a:	2340      	movs	r3, #64	; 0x40
 800917c:	e00c      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800917e:	2340      	movs	r3, #64	; 0x40
 8009180:	e00a      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009182:	2340      	movs	r3, #64	; 0x40
 8009184:	e008      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009186:	2340      	movs	r3, #64	; 0x40
 8009188:	e006      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800918a:	2301      	movs	r3, #1
 800918c:	e004      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800918e:	2301      	movs	r3, #1
 8009190:	e002      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009196:	2301      	movs	r3, #1
 8009198:	4a57      	ldr	r2, [pc, #348]	; (80092f8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800919a:	60d3      	str	r3, [r2, #12]
 800919c:	e05b      	b.n	8009256 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a49      	ldr	r2, [pc, #292]	; (80092c8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d053      	beq.n	8009250 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a47      	ldr	r2, [pc, #284]	; (80092cc <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d04c      	beq.n	800924c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a46      	ldr	r2, [pc, #280]	; (80092d0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d045      	beq.n	8009248 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a44      	ldr	r2, [pc, #272]	; (80092d4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d03e      	beq.n	8009244 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a43      	ldr	r2, [pc, #268]	; (80092d8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d037      	beq.n	8009240 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a41      	ldr	r2, [pc, #260]	; (80092dc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d030      	beq.n	800923c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a40      	ldr	r2, [pc, #256]	; (80092e0 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d029      	beq.n	8009238 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a3e      	ldr	r2, [pc, #248]	; (80092e4 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d022      	beq.n	8009234 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a3d      	ldr	r2, [pc, #244]	; (80092e8 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d01a      	beq.n	800922e <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a3b      	ldr	r2, [pc, #236]	; (80092ec <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d012      	beq.n	8009228 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a3a      	ldr	r2, [pc, #232]	; (80092f0 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d00a      	beq.n	8009222 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a38      	ldr	r2, [pc, #224]	; (80092f4 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d102      	bne.n	800921c <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8009216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800921a:	e01a      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800921c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009220:	e017      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009226:	e014      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800922c:	e011      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800922e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009232:	e00e      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	e00c      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009238:	2340      	movs	r3, #64	; 0x40
 800923a:	e00a      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800923c:	2340      	movs	r3, #64	; 0x40
 800923e:	e008      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009240:	2340      	movs	r3, #64	; 0x40
 8009242:	e006      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009244:	2301      	movs	r3, #1
 8009246:	e004      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009248:	2301      	movs	r3, #1
 800924a:	e002      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800924c:	2301      	movs	r3, #1
 800924e:	e000      	b.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009250:	2301      	movs	r3, #1
 8009252:	4a29      	ldr	r2, [pc, #164]	; (80092f8 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009254:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f042 0216 	orr.w	r2, r2, #22
 8009264:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	695a      	ldr	r2, [r3, #20]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009274:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927a:	2b00      	cmp	r3, #0
 800927c:	d103      	bne.n	8009286 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009282:	2b00      	cmp	r3, #0
 8009284:	d007      	beq.n	8009296 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f042 0208 	orr.w	r2, r2, #8
 8009294:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f042 0201 	orr.w	r2, r2, #1
 80092a4:	601a      	str	r2, [r3, #0]
 80092a6:	e005      	b.n	80092b4 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80092b0:	2302      	movs	r3, #2
 80092b2:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80092b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	40026400 	.word	0x40026400
 80092c4:	40026058 	.word	0x40026058
 80092c8:	40026010 	.word	0x40026010
 80092cc:	40026410 	.word	0x40026410
 80092d0:	40026070 	.word	0x40026070
 80092d4:	40026470 	.word	0x40026470
 80092d8:	40026028 	.word	0x40026028
 80092dc:	40026428 	.word	0x40026428
 80092e0:	40026088 	.word	0x40026088
 80092e4:	40026488 	.word	0x40026488
 80092e8:	40026040 	.word	0x40026040
 80092ec:	40026440 	.word	0x40026440
 80092f0:	400260a0 	.word	0x400260a0
 80092f4:	400264a0 	.word	0x400264a0
 80092f8:	40026000 	.word	0x40026000

080092fc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4613      	mov	r3, r2
 8009308:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d104      	bne.n	800931a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	60da      	str	r2, [r3, #12]
 8009318:	e003      	b.n	8009322 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009322:	2300      	movs	r3, #0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
 800933c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	683a      	ldr	r2, [r7, #0]
 8009344:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	2b40      	cmp	r3, #64	; 0x40
 800934c:	d108      	bne.n	8009360 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800935e:	e007      	b.n	8009370 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68ba      	ldr	r2, [r7, #8]
 8009366:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	60da      	str	r2, [r3, #12]
}
 8009370:	bf00      	nop
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d002      	beq.n	8009392 <HAL_EXTI_SetConfigLine+0x16>
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e08f      	b.n	80094b6 <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80093a8:	2201      	movs	r2, #1
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	fa02 f303 	lsl.w	r3, r2, r3
 80093b0:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d052      	beq.n	8009464 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d006      	beq.n	80093d8 <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 80093ca:	4b3e      	ldr	r3, [pc, #248]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	493d      	ldr	r1, [pc, #244]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	608b      	str	r3, [r1, #8]
 80093d6:	e006      	b.n	80093e6 <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 80093d8:	4b3a      	ldr	r3, [pc, #232]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093da:	689a      	ldr	r2, [r3, #8]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	43db      	mvns	r3, r3
 80093e0:	4938      	ldr	r1, [pc, #224]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093e2:	4013      	ands	r3, r2
 80093e4:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d006      	beq.n	8009400 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 80093f2:	4b34      	ldr	r3, [pc, #208]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093f4:	68da      	ldr	r2, [r3, #12]
 80093f6:	4933      	ldr	r1, [pc, #204]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60cb      	str	r3, [r1, #12]
 80093fe:	e006      	b.n	800940e <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009400:	4b30      	ldr	r3, [pc, #192]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 8009402:	68da      	ldr	r2, [r3, #12]
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	43db      	mvns	r3, r3
 8009408:	492e      	ldr	r1, [pc, #184]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 800940a:	4013      	ands	r3, r2
 800940c:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009416:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800941a:	d123      	bne.n	8009464 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 800941c:	4a2a      	ldr	r2, [pc, #168]	; (80094c8 <HAL_EXTI_SetConfigLine+0x14c>)
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	089b      	lsrs	r3, r3, #2
 8009422:	3302      	adds	r3, #2
 8009424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009428:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	220f      	movs	r2, #15
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	43db      	mvns	r3, r3
 800943a:	68fa      	ldr	r2, [r7, #12]
 800943c:	4013      	ands	r3, r2
 800943e:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	68da      	ldr	r2, [r3, #12]
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	009b      	lsls	r3, r3, #2
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009456:	491c      	ldr	r1, [pc, #112]	; (80094c8 <HAL_EXTI_SetConfigLine+0x14c>)
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	089b      	lsrs	r3, r3, #2
 800945c:	3302      	adds	r3, #2
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 8009470:	4b14      	ldr	r3, [pc, #80]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	4913      	ldr	r1, [pc, #76]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	600b      	str	r3, [r1, #0]
 800947c:	e006      	b.n	800948c <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 800947e:	4b11      	ldr	r3, [pc, #68]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	43db      	mvns	r3, r3
 8009486:	490f      	ldr	r1, [pc, #60]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 8009488:	4013      	ands	r3, r2
 800948a:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d006      	beq.n	80094a6 <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4909      	ldr	r1, [pc, #36]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4313      	orrs	r3, r2
 80094a2:	604b      	str	r3, [r1, #4]
 80094a4:	e006      	b.n	80094b4 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 80094a6:	4b07      	ldr	r3, [pc, #28]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	43db      	mvns	r3, r3
 80094ae:	4905      	ldr	r1, [pc, #20]	; (80094c4 <HAL_EXTI_SetConfigLine+0x148>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 80094b4:	2300      	movs	r3, #0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	40013c00 	.word	0x40013c00
 80094c8:	40013800 	.word	0x40013800

080094cc <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d002      	beq.n	80094e2 <HAL_EXTI_GetConfigLine+0x16>
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e061      	b.n	80095aa <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 031f 	and.w	r3, r3, #31
 80094f6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80094f8:	2201      	movs	r2, #1
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009500:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009502:	4b2d      	ldr	r3, [pc, #180]	; (80095b8 <HAL_EXTI_GetConfigLine+0xec>)
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	4013      	ands	r3, r2
 800950a:	2b00      	cmp	r3, #0
 800950c:	d003      	beq.n	8009516 <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	2201      	movs	r2, #1
 8009512:	605a      	str	r2, [r3, #4]
 8009514:	e002      	b.n	800951c <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2200      	movs	r2, #0
 800951a:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 800951c:	4b26      	ldr	r3, [pc, #152]	; (80095b8 <HAL_EXTI_GetConfigLine+0xec>)
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4013      	ands	r3, r2
 8009524:	2b00      	cmp	r3, #0
 8009526:	d005      	beq.n	8009534 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f043 0202 	orr.w	r2, r3, #2
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2200      	movs	r2, #0
 8009538:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d02d      	beq.n	80095a8 <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 800954c:	4b1a      	ldr	r3, [pc, #104]	; (80095b8 <HAL_EXTI_GetConfigLine+0xec>)
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	4013      	ands	r3, r2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	2201      	movs	r2, #1
 800955c:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 800955e:	4b16      	ldr	r3, [pc, #88]	; (80095b8 <HAL_EXTI_GetConfigLine+0xec>)
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	4013      	ands	r3, r2
 8009566:	2b00      	cmp	r3, #0
 8009568:	d005      	beq.n	8009576 <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f043 0202 	orr.w	r2, r3, #2
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800957e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009582:	d111      	bne.n	80095a8 <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009584:	4a0d      	ldr	r2, [pc, #52]	; (80095bc <HAL_EXTI_GetConfigLine+0xf0>)
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	089b      	lsrs	r3, r3, #2
 800958a:	3302      	adds	r3, #2
 800958c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009590:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	43db      	mvns	r3, r3
 8009596:	f003 0303 	and.w	r3, r3, #3
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	fa02 f303 	lsl.w	r3, r2, r3
 80095a2:	0e1a      	lsrs	r2, r3, #24
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40013c00 	.word	0x40013c00
 80095bc:	40013800 	.word	0x40013800

080095c0 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b087      	sub	sp, #28
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e04c      	b.n	800966c <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 031f 	and.w	r3, r3, #31
 80095da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80095dc:	2201      	movs	r2, #1
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 80095e6:	4b24      	ldr	r3, [pc, #144]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	43db      	mvns	r3, r3
 80095ee:	4922      	ldr	r1, [pc, #136]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 80095f4:	4b20      	ldr	r3, [pc, #128]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	43db      	mvns	r3, r3
 80095fc:	491e      	ldr	r1, [pc, #120]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 80095fe:	4013      	ands	r3, r2
 8009600:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800960a:	2b00      	cmp	r3, #0
 800960c:	d02d      	beq.n	800966a <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 800960e:	4b1a      	ldr	r3, [pc, #104]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	43db      	mvns	r3, r3
 8009616:	4918      	ldr	r1, [pc, #96]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009618:	4013      	ands	r3, r2
 800961a:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 800961c:	4b16      	ldr	r3, [pc, #88]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	43db      	mvns	r3, r3
 8009624:	4914      	ldr	r1, [pc, #80]	; (8009678 <HAL_EXTI_ClearConfigLine+0xb8>)
 8009626:	4013      	ands	r3, r2
 8009628:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009632:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009636:	d118      	bne.n	800966a <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009638:	4a10      	ldr	r2, [pc, #64]	; (800967c <HAL_EXTI_ClearConfigLine+0xbc>)
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	089b      	lsrs	r3, r3, #2
 800963e:	3302      	adds	r3, #2
 8009640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009644:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f003 0303 	and.w	r3, r3, #3
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	220f      	movs	r2, #15
 8009650:	fa02 f303 	lsl.w	r3, r2, r3
 8009654:	43db      	mvns	r3, r3
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	4013      	ands	r3, r2
 800965a:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800965c:	4907      	ldr	r1, [pc, #28]	; (800967c <HAL_EXTI_ClearConfigLine+0xbc>)
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	089b      	lsrs	r3, r3, #2
 8009662:	3302      	adds	r3, #2
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	371c      	adds	r7, #28
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	40013c00 	.word	0x40013c00
 800967c:	40013800 	.word	0x40013800

08009680 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009680:	b480      	push	{r7}
 8009682:	b087      	sub	sp, #28
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	460b      	mov	r3, r1
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800968e:	2300      	movs	r3, #0
 8009690:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009692:	7afb      	ldrb	r3, [r7, #11]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d103      	bne.n	80096a0 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	605a      	str	r2, [r3, #4]
      break;
 800969e:	e002      	b.n	80096a6 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	75fb      	strb	r3, [r7, #23]
      break;
 80096a4:	bf00      	nop
  }

  return status;
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e003      	b.n	80096d0 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	683a      	ldr	r2, [r7, #0]
 80096cc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80096ce:	2300      	movs	r3, #0
  }
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	370c      	adds	r7, #12
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	2201      	movs	r2, #1
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80096f4:	4b0a      	ldr	r3, [pc, #40]	; (8009720 <HAL_EXTI_IRQHandler+0x44>)
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	4013      	ands	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d009      	beq.n	8009718 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009704:	4a06      	ldr	r2, [pc, #24]	; (8009720 <HAL_EXTI_IRQHandler+0x44>)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	4798      	blx	r3
    }
  }
}
 8009718:	bf00      	nop
 800971a:	3710      	adds	r7, #16
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	40013c00 	.word	0x40013c00

08009724 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 031f 	and.w	r3, r3, #31
 8009736:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009738:	2201      	movs	r2, #1
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	fa02 f303 	lsl.w	r3, r2, r3
 8009740:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009742:	4b07      	ldr	r3, [pc, #28]	; (8009760 <HAL_EXTI_GetPending+0x3c>)
 8009744:	695a      	ldr	r2, [r3, #20]
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	401a      	ands	r2, r3
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	fa22 f303 	lsr.w	r3, r2, r3
 8009750:	60fb      	str	r3, [r7, #12]
  return regval;
 8009752:	68fb      	ldr	r3, [r7, #12]
}
 8009754:	4618      	mov	r0, r3
 8009756:	371c      	adds	r7, #28
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	40013c00 	.word	0x40013c00

08009764 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 031f 	and.w	r3, r3, #31
 8009776:	2201      	movs	r2, #1
 8009778:	fa02 f303 	lsl.w	r3, r2, r3
 800977c:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 800977e:	4a04      	ldr	r2, [pc, #16]	; (8009790 <HAL_EXTI_ClearPending+0x2c>)
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6153      	str	r3, [r2, #20]
}
 8009784:	bf00      	nop
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40013c00 	.word	0x40013c00

08009794 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 031f 	and.w	r3, r3, #31
 80097a4:	2201      	movs	r2, #1
 80097a6:	fa02 f303 	lsl.w	r3, r2, r3
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 80097ac:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <HAL_EXTI_GenerateSWI+0x2c>)
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6113      	str	r3, [r2, #16]
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	40013c00 	.word	0x40013c00

080097c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b086      	sub	sp, #24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	60f8      	str	r0, [r7, #12]
 80097cc:	60b9      	str	r1, [r7, #8]
 80097ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80097d6:	4b23      	ldr	r3, [pc, #140]	; (8009864 <HAL_FLASH_Program+0xa0>)
 80097d8:	7e1b      	ldrb	r3, [r3, #24]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d101      	bne.n	80097e2 <HAL_FLASH_Program+0x1e>
 80097de:	2302      	movs	r3, #2
 80097e0:	e03b      	b.n	800985a <HAL_FLASH_Program+0x96>
 80097e2:	4b20      	ldr	r3, [pc, #128]	; (8009864 <HAL_FLASH_Program+0xa0>)
 80097e4:	2201      	movs	r2, #1
 80097e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80097e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80097ec:	f000 f9be 	bl	8009b6c <FLASH_WaitForLastOperation>
 80097f0:	4603      	mov	r3, r0
 80097f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80097f4:	7dfb      	ldrb	r3, [r7, #23]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d12b      	bne.n	8009852 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d105      	bne.n	800980c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009800:	783b      	ldrb	r3, [r7, #0]
 8009802:	4619      	mov	r1, r3
 8009804:	68b8      	ldr	r0, [r7, #8]
 8009806:	f000 fa69 	bl	8009cdc <FLASH_Program_Byte>
 800980a:	e016      	b.n	800983a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d105      	bne.n	800981e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009812:	883b      	ldrh	r3, [r7, #0]
 8009814:	4619      	mov	r1, r3
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f000 fa3c 	bl	8009c94 <FLASH_Program_HalfWord>
 800981c:	e00d      	b.n	800983a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2b02      	cmp	r3, #2
 8009822:	d105      	bne.n	8009830 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	4619      	mov	r1, r3
 8009828:	68b8      	ldr	r0, [r7, #8]
 800982a:	f000 fa11 	bl	8009c50 <FLASH_Program_Word>
 800982e:	e004      	b.n	800983a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009834:	68b8      	ldr	r0, [r7, #8]
 8009836:	f000 f9d9 	bl	8009bec <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800983a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800983e:	f000 f995 	bl	8009b6c <FLASH_WaitForLastOperation>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009846:	4b08      	ldr	r3, [pc, #32]	; (8009868 <HAL_FLASH_Program+0xa4>)
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	4a07      	ldr	r2, [pc, #28]	; (8009868 <HAL_FLASH_Program+0xa4>)
 800984c:	f023 0301 	bic.w	r3, r3, #1
 8009850:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <HAL_FLASH_Program+0xa0>)
 8009854:	2200      	movs	r2, #0
 8009856:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009858:	7dfb      	ldrb	r3, [r7, #23]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	20000874 	.word	0x20000874
 8009868:	40023c00 	.word	0x40023c00

0800986c <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b086      	sub	sp, #24
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800987e:	4b20      	ldr	r3, [pc, #128]	; (8009900 <HAL_FLASH_Program_IT+0x94>)
 8009880:	7e1b      	ldrb	r3, [r3, #24]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d101      	bne.n	800988a <HAL_FLASH_Program_IT+0x1e>
 8009886:	2302      	movs	r3, #2
 8009888:	e035      	b.n	80098f6 <HAL_FLASH_Program_IT+0x8a>
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <HAL_FLASH_Program_IT+0x94>)
 800988c:	2201      	movs	r2, #1
 800988e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009890:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <HAL_FLASH_Program_IT+0x98>)
 8009892:	691b      	ldr	r3, [r3, #16]
 8009894:	4a1b      	ldr	r2, [pc, #108]	; (8009904 <HAL_FLASH_Program_IT+0x98>)
 8009896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800989a:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800989c:	4b19      	ldr	r3, [pc, #100]	; (8009904 <HAL_FLASH_Program_IT+0x98>)
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	4a18      	ldr	r2, [pc, #96]	; (8009904 <HAL_FLASH_Program_IT+0x98>)
 80098a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80098a6:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 80098a8:	4b15      	ldr	r3, [pc, #84]	; (8009900 <HAL_FLASH_Program_IT+0x94>)
 80098aa:	2203      	movs	r2, #3
 80098ac:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 80098ae:	4a14      	ldr	r2, [pc, #80]	; (8009900 <HAL_FLASH_Program_IT+0x94>)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80098ba:	783b      	ldrb	r3, [r7, #0]
 80098bc:	4619      	mov	r1, r3
 80098be:	68b8      	ldr	r0, [r7, #8]
 80098c0:	f000 fa0c 	bl	8009cdc <FLASH_Program_Byte>
 80098c4:	e016      	b.n	80098f4 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d105      	bne.n	80098d8 <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80098cc:	883b      	ldrh	r3, [r7, #0]
 80098ce:	4619      	mov	r1, r3
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f000 f9df 	bl	8009c94 <FLASH_Program_HalfWord>
 80098d6:	e00d      	b.n	80098f4 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d105      	bne.n	80098ea <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	4619      	mov	r1, r3
 80098e2:	68b8      	ldr	r0, [r7, #8]
 80098e4:	f000 f9b4 	bl	8009c50 <FLASH_Program_Word>
 80098e8:	e004      	b.n	80098f4 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 80098ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098ee:	68b8      	ldr	r0, [r7, #8]
 80098f0:	f000 f97c 	bl	8009bec <FLASH_Program_DoubleWord>
  }

  return status;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000874 	.word	0x20000874
 8009904:	40023c00 	.word	0x40023c00

08009908 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009912:	4b4b      	ldr	r3, [pc, #300]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d020      	beq.n	8009960 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 800991e:	4b49      	ldr	r3, [pc, #292]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	2b01      	cmp	r3, #1
 8009926:	d107      	bne.n	8009938 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009928:	4b46      	ldr	r3, [pc, #280]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 800992e:	4b45      	ldr	r3, [pc, #276]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009930:	f04f 32ff 	mov.w	r2, #4294967295
 8009934:	60da      	str	r2, [r3, #12]
 8009936:	e00b      	b.n	8009950 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009938:	4b42      	ldr	r3, [pc, #264]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	b2db      	uxtb	r3, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d103      	bne.n	800994a <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009942:	4b40      	ldr	r3, [pc, #256]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	e002      	b.n	8009950 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 800994a:	4b3e      	ldr	r3, [pc, #248]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800994c:	695b      	ldr	r3, [r3, #20]
 800994e:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009950:	f000 f9e6 	bl	8009d20 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f881 	bl	8009a5c <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800995a:	4b3a      	ldr	r3, [pc, #232]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800995c:	2200      	movs	r2, #0
 800995e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009960:	4b37      	ldr	r3, [pc, #220]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	f003 0301 	and.w	r3, r3, #1
 8009968:	2b00      	cmp	r3, #0
 800996a:	d04a      	beq.n	8009a02 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800996c:	4b34      	ldr	r3, [pc, #208]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 800996e:	2201      	movs	r2, #1
 8009970:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009972:	4b34      	ldr	r3, [pc, #208]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b01      	cmp	r3, #1
 800997a:	d12d      	bne.n	80099d8 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800997c:	4b31      	ldr	r3, [pc, #196]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	3b01      	subs	r3, #1
 8009982:	4a30      	ldr	r2, [pc, #192]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009984:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009986:	4b2f      	ldr	r3, [pc, #188]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d015      	beq.n	80099ba <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 800998e:	4b2d      	ldr	r3, [pc, #180]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 f857 	bl	8009a48 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 800999a:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	3301      	adds	r3, #1
 80099a0:	4a28      	ldr	r2, [pc, #160]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099a2:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 80099a4:	4b27      	ldr	r3, [pc, #156]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 80099aa:	4b26      	ldr	r3, [pc, #152]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099ac:	7a1b      	ldrb	r3, [r3, #8]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fb84 	bl	800a0c0 <FLASH_Erase_Sector>
 80099b8:	e023      	b.n	8009a02 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	4a20      	ldr	r2, [pc, #128]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80099c6:	4b1f      	ldr	r3, [pc, #124]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80099cc:	f000 fcb6 	bl	800a33c <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f839 	bl	8009a48 <HAL_FLASH_EndOfOperationCallback>
 80099d6:	e014      	b.n	8009a02 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 80099d8:	4b1a      	ldr	r3, [pc, #104]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d107      	bne.n	80099f2 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 80099e2:	f000 fcab 	bl	800a33c <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80099e6:	4b17      	ldr	r3, [pc, #92]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	4618      	mov	r0, r3
 80099ec:	f000 f82c 	bl	8009a48 <HAL_FLASH_EndOfOperationCallback>
 80099f0:	e004      	b.n	80099fc <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099f4:	695b      	ldr	r3, [r3, #20]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f826 	bl	8009a48 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80099fc:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009a02:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d114      	bne.n	8009a36 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	4a0b      	ldr	r2, [pc, #44]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009a16:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009a22:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009a24:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	4a05      	ldr	r2, [pc, #20]	; (8009a40 <HAL_FLASH_IRQHandler+0x138>)
 8009a2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009a2e:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009a30:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <HAL_FLASH_IRQHandler+0x13c>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	761a      	strb	r2, [r3, #24]
  }
}
 8009a36:	bf00      	nop
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	40023c00 	.word	0x40023c00
 8009a44:	20000874 	.word	0x20000874

08009a48 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr

08009a5c <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009a7a:	4b0b      	ldr	r3, [pc, #44]	; (8009aa8 <HAL_FLASH_Unlock+0x38>)
 8009a7c:	691b      	ldr	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	da0b      	bge.n	8009a9a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009a82:	4b09      	ldr	r3, [pc, #36]	; (8009aa8 <HAL_FLASH_Unlock+0x38>)
 8009a84:	4a09      	ldr	r2, [pc, #36]	; (8009aac <HAL_FLASH_Unlock+0x3c>)
 8009a86:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009a88:	4b07      	ldr	r3, [pc, #28]	; (8009aa8 <HAL_FLASH_Unlock+0x38>)
 8009a8a:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <HAL_FLASH_Unlock+0x40>)
 8009a8c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009a8e:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <HAL_FLASH_Unlock+0x38>)
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	da01      	bge.n	8009a9a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	40023c00 	.word	0x40023c00
 8009aac:	45670123 	.word	0x45670123
 8009ab0:	cdef89ab 	.word	0xcdef89ab

08009ab4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <HAL_FLASH_Lock+0x1c>)
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	4a04      	ldr	r2, [pc, #16]	; (8009ad0 <HAL_FLASH_Lock+0x1c>)
 8009abe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ac2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40023c00 	.word	0x40023c00

08009ad4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8009ad8:	4b09      	ldr	r3, [pc, #36]	; (8009b00 <HAL_FLASH_OB_Unlock+0x2c>)
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d007      	beq.n	8009af4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_FLASH_OB_Unlock+0x2c>)
 8009ae6:	4a07      	ldr	r2, [pc, #28]	; (8009b04 <HAL_FLASH_OB_Unlock+0x30>)
 8009ae8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <HAL_FLASH_OB_Unlock+0x2c>)
 8009aec:	4a06      	ldr	r2, [pc, #24]	; (8009b08 <HAL_FLASH_OB_Unlock+0x34>)
 8009aee:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8009af0:	2300      	movs	r3, #0
 8009af2:	e000      	b.n	8009af6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr
 8009b00:	40023c00 	.word	0x40023c00
 8009b04:	08192a3b 	.word	0x08192a3b
 8009b08:	4c5d6e7f 	.word	0x4c5d6e7f

08009b0c <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8009b10:	4b05      	ldr	r3, [pc, #20]	; (8009b28 <HAL_FLASH_OB_Lock+0x1c>)
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	4a04      	ldr	r2, [pc, #16]	; (8009b28 <HAL_FLASH_OB_Lock+0x1c>)
 8009b16:	f043 0301 	orr.w	r3, r3, #1
 8009b1a:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr
 8009b28:	40023c00 	.word	0x40023c00

08009b2c <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8009b30:	4b07      	ldr	r3, [pc, #28]	; (8009b50 <HAL_FLASH_OB_Launch+0x24>)
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	4a06      	ldr	r2, [pc, #24]	; (8009b50 <HAL_FLASH_OB_Launch+0x24>)
 8009b38:	f043 0302 	orr.w	r3, r3, #2
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 8009b40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009b44:	f000 f812 	bl	8009b6c <FLASH_WaitForLastOperation>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40023c14 	.word	0x40023c14

08009b54 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8009b54:	b480      	push	{r7}
 8009b56:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009b58:	4b03      	ldr	r3, [pc, #12]	; (8009b68 <HAL_FLASH_GetError+0x14>)
 8009b5a:	69db      	ldr	r3, [r3, #28]
}  
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop
 8009b68:	20000874 	.word	0x20000874

08009b6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009b74:	2300      	movs	r3, #0
 8009b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009b78:	4b1a      	ldr	r3, [pc, #104]	; (8009be4 <FLASH_WaitForLastOperation+0x78>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009b7e:	f7fc fabb 	bl	80060f8 <HAL_GetTick>
 8009b82:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009b84:	e010      	b.n	8009ba8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8c:	d00c      	beq.n	8009ba8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d007      	beq.n	8009ba4 <FLASH_WaitForLastOperation+0x38>
 8009b94:	f7fc fab0 	bl	80060f8 <HAL_GetTick>
 8009b98:	4602      	mov	r2, r0
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	1ad3      	subs	r3, r2, r3
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	429a      	cmp	r2, r3
 8009ba2:	d201      	bcs.n	8009ba8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e019      	b.n	8009bdc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009ba8:	4b0f      	ldr	r3, [pc, #60]	; (8009be8 <FLASH_WaitForLastOperation+0x7c>)
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1e8      	bne.n	8009b86 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009bb4:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <FLASH_WaitForLastOperation+0x7c>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0301 	and.w	r3, r3, #1
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009bc0:	4b09      	ldr	r3, [pc, #36]	; (8009be8 <FLASH_WaitForLastOperation+0x7c>)
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009bc6:	4b08      	ldr	r3, [pc, #32]	; (8009be8 <FLASH_WaitForLastOperation+0x7c>)
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009bd2:	f000 f8a5 	bl	8009d20 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
  
}  
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20000874 	.word	0x20000874
 8009be8:	40023c00 	.word	0x40023c00

08009bec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009bf8:	4b14      	ldr	r3, [pc, #80]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	4a13      	ldr	r2, [pc, #76]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009bfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009c04:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	4a10      	ldr	r2, [pc, #64]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009c0a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009c0e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009c10:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	4a0d      	ldr	r2, [pc, #52]	; (8009c4c <FLASH_Program_DoubleWord+0x60>)
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009c22:	f3bf 8f6f 	isb	sy
}
 8009c26:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009c28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	000a      	movs	r2, r1
 8009c36:	2300      	movs	r3, #0
 8009c38:	68f9      	ldr	r1, [r7, #12]
 8009c3a:	3104      	adds	r1, #4
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	600b      	str	r3, [r1, #0]
}
 8009c40:	bf00      	nop
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	40023c00 	.word	0x40023c00

08009c50 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	4a0c      	ldr	r2, [pc, #48]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009c66:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c70:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	4a06      	ldr	r2, [pc, #24]	; (8009c90 <FLASH_Program_Word+0x40>)
 8009c78:	f043 0301 	orr.w	r3, r3, #1
 8009c7c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	601a      	str	r2, [r3, #0]
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	40023c00 	.word	0x40023c00

08009c94 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009ca0:	4b0d      	ldr	r3, [pc, #52]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	4a0c      	ldr	r2, [pc, #48]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009cac:	4b0a      	ldr	r3, [pc, #40]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	4a09      	ldr	r2, [pc, #36]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009cb8:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	4a06      	ldr	r2, [pc, #24]	; (8009cd8 <FLASH_Program_HalfWord+0x44>)
 8009cbe:	f043 0301 	orr.w	r3, r3, #1
 8009cc2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	887a      	ldrh	r2, [r7, #2]
 8009cc8:	801a      	strh	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40023c00 	.word	0x40023c00

08009cdc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	460b      	mov	r3, r1
 8009ce6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009cea:	691b      	ldr	r3, [r3, #16]
 8009cec:	4a0b      	ldr	r2, [pc, #44]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009cf2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009cf6:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009cfc:	4b07      	ldr	r3, [pc, #28]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	4a06      	ldr	r2, [pc, #24]	; (8009d1c <FLASH_Program_Byte+0x40>)
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	701a      	strb	r2, [r3, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	40023c00 	.word	0x40023c00

08009d20 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009d24:	4b27      	ldr	r3, [pc, #156]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	f003 0310 	and.w	r3, r3, #16
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d008      	beq.n	8009d42 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009d30:	4b25      	ldr	r3, [pc, #148]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d32:	69db      	ldr	r3, [r3, #28]
 8009d34:	f043 0310 	orr.w	r3, r3, #16
 8009d38:	4a23      	ldr	r2, [pc, #140]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d3a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009d3c:	4b21      	ldr	r3, [pc, #132]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d3e:	2210      	movs	r2, #16
 8009d40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009d42:	4b20      	ldr	r3, [pc, #128]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009d4e:	4b1e      	ldr	r3, [pc, #120]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d50:	69db      	ldr	r3, [r3, #28]
 8009d52:	f043 0308 	orr.w	r3, r3, #8
 8009d56:	4a1c      	ldr	r2, [pc, #112]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d58:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009d5a:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009d60:	4b18      	ldr	r3, [pc, #96]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d008      	beq.n	8009d7e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009d6c:	4b16      	ldr	r3, [pc, #88]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d6e:	69db      	ldr	r3, [r3, #28]
 8009d70:	f043 0304 	orr.w	r3, r3, #4
 8009d74:	4a14      	ldr	r2, [pc, #80]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009d78:	4b12      	ldr	r3, [pc, #72]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d7a:	2240      	movs	r2, #64	; 0x40
 8009d7c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009d7e:	4b11      	ldr	r3, [pc, #68]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d008      	beq.n	8009d9c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8009d8a:	4b0f      	ldr	r3, [pc, #60]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d8c:	69db      	ldr	r3, [r3, #28]
 8009d8e:	f043 0302 	orr.w	r3, r3, #2
 8009d92:	4a0d      	ldr	r2, [pc, #52]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009d94:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8009d96:	4b0b      	ldr	r3, [pc, #44]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d98:	2280      	movs	r2, #128	; 0x80
 8009d9a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8009d9c:	4b09      	ldr	r3, [pc, #36]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8009da8:	4b07      	ldr	r3, [pc, #28]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	f043 0320 	orr.w	r3, r3, #32
 8009db0:	4a05      	ldr	r2, [pc, #20]	; (8009dc8 <FLASH_SetErrorCode+0xa8>)
 8009db2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8009db4:	4b03      	ldr	r3, [pc, #12]	; (8009dc4 <FLASH_SetErrorCode+0xa4>)
 8009db6:	2202      	movs	r2, #2
 8009db8:	60da      	str	r2, [r3, #12]
  }
}
 8009dba:	bf00      	nop
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	40023c00 	.word	0x40023c00
 8009dc8:	20000874 	.word	0x20000874

08009dcc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009dde:	4b31      	ldr	r3, [pc, #196]	; (8009ea4 <HAL_FLASHEx_Erase+0xd8>)
 8009de0:	7e1b      	ldrb	r3, [r3, #24]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_FLASHEx_Erase+0x1e>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e058      	b.n	8009e9c <HAL_FLASHEx_Erase+0xd0>
 8009dea:	4b2e      	ldr	r3, [pc, #184]	; (8009ea4 <HAL_FLASHEx_Erase+0xd8>)
 8009dec:	2201      	movs	r2, #1
 8009dee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009df0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009df4:	f7ff feba 	bl	8009b6c <FLASH_WaitForLastOperation>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009dfc:	7bfb      	ldrb	r3, [r7, #15]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d148      	bne.n	8009e94 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d115      	bne.n	8009e3e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	691b      	ldr	r3, [r3, #16]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4610      	mov	r0, r2
 8009e20:	f000 f92b 	bl	800a07a <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e24:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e28:	f7ff fea0 	bl	8009b6c <FLASH_WaitForLastOperation>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8009e30:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <HAL_FLASHEx_Erase+0xdc>)
 8009e32:	691b      	ldr	r3, [r3, #16]
 8009e34:	4a1c      	ldr	r2, [pc, #112]	; (8009ea8 <HAL_FLASHEx_Erase+0xdc>)
 8009e36:	f023 0304 	bic.w	r3, r3, #4
 8009e3a:	6113      	str	r3, [r2, #16]
 8009e3c:	e028      	b.n	8009e90 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	60bb      	str	r3, [r7, #8]
 8009e44:	e01c      	b.n	8009e80 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	68b8      	ldr	r0, [r7, #8]
 8009e50:	f000 f936 	bl	800a0c0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009e58:	f7ff fe88 	bl	8009b6c <FLASH_WaitForLastOperation>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8009e60:	4b11      	ldr	r3, [pc, #68]	; (8009ea8 <HAL_FLASHEx_Erase+0xdc>)
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	4a10      	ldr	r2, [pc, #64]	; (8009ea8 <HAL_FLASHEx_Erase+0xdc>)
 8009e66:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8009e6a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	601a      	str	r2, [r3, #0]
          break;
 8009e78:	e00a      	b.n	8009e90 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	60bb      	str	r3, [r7, #8]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68da      	ldr	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	4413      	add	r3, r2
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d3da      	bcc.n	8009e46 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009e90:	f000 fa54 	bl	800a33c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e94:	4b03      	ldr	r3, [pc, #12]	; (8009ea4 <HAL_FLASHEx_Erase+0xd8>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	761a      	strb	r2, [r3, #24]

  return status;
 8009e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}
 8009ea4:	20000874 	.word	0x20000874
 8009ea8:	40023c00 	.word	0x40023c00

08009eac <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009eb8:	4b25      	ldr	r3, [pc, #148]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009eba:	7e1b      	ldrb	r3, [r3, #24]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d101      	bne.n	8009ec4 <HAL_FLASHEx_Erase_IT+0x18>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	e040      	b.n	8009f46 <HAL_FLASHEx_Erase_IT+0x9a>
 8009ec4:	4b22      	ldr	r3, [pc, #136]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009eca:	4b22      	ldr	r3, [pc, #136]	; (8009f54 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	4a21      	ldr	r2, [pc, #132]	; (8009f54 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009ed0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ed4:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8009ed6:	4b1f      	ldr	r3, [pc, #124]	; (8009f54 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	4a1e      	ldr	r2, [pc, #120]	; (8009f54 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009edc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009ee0:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 8009ee2:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <HAL_FLASHEx_Erase_IT+0xa8>)
 8009ee4:	22f3      	movs	r2, #243	; 0xf3
 8009ee6:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d110      	bne.n	8009f12 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8009ef0:	4b17      	ldr	r3, [pc, #92]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009ef2:	2202      	movs	r2, #2
 8009ef4:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4a15      	ldr	r2, [pc, #84]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009efc:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4610      	mov	r0, r2
 8009f0c:	f000 f8b5 	bl	800a07a <FLASH_MassErase>
 8009f10:	e018      	b.n	8009f44 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 8009f12:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009f14:	2201      	movs	r2, #1
 8009f16:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009f1e:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	4a0a      	ldr	r2, [pc, #40]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009f26:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	4b08      	ldr	r3, [pc, #32]	; (8009f50 <HAL_FLASHEx_Erase_IT+0xa4>)
 8009f30:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	689a      	ldr	r2, [r3, #8]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f000 f8be 	bl	800a0c0 <FLASH_Erase_Sector>
  }

  return status;
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20000874 	.word	0x20000874
 8009f54:	40023c00 	.word	0x40023c00

08009f58 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f64:	4b32      	ldr	r3, [pc, #200]	; (800a030 <HAL_FLASHEx_OBProgram+0xd8>)
 8009f66:	7e1b      	ldrb	r3, [r3, #24]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d101      	bne.n	8009f70 <HAL_FLASHEx_OBProgram+0x18>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	e05b      	b.n	800a028 <HAL_FLASHEx_OBProgram+0xd0>
 8009f70:	4b2f      	ldr	r3, [pc, #188]	; (800a030 <HAL_FLASHEx_OBProgram+0xd8>)
 8009f72:	2201      	movs	r2, #1
 8009f74:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d018      	beq.n	8009fb4 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d10a      	bne.n	8009fa0 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	689a      	ldr	r2, [r3, #8]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	68db      	ldr	r3, [r3, #12]
 8009f92:	4619      	mov	r1, r3
 8009f94:	4610      	mov	r0, r2
 8009f96:	f000 f8db 	bl	800a150 <FLASH_OB_EnableWRP>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]
 8009f9e:	e009      	b.n	8009fb4 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f000 f8f2 	bl	800a194 <FLASH_OB_DisableWRP>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d007      	beq.n	8009fd0 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	691b      	ldr	r3, [r3, #16]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 f904 	bl	800a1d4 <FLASH_OB_RDP_LevelConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f003 0304 	and.w	r3, r3, #4
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d013      	beq.n	800a004 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	7e1b      	ldrb	r3, [r3, #24]
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8009fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fee:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 8009ff4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f000 f904 	bl	800a208 <FLASH_OB_UserConfig>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0308 	and.w	r3, r3, #8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d007      	beq.n	800a020 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	695b      	ldr	r3, [r3, #20]
 800a014:	b2db      	uxtb	r3, r3
 800a016:	4618      	mov	r0, r3
 800a018:	f000 f926 	bl	800a268 <FLASH_OB_BOR_LevelConfig>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a020:	4b03      	ldr	r3, [pc, #12]	; (800a030 <HAL_FLASHEx_OBProgram+0xd8>)
 800a022:	2200      	movs	r2, #0
 800a024:	761a      	strb	r2, [r3, #24]

  return status;
 800a026:	7bfb      	ldrb	r3, [r7, #15]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	20000874 	.word	0x20000874

0800a034 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	220f      	movs	r2, #15
 800a040:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a042:	f000 f93f 	bl	800a2c4 <FLASH_OB_GetWRP>
 800a046:	4603      	mov	r3, r0
 800a048:	461a      	mov	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a04e:	f000 f945 	bl	800a2dc <FLASH_OB_GetRDP>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a05a:	f000 f923 	bl	800a2a4 <FLASH_OB_GetUser>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a066:	f000 f959 	bl	800a31c <FLASH_OB_GetBOR>
 800a06a:	4603      	mov	r3, r0
 800a06c:	461a      	mov	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	615a      	str	r2, [r3, #20]
}
 800a072:	bf00      	nop
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 800a080:	4603      	mov	r3, r0
 800a082:	6039      	str	r1, [r7, #0]
 800a084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a086:	4b0d      	ldr	r3, [pc, #52]	; (800a0bc <FLASH_MassErase+0x42>)
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	4a0c      	ldr	r2, [pc, #48]	; (800a0bc <FLASH_MassErase+0x42>)
 800a08c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a090:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a092:	4b0a      	ldr	r3, [pc, #40]	; (800a0bc <FLASH_MassErase+0x42>)
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	4a09      	ldr	r2, [pc, #36]	; (800a0bc <FLASH_MassErase+0x42>)
 800a098:	f043 0304 	orr.w	r3, r3, #4
 800a09c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a09e:	4b07      	ldr	r3, [pc, #28]	; (800a0bc <FLASH_MassErase+0x42>)
 800a0a0:	691a      	ldr	r2, [r3, #16]
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	021b      	lsls	r3, r3, #8
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	4a04      	ldr	r2, [pc, #16]	; (800a0bc <FLASH_MassErase+0x42>)
 800a0aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0ae:	6113      	str	r3, [r2, #16]
}
 800a0b0:	bf00      	nop
 800a0b2:	370c      	adds	r7, #12
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	4770      	bx	lr
 800a0bc:	40023c00 	.word	0x40023c00

0800a0c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d102      	bne.n	800a0dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e010      	b.n	800a0fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d103      	bne.n	800a0ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a0e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0e6:	60fb      	str	r3, [r7, #12]
 800a0e8:	e009      	b.n	800a0fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d103      	bne.n	800a0f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a0f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0f4:	60fb      	str	r3, [r7, #12]
 800a0f6:	e002      	b.n	800a0fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a0f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a0fe:	4b13      	ldr	r3, [pc, #76]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	4a12      	ldr	r2, [pc, #72]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a108:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a10a:	4b10      	ldr	r3, [pc, #64]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a10c:	691a      	ldr	r2, [r3, #16]
 800a10e:	490f      	ldr	r1, [pc, #60]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4313      	orrs	r3, r2
 800a114:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a116:	4b0d      	ldr	r3, [pc, #52]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a118:	691b      	ldr	r3, [r3, #16]
 800a11a:	4a0c      	ldr	r2, [pc, #48]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a11c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a120:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a122:	4b0a      	ldr	r3, [pc, #40]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a124:	691a      	ldr	r2, [r3, #16]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	00db      	lsls	r3, r3, #3
 800a12a:	4313      	orrs	r3, r2
 800a12c:	4a07      	ldr	r2, [pc, #28]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a12e:	f043 0302 	orr.w	r3, r3, #2
 800a132:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a134:	4b05      	ldr	r3, [pc, #20]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	4a04      	ldr	r2, [pc, #16]	; (800a14c <FLASH_Erase_Sector+0x8c>)
 800a13a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a13e:	6113      	str	r3, [r2, #16]
}
 800a140:	bf00      	nop
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr
 800a14c:	40023c00 	.word	0x40023c00

0800a150 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a15e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a162:	f7ff fd03 	bl	8009b6c <FLASH_WaitForLastOperation>
 800a166:	4603      	mov	r3, r0
 800a168:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a170:	4b07      	ldr	r3, [pc, #28]	; (800a190 <FLASH_OB_EnableWRP+0x40>)
 800a172:	881b      	ldrh	r3, [r3, #0]
 800a174:	b29a      	uxth	r2, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	43db      	mvns	r3, r3
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4904      	ldr	r1, [pc, #16]	; (800a190 <FLASH_OB_EnableWRP+0x40>)
 800a180:	4013      	ands	r3, r2
 800a182:	b29b      	uxth	r3, r3
 800a184:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a186:	7bfb      	ldrb	r3, [r7, #15]
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3710      	adds	r7, #16
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	40023c16 	.word	0x40023c16

0800a194 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
 800a19c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1a6:	f7ff fce1 	bl	8009b6c <FLASH_WaitForLastOperation>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d108      	bne.n	800a1c6 <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a1b4:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <FLASH_OB_DisableWRP+0x3c>)
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	b29a      	uxth	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4904      	ldr	r1, [pc, #16]	; (800a1d0 <FLASH_OB_DisableWRP+0x3c>)
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	40023c16 	.word	0x40023c16

0800a1d4 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	4603      	mov	r3, r0
 800a1dc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a1e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a1e6:	f7ff fcc1 	bl	8009b6c <FLASH_WaitForLastOperation>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a1ee:	7bfb      	ldrb	r3, [r7, #15]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d102      	bne.n	800a1fa <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a1f4:	4a03      	ldr	r2, [pc, #12]	; (800a204 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	40023c15 	.word	0x40023c15

0800a208 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	71fb      	strb	r3, [r7, #7]
 800a212:	460b      	mov	r3, r1
 800a214:	71bb      	strb	r3, [r7, #6]
 800a216:	4613      	mov	r3, r2
 800a218:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a21a:	23ff      	movs	r3, #255	; 0xff
 800a21c:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a21e:	2300      	movs	r3, #0
 800a220:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a222:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a226:	f7ff fca1 	bl	8009b6c <FLASH_WaitForLastOperation>
 800a22a:	4603      	mov	r3, r0
 800a22c:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a22e:	7bbb      	ldrb	r3, [r7, #14]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d111      	bne.n	800a258 <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a234:	4b0b      	ldr	r3, [pc, #44]	; (800a264 <FLASH_OB_UserConfig+0x5c>)
 800a236:	781b      	ldrb	r3, [r3, #0]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	f003 031f 	and.w	r3, r3, #31
 800a23e:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a240:	79ba      	ldrb	r2, [r7, #6]
 800a242:	7bfb      	ldrb	r3, [r7, #15]
 800a244:	4313      	orrs	r3, r2
 800a246:	b2da      	uxtb	r2, r3
 800a248:	797b      	ldrb	r3, [r7, #5]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4905      	ldr	r1, [pc, #20]	; (800a264 <FLASH_OB_UserConfig+0x5c>)
 800a250:	79fb      	ldrb	r3, [r7, #7]
 800a252:	4313      	orrs	r3, r2
 800a254:	b2db      	uxtb	r3, r3
 800a256:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a258:	7bbb      	ldrb	r3, [r7, #14]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	40023c14 	.word	0x40023c14

0800a268 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a272:	4b0b      	ldr	r3, [pc, #44]	; (800a2a0 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	b2db      	uxtb	r3, r3
 800a278:	4a09      	ldr	r2, [pc, #36]	; (800a2a0 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a27a:	f023 030c 	bic.w	r3, r3, #12
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a282:	4b07      	ldr	r3, [pc, #28]	; (800a2a0 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	b2da      	uxtb	r2, r3
 800a288:	4905      	ldr	r1, [pc, #20]	; (800a2a0 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800a292:	2300      	movs	r3, #0

}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	40023c14 	.word	0x40023c14

0800a2a4 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <FLASH_OB_GetUser+0x1c>)
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	b2db      	uxtb	r3, r3
 800a2ae:	f023 031f 	bic.w	r3, r3, #31
 800a2b2:	b2db      	uxtb	r3, r3
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	40023c00 	.word	0x40023c00

0800a2c4 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800a2c8:	4b03      	ldr	r3, [pc, #12]	; (800a2d8 <FLASH_OB_GetWRP+0x14>)
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	b29b      	uxth	r3, r3
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr
 800a2d8:	40023c16 	.word	0x40023c16

0800a2dc <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800a2e2:	23aa      	movs	r3, #170	; 0xaa
 800a2e4:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800a2e6:	4b0c      	ldr	r3, [pc, #48]	; (800a318 <FLASH_OB_GetRDP+0x3c>)
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2bcc      	cmp	r3, #204	; 0xcc
 800a2ee:	d102      	bne.n	800a2f6 <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800a2f0:	23cc      	movs	r3, #204	; 0xcc
 800a2f2:	71fb      	strb	r3, [r7, #7]
 800a2f4:	e009      	b.n	800a30a <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800a2f6:	4b08      	ldr	r3, [pc, #32]	; (800a318 <FLASH_OB_GetRDP+0x3c>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2baa      	cmp	r3, #170	; 0xaa
 800a2fe:	d102      	bne.n	800a306 <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800a300:	23aa      	movs	r3, #170	; 0xaa
 800a302:	71fb      	strb	r3, [r7, #7]
 800a304:	e001      	b.n	800a30a <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800a306:	2355      	movs	r3, #85	; 0x55
 800a308:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800a30a:	79fb      	ldrb	r3, [r7, #7]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	40023c15 	.word	0x40023c15

0800a31c <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800a320:	4b05      	ldr	r3, [pc, #20]	; (800a338 <FLASH_OB_GetBOR+0x1c>)
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 030c 	and.w	r3, r3, #12
 800a32a:	b2db      	uxtb	r3, r3
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	40023c14 	.word	0x40023c14

0800a33c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a33c:	b480      	push	{r7}
 800a33e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a340:	4b20      	ldr	r3, [pc, #128]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a34c:	4b1d      	ldr	r3, [pc, #116]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1c      	ldr	r2, [pc, #112]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a352:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a356:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a358:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a19      	ldr	r2, [pc, #100]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a35e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	4b17      	ldr	r3, [pc, #92]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a16      	ldr	r2, [pc, #88]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a36a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a36e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a370:	4b14      	ldr	r3, [pc, #80]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a13      	ldr	r2, [pc, #76]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a37a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a37c:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a384:	2b00      	cmp	r3, #0
 800a386:	d017      	beq.n	800a3b8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a388:	4b0e      	ldr	r3, [pc, #56]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a0d      	ldr	r2, [pc, #52]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a38e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a392:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a394:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a0a      	ldr	r2, [pc, #40]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a39a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	4b08      	ldr	r3, [pc, #32]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a07      	ldr	r2, [pc, #28]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a3a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3aa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a3ac:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a04      	ldr	r2, [pc, #16]	; (800a3c4 <FLASH_FlushCaches+0x88>)
 800a3b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3b6:	6013      	str	r3, [r2, #0]
  }
}
 800a3b8:	bf00      	nop
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	40023c00 	.word	0x40023c00

0800a3c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b089      	sub	sp, #36	; 0x24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61fb      	str	r3, [r7, #28]
 800a3e2:	e16b      	b.n	800a6bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	f040 815a 	bne.w	800a6b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d005      	beq.n	800a41a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a416:	2b02      	cmp	r3, #2
 800a418:	d130      	bne.n	800a47c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	2203      	movs	r2, #3
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	43db      	mvns	r3, r3
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	4013      	ands	r3, r2
 800a430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	4313      	orrs	r3, r2
 800a442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a450:	2201      	movs	r2, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	43db      	mvns	r3, r3
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	4013      	ands	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	091b      	lsrs	r3, r3, #4
 800a466:	f003 0201 	and.w	r2, r3, #1
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	fa02 f303 	lsl.w	r3, r2, r3
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	4313      	orrs	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	2b03      	cmp	r3, #3
 800a486:	d017      	beq.n	800a4b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	2203      	movs	r2, #3
 800a494:	fa02 f303 	lsl.w	r3, r2, r3
 800a498:	43db      	mvns	r3, r3
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	4013      	ands	r3, r2
 800a49e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d123      	bne.n	800a50c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	08da      	lsrs	r2, r3, #3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3208      	adds	r2, #8
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	220f      	movs	r2, #15
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	08da      	lsrs	r2, r3, #3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3208      	adds	r2, #8
 800a506:	69b9      	ldr	r1, [r7, #24]
 800a508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	2203      	movs	r2, #3
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	43db      	mvns	r3, r3
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	4013      	ands	r3, r2
 800a522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 0203 	and.w	r2, r3, #3
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	fa02 f303 	lsl.w	r3, r2, r3
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	4313      	orrs	r3, r2
 800a538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69ba      	ldr	r2, [r7, #24]
 800a53e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80b4 	beq.w	800a6b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	4b60      	ldr	r3, [pc, #384]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a556:	4a5f      	ldr	r2, [pc, #380]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a55c:	6453      	str	r3, [r2, #68]	; 0x44
 800a55e:	4b5d      	ldr	r3, [pc, #372]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a56a:	4a5b      	ldr	r2, [pc, #364]	; (800a6d8 <HAL_GPIO_Init+0x310>)
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	089b      	lsrs	r3, r3, #2
 800a570:	3302      	adds	r3, #2
 800a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	220f      	movs	r2, #15
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43db      	mvns	r3, r3
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	4013      	ands	r3, r2
 800a58c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a52      	ldr	r2, [pc, #328]	; (800a6dc <HAL_GPIO_Init+0x314>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d02b      	beq.n	800a5ee <HAL_GPIO_Init+0x226>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a51      	ldr	r2, [pc, #324]	; (800a6e0 <HAL_GPIO_Init+0x318>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d025      	beq.n	800a5ea <HAL_GPIO_Init+0x222>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a50      	ldr	r2, [pc, #320]	; (800a6e4 <HAL_GPIO_Init+0x31c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d01f      	beq.n	800a5e6 <HAL_GPIO_Init+0x21e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a4f      	ldr	r2, [pc, #316]	; (800a6e8 <HAL_GPIO_Init+0x320>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d019      	beq.n	800a5e2 <HAL_GPIO_Init+0x21a>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a4e      	ldr	r2, [pc, #312]	; (800a6ec <HAL_GPIO_Init+0x324>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <HAL_GPIO_Init+0x216>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a4d      	ldr	r2, [pc, #308]	; (800a6f0 <HAL_GPIO_Init+0x328>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00d      	beq.n	800a5da <HAL_GPIO_Init+0x212>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a4c      	ldr	r2, [pc, #304]	; (800a6f4 <HAL_GPIO_Init+0x32c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d007      	beq.n	800a5d6 <HAL_GPIO_Init+0x20e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a4b      	ldr	r2, [pc, #300]	; (800a6f8 <HAL_GPIO_Init+0x330>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d101      	bne.n	800a5d2 <HAL_GPIO_Init+0x20a>
 800a5ce:	2307      	movs	r3, #7
 800a5d0:	e00e      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	e00c      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5d6:	2306      	movs	r3, #6
 800a5d8:	e00a      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5da:	2305      	movs	r3, #5
 800a5dc:	e008      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5de:	2304      	movs	r3, #4
 800a5e0:	e006      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e004      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e002      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	f002 0203 	and.w	r2, r2, #3
 800a5f6:	0092      	lsls	r2, r2, #2
 800a5f8:	4093      	lsls	r3, r2
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a600:	4935      	ldr	r1, [pc, #212]	; (800a6d8 <HAL_GPIO_Init+0x310>)
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	089b      	lsrs	r3, r3, #2
 800a606:	3302      	adds	r3, #2
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a60e:	4b3b      	ldr	r3, [pc, #236]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	43db      	mvns	r3, r3
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	4013      	ands	r3, r2
 800a61c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a632:	4a32      	ldr	r2, [pc, #200]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a638:	4b30      	ldr	r3, [pc, #192]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	43db      	mvns	r3, r3
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	4013      	ands	r3, r2
 800a646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a65c:	4a27      	ldr	r2, [pc, #156]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a662:	4b26      	ldr	r3, [pc, #152]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	43db      	mvns	r3, r3
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	4013      	ands	r3, r2
 800a670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a686:	4a1d      	ldr	r2, [pc, #116]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a68c:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	43db      	mvns	r3, r3
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	4013      	ands	r3, r2
 800a69a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b0f      	cmp	r3, #15
 800a6c0:	f67f ae90 	bls.w	800a3e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3724      	adds	r7, #36	; 0x24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	40023800 	.word	0x40023800
 800a6d8:	40013800 	.word	0x40013800
 800a6dc:	40020000 	.word	0x40020000
 800a6e0:	40020400 	.word	0x40020400
 800a6e4:	40020800 	.word	0x40020800
 800a6e8:	40020c00 	.word	0x40020c00
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40021400 	.word	0x40021400
 800a6f4:	40021800 	.word	0x40021800
 800a6f8:	40021c00 	.word	0x40021c00
 800a6fc:	40013c00 	.word	0x40013c00

0800a700 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a70a:	2300      	movs	r3, #0
 800a70c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a70e:	2300      	movs	r3, #0
 800a710:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a712:	2300      	movs	r3, #0
 800a714:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	e0cd      	b.n	800a8b8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a71c:	2201      	movs	r2, #1
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	4013      	ands	r3, r2
 800a72c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	429a      	cmp	r2, r3
 800a734:	f040 80bd 	bne.w	800a8b2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a738:	4a65      	ldr	r2, [pc, #404]	; (800a8d0 <HAL_GPIO_DeInit+0x1d0>)
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	089b      	lsrs	r3, r3, #2
 800a73e:	3302      	adds	r3, #2
 800a740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a744:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	220f      	movs	r2, #15
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	4013      	ands	r3, r2
 800a758:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a5d      	ldr	r2, [pc, #372]	; (800a8d4 <HAL_GPIO_DeInit+0x1d4>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d02b      	beq.n	800a7ba <HAL_GPIO_DeInit+0xba>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a5c      	ldr	r2, [pc, #368]	; (800a8d8 <HAL_GPIO_DeInit+0x1d8>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d025      	beq.n	800a7b6 <HAL_GPIO_DeInit+0xb6>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a5b      	ldr	r2, [pc, #364]	; (800a8dc <HAL_GPIO_DeInit+0x1dc>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d01f      	beq.n	800a7b2 <HAL_GPIO_DeInit+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a5a      	ldr	r2, [pc, #360]	; (800a8e0 <HAL_GPIO_DeInit+0x1e0>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d019      	beq.n	800a7ae <HAL_GPIO_DeInit+0xae>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a59      	ldr	r2, [pc, #356]	; (800a8e4 <HAL_GPIO_DeInit+0x1e4>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d013      	beq.n	800a7aa <HAL_GPIO_DeInit+0xaa>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a58      	ldr	r2, [pc, #352]	; (800a8e8 <HAL_GPIO_DeInit+0x1e8>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00d      	beq.n	800a7a6 <HAL_GPIO_DeInit+0xa6>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a57      	ldr	r2, [pc, #348]	; (800a8ec <HAL_GPIO_DeInit+0x1ec>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d007      	beq.n	800a7a2 <HAL_GPIO_DeInit+0xa2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a56      	ldr	r2, [pc, #344]	; (800a8f0 <HAL_GPIO_DeInit+0x1f0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d101      	bne.n	800a79e <HAL_GPIO_DeInit+0x9e>
 800a79a:	2307      	movs	r3, #7
 800a79c:	e00e      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a79e:	2308      	movs	r3, #8
 800a7a0:	e00c      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7a2:	2306      	movs	r3, #6
 800a7a4:	e00a      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7a6:	2305      	movs	r3, #5
 800a7a8:	e008      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7aa:	2304      	movs	r3, #4
 800a7ac:	e006      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	e004      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	e002      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <HAL_GPIO_DeInit+0xbc>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	f002 0203 	and.w	r2, r2, #3
 800a7c2:	0092      	lsls	r2, r2, #2
 800a7c4:	4093      	lsls	r3, r2
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d132      	bne.n	800a832 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a7cc:	4b49      	ldr	r3, [pc, #292]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	43db      	mvns	r3, r3
 800a7d4:	4947      	ldr	r1, [pc, #284]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a7da:	4b46      	ldr	r3, [pc, #280]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	43db      	mvns	r3, r3
 800a7e2:	4944      	ldr	r1, [pc, #272]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a7e8:	4b42      	ldr	r3, [pc, #264]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7ea:	689a      	ldr	r2, [r3, #8]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	43db      	mvns	r3, r3
 800a7f0:	4940      	ldr	r1, [pc, #256]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a7f6:	4b3f      	ldr	r3, [pc, #252]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	493d      	ldr	r1, [pc, #244]	; (800a8f4 <HAL_GPIO_DeInit+0x1f4>)
 800a800:	4013      	ands	r3, r2
 800a802:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	f003 0303 	and.w	r3, r3, #3
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	220f      	movs	r2, #15
 800a80e:	fa02 f303 	lsl.w	r3, r2, r3
 800a812:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a814:	4a2e      	ldr	r2, [pc, #184]	; (800a8d0 <HAL_GPIO_DeInit+0x1d0>)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	089b      	lsrs	r3, r3, #2
 800a81a:	3302      	adds	r3, #2
 800a81c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	43da      	mvns	r2, r3
 800a824:	482a      	ldr	r0, [pc, #168]	; (800a8d0 <HAL_GPIO_DeInit+0x1d0>)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	089b      	lsrs	r3, r3, #2
 800a82a:	400a      	ands	r2, r1
 800a82c:	3302      	adds	r3, #2
 800a82e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	2103      	movs	r1, #3
 800a83c:	fa01 f303 	lsl.w	r3, r1, r3
 800a840:	43db      	mvns	r3, r3
 800a842:	401a      	ands	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	08da      	lsrs	r2, r3, #3
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3208      	adds	r2, #8
 800a850:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	f003 0307 	and.w	r3, r3, #7
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	220f      	movs	r2, #15
 800a85e:	fa02 f303 	lsl.w	r3, r2, r3
 800a862:	43db      	mvns	r3, r3
 800a864:	697a      	ldr	r2, [r7, #20]
 800a866:	08d2      	lsrs	r2, r2, #3
 800a868:	4019      	ands	r1, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3208      	adds	r2, #8
 800a86e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	2103      	movs	r1, #3
 800a87c:	fa01 f303 	lsl.w	r3, r1, r3
 800a880:	43db      	mvns	r3, r3
 800a882:	401a      	ands	r2, r3
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	2101      	movs	r1, #1
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	fa01 f303 	lsl.w	r3, r1, r3
 800a894:	43db      	mvns	r3, r3
 800a896:	401a      	ands	r2, r3
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689a      	ldr	r2, [r3, #8]
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	2103      	movs	r1, #3
 800a8a6:	fa01 f303 	lsl.w	r3, r1, r3
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	401a      	ands	r2, r3
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	617b      	str	r3, [r7, #20]
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2b0f      	cmp	r3, #15
 800a8bc:	f67f af2e 	bls.w	800a71c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	371c      	adds	r7, #28
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	40013800 	.word	0x40013800
 800a8d4:	40020000 	.word	0x40020000
 800a8d8:	40020400 	.word	0x40020400
 800a8dc:	40020800 	.word	0x40020800
 800a8e0:	40020c00 	.word	0x40020c00
 800a8e4:	40021000 	.word	0x40021000
 800a8e8:	40021400 	.word	0x40021400
 800a8ec:	40021800 	.word	0x40021800
 800a8f0:	40021c00 	.word	0x40021c00
 800a8f4:	40013c00 	.word	0x40013c00

0800a8f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	460b      	mov	r3, r1
 800a902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	887b      	ldrh	r3, [r7, #2]
 800a90a:	4013      	ands	r3, r2
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a910:	2301      	movs	r3, #1
 800a912:	73fb      	strb	r3, [r7, #15]
 800a914:	e001      	b.n	800a91a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a916:	2300      	movs	r3, #0
 800a918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	460b      	mov	r3, r1
 800a932:	807b      	strh	r3, [r7, #2]
 800a934:	4613      	mov	r3, r2
 800a936:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a938:	787b      	ldrb	r3, [r7, #1]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a93e:	887a      	ldrh	r2, [r7, #2]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a944:	e003      	b.n	800a94e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a946:	887b      	ldrh	r3, [r7, #2]
 800a948:	041a      	lsls	r2, r3, #16
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	619a      	str	r2, [r3, #24]
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]
 800a962:	460b      	mov	r3, r1
 800a964:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a96c:	887a      	ldrh	r2, [r7, #2]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	4013      	ands	r3, r2
 800a972:	041a      	lsls	r2, r3, #16
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	43d9      	mvns	r1, r3
 800a978:	887b      	ldrh	r3, [r7, #2]
 800a97a:	400b      	ands	r3, r1
 800a97c:	431a      	orrs	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	619a      	str	r2, [r3, #24]
}
 800a982:	bf00      	nop
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800a99a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800a9a0:	887a      	ldrh	r2, [r7, #2]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800a9a8:	68fa      	ldr	r2, [r7, #12]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800a9ae:	887a      	ldrh	r2, [r7, #2]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d001      	beq.n	800a9d0 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	e000      	b.n	800a9d2 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
  }
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b082      	sub	sp, #8
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a9e8:	4b08      	ldr	r3, [pc, #32]	; (800aa0c <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800a9ea:	695a      	ldr	r2, [r3, #20]
 800a9ec:	88fb      	ldrh	r3, [r7, #6]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a9f4:	4a05      	ldr	r2, [pc, #20]	; (800aa0c <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800a9f6:	88fb      	ldrh	r3, [r7, #6]
 800a9f8:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a9fa:	88fb      	ldrh	r3, [r7, #6]
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f000 f807 	bl	800aa10 <HAL_GPIO_EXTI_Callback>
  }
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	40013c00 	.word	0x40013c00

0800aa10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800aa1a:	bf00      	nop
 800aa1c:	370c      	adds	r7, #12
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b084      	sub	sp, #16
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa34:	2301      	movs	r3, #1
 800aa36:	e12b      	b.n	800ac90 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d106      	bne.n	800aa52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7fa fd53 	bl	80054f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2224      	movs	r2, #36	; 0x24
 800aa56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0201 	bic.w	r2, r2, #1
 800aa68:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa78:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa88:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aa8a:	f007 f891 	bl	8011bb0 <HAL_RCC_GetPCLK1Freq>
 800aa8e:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4a80      	ldr	r2, [pc, #512]	; (800ac98 <HAL_I2C_Init+0x272>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d807      	bhi.n	800aaaa <HAL_I2C_Init+0x84>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4a7f      	ldr	r2, [pc, #508]	; (800ac9c <HAL_I2C_Init+0x276>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bf94      	ite	ls
 800aaa2:	2301      	movls	r3, #1
 800aaa4:	2300      	movhi	r3, #0
 800aaa6:	b2db      	uxtb	r3, r3
 800aaa8:	e006      	b.n	800aab8 <HAL_I2C_Init+0x92>
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4a7c      	ldr	r2, [pc, #496]	; (800aca0 <HAL_I2C_Init+0x27a>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	bf94      	ite	ls
 800aab2:	2301      	movls	r3, #1
 800aab4:	2300      	movhi	r3, #0
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0e7      	b.n	800ac90 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4a78      	ldr	r2, [pc, #480]	; (800aca4 <HAL_I2C_Init+0x27e>)
 800aac4:	fba2 2303 	umull	r2, r3, r2, r3
 800aac8:	0c9b      	lsrs	r3, r3, #18
 800aaca:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68ba      	ldr	r2, [r7, #8]
 800aadc:	430a      	orrs	r2, r1
 800aade:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	4a6a      	ldr	r2, [pc, #424]	; (800ac98 <HAL_I2C_Init+0x272>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d802      	bhi.n	800aafa <HAL_I2C_Init+0xd4>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	e009      	b.n	800ab0e <HAL_I2C_Init+0xe8>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab00:	fb02 f303 	mul.w	r3, r2, r3
 800ab04:	4a68      	ldr	r2, [pc, #416]	; (800aca8 <HAL_I2C_Init+0x282>)
 800ab06:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0a:	099b      	lsrs	r3, r3, #6
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	6812      	ldr	r2, [r2, #0]
 800ab12:	430b      	orrs	r3, r1
 800ab14:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69db      	ldr	r3, [r3, #28]
 800ab1c:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ab20:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	495b      	ldr	r1, [pc, #364]	; (800ac98 <HAL_I2C_Init+0x272>)
 800ab2a:	428b      	cmp	r3, r1
 800ab2c:	d819      	bhi.n	800ab62 <HAL_I2C_Init+0x13c>
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	1e59      	subs	r1, r3, #1
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab3c:	1c59      	adds	r1, r3, #1
 800ab3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab42:	400b      	ands	r3, r1
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00a      	beq.n	800ab5e <HAL_I2C_Init+0x138>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	1e59      	subs	r1, r3, #1
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab56:	3301      	adds	r3, #1
 800ab58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab5c:	e051      	b.n	800ac02 <HAL_I2C_Init+0x1dc>
 800ab5e:	2304      	movs	r3, #4
 800ab60:	e04f      	b.n	800ac02 <HAL_I2C_Init+0x1dc>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d111      	bne.n	800ab8e <HAL_I2C_Init+0x168>
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	1e58      	subs	r0, r3, #1
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6859      	ldr	r1, [r3, #4]
 800ab72:	460b      	mov	r3, r1
 800ab74:	005b      	lsls	r3, r3, #1
 800ab76:	440b      	add	r3, r1
 800ab78:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab7c:	3301      	adds	r3, #1
 800ab7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	bf0c      	ite	eq
 800ab86:	2301      	moveq	r3, #1
 800ab88:	2300      	movne	r3, #0
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	e012      	b.n	800abb4 <HAL_I2C_Init+0x18e>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	1e58      	subs	r0, r3, #1
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6859      	ldr	r1, [r3, #4]
 800ab96:	460b      	mov	r3, r1
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	0099      	lsls	r1, r3, #2
 800ab9e:	440b      	add	r3, r1
 800aba0:	fbb0 f3f3 	udiv	r3, r0, r3
 800aba4:	3301      	adds	r3, #1
 800aba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abaa:	2b00      	cmp	r3, #0
 800abac:	bf0c      	ite	eq
 800abae:	2301      	moveq	r3, #1
 800abb0:	2300      	movne	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <HAL_I2C_Init+0x196>
 800abb8:	2301      	movs	r3, #1
 800abba:	e022      	b.n	800ac02 <HAL_I2C_Init+0x1dc>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10e      	bne.n	800abe2 <HAL_I2C_Init+0x1bc>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	1e58      	subs	r0, r3, #1
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6859      	ldr	r1, [r3, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	440b      	add	r3, r1
 800abd2:	fbb0 f3f3 	udiv	r3, r0, r3
 800abd6:	3301      	adds	r3, #1
 800abd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abe0:	e00f      	b.n	800ac02 <HAL_I2C_Init+0x1dc>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	1e58      	subs	r0, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6859      	ldr	r1, [r3, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	440b      	add	r3, r1
 800abf0:	0099      	lsls	r1, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	fbb0 f3f3 	udiv	r3, r0, r3
 800abf8:	3301      	adds	r3, #1
 800abfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ac02:	6879      	ldr	r1, [r7, #4]
 800ac04:	6809      	ldr	r1, [r1, #0]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	69da      	ldr	r2, [r3, #28]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	431a      	orrs	r2, r3
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	689b      	ldr	r3, [r3, #8]
 800ac2c:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ac30:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	6911      	ldr	r1, [r2, #16]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	68d2      	ldr	r2, [r2, #12]
 800ac3c:	4311      	orrs	r1, r2
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	6812      	ldr	r2, [r2, #0]
 800ac42:	430b      	orrs	r3, r1
 800ac44:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	695a      	ldr	r2, [r3, #20]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f042 0201 	orr.w	r2, r2, #1
 800ac70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2220      	movs	r2, #32
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	000186a0 	.word	0x000186a0
 800ac9c:	001e847f 	.word	0x001e847f
 800aca0:	003d08ff 	.word	0x003d08ff
 800aca4:	431bde83 	.word	0x431bde83
 800aca8:	10624dd3 	.word	0x10624dd3

0800acac <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	e021      	b.n	800ad02 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2224      	movs	r2, #36	; 0x24
 800acc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f022 0201 	bic.w	r2, r2, #1
 800acd4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7fa fc56 	bl	8005588 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b088      	sub	sp, #32
 800ad0e:	af02      	add	r7, sp, #8
 800ad10:	60f8      	str	r0, [r7, #12]
 800ad12:	607a      	str	r2, [r7, #4]
 800ad14:	461a      	mov	r2, r3
 800ad16:	460b      	mov	r3, r1
 800ad18:	817b      	strh	r3, [r7, #10]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad1e:	f7fb f9eb 	bl	80060f8 <HAL_GetTick>
 800ad22:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b20      	cmp	r3, #32
 800ad2e:	f040 80e0 	bne.w	800aef2 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	2319      	movs	r3, #25
 800ad38:	2201      	movs	r2, #1
 800ad3a:	4970      	ldr	r1, [pc, #448]	; (800aefc <HAL_I2C_Master_Transmit+0x1f2>)
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f005 fd97 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d001      	beq.n	800ad4c <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	e0d3      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d101      	bne.n	800ad5a <HAL_I2C_Master_Transmit+0x50>
 800ad56:	2302      	movs	r3, #2
 800ad58:	e0cc      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d007      	beq.n	800ad80 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f042 0201 	orr.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad8e:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2221      	movs	r2, #33	; 0x21
 800ad94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2210      	movs	r2, #16
 800ad9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	893a      	ldrh	r2, [r7, #8]
 800adb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb6:	b29a      	uxth	r2, r3
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4a50      	ldr	r2, [pc, #320]	; (800af00 <HAL_I2C_Master_Transmit+0x1f6>)
 800adc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800adc2:	8979      	ldrh	r1, [r7, #10]
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	6a3a      	ldr	r2, [r7, #32]
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f005 f8c9 	bl	800ff60 <I2C_MasterRequestWrite>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	e08d      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800add8:	2300      	movs	r3, #0
 800adda:	613b      	str	r3, [r7, #16]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	695b      	ldr	r3, [r3, #20]
 800ade2:	613b      	str	r3, [r7, #16]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	613b      	str	r3, [r7, #16]
 800adec:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800adee:	e066      	b.n	800aebe <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800adf0:	697a      	ldr	r2, [r7, #20]
 800adf2:	6a39      	ldr	r1, [r7, #32]
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f005 fe11 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00d      	beq.n	800ae1c <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d107      	bne.n	800ae18 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e06b      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae20:	781a      	ldrb	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	1c5a      	adds	r2, r3, #1
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	b29a      	uxth	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae44:	3b01      	subs	r3, #1
 800ae46:	b29a      	uxth	r2, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0304 	and.w	r3, r3, #4
 800ae56:	2b04      	cmp	r3, #4
 800ae58:	d11b      	bne.n	800ae92 <HAL_I2C_Master_Transmit+0x188>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d017      	beq.n	800ae92 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae66:	781a      	ldrb	r2, [r3, #0]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	3b01      	subs	r3, #1
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	b29a      	uxth	r2, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	6a39      	ldr	r1, [r7, #32]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f005 fe01 	bl	8010a9e <I2C_WaitOnBTFFlagUntilTimeout>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00d      	beq.n	800aebe <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea6:	2b04      	cmp	r3, #4
 800aea8:	d107      	bne.n	800aeba <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	e01a      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d194      	bne.n	800adf0 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	681a      	ldr	r2, [r3, #0]
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aed4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	e000      	b.n	800aef4 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800aef2:	2302      	movs	r3, #2
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3718      	adds	r7, #24
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	00100002 	.word	0x00100002
 800af00:	ffff0000 	.word	0xffff0000

0800af04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af02      	add	r7, sp, #8
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	461a      	mov	r2, r3
 800af10:	460b      	mov	r3, r1
 800af12:	817b      	strh	r3, [r7, #10]
 800af14:	4613      	mov	r3, r2
 800af16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af18:	f7fb f8ee 	bl	80060f8 <HAL_GetTick>
 800af1c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b20      	cmp	r3, #32
 800af28:	f040 820b 	bne.w	800b342 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2e:	9300      	str	r3, [sp, #0]
 800af30:	2319      	movs	r3, #25
 800af32:	2201      	movs	r2, #1
 800af34:	497c      	ldr	r1, [pc, #496]	; (800b128 <HAL_I2C_Master_Receive+0x224>)
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f005 fc9a 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800af3c:	4603      	mov	r3, r0
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800af42:	2302      	movs	r3, #2
 800af44:	e1fe      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d101      	bne.n	800af54 <HAL_I2C_Master_Receive+0x50>
 800af50:	2302      	movs	r3, #2
 800af52:	e1f7      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2201      	movs	r2, #1
 800af58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0301 	and.w	r3, r3, #1
 800af66:	2b01      	cmp	r3, #1
 800af68:	d007      	beq.n	800af7a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f042 0201 	orr.w	r2, r2, #1
 800af78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2222      	movs	r2, #34	; 0x22
 800af8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2210      	movs	r2, #16
 800af96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2200      	movs	r2, #0
 800af9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	893a      	ldrh	r2, [r7, #8]
 800afaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	4a5c      	ldr	r2, [pc, #368]	; (800b12c <HAL_I2C_Master_Receive+0x228>)
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800afbc:	8979      	ldrh	r1, [r7, #10]
 800afbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f005 f84e 	bl	8010064 <I2C_MasterRequestRead>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e1b8      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d113      	bne.n	800b002 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afda:	2300      	movs	r3, #0
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	695b      	ldr	r3, [r3, #20]
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	699b      	ldr	r3, [r3, #24]
 800afec:	617b      	str	r3, [r7, #20]
 800afee:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	e18c      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b006:	2b01      	cmp	r3, #1
 800b008:	d11b      	bne.n	800b042 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b018:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b01a:	2300      	movs	r3, #0
 800b01c:	61bb      	str	r3, [r7, #24]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	695b      	ldr	r3, [r3, #20]
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	61bb      	str	r3, [r7, #24]
 800b02e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b03e:	601a      	str	r2, [r3, #0]
 800b040:	e16c      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b046:	2b02      	cmp	r3, #2
 800b048:	d11b      	bne.n	800b082 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b058:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b06a:	2300      	movs	r3, #0
 800b06c:	61fb      	str	r3, [r7, #28]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	61fb      	str	r3, [r7, #28]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	61fb      	str	r3, [r7, #28]
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	e14c      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681a      	ldr	r2, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b090:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b092:	2300      	movs	r3, #0
 800b094:	623b      	str	r3, [r7, #32]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	695b      	ldr	r3, [r3, #20]
 800b09c:	623b      	str	r3, [r7, #32]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	699b      	ldr	r3, [r3, #24]
 800b0a4:	623b      	str	r3, [r7, #32]
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b0a8:	e138      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ae:	2b03      	cmp	r3, #3
 800b0b0:	f200 80f1 	bhi.w	800b296 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d123      	bne.n	800b104 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f005 fd9d 	bl	8010c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	e139      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	691a      	ldr	r2, [r3, #16]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	1c5a      	adds	r2, r3, #1
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b102:	e10b      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b108:	2b02      	cmp	r3, #2
 800b10a:	d14e      	bne.n	800b1aa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b112:	2200      	movs	r2, #0
 800b114:	4906      	ldr	r1, [pc, #24]	; (800b130 <HAL_I2C_Master_Receive+0x22c>)
 800b116:	68f8      	ldr	r0, [r7, #12]
 800b118:	f005 fbaa 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d008      	beq.n	800b134 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e10e      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
 800b126:	bf00      	nop
 800b128:	00100002 	.word	0x00100002
 800b12c:	ffff0000 	.word	0xffff0000
 800b130:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	691a      	ldr	r2, [r3, #16]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14e:	b2d2      	uxtb	r2, r2
 800b150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b156:	1c5a      	adds	r2, r3, #1
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b160:	3b01      	subs	r3, #1
 800b162:	b29a      	uxth	r2, r3
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	3b01      	subs	r3, #1
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	691a      	ldr	r2, [r3, #16]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b180:	b2d2      	uxtb	r2, r2
 800b182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b188:	1c5a      	adds	r2, r3, #1
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b192:	3b01      	subs	r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1a8:	e0b8      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	4966      	ldr	r1, [pc, #408]	; (800b34c <HAL_I2C_Master_Receive+0x448>)
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f005 fb5b 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e0bf      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	691a      	ldr	r2, [r3, #16]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	3b01      	subs	r3, #1
 800b200:	b29a      	uxth	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	9300      	str	r3, [sp, #0]
 800b20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20c:	2200      	movs	r2, #0
 800b20e:	494f      	ldr	r1, [pc, #316]	; (800b34c <HAL_I2C_Master_Receive+0x448>)
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f005 fb2d 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b216:	4603      	mov	r3, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e091      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b22e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	691a      	ldr	r2, [r3, #16]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b23a:	b2d2      	uxtb	r2, r2
 800b23c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b24c:	3b01      	subs	r3, #1
 800b24e:	b29a      	uxth	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b258:	b29b      	uxth	r3, r3
 800b25a:	3b01      	subs	r3, #1
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	691a      	ldr	r2, [r3, #16]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b26c:	b2d2      	uxtb	r2, r2
 800b26e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b274:	1c5a      	adds	r2, r3, #1
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b27e:	3b01      	subs	r3, #1
 800b280:	b29a      	uxth	r2, r3
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b294:	e042      	b.n	800b31c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f005 fcb0 	bl	8010c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e04c      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	f003 0304 	and.w	r3, r3, #4
 800b2e6:	2b04      	cmp	r3, #4
 800b2e8:	d118      	bne.n	800b31c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	691a      	ldr	r2, [r3, #16]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f4:	b2d2      	uxtb	r2, r2
 800b2f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b306:	3b01      	subs	r3, #1
 800b308:	b29a      	uxth	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b312:	b29b      	uxth	r3, r3
 800b314:	3b01      	subs	r3, #1
 800b316:	b29a      	uxth	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b320:	2b00      	cmp	r3, #0
 800b322:	f47f aec2 	bne.w	800b0aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2220      	movs	r2, #32
 800b32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b33e:	2300      	movs	r3, #0
 800b340:	e000      	b.n	800b344 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b342:	2302      	movs	r3, #2
  }
}
 800b344:	4618      	mov	r0, r3
 800b346:	3728      	adds	r7, #40	; 0x28
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}
 800b34c:	00010004 	.word	0x00010004

0800b350 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b08a      	sub	sp, #40	; 0x28
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	4613      	mov	r3, r2
 800b35e:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b360:	f7fa feca 	bl	80060f8 <HAL_GetTick>
 800b364:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	2b20      	cmp	r3, #32
 800b370:	f040 80fb 	bne.w	800b56a <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <HAL_I2C_Slave_Transmit+0x30>
 800b37a:	88fb      	ldrh	r3, [r7, #6]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d101      	bne.n	800b384 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e0f3      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d101      	bne.n	800b392 <HAL_I2C_Slave_Transmit+0x42>
 800b38e:	2302      	movs	r3, #2
 800b390:	e0ec      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2201      	movs	r2, #1
 800b396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d007      	beq.n	800b3b8 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f042 0201 	orr.w	r2, r2, #1
 800b3b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3c6:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2221      	movs	r2, #33	; 0x21
 800b3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2220      	movs	r2, #32
 800b3d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	68ba      	ldr	r2, [r7, #8]
 800b3e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	88fa      	ldrh	r2, [r7, #6]
 800b3e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ee:	b29a      	uxth	r2, r3
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4a5f      	ldr	r2, [pc, #380]	; (800b574 <HAL_I2C_Slave_Transmit+0x224>)
 800b3f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b408:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	2200      	movs	r2, #0
 800b412:	4959      	ldr	r1, [pc, #356]	; (800b578 <HAL_I2C_Slave_Transmit+0x228>)
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f005 fa2b 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b41a:	4603      	mov	r3, r0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d001      	beq.n	800b424 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800b420:	2301      	movs	r3, #1
 800b422:	e0a3      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	617b      	str	r3, [r7, #20]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b442:	d165      	bne.n	800b510 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2200      	movs	r2, #0
 800b44c:	494a      	ldr	r1, [pc, #296]	; (800b578 <HAL_I2C_Slave_Transmit+0x228>)
 800b44e:	68f8      	ldr	r0, [r7, #12]
 800b450:	f005 fa0e 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d001      	beq.n	800b45e <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800b45a:	2301      	movs	r3, #1
 800b45c:	e086      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b45e:	2300      	movs	r3, #0
 800b460:	61bb      	str	r3, [r7, #24]
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	695b      	ldr	r3, [r3, #20]
 800b468:	61bb      	str	r3, [r7, #24]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	61bb      	str	r3, [r7, #24]
 800b472:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800b474:	e04c      	b.n	800b510 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b476:	69fa      	ldr	r2, [r7, #28]
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f005 face 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d009      	beq.n	800b49a <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b494:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e068      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	781a      	ldrb	r2, [r3, #0]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	1c5a      	adds	r2, r3, #1
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	b29a      	uxth	r2, r3
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	695b      	ldr	r3, [r3, #20]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b04      	cmp	r3, #4
 800b4d6:	d11b      	bne.n	800b510 <HAL_I2C_Slave_Transmit+0x1c0>
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d017      	beq.n	800b510 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e4:	781a      	ldrb	r2, [r3, #0]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f0:	1c5a      	adds	r2, r3, #1
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4fa:	b29b      	uxth	r3, r3
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b508:	3b01      	subs	r3, #1
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1ae      	bne.n	800b476 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2200      	movs	r2, #0
 800b520:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800b524:	68f8      	ldr	r0, [r7, #12]
 800b526:	f005 f9a3 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b52a:	4603      	mov	r3, r0
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	e01b      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b53c:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b54c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2220      	movs	r2, #32
 800b552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2200      	movs	r2, #0
 800b55a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	e000      	b.n	800b56c <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b56a:	2302      	movs	r3, #2
  }
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	ffff0000 	.word	0xffff0000
 800b578:	00010002 	.word	0x00010002

0800b57c <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08a      	sub	sp, #40	; 0x28
 800b580:	af02      	add	r7, sp, #8
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	60b9      	str	r1, [r7, #8]
 800b586:	603b      	str	r3, [r7, #0]
 800b588:	4613      	mov	r3, r2
 800b58a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b58c:	f7fa fdb4 	bl	80060f8 <HAL_GetTick>
 800b590:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b20      	cmp	r3, #32
 800b59c:	f040 80ee 	bne.w	800b77c <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <HAL_I2C_Slave_Receive+0x30>
 800b5a6:	88fb      	ldrh	r3, [r7, #6]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e0e6      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d101      	bne.n	800b5be <HAL_I2C_Slave_Receive+0x42>
 800b5ba:	2302      	movs	r3, #2
 800b5bc:	e0df      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d007      	beq.n	800b5e4 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f042 0201 	orr.w	r2, r2, #1
 800b5e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	681a      	ldr	r2, [r3, #0]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b5f2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2222      	movs	r2, #34	; 0x22
 800b5f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2220      	movs	r2, #32
 800b600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2200      	movs	r2, #0
 800b608:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	88fa      	ldrh	r2, [r7, #6]
 800b614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4a59      	ldr	r2, [pc, #356]	; (800b788 <HAL_I2C_Slave_Receive+0x20c>)
 800b624:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b634:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b636:	69fb      	ldr	r3, [r7, #28]
 800b638:	9300      	str	r3, [sp, #0]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	2200      	movs	r2, #0
 800b63e:	4953      	ldr	r1, [pc, #332]	; (800b78c <HAL_I2C_Slave_Receive+0x210>)
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f005 f915 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e096      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b650:	2300      	movs	r3, #0
 800b652:	617b      	str	r3, [r7, #20]
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	617b      	str	r3, [r7, #20]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	699b      	ldr	r3, [r3, #24]
 800b662:	617b      	str	r3, [r7, #20]
 800b664:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800b666:	e04e      	b.n	800b706 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b668:	69fa      	ldr	r2, [r7, #28]
 800b66a:	6839      	ldr	r1, [r7, #0]
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f005 fac7 	bl	8010c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d009      	beq.n	800b68c <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b686:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e078      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	691a      	ldr	r2, [r3, #16]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b696:	b2d2      	uxtb	r2, r2
 800b698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b69e:	1c5a      	adds	r2, r3, #1
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6a8:	3b01      	subs	r3, #1
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d11c      	bne.n	800b706 <HAL_I2C_Slave_Receive+0x18a>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d018      	beq.n	800b706 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	691a      	ldr	r2, [r3, #16]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e6:	1c5a      	adds	r2, r3, #1
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	3b01      	subs	r3, #1
 800b700:	b29a      	uxth	r2, r3
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1ac      	bne.n	800b668 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b70e:	69fa      	ldr	r2, [r7, #28]
 800b710:	6839      	ldr	r1, [r7, #0]
 800b712:	68f8      	ldr	r0, [r7, #12]
 800b714:	f005 fa04 	bl	8010b20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b718:	4603      	mov	r3, r0
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d009      	beq.n	800b732 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b72c:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e025      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b732:	2300      	movs	r3, #0
 800b734:	61bb      	str	r3, [r7, #24]
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f042 0201 	orr.w	r2, r2, #1
 800b74c:	601a      	str	r2, [r3, #0]
 800b74e:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b75e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	2220      	movs	r2, #32
 800b764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b778:	2300      	movs	r3, #0
 800b77a:	e000      	b.n	800b77e <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800b77c:	2302      	movs	r3, #2
  }
}
 800b77e:	4618      	mov	r0, r3
 800b780:	3720      	adds	r7, #32
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}
 800b786:	bf00      	nop
 800b788:	ffff0000 	.word	0xffff0000
 800b78c:	00010002 	.word	0x00010002

0800b790 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b790:	b480      	push	{r7}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	607a      	str	r2, [r7, #4]
 800b79a:	461a      	mov	r2, r3
 800b79c:	460b      	mov	r3, r1
 800b79e:	817b      	strh	r3, [r7, #10]
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	2b20      	cmp	r3, #32
 800b7b2:	f040 8085 	bne.w	800b8c0 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800b7b6:	4b46      	ldr	r3, [pc, #280]	; (800b8d0 <HAL_I2C_Master_Transmit_IT+0x140>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	08db      	lsrs	r3, r3, #3
 800b7bc:	4a45      	ldr	r2, [pc, #276]	; (800b8d4 <HAL_I2C_Master_Transmit_IT+0x144>)
 800b7be:	fba2 2303 	umull	r2, r3, r2, r3
 800b7c2:	0a1a      	lsrs	r2, r3, #8
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	009b      	lsls	r3, r3, #2
 800b7c8:	4413      	add	r3, r2
 800b7ca:	009a      	lsls	r2, r3, #2
 800b7cc:	4413      	add	r3, r2
 800b7ce:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d116      	bne.n	800b80a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f6:	f043 0220 	orr.w	r2, r3, #32
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e05b      	b.n	800b8c2 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	699b      	ldr	r3, [r3, #24]
 800b810:	f003 0302 	and.w	r3, r3, #2
 800b814:	2b02      	cmp	r3, #2
 800b816:	d0db      	beq.n	800b7d0 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d101      	bne.n	800b826 <HAL_I2C_Master_Transmit_IT+0x96>
 800b822:	2302      	movs	r3, #2
 800b824:	e04d      	b.n	800b8c2 <HAL_I2C_Master_Transmit_IT+0x132>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d007      	beq.n	800b84c <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f042 0201 	orr.w	r2, r2, #1
 800b84a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b85a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2221      	movs	r2, #33	; 0x21
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2210      	movs	r2, #16
 800b868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	893a      	ldrh	r2, [r7, #8]
 800b87c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b882:	b29a      	uxth	r2, r3
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a13      	ldr	r2, [pc, #76]	; (800b8d8 <HAL_I2C_Master_Transmit_IT+0x148>)
 800b88c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800b88e:	897a      	ldrh	r2, [r7, #10]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	685a      	ldr	r2, [r3, #4]
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b8aa:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8ba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e000      	b.n	800b8c2 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800b8c0:	2302      	movs	r3, #2
  }
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr
 800b8ce:	bf00      	nop
 800b8d0:	20000058 	.word	0x20000058
 800b8d4:	14f8b589 	.word	0x14f8b589
 800b8d8:	ffff0000 	.word	0xffff0000

0800b8dc <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	607a      	str	r2, [r7, #4]
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	817b      	strh	r3, [r7, #10]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b20      	cmp	r3, #32
 800b8fe:	f040 808d 	bne.w	800ba1c <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800b902:	4b4a      	ldr	r3, [pc, #296]	; (800ba2c <HAL_I2C_Master_Receive_IT+0x150>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	08db      	lsrs	r3, r3, #3
 800b908:	4a49      	ldr	r2, [pc, #292]	; (800ba30 <HAL_I2C_Master_Receive_IT+0x154>)
 800b90a:	fba2 2303 	umull	r2, r3, r2, r3
 800b90e:	0a1a      	lsrs	r2, r3, #8
 800b910:	4613      	mov	r3, r2
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	009a      	lsls	r2, r3, #2
 800b918:	4413      	add	r3, r2
 800b91a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	3b01      	subs	r3, #1
 800b920:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d116      	bne.n	800b956 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2200      	movs	r2, #0
 800b92c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2220      	movs	r2, #32
 800b932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2200      	movs	r2, #0
 800b93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	f043 0220 	orr.w	r2, r3, #32
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b952:	2301      	movs	r3, #1
 800b954:	e063      	b.n	800ba1e <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b02      	cmp	r3, #2
 800b962:	d0db      	beq.n	800b91c <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d101      	bne.n	800b972 <HAL_I2C_Master_Receive_IT+0x96>
 800b96e:	2302      	movs	r3, #2
 800b970:	e055      	b.n	800ba1e <HAL_I2C_Master_Receive_IT+0x142>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2201      	movs	r2, #1
 800b976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0301 	and.w	r3, r3, #1
 800b984:	2b01      	cmp	r3, #1
 800b986:	d007      	beq.n	800b998 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681a      	ldr	r2, [r3, #0]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f042 0201 	orr.w	r2, r2, #1
 800b996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b9a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2222      	movs	r2, #34	; 0x22
 800b9ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2210      	movs	r2, #16
 800b9b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	893a      	ldrh	r2, [r7, #8]
 800b9c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	4a17      	ldr	r2, [pc, #92]	; (800ba34 <HAL_I2C_Master_Receive_IT+0x158>)
 800b9d8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800b9da:	897a      	ldrh	r2, [r7, #10]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	685a      	ldr	r2, [r3, #4]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800b9f6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	681a      	ldr	r2, [r3, #0]
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba06:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ba16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	e000      	b.n	800ba1e <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800ba1c:	2302      	movs	r3, #2
  }
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	20000058 	.word	0x20000058
 800ba30:	14f8b589 	.word	0x14f8b589
 800ba34:	ffff0000 	.word	0xffff0000

0800ba38 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	60f8      	str	r0, [r7, #12]
 800ba40:	60b9      	str	r1, [r7, #8]
 800ba42:	4613      	mov	r3, r2
 800ba44:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	d158      	bne.n	800bb04 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <HAL_I2C_Slave_Transmit_IT+0x26>
 800ba58:	88fb      	ldrh	r3, [r7, #6]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d101      	bne.n	800ba62 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	e051      	b.n	800bb06 <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d101      	bne.n	800ba70 <HAL_I2C_Slave_Transmit_IT+0x38>
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	e04a      	b.n	800bb06 <HAL_I2C_Slave_Transmit_IT+0xce>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2201      	movs	r2, #1
 800ba74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d007      	beq.n	800ba96 <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f042 0201 	orr.w	r2, r2, #1
 800ba94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800baa4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2221      	movs	r2, #33	; 0x21
 800baaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	68ba      	ldr	r2, [r7, #8]
 800bac0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	88fa      	ldrh	r2, [r7, #6]
 800bac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bacc:	b29a      	uxth	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4a0f      	ldr	r2, [pc, #60]	; (800bb14 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800bad6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bae6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bafe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800bb00:	2300      	movs	r3, #0
 800bb02:	e000      	b.n	800bb06 <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800bb04:	2302      	movs	r3, #2
  }
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	ffff0000 	.word	0xffff0000

0800bb18 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	4613      	mov	r3, r2
 800bb24:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d158      	bne.n	800bbe4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <HAL_I2C_Slave_Receive_IT+0x26>
 800bb38:	88fb      	ldrh	r3, [r7, #6]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d101      	bne.n	800bb42 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e051      	b.n	800bbe6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <HAL_I2C_Slave_Receive_IT+0x38>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e04a      	b.n	800bbe6 <HAL_I2C_Slave_Receive_IT+0xce>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0301 	and.w	r3, r3, #1
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d007      	beq.n	800bb76 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f042 0201 	orr.w	r2, r2, #1
 800bb74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	681a      	ldr	r2, [r3, #0]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb84:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2222      	movs	r2, #34	; 0x22
 800bb8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2220      	movs	r2, #32
 800bb92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	68ba      	ldr	r2, [r7, #8]
 800bba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	88fa      	ldrh	r2, [r7, #6]
 800bba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4a0f      	ldr	r2, [pc, #60]	; (800bbf4 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800bbb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	681a      	ldr	r2, [r3, #0]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bbc6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	685a      	ldr	r2, [r3, #4]
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bbde:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	e000      	b.n	800bbe6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800bbe4:	2302      	movs	r3, #2
  }
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	ffff0000 	.word	0xffff0000

0800bbf8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	607a      	str	r2, [r7, #4]
 800bc02:	461a      	mov	r2, r3
 800bc04:	460b      	mov	r3, r1
 800bc06:	817b      	strh	r3, [r7, #10]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc16:	b2db      	uxtb	r3, r3
 800bc18:	2b20      	cmp	r3, #32
 800bc1a:	f040 810d 	bne.w	800be38 <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bc1e:	4b89      	ldr	r3, [pc, #548]	; (800be44 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	08db      	lsrs	r3, r3, #3
 800bc24:	4a88      	ldr	r2, [pc, #544]	; (800be48 <HAL_I2C_Master_Transmit_DMA+0x250>)
 800bc26:	fba2 2303 	umull	r2, r3, r2, r3
 800bc2a:	0a1a      	lsrs	r2, r3, #8
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009a      	lsls	r2, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d116      	bne.n	800bc72 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2220      	movs	r2, #32
 800bc4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	f043 0220 	orr.w	r2, r3, #32
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bc6e:	2301      	movs	r3, #1
 800bc70:	e0e3      	b.n	800be3a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	f003 0302 	and.w	r3, r3, #2
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d0db      	beq.n	800bc38 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d101      	bne.n	800bc8e <HAL_I2C_Master_Transmit_DMA+0x96>
 800bc8a:	2302      	movs	r3, #2
 800bc8c:	e0d5      	b.n	800be3a <HAL_I2C_Master_Transmit_DMA+0x242>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d007      	beq.n	800bcb4 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f042 0201 	orr.w	r2, r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2221      	movs	r2, #33	; 0x21
 800bcc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2210      	movs	r2, #16
 800bcd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	893a      	ldrh	r2, [r7, #8]
 800bce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4a56      	ldr	r2, [pc, #344]	; (800be4c <HAL_I2C_Master_Transmit_DMA+0x254>)
 800bcf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bcf6:	897a      	ldrh	r2, [r7, #10]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d07b      	beq.n	800bdfc <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d02a      	beq.n	800bd62 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd10:	4a4f      	ldr	r2, [pc, #316]	; (800be50 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800bd12:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd18:	4a4e      	ldr	r2, [pc, #312]	; (800be54 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800bd1a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd20:	2200      	movs	r2, #0
 800bd22:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd28:	2200      	movs	r2, #0
 800bd2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd30:	2200      	movs	r2, #0
 800bd32:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd38:	2200      	movs	r2, #0
 800bd3a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd44:	4619      	mov	r1, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3310      	adds	r3, #16
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd52:	f7fb fc3a 	bl	80075ca <HAL_DMA_Start_IT>
 800bd56:	4603      	mov	r3, r0
 800bd58:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bd5a:	7dfb      	ldrb	r3, [r7, #23]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d139      	bne.n	800bdd4 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800bd60:	e013      	b.n	800bd8a <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e057      	b.n	800be3a <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800bda0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb0:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bdc0:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	681a      	ldr	r2, [r3, #0]
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	e02f      	b.n	800be34 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2220      	movs	r2, #32
 800bdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bde8:	f043 0210 	orr.w	r2, r3, #16
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e01e      	b.n	800be3a <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be0a:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be1a:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800be32:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800be34:	2300      	movs	r3, #0
 800be36:	e000      	b.n	800be3a <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800be38:	2302      	movs	r3, #2
  }
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3718      	adds	r7, #24
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	20000058 	.word	0x20000058
 800be48:	14f8b589 	.word	0x14f8b589
 800be4c:	ffff0000 	.word	0xffff0000
 800be50:	080104fd 	.word	0x080104fd
 800be54:	080106a7 	.word	0x080106a7

0800be58 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b086      	sub	sp, #24
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	607a      	str	r2, [r7, #4]
 800be62:	461a      	mov	r2, r3
 800be64:	460b      	mov	r3, r1
 800be66:	817b      	strh	r3, [r7, #10]
 800be68:	4613      	mov	r3, r2
 800be6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800be6c:	2300      	movs	r3, #0
 800be6e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be76:	b2db      	uxtb	r3, r3
 800be78:	2b20      	cmp	r3, #32
 800be7a:	f040 810d 	bne.w	800c098 <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800be7e:	4b89      	ldr	r3, [pc, #548]	; (800c0a4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	08db      	lsrs	r3, r3, #3
 800be84:	4a88      	ldr	r2, [pc, #544]	; (800c0a8 <HAL_I2C_Master_Receive_DMA+0x250>)
 800be86:	fba2 2303 	umull	r2, r3, r2, r3
 800be8a:	0a1a      	lsrs	r2, r3, #8
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	009a      	lsls	r2, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	3b01      	subs	r3, #1
 800be9c:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d116      	bne.n	800bed2 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	2200      	movs	r2, #0
 800bea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2220      	movs	r2, #32
 800beae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebe:	f043 0220 	orr.w	r2, r3, #32
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e0e3      	b.n	800c09a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	f003 0302 	and.w	r3, r3, #2
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d0db      	beq.n	800be98 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d101      	bne.n	800beee <HAL_I2C_Master_Receive_DMA+0x96>
 800beea:	2302      	movs	r3, #2
 800beec:	e0d5      	b.n	800c09a <HAL_I2C_Master_Receive_DMA+0x242>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d007      	beq.n	800bf14 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	681a      	ldr	r2, [r3, #0]
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f042 0201 	orr.w	r2, r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	681a      	ldr	r2, [r3, #0]
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2222      	movs	r2, #34	; 0x22
 800bf28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2210      	movs	r2, #16
 800bf30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	893a      	ldrh	r2, [r7, #8]
 800bf44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf4a:	b29a      	uxth	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	4a56      	ldr	r2, [pc, #344]	; (800c0ac <HAL_I2C_Master_Receive_DMA+0x254>)
 800bf54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bf56:	897a      	ldrh	r2, [r7, #10]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d07b      	beq.n	800c05c <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d02a      	beq.n	800bfc2 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf70:	4a4f      	ldr	r2, [pc, #316]	; (800c0b0 <HAL_I2C_Master_Receive_DMA+0x258>)
 800bf72:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf78:	4a4e      	ldr	r2, [pc, #312]	; (800c0b4 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800bf7a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf80:	2200      	movs	r2, #0
 800bf82:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf88:	2200      	movs	r2, #0
 800bf8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	2200      	movs	r2, #0
 800bf92:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf98:	2200      	movs	r2, #0
 800bf9a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	3310      	adds	r3, #16
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	461a      	mov	r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bfb2:	f7fb fb0a 	bl	80075ca <HAL_DMA_Start_IT>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800bfba:	7dfb      	ldrb	r3, [r7, #23]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d139      	bne.n	800c034 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800bfc0:	e013      	b.n	800bfea <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e057      	b.n	800c09a <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bff8:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c008:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c020:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	685a      	ldr	r2, [r3, #4]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	e02f      	b.n	800c094 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2220      	movs	r2, #32
 800c038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c048:	f043 0210 	orr.w	r2, r3, #16
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	e01e      	b.n	800c09a <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	685a      	ldr	r2, [r3, #4]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c072:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c082:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c092:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c094:	2300      	movs	r3, #0
 800c096:	e000      	b.n	800c09a <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c098:	2302      	movs	r3, #2
  }
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	20000058 	.word	0x20000058
 800c0a8:	14f8b589 	.word	0x14f8b589
 800c0ac:	ffff0000 	.word	0xffff0000
 800c0b0:	080104fd 	.word	0x080104fd
 800c0b4:	080106a7 	.word	0x080106a7

0800c0b8 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b086      	sub	sp, #24
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0cc:	b2db      	uxtb	r3, r3
 800c0ce:	2b20      	cmp	r3, #32
 800c0d0:	f040 80b8 	bne.w	800c244 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c0da:	88fb      	ldrh	r3, [r7, #6]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e0b0      	b.n	800c246 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d101      	bne.n	800c0f2 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c0ee:	2302      	movs	r3, #2
 800c0f0:	e0a9      	b.n	800c246 <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0301 	and.w	r3, r3, #1
 800c104:	2b01      	cmp	r3, #1
 800c106:	d007      	beq.n	800c118 <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f042 0201 	orr.w	r2, r2, #1
 800c116:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c126:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2221      	movs	r2, #33	; 0x21
 800c12c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2220      	movs	r2, #32
 800c134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	88fa      	ldrh	r2, [r7, #6]
 800c148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c14e:	b29a      	uxth	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4a3e      	ldr	r2, [pc, #248]	; (800c250 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c158:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d02a      	beq.n	800c1b8 <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c166:	4a3b      	ldr	r2, [pc, #236]	; (800c254 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c168:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16e:	4a3a      	ldr	r2, [pc, #232]	; (800c258 <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c170:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c176:	2200      	movs	r2, #0
 800c178:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c17e:	2200      	movs	r2, #0
 800c180:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c186:	2200      	movs	r2, #0
 800c188:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c18e:	2200      	movs	r2, #0
 800c190:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c19a:	4619      	mov	r1, r3
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3310      	adds	r3, #16
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1a8:	f7fb fa0f 	bl	80075ca <HAL_DMA_Start_IT>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c1b0:	7dfb      	ldrb	r3, [r7, #23]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d132      	bne.n	800c21c <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c1b6:	e013      	b.n	800c1e0 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	2228      	movs	r2, #40	; 0x28
 800c1bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	e032      	b.n	800c246 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	681a      	ldr	r2, [r3, #0]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c1ee:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	685a      	ldr	r2, [r3, #4]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c206:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	685a      	ldr	r2, [r3, #4]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c216:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c218:	2300      	movs	r3, #0
 800c21a:	e014      	b.n	800c246 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2220      	movs	r2, #32
 800c220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	f043 0210 	orr.w	r2, r3, #16
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c240:	2301      	movs	r3, #1
 800c242:	e000      	b.n	800c246 <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c244:	2302      	movs	r3, #2
  }
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	ffff0000 	.word	0xffff0000
 800c254:	080104fd 	.word	0x080104fd
 800c258:	080106a7 	.word	0x080106a7

0800c25c <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b086      	sub	sp, #24
 800c260:	af00      	add	r7, sp, #0
 800c262:	60f8      	str	r0, [r7, #12]
 800c264:	60b9      	str	r1, [r7, #8]
 800c266:	4613      	mov	r3, r2
 800c268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c270:	b2db      	uxtb	r3, r3
 800c272:	2b20      	cmp	r3, #32
 800c274:	f040 80b8 	bne.w	800c3e8 <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c27e:	88fb      	ldrh	r3, [r7, #6]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	e0b0      	b.n	800c3ea <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d101      	bne.n	800c296 <HAL_I2C_Slave_Receive_DMA+0x3a>
 800c292:	2302      	movs	r3, #2
 800c294:	e0a9      	b.n	800c3ea <HAL_I2C_Slave_Receive_DMA+0x18e>
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0301 	and.w	r3, r3, #1
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d007      	beq.n	800c2bc <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f042 0201 	orr.w	r2, r2, #1
 800c2ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c2ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2222      	movs	r2, #34	; 0x22
 800c2d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	88fa      	ldrh	r2, [r7, #6]
 800c2ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c2f2:	b29a      	uxth	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4a3e      	ldr	r2, [pc, #248]	; (800c3f4 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800c2fc:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c302:	2b00      	cmp	r3, #0
 800c304:	d02a      	beq.n	800c35c <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30a:	4a3b      	ldr	r2, [pc, #236]	; (800c3f8 <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800c30c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c312:	4a3a      	ldr	r2, [pc, #232]	; (800c3fc <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800c314:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	2200      	movs	r2, #0
 800c31c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c322:	2200      	movs	r2, #0
 800c324:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c32a:	2200      	movs	r2, #0
 800c32c:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	2200      	movs	r2, #0
 800c334:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	3310      	adds	r3, #16
 800c340:	4619      	mov	r1, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c346:	461a      	mov	r2, r3
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c34c:	f7fb f93d 	bl	80075ca <HAL_DMA_Start_IT>
 800c350:	4603      	mov	r3, r0
 800c352:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c354:	7dfb      	ldrb	r3, [r7, #23]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d132      	bne.n	800c3c0 <HAL_I2C_Slave_Receive_DMA+0x164>
 800c35a:	e013      	b.n	800c384 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2228      	movs	r2, #40	; 0x28
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2200      	movs	r2, #0
 800c368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c370:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e032      	b.n	800c3ea <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c392:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2200      	movs	r2, #0
 800c398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	685a      	ldr	r2, [r3, #4]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c3aa:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ba:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	e014      	b.n	800c3ea <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2220      	movs	r2, #32
 800c3c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3d4:	f043 0210 	orr.w	r2, r3, #16
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e000      	b.n	800c3ea <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c3e8:	2302      	movs	r3, #2
  }
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	ffff0000 	.word	0xffff0000
 800c3f8:	080104fd 	.word	0x080104fd
 800c3fc:	080106a7 	.word	0x080106a7

0800c400 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b088      	sub	sp, #32
 800c404:	af02      	add	r7, sp, #8
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	4608      	mov	r0, r1
 800c40a:	4611      	mov	r1, r2
 800c40c:	461a      	mov	r2, r3
 800c40e:	4603      	mov	r3, r0
 800c410:	817b      	strh	r3, [r7, #10]
 800c412:	460b      	mov	r3, r1
 800c414:	813b      	strh	r3, [r7, #8]
 800c416:	4613      	mov	r3, r2
 800c418:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c41a:	f7f9 fe6d 	bl	80060f8 <HAL_GetTick>
 800c41e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b20      	cmp	r3, #32
 800c42a:	f040 80d9 	bne.w	800c5e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	2319      	movs	r3, #25
 800c434:	2201      	movs	r2, #1
 800c436:	496d      	ldr	r1, [pc, #436]	; (800c5ec <HAL_I2C_Mem_Write+0x1ec>)
 800c438:	68f8      	ldr	r0, [r7, #12]
 800c43a:	f004 fa19 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800c43e:	4603      	mov	r3, r0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d001      	beq.n	800c448 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c444:	2302      	movs	r3, #2
 800c446:	e0cc      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c44e:	2b01      	cmp	r3, #1
 800c450:	d101      	bne.n	800c456 <HAL_I2C_Mem_Write+0x56>
 800c452:	2302      	movs	r3, #2
 800c454:	e0c5      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	2201      	movs	r2, #1
 800c45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0301 	and.w	r3, r3, #1
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d007      	beq.n	800c47c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f042 0201 	orr.w	r2, r2, #1
 800c47a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c48a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	2221      	movs	r2, #33	; 0x21
 800c490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2240      	movs	r2, #64	; 0x40
 800c498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	6a3a      	ldr	r2, [r7, #32]
 800c4a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	4a4d      	ldr	r2, [pc, #308]	; (800c5f0 <HAL_I2C_Mem_Write+0x1f0>)
 800c4bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c4be:	88f8      	ldrh	r0, [r7, #6]
 800c4c0:	893a      	ldrh	r2, [r7, #8]
 800c4c2:	8979      	ldrh	r1, [r7, #10]
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	9300      	str	r3, [sp, #0]
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f003 fe96 	bl	8010200 <I2C_RequestMemoryWrite>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d052      	beq.n	800c580 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e081      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f004 fa9a 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00d      	beq.n	800c50a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f2:	2b04      	cmp	r3, #4
 800c4f4:	d107      	bne.n	800c506 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e06b      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c50e:	781a      	ldrb	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c51a:	1c5a      	adds	r2, r3, #1
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c524:	3b01      	subs	r3, #1
 800c526:	b29a      	uxth	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c530:	b29b      	uxth	r3, r3
 800c532:	3b01      	subs	r3, #1
 800c534:	b29a      	uxth	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	f003 0304 	and.w	r3, r3, #4
 800c544:	2b04      	cmp	r3, #4
 800c546:	d11b      	bne.n	800c580 <HAL_I2C_Mem_Write+0x180>
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d017      	beq.n	800c580 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c554:	781a      	ldrb	r2, [r3, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c560:	1c5a      	adds	r2, r3, #1
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c56a:	3b01      	subs	r3, #1
 800c56c:	b29a      	uxth	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c576:	b29b      	uxth	r3, r3
 800c578:	3b01      	subs	r3, #1
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1aa      	bne.n	800c4de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c58c:	68f8      	ldr	r0, [r7, #12]
 800c58e:	f004 fa86 	bl	8010a9e <I2C_WaitOnBTFFlagUntilTimeout>
 800c592:	4603      	mov	r3, r0
 800c594:	2b00      	cmp	r3, #0
 800c596:	d00d      	beq.n	800c5b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c59c:	2b04      	cmp	r3, #4
 800c59e:	d107      	bne.n	800c5b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e016      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c5c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e000      	b.n	800c5e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800c5e0:	2302      	movs	r3, #2
  }
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	00100002 	.word	0x00100002
 800c5f0:	ffff0000 	.word	0xffff0000

0800c5f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08c      	sub	sp, #48	; 0x30
 800c5f8:	af02      	add	r7, sp, #8
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	461a      	mov	r2, r3
 800c602:	4603      	mov	r3, r0
 800c604:	817b      	strh	r3, [r7, #10]
 800c606:	460b      	mov	r3, r1
 800c608:	813b      	strh	r3, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c60e:	f7f9 fd73 	bl	80060f8 <HAL_GetTick>
 800c612:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	2b20      	cmp	r3, #32
 800c61e:	f040 8208 	bne.w	800ca32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	2319      	movs	r3, #25
 800c628:	2201      	movs	r2, #1
 800c62a:	497b      	ldr	r1, [pc, #492]	; (800c818 <HAL_I2C_Mem_Read+0x224>)
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f004 f91f 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800c638:	2302      	movs	r3, #2
 800c63a:	e1fb      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c642:	2b01      	cmp	r3, #1
 800c644:	d101      	bne.n	800c64a <HAL_I2C_Mem_Read+0x56>
 800c646:	2302      	movs	r3, #2
 800c648:	e1f4      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d007      	beq.n	800c670 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f042 0201 	orr.w	r2, r2, #1
 800c66e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c67e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	2222      	movs	r2, #34	; 0x22
 800c684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2240      	movs	r2, #64	; 0x40
 800c68c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800c6a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4a5b      	ldr	r2, [pc, #364]	; (800c81c <HAL_I2C_Mem_Read+0x228>)
 800c6b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c6b2:	88f8      	ldrh	r0, [r7, #6]
 800c6b4:	893a      	ldrh	r2, [r7, #8]
 800c6b6:	8979      	ldrh	r1, [r7, #10]
 800c6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ba:	9301      	str	r3, [sp, #4]
 800c6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6be:	9300      	str	r3, [sp, #0]
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f003 fe32 	bl	801032c <I2C_RequestMemoryRead>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e1b0      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d113      	bne.n	800c702 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c6da:	2300      	movs	r3, #0
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	617b      	str	r3, [r7, #20]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	699b      	ldr	r3, [r3, #24]
 800c6ec:	617b      	str	r3, [r7, #20]
 800c6ee:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	e184      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c706:	2b01      	cmp	r3, #1
 800c708:	d11b      	bne.n	800c742 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	681a      	ldr	r2, [r3, #0]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c718:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c71a:	2300      	movs	r3, #0
 800c71c:	61bb      	str	r3, [r7, #24]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	61bb      	str	r3, [r7, #24]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	699b      	ldr	r3, [r3, #24]
 800c72c:	61bb      	str	r3, [r7, #24]
 800c72e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c73e:	601a      	str	r2, [r3, #0]
 800c740:	e164      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c746:	2b02      	cmp	r3, #2
 800c748:	d11b      	bne.n	800c782 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	681a      	ldr	r2, [r3, #0]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c758:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c768:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c76a:	2300      	movs	r3, #0
 800c76c:	61fb      	str	r3, [r7, #28]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	695b      	ldr	r3, [r3, #20]
 800c774:	61fb      	str	r3, [r7, #28]
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	699b      	ldr	r3, [r3, #24]
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	e144      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c782:	2300      	movs	r3, #0
 800c784:	623b      	str	r3, [r7, #32]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	695b      	ldr	r3, [r3, #20]
 800c78c:	623b      	str	r3, [r7, #32]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	699b      	ldr	r3, [r3, #24]
 800c794:	623b      	str	r3, [r7, #32]
 800c796:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800c798:	e138      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	f200 80f1 	bhi.w	800c986 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d123      	bne.n	800c7f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c7ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f004 fa25 	bl	8010c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e139      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	691a      	ldr	r2, [r3, #16]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ca:	b2d2      	uxtb	r2, r2
 800c7cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d2:	1c5a      	adds	r2, r3, #1
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7dc:	3b01      	subs	r3, #1
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c7f2:	e10b      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d14e      	bne.n	800c89a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	2200      	movs	r2, #0
 800c804:	4906      	ldr	r1, [pc, #24]	; (800c820 <HAL_I2C_Mem_Read+0x22c>)
 800c806:	68f8      	ldr	r0, [r7, #12]
 800c808:	f004 f832 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d008      	beq.n	800c824 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e10e      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
 800c816:	bf00      	nop
 800c818:	00100002 	.word	0x00100002
 800c81c:	ffff0000 	.word	0xffff0000
 800c820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	691a      	ldr	r2, [r3, #16]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c83e:	b2d2      	uxtb	r2, r2
 800c840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c846:	1c5a      	adds	r2, r3, #1
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c850:	3b01      	subs	r3, #1
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	3b01      	subs	r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	691a      	ldr	r2, [r3, #16]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	b2d2      	uxtb	r2, r2
 800c872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c878:	1c5a      	adds	r2, r3, #1
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c882:	3b01      	subs	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c88e:	b29b      	uxth	r3, r3
 800c890:	3b01      	subs	r3, #1
 800c892:	b29a      	uxth	r2, r3
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c898:	e0b8      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	4966      	ldr	r1, [pc, #408]	; (800ca3c <HAL_I2C_Mem_Read+0x448>)
 800c8a4:	68f8      	ldr	r0, [r7, #12]
 800c8a6:	f003 ffe3 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d001      	beq.n	800c8b4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e0bf      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	691a      	ldr	r2, [r3, #16]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ce:	b2d2      	uxtb	r2, r2
 800c8d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c8e0:	3b01      	subs	r3, #1
 800c8e2:	b29a      	uxth	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	494f      	ldr	r1, [pc, #316]	; (800ca3c <HAL_I2C_Mem_Read+0x448>)
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f003 ffb5 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d001      	beq.n	800c910 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	e091      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c91e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	691a      	ldr	r2, [r3, #16]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92a:	b2d2      	uxtb	r2, r2
 800c92c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c932:	1c5a      	adds	r2, r3, #1
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c93c:	3b01      	subs	r3, #1
 800c93e:	b29a      	uxth	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c948:	b29b      	uxth	r3, r3
 800c94a:	3b01      	subs	r3, #1
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	691a      	ldr	r2, [r3, #16]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	b2d2      	uxtb	r2, r2
 800c95e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c96e:	3b01      	subs	r3, #1
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	3b01      	subs	r3, #1
 800c97e:	b29a      	uxth	r2, r3
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c984:	e042      	b.n	800ca0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c988:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f004 f938 	bl	8010c00 <I2C_WaitOnRXNEFlagUntilTimeout>
 800c990:	4603      	mov	r3, r0
 800c992:	2b00      	cmp	r3, #0
 800c994:	d001      	beq.n	800c99a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800c996:	2301      	movs	r3, #1
 800c998:	e04c      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	691a      	ldr	r2, [r3, #16]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	b2d2      	uxtb	r2, r2
 800c9a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ac:	1c5a      	adds	r2, r3, #1
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	695b      	ldr	r3, [r3, #20]
 800c9d2:	f003 0304 	and.w	r3, r3, #4
 800c9d6:	2b04      	cmp	r3, #4
 800c9d8:	d118      	bne.n	800ca0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	691a      	ldr	r2, [r3, #16]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e4:	b2d2      	uxtb	r2, r2
 800c9e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ec:	1c5a      	adds	r2, r3, #1
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	3b01      	subs	r3, #1
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f47f aec2 	bne.w	800c79a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e000      	b.n	800ca34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800ca32:	2302      	movs	r3, #2
  }
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3728      	adds	r7, #40	; 0x28
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	00010004 	.word	0x00010004

0800ca40 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b087      	sub	sp, #28
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	4608      	mov	r0, r1
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	4603      	mov	r3, r0
 800ca50:	817b      	strh	r3, [r7, #10]
 800ca52:	460b      	mov	r3, r1
 800ca54:	813b      	strh	r3, [r7, #8]
 800ca56:	4613      	mov	r3, r2
 800ca58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b20      	cmp	r3, #32
 800ca68:	f040 808e 	bne.w	800cb88 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800ca6c:	4b4a      	ldr	r3, [pc, #296]	; (800cb98 <HAL_I2C_Mem_Write_IT+0x158>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	08db      	lsrs	r3, r3, #3
 800ca72:	4a4a      	ldr	r2, [pc, #296]	; (800cb9c <HAL_I2C_Mem_Write_IT+0x15c>)
 800ca74:	fba2 2303 	umull	r2, r3, r2, r3
 800ca78:	0a1a      	lsrs	r2, r3, #8
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009a      	lsls	r2, r3, #2
 800ca82:	4413      	add	r3, r2
 800ca84:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d116      	bne.n	800cac0 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2220      	movs	r2, #32
 800ca9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caac:	f043 0220 	orr.w	r2, r3, #32
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e064      	b.n	800cb8a <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	2b02      	cmp	r3, #2
 800cacc:	d0db      	beq.n	800ca86 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d101      	bne.n	800cadc <HAL_I2C_Mem_Write_IT+0x9c>
 800cad8:	2302      	movs	r3, #2
 800cada:	e056      	b.n	800cb8a <HAL_I2C_Mem_Write_IT+0x14a>
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2201      	movs	r2, #1
 800cae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d007      	beq.n	800cb02 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f042 0201 	orr.w	r2, r2, #1
 800cb00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb10:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2221      	movs	r2, #33	; 0x21
 800cb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2240      	movs	r2, #64	; 0x40
 800cb1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6a3a      	ldr	r2, [r7, #32]
 800cb2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cb32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4a17      	ldr	r2, [pc, #92]	; (800cba0 <HAL_I2C_Mem_Write_IT+0x160>)
 800cb42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cb44:	897a      	ldrh	r2, [r7, #10]
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800cb4a:	893a      	ldrh	r2, [r7, #8]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800cb50:	88fa      	ldrh	r2, [r7, #6]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cb6a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800cb82:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800cb88:	2302      	movs	r3, #2
  }
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	371c      	adds	r7, #28
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr
 800cb96:	bf00      	nop
 800cb98:	20000058 	.word	0x20000058
 800cb9c:	14f8b589 	.word	0x14f8b589
 800cba0:	ffff0000 	.word	0xffff0000

0800cba4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b087      	sub	sp, #28
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	60f8      	str	r0, [r7, #12]
 800cbac:	4608      	mov	r0, r1
 800cbae:	4611      	mov	r1, r2
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	817b      	strh	r3, [r7, #10]
 800cbb6:	460b      	mov	r3, r1
 800cbb8:	813b      	strh	r3, [r7, #8]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b20      	cmp	r3, #32
 800cbcc:	f040 809a 	bne.w	800cd04 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cbd0:	4b50      	ldr	r3, [pc, #320]	; (800cd14 <HAL_I2C_Mem_Read_IT+0x170>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	08db      	lsrs	r3, r3, #3
 800cbd6:	4a50      	ldr	r2, [pc, #320]	; (800cd18 <HAL_I2C_Mem_Read_IT+0x174>)
 800cbd8:	fba2 2303 	umull	r2, r3, r2, r3
 800cbdc:	0a1a      	lsrs	r2, r3, #8
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009a      	lsls	r2, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	3b01      	subs	r3, #1
 800cbee:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d116      	bne.n	800cc24 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2220      	movs	r2, #32
 800cc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	f043 0220 	orr.w	r2, r3, #32
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e070      	b.n	800cd06 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	f003 0302 	and.w	r3, r3, #2
 800cc2e:	2b02      	cmp	r3, #2
 800cc30:	d0db      	beq.n	800cbea <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d101      	bne.n	800cc40 <HAL_I2C_Mem_Read_IT+0x9c>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	e062      	b.n	800cd06 <HAL_I2C_Mem_Read_IT+0x162>
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f003 0301 	and.w	r3, r3, #1
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d007      	beq.n	800cc66 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f042 0201 	orr.w	r2, r2, #1
 800cc64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cc74:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2222      	movs	r2, #34	; 0x22
 800cc7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2240      	movs	r2, #64	; 0x40
 800cc82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6a3a      	ldr	r2, [r7, #32]
 800cc90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cc96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4a1d      	ldr	r2, [pc, #116]	; (800cd1c <HAL_I2C_Mem_Read_IT+0x178>)
 800cca6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800cca8:	897a      	ldrh	r2, [r7, #10]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800ccae:	893a      	ldrh	r2, [r7, #8]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800ccb4:	88fa      	ldrh	r2, [r7, #6]
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	681a      	ldr	r2, [r3, #0]
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ccce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	681a      	ldr	r2, [r3, #0]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ccde:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d007      	beq.n	800cd00 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	685a      	ldr	r2, [r3, #4]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ccfe:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	e000      	b.n	800cd06 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800cd04:	2302      	movs	r3, #2
  }
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	371c      	adds	r7, #28
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr
 800cd12:	bf00      	nop
 800cd14:	20000058 	.word	0x20000058
 800cd18:	14f8b589 	.word	0x14f8b589
 800cd1c:	ffff0000 	.word	0xffff0000

0800cd20 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08a      	sub	sp, #40	; 0x28
 800cd24:	af02      	add	r7, sp, #8
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	4608      	mov	r0, r1
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4603      	mov	r3, r0
 800cd30:	817b      	strh	r3, [r7, #10]
 800cd32:	460b      	mov	r3, r1
 800cd34:	813b      	strh	r3, [r7, #8]
 800cd36:	4613      	mov	r3, r2
 800cd38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cd3e:	f7f9 f9db 	bl	80060f8 <HAL_GetTick>
 800cd42:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b20      	cmp	r3, #32
 800cd4e:	f040 8145 	bne.w	800cfdc <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cd52:	4b9d      	ldr	r3, [pc, #628]	; (800cfc8 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	08db      	lsrs	r3, r3, #3
 800cd58:	4a9c      	ldr	r2, [pc, #624]	; (800cfcc <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800cd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd5e:	0a1a      	lsrs	r2, r3, #8
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	009a      	lsls	r2, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d116      	bne.n	800cda6 <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2220      	movs	r2, #32
 800cd82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd92:	f043 0220 	orr.w	r2, r3, #32
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	e11b      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	699b      	ldr	r3, [r3, #24]
 800cdac:	f003 0302 	and.w	r3, r3, #2
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d0db      	beq.n	800cd6c <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdba:	2b01      	cmp	r3, #1
 800cdbc:	d101      	bne.n	800cdc2 <HAL_I2C_Mem_Write_DMA+0xa2>
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	e10d      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d007      	beq.n	800cde8 <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f042 0201 	orr.w	r2, r2, #1
 800cde6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cdf6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2221      	movs	r2, #33	; 0x21
 800cdfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2240      	movs	r2, #64	; 0x40
 800ce04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ce18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	4a6a      	ldr	r2, [pc, #424]	; (800cfd0 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800ce28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800ce2a:	897a      	ldrh	r2, [r7, #10]
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800ce30:	893a      	ldrh	r2, [r7, #8]
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800ce36:	88fa      	ldrh	r2, [r7, #6]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 80a9 	beq.w	800cf9e <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d02a      	beq.n	800ceaa <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce58:	4a5e      	ldr	r2, [pc, #376]	; (800cfd4 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800ce5a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce60:	4a5d      	ldr	r2, [pc, #372]	; (800cfd8 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800ce62:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce68:	2200      	movs	r2, #0
 800ce6a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce70:	2200      	movs	r2, #0
 800ce72:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce78:	2200      	movs	r2, #0
 800ce7a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce80:	2200      	movs	r2, #0
 800ce82:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	3310      	adds	r3, #16
 800ce94:	461a      	mov	r2, r3
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce9a:	f7fa fb96 	bl	80075ca <HAL_DMA_Start_IT>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cea2:	7efb      	ldrb	r3, [r7, #27]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d166      	bne.n	800cf76 <HAL_I2C_Mem_Write_DMA+0x256>
 800cea8:	e013      	b.n	800ced2 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2220      	movs	r2, #32
 800ceae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cebe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e085      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800ced2:	88f8      	ldrh	r0, [r7, #6]
 800ced4:	893a      	ldrh	r2, [r7, #8]
 800ced6:	8979      	ldrh	r1, [r7, #10]
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	9301      	str	r3, [sp, #4]
 800cedc:	2323      	movs	r3, #35	; 0x23
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	4603      	mov	r3, r0
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f003 f98c 	bl	8010200 <I2C_RequestMemoryWrite>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d022      	beq.n	800cf34 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fa fc31 	bl	800775a <HAL_DMA_Abort_IT>
 800cef8:	4603      	mov	r3, r0
 800cefa:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf00:	2200      	movs	r2, #0
 800cf02:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681a      	ldr	r2, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf12:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f022 0201 	bic.w	r2, r2, #1
 800cf2e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e054      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cf34:	2300      	movs	r3, #0
 800cf36:	613b      	str	r3, [r7, #16]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	695b      	ldr	r3, [r3, #20]
 800cf3e:	613b      	str	r3, [r7, #16]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	699b      	ldr	r3, [r3, #24]
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	685a      	ldr	r2, [r3, #4]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf60:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	685a      	ldr	r2, [r3, #4]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf70:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800cf72:	2300      	movs	r3, #0
 800cf74:	e033      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8a:	f043 0210 	orr.w	r2, r3, #16
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2200      	movs	r2, #0
 800cf96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cf9a:	2301      	movs	r3, #1
 800cf9c:	e01f      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2220      	movs	r2, #32
 800cfa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e00b      	b.n	800cfde <HAL_I2C_Mem_Write_DMA+0x2be>
 800cfc6:	bf00      	nop
 800cfc8:	20000058 	.word	0x20000058
 800cfcc:	14f8b589 	.word	0x14f8b589
 800cfd0:	ffff0000 	.word	0xffff0000
 800cfd4:	080104fd 	.word	0x080104fd
 800cfd8:	080106a7 	.word	0x080106a7
    }
  }
  else
  {
    return HAL_BUSY;
 800cfdc:	2302      	movs	r3, #2
  }
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3720      	adds	r7, #32
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b08c      	sub	sp, #48	; 0x30
 800cfea:	af02      	add	r7, sp, #8
 800cfec:	60f8      	str	r0, [r7, #12]
 800cfee:	4608      	mov	r0, r1
 800cff0:	4611      	mov	r1, r2
 800cff2:	461a      	mov	r2, r3
 800cff4:	4603      	mov	r3, r0
 800cff6:	817b      	strh	r3, [r7, #10]
 800cff8:	460b      	mov	r3, r1
 800cffa:	813b      	strh	r3, [r7, #8]
 800cffc:	4613      	mov	r3, r2
 800cffe:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d000:	f7f9 f87a 	bl	80060f8 <HAL_GetTick>
 800d004:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d006:	2300      	movs	r3, #0
 800d008:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b20      	cmp	r3, #32
 800d014:	f040 8175 	bne.w	800d302 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d018:	4b94      	ldr	r3, [pc, #592]	; (800d26c <HAL_I2C_Mem_Read_DMA+0x286>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	08db      	lsrs	r3, r3, #3
 800d01e:	4a94      	ldr	r2, [pc, #592]	; (800d270 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d020:	fba2 2303 	umull	r2, r3, r2, r3
 800d024:	0a1a      	lsrs	r2, r3, #8
 800d026:	4613      	mov	r3, r2
 800d028:	009b      	lsls	r3, r3, #2
 800d02a:	4413      	add	r3, r2
 800d02c:	009a      	lsls	r2, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d032:	69fb      	ldr	r3, [r7, #28]
 800d034:	3b01      	subs	r3, #1
 800d036:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d116      	bne.n	800d06c <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2200      	movs	r2, #0
 800d042:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2220      	movs	r2, #32
 800d048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d058:	f043 0220 	orr.w	r2, r3, #32
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e14b      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	699b      	ldr	r3, [r3, #24]
 800d072:	f003 0302 	and.w	r3, r3, #2
 800d076:	2b02      	cmp	r3, #2
 800d078:	d0db      	beq.n	800d032 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d080:	2b01      	cmp	r3, #1
 800d082:	d101      	bne.n	800d088 <HAL_I2C_Mem_Read_DMA+0xa2>
 800d084:	2302      	movs	r3, #2
 800d086:	e13d      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	2201      	movs	r2, #1
 800d08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0301 	and.w	r3, r3, #1
 800d09a:	2b01      	cmp	r3, #1
 800d09c:	d007      	beq.n	800d0ae <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	f042 0201 	orr.w	r2, r2, #1
 800d0ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	681a      	ldr	r2, [r3, #0]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d0bc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2222      	movs	r2, #34	; 0x22
 800d0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	2240      	movs	r2, #64	; 0x40
 800d0ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d0de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	4a61      	ldr	r2, [pc, #388]	; (800d274 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d0ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d0f0:	897a      	ldrh	r2, [r7, #10]
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d0f6:	893a      	ldrh	r2, [r7, #8]
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d0fc:	88fa      	ldrh	r2, [r7, #6]
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	f000 80cb 	beq.w	800d2a8 <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d116:	2b00      	cmp	r3, #0
 800d118:	d02d      	beq.n	800d176 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d11e:	4a56      	ldr	r2, [pc, #344]	; (800d278 <HAL_I2C_Mem_Read_DMA+0x292>)
 800d120:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d126:	4a55      	ldr	r2, [pc, #340]	; (800d27c <HAL_I2C_Mem_Read_DMA+0x296>)
 800d128:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12e:	2200      	movs	r2, #0
 800d130:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d136:	2200      	movs	r2, #0
 800d138:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	2200      	movs	r2, #0
 800d140:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d146:	2200      	movs	r2, #0
 800d148:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3310      	adds	r3, #16
 800d154:	4619      	mov	r1, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15a:	461a      	mov	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d160:	f7fa fa33 	bl	80075ca <HAL_DMA_Start_IT>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d16a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f040 8086 	bne.w	800d280 <HAL_I2C_Mem_Read_DMA+0x29a>
 800d174:	e013      	b.n	800d19e <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	2220      	movs	r2, #32
 800d17a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2200      	movs	r2, #0
 800d182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e0b2      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d19e:	88f8      	ldrh	r0, [r7, #6]
 800d1a0:	893a      	ldrh	r2, [r7, #8]
 800d1a2:	8979      	ldrh	r1, [r7, #10]
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a6:	9301      	str	r3, [sp, #4]
 800d1a8:	2323      	movs	r3, #35	; 0x23
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f003 f8bc 	bl	801032c <I2C_RequestMemoryRead>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d023      	beq.n	800d202 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fa facb 	bl	800775a <HAL_DMA_Abort_IT>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1e0:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	681a      	ldr	r2, [r3, #0]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f022 0201 	bic.w	r2, r2, #1
 800d1fc:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	e080      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d206:	2b01      	cmp	r3, #1
 800d208:	d108      	bne.n	800d21c <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d218:	601a      	str	r2, [r3, #0]
 800d21a:	e007      	b.n	800d22c <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	685a      	ldr	r2, [r3, #4]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d22a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d22c:	2300      	movs	r3, #0
 800d22e:	617b      	str	r3, [r7, #20]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	695b      	ldr	r3, [r3, #20]
 800d236:	617b      	str	r3, [r7, #20]
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	699b      	ldr	r3, [r3, #24]
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	2200      	movs	r2, #0
 800d246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	685a      	ldr	r2, [r3, #4]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d258:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	685a      	ldr	r2, [r3, #4]
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d268:	605a      	str	r2, [r3, #4]
 800d26a:	e048      	b.n	800d2fe <HAL_I2C_Mem_Read_DMA+0x318>
 800d26c:	20000058 	.word	0x20000058
 800d270:	14f8b589 	.word	0x14f8b589
 800d274:	ffff0000 	.word	0xffff0000
 800d278:	080104fd 	.word	0x080104fd
 800d27c:	080106a7 	.word	0x080106a7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2220      	movs	r2, #32
 800d284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d294:	f043 0210 	orr.w	r2, r3, #16
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	e02d      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d2a8:	88f8      	ldrh	r0, [r7, #6]
 800d2aa:	893a      	ldrh	r2, [r7, #8]
 800d2ac:	8979      	ldrh	r1, [r7, #10]
 800d2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b0:	9301      	str	r3, [sp, #4]
 800d2b2:	2323      	movs	r3, #35	; 0x23
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f003 f837 	bl	801032c <I2C_RequestMemoryRead>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e01d      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	61bb      	str	r3, [r7, #24]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	61bb      	str	r3, [r7, #24]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	699b      	ldr	r3, [r3, #24]
 800d2da:	61bb      	str	r3, [r7, #24]
 800d2dc:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	681a      	ldr	r2, [r3, #0]
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d2ec:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	2220      	movs	r2, #32
 800d2f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	e000      	b.n	800d304 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800d302:	2302      	movs	r3, #2
  }
}
 800d304:	4618      	mov	r0, r3
 800d306:	3728      	adds	r7, #40	; 0x28
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b08a      	sub	sp, #40	; 0x28
 800d310:	af02      	add	r7, sp, #8
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	607a      	str	r2, [r7, #4]
 800d316:	603b      	str	r3, [r7, #0]
 800d318:	460b      	mov	r3, r1
 800d31a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800d31c:	f7f8 feec 	bl	80060f8 <HAL_GetTick>
 800d320:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800d322:	2301      	movs	r3, #1
 800d324:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b20      	cmp	r3, #32
 800d330:	f040 8111 	bne.w	800d556 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	2319      	movs	r3, #25
 800d33a:	2201      	movs	r2, #1
 800d33c:	4988      	ldr	r1, [pc, #544]	; (800d560 <HAL_I2C_IsDeviceReady+0x254>)
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f003 fa96 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d34a:	2302      	movs	r3, #2
 800d34c:	e104      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d354:	2b01      	cmp	r3, #1
 800d356:	d101      	bne.n	800d35c <HAL_I2C_IsDeviceReady+0x50>
 800d358:	2302      	movs	r3, #2
 800d35a:	e0fd      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0301 	and.w	r3, r3, #1
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d007      	beq.n	800d382 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f042 0201 	orr.w	r2, r2, #1
 800d380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2224      	movs	r2, #36	; 0x24
 800d396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4a70      	ldr	r2, [pc, #448]	; (800d564 <HAL_I2C_IsDeviceReady+0x258>)
 800d3a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d3b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	f003 fa54 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00d      	beq.n	800d3ea <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3dc:	d103      	bne.n	800d3e6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3e4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e0b6      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d3ea:	897b      	ldrh	r3, [r7, #10]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d3f8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800d3fa:	f7f8 fe7d 	bl	80060f8 <HAL_GetTick>
 800d3fe:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	695b      	ldr	r3, [r3, #20]
 800d406:	f003 0302 	and.w	r3, r3, #2
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	bf0c      	ite	eq
 800d40e:	2301      	moveq	r3, #1
 800d410:	2300      	movne	r3, #0
 800d412:	b2db      	uxtb	r3, r3
 800d414:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	695b      	ldr	r3, [r3, #20]
 800d41c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d424:	bf0c      	ite	eq
 800d426:	2301      	moveq	r3, #1
 800d428:	2300      	movne	r3, #0
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d42e:	e025      	b.n	800d47c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d430:	f7f8 fe62 	bl	80060f8 <HAL_GetTick>
 800d434:	4602      	mov	r2, r0
 800d436:	69fb      	ldr	r3, [r7, #28]
 800d438:	1ad3      	subs	r3, r2, r3
 800d43a:	683a      	ldr	r2, [r7, #0]
 800d43c:	429a      	cmp	r2, r3
 800d43e:	d302      	bcc.n	800d446 <HAL_I2C_IsDeviceReady+0x13a>
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d103      	bne.n	800d44e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	22a0      	movs	r2, #160	; 0xa0
 800d44a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	695b      	ldr	r3, [r3, #20]
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b02      	cmp	r3, #2
 800d45a:	bf0c      	ite	eq
 800d45c:	2301      	moveq	r3, #1
 800d45e:	2300      	movne	r3, #0
 800d460:	b2db      	uxtb	r3, r3
 800d462:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	695b      	ldr	r3, [r3, #20]
 800d46a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d46e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d472:	bf0c      	ite	eq
 800d474:	2301      	moveq	r3, #1
 800d476:	2300      	movne	r3, #0
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d482:	b2db      	uxtb	r3, r3
 800d484:	2ba0      	cmp	r3, #160	; 0xa0
 800d486:	d005      	beq.n	800d494 <HAL_I2C_IsDeviceReady+0x188>
 800d488:	7dfb      	ldrb	r3, [r7, #23]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d102      	bne.n	800d494 <HAL_I2C_IsDeviceReady+0x188>
 800d48e:	7dbb      	ldrb	r3, [r7, #22]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0cd      	beq.n	800d430 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	2220      	movs	r2, #32
 800d498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	695b      	ldr	r3, [r3, #20]
 800d4a2:	f003 0302 	and.w	r3, r3, #2
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d129      	bne.n	800d4fe <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4b8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	613b      	str	r3, [r7, #16]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	613b      	str	r3, [r7, #16]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	699b      	ldr	r3, [r3, #24]
 800d4cc:	613b      	str	r3, [r7, #16]
 800d4ce:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	2319      	movs	r3, #25
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	4921      	ldr	r1, [pc, #132]	; (800d560 <HAL_I2C_IsDeviceReady+0x254>)
 800d4da:	68f8      	ldr	r0, [r7, #12]
 800d4dc:	f003 f9c8 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e036      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2220      	movs	r2, #32
 800d4ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	e02c      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d50c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d516:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	2319      	movs	r3, #25
 800d51e:	2201      	movs	r2, #1
 800d520:	490f      	ldr	r1, [pc, #60]	; (800d560 <HAL_I2C_IsDeviceReady+0x254>)
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f003 f9a4 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800d52e:	2301      	movs	r3, #1
 800d530:	e012      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	3301      	adds	r3, #1
 800d536:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	f4ff af32 	bcc.w	800d3a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2220      	movs	r2, #32
 800d546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	2200      	movs	r2, #0
 800d54e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e000      	b.n	800d558 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800d556:	2302      	movs	r3, #2
  }
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}
 800d560:	00100002 	.word	0x00100002
 800d564:	ffff0000 	.word	0xffff0000

0800d568 <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d568:	b480      	push	{r7}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	607a      	str	r2, [r7, #4]
 800d572:	461a      	mov	r2, r3
 800d574:	460b      	mov	r3, r1
 800d576:	817b      	strh	r3, [r7, #10]
 800d578:	4613      	mov	r3, r2
 800d57a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800d57c:	2300      	movs	r3, #0
 800d57e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800d580:	2300      	movs	r3, #0
 800d582:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	2b20      	cmp	r3, #32
 800d58e:	f040 80a6 	bne.w	800d6de <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5a0:	d005      	beq.n	800d5ae <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	d002      	beq.n	800d5ae <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800d5a8:	6a3b      	ldr	r3, [r7, #32]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d130      	bne.n	800d610 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d5ae:	4b4f      	ldr	r3, [pc, #316]	; (800d6ec <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	08db      	lsrs	r3, r3, #3
 800d5b4:	4a4e      	ldr	r2, [pc, #312]	; (800d6f0 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800d5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ba:	0a1a      	lsrs	r2, r3, #8
 800d5bc:	4613      	mov	r3, r2
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	009a      	lsls	r2, r3, #2
 800d5c4:	4413      	add	r3, r2
 800d5c6:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	3b01      	subs	r3, #1
 800d5cc:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d116      	bne.n	800d602 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2220      	movs	r2, #32
 800d5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	f043 0220 	orr.w	r2, r3, #32
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e06e      	b.n	800d6e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d0db      	beq.n	800d5c8 <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d616:	2b01      	cmp	r3, #1
 800d618:	d101      	bne.n	800d61e <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800d61a:	2302      	movs	r3, #2
 800d61c:	e060      	b.n	800d6e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b01      	cmp	r3, #1
 800d632:	d007      	beq.n	800d644 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f042 0201 	orr.w	r2, r2, #1
 800d642:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d652:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2221      	movs	r2, #33	; 0x21
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2210      	movs	r2, #16
 800d660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2200      	movs	r2, #0
 800d668:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	687a      	ldr	r2, [r7, #4]
 800d66e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	893a      	ldrh	r2, [r7, #8]
 800d674:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	6a3a      	ldr	r2, [r7, #32]
 800d684:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d686:	897a      	ldrh	r2, [r7, #10]
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d690:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	2b11      	cmp	r3, #17
 800d696:	d10c      	bne.n	800d6b2 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800d698:	6a3b      	ldr	r3, [r7, #32]
 800d69a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d69e:	d003      	beq.n	800d6a8 <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800d6a0:	6a3b      	ldr	r3, [r7, #32]
 800d6a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d6a6:	d101      	bne.n	800d6ac <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	e000      	b.n	800d6ae <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d107      	bne.n	800d6c2 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d6c0:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d6d8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	e000      	b.n	800d6e0 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800d6de:	2302      	movs	r3, #2
  }
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	371c      	adds	r7, #28
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	20000058 	.word	0x20000058
 800d6f0:	14f8b589 	.word	0x14f8b589

0800d6f4 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	60f8      	str	r0, [r7, #12]
 800d6fc:	607a      	str	r2, [r7, #4]
 800d6fe:	461a      	mov	r2, r3
 800d700:	460b      	mov	r3, r1
 800d702:	817b      	strh	r3, [r7, #10]
 800d704:	4613      	mov	r3, r2
 800d706:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800d708:	2300      	movs	r3, #0
 800d70a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800d70c:	2300      	movs	r3, #0
 800d70e:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d716:	b2db      	uxtb	r3, r3
 800d718:	2b20      	cmp	r3, #32
 800d71a:	f040 8149 	bne.w	800d9b0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d72c:	d005      	beq.n	800d73a <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	2b08      	cmp	r3, #8
 800d732:	d002      	beq.n	800d73a <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800d734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d736:	2b01      	cmp	r3, #1
 800d738:	d130      	bne.n	800d79c <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d73a:	4b99      	ldr	r3, [pc, #612]	; (800d9a0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	08db      	lsrs	r3, r3, #3
 800d740:	4a98      	ldr	r2, [pc, #608]	; (800d9a4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800d742:	fba2 2303 	umull	r2, r3, r2, r3
 800d746:	0a1a      	lsrs	r2, r3, #8
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009a      	lsls	r2, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	3b01      	subs	r3, #1
 800d758:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d116      	bne.n	800d78e <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2220      	movs	r2, #32
 800d76a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d77a:	f043 0220 	orr.w	r2, r3, #32
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2200      	movs	r2, #0
 800d786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800d78a:	2301      	movs	r3, #1
 800d78c:	e111      	b.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	699b      	ldr	r3, [r3, #24]
 800d794:	f003 0302 	and.w	r3, r3, #2
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d0db      	beq.n	800d754 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d101      	bne.n	800d7aa <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800d7a6:	2302      	movs	r3, #2
 800d7a8:	e103      	b.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2201      	movs	r2, #1
 800d7ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 0301 	and.w	r3, r3, #1
 800d7bc:	2b01      	cmp	r3, #1
 800d7be:	d007      	beq.n	800d7d0 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f042 0201 	orr.w	r2, r2, #1
 800d7ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d7de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2221      	movs	r2, #33	; 0x21
 800d7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2210      	movs	r2, #16
 800d7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	893a      	ldrh	r2, [r7, #8]
 800d800:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d806:	b29a      	uxth	r2, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d810:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d812:	897a      	ldrh	r2, [r7, #10]
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d81c:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 808d 	beq.w	800d942 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d022      	beq.n	800d876 <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d834:	4a5c      	ldr	r2, [pc, #368]	; (800d9a8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800d836:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d83c:	4a5b      	ldr	r2, [pc, #364]	; (800d9ac <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800d83e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	2200      	movs	r2, #0
 800d846:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d84c:	2200      	movs	r2, #0
 800d84e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d858:	4619      	mov	r1, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	3310      	adds	r3, #16
 800d860:	461a      	mov	r2, r3
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d866:	f7f9 feb0 	bl	80075ca <HAL_DMA_Start_IT>
 800d86a:	4603      	mov	r3, r0
 800d86c:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d86e:	7ffb      	ldrb	r3, [r7, #31]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d152      	bne.n	800d91a <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800d874:	e013      	b.n	800d89e <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2220      	movs	r2, #32
 800d87a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2200      	movs	r2, #0
 800d882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	e089      	b.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8ac:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	2b11      	cmp	r3, #17
 800d8b2:	d10c      	bne.n	800d8ce <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800d8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d8ba:	d003      	beq.n	800d8c4 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8be:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d8c2:	d101      	bne.n	800d8c8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	e000      	b.n	800d8ca <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d107      	bne.n	800d8de <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	681a      	ldr	r2, [r3, #0]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8dc:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	2b04      	cmp	r3, #4
 800d8ea:	d005      	beq.n	800d8f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800d8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ee:	2b20      	cmp	r3, #32
 800d8f0:	d002      	beq.n	800d8f8 <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	2b10      	cmp	r3, #16
 800d8f6:	d107      	bne.n	800d908 <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	685a      	ldr	r2, [r3, #4]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d906:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800d916:	605a      	str	r2, [r3, #4]
 800d918:	e03f      	b.n	800d99a <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2220      	movs	r2, #32
 800d91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d92e:	f043 0210 	orr.w	r2, r3, #16
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e037      	b.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	681a      	ldr	r2, [r3, #0]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d950:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800d952:	69bb      	ldr	r3, [r7, #24]
 800d954:	2b11      	cmp	r3, #17
 800d956:	d10c      	bne.n	800d972 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800d958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800d95e:	d003      	beq.n	800d968 <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800d960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d962:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800d966:	d101      	bne.n	800d96c <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800d968:	2301      	movs	r3, #1
 800d96a:	e000      	b.n	800d96e <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800d96c:	2300      	movs	r3, #0
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d107      	bne.n	800d982 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d980:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d998:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800d99a:	2300      	movs	r3, #0
 800d99c:	e009      	b.n	800d9b2 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800d99e:	bf00      	nop
 800d9a0:	20000058 	.word	0x20000058
 800d9a4:	14f8b589 	.word	0x14f8b589
 800d9a8:	080104fd 	.word	0x080104fd
 800d9ac:	080106a7 	.word	0x080106a7
  }
  else
  {
    return HAL_BUSY;
 800d9b0:	2302      	movs	r3, #2
  }
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800d9ba:	b480      	push	{r7}
 800d9bc:	b089      	sub	sp, #36	; 0x24
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	60f8      	str	r0, [r7, #12]
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	817b      	strh	r3, [r7, #10]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d9d6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800d9da:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	2b20      	cmp	r3, #32
 800d9e6:	f040 80da 	bne.w	800db9e <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d9f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9f8:	d005      	beq.n	800da06 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	2b08      	cmp	r3, #8
 800d9fe:	d002      	beq.n	800da06 <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800da00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da02:	2b01      	cmp	r3, #1
 800da04:	d130      	bne.n	800da68 <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800da06:	4b69      	ldr	r3, [pc, #420]	; (800dbac <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	08db      	lsrs	r3, r3, #3
 800da0c:	4a68      	ldr	r2, [pc, #416]	; (800dbb0 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800da0e:	fba2 2303 	umull	r2, r3, r2, r3
 800da12:	0a1a      	lsrs	r2, r3, #8
 800da14:	4613      	mov	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	009a      	lsls	r2, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	3b01      	subs	r3, #1
 800da24:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800da26:	697b      	ldr	r3, [r7, #20]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d116      	bne.n	800da5a <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2200      	movs	r2, #0
 800da30:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2220      	movs	r2, #32
 800da36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2200      	movs	r2, #0
 800da3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da46:	f043 0220 	orr.w	r2, r3, #32
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	2200      	movs	r2, #0
 800da52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e0a2      	b.n	800dba0 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	699b      	ldr	r3, [r3, #24]
 800da60:	f003 0302 	and.w	r3, r3, #2
 800da64:	2b02      	cmp	r3, #2
 800da66:	d0db      	beq.n	800da20 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da6e:	2b01      	cmp	r3, #1
 800da70:	d101      	bne.n	800da76 <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800da72:	2302      	movs	r3, #2
 800da74:	e094      	b.n	800dba0 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f003 0301 	and.w	r3, r3, #1
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d007      	beq.n	800da9c <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f042 0201 	orr.w	r2, r2, #1
 800da9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800daaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	2222      	movs	r2, #34	; 0x22
 800dab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2210      	movs	r2, #16
 800dab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	893a      	ldrh	r2, [r7, #8]
 800dacc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dad2:	b29a      	uxth	r2, r3
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dadc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dade:	897a      	ldrh	r2, [r7, #10]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae8:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800daee:	b29b      	uxth	r3, r3
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d126      	bne.n	800db42 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	2b20      	cmp	r3, #32
 800daf8:	d002      	beq.n	800db00 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800dafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dafc:	2b10      	cmp	r3, #16
 800dafe:	d120      	bne.n	800db42 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800db00:	69bb      	ldr	r3, [r7, #24]
 800db02:	2b12      	cmp	r3, #18
 800db04:	d114      	bne.n	800db30 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db14:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db24:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800db26:	69fb      	ldr	r3, [r7, #28]
 800db28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db2c:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800db2e:	e010      	b.n	800db52 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db3e:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800db40:	e007      	b.n	800db52 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800db50:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800db52:	69bb      	ldr	r3, [r7, #24]
 800db54:	2b12      	cmp	r3, #18
 800db56:	d10c      	bne.n	800db72 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800db58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db5a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800db5e:	d003      	beq.n	800db68 <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800db60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db62:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800db66:	d101      	bne.n	800db6c <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800db68:	2301      	movs	r3, #1
 800db6a:	e000      	b.n	800db6e <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800db6c:	2300      	movs	r3, #0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d107      	bne.n	800db82 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db80:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6859      	ldr	r1, [r3, #4]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	69fa      	ldr	r2, [r7, #28]
 800db96:	430a      	orrs	r2, r1
 800db98:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800db9a:	2300      	movs	r3, #0
 800db9c:	e000      	b.n	800dba0 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800db9e:	2302      	movs	r3, #2
  }
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	3724      	adds	r7, #36	; 0x24
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	20000058 	.word	0x20000058
 800dbb0:	14f8b589 	.word	0x14f8b589

0800dbb4 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b088      	sub	sp, #32
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	607a      	str	r2, [r7, #4]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	817b      	strh	r3, [r7, #10]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dbd0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800dbd4:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	2b20      	cmp	r3, #32
 800dbe0:	f040 8199 	bne.w	800df16 <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbf2:	d005      	beq.n	800dc00 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	2b08      	cmp	r3, #8
 800dbf8:	d002      	beq.n	800dc00 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800dbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d130      	bne.n	800dc62 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc00:	4b8f      	ldr	r3, [pc, #572]	; (800de40 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	08db      	lsrs	r3, r3, #3
 800dc06:	4a8f      	ldr	r2, [pc, #572]	; (800de44 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800dc08:	fba2 2303 	umull	r2, r3, r2, r3
 800dc0c:	0a1a      	lsrs	r2, r3, #8
 800dc0e:	4613      	mov	r3, r2
 800dc10:	009b      	lsls	r3, r3, #2
 800dc12:	4413      	add	r3, r2
 800dc14:	009a      	lsls	r2, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d116      	bne.n	800dc54 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	2200      	movs	r2, #0
 800dc38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc40:	f043 0220 	orr.w	r2, r3, #32
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dc50:	2301      	movs	r3, #1
 800dc52:	e161      	b.n	800df18 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	f003 0302 	and.w	r3, r3, #2
 800dc5e:	2b02      	cmp	r3, #2
 800dc60:	d0db      	beq.n	800dc1a <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d101      	bne.n	800dc70 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	e153      	b.n	800df18 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	2b01      	cmp	r3, #1
 800dc84:	d007      	beq.n	800dc96 <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	681a      	ldr	r2, [r3, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f042 0201 	orr.w	r2, r2, #1
 800dc94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dca4:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	685a      	ldr	r2, [r3, #4]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dcb4:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2222      	movs	r2, #34	; 0x22
 800dcba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2210      	movs	r2, #16
 800dcc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	893a      	ldrh	r2, [r7, #8]
 800dcd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dcdc:	b29a      	uxth	r2, r3
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dce6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dce8:	897a      	ldrh	r2, [r7, #10]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcf2:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	f000 80de 	beq.w	800deba <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd02:	b29b      	uxth	r3, r3
 800dd04:	2b02      	cmp	r3, #2
 800dd06:	d12a      	bne.n	800dd5e <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	2b20      	cmp	r3, #32
 800dd0c:	d002      	beq.n	800dd14 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800dd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd10:	2b10      	cmp	r3, #16
 800dd12:	d124      	bne.n	800dd5e <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	2b12      	cmp	r3, #18
 800dd18:	d118      	bne.n	800dd4c <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	681a      	ldr	r2, [r3, #0]
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dd28:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dd38:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	685a      	ldr	r2, [r3, #4]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd48:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dd4a:	e022      	b.n	800dd92 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd5a:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800dd5c:	e019      	b.n	800dd92 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd6c:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800dd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd70:	2b20      	cmp	r3, #32
 800dd72:	d006      	beq.n	800dd82 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dd7a:	d002      	beq.n	800dd82 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	2b10      	cmp	r3, #16
 800dd80:	d107      	bne.n	800dd92 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dd90:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d022      	beq.n	800dde0 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd9e:	4a2a      	ldr	r2, [pc, #168]	; (800de48 <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800dda0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	4a29      	ldr	r2, [pc, #164]	; (800de4c <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800dda8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddae:	2200      	movs	r2, #0
 800ddb0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	3310      	adds	r3, #16
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddca:	461a      	mov	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddd0:	f7f9 fbfb 	bl	80075ca <HAL_DMA_Start_IT>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800ddd8:	7efb      	ldrb	r3, [r7, #27]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d159      	bne.n	800de92 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800ddde:	e013      	b.n	800de08 <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	2220      	movs	r2, #32
 800dde4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800de04:	2301      	movs	r3, #1
 800de06:	e087      	b.n	800df18 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	2b12      	cmp	r3, #18
 800de0c:	d10c      	bne.n	800de28 <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800de0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800de14:	d003      	beq.n	800de1e <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800de16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de18:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800de1c:	d101      	bne.n	800de22 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800de1e:	2301      	movs	r3, #1
 800de20:	e000      	b.n	800de24 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800de22:	2300      	movs	r3, #0
 800de24:	2b01      	cmp	r3, #1
 800de26:	d113      	bne.n	800de50 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	681a      	ldr	r2, [r3, #0]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de36:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800de38:	f44f 7340 	mov.w	r3, #768	; 0x300
 800de3c:	61fb      	str	r3, [r7, #28]
 800de3e:	e00a      	b.n	800de56 <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800de40:	20000058 	.word	0x20000058
 800de44:	14f8b589 	.word	0x14f8b589
 800de48:	080104fd 	.word	0x080104fd
 800de4c:	080106a7 	.word	0x080106a7
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800de50:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de54:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800de5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de60:	2b04      	cmp	r3, #4
 800de62:	d005      	beq.n	800de70 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800de64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de66:	2b20      	cmp	r3, #32
 800de68:	d002      	beq.n	800de70 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800de6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de6c:	2b10      	cmp	r3, #16
 800de6e:	d107      	bne.n	800de80 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	685a      	ldr	r2, [r3, #4]
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de7e:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	6859      	ldr	r1, [r3, #4]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	69fa      	ldr	r2, [r7, #28]
 800de8c:	430a      	orrs	r2, r1
 800de8e:	605a      	str	r2, [r3, #4]
 800de90:	e03f      	b.n	800df12 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2220      	movs	r2, #32
 800de96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea6:	f043 0210 	orr.w	r2, r3, #16
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e02e      	b.n	800df18 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681a      	ldr	r2, [r3, #0]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dec8:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b12      	cmp	r3, #18
 800dece:	d10c      	bne.n	800deea <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800ded0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ded6:	d003      	beq.n	800dee0 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dede:	d101      	bne.n	800dee4 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800dee0:	2301      	movs	r3, #1
 800dee2:	e000      	b.n	800dee6 <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800dee4:	2300      	movs	r3, #0
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d107      	bne.n	800defa <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800def8:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	6859      	ldr	r1, [r3, #4]
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	69fa      	ldr	r2, [r7, #28]
 800df0e:	430a      	orrs	r2, r1
 800df10:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800df12:	2300      	movs	r3, #0
 800df14:	e000      	b.n	800df18 <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800df16:	2302      	movs	r3, #2
  }
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800df20:	b480      	push	{r7}
 800df22:	b087      	sub	sp, #28
 800df24:	af00      	add	r7, sp, #0
 800df26:	60f8      	str	r0, [r7, #12]
 800df28:	60b9      	str	r1, [r7, #8]
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	4613      	mov	r3, r2
 800df2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df36:	b2db      	uxtb	r3, r3
 800df38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800df3c:	2b28      	cmp	r3, #40	; 0x28
 800df3e:	d15b      	bne.n	800dff8 <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800df46:	88fb      	ldrh	r3, [r7, #6]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d101      	bne.n	800df50 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e054      	b.n	800dffa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df56:	2b01      	cmp	r3, #1
 800df58:	d101      	bne.n	800df5e <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800df5a:	2302      	movs	r3, #2
 800df5c:	e04d      	b.n	800dffa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	2201      	movs	r2, #1
 800df62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	2b01      	cmp	r3, #1
 800df72:	d007      	beq.n	800df84 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f042 0201 	orr.w	r2, r2, #1
 800df82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2229      	movs	r2, #41	; 0x29
 800df98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2220      	movs	r2, #32
 800dfa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	88fa      	ldrh	r2, [r7, #6]
 800dfb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dfba:	b29a      	uxth	r2, r3
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	617b      	str	r3, [r7, #20]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	617b      	str	r3, [r7, #20]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	699b      	ldr	r3, [r3, #24]
 800dfd8:	617b      	str	r3, [r7, #20]
 800dfda:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800dff2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800dff4:	2300      	movs	r3, #0
 800dff6:	e000      	b.n	800dffa <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800dff8:	2302      	movs	r3, #2
  }
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	371c      	adds	r7, #28
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b086      	sub	sp, #24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	603b      	str	r3, [r7, #0]
 800e012:	4613      	mov	r3, r2
 800e014:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e022:	2b28      	cmp	r3, #40	; 0x28
 800e024:	f040 811e 	bne.w	800e264 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d002      	beq.n	800e034 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e02e:	88fb      	ldrh	r3, [r7, #6]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d101      	bne.n	800e038 <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e034:	2301      	movs	r3, #1
 800e036:	e116      	b.n	800e266 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e03e:	2b01      	cmp	r3, #1
 800e040:	d101      	bne.n	800e046 <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e042:	2302      	movs	r3, #2
 800e044:	e10f      	b.n	800e266 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	685a      	ldr	r2, [r3, #4]
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e05c:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e064:	b2db      	uxtb	r3, r3
 800e066:	2b2a      	cmp	r3, #42	; 0x2a
 800e068:	d127      	bne.n	800e0ba <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e078:	d14c      	bne.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d048      	beq.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	685a      	ldr	r2, [r3, #4]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e090:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e096:	4a76      	ldr	r2, [pc, #472]	; (800e270 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e098:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7f9 fb5b 	bl	800775a <HAL_DMA_Abort_IT>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d034      	beq.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b0:	68fa      	ldr	r2, [r7, #12]
 800e0b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e0b4:	4610      	mov	r0, r2
 800e0b6:	4798      	blx	r3
 800e0b8:	e02c      	b.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b29      	cmp	r3, #41	; 0x29
 800e0c4:	d126      	bne.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0d4:	d11e      	bne.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e0e4:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d012      	beq.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0f2:	4a5f      	ldr	r2, [pc, #380]	; (800e270 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e0f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7f9 fb2d 	bl	800775a <HAL_DMA_Abort_IT>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d006      	beq.n	800e114 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e110:	4610      	mov	r0, r2
 800e112:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f003 0301 	and.w	r3, r3, #1
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d007      	beq.n	800e132 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	681a      	ldr	r2, [r3, #0]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f042 0201 	orr.w	r2, r2, #1
 800e130:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e140:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	2229      	movs	r2, #41	; 0x29
 800e146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	2220      	movs	r2, #32
 800e14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2200      	movs	r2, #0
 800e156:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	88fa      	ldrh	r2, [r7, #6]
 800e162:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e168:	b29a      	uxth	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	683a      	ldr	r2, [r7, #0]
 800e172:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d022      	beq.n	800e1c2 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e180:	4a3c      	ldr	r2, [pc, #240]	; (800e274 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e182:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e188:	4a3b      	ldr	r2, [pc, #236]	; (800e278 <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e18a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e190:	2200      	movs	r2, #0
 800e192:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e198:	2200      	movs	r2, #0
 800e19a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3310      	adds	r3, #16
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e1b2:	f7f9 fa0a 	bl	80075ca <HAL_DMA_Start_IT>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d13d      	bne.n	800e23c <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e1c0:	e013      	b.n	800e1ea <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2228      	movs	r2, #40	; 0x28
 800e1c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e1d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e03d      	b.n	800e266 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e1f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	613b      	str	r3, [r7, #16]
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	695b      	ldr	r3, [r3, #20]
 800e204:	613b      	str	r3, [r7, #16]
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2200      	movs	r2, #0
 800e214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	685a      	ldr	r2, [r3, #4]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e226:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	685a      	ldr	r2, [r3, #4]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e236:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e238:	2300      	movs	r3, #0
 800e23a:	e014      	b.n	800e266 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2220      	movs	r2, #32
 800e240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e250:	f043 0210 	orr.w	r2, r3, #16
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e260:	2301      	movs	r3, #1
 800e262:	e000      	b.n	800e266 <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e264:	2302      	movs	r3, #2
  }
}
 800e266:	4618      	mov	r0, r3
 800e268:	3718      	adds	r7, #24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	08010721 	.word	0x08010721
 800e274:	080104fd 	.word	0x080104fd
 800e278:	080106a7 	.word	0x080106a7

0800e27c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b087      	sub	sp, #28
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	4613      	mov	r3, r2
 800e28a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e292:	b2db      	uxtb	r3, r3
 800e294:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e298:	2b28      	cmp	r3, #40	; 0x28
 800e29a:	d15b      	bne.n	800e354 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d002      	beq.n	800e2a8 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800e2a2:	88fb      	ldrh	r3, [r7, #6]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e054      	b.n	800e356 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	d101      	bne.n	800e2ba <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800e2b6:	2302      	movs	r3, #2
 800e2b8:	e04d      	b.n	800e356 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0301 	and.w	r3, r3, #1
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d007      	beq.n	800e2e0 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f042 0201 	orr.w	r2, r2, #1
 800e2de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e2ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	222a      	movs	r2, #42	; 0x2a
 800e2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2220      	movs	r2, #32
 800e2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2200      	movs	r2, #0
 800e304:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68ba      	ldr	r2, [r7, #8]
 800e30a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	88fa      	ldrh	r2, [r7, #6]
 800e310:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e316:	b29a      	uxth	r2, r3
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e322:	2300      	movs	r3, #0
 800e324:	617b      	str	r3, [r7, #20]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	617b      	str	r3, [r7, #20]
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	699b      	ldr	r3, [r3, #24]
 800e334:	617b      	str	r3, [r7, #20]
 800e336:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	685a      	ldr	r2, [r3, #4]
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e34e:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e350:	2300      	movs	r3, #0
 800e352:	e000      	b.n	800e356 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e354:	2302      	movs	r3, #2
  }
}
 800e356:	4618      	mov	r0, r3
 800e358:	371c      	adds	r7, #28
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b086      	sub	sp, #24
 800e366:	af00      	add	r7, sp, #0
 800e368:	60f8      	str	r0, [r7, #12]
 800e36a:	60b9      	str	r1, [r7, #8]
 800e36c:	603b      	str	r3, [r7, #0]
 800e36e:	4613      	mov	r3, r2
 800e370:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e37e:	2b28      	cmp	r3, #40	; 0x28
 800e380:	f040 811e 	bne.w	800e5c0 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800e38a:	88fb      	ldrh	r3, [r7, #6]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d101      	bne.n	800e394 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e116      	b.n	800e5c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d101      	bne.n	800e3a2 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800e39e:	2302      	movs	r3, #2
 800e3a0:	e10f      	b.n	800e5c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	685a      	ldr	r2, [r3, #4]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e3b8:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c4:	d127      	bne.n	800e416 <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	685b      	ldr	r3, [r3, #4]
 800e3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e3d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3d4:	d14c      	bne.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d048      	beq.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	685a      	ldr	r2, [r3, #4]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e3ec:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f2:	4a76      	ldr	r2, [pc, #472]	; (800e5cc <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e3f4:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7f9 f9ad 	bl	800775a <HAL_DMA_Abort_IT>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d034      	beq.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e40a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e410:	4610      	mov	r0, r2
 800e412:	4798      	blx	r3
 800e414:	e02c      	b.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e41c:	b2db      	uxtb	r3, r3
 800e41e:	2b29      	cmp	r3, #41	; 0x29
 800e420:	d126      	bne.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e42c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e430:	d11e      	bne.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	685a      	ldr	r2, [r3, #4]
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e440:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e446:	2b00      	cmp	r3, #0
 800e448:	d012      	beq.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	4a5f      	ldr	r2, [pc, #380]	; (800e5cc <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e450:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e456:	4618      	mov	r0, r3
 800e458:	f7f9 f97f 	bl	800775a <HAL_DMA_Abort_IT>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d006      	beq.n	800e470 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e46c:	4610      	mov	r0, r2
 800e46e:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	f003 0301 	and.w	r3, r3, #1
 800e47a:	2b01      	cmp	r3, #1
 800e47c:	d007      	beq.n	800e48e <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	681a      	ldr	r2, [r3, #0]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f042 0201 	orr.w	r2, r2, #1
 800e48c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e49c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	222a      	movs	r2, #42	; 0x2a
 800e4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	2220      	movs	r2, #32
 800e4aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	88fa      	ldrh	r2, [r7, #6]
 800e4be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	683a      	ldr	r2, [r7, #0]
 800e4ce:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d022      	beq.n	800e51e <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4dc:	4a3c      	ldr	r2, [pc, #240]	; (800e5d0 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800e4de:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e4:	4a3b      	ldr	r2, [pc, #236]	; (800e5d4 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800e4e6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	3310      	adds	r3, #16
 800e502:	4619      	mov	r1, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e508:	461a      	mov	r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e50e:	f7f9 f85c 	bl	80075ca <HAL_DMA_Start_IT>
 800e512:	4603      	mov	r3, r0
 800e514:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e516:	7dfb      	ldrb	r3, [r7, #23]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d13d      	bne.n	800e598 <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800e51c:	e013      	b.n	800e546 <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	2228      	movs	r2, #40	; 0x28
 800e522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e532:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2200      	movs	r2, #0
 800e53e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	e03d      	b.n	800e5c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e554:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e556:	2300      	movs	r3, #0
 800e558:	613b      	str	r3, [r7, #16]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	695b      	ldr	r3, [r3, #20]
 800e560:	613b      	str	r3, [r7, #16]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	699b      	ldr	r3, [r3, #24]
 800e568:	613b      	str	r3, [r7, #16]
 800e56a:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	2200      	movs	r2, #0
 800e570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	685a      	ldr	r2, [r3, #4]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e582:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	685a      	ldr	r2, [r3, #4]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e592:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	e014      	b.n	800e5c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	2220      	movs	r2, #32
 800e59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ac:	f043 0210 	orr.w	r2, r3, #16
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e000      	b.n	800e5c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e5c0:	2302      	movs	r3, #2
  }
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3718      	adds	r7, #24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	08010721 	.word	0x08010721
 800e5d0:	080104fd 	.word	0x080104fd
 800e5d4:	080106a7 	.word	0x080106a7

0800e5d8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b20      	cmp	r3, #32
 800e5ea:	d124      	bne.n	800e636 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2228      	movs	r2, #40	; 0x28
 800e5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d007      	beq.n	800e612 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f042 0201 	orr.w	r2, r2, #1
 800e610:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e620:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	685a      	ldr	r2, [r3, #4]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e630:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e632:	2300      	movs	r3, #0
 800e634:	e000      	b.n	800e638 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800e636:	2302      	movs	r3, #2
  }
}
 800e638:	4618      	mov	r0, r3
 800e63a:	370c      	adds	r7, #12
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b28      	cmp	r3, #40	; 0x28
 800e656:	d129      	bne.n	800e6ac <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	f003 0303 	and.w	r3, r3, #3
 800e664:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	461a      	mov	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	431a      	orrs	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2220      	movs	r2, #32
 800e67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e696:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685a      	ldr	r2, [r3, #4]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e6a6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e000      	b.n	800e6ae <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800e6ac:	2302      	movs	r3, #2
  }
}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3714      	adds	r7, #20
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	460b      	mov	r3, r1
 800e6c4:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e6cc:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	699b      	ldr	r3, [r3, #24]
 800e6d4:	f003 0302 	and.w	r3, r3, #2
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d138      	bne.n	800e74e <HAL_I2C_Master_Abort_IT+0x94>
 800e6dc:	7bfb      	ldrb	r3, [r7, #15]
 800e6de:	2b10      	cmp	r3, #16
 800e6e0:	d135      	bne.n	800e74e <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d101      	bne.n	800e6f0 <HAL_I2C_Master_Abort_IT+0x36>
 800e6ec:	2302      	movs	r3, #2
 800e6ee:	e02f      	b.n	800e750 <HAL_I2C_Master_Abort_IT+0x96>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2260      	movs	r2, #96	; 0x60
 800e702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e714:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	681a      	ldr	r2, [r3, #0]
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e724:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2200      	movs	r2, #0
 800e72a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	685a      	ldr	r2, [r3, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e73a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2200      	movs	r2, #0
 800e740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f001 fad9 	bl	800fcfc <I2C_ITError>

    return HAL_OK;
 800e74a:	2300      	movs	r3, #0
 800e74c:	e000      	b.n	800e750 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800e74e:	2301      	movs	r3, #1
  }
}
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800e760:	2300      	movs	r3, #0
 800e762:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e770:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e778:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e780:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800e782:	7bfb      	ldrb	r3, [r7, #15]
 800e784:	2b10      	cmp	r3, #16
 800e786:	d003      	beq.n	800e790 <HAL_I2C_EV_IRQHandler+0x38>
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	2b40      	cmp	r3, #64	; 0x40
 800e78c:	f040 80c1 	bne.w	800e912 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	699b      	ldr	r3, [r3, #24]
 800e796:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	695b      	ldr	r3, [r3, #20]
 800e79e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	f003 0301 	and.w	r3, r3, #1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d10d      	bne.n	800e7c6 <HAL_I2C_EV_IRQHandler+0x6e>
 800e7aa:	693b      	ldr	r3, [r7, #16]
 800e7ac:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e7b0:	d003      	beq.n	800e7ba <HAL_I2C_EV_IRQHandler+0x62>
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e7b8:	d101      	bne.n	800e7be <HAL_I2C_EV_IRQHandler+0x66>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e000      	b.n	800e7c0 <HAL_I2C_EV_IRQHandler+0x68>
 800e7be:	2300      	movs	r3, #0
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	f000 8132 	beq.w	800ea2a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e7c6:	69fb      	ldr	r3, [r7, #28]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00c      	beq.n	800e7ea <HAL_I2C_EV_IRQHandler+0x92>
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	0a5b      	lsrs	r3, r3, #9
 800e7d4:	f003 0301 	and.w	r3, r3, #1
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d006      	beq.n	800e7ea <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f002 fa94 	bl	8010d0a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fda1 	bl	800f32a <I2C_Master_SB>
 800e7e8:	e092      	b.n	800e910 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	08db      	lsrs	r3, r3, #3
 800e7ee:	f003 0301 	and.w	r3, r3, #1
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d009      	beq.n	800e80a <HAL_I2C_EV_IRQHandler+0xb2>
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	0a5b      	lsrs	r3, r3, #9
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d003      	beq.n	800e80a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 fe17 	bl	800f436 <I2C_Master_ADD10>
 800e808:	e082      	b.n	800e910 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e80a:	69fb      	ldr	r3, [r7, #28]
 800e80c:	085b      	lsrs	r3, r3, #1
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	2b00      	cmp	r3, #0
 800e814:	d009      	beq.n	800e82a <HAL_I2C_EV_IRQHandler+0xd2>
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	0a5b      	lsrs	r3, r3, #9
 800e81a:	f003 0301 	and.w	r3, r3, #1
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d003      	beq.n	800e82a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 fe31 	bl	800f48a <I2C_Master_ADDR>
 800e828:	e072      	b.n	800e910 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	089b      	lsrs	r3, r3, #2
 800e82e:	f003 0301 	and.w	r3, r3, #1
 800e832:	2b00      	cmp	r3, #0
 800e834:	d03b      	beq.n	800e8ae <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e844:	f000 80f3 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	09db      	lsrs	r3, r3, #7
 800e84c:	f003 0301 	and.w	r3, r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	d00f      	beq.n	800e874 <HAL_I2C_EV_IRQHandler+0x11c>
 800e854:	697b      	ldr	r3, [r7, #20]
 800e856:	0a9b      	lsrs	r3, r3, #10
 800e858:	f003 0301 	and.w	r3, r3, #1
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <HAL_I2C_EV_IRQHandler+0x11c>
 800e860:	69fb      	ldr	r3, [r7, #28]
 800e862:	089b      	lsrs	r3, r3, #2
 800e864:	f003 0301 	and.w	r3, r3, #1
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d103      	bne.n	800e874 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800e86c:	6878      	ldr	r0, [r7, #4]
 800e86e:	f000 fa1b 	bl	800eca8 <I2C_MasterTransmit_TXE>
 800e872:	e04d      	b.n	800e910 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e874:	69fb      	ldr	r3, [r7, #28]
 800e876:	089b      	lsrs	r3, r3, #2
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f000 80d6 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	0a5b      	lsrs	r3, r3, #9
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	f000 80cf 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800e890:	7bbb      	ldrb	r3, [r7, #14]
 800e892:	2b21      	cmp	r3, #33	; 0x21
 800e894:	d103      	bne.n	800e89e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 faa2 	bl	800ede0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e89c:	e0c7      	b.n	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800e89e:	7bfb      	ldrb	r3, [r7, #15]
 800e8a0:	2b40      	cmp	r3, #64	; 0x40
 800e8a2:	f040 80c4 	bne.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 fb10 	bl	800eecc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e8ac:	e0bf      	b.n	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8bc:	f000 80b7 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	099b      	lsrs	r3, r3, #6
 800e8c4:	f003 0301 	and.w	r3, r3, #1
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d00f      	beq.n	800e8ec <HAL_I2C_EV_IRQHandler+0x194>
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	0a9b      	lsrs	r3, r3, #10
 800e8d0:	f003 0301 	and.w	r3, r3, #1
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d009      	beq.n	800e8ec <HAL_I2C_EV_IRQHandler+0x194>
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	089b      	lsrs	r3, r3, #2
 800e8dc:	f003 0301 	and.w	r3, r3, #1
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d103      	bne.n	800e8ec <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f000 fb85 	bl	800eff4 <I2C_MasterReceive_RXNE>
 800e8ea:	e011      	b.n	800e910 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	089b      	lsrs	r3, r3, #2
 800e8f0:	f003 0301 	and.w	r3, r3, #1
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	f000 809a 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	0a5b      	lsrs	r3, r3, #9
 800e8fe:	f003 0301 	and.w	r3, r3, #1
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 8093 	beq.w	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fc24 	bl	800f156 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e90e:	e08e      	b.n	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
 800e910:	e08d      	b.n	800ea2e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	695b      	ldr	r3, [r3, #20]
 800e920:	61fb      	str	r3, [r7, #28]
 800e922:	e007      	b.n	800e934 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	699b      	ldr	r3, [r3, #24]
 800e92a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	085b      	lsrs	r3, r3, #1
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d012      	beq.n	800e966 <HAL_I2C_EV_IRQHandler+0x20e>
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	0a5b      	lsrs	r3, r3, #9
 800e944:	f003 0301 	and.w	r3, r3, #1
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d00c      	beq.n	800e966 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e950:	2b00      	cmp	r3, #0
 800e952:	d003      	beq.n	800e95c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800e95c:	69b9      	ldr	r1, [r7, #24]
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 ffe2 	bl	800f928 <I2C_Slave_ADDR>
 800e964:	e066      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e966:	69fb      	ldr	r3, [r7, #28]
 800e968:	091b      	lsrs	r3, r3, #4
 800e96a:	f003 0301 	and.w	r3, r3, #1
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <HAL_I2C_EV_IRQHandler+0x22e>
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	0a5b      	lsrs	r3, r3, #9
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d003      	beq.n	800e986 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f001 f81c 	bl	800f9bc <I2C_Slave_STOPF>
 800e984:	e056      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e986:	7bbb      	ldrb	r3, [r7, #14]
 800e988:	2b21      	cmp	r3, #33	; 0x21
 800e98a:	d002      	beq.n	800e992 <HAL_I2C_EV_IRQHandler+0x23a>
 800e98c:	7bbb      	ldrb	r3, [r7, #14]
 800e98e:	2b29      	cmp	r3, #41	; 0x29
 800e990:	d125      	bne.n	800e9de <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	09db      	lsrs	r3, r3, #7
 800e996:	f003 0301 	and.w	r3, r3, #1
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00f      	beq.n	800e9be <HAL_I2C_EV_IRQHandler+0x266>
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	0a9b      	lsrs	r3, r3, #10
 800e9a2:	f003 0301 	and.w	r3, r3, #1
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d009      	beq.n	800e9be <HAL_I2C_EV_IRQHandler+0x266>
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	089b      	lsrs	r3, r3, #2
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d103      	bne.n	800e9be <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 fef8 	bl	800f7ac <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e9bc:	e039      	b.n	800ea32 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	089b      	lsrs	r3, r3, #2
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d033      	beq.n	800ea32 <HAL_I2C_EV_IRQHandler+0x2da>
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	0a5b      	lsrs	r3, r3, #9
 800e9ce:	f003 0301 	and.w	r3, r3, #1
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d02d      	beq.n	800ea32 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 ff25 	bl	800f826 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e9dc:	e029      	b.n	800ea32 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	099b      	lsrs	r3, r3, #6
 800e9e2:	f003 0301 	and.w	r3, r3, #1
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d00f      	beq.n	800ea0a <HAL_I2C_EV_IRQHandler+0x2b2>
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	0a9b      	lsrs	r3, r3, #10
 800e9ee:	f003 0301 	and.w	r3, r3, #1
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d009      	beq.n	800ea0a <HAL_I2C_EV_IRQHandler+0x2b2>
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	089b      	lsrs	r3, r3, #2
 800e9fa:	f003 0301 	and.w	r3, r3, #1
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d103      	bne.n	800ea0a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 ff30 	bl	800f868 <I2C_SlaveReceive_RXNE>
 800ea08:	e014      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	089b      	lsrs	r3, r3, #2
 800ea0e:	f003 0301 	and.w	r3, r3, #1
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d00e      	beq.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
 800ea16:	697b      	ldr	r3, [r7, #20]
 800ea18:	0a5b      	lsrs	r3, r3, #9
 800ea1a:	f003 0301 	and.w	r3, r3, #1
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d008      	beq.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 ff5e 	bl	800f8e4 <I2C_SlaveReceive_BTF>
 800ea28:	e004      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800ea2a:	bf00      	nop
 800ea2c:	e002      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ea2e:	bf00      	nop
 800ea30:	e000      	b.n	800ea34 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ea32:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ea34:	3720      	adds	r7, #32
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b08a      	sub	sp, #40	; 0x28
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	695b      	ldr	r3, [r3, #20]
 800ea48:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ea52:	2300      	movs	r3, #0
 800ea54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ea5c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ea5e:	6a3b      	ldr	r3, [r7, #32]
 800ea60:	0a1b      	lsrs	r3, r3, #8
 800ea62:	f003 0301 	and.w	r3, r3, #1
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d00e      	beq.n	800ea88 <HAL_I2C_ER_IRQHandler+0x4e>
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	0a1b      	lsrs	r3, r3, #8
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d008      	beq.n	800ea88 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	f043 0301 	orr.w	r3, r3, #1
 800ea7c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ea86:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ea88:	6a3b      	ldr	r3, [r7, #32]
 800ea8a:	0a5b      	lsrs	r3, r3, #9
 800ea8c:	f003 0301 	and.w	r3, r3, #1
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d00e      	beq.n	800eab2 <HAL_I2C_ER_IRQHandler+0x78>
 800ea94:	69fb      	ldr	r3, [r7, #28]
 800ea96:	0a1b      	lsrs	r3, r3, #8
 800ea98:	f003 0301 	and.w	r3, r3, #1
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d008      	beq.n	800eab2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	f043 0302 	orr.w	r3, r3, #2
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800eab0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800eab2:	6a3b      	ldr	r3, [r7, #32]
 800eab4:	0a9b      	lsrs	r3, r3, #10
 800eab6:	f003 0301 	and.w	r3, r3, #1
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d03f      	beq.n	800eb3e <HAL_I2C_ER_IRQHandler+0x104>
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	0a1b      	lsrs	r3, r3, #8
 800eac2:	f003 0301 	and.w	r3, r3, #1
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d039      	beq.n	800eb3e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800eaca:	7efb      	ldrb	r3, [r7, #27]
 800eacc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eadc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800eae4:	7ebb      	ldrb	r3, [r7, #26]
 800eae6:	2b20      	cmp	r3, #32
 800eae8:	d112      	bne.n	800eb10 <HAL_I2C_ER_IRQHandler+0xd6>
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10f      	bne.n	800eb10 <HAL_I2C_ER_IRQHandler+0xd6>
 800eaf0:	7cfb      	ldrb	r3, [r7, #19]
 800eaf2:	2b21      	cmp	r3, #33	; 0x21
 800eaf4:	d008      	beq.n	800eb08 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800eaf6:	7cfb      	ldrb	r3, [r7, #19]
 800eaf8:	2b29      	cmp	r3, #41	; 0x29
 800eafa:	d005      	beq.n	800eb08 <HAL_I2C_ER_IRQHandler+0xce>
 800eafc:	7cfb      	ldrb	r3, [r7, #19]
 800eafe:	2b28      	cmp	r3, #40	; 0x28
 800eb00:	d106      	bne.n	800eb10 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2b21      	cmp	r3, #33	; 0x21
 800eb06:	d103      	bne.n	800eb10 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f001 f887 	bl	800fc1c <I2C_Slave_AF>
 800eb0e:	e016      	b.n	800eb3e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800eb18:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	f043 0304 	orr.w	r3, r3, #4
 800eb20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800eb22:	7efb      	ldrb	r3, [r7, #27]
 800eb24:	2b10      	cmp	r3, #16
 800eb26:	d002      	beq.n	800eb2e <HAL_I2C_ER_IRQHandler+0xf4>
 800eb28:	7efb      	ldrb	r3, [r7, #27]
 800eb2a:	2b40      	cmp	r3, #64	; 0x40
 800eb2c:	d107      	bne.n	800eb3e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb3c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800eb3e:	6a3b      	ldr	r3, [r7, #32]
 800eb40:	0adb      	lsrs	r3, r3, #11
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00e      	beq.n	800eb68 <HAL_I2C_ER_IRQHandler+0x12e>
 800eb4a:	69fb      	ldr	r3, [r7, #28]
 800eb4c:	0a1b      	lsrs	r3, r3, #8
 800eb4e:	f003 0301 	and.w	r3, r3, #1
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d008      	beq.n	800eb68 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800eb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb58:	f043 0308 	orr.w	r3, r3, #8
 800eb5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800eb66:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800eb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d008      	beq.n	800eb80 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb74:	431a      	orrs	r2, r3
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f001 f8be 	bl	800fcfc <I2C_ITError>
  }
}
 800eb80:	bf00      	nop
 800eb82:	3728      	adds	r7, #40	; 0x28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800eb90:	bf00      	nop
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800ebcc:	bf00      	nop
 800ebce:	370c      	adds	r7, #12
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd6:	4770      	bx	lr

0800ebd8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	70fb      	strb	r3, [r7, #3]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ebe8:	bf00      	nop
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800ebfc:	bf00      	nop
 800ebfe:	370c      	adds	r7, #12
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b083      	sub	sp, #12
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800ec10:	bf00      	nop
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b083      	sub	sp, #12
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800ec24:	bf00      	nop
 800ec26:	370c      	adds	r7, #12
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	4770      	bx	lr

0800ec30 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800ec4c:	bf00      	nop
 800ec4e:	370c      	adds	r7, #12
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec66:	b2db      	uxtb	r3, r3
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec82:	b2db      	uxtb	r3, r3
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b083      	sub	sp, #12
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	370c      	adds	r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b084      	sub	sp, #16
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecbe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d150      	bne.n	800ed70 <I2C_MasterTransmit_TXE+0xc8>
 800ecce:	7bfb      	ldrb	r3, [r7, #15]
 800ecd0:	2b21      	cmp	r3, #33	; 0x21
 800ecd2:	d14d      	bne.n	800ed70 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b08      	cmp	r3, #8
 800ecd8:	d01d      	beq.n	800ed16 <I2C_MasterTransmit_TXE+0x6e>
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	2b20      	cmp	r3, #32
 800ecde:	d01a      	beq.n	800ed16 <I2C_MasterTransmit_TXE+0x6e>
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ece6:	d016      	beq.n	800ed16 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ecf6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2211      	movs	r2, #17
 800ecfc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2220      	movs	r2, #32
 800ed0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	f7ff ff3a 	bl	800eb88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ed14:	e060      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ed24:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ed34:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2220      	movs	r2, #32
 800ed40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b40      	cmp	r3, #64	; 0x40
 800ed4e:	d107      	bne.n	800ed60 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f7ff ff55 	bl	800ec08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ed5e:	e03b      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff ff0d 	bl	800eb88 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ed6e:	e033      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	2b21      	cmp	r3, #33	; 0x21
 800ed74:	d005      	beq.n	800ed82 <I2C_MasterTransmit_TXE+0xda>
 800ed76:	7bbb      	ldrb	r3, [r7, #14]
 800ed78:	2b40      	cmp	r3, #64	; 0x40
 800ed7a:	d12d      	bne.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	2b22      	cmp	r3, #34	; 0x22
 800ed80:	d12a      	bne.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ed86:	b29b      	uxth	r3, r3
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d108      	bne.n	800ed9e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	685a      	ldr	r2, [r3, #4]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed9a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800ed9c:	e01c      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eda4:	b2db      	uxtb	r3, r3
 800eda6:	2b40      	cmp	r3, #64	; 0x40
 800eda8:	d103      	bne.n	800edb2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 f88e 	bl	800eecc <I2C_MemoryTransmit_TXE_BTF>
}
 800edb0:	e012      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb6:	781a      	ldrb	r2, [r3, #0]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edc2:	1c5a      	adds	r2, r3, #1
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800edcc:	b29b      	uxth	r3, r3
 800edce:	3b01      	subs	r3, #1
 800edd0:	b29a      	uxth	r2, r3
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800edd6:	e7ff      	b.n	800edd8 <I2C_MasterTransmit_TXE+0x130>
 800edd8:	bf00      	nop
 800edda:	3710      	adds	r7, #16
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b084      	sub	sp, #16
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edec:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b21      	cmp	r3, #33	; 0x21
 800edf8:	d164      	bne.n	800eec4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800edfe:	b29b      	uxth	r3, r3
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d012      	beq.n	800ee2a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee08:	781a      	ldrb	r2, [r3, #0]
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800ee28:	e04c      	b.n	800eec4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2b08      	cmp	r3, #8
 800ee2e:	d01d      	beq.n	800ee6c <I2C_MasterTransmit_BTF+0x8c>
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	2b20      	cmp	r3, #32
 800ee34:	d01a      	beq.n	800ee6c <I2C_MasterTransmit_BTF+0x8c>
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ee3c:	d016      	beq.n	800ee6c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee4c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2211      	movs	r2, #17
 800ee52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2220      	movs	r2, #32
 800ee60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff fe8f 	bl	800eb88 <HAL_I2C_MasterTxCpltCallback>
}
 800ee6a:	e02b      	b.n	800eec4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ee7a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ee8a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2220      	movs	r2, #32
 800ee96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b40      	cmp	r3, #64	; 0x40
 800eea4:	d107      	bne.n	800eeb6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	f7ff feaa 	bl	800ec08 <HAL_I2C_MemTxCpltCallback>
}
 800eeb4:	e006      	b.n	800eec4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f7ff fe62 	bl	800eb88 <HAL_I2C_MasterTxCpltCallback>
}
 800eec4:	bf00      	nop
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d11d      	bne.n	800ef20 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d10b      	bne.n	800ef04 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eef0:	b2da      	uxtb	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eefc:	1c9a      	adds	r2, r3, #2
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800ef02:	e073      	b.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef08:	b29b      	uxth	r3, r3
 800ef0a:	121b      	asrs	r3, r3, #8
 800ef0c:	b2da      	uxtb	r2, r3
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef18:	1c5a      	adds	r2, r3, #1
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ef1e:	e065      	b.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef24:	2b01      	cmp	r3, #1
 800ef26:	d10b      	bne.n	800ef40 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef2c:	b2da      	uxtb	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef38:	1c5a      	adds	r2, r3, #1
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ef3e:	e055      	b.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	d151      	bne.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800ef48:	7bfb      	ldrb	r3, [r7, #15]
 800ef4a:	2b22      	cmp	r3, #34	; 0x22
 800ef4c:	d10d      	bne.n	800ef6a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ef5c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef62:	1c5a      	adds	r2, r3, #1
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	651a      	str	r2, [r3, #80]	; 0x50
}
 800ef68:	e040      	b.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d015      	beq.n	800efa0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800ef74:	7bfb      	ldrb	r3, [r7, #15]
 800ef76:	2b21      	cmp	r3, #33	; 0x21
 800ef78:	d112      	bne.n	800efa0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7e:	781a      	ldrb	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef8a:	1c5a      	adds	r2, r3, #1
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800ef9e:	e025      	b.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800efa4:	b29b      	uxth	r3, r3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d120      	bne.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
 800efaa:	7bfb      	ldrb	r3, [r7, #15]
 800efac:	2b21      	cmp	r3, #33	; 0x21
 800efae:	d11d      	bne.n	800efec <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	685a      	ldr	r2, [r3, #4]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800efbe:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800efce:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2220      	movs	r2, #32
 800efda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2200      	movs	r2, #0
 800efe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff fe0e 	bl	800ec08 <HAL_I2C_MemTxCpltCallback>
}
 800efec:	bf00      	nop
 800efee:	3710      	adds	r7, #16
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f002:	b2db      	uxtb	r3, r3
 800f004:	2b22      	cmp	r3, #34	; 0x22
 800f006:	f040 80a2 	bne.w	800f14e <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f00e:	b29b      	uxth	r3, r3
 800f010:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2b03      	cmp	r3, #3
 800f016:	d921      	bls.n	800f05c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	691a      	ldr	r2, [r3, #16]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f022:	b2d2      	uxtb	r2, r2
 800f024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f034:	b29b      	uxth	r3, r3
 800f036:	3b01      	subs	r3, #1
 800f038:	b29a      	uxth	r2, r3
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f042:	b29b      	uxth	r3, r3
 800f044:	2b03      	cmp	r3, #3
 800f046:	f040 8082 	bne.w	800f14e <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	685a      	ldr	r2, [r3, #4]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f058:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f05a:	e078      	b.n	800f14e <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f060:	2b02      	cmp	r3, #2
 800f062:	d074      	beq.n	800f14e <I2C_MasterReceive_RXNE+0x15a>
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b01      	cmp	r3, #1
 800f068:	d002      	beq.n	800f070 <I2C_MasterReceive_RXNE+0x7c>
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d16e      	bne.n	800f14e <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f001 fd92 	bl	8010b9a <I2C_WaitOnSTOPRequestThroughIT>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d142      	bne.n	800f102 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	681a      	ldr	r2, [r3, #0]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f08a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	685a      	ldr	r2, [r3, #4]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f09a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	691a      	ldr	r2, [r3, #16]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a6:	b2d2      	uxtb	r2, r2
 800f0a8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ae:	1c5a      	adds	r2, r3, #1
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f0b8:	b29b      	uxth	r3, r3
 800f0ba:	3b01      	subs	r3, #1
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2220      	movs	r2, #32
 800f0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b40      	cmp	r3, #64	; 0x40
 800f0d4:	d10a      	bne.n	800f0ec <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7ff fd99 	bl	800ec1c <HAL_I2C_MemRxCpltCallback>
}
 800f0ea:	e030      	b.n	800f14e <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2212      	movs	r2, #18
 800f0f8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7ff fd4e 	bl	800eb9c <HAL_I2C_MasterRxCpltCallback>
}
 800f100:	e025      	b.n	800f14e <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	685a      	ldr	r2, [r3, #4]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f110:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	691a      	ldr	r2, [r3, #16]
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f11c:	b2d2      	uxtb	r2, r2
 800f11e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f124:	1c5a      	adds	r2, r3, #1
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f12e:	b29b      	uxth	r3, r3
 800f130:	3b01      	subs	r3, #1
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2220      	movs	r2, #32
 800f13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f7ff fd71 	bl	800ec30 <HAL_I2C_ErrorCallback>
}
 800f14e:	bf00      	nop
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}

0800f156 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f156:	b580      	push	{r7, lr}
 800f158:	b084      	sub	sp, #16
 800f15a:	af00      	add	r7, sp, #0
 800f15c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f162:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f168:	b29b      	uxth	r3, r3
 800f16a:	2b04      	cmp	r3, #4
 800f16c:	d11b      	bne.n	800f1a6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f17c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	691a      	ldr	r2, [r3, #16]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f188:	b2d2      	uxtb	r2, r2
 800f18a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f19a:	b29b      	uxth	r3, r3
 800f19c:	3b01      	subs	r3, #1
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f1a4:	e0bd      	b.n	800f322 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	2b03      	cmp	r3, #3
 800f1ae:	d129      	bne.n	800f204 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	685a      	ldr	r2, [r3, #4]
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1be:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	2b04      	cmp	r3, #4
 800f1c4:	d00a      	beq.n	800f1dc <I2C_MasterReceive_BTF+0x86>
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	2b02      	cmp	r3, #2
 800f1ca:	d007      	beq.n	800f1dc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	681a      	ldr	r2, [r3, #0]
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f1da:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	691a      	ldr	r2, [r3, #16]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e6:	b2d2      	uxtb	r2, r2
 800f1e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ee:	1c5a      	adds	r2, r3, #1
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f1f8:	b29b      	uxth	r3, r3
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	b29a      	uxth	r2, r3
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f202:	e08e      	b.n	800f322 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f208:	b29b      	uxth	r3, r3
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d176      	bne.n	800f2fc <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b01      	cmp	r3, #1
 800f212:	d002      	beq.n	800f21a <I2C_MasterReceive_BTF+0xc4>
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b10      	cmp	r3, #16
 800f218:	d108      	bne.n	800f22c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	e019      	b.n	800f260 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	2b04      	cmp	r3, #4
 800f230:	d002      	beq.n	800f238 <I2C_MasterReceive_BTF+0xe2>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b02      	cmp	r3, #2
 800f236:	d108      	bne.n	800f24a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f246:	601a      	str	r2, [r3, #0]
 800f248:	e00a      	b.n	800f260 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	2b10      	cmp	r3, #16
 800f24e:	d007      	beq.n	800f260 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	681a      	ldr	r2, [r3, #0]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f25e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	691a      	ldr	r2, [r3, #16]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f26a:	b2d2      	uxtb	r2, r2
 800f26c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	3b01      	subs	r3, #1
 800f280:	b29a      	uxth	r2, r3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	691a      	ldr	r2, [r3, #16]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f290:	b2d2      	uxtb	r2, r2
 800f292:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	1c5a      	adds	r2, r3, #1
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2a2:	b29b      	uxth	r3, r3
 800f2a4:	3b01      	subs	r3, #1
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	685a      	ldr	r2, [r3, #4]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f2ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2220      	movs	r2, #32
 800f2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	2b40      	cmp	r3, #64	; 0x40
 800f2ce:	d10a      	bne.n	800f2e6 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff fc9c 	bl	800ec1c <HAL_I2C_MemRxCpltCallback>
}
 800f2e4:	e01d      	b.n	800f322 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2212      	movs	r2, #18
 800f2f2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff fc51 	bl	800eb9c <HAL_I2C_MasterRxCpltCallback>
}
 800f2fa:	e012      	b.n	800f322 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	691a      	ldr	r2, [r3, #16]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f306:	b2d2      	uxtb	r2, r2
 800f308:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30e:	1c5a      	adds	r2, r3, #1
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f318:	b29b      	uxth	r3, r3
 800f31a:	3b01      	subs	r3, #1
 800f31c:	b29a      	uxth	r2, r3
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f322:	bf00      	nop
 800f324:	3710      	adds	r7, #16
 800f326:	46bd      	mov	sp, r7
 800f328:	bd80      	pop	{r7, pc}

0800f32a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800f32a:	b480      	push	{r7}
 800f32c:	b083      	sub	sp, #12
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	2b40      	cmp	r3, #64	; 0x40
 800f33c:	d117      	bne.n	800f36e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f342:	2b00      	cmp	r3, #0
 800f344:	d109      	bne.n	800f35a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	461a      	mov	r2, r3
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f356:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800f358:	e067      	b.n	800f42a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	f043 0301 	orr.w	r3, r3, #1
 800f364:	b2da      	uxtb	r2, r3
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	611a      	str	r2, [r3, #16]
}
 800f36c:	e05d      	b.n	800f42a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f376:	d133      	bne.n	800f3e0 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f37e:	b2db      	uxtb	r3, r3
 800f380:	2b21      	cmp	r3, #33	; 0x21
 800f382:	d109      	bne.n	800f398 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	461a      	mov	r2, r3
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f394:	611a      	str	r2, [r3, #16]
 800f396:	e008      	b.n	800f3aa <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	f043 0301 	orr.w	r3, r3, #1
 800f3a2:	b2da      	uxtb	r2, r3
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d004      	beq.n	800f3bc <I2C_Master_SB+0x92>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d108      	bne.n	800f3ce <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d032      	beq.n	800f42a <I2C_Master_SB+0x100>
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d02d      	beq.n	800f42a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	685a      	ldr	r2, [r3, #4]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f3dc:	605a      	str	r2, [r3, #4]
}
 800f3de:	e024      	b.n	800f42a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d10e      	bne.n	800f406 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	11db      	asrs	r3, r3, #7
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	f003 0306 	and.w	r3, r3, #6
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f063 030f 	orn	r3, r3, #15
 800f3fc:	b2da      	uxtb	r2, r3
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	611a      	str	r2, [r3, #16]
}
 800f404:	e011      	b.n	800f42a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	d10d      	bne.n	800f42a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f412:	b29b      	uxth	r3, r3
 800f414:	11db      	asrs	r3, r3, #7
 800f416:	b2db      	uxtb	r3, r3
 800f418:	f003 0306 	and.w	r3, r3, #6
 800f41c:	b2db      	uxtb	r3, r3
 800f41e:	f063 030e 	orn	r3, r3, #14
 800f422:	b2da      	uxtb	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	611a      	str	r2, [r3, #16]
}
 800f42a:	bf00      	nop
 800f42c:	370c      	adds	r7, #12
 800f42e:	46bd      	mov	sp, r7
 800f430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f434:	4770      	bx	lr

0800f436 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f442:	b2da      	uxtb	r2, r3
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d004      	beq.n	800f45c <I2C_Master_ADD10+0x26>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d108      	bne.n	800f46e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f460:	2b00      	cmp	r3, #0
 800f462:	d00c      	beq.n	800f47e <I2C_Master_ADD10+0x48>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d007      	beq.n	800f47e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	685a      	ldr	r2, [r3, #4]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f47c:	605a      	str	r2, [r3, #4]
  }
}
 800f47e:	bf00      	nop
 800f480:	370c      	adds	r7, #12
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr

0800f48a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800f48a:	b480      	push	{r7}
 800f48c:	b091      	sub	sp, #68	; 0x44
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f498:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4a6:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4ae:	b2db      	uxtb	r3, r3
 800f4b0:	2b22      	cmp	r3, #34	; 0x22
 800f4b2:	f040 8169 	bne.w	800f788 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d10f      	bne.n	800f4de <I2C_Master_ADDR+0x54>
 800f4be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f4c2:	2b40      	cmp	r3, #64	; 0x40
 800f4c4:	d10b      	bne.n	800f4de <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60fb      	str	r3, [r7, #12]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	699b      	ldr	r3, [r3, #24]
 800f4d8:	60fb      	str	r3, [r7, #12]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	e160      	b.n	800f7a0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d11d      	bne.n	800f522 <I2C_Master_ADDR+0x98>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	691b      	ldr	r3, [r3, #16]
 800f4ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800f4ee:	d118      	bne.n	800f522 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	613b      	str	r3, [r7, #16]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	613b      	str	r3, [r7, #16]
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	699b      	ldr	r3, [r3, #24]
 800f502:	613b      	str	r3, [r7, #16]
 800f504:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	681a      	ldr	r2, [r3, #0]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f514:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f51a:	1c5a      	adds	r2, r3, #1
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	651a      	str	r2, [r3, #80]	; 0x50
 800f520:	e13e      	b.n	800f7a0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f526:	b29b      	uxth	r3, r3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d113      	bne.n	800f554 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	695b      	ldr	r3, [r3, #20]
 800f536:	617b      	str	r3, [r7, #20]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	699b      	ldr	r3, [r3, #24]
 800f53e:	617b      	str	r3, [r7, #20]
 800f540:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	e115      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f558:	b29b      	uxth	r3, r3
 800f55a:	2b01      	cmp	r3, #1
 800f55c:	f040 808a 	bne.w	800f674 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800f560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f562:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f566:	d137      	bne.n	800f5d8 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f576:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	685b      	ldr	r3, [r3, #4]
 800f57e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f586:	d113      	bne.n	800f5b0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f596:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f598:	2300      	movs	r3, #0
 800f59a:	61bb      	str	r3, [r7, #24]
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	61bb      	str	r3, [r7, #24]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	699b      	ldr	r3, [r3, #24]
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	69bb      	ldr	r3, [r7, #24]
 800f5ae:	e0e7      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61fb      	str	r3, [r7, #28]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	695b      	ldr	r3, [r3, #20]
 800f5ba:	61fb      	str	r3, [r7, #28]
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	61fb      	str	r3, [r7, #28]
 800f5c4:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5d4:	601a      	str	r2, [r3, #0]
 800f5d6:	e0d3      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	2b08      	cmp	r3, #8
 800f5dc:	d02e      	beq.n	800f63c <I2C_Master_ADDR+0x1b2>
 800f5de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e0:	2b20      	cmp	r3, #32
 800f5e2:	d02b      	beq.n	800f63c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800f5e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5e6:	2b12      	cmp	r3, #18
 800f5e8:	d102      	bne.n	800f5f0 <I2C_Master_ADDR+0x166>
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d125      	bne.n	800f63c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f2:	2b04      	cmp	r3, #4
 800f5f4:	d00e      	beq.n	800f614 <I2C_Master_ADDR+0x18a>
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	2b02      	cmp	r3, #2
 800f5fa:	d00b      	beq.n	800f614 <I2C_Master_ADDR+0x18a>
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	2b10      	cmp	r3, #16
 800f600:	d008      	beq.n	800f614 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681a      	ldr	r2, [r3, #0]
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f610:	601a      	str	r2, [r3, #0]
 800f612:	e007      	b.n	800f624 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f622:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f624:	2300      	movs	r3, #0
 800f626:	623b      	str	r3, [r7, #32]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	623b      	str	r3, [r7, #32]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	699b      	ldr	r3, [r3, #24]
 800f636:	623b      	str	r3, [r7, #32]
 800f638:	6a3b      	ldr	r3, [r7, #32]
 800f63a:	e0a1      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f64a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f64c:	2300      	movs	r3, #0
 800f64e:	627b      	str	r3, [r7, #36]	; 0x24
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	627b      	str	r3, [r7, #36]	; 0x24
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	699b      	ldr	r3, [r3, #24]
 800f65e:	627b      	str	r3, [r7, #36]	; 0x24
 800f660:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	681a      	ldr	r2, [r3, #0]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	e085      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f678:	b29b      	uxth	r3, r3
 800f67a:	2b02      	cmp	r3, #2
 800f67c:	d14d      	bne.n	800f71a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	2b04      	cmp	r3, #4
 800f682:	d016      	beq.n	800f6b2 <I2C_Master_ADDR+0x228>
 800f684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f686:	2b02      	cmp	r3, #2
 800f688:	d013      	beq.n	800f6b2 <I2C_Master_ADDR+0x228>
 800f68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68c:	2b10      	cmp	r3, #16
 800f68e:	d010      	beq.n	800f6b2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	681a      	ldr	r2, [r3, #0]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f69e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f6ae:	601a      	str	r2, [r3, #0]
 800f6b0:	e007      	b.n	800f6c2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f6c0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	685b      	ldr	r3, [r3, #4]
 800f6c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6d0:	d117      	bne.n	800f702 <I2C_Master_ADDR+0x278>
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f6d8:	d00b      	beq.n	800f6f2 <I2C_Master_ADDR+0x268>
 800f6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6dc:	2b01      	cmp	r3, #1
 800f6de:	d008      	beq.n	800f6f2 <I2C_Master_ADDR+0x268>
 800f6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e2:	2b08      	cmp	r3, #8
 800f6e4:	d005      	beq.n	800f6f2 <I2C_Master_ADDR+0x268>
 800f6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e8:	2b10      	cmp	r3, #16
 800f6ea:	d002      	beq.n	800f6f2 <I2C_Master_ADDR+0x268>
 800f6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ee:	2b20      	cmp	r3, #32
 800f6f0:	d107      	bne.n	800f702 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f700:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f702:	2300      	movs	r3, #0
 800f704:	62bb      	str	r3, [r7, #40]	; 0x28
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	695b      	ldr	r3, [r3, #20]
 800f70c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	62bb      	str	r3, [r7, #40]	; 0x28
 800f716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f718:	e032      	b.n	800f780 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	681a      	ldr	r2, [r3, #0]
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f728:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f738:	d117      	bne.n	800f76a <I2C_Master_ADDR+0x2e0>
 800f73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f73c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f740:	d00b      	beq.n	800f75a <I2C_Master_ADDR+0x2d0>
 800f742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f744:	2b01      	cmp	r3, #1
 800f746:	d008      	beq.n	800f75a <I2C_Master_ADDR+0x2d0>
 800f748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74a:	2b08      	cmp	r3, #8
 800f74c:	d005      	beq.n	800f75a <I2C_Master_ADDR+0x2d0>
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	2b10      	cmp	r3, #16
 800f752:	d002      	beq.n	800f75a <I2C_Master_ADDR+0x2d0>
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	2b20      	cmp	r3, #32
 800f758:	d107      	bne.n	800f76a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	685a      	ldr	r2, [r3, #4]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f768:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f76a:	2300      	movs	r3, #0
 800f76c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	695b      	ldr	r3, [r3, #20]
 800f774:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	699b      	ldr	r3, [r3, #24]
 800f77c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800f786:	e00b      	b.n	800f7a0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f788:	2300      	movs	r3, #0
 800f78a:	633b      	str	r3, [r7, #48]	; 0x30
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	695b      	ldr	r3, [r3, #20]
 800f792:	633b      	str	r3, [r7, #48]	; 0x30
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	699b      	ldr	r3, [r3, #24]
 800f79a:	633b      	str	r3, [r7, #48]	; 0x30
 800f79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800f79e:	e7ff      	b.n	800f7a0 <I2C_Master_ADDR+0x316>
 800f7a0:	bf00      	nop
 800f7a2:	3744      	adds	r7, #68	; 0x44
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr

0800f7ac <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f7ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d02b      	beq.n	800f81e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7ca:	781a      	ldrb	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7e0:	b29b      	uxth	r3, r3
 800f7e2:	3b01      	subs	r3, #1
 800f7e4:	b29a      	uxth	r2, r3
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d114      	bne.n	800f81e <I2C_SlaveTransmit_TXE+0x72>
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	2b29      	cmp	r3, #41	; 0x29
 800f7f8:	d111      	bne.n	800f81e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	685a      	ldr	r2, [r3, #4]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f808:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2221      	movs	r2, #33	; 0x21
 800f80e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2228      	movs	r2, #40	; 0x28
 800f814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff f9c9 	bl	800ebb0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f81e:	bf00      	nop
 800f820:	3710      	adds	r7, #16
 800f822:	46bd      	mov	sp, r7
 800f824:	bd80      	pop	{r7, pc}

0800f826 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f826:	b480      	push	{r7}
 800f828:	b083      	sub	sp, #12
 800f82a:	af00      	add	r7, sp, #0
 800f82c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f832:	b29b      	uxth	r3, r3
 800f834:	2b00      	cmp	r3, #0
 800f836:	d011      	beq.n	800f85c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83c:	781a      	ldrb	r2, [r3, #0]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f848:	1c5a      	adds	r2, r3, #1
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f852:	b29b      	uxth	r3, r3
 800f854:	3b01      	subs	r3, #1
 800f856:	b29a      	uxth	r2, r3
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f876:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d02c      	beq.n	800f8dc <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	691a      	ldr	r2, [r3, #16]
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	b2d2      	uxtb	r2, r2
 800f88e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	b29a      	uxth	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8ac:	b29b      	uxth	r3, r3
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d114      	bne.n	800f8dc <I2C_SlaveReceive_RXNE+0x74>
 800f8b2:	7bfb      	ldrb	r3, [r7, #15]
 800f8b4:	2b2a      	cmp	r3, #42	; 0x2a
 800f8b6:	d111      	bne.n	800f8dc <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	685a      	ldr	r2, [r3, #4]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f8c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2222      	movs	r2, #34	; 0x22
 800f8cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2228      	movs	r2, #40	; 0x28
 800f8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7ff f974 	bl	800ebc4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800f8dc:	bf00      	nop
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}

0800f8e4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d012      	beq.n	800f91c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	691a      	ldr	r2, [r3, #16]
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f900:	b2d2      	uxtb	r2, r2
 800f902:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f908:	1c5a      	adds	r2, r3, #1
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f912:	b29b      	uxth	r3, r3
 800f914:	3b01      	subs	r3, #1
 800f916:	b29a      	uxth	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800f91c:	bf00      	nop
 800f91e:	370c      	adds	r7, #12
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr

0800f928 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800f932:	2300      	movs	r3, #0
 800f934:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800f942:	2b28      	cmp	r3, #40	; 0x28
 800f944:	d127      	bne.n	800f996 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	685a      	ldr	r2, [r3, #4]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f954:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	089b      	lsrs	r3, r3, #2
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d101      	bne.n	800f966 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800f962:	2301      	movs	r3, #1
 800f964:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	09db      	lsrs	r3, r3, #7
 800f96a:	f003 0301 	and.w	r3, r3, #1
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d103      	bne.n	800f97a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	81bb      	strh	r3, [r7, #12]
 800f978:	e002      	b.n	800f980 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	699b      	ldr	r3, [r3, #24]
 800f97e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800f988:	89ba      	ldrh	r2, [r7, #12]
 800f98a:	7bfb      	ldrb	r3, [r7, #15]
 800f98c:	4619      	mov	r1, r3
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f7ff f922 	bl	800ebd8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800f994:	e00e      	b.n	800f9b4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f996:	2300      	movs	r3, #0
 800f998:	60bb      	str	r3, [r7, #8]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	695b      	ldr	r3, [r3, #20]
 800f9a0:	60bb      	str	r3, [r7, #8]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	699b      	ldr	r3, [r3, #24]
 800f9a8:	60bb      	str	r3, [r7, #8]
 800f9aa:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800f9b4:	bf00      	nop
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f9da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800f9dc:	2300      	movs	r3, #0
 800f9de:	60bb      	str	r3, [r7, #8]
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	695b      	ldr	r3, [r3, #20]
 800f9e6:	60bb      	str	r3, [r7, #8]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	681a      	ldr	r2, [r3, #0]
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	f042 0201 	orr.w	r2, r2, #1
 800f9f6:	601a      	str	r2, [r3, #0]
 800f9f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	681a      	ldr	r2, [r3, #0]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fa14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fa18:	d172      	bne.n	800fb00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fa1a:	7bfb      	ldrb	r3, [r7, #15]
 800fa1c:	2b22      	cmp	r3, #34	; 0x22
 800fa1e:	d002      	beq.n	800fa26 <I2C_Slave_STOPF+0x6a>
 800fa20:	7bfb      	ldrb	r3, [r7, #15]
 800fa22:	2b2a      	cmp	r3, #42	; 0x2a
 800fa24:	d135      	bne.n	800fa92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d005      	beq.n	800fa4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa42:	f043 0204 	orr.w	r2, r3, #4
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	685a      	ldr	r2, [r3, #4]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fa58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa5e:	4618      	mov	r0, r3
 800fa60:	f7f8 f9c1 	bl	8007de6 <HAL_DMA_GetState>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d049      	beq.n	800fafe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6e:	4a69      	ldr	r2, [pc, #420]	; (800fc14 <I2C_Slave_STOPF+0x258>)
 800fa70:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7f7 fe6f 	bl	800775a <HAL_DMA_Abort_IT>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d03d      	beq.n	800fafe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fa8c:	4610      	mov	r0, r2
 800fa8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fa90:	e035      	b.n	800fafe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800faa4:	b29b      	uxth	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d005      	beq.n	800fab6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faae:	f043 0204 	orr.w	r2, r3, #4
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	685a      	ldr	r2, [r3, #4]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faca:	4618      	mov	r0, r3
 800facc:	f7f8 f98b 	bl	8007de6 <HAL_DMA_GetState>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d014      	beq.n	800fb00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fada:	4a4e      	ldr	r2, [pc, #312]	; (800fc14 <I2C_Slave_STOPF+0x258>)
 800fadc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7f7 fe39 	bl	800775a <HAL_DMA_Abort_IT>
 800fae8:	4603      	mov	r3, r0
 800faea:	2b00      	cmp	r3, #0
 800faec:	d008      	beq.n	800fb00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
 800fafc:	e000      	b.n	800fb00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800fafe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb04:	b29b      	uxth	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d03e      	beq.n	800fb88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	695b      	ldr	r3, [r3, #20]
 800fb10:	f003 0304 	and.w	r3, r3, #4
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d112      	bne.n	800fb3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	691a      	ldr	r2, [r3, #16]
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb22:	b2d2      	uxtb	r2, r2
 800fb24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb2a:	1c5a      	adds	r2, r3, #1
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	3b01      	subs	r3, #1
 800fb38:	b29a      	uxth	r2, r3
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb48:	2b40      	cmp	r3, #64	; 0x40
 800fb4a:	d112      	bne.n	800fb72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	691a      	ldr	r2, [r3, #16]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	b2d2      	uxtb	r2, r2
 800fb58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb5e:	1c5a      	adds	r2, r3, #1
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	3b01      	subs	r3, #1
 800fb6c:	b29a      	uxth	r2, r3
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d005      	beq.n	800fb88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb80:	f043 0204 	orr.w	r2, r3, #4
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d003      	beq.n	800fb98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 f8b3 	bl	800fcfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800fb96:	e039      	b.n	800fc0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800fb98:	7bfb      	ldrb	r3, [r7, #15]
 800fb9a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb9c:	d109      	bne.n	800fbb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2228      	movs	r2, #40	; 0x28
 800fba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7ff f809 	bl	800ebc4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fbb8:	b2db      	uxtb	r3, r3
 800fbba:	2b28      	cmp	r3, #40	; 0x28
 800fbbc:	d111      	bne.n	800fbe2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	4a15      	ldr	r2, [pc, #84]	; (800fc18 <I2C_Slave_STOPF+0x25c>)
 800fbc2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2220      	movs	r2, #32
 800fbce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff f80a 	bl	800ebf4 <HAL_I2C_ListenCpltCallback>
}
 800fbe0:	e014      	b.n	800fc0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe6:	2b22      	cmp	r3, #34	; 0x22
 800fbe8:	d002      	beq.n	800fbf0 <I2C_Slave_STOPF+0x234>
 800fbea:	7bfb      	ldrb	r3, [r7, #15]
 800fbec:	2b22      	cmp	r3, #34	; 0x22
 800fbee:	d10d      	bne.n	800fc0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2220      	movs	r2, #32
 800fbfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7fe ffdc 	bl	800ebc4 <HAL_I2C_SlaveRxCpltCallback>
}
 800fc0c:	bf00      	nop
 800fc0e:	3710      	adds	r7, #16
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	08010721 	.word	0x08010721
 800fc18:	ffff0000 	.word	0xffff0000

0800fc1c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b084      	sub	sp, #16
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc2a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc30:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	2b08      	cmp	r3, #8
 800fc36:	d002      	beq.n	800fc3e <I2C_Slave_AF+0x22>
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	2b20      	cmp	r3, #32
 800fc3c:	d129      	bne.n	800fc92 <I2C_Slave_AF+0x76>
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
 800fc40:	2b28      	cmp	r3, #40	; 0x28
 800fc42:	d126      	bne.n	800fc92 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4a2c      	ldr	r2, [pc, #176]	; (800fcf8 <I2C_Slave_AF+0xdc>)
 800fc48:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	685a      	ldr	r2, [r3, #4]
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fc58:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fc62:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fc72:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	2200      	movs	r2, #0
 800fc78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2220      	movs	r2, #32
 800fc7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f7fe ffb2 	bl	800ebf4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800fc90:	e02e      	b.n	800fcf0 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800fc92:	7bfb      	ldrb	r3, [r7, #15]
 800fc94:	2b21      	cmp	r3, #33	; 0x21
 800fc96:	d126      	bne.n	800fce6 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a17      	ldr	r2, [pc, #92]	; (800fcf8 <I2C_Slave_AF+0xdc>)
 800fc9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	2221      	movs	r2, #33	; 0x21
 800fca2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2220      	movs	r2, #32
 800fca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	685a      	ldr	r2, [r3, #4]
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800fcc2:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fccc:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fcdc:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7fe ff66 	bl	800ebb0 <HAL_I2C_SlaveTxCpltCallback>
}
 800fce4:	e004      	b.n	800fcf0 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fcee:	615a      	str	r2, [r3, #20]
}
 800fcf0:	bf00      	nop
 800fcf2:	3710      	adds	r7, #16
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}
 800fcf8:	ffff0000 	.word	0xffff0000

0800fcfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b084      	sub	sp, #16
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fd0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	2b10      	cmp	r3, #16
 800fd18:	d002      	beq.n	800fd20 <I2C_ITError+0x24>
 800fd1a:	7bbb      	ldrb	r3, [r7, #14]
 800fd1c:	2b40      	cmp	r3, #64	; 0x40
 800fd1e:	d10a      	bne.n	800fd36 <I2C_ITError+0x3a>
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	2b22      	cmp	r3, #34	; 0x22
 800fd24:	d107      	bne.n	800fd36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fd36:	7bfb      	ldrb	r3, [r7, #15]
 800fd38:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fd3c:	2b28      	cmp	r3, #40	; 0x28
 800fd3e:	d107      	bne.n	800fd50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2228      	movs	r2, #40	; 0x28
 800fd4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800fd4e:	e015      	b.n	800fd7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd5e:	d00a      	beq.n	800fd76 <I2C_ITError+0x7a>
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2b60      	cmp	r3, #96	; 0x60
 800fd64:	d007      	beq.n	800fd76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2220      	movs	r2, #32
 800fd6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	2200      	movs	r2, #0
 800fd72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	2200      	movs	r2, #0
 800fd7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	685b      	ldr	r3, [r3, #4]
 800fd82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd8a:	d162      	bne.n	800fe52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fd9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fda0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	2b01      	cmp	r3, #1
 800fda8:	d020      	beq.n	800fdec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdae:	4a6a      	ldr	r2, [pc, #424]	; (800ff58 <I2C_ITError+0x25c>)
 800fdb0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f7f7 fccf 	bl	800775a <HAL_DMA_Abort_IT>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f000 8089 	beq.w	800fed6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	681a      	ldr	r2, [r3, #0]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	f022 0201 	bic.w	r2, r2, #1
 800fdd2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	2220      	movs	r2, #32
 800fdd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fde0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fde6:	4610      	mov	r0, r2
 800fde8:	4798      	blx	r3
 800fdea:	e074      	b.n	800fed6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf0:	4a59      	ldr	r2, [pc, #356]	; (800ff58 <I2C_ITError+0x25c>)
 800fdf2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7f7 fcae 	bl	800775a <HAL_DMA_Abort_IT>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d068      	beq.n	800fed6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	695b      	ldr	r3, [r3, #20]
 800fe0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe0e:	2b40      	cmp	r3, #64	; 0x40
 800fe10:	d10b      	bne.n	800fe2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	691a      	ldr	r2, [r3, #16]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe1c:	b2d2      	uxtb	r2, r2
 800fe1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe24:	1c5a      	adds	r2, r3, #1
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	f022 0201 	bic.w	r2, r2, #1
 800fe38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2220      	movs	r2, #32
 800fe3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fe4c:	4610      	mov	r0, r2
 800fe4e:	4798      	blx	r3
 800fe50:	e041      	b.n	800fed6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe58:	b2db      	uxtb	r3, r3
 800fe5a:	2b60      	cmp	r3, #96	; 0x60
 800fe5c:	d125      	bne.n	800feaa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2200      	movs	r2, #0
 800fe6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe76:	2b40      	cmp	r3, #64	; 0x40
 800fe78:	d10b      	bne.n	800fe92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	691a      	ldr	r2, [r3, #16]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe84:	b2d2      	uxtb	r2, r2
 800fe86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f022 0201 	bic.w	r2, r2, #1
 800fea0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7fe fece 	bl	800ec44 <HAL_I2C_AbortCpltCallback>
 800fea8:	e015      	b.n	800fed6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	695b      	ldr	r3, [r3, #20]
 800feb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb4:	2b40      	cmp	r3, #64	; 0x40
 800feb6:	d10b      	bne.n	800fed0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	691a      	ldr	r2, [r3, #16]
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	b2d2      	uxtb	r2, r2
 800fec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feca:	1c5a      	adds	r2, r3, #1
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800fed0:	6878      	ldr	r0, [r7, #4]
 800fed2:	f7fe fead 	bl	800ec30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	f003 0301 	and.w	r3, r3, #1
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d10e      	bne.n	800ff04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800feec:	2b00      	cmp	r3, #0
 800feee:	d109      	bne.n	800ff04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d104      	bne.n	800ff04 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d007      	beq.n	800ff14 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	685a      	ldr	r2, [r3, #4]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ff12:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff20:	f003 0304 	and.w	r3, r3, #4
 800ff24:	2b04      	cmp	r3, #4
 800ff26:	d113      	bne.n	800ff50 <I2C_ITError+0x254>
 800ff28:	7bfb      	ldrb	r3, [r7, #15]
 800ff2a:	2b28      	cmp	r3, #40	; 0x28
 800ff2c:	d110      	bne.n	800ff50 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4a0a      	ldr	r2, [pc, #40]	; (800ff5c <I2C_ITError+0x260>)
 800ff32:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2200      	movs	r2, #0
 800ff38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800ff4a:	6878      	ldr	r0, [r7, #4]
 800ff4c:	f7fe fe52 	bl	800ebf4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ff50:	bf00      	nop
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	08010721 	.word	0x08010721
 800ff5c:	ffff0000 	.word	0xffff0000

0800ff60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af02      	add	r7, sp, #8
 800ff66:	60f8      	str	r0, [r7, #12]
 800ff68:	607a      	str	r2, [r7, #4]
 800ff6a:	603b      	str	r3, [r7, #0]
 800ff6c:	460b      	mov	r3, r1
 800ff6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	2b08      	cmp	r3, #8
 800ff7a:	d006      	beq.n	800ff8a <I2C_MasterRequestWrite+0x2a>
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d003      	beq.n	800ff8a <I2C_MasterRequestWrite+0x2a>
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ff88:	d108      	bne.n	800ff9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	681a      	ldr	r2, [r3, #0]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff98:	601a      	str	r2, [r3, #0]
 800ff9a:	e00b      	b.n	800ffb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffa0:	2b12      	cmp	r3, #18
 800ffa2:	d107      	bne.n	800ffb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	681a      	ldr	r2, [r3, #0]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ffb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	9300      	str	r3, [sp, #0]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2200      	movs	r2, #0
 800ffbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f000 fc55 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d00d      	beq.n	800ffe8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffda:	d103      	bne.n	800ffe4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffe2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e035      	b.n	8010054 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	691b      	ldr	r3, [r3, #16]
 800ffec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fff0:	d108      	bne.n	8010004 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800fff2:	897b      	ldrh	r3, [r7, #10]
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	461a      	mov	r2, r3
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010000:	611a      	str	r2, [r3, #16]
 8010002:	e01b      	b.n	801003c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010004:	897b      	ldrh	r3, [r7, #10]
 8010006:	11db      	asrs	r3, r3, #7
 8010008:	b2db      	uxtb	r3, r3
 801000a:	f003 0306 	and.w	r3, r3, #6
 801000e:	b2db      	uxtb	r3, r3
 8010010:	f063 030f 	orn	r3, r3, #15
 8010014:	b2da      	uxtb	r2, r3
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	490e      	ldr	r1, [pc, #56]	; (801005c <I2C_MasterRequestWrite+0xfc>)
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f000 fc7b 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010028:	4603      	mov	r3, r0
 801002a:	2b00      	cmp	r3, #0
 801002c:	d001      	beq.n	8010032 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 801002e:	2301      	movs	r3, #1
 8010030:	e010      	b.n	8010054 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010032:	897b      	ldrh	r3, [r7, #10]
 8010034:	b2da      	uxtb	r2, r3
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	4907      	ldr	r1, [pc, #28]	; (8010060 <I2C_MasterRequestWrite+0x100>)
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f000 fc6b 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010048:	4603      	mov	r3, r0
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 801004e:	2301      	movs	r3, #1
 8010050:	e000      	b.n	8010054 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010052:	2300      	movs	r3, #0
}
 8010054:	4618      	mov	r0, r3
 8010056:	3718      	adds	r7, #24
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}
 801005c:	00010008 	.word	0x00010008
 8010060:	00010002 	.word	0x00010002

08010064 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af02      	add	r7, sp, #8
 801006a:	60f8      	str	r0, [r7, #12]
 801006c:	607a      	str	r2, [r7, #4]
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	460b      	mov	r3, r1
 8010072:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010078:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	681a      	ldr	r2, [r3, #0]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010088:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	2b08      	cmp	r3, #8
 801008e:	d006      	beq.n	801009e <I2C_MasterRequestRead+0x3a>
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d003      	beq.n	801009e <I2C_MasterRequestRead+0x3a>
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 801009c:	d108      	bne.n	80100b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	e00b      	b.n	80100c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100b4:	2b11      	cmp	r3, #17
 80100b6:	d107      	bne.n	80100c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	681a      	ldr	r2, [r3, #0]
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	9300      	str	r3, [sp, #0]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f000 fbcb 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 80100da:	4603      	mov	r3, r0
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00d      	beq.n	80100fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100ee:	d103      	bne.n	80100f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80100f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80100f8:	2303      	movs	r3, #3
 80100fa:	e079      	b.n	80101f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	691b      	ldr	r3, [r3, #16]
 8010100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010104:	d108      	bne.n	8010118 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8010106:	897b      	ldrh	r3, [r7, #10]
 8010108:	b2db      	uxtb	r3, r3
 801010a:	f043 0301 	orr.w	r3, r3, #1
 801010e:	b2da      	uxtb	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	611a      	str	r2, [r3, #16]
 8010116:	e05f      	b.n	80101d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010118:	897b      	ldrh	r3, [r7, #10]
 801011a:	11db      	asrs	r3, r3, #7
 801011c:	b2db      	uxtb	r3, r3
 801011e:	f003 0306 	and.w	r3, r3, #6
 8010122:	b2db      	uxtb	r3, r3
 8010124:	f063 030f 	orn	r3, r3, #15
 8010128:	b2da      	uxtb	r2, r3
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	687a      	ldr	r2, [r7, #4]
 8010134:	4930      	ldr	r1, [pc, #192]	; (80101f8 <I2C_MasterRequestRead+0x194>)
 8010136:	68f8      	ldr	r0, [r7, #12]
 8010138:	f000 fbf1 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010142:	2301      	movs	r3, #1
 8010144:	e054      	b.n	80101f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010146:	897b      	ldrh	r3, [r7, #10]
 8010148:	b2da      	uxtb	r2, r3
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010150:	683b      	ldr	r3, [r7, #0]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	4929      	ldr	r1, [pc, #164]	; (80101fc <I2C_MasterRequestRead+0x198>)
 8010156:	68f8      	ldr	r0, [r7, #12]
 8010158:	f000 fbe1 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	e044      	b.n	80101f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010166:	2300      	movs	r3, #0
 8010168:	613b      	str	r3, [r7, #16]
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	695b      	ldr	r3, [r3, #20]
 8010170:	613b      	str	r3, [r7, #16]
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	699b      	ldr	r3, [r3, #24]
 8010178:	613b      	str	r3, [r7, #16]
 801017a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801018a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	9300      	str	r3, [sp, #0]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	2200      	movs	r2, #0
 8010194:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010198:	68f8      	ldr	r0, [r7, #12]
 801019a:	f000 fb69 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 801019e:	4603      	mov	r3, r0
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d00d      	beq.n	80101c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80101b2:	d103      	bne.n	80101bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80101ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80101bc:	2303      	movs	r3, #3
 80101be:	e017      	b.n	80101f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80101c0:	897b      	ldrh	r3, [r7, #10]
 80101c2:	11db      	asrs	r3, r3, #7
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	f003 0306 	and.w	r3, r3, #6
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	f063 030e 	orn	r3, r3, #14
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	4907      	ldr	r1, [pc, #28]	; (80101fc <I2C_MasterRequestRead+0x198>)
 80101de:	68f8      	ldr	r0, [r7, #12]
 80101e0:	f000 fb9d 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80101e4:	4603      	mov	r3, r0
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80101ea:	2301      	movs	r3, #1
 80101ec:	e000      	b.n	80101f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80101ee:	2300      	movs	r3, #0
}
 80101f0:	4618      	mov	r0, r3
 80101f2:	3718      	adds	r7, #24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	00010008 	.word	0x00010008
 80101fc:	00010002 	.word	0x00010002

08010200 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b088      	sub	sp, #32
 8010204:	af02      	add	r7, sp, #8
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	4608      	mov	r0, r1
 801020a:	4611      	mov	r1, r2
 801020c:	461a      	mov	r2, r3
 801020e:	4603      	mov	r3, r0
 8010210:	817b      	strh	r3, [r7, #10]
 8010212:	460b      	mov	r3, r1
 8010214:	813b      	strh	r3, [r7, #8]
 8010216:	4613      	mov	r3, r2
 8010218:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010228:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801022a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022c:	9300      	str	r3, [sp, #0]
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	2200      	movs	r2, #0
 8010232:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f000 fb1a 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 801023c:	4603      	mov	r3, r0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d00d      	beq.n	801025e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801024c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010250:	d103      	bne.n	801025a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010258:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801025a:	2303      	movs	r3, #3
 801025c:	e05f      	b.n	801031e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801025e:	897b      	ldrh	r3, [r7, #10]
 8010260:	b2db      	uxtb	r3, r3
 8010262:	461a      	mov	r2, r3
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801026c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801026e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010270:	6a3a      	ldr	r2, [r7, #32]
 8010272:	492d      	ldr	r1, [pc, #180]	; (8010328 <I2C_RequestMemoryWrite+0x128>)
 8010274:	68f8      	ldr	r0, [r7, #12]
 8010276:	f000 fb52 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801027a:	4603      	mov	r3, r0
 801027c:	2b00      	cmp	r3, #0
 801027e:	d001      	beq.n	8010284 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8010280:	2301      	movs	r3, #1
 8010282:	e04c      	b.n	801031e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8010284:	2300      	movs	r3, #0
 8010286:	617b      	str	r3, [r7, #20]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	695b      	ldr	r3, [r3, #20]
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	617b      	str	r3, [r7, #20]
 8010298:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801029a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801029c:	6a39      	ldr	r1, [r7, #32]
 801029e:	68f8      	ldr	r0, [r7, #12]
 80102a0:	f000 fbbc 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80102a4:	4603      	mov	r3, r0
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00d      	beq.n	80102c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d107      	bne.n	80102c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681a      	ldr	r2, [r3, #0]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80102c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	e02b      	b.n	801031e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80102c6:	88fb      	ldrh	r3, [r7, #6]
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d105      	bne.n	80102d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80102cc:	893b      	ldrh	r3, [r7, #8]
 80102ce:	b2da      	uxtb	r2, r3
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	611a      	str	r2, [r3, #16]
 80102d6:	e021      	b.n	801031c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80102d8:	893b      	ldrh	r3, [r7, #8]
 80102da:	0a1b      	lsrs	r3, r3, #8
 80102dc:	b29b      	uxth	r3, r3
 80102de:	b2da      	uxtb	r2, r3
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80102e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102e8:	6a39      	ldr	r1, [r7, #32]
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 fb96 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00d      	beq.n	8010312 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fa:	2b04      	cmp	r3, #4
 80102fc:	d107      	bne.n	801030e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801030c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801030e:	2301      	movs	r3, #1
 8010310:	e005      	b.n	801031e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010312:	893b      	ldrh	r3, [r7, #8]
 8010314:	b2da      	uxtb	r2, r3
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3718      	adds	r7, #24
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}
 8010326:	bf00      	nop
 8010328:	00010002 	.word	0x00010002

0801032c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af02      	add	r7, sp, #8
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	4608      	mov	r0, r1
 8010336:	4611      	mov	r1, r2
 8010338:	461a      	mov	r2, r3
 801033a:	4603      	mov	r3, r0
 801033c:	817b      	strh	r3, [r7, #10]
 801033e:	460b      	mov	r3, r1
 8010340:	813b      	strh	r3, [r7, #8]
 8010342:	4613      	mov	r3, r2
 8010344:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	681a      	ldr	r2, [r3, #0]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010354:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	681a      	ldr	r2, [r3, #0]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010368:	9300      	str	r3, [sp, #0]
 801036a:	6a3b      	ldr	r3, [r7, #32]
 801036c:	2200      	movs	r2, #0
 801036e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010372:	68f8      	ldr	r0, [r7, #12]
 8010374:	f000 fa7c 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d00d      	beq.n	801039a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801038c:	d103      	bne.n	8010396 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010396:	2303      	movs	r3, #3
 8010398:	e0aa      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801039a:	897b      	ldrh	r3, [r7, #10]
 801039c:	b2db      	uxtb	r3, r3
 801039e:	461a      	mov	r2, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80103a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	6a3a      	ldr	r2, [r7, #32]
 80103ae:	4952      	ldr	r1, [pc, #328]	; (80104f8 <I2C_RequestMemoryRead+0x1cc>)
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f000 fab4 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80103bc:	2301      	movs	r3, #1
 80103be:	e097      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80103c0:	2300      	movs	r3, #0
 80103c2:	617b      	str	r3, [r7, #20]
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	617b      	str	r3, [r7, #20]
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	699b      	ldr	r3, [r3, #24]
 80103d2:	617b      	str	r3, [r7, #20]
 80103d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80103d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103d8:	6a39      	ldr	r1, [r7, #32]
 80103da:	68f8      	ldr	r0, [r7, #12]
 80103dc:	f000 fb1e 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 80103e0:	4603      	mov	r3, r0
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00d      	beq.n	8010402 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103ea:	2b04      	cmp	r3, #4
 80103ec:	d107      	bne.n	80103fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80103fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80103fe:	2301      	movs	r3, #1
 8010400:	e076      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010402:	88fb      	ldrh	r3, [r7, #6]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d105      	bne.n	8010414 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010408:	893b      	ldrh	r3, [r7, #8]
 801040a:	b2da      	uxtb	r2, r3
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	611a      	str	r2, [r3, #16]
 8010412:	e021      	b.n	8010458 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010414:	893b      	ldrh	r3, [r7, #8]
 8010416:	0a1b      	lsrs	r3, r3, #8
 8010418:	b29b      	uxth	r3, r3
 801041a:	b2da      	uxtb	r2, r3
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010424:	6a39      	ldr	r1, [r7, #32]
 8010426:	68f8      	ldr	r0, [r7, #12]
 8010428:	f000 faf8 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d00d      	beq.n	801044e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010436:	2b04      	cmp	r3, #4
 8010438:	d107      	bne.n	801044a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	e050      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801044e:	893b      	ldrh	r3, [r7, #8]
 8010450:	b2da      	uxtb	r2, r3
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801045a:	6a39      	ldr	r1, [r7, #32]
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f000 fadd 	bl	8010a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00d      	beq.n	8010484 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801046c:	2b04      	cmp	r3, #4
 801046e:	d107      	bne.n	8010480 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801047e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010480:	2301      	movs	r3, #1
 8010482:	e035      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	681a      	ldr	r2, [r3, #0]
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010492:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8010494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010496:	9300      	str	r3, [sp, #0]
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	2200      	movs	r2, #0
 801049c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80104a0:	68f8      	ldr	r0, [r7, #12]
 80104a2:	f000 f9e5 	bl	8010870 <I2C_WaitOnFlagUntilTimeout>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00d      	beq.n	80104c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80104ba:	d103      	bne.n	80104c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80104c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80104c4:	2303      	movs	r3, #3
 80104c6:	e013      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80104c8:	897b      	ldrh	r3, [r7, #10]
 80104ca:	b2db      	uxtb	r3, r3
 80104cc:	f043 0301 	orr.w	r3, r3, #1
 80104d0:	b2da      	uxtb	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80104d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104da:	6a3a      	ldr	r2, [r7, #32]
 80104dc:	4906      	ldr	r1, [pc, #24]	; (80104f8 <I2C_RequestMemoryRead+0x1cc>)
 80104de:	68f8      	ldr	r0, [r7, #12]
 80104e0:	f000 fa1d 	bl	801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80104ee:	2300      	movs	r3, #0
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3718      	adds	r7, #24
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}
 80104f8:	00010002 	.word	0x00010002

080104fc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b086      	sub	sp, #24
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010508:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010510:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010512:	697b      	ldr	r3, [r7, #20]
 8010514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010518:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801051e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	685a      	ldr	r2, [r3, #4]
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801052e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010534:	2b00      	cmp	r3, #0
 8010536:	d003      	beq.n	8010540 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010538:	697b      	ldr	r3, [r7, #20]
 801053a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801053c:	2200      	movs	r2, #0
 801053e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010544:	2b00      	cmp	r3, #0
 8010546:	d003      	beq.n	8010550 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801054c:	2200      	movs	r2, #0
 801054e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010550:	7cfb      	ldrb	r3, [r7, #19]
 8010552:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010556:	2b21      	cmp	r3, #33	; 0x21
 8010558:	d007      	beq.n	801056a <I2C_DMAXferCplt+0x6e>
 801055a:	7cfb      	ldrb	r3, [r7, #19]
 801055c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010560:	2b22      	cmp	r3, #34	; 0x22
 8010562:	d131      	bne.n	80105c8 <I2C_DMAXferCplt+0xcc>
 8010564:	7cbb      	ldrb	r3, [r7, #18]
 8010566:	2b20      	cmp	r3, #32
 8010568:	d12e      	bne.n	80105c8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	685a      	ldr	r2, [r3, #4]
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010578:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	2200      	movs	r2, #0
 801057e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010580:	7cfb      	ldrb	r3, [r7, #19]
 8010582:	2b29      	cmp	r3, #41	; 0x29
 8010584:	d10a      	bne.n	801059c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2221      	movs	r2, #33	; 0x21
 801058a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	2228      	movs	r2, #40	; 0x28
 8010590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010594:	6978      	ldr	r0, [r7, #20]
 8010596:	f7fe fb0b 	bl	800ebb0 <HAL_I2C_SlaveTxCpltCallback>
 801059a:	e00c      	b.n	80105b6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 801059c:	7cfb      	ldrb	r3, [r7, #19]
 801059e:	2b2a      	cmp	r3, #42	; 0x2a
 80105a0:	d109      	bne.n	80105b6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	2222      	movs	r2, #34	; 0x22
 80105a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80105a8:	697b      	ldr	r3, [r7, #20]
 80105aa:	2228      	movs	r2, #40	; 0x28
 80105ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80105b0:	6978      	ldr	r0, [r7, #20]
 80105b2:	f7fe fb07 	bl	800ebc4 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	685a      	ldr	r2, [r3, #4]
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80105c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80105c6:	e06a      	b.n	801069e <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d064      	beq.n	801069e <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80105d8:	b29b      	uxth	r3, r3
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d107      	bne.n	80105ee <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	681a      	ldr	r2, [r3, #0]
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105ec:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	685a      	ldr	r2, [r3, #4]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80105fc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010604:	d009      	beq.n	801061a <I2C_DMAXferCplt+0x11e>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	2b08      	cmp	r3, #8
 801060a:	d006      	beq.n	801061a <I2C_DMAXferCplt+0x11e>
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010612:	d002      	beq.n	801061a <I2C_DMAXferCplt+0x11e>
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	2b20      	cmp	r3, #32
 8010618:	d107      	bne.n	801062a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	681a      	ldr	r2, [r3, #0]
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010628:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 801062a:	697b      	ldr	r3, [r7, #20]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	685a      	ldr	r2, [r3, #4]
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010638:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	685a      	ldr	r2, [r3, #4]
 8010640:	697b      	ldr	r3, [r7, #20]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010648:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 801064a:	697b      	ldr	r3, [r7, #20]
 801064c:	2200      	movs	r2, #0
 801064e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010654:	2b00      	cmp	r3, #0
 8010656:	d003      	beq.n	8010660 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010658:	6978      	ldr	r0, [r7, #20]
 801065a:	f7fe fae9 	bl	800ec30 <HAL_I2C_ErrorCallback>
}
 801065e:	e01e      	b.n	801069e <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	2220      	movs	r2, #32
 8010664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010668:	697b      	ldr	r3, [r7, #20]
 801066a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b40      	cmp	r3, #64	; 0x40
 8010672:	d10a      	bne.n	801068a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	2200      	movs	r2, #0
 8010678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	2200      	movs	r2, #0
 8010680:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010682:	6978      	ldr	r0, [r7, #20]
 8010684:	f7fe faca 	bl	800ec1c <HAL_I2C_MemRxCpltCallback>
}
 8010688:	e009      	b.n	801069e <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	2200      	movs	r2, #0
 801068e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	2212      	movs	r2, #18
 8010696:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010698:	6978      	ldr	r0, [r7, #20]
 801069a:	f7fe fa7f 	bl	800eb9c <HAL_I2C_MasterRxCpltCallback>
}
 801069e:	bf00      	nop
 80106a0:	3718      	adds	r7, #24
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}

080106a6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80106a6:	b580      	push	{r7, lr}
 80106a8:	b084      	sub	sp, #16
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106b2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d003      	beq.n	80106c4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c0:	2200      	movs	r2, #0
 80106c2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d003      	beq.n	80106d4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106d0:	2200      	movs	r2, #0
 80106d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f7f7 fb94 	bl	8007e02 <HAL_DMA_GetError>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b02      	cmp	r3, #2
 80106de:	d01b      	beq.n	8010718 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	681a      	ldr	r2, [r3, #0]
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106ee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2200      	movs	r2, #0
 80106f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	2220      	movs	r2, #32
 80106fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	2200      	movs	r2, #0
 8010702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801070a:	f043 0210 	orr.w	r2, r3, #16
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f7fe fa8c 	bl	800ec30 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010718:	bf00      	nop
 801071a:	3710      	adds	r7, #16
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b086      	sub	sp, #24
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010728:	2300      	movs	r3, #0
 801072a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010730:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010738:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 801073a:	4b4b      	ldr	r3, [pc, #300]	; (8010868 <I2C_DMAAbort+0x148>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	08db      	lsrs	r3, r3, #3
 8010740:	4a4a      	ldr	r2, [pc, #296]	; (801086c <I2C_DMAAbort+0x14c>)
 8010742:	fba2 2303 	umull	r2, r3, r2, r3
 8010746:	0a1a      	lsrs	r2, r3, #8
 8010748:	4613      	mov	r3, r2
 801074a:	009b      	lsls	r3, r3, #2
 801074c:	4413      	add	r3, r2
 801074e:	00da      	lsls	r2, r3, #3
 8010750:	1ad3      	subs	r3, r2, r3
 8010752:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801075e:	f043 0220 	orr.w	r2, r3, #32
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010766:	e00a      	b.n	801077e <I2C_DMAAbort+0x5e>
    }
    count--;
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	3b01      	subs	r3, #1
 801076c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801077c:	d0ea      	beq.n	8010754 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010782:	2b00      	cmp	r3, #0
 8010784:	d003      	beq.n	801078e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801078a:	2200      	movs	r2, #0
 801078c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010792:	2b00      	cmp	r3, #0
 8010794:	d003      	beq.n	801079e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079a:	2200      	movs	r2, #0
 801079c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	681a      	ldr	r2, [r3, #0]
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80107ac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	2200      	movs	r2, #0
 80107b2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d003      	beq.n	80107c4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107c0:	2200      	movs	r2, #0
 80107c2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d003      	beq.n	80107d4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107d0:	2200      	movs	r2, #0
 80107d2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f022 0201 	bic.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80107ea:	b2db      	uxtb	r3, r3
 80107ec:	2b60      	cmp	r3, #96	; 0x60
 80107ee:	d10e      	bne.n	801080e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80107f0:	697b      	ldr	r3, [r7, #20]
 80107f2:	2220      	movs	r2, #32
 80107f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2200      	movs	r2, #0
 80107fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	2200      	movs	r2, #0
 8010804:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010806:	6978      	ldr	r0, [r7, #20]
 8010808:	f7fe fa1c 	bl	800ec44 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 801080c:	e027      	b.n	801085e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801080e:	7cfb      	ldrb	r3, [r7, #19]
 8010810:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010814:	2b28      	cmp	r3, #40	; 0x28
 8010816:	d117      	bne.n	8010848 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	f042 0201 	orr.w	r2, r2, #1
 8010826:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	681a      	ldr	r2, [r3, #0]
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010836:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	2200      	movs	r2, #0
 801083c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2228      	movs	r2, #40	; 0x28
 8010842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010846:	e007      	b.n	8010858 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	2220      	movs	r2, #32
 801084c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	2200      	movs	r2, #0
 8010854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010858:	6978      	ldr	r0, [r7, #20]
 801085a:	f7fe f9e9 	bl	800ec30 <HAL_I2C_ErrorCallback>
}
 801085e:	bf00      	nop
 8010860:	3718      	adds	r7, #24
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}
 8010866:	bf00      	nop
 8010868:	20000058 	.word	0x20000058
 801086c:	14f8b589 	.word	0x14f8b589

08010870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	60f8      	str	r0, [r7, #12]
 8010878:	60b9      	str	r1, [r7, #8]
 801087a:	603b      	str	r3, [r7, #0]
 801087c:	4613      	mov	r3, r2
 801087e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010880:	e025      	b.n	80108ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010888:	d021      	beq.n	80108ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801088a:	f7f5 fc35 	bl	80060f8 <HAL_GetTick>
 801088e:	4602      	mov	r2, r0
 8010890:	69bb      	ldr	r3, [r7, #24]
 8010892:	1ad3      	subs	r3, r2, r3
 8010894:	683a      	ldr	r2, [r7, #0]
 8010896:	429a      	cmp	r2, r3
 8010898:	d302      	bcc.n	80108a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d116      	bne.n	80108ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	2200      	movs	r2, #0
 80108a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2220      	movs	r2, #32
 80108aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ba:	f043 0220 	orr.w	r2, r3, #32
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2200      	movs	r2, #0
 80108c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80108ca:	2301      	movs	r3, #1
 80108cc:	e023      	b.n	8010916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	0c1b      	lsrs	r3, r3, #16
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d10d      	bne.n	80108f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	695b      	ldr	r3, [r3, #20]
 80108de:	43da      	mvns	r2, r3
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	4013      	ands	r3, r2
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	bf0c      	ite	eq
 80108ea:	2301      	moveq	r3, #1
 80108ec:	2300      	movne	r3, #0
 80108ee:	b2db      	uxtb	r3, r3
 80108f0:	461a      	mov	r2, r3
 80108f2:	e00c      	b.n	801090e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	43da      	mvns	r2, r3
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	4013      	ands	r3, r2
 8010900:	b29b      	uxth	r3, r3
 8010902:	2b00      	cmp	r3, #0
 8010904:	bf0c      	ite	eq
 8010906:	2301      	moveq	r3, #1
 8010908:	2300      	movne	r3, #0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	461a      	mov	r2, r3
 801090e:	79fb      	ldrb	r3, [r7, #7]
 8010910:	429a      	cmp	r2, r3
 8010912:	d0b6      	beq.n	8010882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010914:	2300      	movs	r3, #0
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}

0801091e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 801091e:	b580      	push	{r7, lr}
 8010920:	b084      	sub	sp, #16
 8010922:	af00      	add	r7, sp, #0
 8010924:	60f8      	str	r0, [r7, #12]
 8010926:	60b9      	str	r1, [r7, #8]
 8010928:	607a      	str	r2, [r7, #4]
 801092a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801092c:	e051      	b.n	80109d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801093c:	d123      	bne.n	8010986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	681a      	ldr	r2, [r3, #0]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801094c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2200      	movs	r2, #0
 801095c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2220      	movs	r2, #32
 8010962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2200      	movs	r2, #0
 801096a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010972:	f043 0204 	orr.w	r2, r3, #4
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	2200      	movs	r2, #0
 801097e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	e046      	b.n	8010a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801098c:	d021      	beq.n	80109d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801098e:	f7f5 fbb3 	bl	80060f8 <HAL_GetTick>
 8010992:	4602      	mov	r2, r0
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	687a      	ldr	r2, [r7, #4]
 801099a:	429a      	cmp	r2, r3
 801099c:	d302      	bcc.n	80109a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d116      	bne.n	80109d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	2200      	movs	r2, #0
 80109a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2220      	movs	r2, #32
 80109ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2200      	movs	r2, #0
 80109b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109be:	f043 0220 	orr.w	r2, r3, #32
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80109ce:	2301      	movs	r3, #1
 80109d0:	e020      	b.n	8010a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	0c1b      	lsrs	r3, r3, #16
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d10c      	bne.n	80109f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	695b      	ldr	r3, [r3, #20]
 80109e2:	43da      	mvns	r2, r3
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	4013      	ands	r3, r2
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	bf14      	ite	ne
 80109ee:	2301      	movne	r3, #1
 80109f0:	2300      	moveq	r3, #0
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	e00b      	b.n	8010a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	699b      	ldr	r3, [r3, #24]
 80109fc:	43da      	mvns	r2, r3
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	4013      	ands	r3, r2
 8010a02:	b29b      	uxth	r3, r3
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	bf14      	ite	ne
 8010a08:	2301      	movne	r3, #1
 8010a0a:	2300      	moveq	r3, #0
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d18d      	bne.n	801092e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8010a12:	2300      	movs	r3, #0
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3710      	adds	r7, #16
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}

08010a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010a28:	e02d      	b.n	8010a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010a2a:	68f8      	ldr	r0, [r7, #12]
 8010a2c:	f000 f93e 	bl	8010cac <I2C_IsAcknowledgeFailed>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d001      	beq.n	8010a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	e02d      	b.n	8010a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a40:	d021      	beq.n	8010a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010a42:	f7f5 fb59 	bl	80060f8 <HAL_GetTick>
 8010a46:	4602      	mov	r2, r0
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	1ad3      	subs	r3, r2, r3
 8010a4c:	68ba      	ldr	r2, [r7, #8]
 8010a4e:	429a      	cmp	r2, r3
 8010a50:	d302      	bcc.n	8010a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d116      	bne.n	8010a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2220      	movs	r2, #32
 8010a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a72:	f043 0220 	orr.w	r2, r3, #32
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e007      	b.n	8010a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	695b      	ldr	r3, [r3, #20]
 8010a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a90:	2b80      	cmp	r3, #128	; 0x80
 8010a92:	d1ca      	bne.n	8010a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010a94:	2300      	movs	r3, #0
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b084      	sub	sp, #16
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	60f8      	str	r0, [r7, #12]
 8010aa6:	60b9      	str	r1, [r7, #8]
 8010aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010aaa:	e02d      	b.n	8010b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f000 f8fd 	bl	8010cac <I2C_IsAcknowledgeFailed>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010ab8:	2301      	movs	r3, #1
 8010aba:	e02d      	b.n	8010b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac2:	d021      	beq.n	8010b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ac4:	f7f5 fb18 	bl	80060f8 <HAL_GetTick>
 8010ac8:	4602      	mov	r2, r0
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	68ba      	ldr	r2, [r7, #8]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d302      	bcc.n	8010ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d116      	bne.n	8010b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2200      	movs	r2, #0
 8010ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2220      	movs	r2, #32
 8010ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2200      	movs	r2, #0
 8010aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010af4:	f043 0220 	orr.w	r2, r3, #32
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2200      	movs	r2, #0
 8010b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010b04:	2301      	movs	r3, #1
 8010b06:	e007      	b.n	8010b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	695b      	ldr	r3, [r3, #20]
 8010b0e:	f003 0304 	and.w	r3, r3, #4
 8010b12:	2b04      	cmp	r3, #4
 8010b14:	d1ca      	bne.n	8010aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010b16:	2300      	movs	r3, #0
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3710      	adds	r7, #16
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}

08010b20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b084      	sub	sp, #16
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b2c:	e029      	b.n	8010b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010b2e:	68f8      	ldr	r0, [r7, #12]
 8010b30:	f000 f8bc 	bl	8010cac <I2C_IsAcknowledgeFailed>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e029      	b.n	8010b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010b3e:	f7f5 fadb 	bl	80060f8 <HAL_GetTick>
 8010b42:	4602      	mov	r2, r0
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	1ad3      	subs	r3, r2, r3
 8010b48:	68ba      	ldr	r2, [r7, #8]
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d302      	bcc.n	8010b54 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8010b4e:	68bb      	ldr	r3, [r7, #8]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d116      	bne.n	8010b82 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2220      	movs	r2, #32
 8010b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2200      	movs	r2, #0
 8010b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b6e:	f043 0220 	orr.w	r2, r3, #32
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010b7e:	2301      	movs	r3, #1
 8010b80:	e007      	b.n	8010b92 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	695b      	ldr	r3, [r3, #20]
 8010b88:	f003 0310 	and.w	r3, r3, #16
 8010b8c:	2b10      	cmp	r3, #16
 8010b8e:	d1ce      	bne.n	8010b2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8010b9a:	b480      	push	{r7}
 8010b9c:	b085      	sub	sp, #20
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010ba2:	2300      	movs	r3, #0
 8010ba4:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8010ba6:	4b14      	ldr	r3, [pc, #80]	; (8010bf8 <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	08db      	lsrs	r3, r3, #3
 8010bac:	4a13      	ldr	r2, [pc, #76]	; (8010bfc <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 8010bae:	fba2 2303 	umull	r2, r3, r2, r3
 8010bb2:	0a1a      	lsrs	r2, r3, #8
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	009b      	lsls	r3, r3, #2
 8010bb8:	4413      	add	r3, r2
 8010bba:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	3b01      	subs	r3, #1
 8010bc0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d107      	bne.n	8010bd8 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bcc:	f043 0220 	orr.w	r2, r3, #32
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	e008      	b.n	8010bea <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010be6:	d0e9      	beq.n	8010bbc <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr
 8010bf6:	bf00      	nop
 8010bf8:	20000058 	.word	0x20000058
 8010bfc:	14f8b589 	.word	0x14f8b589

08010c00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b084      	sub	sp, #16
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	60f8      	str	r0, [r7, #12]
 8010c08:	60b9      	str	r1, [r7, #8]
 8010c0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010c0c:	e042      	b.n	8010c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	681b      	ldr	r3, [r3, #0]
 8010c12:	695b      	ldr	r3, [r3, #20]
 8010c14:	f003 0310 	and.w	r3, r3, #16
 8010c18:	2b10      	cmp	r3, #16
 8010c1a:	d119      	bne.n	8010c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f06f 0210 	mvn.w	r2, #16
 8010c24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	2200      	movs	r2, #0
 8010c2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2220      	movs	r2, #32
 8010c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	2200      	movs	r2, #0
 8010c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	e029      	b.n	8010ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010c50:	f7f5 fa52 	bl	80060f8 <HAL_GetTick>
 8010c54:	4602      	mov	r2, r0
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	68ba      	ldr	r2, [r7, #8]
 8010c5c:	429a      	cmp	r2, r3
 8010c5e:	d302      	bcc.n	8010c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d116      	bne.n	8010c94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	2200      	movs	r2, #0
 8010c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2220      	movs	r2, #32
 8010c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	2200      	movs	r2, #0
 8010c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c80:	f043 0220 	orr.w	r2, r3, #32
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010c90:	2301      	movs	r3, #1
 8010c92:	e007      	b.n	8010ca4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	695b      	ldr	r3, [r3, #20]
 8010c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c9e:	2b40      	cmp	r3, #64	; 0x40
 8010ca0:	d1b5      	bne.n	8010c0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8010ca2:	2300      	movs	r3, #0
}
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	3710      	adds	r7, #16
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}

08010cac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8010cac:	b480      	push	{r7}
 8010cae:	b083      	sub	sp, #12
 8010cb0:	af00      	add	r7, sp, #0
 8010cb2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	695b      	ldr	r3, [r3, #20]
 8010cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010cbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010cc2:	d11b      	bne.n	8010cfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010ccc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2220      	movs	r2, #32
 8010cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ce8:	f043 0204 	orr.w	r2, r3, #4
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e000      	b.n	8010cfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8010cfc:	2300      	movs	r3, #0
}
 8010cfe:	4618      	mov	r0, r3
 8010d00:	370c      	adds	r7, #12
 8010d02:	46bd      	mov	sp, r7
 8010d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d08:	4770      	bx	lr

08010d0a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	b083      	sub	sp, #12
 8010d0e:	af00      	add	r7, sp, #0
 8010d10:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d16:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8010d1a:	d103      	bne.n	8010d24 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2201      	movs	r2, #1
 8010d20:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8010d22:	e007      	b.n	8010d34 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d28:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010d2c:	d102      	bne.n	8010d34 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	2208      	movs	r2, #8
 8010d32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010d34:	bf00      	nop
 8010d36:	370c      	adds	r7, #12
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3e:	4770      	bx	lr

08010d40 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8010d44:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <HAL_PWR_DeInit+0x28>)
 8010d46:	6a1b      	ldr	r3, [r3, #32]
 8010d48:	4a07      	ldr	r2, [pc, #28]	; (8010d68 <HAL_PWR_DeInit+0x28>)
 8010d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010d4e:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8010d50:	4b05      	ldr	r3, [pc, #20]	; (8010d68 <HAL_PWR_DeInit+0x28>)
 8010d52:	6a1b      	ldr	r3, [r3, #32]
 8010d54:	4a04      	ldr	r2, [pc, #16]	; (8010d68 <HAL_PWR_DeInit+0x28>)
 8010d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010d5a:	6213      	str	r3, [r2, #32]
}
 8010d5c:	bf00      	nop
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	40023800 	.word	0x40023800

08010d6c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b083      	sub	sp, #12
 8010d70:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8010d72:	4b06      	ldr	r3, [pc, #24]	; (8010d8c <HAL_PWR_EnableBkUpAccess+0x20>)
 8010d74:	2201      	movs	r2, #1
 8010d76:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <HAL_PWR_EnableBkUpAccess+0x24>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8010d7e:	687b      	ldr	r3, [r7, #4]
}
 8010d80:	bf00      	nop
 8010d82:	370c      	adds	r7, #12
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	420e0020 	.word	0x420e0020
 8010d90:	40007000 	.word	0x40007000

08010d94 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8010d94:	b480      	push	{r7}
 8010d96:	b083      	sub	sp, #12
 8010d98:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8010d9a:	4b06      	ldr	r3, [pc, #24]	; (8010db4 <HAL_PWR_DisableBkUpAccess+0x20>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8010da0:	4b05      	ldr	r3, [pc, #20]	; (8010db8 <HAL_PWR_DisableBkUpAccess+0x24>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8010da6:	687b      	ldr	r3, [r7, #4]
}
 8010da8:	bf00      	nop
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr
 8010db4:	420e0020 	.word	0x420e0020
 8010db8:	40007000 	.word	0x40007000

08010dbc <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8010dbc:	b480      	push	{r7}
 8010dbe:	b083      	sub	sp, #12
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8010dc4:	4b2b      	ldr	r3, [pc, #172]	; (8010e74 <HAL_PWR_ConfigPVD+0xb8>)
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4928      	ldr	r1, [pc, #160]	; (8010e74 <HAL_PWR_ConfigPVD+0xb8>)
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8010dd6:	4b28      	ldr	r3, [pc, #160]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	4a27      	ldr	r2, [pc, #156]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010de0:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8010de2:	4b25      	ldr	r3, [pc, #148]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	4a24      	ldr	r2, [pc, #144]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010dec:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8010dee:	4b22      	ldr	r3, [pc, #136]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	4a21      	ldr	r2, [pc, #132]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010df8:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8010dfa:	4b1f      	ldr	r3, [pc, #124]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	4a1e      	ldr	r2, [pc, #120]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e04:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d005      	beq.n	8010e1e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8010e12:	4b19      	ldr	r3, [pc, #100]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	4a18      	ldr	r2, [pc, #96]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e1c:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d005      	beq.n	8010e36 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8010e2a:	4b13      	ldr	r3, [pc, #76]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	4a12      	ldr	r2, [pc, #72]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e34:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	685b      	ldr	r3, [r3, #4]
 8010e3a:	f003 0301 	and.w	r3, r3, #1
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d005      	beq.n	8010e4e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8010e42:	4b0d      	ldr	r3, [pc, #52]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	4a0c      	ldr	r2, [pc, #48]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e4c:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	f003 0302 	and.w	r3, r3, #2
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d005      	beq.n	8010e66 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8010e5a:	4b07      	ldr	r3, [pc, #28]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e5c:	68db      	ldr	r3, [r3, #12]
 8010e5e:	4a06      	ldr	r2, [pc, #24]	; (8010e78 <HAL_PWR_ConfigPVD+0xbc>)
 8010e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e64:	60d3      	str	r3, [r2, #12]
  }
}
 8010e66:	bf00      	nop
 8010e68:	370c      	adds	r7, #12
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e70:	4770      	bx	lr
 8010e72:	bf00      	nop
 8010e74:	40007000 	.word	0x40007000
 8010e78:	40013c00 	.word	0x40013c00

08010e7c <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 8010e80:	4b03      	ldr	r3, [pc, #12]	; (8010e90 <HAL_PWR_EnablePVD+0x14>)
 8010e82:	2201      	movs	r2, #1
 8010e84:	601a      	str	r2, [r3, #0]
}
 8010e86:	bf00      	nop
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr
 8010e90:	420e0010 	.word	0x420e0010

08010e94 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8010e94:	b480      	push	{r7}
 8010e96:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 8010e98:	4b03      	ldr	r3, [pc, #12]	; (8010ea8 <HAL_PWR_DisablePVD+0x14>)
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	601a      	str	r2, [r3, #0]
}
 8010e9e:	bf00      	nop
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr
 8010ea8:	420e0010 	.word	0x420e0010

08010eac <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b083      	sub	sp, #12
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8010eb4:	4b05      	ldr	r3, [pc, #20]	; (8010ecc <HAL_PWR_EnableWakeUpPin+0x20>)
 8010eb6:	685a      	ldr	r2, [r3, #4]
 8010eb8:	4904      	ldr	r1, [pc, #16]	; (8010ecc <HAL_PWR_EnableWakeUpPin+0x20>)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	604b      	str	r3, [r1, #4]
}
 8010ec0:	bf00      	nop
 8010ec2:	370c      	adds	r7, #12
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	40007000 	.word	0x40007000

08010ed0 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b083      	sub	sp, #12
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8010ed8:	4b06      	ldr	r3, [pc, #24]	; (8010ef4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8010eda:	685a      	ldr	r2, [r3, #4]
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	43db      	mvns	r3, r3
 8010ee0:	4904      	ldr	r1, [pc, #16]	; (8010ef4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8010ee2:	4013      	ands	r3, r2
 8010ee4:	604b      	str	r3, [r1, #4]
}
 8010ee6:	bf00      	nop
 8010ee8:	370c      	adds	r7, #12
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	40007000 	.word	0x40007000

08010ef8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	460b      	mov	r3, r1
 8010f02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010f04:	4b09      	ldr	r3, [pc, #36]	; (8010f2c <HAL_PWR_EnterSLEEPMode+0x34>)
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	4a08      	ldr	r2, [pc, #32]	; (8010f2c <HAL_PWR_EnterSLEEPMode+0x34>)
 8010f0a:	f023 0304 	bic.w	r3, r3, #4
 8010f0e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8010f10:	78fb      	ldrb	r3, [r7, #3]
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d101      	bne.n	8010f1a <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8010f16:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8010f18:	e002      	b.n	8010f20 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8010f1a:	bf40      	sev
    __WFE();
 8010f1c:	bf20      	wfe
    __WFE();
 8010f1e:	bf20      	wfe
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr
 8010f2c:	e000ed00 	.word	0xe000ed00

08010f30 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b083      	sub	sp, #12
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	460b      	mov	r3, r1
 8010f3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8010f3c:	4b10      	ldr	r3, [pc, #64]	; (8010f80 <HAL_PWR_EnterSTOPMode+0x50>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f023 0203 	bic.w	r2, r3, #3
 8010f44:	490e      	ldr	r1, [pc, #56]	; (8010f80 <HAL_PWR_EnterSTOPMode+0x50>)
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	4313      	orrs	r3, r2
 8010f4a:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010f4c:	4b0d      	ldr	r3, [pc, #52]	; (8010f84 <HAL_PWR_EnterSTOPMode+0x54>)
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	4a0c      	ldr	r2, [pc, #48]	; (8010f84 <HAL_PWR_EnterSTOPMode+0x54>)
 8010f52:	f043 0304 	orr.w	r3, r3, #4
 8010f56:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8010f58:	78fb      	ldrb	r3, [r7, #3]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d101      	bne.n	8010f62 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8010f5e:	bf30      	wfi
 8010f60:	e002      	b.n	8010f68 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8010f62:	bf40      	sev
    __WFE();
 8010f64:	bf20      	wfe
    __WFE();
 8010f66:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 8010f68:	4b06      	ldr	r3, [pc, #24]	; (8010f84 <HAL_PWR_EnterSTOPMode+0x54>)
 8010f6a:	691b      	ldr	r3, [r3, #16]
 8010f6c:	4a05      	ldr	r2, [pc, #20]	; (8010f84 <HAL_PWR_EnterSTOPMode+0x54>)
 8010f6e:	f023 0304 	bic.w	r3, r3, #4
 8010f72:	6113      	str	r3, [r2, #16]
}
 8010f74:	bf00      	nop
 8010f76:	370c      	adds	r7, #12
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7e:	4770      	bx	lr
 8010f80:	40007000 	.word	0x40007000
 8010f84:	e000ed00 	.word	0xe000ed00

08010f88 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8010f8c:	4b08      	ldr	r3, [pc, #32]	; (8010fb0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	4a07      	ldr	r2, [pc, #28]	; (8010fb0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8010f92:	f043 0302 	orr.w	r3, r3, #2
 8010f96:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8010f98:	4b06      	ldr	r3, [pc, #24]	; (8010fb4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8010f9a:	691b      	ldr	r3, [r3, #16]
 8010f9c:	4a05      	ldr	r2, [pc, #20]	; (8010fb4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8010f9e:	f043 0304 	orr.w	r3, r3, #4
 8010fa2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8010fa4:	bf30      	wfi
}
 8010fa6:	bf00      	nop
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr
 8010fb0:	40007000 	.word	0x40007000
 8010fb4:	e000ed00 	.word	0xe000ed00

08010fb8 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8010fbc:	4b06      	ldr	r3, [pc, #24]	; (8010fd8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d005      	beq.n	8010fd4 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8010fc8:	f000 f808 	bl	8010fdc <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8010fcc:	4b02      	ldr	r3, [pc, #8]	; (8010fd8 <HAL_PWR_PVD_IRQHandler+0x20>)
 8010fce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010fd2:	615a      	str	r2, [r3, #20]
  }
}
 8010fd4:	bf00      	nop
 8010fd6:	bd80      	pop	{r7, pc}
 8010fd8:	40013c00 	.word	0x40013c00

08010fdc <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8010fe0:	bf00      	nop
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8010fea:	b480      	push	{r7}
 8010fec:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8010fee:	4b05      	ldr	r3, [pc, #20]	; (8011004 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8010ff0:	691b      	ldr	r3, [r3, #16]
 8010ff2:	4a04      	ldr	r2, [pc, #16]	; (8011004 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8010ff4:	f043 0302 	orr.w	r3, r3, #2
 8010ff8:	6113      	str	r3, [r2, #16]
}
 8010ffa:	bf00      	nop
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011002:	4770      	bx	lr
 8011004:	e000ed00 	.word	0xe000ed00

08011008 <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8011008:	b480      	push	{r7}
 801100a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 801100c:	4b05      	ldr	r3, [pc, #20]	; (8011024 <HAL_PWR_DisableSleepOnExit+0x1c>)
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	4a04      	ldr	r2, [pc, #16]	; (8011024 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011012:	f023 0302 	bic.w	r3, r3, #2
 8011016:	6113      	str	r3, [r2, #16]
}
 8011018:	bf00      	nop
 801101a:	46bd      	mov	sp, r7
 801101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	e000ed00 	.word	0xe000ed00

08011028 <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 8011028:	b480      	push	{r7}
 801102a:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 801102c:	4b05      	ldr	r3, [pc, #20]	; (8011044 <HAL_PWR_EnableSEVOnPend+0x1c>)
 801102e:	691b      	ldr	r3, [r3, #16]
 8011030:	4a04      	ldr	r2, [pc, #16]	; (8011044 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011032:	f043 0310 	orr.w	r3, r3, #16
 8011036:	6113      	str	r3, [r2, #16]
}
 8011038:	bf00      	nop
 801103a:	46bd      	mov	sp, r7
 801103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011040:	4770      	bx	lr
 8011042:	bf00      	nop
 8011044:	e000ed00 	.word	0xe000ed00

08011048 <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 801104c:	4b05      	ldr	r3, [pc, #20]	; (8011064 <HAL_PWR_DisableSEVOnPend+0x1c>)
 801104e:	691b      	ldr	r3, [r3, #16]
 8011050:	4a04      	ldr	r2, [pc, #16]	; (8011064 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011052:	f023 0310 	bic.w	r3, r3, #16
 8011056:	6113      	str	r3, [r2, #16]
}
 8011058:	bf00      	nop
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop
 8011064:	e000ed00 	.word	0xe000ed00

08011068 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b082      	sub	sp, #8
 801106c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 801106e:	2300      	movs	r3, #0
 8011070:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8011072:	4b0e      	ldr	r3, [pc, #56]	; (80110ac <HAL_PWREx_EnableBkUpReg+0x44>)
 8011074:	2201      	movs	r2, #1
 8011076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011078:	f7f5 f83e 	bl	80060f8 <HAL_GetTick>
 801107c:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 801107e:	e009      	b.n	8011094 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011080:	f7f5 f83a 	bl	80060f8 <HAL_GetTick>
 8011084:	4602      	mov	r2, r0
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801108e:	d901      	bls.n	8011094 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011090:	2303      	movs	r3, #3
 8011092:	e006      	b.n	80110a2 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8011094:	4b06      	ldr	r3, [pc, #24]	; (80110b0 <HAL_PWREx_EnableBkUpReg+0x48>)
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	f003 0308 	and.w	r3, r3, #8
 801109c:	2b08      	cmp	r3, #8
 801109e:	d1ef      	bne.n	8011080 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80110a0:	2300      	movs	r3, #0
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
 80110aa:	bf00      	nop
 80110ac:	420e00a4 	.word	0x420e00a4
 80110b0:	40007000 	.word	0x40007000

080110b4 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 80110b4:	b580      	push	{r7, lr}
 80110b6:	b082      	sub	sp, #8
 80110b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80110ba:	2300      	movs	r3, #0
 80110bc:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 80110be:	4b0e      	ldr	r3, [pc, #56]	; (80110f8 <HAL_PWREx_DisableBkUpReg+0x44>)
 80110c0:	2200      	movs	r2, #0
 80110c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80110c4:	f7f5 f818 	bl	80060f8 <HAL_GetTick>
 80110c8:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80110ca:	e009      	b.n	80110e0 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80110cc:	f7f5 f814 	bl	80060f8 <HAL_GetTick>
 80110d0:	4602      	mov	r2, r0
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	1ad3      	subs	r3, r2, r3
 80110d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80110da:	d901      	bls.n	80110e0 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80110dc:	2303      	movs	r3, #3
 80110de:	e006      	b.n	80110ee <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80110e0:	4b06      	ldr	r3, [pc, #24]	; (80110fc <HAL_PWREx_DisableBkUpReg+0x48>)
 80110e2:	685b      	ldr	r3, [r3, #4]
 80110e4:	f003 0308 	and.w	r3, r3, #8
 80110e8:	2b08      	cmp	r3, #8
 80110ea:	d0ef      	beq.n	80110cc <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80110ec:	2300      	movs	r3, #0
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}
 80110f6:	bf00      	nop
 80110f8:	420e00a4 	.word	0x420e00a4
 80110fc:	40007000 	.word	0x40007000

08011100 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011100:	b480      	push	{r7}
 8011102:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011104:	4b03      	ldr	r3, [pc, #12]	; (8011114 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 8011106:	2201      	movs	r2, #1
 8011108:	601a      	str	r2, [r3, #0]
}
 801110a:	bf00      	nop
 801110c:	46bd      	mov	sp, r7
 801110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011112:	4770      	bx	lr
 8011114:	420e0024 	.word	0x420e0024

08011118 <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 8011118:	b480      	push	{r7}
 801111a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 801111c:	4b03      	ldr	r3, [pc, #12]	; (801112c <HAL_PWREx_DisableFlashPowerDown+0x14>)
 801111e:	2200      	movs	r2, #0
 8011120:	601a      	str	r2, [r3, #0]
}
 8011122:	bf00      	nop
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	420e0024 	.word	0x420e0024

08011130 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011130:	b480      	push	{r7}
 8011132:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011134:	4b04      	ldr	r3, [pc, #16]	; (8011148 <HAL_PWREx_GetVoltageRange+0x18>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 801113c:	4618      	mov	r0, r3
 801113e:	46bd      	mov	sp, r7
 8011140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	40007000 	.word	0x40007000

0801114c <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011154:	2300      	movs	r3, #0
 8011156:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 8011158:	2300      	movs	r3, #0
 801115a:	60fb      	str	r3, [r7, #12]
 801115c:	4b1a      	ldr	r3, [pc, #104]	; (80111c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011160:	4a19      	ldr	r2, [pc, #100]	; (80111c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011166:	6413      	str	r3, [r2, #64]	; 0x40
 8011168:	4b17      	ldr	r3, [pc, #92]	; (80111c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011170:	60fb      	str	r3, [r7, #12]
 8011172:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 8011174:	2300      	movs	r3, #0
 8011176:	613b      	str	r3, [r7, #16]
 8011178:	4b14      	ldr	r3, [pc, #80]	; (80111cc <HAL_PWREx_ControlVoltageScaling+0x80>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011180:	4912      	ldr	r1, [pc, #72]	; (80111cc <HAL_PWREx_ControlVoltageScaling+0x80>)
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4313      	orrs	r3, r2
 8011186:	600b      	str	r3, [r1, #0]
 8011188:	4b10      	ldr	r3, [pc, #64]	; (80111cc <HAL_PWREx_ControlVoltageScaling+0x80>)
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011190:	613b      	str	r3, [r7, #16]
 8011192:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8011194:	f7f4 ffb0 	bl	80060f8 <HAL_GetTick>
 8011198:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 801119a:	e009      	b.n	80111b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 801119c:	f7f4 ffac 	bl	80060f8 <HAL_GetTick>
 80111a0:	4602      	mov	r2, r0
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	1ad3      	subs	r3, r2, r3
 80111a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80111aa:	d901      	bls.n	80111b0 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 80111ac:	2303      	movs	r3, #3
 80111ae:	e007      	b.n	80111c0 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80111b0:	4b06      	ldr	r3, [pc, #24]	; (80111cc <HAL_PWREx_ControlVoltageScaling+0x80>)
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80111bc:	d1ee      	bne.n	801119c <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 80111be:	2300      	movs	r3, #0
}
 80111c0:	4618      	mov	r0, r3
 80111c2:	3718      	adds	r7, #24
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}
 80111c8:	40023800 	.word	0x40023800
 80111cc:	40007000 	.word	0x40007000

080111d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b086      	sub	sp, #24
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80111de:	2301      	movs	r3, #1
 80111e0:	e267      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f003 0301 	and.w	r3, r3, #1
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d075      	beq.n	80112da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80111ee:	4b88      	ldr	r3, [pc, #544]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	f003 030c 	and.w	r3, r3, #12
 80111f6:	2b04      	cmp	r3, #4
 80111f8:	d00c      	beq.n	8011214 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80111fa:	4b85      	ldr	r3, [pc, #532]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011202:	2b08      	cmp	r3, #8
 8011204:	d112      	bne.n	801122c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8011206:	4b82      	ldr	r3, [pc, #520]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801120e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011212:	d10b      	bne.n	801122c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011214:	4b7e      	ldr	r3, [pc, #504]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801121c:	2b00      	cmp	r3, #0
 801121e:	d05b      	beq.n	80112d8 <HAL_RCC_OscConfig+0x108>
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	685b      	ldr	r3, [r3, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d157      	bne.n	80112d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8011228:	2301      	movs	r3, #1
 801122a:	e242      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011234:	d106      	bne.n	8011244 <HAL_RCC_OscConfig+0x74>
 8011236:	4b76      	ldr	r3, [pc, #472]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a75      	ldr	r2, [pc, #468]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011240:	6013      	str	r3, [r2, #0]
 8011242:	e01d      	b.n	8011280 <HAL_RCC_OscConfig+0xb0>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	685b      	ldr	r3, [r3, #4]
 8011248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801124c:	d10c      	bne.n	8011268 <HAL_RCC_OscConfig+0x98>
 801124e:	4b70      	ldr	r3, [pc, #448]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	4a6f      	ldr	r2, [pc, #444]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011258:	6013      	str	r3, [r2, #0]
 801125a:	4b6d      	ldr	r3, [pc, #436]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4a6c      	ldr	r2, [pc, #432]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011264:	6013      	str	r3, [r2, #0]
 8011266:	e00b      	b.n	8011280 <HAL_RCC_OscConfig+0xb0>
 8011268:	4b69      	ldr	r3, [pc, #420]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	4a68      	ldr	r2, [pc, #416]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801126e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011272:	6013      	str	r3, [r2, #0]
 8011274:	4b66      	ldr	r3, [pc, #408]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4a65      	ldr	r2, [pc, #404]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801127a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801127e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	685b      	ldr	r3, [r3, #4]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d013      	beq.n	80112b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011288:	f7f4 ff36 	bl	80060f8 <HAL_GetTick>
 801128c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801128e:	e008      	b.n	80112a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011290:	f7f4 ff32 	bl	80060f8 <HAL_GetTick>
 8011294:	4602      	mov	r2, r0
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	2b64      	cmp	r3, #100	; 0x64
 801129c:	d901      	bls.n	80112a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801129e:	2303      	movs	r3, #3
 80112a0:	e207      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80112a2:	4b5b      	ldr	r3, [pc, #364]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0f0      	beq.n	8011290 <HAL_RCC_OscConfig+0xc0>
 80112ae:	e014      	b.n	80112da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80112b0:	f7f4 ff22 	bl	80060f8 <HAL_GetTick>
 80112b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112b6:	e008      	b.n	80112ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80112b8:	f7f4 ff1e 	bl	80060f8 <HAL_GetTick>
 80112bc:	4602      	mov	r2, r0
 80112be:	693b      	ldr	r3, [r7, #16]
 80112c0:	1ad3      	subs	r3, r2, r3
 80112c2:	2b64      	cmp	r3, #100	; 0x64
 80112c4:	d901      	bls.n	80112ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80112c6:	2303      	movs	r3, #3
 80112c8:	e1f3      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80112ca:	4b51      	ldr	r3, [pc, #324]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1f0      	bne.n	80112b8 <HAL_RCC_OscConfig+0xe8>
 80112d6:	e000      	b.n	80112da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80112d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	f003 0302 	and.w	r3, r3, #2
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d063      	beq.n	80113ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112e6:	4b4a      	ldr	r3, [pc, #296]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80112e8:	689b      	ldr	r3, [r3, #8]
 80112ea:	f003 030c 	and.w	r3, r3, #12
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00b      	beq.n	801130a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80112f2:	4b47      	ldr	r3, [pc, #284]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80112fa:	2b08      	cmp	r3, #8
 80112fc:	d11c      	bne.n	8011338 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80112fe:	4b44      	ldr	r3, [pc, #272]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011300:	685b      	ldr	r3, [r3, #4]
 8011302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011306:	2b00      	cmp	r3, #0
 8011308:	d116      	bne.n	8011338 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801130a:	4b41      	ldr	r3, [pc, #260]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	f003 0302 	and.w	r3, r3, #2
 8011312:	2b00      	cmp	r3, #0
 8011314:	d005      	beq.n	8011322 <HAL_RCC_OscConfig+0x152>
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	68db      	ldr	r3, [r3, #12]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d001      	beq.n	8011322 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801131e:	2301      	movs	r3, #1
 8011320:	e1c7      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011322:	4b3b      	ldr	r3, [pc, #236]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	4937      	ldr	r1, [pc, #220]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011332:	4313      	orrs	r3, r2
 8011334:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8011336:	e03a      	b.n	80113ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d020      	beq.n	8011382 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011340:	4b34      	ldr	r3, [pc, #208]	; (8011414 <HAL_RCC_OscConfig+0x244>)
 8011342:	2201      	movs	r2, #1
 8011344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011346:	f7f4 fed7 	bl	80060f8 <HAL_GetTick>
 801134a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801134c:	e008      	b.n	8011360 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801134e:	f7f4 fed3 	bl	80060f8 <HAL_GetTick>
 8011352:	4602      	mov	r2, r0
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	2b02      	cmp	r3, #2
 801135a:	d901      	bls.n	8011360 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801135c:	2303      	movs	r3, #3
 801135e:	e1a8      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011360:	4b2b      	ldr	r3, [pc, #172]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f003 0302 	and.w	r3, r3, #2
 8011368:	2b00      	cmp	r3, #0
 801136a:	d0f0      	beq.n	801134e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801136c:	4b28      	ldr	r3, [pc, #160]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	00db      	lsls	r3, r3, #3
 801137a:	4925      	ldr	r1, [pc, #148]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 801137c:	4313      	orrs	r3, r2
 801137e:	600b      	str	r3, [r1, #0]
 8011380:	e015      	b.n	80113ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011382:	4b24      	ldr	r3, [pc, #144]	; (8011414 <HAL_RCC_OscConfig+0x244>)
 8011384:	2200      	movs	r2, #0
 8011386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011388:	f7f4 feb6 	bl	80060f8 <HAL_GetTick>
 801138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801138e:	e008      	b.n	80113a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011390:	f7f4 feb2 	bl	80060f8 <HAL_GetTick>
 8011394:	4602      	mov	r2, r0
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	1ad3      	subs	r3, r2, r3
 801139a:	2b02      	cmp	r3, #2
 801139c:	d901      	bls.n	80113a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801139e:	2303      	movs	r3, #3
 80113a0:	e187      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80113a2:	4b1b      	ldr	r3, [pc, #108]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f003 0302 	and.w	r3, r3, #2
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d1f0      	bne.n	8011390 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	f003 0308 	and.w	r3, r3, #8
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d036      	beq.n	8011428 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	695b      	ldr	r3, [r3, #20]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d016      	beq.n	80113f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80113c2:	4b15      	ldr	r3, [pc, #84]	; (8011418 <HAL_RCC_OscConfig+0x248>)
 80113c4:	2201      	movs	r2, #1
 80113c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80113c8:	f7f4 fe96 	bl	80060f8 <HAL_GetTick>
 80113cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80113ce:	e008      	b.n	80113e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113d0:	f7f4 fe92 	bl	80060f8 <HAL_GetTick>
 80113d4:	4602      	mov	r2, r0
 80113d6:	693b      	ldr	r3, [r7, #16]
 80113d8:	1ad3      	subs	r3, r2, r3
 80113da:	2b02      	cmp	r3, #2
 80113dc:	d901      	bls.n	80113e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80113de:	2303      	movs	r3, #3
 80113e0:	e167      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80113e2:	4b0b      	ldr	r3, [pc, #44]	; (8011410 <HAL_RCC_OscConfig+0x240>)
 80113e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80113e6:	f003 0302 	and.w	r3, r3, #2
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d0f0      	beq.n	80113d0 <HAL_RCC_OscConfig+0x200>
 80113ee:	e01b      	b.n	8011428 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80113f0:	4b09      	ldr	r3, [pc, #36]	; (8011418 <HAL_RCC_OscConfig+0x248>)
 80113f2:	2200      	movs	r2, #0
 80113f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80113f6:	f7f4 fe7f 	bl	80060f8 <HAL_GetTick>
 80113fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80113fc:	e00e      	b.n	801141c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80113fe:	f7f4 fe7b 	bl	80060f8 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	2b02      	cmp	r3, #2
 801140a:	d907      	bls.n	801141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801140c:	2303      	movs	r3, #3
 801140e:	e150      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
 8011410:	40023800 	.word	0x40023800
 8011414:	42470000 	.word	0x42470000
 8011418:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801141c:	4b88      	ldr	r3, [pc, #544]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801141e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d1ea      	bne.n	80113fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f003 0304 	and.w	r3, r3, #4
 8011430:	2b00      	cmp	r3, #0
 8011432:	f000 8097 	beq.w	8011564 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011436:	2300      	movs	r3, #0
 8011438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801143a:	4b81      	ldr	r3, [pc, #516]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d10f      	bne.n	8011466 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011446:	2300      	movs	r3, #0
 8011448:	60bb      	str	r3, [r7, #8]
 801144a:	4b7d      	ldr	r3, [pc, #500]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801144e:	4a7c      	ldr	r2, [pc, #496]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 8011450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011454:	6413      	str	r3, [r2, #64]	; 0x40
 8011456:	4b7a      	ldr	r3, [pc, #488]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 8011458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801145e:	60bb      	str	r3, [r7, #8]
 8011460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011462:	2301      	movs	r3, #1
 8011464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011466:	4b77      	ldr	r3, [pc, #476]	; (8011644 <HAL_RCC_OscConfig+0x474>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801146e:	2b00      	cmp	r3, #0
 8011470:	d118      	bne.n	80114a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011472:	4b74      	ldr	r3, [pc, #464]	; (8011644 <HAL_RCC_OscConfig+0x474>)
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a73      	ldr	r2, [pc, #460]	; (8011644 <HAL_RCC_OscConfig+0x474>)
 8011478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801147e:	f7f4 fe3b 	bl	80060f8 <HAL_GetTick>
 8011482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011484:	e008      	b.n	8011498 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011486:	f7f4 fe37 	bl	80060f8 <HAL_GetTick>
 801148a:	4602      	mov	r2, r0
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	1ad3      	subs	r3, r2, r3
 8011490:	2b02      	cmp	r3, #2
 8011492:	d901      	bls.n	8011498 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8011494:	2303      	movs	r3, #3
 8011496:	e10c      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011498:	4b6a      	ldr	r3, [pc, #424]	; (8011644 <HAL_RCC_OscConfig+0x474>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d0f0      	beq.n	8011486 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	689b      	ldr	r3, [r3, #8]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d106      	bne.n	80114ba <HAL_RCC_OscConfig+0x2ea>
 80114ac:	4b64      	ldr	r3, [pc, #400]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114b0:	4a63      	ldr	r2, [pc, #396]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114b2:	f043 0301 	orr.w	r3, r3, #1
 80114b6:	6713      	str	r3, [r2, #112]	; 0x70
 80114b8:	e01c      	b.n	80114f4 <HAL_RCC_OscConfig+0x324>
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	2b05      	cmp	r3, #5
 80114c0:	d10c      	bne.n	80114dc <HAL_RCC_OscConfig+0x30c>
 80114c2:	4b5f      	ldr	r3, [pc, #380]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114c6:	4a5e      	ldr	r2, [pc, #376]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114c8:	f043 0304 	orr.w	r3, r3, #4
 80114cc:	6713      	str	r3, [r2, #112]	; 0x70
 80114ce:	4b5c      	ldr	r3, [pc, #368]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114d2:	4a5b      	ldr	r2, [pc, #364]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114d4:	f043 0301 	orr.w	r3, r3, #1
 80114d8:	6713      	str	r3, [r2, #112]	; 0x70
 80114da:	e00b      	b.n	80114f4 <HAL_RCC_OscConfig+0x324>
 80114dc:	4b58      	ldr	r3, [pc, #352]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114e0:	4a57      	ldr	r2, [pc, #348]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114e2:	f023 0301 	bic.w	r3, r3, #1
 80114e6:	6713      	str	r3, [r2, #112]	; 0x70
 80114e8:	4b55      	ldr	r3, [pc, #340]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114ec:	4a54      	ldr	r2, [pc, #336]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80114ee:	f023 0304 	bic.w	r3, r3, #4
 80114f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	689b      	ldr	r3, [r3, #8]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d015      	beq.n	8011528 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80114fc:	f7f4 fdfc 	bl	80060f8 <HAL_GetTick>
 8011500:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011502:	e00a      	b.n	801151a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011504:	f7f4 fdf8 	bl	80060f8 <HAL_GetTick>
 8011508:	4602      	mov	r2, r0
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011512:	4293      	cmp	r3, r2
 8011514:	d901      	bls.n	801151a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011516:	2303      	movs	r3, #3
 8011518:	e0cb      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801151a:	4b49      	ldr	r3, [pc, #292]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801151c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801151e:	f003 0302 	and.w	r3, r3, #2
 8011522:	2b00      	cmp	r3, #0
 8011524:	d0ee      	beq.n	8011504 <HAL_RCC_OscConfig+0x334>
 8011526:	e014      	b.n	8011552 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011528:	f7f4 fde6 	bl	80060f8 <HAL_GetTick>
 801152c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801152e:	e00a      	b.n	8011546 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011530:	f7f4 fde2 	bl	80060f8 <HAL_GetTick>
 8011534:	4602      	mov	r2, r0
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	1ad3      	subs	r3, r2, r3
 801153a:	f241 3288 	movw	r2, #5000	; 0x1388
 801153e:	4293      	cmp	r3, r2
 8011540:	d901      	bls.n	8011546 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011542:	2303      	movs	r3, #3
 8011544:	e0b5      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011546:	4b3e      	ldr	r3, [pc, #248]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 8011548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801154a:	f003 0302 	and.w	r3, r3, #2
 801154e:	2b00      	cmp	r3, #0
 8011550:	d1ee      	bne.n	8011530 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	2b01      	cmp	r3, #1
 8011556:	d105      	bne.n	8011564 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011558:	4b39      	ldr	r3, [pc, #228]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801155c:	4a38      	ldr	r2, [pc, #224]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 801155e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011562:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	699b      	ldr	r3, [r3, #24]
 8011568:	2b00      	cmp	r3, #0
 801156a:	f000 80a1 	beq.w	80116b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801156e:	4b34      	ldr	r3, [pc, #208]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	f003 030c 	and.w	r3, r3, #12
 8011576:	2b08      	cmp	r3, #8
 8011578:	d05c      	beq.n	8011634 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	699b      	ldr	r3, [r3, #24]
 801157e:	2b02      	cmp	r3, #2
 8011580:	d141      	bne.n	8011606 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011582:	4b31      	ldr	r3, [pc, #196]	; (8011648 <HAL_RCC_OscConfig+0x478>)
 8011584:	2200      	movs	r2, #0
 8011586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011588:	f7f4 fdb6 	bl	80060f8 <HAL_GetTick>
 801158c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801158e:	e008      	b.n	80115a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011590:	f7f4 fdb2 	bl	80060f8 <HAL_GetTick>
 8011594:	4602      	mov	r2, r0
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	2b02      	cmp	r3, #2
 801159c:	d901      	bls.n	80115a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 801159e:	2303      	movs	r3, #3
 80115a0:	e087      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80115a2:	4b27      	ldr	r3, [pc, #156]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1f0      	bne.n	8011590 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	69da      	ldr	r2, [r3, #28]
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6a1b      	ldr	r3, [r3, #32]
 80115b6:	431a      	orrs	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115bc:	019b      	lsls	r3, r3, #6
 80115be:	431a      	orrs	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115c4:	085b      	lsrs	r3, r3, #1
 80115c6:	3b01      	subs	r3, #1
 80115c8:	041b      	lsls	r3, r3, #16
 80115ca:	431a      	orrs	r2, r3
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d0:	061b      	lsls	r3, r3, #24
 80115d2:	491b      	ldr	r1, [pc, #108]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80115d4:	4313      	orrs	r3, r2
 80115d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80115d8:	4b1b      	ldr	r3, [pc, #108]	; (8011648 <HAL_RCC_OscConfig+0x478>)
 80115da:	2201      	movs	r2, #1
 80115dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80115de:	f7f4 fd8b 	bl	80060f8 <HAL_GetTick>
 80115e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115e4:	e008      	b.n	80115f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80115e6:	f7f4 fd87 	bl	80060f8 <HAL_GetTick>
 80115ea:	4602      	mov	r2, r0
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	2b02      	cmp	r3, #2
 80115f2:	d901      	bls.n	80115f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80115f4:	2303      	movs	r3, #3
 80115f6:	e05c      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80115f8:	4b11      	ldr	r3, [pc, #68]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011600:	2b00      	cmp	r3, #0
 8011602:	d0f0      	beq.n	80115e6 <HAL_RCC_OscConfig+0x416>
 8011604:	e054      	b.n	80116b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011606:	4b10      	ldr	r3, [pc, #64]	; (8011648 <HAL_RCC_OscConfig+0x478>)
 8011608:	2200      	movs	r2, #0
 801160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801160c:	f7f4 fd74 	bl	80060f8 <HAL_GetTick>
 8011610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011612:	e008      	b.n	8011626 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011614:	f7f4 fd70 	bl	80060f8 <HAL_GetTick>
 8011618:	4602      	mov	r2, r0
 801161a:	693b      	ldr	r3, [r7, #16]
 801161c:	1ad3      	subs	r3, r2, r3
 801161e:	2b02      	cmp	r3, #2
 8011620:	d901      	bls.n	8011626 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011622:	2303      	movs	r3, #3
 8011624:	e045      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011626:	4b06      	ldr	r3, [pc, #24]	; (8011640 <HAL_RCC_OscConfig+0x470>)
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1f0      	bne.n	8011614 <HAL_RCC_OscConfig+0x444>
 8011632:	e03d      	b.n	80116b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	699b      	ldr	r3, [r3, #24]
 8011638:	2b01      	cmp	r3, #1
 801163a:	d107      	bne.n	801164c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	e038      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
 8011640:	40023800 	.word	0x40023800
 8011644:	40007000 	.word	0x40007000
 8011648:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 801164c:	4b1b      	ldr	r3, [pc, #108]	; (80116bc <HAL_RCC_OscConfig+0x4ec>)
 801164e:	685b      	ldr	r3, [r3, #4]
 8011650:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	699b      	ldr	r3, [r3, #24]
 8011656:	2b01      	cmp	r3, #1
 8011658:	d028      	beq.n	80116ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011664:	429a      	cmp	r2, r3
 8011666:	d121      	bne.n	80116ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011672:	429a      	cmp	r2, r3
 8011674:	d11a      	bne.n	80116ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011676:	68fa      	ldr	r2, [r7, #12]
 8011678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801167c:	4013      	ands	r3, r2
 801167e:	687a      	ldr	r2, [r7, #4]
 8011680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011682:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011684:	4293      	cmp	r3, r2
 8011686:	d111      	bne.n	80116ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011692:	085b      	lsrs	r3, r3, #1
 8011694:	3b01      	subs	r3, #1
 8011696:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011698:	429a      	cmp	r2, r3
 801169a:	d107      	bne.n	80116ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80116a8:	429a      	cmp	r2, r3
 80116aa:	d001      	beq.n	80116b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	e000      	b.n	80116b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80116b0:	2300      	movs	r3, #0
}
 80116b2:	4618      	mov	r0, r3
 80116b4:	3718      	adds	r7, #24
 80116b6:	46bd      	mov	sp, r7
 80116b8:	bd80      	pop	{r7, pc}
 80116ba:	bf00      	nop
 80116bc:	40023800 	.word	0x40023800

080116c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d101      	bne.n	80116d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80116d0:	2301      	movs	r3, #1
 80116d2:	e0cc      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80116d4:	4b68      	ldr	r3, [pc, #416]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	f003 0307 	and.w	r3, r3, #7
 80116dc:	683a      	ldr	r2, [r7, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d90c      	bls.n	80116fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80116e2:	4b65      	ldr	r3, [pc, #404]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116e4:	683a      	ldr	r2, [r7, #0]
 80116e6:	b2d2      	uxtb	r2, r2
 80116e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80116ea:	4b63      	ldr	r3, [pc, #396]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f003 0307 	and.w	r3, r3, #7
 80116f2:	683a      	ldr	r2, [r7, #0]
 80116f4:	429a      	cmp	r2, r3
 80116f6:	d001      	beq.n	80116fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80116f8:	2301      	movs	r3, #1
 80116fa:	e0b8      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	f003 0302 	and.w	r3, r3, #2
 8011704:	2b00      	cmp	r3, #0
 8011706:	d020      	beq.n	801174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	f003 0304 	and.w	r3, r3, #4
 8011710:	2b00      	cmp	r3, #0
 8011712:	d005      	beq.n	8011720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011714:	4b59      	ldr	r3, [pc, #356]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011716:	689b      	ldr	r3, [r3, #8]
 8011718:	4a58      	ldr	r2, [pc, #352]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801171a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	f003 0308 	and.w	r3, r3, #8
 8011728:	2b00      	cmp	r3, #0
 801172a:	d005      	beq.n	8011738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801172c:	4b53      	ldr	r3, [pc, #332]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801172e:	689b      	ldr	r3, [r3, #8]
 8011730:	4a52      	ldr	r2, [pc, #328]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011738:	4b50      	ldr	r3, [pc, #320]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	689b      	ldr	r3, [r3, #8]
 8011744:	494d      	ldr	r1, [pc, #308]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011746:	4313      	orrs	r3, r2
 8011748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	f003 0301 	and.w	r3, r3, #1
 8011752:	2b00      	cmp	r3, #0
 8011754:	d044      	beq.n	80117e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	2b01      	cmp	r3, #1
 801175c:	d107      	bne.n	801176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801175e:	4b47      	ldr	r3, [pc, #284]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011766:	2b00      	cmp	r3, #0
 8011768:	d119      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	e07f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	2b02      	cmp	r3, #2
 8011774:	d003      	beq.n	801177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801177a:	2b03      	cmp	r3, #3
 801177c:	d107      	bne.n	801178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801177e:	4b3f      	ldr	r3, [pc, #252]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011786:	2b00      	cmp	r3, #0
 8011788:	d109      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801178a:	2301      	movs	r3, #1
 801178c:	e06f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801178e:	4b3b      	ldr	r3, [pc, #236]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	f003 0302 	and.w	r3, r3, #2
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801179a:	2301      	movs	r3, #1
 801179c:	e067      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801179e:	4b37      	ldr	r3, [pc, #220]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117a0:	689b      	ldr	r3, [r3, #8]
 80117a2:	f023 0203 	bic.w	r2, r3, #3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	685b      	ldr	r3, [r3, #4]
 80117aa:	4934      	ldr	r1, [pc, #208]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117ac:	4313      	orrs	r3, r2
 80117ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80117b0:	f7f4 fca2 	bl	80060f8 <HAL_GetTick>
 80117b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80117b6:	e00a      	b.n	80117ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80117b8:	f7f4 fc9e 	bl	80060f8 <HAL_GetTick>
 80117bc:	4602      	mov	r2, r0
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80117c6:	4293      	cmp	r3, r2
 80117c8:	d901      	bls.n	80117ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80117ca:	2303      	movs	r3, #3
 80117cc:	e04f      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80117ce:	4b2b      	ldr	r3, [pc, #172]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 80117d0:	689b      	ldr	r3, [r3, #8]
 80117d2:	f003 020c 	and.w	r2, r3, #12
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	429a      	cmp	r2, r3
 80117de:	d1eb      	bne.n	80117b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80117e0:	4b25      	ldr	r3, [pc, #148]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	f003 0307 	and.w	r3, r3, #7
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	429a      	cmp	r2, r3
 80117ec:	d20c      	bcs.n	8011808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80117ee:	4b22      	ldr	r3, [pc, #136]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	b2d2      	uxtb	r2, r2
 80117f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80117f6:	4b20      	ldr	r3, [pc, #128]	; (8011878 <HAL_RCC_ClockConfig+0x1b8>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	f003 0307 	and.w	r3, r3, #7
 80117fe:	683a      	ldr	r2, [r7, #0]
 8011800:	429a      	cmp	r2, r3
 8011802:	d001      	beq.n	8011808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011804:	2301      	movs	r3, #1
 8011806:	e032      	b.n	801186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	f003 0304 	and.w	r3, r3, #4
 8011810:	2b00      	cmp	r3, #0
 8011812:	d008      	beq.n	8011826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011814:	4b19      	ldr	r3, [pc, #100]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	4916      	ldr	r1, [pc, #88]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011822:	4313      	orrs	r3, r2
 8011824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f003 0308 	and.w	r3, r3, #8
 801182e:	2b00      	cmp	r3, #0
 8011830:	d009      	beq.n	8011846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011832:	4b12      	ldr	r3, [pc, #72]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011834:	689b      	ldr	r3, [r3, #8]
 8011836:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	691b      	ldr	r3, [r3, #16]
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	490e      	ldr	r1, [pc, #56]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 8011842:	4313      	orrs	r3, r2
 8011844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011846:	f000 f8a1 	bl	801198c <HAL_RCC_GetSysClockFreq>
 801184a:	4602      	mov	r2, r0
 801184c:	4b0b      	ldr	r3, [pc, #44]	; (801187c <HAL_RCC_ClockConfig+0x1bc>)
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	091b      	lsrs	r3, r3, #4
 8011852:	f003 030f 	and.w	r3, r3, #15
 8011856:	490a      	ldr	r1, [pc, #40]	; (8011880 <HAL_RCC_ClockConfig+0x1c0>)
 8011858:	5ccb      	ldrb	r3, [r1, r3]
 801185a:	fa22 f303 	lsr.w	r3, r2, r3
 801185e:	4a09      	ldr	r2, [pc, #36]	; (8011884 <HAL_RCC_ClockConfig+0x1c4>)
 8011860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011862:	4b09      	ldr	r3, [pc, #36]	; (8011888 <HAL_RCC_ClockConfig+0x1c8>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	4618      	mov	r0, r3
 8011868:	f7f4 fc01 	bl	800606e <HAL_InitTick>

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	40023c00 	.word	0x40023c00
 801187c:	40023800 	.word	0x40023800
 8011880:	080517d8 	.word	0x080517d8
 8011884:	20000058 	.word	0x20000058
 8011888:	2000005c 	.word	0x2000005c

0801188c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b08c      	sub	sp, #48	; 0x30
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d129      	bne.n	80118f2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 801189e:	2300      	movs	r3, #0
 80118a0:	617b      	str	r3, [r7, #20]
 80118a2:	4b2b      	ldr	r3, [pc, #172]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a6:	4a2a      	ldr	r2, [pc, #168]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118a8:	f043 0301 	orr.w	r3, r3, #1
 80118ac:	6313      	str	r3, [r2, #48]	; 0x30
 80118ae:	4b28      	ldr	r3, [pc, #160]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118b2:	f003 0301 	and.w	r3, r3, #1
 80118b6:	617b      	str	r3, [r7, #20]
 80118b8:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80118ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118c0:	2302      	movs	r3, #2
 80118c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118c4:	2303      	movs	r3, #3
 80118c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80118c8:	2300      	movs	r3, #0
 80118ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80118cc:	2300      	movs	r3, #0
 80118ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80118d0:	f107 031c 	add.w	r3, r7, #28
 80118d4:	4619      	mov	r1, r3
 80118d6:	481f      	ldr	r0, [pc, #124]	; (8011954 <HAL_RCC_MCOConfig+0xc8>)
 80118d8:	f7f8 fd76 	bl	800a3c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80118dc:	4b1c      	ldr	r3, [pc, #112]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80118e4:	68b9      	ldr	r1, [r7, #8]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	430b      	orrs	r3, r1
 80118ea:	4919      	ldr	r1, [pc, #100]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118ec:	4313      	orrs	r3, r2
 80118ee:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80118f0:	e029      	b.n	8011946 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80118f2:	2300      	movs	r3, #0
 80118f4:	61bb      	str	r3, [r7, #24]
 80118f6:	4b16      	ldr	r3, [pc, #88]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118fa:	4a15      	ldr	r2, [pc, #84]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 80118fc:	f043 0304 	orr.w	r3, r3, #4
 8011900:	6313      	str	r3, [r2, #48]	; 0x30
 8011902:	4b13      	ldr	r3, [pc, #76]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 8011904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011906:	f003 0304 	and.w	r3, r3, #4
 801190a:	61bb      	str	r3, [r7, #24]
 801190c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 801190e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011914:	2302      	movs	r3, #2
 8011916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011918:	2303      	movs	r3, #3
 801191a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801191c:	2300      	movs	r3, #0
 801191e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011920:	2300      	movs	r3, #0
 8011922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8011924:	f107 031c 	add.w	r3, r7, #28
 8011928:	4619      	mov	r1, r3
 801192a:	480b      	ldr	r0, [pc, #44]	; (8011958 <HAL_RCC_MCOConfig+0xcc>)
 801192c:	f7f8 fd4c 	bl	800a3c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8011930:	4b07      	ldr	r3, [pc, #28]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	00d9      	lsls	r1, r3, #3
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	430b      	orrs	r3, r1
 8011940:	4903      	ldr	r1, [pc, #12]	; (8011950 <HAL_RCC_MCOConfig+0xc4>)
 8011942:	4313      	orrs	r3, r2
 8011944:	608b      	str	r3, [r1, #8]
}
 8011946:	bf00      	nop
 8011948:	3730      	adds	r7, #48	; 0x30
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	40023800 	.word	0x40023800
 8011954:	40020000 	.word	0x40020000
 8011958:	40020800 	.word	0x40020800

0801195c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 801195c:	b480      	push	{r7}
 801195e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8011960:	4b03      	ldr	r3, [pc, #12]	; (8011970 <HAL_RCC_EnableCSS+0x14>)
 8011962:	2201      	movs	r2, #1
 8011964:	601a      	str	r2, [r3, #0]
}
 8011966:	bf00      	nop
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr
 8011970:	4247004c 	.word	0x4247004c

08011974 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8011974:	b480      	push	{r7}
 8011976:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8011978:	4b03      	ldr	r3, [pc, #12]	; (8011988 <HAL_RCC_DisableCSS+0x14>)
 801197a:	2200      	movs	r2, #0
 801197c:	601a      	str	r2, [r3, #0]
}
 801197e:	bf00      	nop
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr
 8011988:	4247004c 	.word	0x4247004c

0801198c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801198c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011990:	b094      	sub	sp, #80	; 0x50
 8011992:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011994:	2300      	movs	r3, #0
 8011996:	647b      	str	r3, [r7, #68]	; 0x44
 8011998:	2300      	movs	r3, #0
 801199a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801199c:	2300      	movs	r3, #0
 801199e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80119a0:	2300      	movs	r3, #0
 80119a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80119a4:	4b79      	ldr	r3, [pc, #484]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80119a6:	689b      	ldr	r3, [r3, #8]
 80119a8:	f003 030c 	and.w	r3, r3, #12
 80119ac:	2b08      	cmp	r3, #8
 80119ae:	d00d      	beq.n	80119cc <HAL_RCC_GetSysClockFreq+0x40>
 80119b0:	2b08      	cmp	r3, #8
 80119b2:	f200 80e1 	bhi.w	8011b78 <HAL_RCC_GetSysClockFreq+0x1ec>
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d002      	beq.n	80119c0 <HAL_RCC_GetSysClockFreq+0x34>
 80119ba:	2b04      	cmp	r3, #4
 80119bc:	d003      	beq.n	80119c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80119be:	e0db      	b.n	8011b78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80119c0:	4b73      	ldr	r3, [pc, #460]	; (8011b90 <HAL_RCC_GetSysClockFreq+0x204>)
 80119c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80119c4:	e0db      	b.n	8011b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80119c6:	4b73      	ldr	r3, [pc, #460]	; (8011b94 <HAL_RCC_GetSysClockFreq+0x208>)
 80119c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80119ca:	e0d8      	b.n	8011b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80119cc:	4b6f      	ldr	r3, [pc, #444]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80119d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80119d6:	4b6d      	ldr	r3, [pc, #436]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80119d8:	685b      	ldr	r3, [r3, #4]
 80119da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d063      	beq.n	8011aaa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80119e2:	4b6a      	ldr	r3, [pc, #424]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	099b      	lsrs	r3, r3, #6
 80119e8:	2200      	movs	r2, #0
 80119ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80119ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80119ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119f4:	633b      	str	r3, [r7, #48]	; 0x30
 80119f6:	2300      	movs	r3, #0
 80119f8:	637b      	str	r3, [r7, #52]	; 0x34
 80119fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80119fe:	4622      	mov	r2, r4
 8011a00:	462b      	mov	r3, r5
 8011a02:	f04f 0000 	mov.w	r0, #0
 8011a06:	f04f 0100 	mov.w	r1, #0
 8011a0a:	0159      	lsls	r1, r3, #5
 8011a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011a10:	0150      	lsls	r0, r2, #5
 8011a12:	4602      	mov	r2, r0
 8011a14:	460b      	mov	r3, r1
 8011a16:	4621      	mov	r1, r4
 8011a18:	1a51      	subs	r1, r2, r1
 8011a1a:	6139      	str	r1, [r7, #16]
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8011a22:	617b      	str	r3, [r7, #20]
 8011a24:	f04f 0200 	mov.w	r2, #0
 8011a28:	f04f 0300 	mov.w	r3, #0
 8011a2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011a30:	4659      	mov	r1, fp
 8011a32:	018b      	lsls	r3, r1, #6
 8011a34:	4651      	mov	r1, sl
 8011a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011a3a:	4651      	mov	r1, sl
 8011a3c:	018a      	lsls	r2, r1, #6
 8011a3e:	4651      	mov	r1, sl
 8011a40:	ebb2 0801 	subs.w	r8, r2, r1
 8011a44:	4659      	mov	r1, fp
 8011a46:	eb63 0901 	sbc.w	r9, r3, r1
 8011a4a:	f04f 0200 	mov.w	r2, #0
 8011a4e:	f04f 0300 	mov.w	r3, #0
 8011a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011a5e:	4690      	mov	r8, r2
 8011a60:	4699      	mov	r9, r3
 8011a62:	4623      	mov	r3, r4
 8011a64:	eb18 0303 	adds.w	r3, r8, r3
 8011a68:	60bb      	str	r3, [r7, #8]
 8011a6a:	462b      	mov	r3, r5
 8011a6c:	eb49 0303 	adc.w	r3, r9, r3
 8011a70:	60fb      	str	r3, [r7, #12]
 8011a72:	f04f 0200 	mov.w	r2, #0
 8011a76:	f04f 0300 	mov.w	r3, #0
 8011a7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011a7e:	4629      	mov	r1, r5
 8011a80:	024b      	lsls	r3, r1, #9
 8011a82:	4621      	mov	r1, r4
 8011a84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011a88:	4621      	mov	r1, r4
 8011a8a:	024a      	lsls	r2, r1, #9
 8011a8c:	4610      	mov	r0, r2
 8011a8e:	4619      	mov	r1, r3
 8011a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011a92:	2200      	movs	r2, #0
 8011a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011a98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011a9c:	f007 f99a 	bl	8018dd4 <__aeabi_uldivmod>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011aa8:	e058      	b.n	8011b5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011aaa:	4b38      	ldr	r3, [pc, #224]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	099b      	lsrs	r3, r3, #6
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	4611      	mov	r1, r2
 8011ab6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8011aba:	623b      	str	r3, [r7, #32]
 8011abc:	2300      	movs	r3, #0
 8011abe:	627b      	str	r3, [r7, #36]	; 0x24
 8011ac0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011ac4:	4642      	mov	r2, r8
 8011ac6:	464b      	mov	r3, r9
 8011ac8:	f04f 0000 	mov.w	r0, #0
 8011acc:	f04f 0100 	mov.w	r1, #0
 8011ad0:	0159      	lsls	r1, r3, #5
 8011ad2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011ad6:	0150      	lsls	r0, r2, #5
 8011ad8:	4602      	mov	r2, r0
 8011ada:	460b      	mov	r3, r1
 8011adc:	4641      	mov	r1, r8
 8011ade:	ebb2 0a01 	subs.w	sl, r2, r1
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	eb63 0b01 	sbc.w	fp, r3, r1
 8011ae8:	f04f 0200 	mov.w	r2, #0
 8011aec:	f04f 0300 	mov.w	r3, #0
 8011af0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011af4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011af8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011afc:	ebb2 040a 	subs.w	r4, r2, sl
 8011b00:	eb63 050b 	sbc.w	r5, r3, fp
 8011b04:	f04f 0200 	mov.w	r2, #0
 8011b08:	f04f 0300 	mov.w	r3, #0
 8011b0c:	00eb      	lsls	r3, r5, #3
 8011b0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011b12:	00e2      	lsls	r2, r4, #3
 8011b14:	4614      	mov	r4, r2
 8011b16:	461d      	mov	r5, r3
 8011b18:	4643      	mov	r3, r8
 8011b1a:	18e3      	adds	r3, r4, r3
 8011b1c:	603b      	str	r3, [r7, #0]
 8011b1e:	464b      	mov	r3, r9
 8011b20:	eb45 0303 	adc.w	r3, r5, r3
 8011b24:	607b      	str	r3, [r7, #4]
 8011b26:	f04f 0200 	mov.w	r2, #0
 8011b2a:	f04f 0300 	mov.w	r3, #0
 8011b2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011b32:	4629      	mov	r1, r5
 8011b34:	028b      	lsls	r3, r1, #10
 8011b36:	4621      	mov	r1, r4
 8011b38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011b3c:	4621      	mov	r1, r4
 8011b3e:	028a      	lsls	r2, r1, #10
 8011b40:	4610      	mov	r0, r2
 8011b42:	4619      	mov	r1, r3
 8011b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b46:	2200      	movs	r2, #0
 8011b48:	61bb      	str	r3, [r7, #24]
 8011b4a:	61fa      	str	r2, [r7, #28]
 8011b4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011b50:	f007 f940 	bl	8018dd4 <__aeabi_uldivmod>
 8011b54:	4602      	mov	r2, r0
 8011b56:	460b      	mov	r3, r1
 8011b58:	4613      	mov	r3, r2
 8011b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8011b5c:	4b0b      	ldr	r3, [pc, #44]	; (8011b8c <HAL_RCC_GetSysClockFreq+0x200>)
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	0c1b      	lsrs	r3, r3, #16
 8011b62:	f003 0303 	and.w	r3, r3, #3
 8011b66:	3301      	adds	r3, #1
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8011b6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011b76:	e002      	b.n	8011b7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8011b78:	4b05      	ldr	r3, [pc, #20]	; (8011b90 <HAL_RCC_GetSysClockFreq+0x204>)
 8011b7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011b7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8011b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3750      	adds	r7, #80	; 0x50
 8011b84:	46bd      	mov	sp, r7
 8011b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011b8a:	bf00      	nop
 8011b8c:	40023800 	.word	0x40023800
 8011b90:	00f42400 	.word	0x00f42400
 8011b94:	007a1200 	.word	0x007a1200

08011b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011b9c:	4b03      	ldr	r3, [pc, #12]	; (8011bac <HAL_RCC_GetHCLKFreq+0x14>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
}
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba8:	4770      	bx	lr
 8011baa:	bf00      	nop
 8011bac:	20000058 	.word	0x20000058

08011bb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8011bb4:	f7ff fff0 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	4b05      	ldr	r3, [pc, #20]	; (8011bd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011bbc:	689b      	ldr	r3, [r3, #8]
 8011bbe:	0a9b      	lsrs	r3, r3, #10
 8011bc0:	f003 0307 	and.w	r3, r3, #7
 8011bc4:	4903      	ldr	r1, [pc, #12]	; (8011bd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8011bc6:	5ccb      	ldrb	r3, [r1, r3]
 8011bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	40023800 	.word	0x40023800
 8011bd4:	080517e8 	.word	0x080517e8

08011bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8011bdc:	f7ff ffdc 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 8011be0:	4602      	mov	r2, r0
 8011be2:	4b05      	ldr	r3, [pc, #20]	; (8011bf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011be4:	689b      	ldr	r3, [r3, #8]
 8011be6:	0b5b      	lsrs	r3, r3, #13
 8011be8:	f003 0307 	and.w	r3, r3, #7
 8011bec:	4903      	ldr	r1, [pc, #12]	; (8011bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8011bee:	5ccb      	ldrb	r3, [r1, r3]
 8011bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	bd80      	pop	{r7, pc}
 8011bf8:	40023800 	.word	0x40023800
 8011bfc:	080517e8 	.word	0x080517e8

08011c00 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	220f      	movs	r2, #15
 8011c0c:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8011c0e:	4b45      	ldr	r3, [pc, #276]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011c16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c1a:	d104      	bne.n	8011c26 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8011c22:	605a      	str	r2, [r3, #4]
 8011c24:	e00e      	b.n	8011c44 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8011c26:	4b3f      	ldr	r3, [pc, #252]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c32:	d104      	bne.n	8011c3e <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011c3a:	605a      	str	r2, [r3, #4]
 8011c3c:	e002      	b.n	8011c44 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8011c44:	4b37      	ldr	r3, [pc, #220]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f003 0301 	and.w	r3, r3, #1
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d103      	bne.n	8011c58 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2201      	movs	r2, #1
 8011c54:	60da      	str	r2, [r3, #12]
 8011c56:	e002      	b.n	8011c5e <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8011c5e:	4b31      	ldr	r3, [pc, #196]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	08db      	lsrs	r3, r3, #3
 8011c64:	f003 021f 	and.w	r2, r3, #31
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8011c6c:	4b2d      	ldr	r3, [pc, #180]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c70:	f003 0304 	and.w	r3, r3, #4
 8011c74:	2b04      	cmp	r3, #4
 8011c76:	d103      	bne.n	8011c80 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2205      	movs	r2, #5
 8011c7c:	609a      	str	r2, [r3, #8]
 8011c7e:	e00c      	b.n	8011c9a <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8011c80:	4b28      	ldr	r3, [pc, #160]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	2b01      	cmp	r3, #1
 8011c8a:	d103      	bne.n	8011c94 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	2201      	movs	r2, #1
 8011c90:	609a      	str	r2, [r3, #8]
 8011c92:	e002      	b.n	8011c9a <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2200      	movs	r2, #0
 8011c98:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8011c9a:	4b22      	ldr	r3, [pc, #136]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011c9e:	f003 0301 	and.w	r3, r3, #1
 8011ca2:	2b01      	cmp	r3, #1
 8011ca4:	d103      	bne.n	8011cae <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	615a      	str	r2, [r3, #20]
 8011cac:	e002      	b.n	8011cb4 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8011cb4:	4b1b      	ldr	r3, [pc, #108]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011cb6:	681b      	ldr	r3, [r3, #0]
 8011cb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011cc0:	d103      	bne.n	8011cca <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	2202      	movs	r2, #2
 8011cc6:	619a      	str	r2, [r3, #24]
 8011cc8:	e002      	b.n	8011cd0 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8011cd0:	4b14      	ldr	r3, [pc, #80]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8011cdc:	4b11      	ldr	r3, [pc, #68]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011cde:	685b      	ldr	r3, [r3, #4]
 8011ce0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8011ce8:	4b0e      	ldr	r3, [pc, #56]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011cea:	685b      	ldr	r3, [r3, #4]
 8011cec:	099b      	lsrs	r3, r3, #6
 8011cee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 8011cf6:	4b0b      	ldr	r3, [pc, #44]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011cf8:	685b      	ldr	r3, [r3, #4]
 8011cfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011cfe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8011d02:	005b      	lsls	r3, r3, #1
 8011d04:	0c1a      	lsrs	r2, r3, #16
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 8011d0a:	4b06      	ldr	r3, [pc, #24]	; (8011d24 <HAL_RCC_GetOscConfig+0x124>)
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	0e1b      	lsrs	r3, r3, #24
 8011d10:	f003 020f 	and.w	r2, r3, #15
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011d18:	bf00      	nop
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d22:	4770      	bx	lr
 8011d24:	40023800 	.word	0x40023800

08011d28 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	220f      	movs	r2, #15
 8011d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8011d38:	4b12      	ldr	r3, [pc, #72]	; (8011d84 <HAL_RCC_GetClockConfig+0x5c>)
 8011d3a:	689b      	ldr	r3, [r3, #8]
 8011d3c:	f003 0203 	and.w	r2, r3, #3
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8011d44:	4b0f      	ldr	r3, [pc, #60]	; (8011d84 <HAL_RCC_GetClockConfig+0x5c>)
 8011d46:	689b      	ldr	r3, [r3, #8]
 8011d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8011d50:	4b0c      	ldr	r3, [pc, #48]	; (8011d84 <HAL_RCC_GetClockConfig+0x5c>)
 8011d52:	689b      	ldr	r3, [r3, #8]
 8011d54:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8011d5c:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <HAL_RCC_GetClockConfig+0x5c>)
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	08db      	lsrs	r3, r3, #3
 8011d62:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8011d6a:	4b07      	ldr	r3, [pc, #28]	; (8011d88 <HAL_RCC_GetClockConfig+0x60>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f003 0207 	and.w	r2, r3, #7
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	601a      	str	r2, [r3, #0]
}
 8011d76:	bf00      	nop
 8011d78:	370c      	adds	r7, #12
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr
 8011d82:	bf00      	nop
 8011d84:	40023800 	.word	0x40023800
 8011d88:	40023c00 	.word	0x40023c00

08011d8c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8011d90:	4b06      	ldr	r3, [pc, #24]	; (8011dac <HAL_RCC_NMI_IRQHandler+0x20>)
 8011d92:	68db      	ldr	r3, [r3, #12]
 8011d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d98:	2b80      	cmp	r3, #128	; 0x80
 8011d9a:	d104      	bne.n	8011da6 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8011d9c:	f000 f80a 	bl	8011db4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8011da0:	4b03      	ldr	r3, [pc, #12]	; (8011db0 <HAL_RCC_NMI_IRQHandler+0x24>)
 8011da2:	2280      	movs	r2, #128	; 0x80
 8011da4:	701a      	strb	r2, [r3, #0]
  }
}
 8011da6:	bf00      	nop
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	40023800 	.word	0x40023800
 8011db0:	4002380e 	.word	0x4002380e

08011db4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8011db4:	b480      	push	{r7}
 8011db6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8011db8:	bf00      	nop
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b086      	sub	sp, #24
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8011dce:	2300      	movs	r3, #0
 8011dd0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d105      	bne.n	8011dea <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d035      	beq.n	8011e56 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8011dea:	4b62      	ldr	r3, [pc, #392]	; (8011f74 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8011dec:	2200      	movs	r2, #0
 8011dee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8011df0:	f7f4 f982 	bl	80060f8 <HAL_GetTick>
 8011df4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011df6:	e008      	b.n	8011e0a <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8011df8:	f7f4 f97e 	bl	80060f8 <HAL_GetTick>
 8011dfc:	4602      	mov	r2, r0
 8011dfe:	697b      	ldr	r3, [r7, #20]
 8011e00:	1ad3      	subs	r3, r2, r3
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d901      	bls.n	8011e0a <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011e06:	2303      	movs	r3, #3
 8011e08:	e0b0      	b.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8011e0a:	4b5b      	ldr	r3, [pc, #364]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d1f0      	bne.n	8011df8 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	019a      	lsls	r2, r3, #6
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	071b      	lsls	r3, r3, #28
 8011e22:	4955      	ldr	r1, [pc, #340]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e24:	4313      	orrs	r3, r2
 8011e26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8011e2a:	4b52      	ldr	r3, [pc, #328]	; (8011f74 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8011e2c:	2201      	movs	r2, #1
 8011e2e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8011e30:	f7f4 f962 	bl	80060f8 <HAL_GetTick>
 8011e34:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011e36:	e008      	b.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8011e38:	f7f4 f95e 	bl	80060f8 <HAL_GetTick>
 8011e3c:	4602      	mov	r2, r0
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	2b02      	cmp	r3, #2
 8011e44:	d901      	bls.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8011e46:	2303      	movs	r3, #3
 8011e48:	e090      	b.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8011e4a:	4b4b      	ldr	r3, [pc, #300]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d0f0      	beq.n	8011e38 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	f003 0302 	and.w	r3, r3, #2
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	f000 8083 	beq.w	8011f6a <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8011e64:	2300      	movs	r3, #0
 8011e66:	60fb      	str	r3, [r7, #12]
 8011e68:	4b43      	ldr	r3, [pc, #268]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e6c:	4a42      	ldr	r2, [pc, #264]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011e72:	6413      	str	r3, [r2, #64]	; 0x40
 8011e74:	4b40      	ldr	r3, [pc, #256]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e7c:	60fb      	str	r3, [r7, #12]
 8011e7e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8011e80:	4b3e      	ldr	r3, [pc, #248]	; (8011f7c <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4a3d      	ldr	r2, [pc, #244]	; (8011f7c <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011e8a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011e8c:	f7f4 f934 	bl	80060f8 <HAL_GetTick>
 8011e90:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011e92:	e008      	b.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8011e94:	f7f4 f930 	bl	80060f8 <HAL_GetTick>
 8011e98:	4602      	mov	r2, r0
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	2b02      	cmp	r3, #2
 8011ea0:	d901      	bls.n	8011ea6 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8011ea2:	2303      	movs	r3, #3
 8011ea4:	e062      	b.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8011ea6:	4b35      	ldr	r3, [pc, #212]	; (8011f7c <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d0f0      	beq.n	8011e94 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8011eb2:	4b31      	ldr	r3, [pc, #196]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011eba:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8011ebc:	693b      	ldr	r3, [r7, #16]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d02f      	beq.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d028      	beq.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011ed0:	4b29      	ldr	r3, [pc, #164]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ed4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ed8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8011eda:	4b29      	ldr	r3, [pc, #164]	; (8011f80 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8011edc:	2201      	movs	r2, #1
 8011ede:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8011ee0:	4b27      	ldr	r3, [pc, #156]	; (8011f80 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8011ee6:	4a24      	ldr	r2, [pc, #144]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8011eec:	4b22      	ldr	r3, [pc, #136]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ef0:	f003 0301 	and.w	r3, r3, #1
 8011ef4:	2b01      	cmp	r3, #1
 8011ef6:	d114      	bne.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8011ef8:	f7f4 f8fe 	bl	80060f8 <HAL_GetTick>
 8011efc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011efe:	e00a      	b.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011f00:	f7f4 f8fa 	bl	80060f8 <HAL_GetTick>
 8011f04:	4602      	mov	r2, r0
 8011f06:	697b      	ldr	r3, [r7, #20]
 8011f08:	1ad3      	subs	r3, r2, r3
 8011f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d901      	bls.n	8011f16 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8011f12:	2303      	movs	r3, #3
 8011f14:	e02a      	b.n	8011f6c <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011f16:	4b18      	ldr	r3, [pc, #96]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f1a:	f003 0302 	and.w	r3, r3, #2
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d0ee      	beq.n	8011f00 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	68db      	ldr	r3, [r3, #12]
 8011f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011f2e:	d10d      	bne.n	8011f4c <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8011f30:	4b11      	ldr	r3, [pc, #68]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f32:	689b      	ldr	r3, [r3, #8]
 8011f34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	68db      	ldr	r3, [r3, #12]
 8011f3c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011f40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f44:	490c      	ldr	r1, [pc, #48]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f46:	4313      	orrs	r3, r2
 8011f48:	608b      	str	r3, [r1, #8]
 8011f4a:	e005      	b.n	8011f58 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8011f4c:	4b0a      	ldr	r3, [pc, #40]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f4e:	689b      	ldr	r3, [r3, #8]
 8011f50:	4a09      	ldr	r2, [pc, #36]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8011f56:	6093      	str	r3, [r2, #8]
 8011f58:	4b07      	ldr	r3, [pc, #28]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f64:	4904      	ldr	r1, [pc, #16]	; (8011f78 <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8011f66:	4313      	orrs	r3, r2
 8011f68:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8011f6a:	2300      	movs	r3, #0
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3718      	adds	r7, #24
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	42470068 	.word	0x42470068
 8011f78:	40023800 	.word	0x40023800
 8011f7c:	40007000 	.word	0x40007000
 8011f80:	42470e40 	.word	0x42470e40

08011f84 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011f84:	b480      	push	{r7}
 8011f86:	b085      	sub	sp, #20
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	2203      	movs	r2, #3
 8011f90:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8011f92:	4b11      	ldr	r3, [pc, #68]	; (8011fd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8011f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f98:	099b      	lsrs	r3, r3, #6
 8011f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8011fa2:	4b0d      	ldr	r3, [pc, #52]	; (8011fd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8011fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fa8:	0f1b      	lsrs	r3, r3, #28
 8011faa:	f003 0207 	and.w	r2, r3, #7
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8011fb2:	4b09      	ldr	r3, [pc, #36]	; (8011fd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011fba:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8011fbc:	4b06      	ldr	r3, [pc, #24]	; (8011fd8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8011fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	431a      	orrs	r2, r3
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8011fcc:	bf00      	nop
 8011fce:	3714      	adds	r7, #20
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr
 8011fd8:	40023800 	.word	0x40023800

08011fdc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8011fdc:	b480      	push	{r7}
 8011fde:	b087      	sub	sp, #28
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8011fec:	2300      	movs	r3, #0
 8011fee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2b01      	cmp	r3, #1
 8011ff8:	d13e      	bne.n	8012078 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8011ffa:	4b23      	ldr	r3, [pc, #140]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8011ffc:	689b      	ldr	r3, [r3, #8]
 8011ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012002:	60fb      	str	r3, [r7, #12]
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d005      	beq.n	8012016 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2b01      	cmp	r3, #1
 801200e:	d12f      	bne.n	8012070 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012010:	4b1e      	ldr	r3, [pc, #120]	; (801208c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012012:	617b      	str	r3, [r7, #20]
          break;
 8012014:	e02f      	b.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012016:	4b1c      	ldr	r3, [pc, #112]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801201e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012022:	d108      	bne.n	8012036 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012024:	4b18      	ldr	r3, [pc, #96]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801202c:	4a18      	ldr	r2, [pc, #96]	; (8012090 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 801202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012032:	613b      	str	r3, [r7, #16]
 8012034:	e007      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012036:	4b14      	ldr	r3, [pc, #80]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801203e:	4a15      	ldr	r2, [pc, #84]	; (8012094 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012040:	fbb2 f3f3 	udiv	r3, r2, r3
 8012044:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8012046:	4b10      	ldr	r3, [pc, #64]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801204c:	099b      	lsrs	r3, r3, #6
 801204e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	fb02 f303 	mul.w	r3, r2, r3
 8012058:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 801205a:	4b0b      	ldr	r3, [pc, #44]	; (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801205c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012060:	0f1b      	lsrs	r3, r3, #28
 8012062:	f003 0307 	and.w	r3, r3, #7
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	fbb2 f3f3 	udiv	r3, r2, r3
 801206c:	617b      	str	r3, [r7, #20]
          break;
 801206e:	e002      	b.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8012070:	2300      	movs	r3, #0
 8012072:	617b      	str	r3, [r7, #20]
          break;
 8012074:	bf00      	nop
        }
      }
      break;
 8012076:	bf00      	nop
    }
  }
  return frequency;
 8012078:	697b      	ldr	r3, [r7, #20]
}
 801207a:	4618      	mov	r0, r3
 801207c:	371c      	adds	r7, #28
 801207e:	46bd      	mov	sp, r7
 8012080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop
 8012088:	40023800 	.word	0x40023800
 801208c:	00bb8000 	.word	0x00bb8000
 8012090:	007a1200 	.word	0x007a1200
 8012094:	00f42400 	.word	0x00f42400

08012098 <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b084      	sub	sp, #16
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80120a0:	4b1d      	ldr	r3, [pc, #116]	; (8012118 <HAL_RCCEx_EnablePLLI2S+0x80>)
 80120a2:	2200      	movs	r2, #0
 80120a4:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80120a6:	f7f4 f827 	bl	80060f8 <HAL_GetTick>
 80120aa:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80120ac:	e008      	b.n	80120c0 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80120ae:	f7f4 f823 	bl	80060f8 <HAL_GetTick>
 80120b2:	4602      	mov	r2, r0
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	1ad3      	subs	r3, r2, r3
 80120b8:	2b02      	cmp	r3, #2
 80120ba:	d901      	bls.n	80120c0 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80120bc:	2303      	movs	r3, #3
 80120be:	e026      	b.n	801210e <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80120c0:	4b16      	ldr	r3, [pc, #88]	; (801211c <HAL_RCCEx_EnablePLLI2S+0x84>)
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d1f0      	bne.n	80120ae <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	019a      	lsls	r2, r3, #6
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	071b      	lsls	r3, r3, #28
 80120d8:	4910      	ldr	r1, [pc, #64]	; (801211c <HAL_RCCEx_EnablePLLI2S+0x84>)
 80120da:	4313      	orrs	r3, r2
 80120dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 80120e0:	4b0d      	ldr	r3, [pc, #52]	; (8012118 <HAL_RCCEx_EnablePLLI2S+0x80>)
 80120e2:	2201      	movs	r2, #1
 80120e4:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 80120e6:	f7f4 f807 	bl	80060f8 <HAL_GetTick>
 80120ea:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 80120ec:	e008      	b.n	8012100 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80120ee:	f7f4 f803 	bl	80060f8 <HAL_GetTick>
 80120f2:	4602      	mov	r2, r0
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	2b02      	cmp	r3, #2
 80120fa:	d901      	bls.n	8012100 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80120fc:	2303      	movs	r3, #3
 80120fe:	e006      	b.n	801210e <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012100:	4b06      	ldr	r3, [pc, #24]	; (801211c <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012108:	2b00      	cmp	r3, #0
 801210a:	d0f0      	beq.n	80120ee <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 801210c:	2300      	movs	r3, #0
}
 801210e:	4618      	mov	r0, r3
 8012110:	3710      	adds	r7, #16
 8012112:	46bd      	mov	sp, r7
 8012114:	bd80      	pop	{r7, pc}
 8012116:	bf00      	nop
 8012118:	42470068 	.word	0x42470068
 801211c:	40023800 	.word	0x40023800

08012120 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 8012126:	4b0d      	ldr	r3, [pc, #52]	; (801215c <HAL_RCCEx_DisablePLLI2S+0x3c>)
 8012128:	2200      	movs	r2, #0
 801212a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 801212c:	f7f3 ffe4 	bl	80060f8 <HAL_GetTick>
 8012130:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012132:	e008      	b.n	8012146 <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012134:	f7f3 ffe0 	bl	80060f8 <HAL_GetTick>
 8012138:	4602      	mov	r2, r0
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	1ad3      	subs	r3, r2, r3
 801213e:	2b02      	cmp	r3, #2
 8012140:	d901      	bls.n	8012146 <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012142:	2303      	movs	r3, #3
 8012144:	e006      	b.n	8012154 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012146:	4b06      	ldr	r3, [pc, #24]	; (8012160 <HAL_RCCEx_DisablePLLI2S+0x40>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801214e:	2b00      	cmp	r3, #0
 8012150:	d1f0      	bne.n	8012134 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012152:	2300      	movs	r3, #0
}
 8012154:	4618      	mov	r0, r3
 8012156:	3708      	adds	r7, #8
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}
 801215c:	42470068 	.word	0x42470068
 8012160:	40023800 	.word	0x40023800

08012164 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b082      	sub	sp, #8
 8012168:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801216a:	f7f3 ffc5 	bl	80060f8 <HAL_GetTick>
 801216e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8012170:	4b5d      	ldr	r3, [pc, #372]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4a5c      	ldr	r2, [pc, #368]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 801217c:	e008      	b.n	8012190 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801217e:	f7f3 ffbb 	bl	80060f8 <HAL_GetTick>
 8012182:	4602      	mov	r2, r0
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	1ad3      	subs	r3, r2, r3
 8012188:	2b02      	cmp	r3, #2
 801218a:	d901      	bls.n	8012190 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 801218c:	2303      	movs	r3, #3
 801218e:	e0a7      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8012190:	4b55      	ldr	r3, [pc, #340]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	f003 0302 	and.w	r3, r3, #2
 8012198:	2b00      	cmp	r3, #0
 801219a:	d0f0      	beq.n	801217e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 801219c:	4b52      	ldr	r3, [pc, #328]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4a51      	ldr	r2, [pc, #324]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80121a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80121a8:	f7f3 ffa6 	bl	80060f8 <HAL_GetTick>
 80121ac:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80121ae:	4b4e      	ldr	r3, [pc, #312]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80121b0:	2200      	movs	r2, #0
 80121b2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80121b4:	e00a      	b.n	80121cc <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80121b6:	f7f3 ff9f 	bl	80060f8 <HAL_GetTick>
 80121ba:	4602      	mov	r2, r0
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	1ad3      	subs	r3, r2, r3
 80121c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80121c4:	4293      	cmp	r3, r2
 80121c6:	d901      	bls.n	80121cc <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80121c8:	2303      	movs	r3, #3
 80121ca:	e089      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80121cc:	4b46      	ldr	r3, [pc, #280]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80121ce:	689b      	ldr	r3, [r3, #8]
 80121d0:	f003 030c 	and.w	r3, r3, #12
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d1ee      	bne.n	80121b6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80121d8:	f7f3 ff8e 	bl	80060f8 <HAL_GetTick>
 80121dc:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80121de:	4b42      	ldr	r3, [pc, #264]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4a41      	ldr	r2, [pc, #260]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80121e4:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 80121e8:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80121ea:	e008      	b.n	80121fe <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80121ec:	f7f3 ff84 	bl	80060f8 <HAL_GetTick>
 80121f0:	4602      	mov	r2, r0
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	1ad3      	subs	r3, r2, r3
 80121f6:	2b64      	cmp	r3, #100	; 0x64
 80121f8:	d901      	bls.n	80121fe <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80121fa:	2303      	movs	r3, #3
 80121fc:	e070      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80121fe:	4b3a      	ldr	r3, [pc, #232]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1f0      	bne.n	80121ec <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801220a:	f7f3 ff75 	bl	80060f8 <HAL_GetTick>
 801220e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012210:	4b35      	ldr	r3, [pc, #212]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	4a34      	ldr	r2, [pc, #208]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801221a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 801221c:	e008      	b.n	8012230 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801221e:	f7f3 ff6b 	bl	80060f8 <HAL_GetTick>
 8012222:	4602      	mov	r2, r0
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	2b02      	cmp	r3, #2
 801222a:	d901      	bls.n	8012230 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 801222c:	2303      	movs	r3, #3
 801222e:	e057      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012230:	4b2d      	ldr	r3, [pc, #180]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012238:	2b00      	cmp	r3, #0
 801223a:	d1f0      	bne.n	801221e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801223c:	f7f3 ff5c 	bl	80060f8 <HAL_GetTick>
 8012240:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8012242:	4b29      	ldr	r3, [pc, #164]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4a28      	ldr	r2, [pc, #160]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012248:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801224c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801224e:	e008      	b.n	8012262 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012250:	f7f3 ff52 	bl	80060f8 <HAL_GetTick>
 8012254:	4602      	mov	r2, r0
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	1ad3      	subs	r3, r2, r3
 801225a:	2b02      	cmp	r3, #2
 801225c:	d901      	bls.n	8012262 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 801225e:	2303      	movs	r3, #3
 8012260:	e03e      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012262:	4b21      	ldr	r3, [pc, #132]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801226a:	2b00      	cmp	r3, #0
 801226c:	d1f0      	bne.n	8012250 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 801226e:	4b1e      	ldr	r3, [pc, #120]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012270:	4a1e      	ldr	r2, [pc, #120]	; (80122ec <HAL_RCC_DeInit+0x188>)
 8012272:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8012274:	4b1c      	ldr	r3, [pc, #112]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012276:	4a1e      	ldr	r2, [pc, #120]	; (80122f0 <HAL_RCC_DeInit+0x18c>)
 8012278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 801227c:	4b1a      	ldr	r3, [pc, #104]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	4a19      	ldr	r2, [pc, #100]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012282:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8012286:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8012288:	4b17      	ldr	r3, [pc, #92]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	4a16      	ldr	r2, [pc, #88]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 801228e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012292:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8012294:	4b14      	ldr	r3, [pc, #80]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 8012296:	68db      	ldr	r3, [r3, #12]
 8012298:	4a13      	ldr	r2, [pc, #76]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 801229a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 801229e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80122a0:	4b11      	ldr	r3, [pc, #68]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122a2:	68db      	ldr	r3, [r3, #12]
 80122a4:	4a10      	ldr	r2, [pc, #64]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80122aa:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80122ac:	4b0e      	ldr	r3, [pc, #56]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122b0:	4a0d      	ldr	r2, [pc, #52]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122b2:	f023 0301 	bic.w	r3, r3, #1
 80122b6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80122b8:	4b0b      	ldr	r3, [pc, #44]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122bc:	4a0a      	ldr	r2, [pc, #40]	; (80122e8 <HAL_RCC_DeInit+0x184>)
 80122be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80122c2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80122c4:	4b0b      	ldr	r3, [pc, #44]	; (80122f4 <HAL_RCC_DeInit+0x190>)
 80122c6:	4a0c      	ldr	r2, [pc, #48]	; (80122f8 <HAL_RCC_DeInit+0x194>)
 80122c8:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80122ca:	4b0c      	ldr	r3, [pc, #48]	; (80122fc <HAL_RCC_DeInit+0x198>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7f3 fecd 	bl	800606e <HAL_InitTick>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 80122da:	2301      	movs	r3, #1
 80122dc:	e000      	b.n	80122e0 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 80122de:	2300      	movs	r3, #0
  }
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3708      	adds	r7, #8
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}
 80122e8:	40023800 	.word	0x40023800
 80122ec:	04003010 	.word	0x04003010
 80122f0:	20003000 	.word	0x20003000
 80122f4:	20000058 	.word	0x20000058
 80122f8:	00f42400 	.word	0x00f42400
 80122fc:	2000005c 	.word	0x2000005c

08012300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b082      	sub	sp, #8
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d101      	bne.n	8012312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801230e:	2301      	movs	r3, #1
 8012310:	e07b      	b.n	801240a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012316:	2b00      	cmp	r3, #0
 8012318:	d108      	bne.n	801232c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012322:	d009      	beq.n	8012338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	2200      	movs	r2, #0
 8012328:	61da      	str	r2, [r3, #28]
 801232a:	e005      	b.n	8012338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	2200      	movs	r2, #0
 8012330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2200      	movs	r2, #0
 8012336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2200      	movs	r2, #0
 801233c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012344:	b2db      	uxtb	r3, r3
 8012346:	2b00      	cmp	r3, #0
 8012348:	d106      	bne.n	8012358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2200      	movs	r2, #0
 801234e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f7f3 f93a 	bl	80055cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2202      	movs	r2, #2
 801235c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	681a      	ldr	r2, [r3, #0]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801236e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	689b      	ldr	r3, [r3, #8]
 801237c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8012380:	431a      	orrs	r2, r3
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	68db      	ldr	r3, [r3, #12]
 8012386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801238a:	431a      	orrs	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	691b      	ldr	r3, [r3, #16]
 8012390:	f003 0302 	and.w	r3, r3, #2
 8012394:	431a      	orrs	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	695b      	ldr	r3, [r3, #20]
 801239a:	f003 0301 	and.w	r3, r3, #1
 801239e:	431a      	orrs	r2, r3
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	699b      	ldr	r3, [r3, #24]
 80123a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80123a8:	431a      	orrs	r2, r3
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	69db      	ldr	r3, [r3, #28]
 80123ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80123b2:	431a      	orrs	r2, r3
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a1b      	ldr	r3, [r3, #32]
 80123b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80123bc:	ea42 0103 	orr.w	r1, r2, r3
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	430a      	orrs	r2, r1
 80123ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	699b      	ldr	r3, [r3, #24]
 80123d4:	0c1b      	lsrs	r3, r3, #16
 80123d6:	f003 0104 	and.w	r1, r3, #4
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123de:	f003 0210 	and.w	r2, r3, #16
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	430a      	orrs	r2, r1
 80123e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	69da      	ldr	r2, [r3, #28]
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80123f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2200      	movs	r2, #0
 80123fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2201      	movs	r2, #1
 8012404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8012408:	2300      	movs	r3, #0
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b082      	sub	sp, #8
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012420:	2301      	movs	r3, #1
 8012422:	e01a      	b.n	801245a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2202      	movs	r2, #2
 8012428:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801243a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f7f3 f965 	bl	800570c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	2200      	movs	r2, #0
 801244c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b088      	sub	sp, #32
 8012466:	af00      	add	r7, sp, #0
 8012468:	60f8      	str	r0, [r7, #12]
 801246a:	60b9      	str	r1, [r7, #8]
 801246c:	603b      	str	r3, [r7, #0]
 801246e:	4613      	mov	r3, r2
 8012470:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012472:	2300      	movs	r3, #0
 8012474:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801247c:	2b01      	cmp	r3, #1
 801247e:	d101      	bne.n	8012484 <HAL_SPI_Transmit+0x22>
 8012480:	2302      	movs	r3, #2
 8012482:	e126      	b.n	80126d2 <HAL_SPI_Transmit+0x270>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	2201      	movs	r2, #1
 8012488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801248c:	f7f3 fe34 	bl	80060f8 <HAL_GetTick>
 8012490:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8012492:	88fb      	ldrh	r3, [r7, #6]
 8012494:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801249c:	b2db      	uxtb	r3, r3
 801249e:	2b01      	cmp	r3, #1
 80124a0:	d002      	beq.n	80124a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80124a2:	2302      	movs	r3, #2
 80124a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80124a6:	e10b      	b.n	80126c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d002      	beq.n	80124b4 <HAL_SPI_Transmit+0x52>
 80124ae:	88fb      	ldrh	r3, [r7, #6]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d102      	bne.n	80124ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80124b4:	2301      	movs	r3, #1
 80124b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80124b8:	e102      	b.n	80126c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	2203      	movs	r2, #3
 80124be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	2200      	movs	r2, #0
 80124c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	88fa      	ldrh	r2, [r7, #6]
 80124d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	88fa      	ldrh	r2, [r7, #6]
 80124d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2200      	movs	r2, #0
 80124de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	2200      	movs	r2, #0
 80124e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2200      	movs	r2, #0
 80124ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2200      	movs	r2, #0
 80124f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2200      	movs	r2, #0
 80124f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012500:	d10f      	bne.n	8012522 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	681a      	ldr	r2, [r3, #0]
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012510:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012520:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801252c:	2b40      	cmp	r3, #64	; 0x40
 801252e:	d007      	beq.n	8012540 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	681a      	ldr	r2, [r3, #0]
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801253e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	68db      	ldr	r3, [r3, #12]
 8012544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012548:	d14b      	bne.n	80125e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d002      	beq.n	8012558 <HAL_SPI_Transmit+0xf6>
 8012552:	8afb      	ldrh	r3, [r7, #22]
 8012554:	2b01      	cmp	r3, #1
 8012556:	d13e      	bne.n	80125d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801255c:	881a      	ldrh	r2, [r3, #0]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012568:	1c9a      	adds	r2, r3, #2
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012572:	b29b      	uxth	r3, r3
 8012574:	3b01      	subs	r3, #1
 8012576:	b29a      	uxth	r2, r3
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801257c:	e02b      	b.n	80125d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	689b      	ldr	r3, [r3, #8]
 8012584:	f003 0302 	and.w	r3, r3, #2
 8012588:	2b02      	cmp	r3, #2
 801258a:	d112      	bne.n	80125b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012590:	881a      	ldrh	r2, [r3, #0]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801259c:	1c9a      	adds	r2, r3, #2
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	3b01      	subs	r3, #1
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80125b0:	e011      	b.n	80125d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80125b2:	f7f3 fda1 	bl	80060f8 <HAL_GetTick>
 80125b6:	4602      	mov	r2, r0
 80125b8:	69bb      	ldr	r3, [r7, #24]
 80125ba:	1ad3      	subs	r3, r2, r3
 80125bc:	683a      	ldr	r2, [r7, #0]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d803      	bhi.n	80125ca <HAL_SPI_Transmit+0x168>
 80125c2:	683b      	ldr	r3, [r7, #0]
 80125c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c8:	d102      	bne.n	80125d0 <HAL_SPI_Transmit+0x16e>
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80125d0:	2303      	movs	r3, #3
 80125d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80125d4:	e074      	b.n	80126c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125da:	b29b      	uxth	r3, r3
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d1ce      	bne.n	801257e <HAL_SPI_Transmit+0x11c>
 80125e0:	e04c      	b.n	801267c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	685b      	ldr	r3, [r3, #4]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d002      	beq.n	80125f0 <HAL_SPI_Transmit+0x18e>
 80125ea:	8afb      	ldrh	r3, [r7, #22]
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d140      	bne.n	8012672 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	330c      	adds	r3, #12
 80125fa:	7812      	ldrb	r2, [r2, #0]
 80125fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012602:	1c5a      	adds	r2, r3, #1
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801260c:	b29b      	uxth	r3, r3
 801260e:	3b01      	subs	r3, #1
 8012610:	b29a      	uxth	r2, r3
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012616:	e02c      	b.n	8012672 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	689b      	ldr	r3, [r3, #8]
 801261e:	f003 0302 	and.w	r3, r3, #2
 8012622:	2b02      	cmp	r3, #2
 8012624:	d113      	bne.n	801264e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	330c      	adds	r3, #12
 8012630:	7812      	ldrb	r2, [r2, #0]
 8012632:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012638:	1c5a      	adds	r2, r3, #1
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012642:	b29b      	uxth	r3, r3
 8012644:	3b01      	subs	r3, #1
 8012646:	b29a      	uxth	r2, r3
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	86da      	strh	r2, [r3, #54]	; 0x36
 801264c:	e011      	b.n	8012672 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801264e:	f7f3 fd53 	bl	80060f8 <HAL_GetTick>
 8012652:	4602      	mov	r2, r0
 8012654:	69bb      	ldr	r3, [r7, #24]
 8012656:	1ad3      	subs	r3, r2, r3
 8012658:	683a      	ldr	r2, [r7, #0]
 801265a:	429a      	cmp	r2, r3
 801265c:	d803      	bhi.n	8012666 <HAL_SPI_Transmit+0x204>
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012664:	d102      	bne.n	801266c <HAL_SPI_Transmit+0x20a>
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d102      	bne.n	8012672 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801266c:	2303      	movs	r3, #3
 801266e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012670:	e026      	b.n	80126c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012676:	b29b      	uxth	r3, r3
 8012678:	2b00      	cmp	r3, #0
 801267a:	d1cd      	bne.n	8012618 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801267c:	69ba      	ldr	r2, [r7, #24]
 801267e:	6839      	ldr	r1, [r7, #0]
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f001 ff3e 	bl	8014502 <SPI_EndRxTxTransaction>
 8012686:	4603      	mov	r3, r0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d002      	beq.n	8012692 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2220      	movs	r2, #32
 8012690:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	689b      	ldr	r3, [r3, #8]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d10a      	bne.n	80126b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801269a:	2300      	movs	r3, #0
 801269c:	613b      	str	r3, [r7, #16]
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	68db      	ldr	r3, [r3, #12]
 80126a4:	613b      	str	r3, [r7, #16]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	689b      	ldr	r3, [r3, #8]
 80126ac:	613b      	str	r3, [r7, #16]
 80126ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d002      	beq.n	80126be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80126b8:	2301      	movs	r3, #1
 80126ba:	77fb      	strb	r3, [r7, #31]
 80126bc:	e000      	b.n	80126c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80126be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	2201      	movs	r2, #1
 80126c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2200      	movs	r2, #0
 80126cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80126d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3720      	adds	r7, #32
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b088      	sub	sp, #32
 80126de:	af02      	add	r7, sp, #8
 80126e0:	60f8      	str	r0, [r7, #12]
 80126e2:	60b9      	str	r1, [r7, #8]
 80126e4:	603b      	str	r3, [r7, #0]
 80126e6:	4613      	mov	r3, r2
 80126e8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80126f6:	d112      	bne.n	801271e <HAL_SPI_Receive+0x44>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	689b      	ldr	r3, [r3, #8]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10e      	bne.n	801271e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2204      	movs	r2, #4
 8012704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012708:	88fa      	ldrh	r2, [r7, #6]
 801270a:	683b      	ldr	r3, [r7, #0]
 801270c:	9300      	str	r3, [sp, #0]
 801270e:	4613      	mov	r3, r2
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	68b9      	ldr	r1, [r7, #8]
 8012714:	68f8      	ldr	r0, [r7, #12]
 8012716:	f000 f8f1 	bl	80128fc <HAL_SPI_TransmitReceive>
 801271a:	4603      	mov	r3, r0
 801271c:	e0ea      	b.n	80128f4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012724:	2b01      	cmp	r3, #1
 8012726:	d101      	bne.n	801272c <HAL_SPI_Receive+0x52>
 8012728:	2302      	movs	r3, #2
 801272a:	e0e3      	b.n	80128f4 <HAL_SPI_Receive+0x21a>
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	2201      	movs	r2, #1
 8012730:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012734:	f7f3 fce0 	bl	80060f8 <HAL_GetTick>
 8012738:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012740:	b2db      	uxtb	r3, r3
 8012742:	2b01      	cmp	r3, #1
 8012744:	d002      	beq.n	801274c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012746:	2302      	movs	r3, #2
 8012748:	75fb      	strb	r3, [r7, #23]
    goto error;
 801274a:	e0ca      	b.n	80128e2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d002      	beq.n	8012758 <HAL_SPI_Receive+0x7e>
 8012752:	88fb      	ldrh	r3, [r7, #6]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d102      	bne.n	801275e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012758:	2301      	movs	r3, #1
 801275a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801275c:	e0c1      	b.n	80128e2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2204      	movs	r2, #4
 8012762:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2200      	movs	r2, #0
 801276a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	88fa      	ldrh	r2, [r7, #6]
 8012776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	88fa      	ldrh	r2, [r7, #6]
 801277c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2200      	movs	r2, #0
 8012782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2200      	movs	r2, #0
 8012788:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	2200      	movs	r2, #0
 801278e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	2200      	movs	r2, #0
 8012794:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2200      	movs	r2, #0
 801279a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80127a4:	d10f      	bne.n	80127c6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80127b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80127c4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127d0:	2b40      	cmp	r3, #64	; 0x40
 80127d2:	d007      	beq.n	80127e4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	681a      	ldr	r2, [r3, #0]
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80127e2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d162      	bne.n	80128b2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80127ec:	e02e      	b.n	801284c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f003 0301 	and.w	r3, r3, #1
 80127f8:	2b01      	cmp	r3, #1
 80127fa:	d115      	bne.n	8012828 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	f103 020c 	add.w	r2, r3, #12
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012808:	7812      	ldrb	r2, [r2, #0]
 801280a:	b2d2      	uxtb	r2, r2
 801280c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012812:	1c5a      	adds	r2, r3, #1
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801281c:	b29b      	uxth	r3, r3
 801281e:	3b01      	subs	r3, #1
 8012820:	b29a      	uxth	r2, r3
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012826:	e011      	b.n	801284c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012828:	f7f3 fc66 	bl	80060f8 <HAL_GetTick>
 801282c:	4602      	mov	r2, r0
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	1ad3      	subs	r3, r2, r3
 8012832:	683a      	ldr	r2, [r7, #0]
 8012834:	429a      	cmp	r2, r3
 8012836:	d803      	bhi.n	8012840 <HAL_SPI_Receive+0x166>
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801283e:	d102      	bne.n	8012846 <HAL_SPI_Receive+0x16c>
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d102      	bne.n	801284c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012846:	2303      	movs	r3, #3
 8012848:	75fb      	strb	r3, [r7, #23]
          goto error;
 801284a:	e04a      	b.n	80128e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012850:	b29b      	uxth	r3, r3
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1cb      	bne.n	80127ee <HAL_SPI_Receive+0x114>
 8012856:	e031      	b.n	80128bc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	f003 0301 	and.w	r3, r3, #1
 8012862:	2b01      	cmp	r3, #1
 8012864:	d113      	bne.n	801288e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	68da      	ldr	r2, [r3, #12]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012870:	b292      	uxth	r2, r2
 8012872:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012878:	1c9a      	adds	r2, r3, #2
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012882:	b29b      	uxth	r3, r3
 8012884:	3b01      	subs	r3, #1
 8012886:	b29a      	uxth	r2, r3
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801288c:	e011      	b.n	80128b2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801288e:	f7f3 fc33 	bl	80060f8 <HAL_GetTick>
 8012892:	4602      	mov	r2, r0
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	1ad3      	subs	r3, r2, r3
 8012898:	683a      	ldr	r2, [r7, #0]
 801289a:	429a      	cmp	r2, r3
 801289c:	d803      	bhi.n	80128a6 <HAL_SPI_Receive+0x1cc>
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a4:	d102      	bne.n	80128ac <HAL_SPI_Receive+0x1d2>
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d102      	bne.n	80128b2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80128ac:	2303      	movs	r3, #3
 80128ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 80128b0:	e017      	b.n	80128e2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d1cd      	bne.n	8012858 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80128bc:	693a      	ldr	r2, [r7, #16]
 80128be:	6839      	ldr	r1, [r7, #0]
 80128c0:	68f8      	ldr	r0, [r7, #12]
 80128c2:	f001 fdb9 	bl	8014438 <SPI_EndRxTransaction>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d002      	beq.n	80128d2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	2220      	movs	r2, #32
 80128d0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d002      	beq.n	80128e0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80128da:	2301      	movs	r3, #1
 80128dc:	75fb      	strb	r3, [r7, #23]
 80128de:	e000      	b.n	80128e2 <HAL_SPI_Receive+0x208>
  }

error :
 80128e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2201      	movs	r2, #1
 80128e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2200      	movs	r2, #0
 80128ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80128f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80128f4:	4618      	mov	r0, r3
 80128f6:	3718      	adds	r7, #24
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b08c      	sub	sp, #48	; 0x30
 8012900:	af00      	add	r7, sp, #0
 8012902:	60f8      	str	r0, [r7, #12]
 8012904:	60b9      	str	r1, [r7, #8]
 8012906:	607a      	str	r2, [r7, #4]
 8012908:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801290a:	2301      	movs	r3, #1
 801290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801290e:	2300      	movs	r3, #0
 8012910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801291a:	2b01      	cmp	r3, #1
 801291c:	d101      	bne.n	8012922 <HAL_SPI_TransmitReceive+0x26>
 801291e:	2302      	movs	r3, #2
 8012920:	e18a      	b.n	8012c38 <HAL_SPI_TransmitReceive+0x33c>
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	2201      	movs	r2, #1
 8012926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801292a:	f7f3 fbe5 	bl	80060f8 <HAL_GetTick>
 801292e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012940:	887b      	ldrh	r3, [r7, #2]
 8012942:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012944:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012948:	2b01      	cmp	r3, #1
 801294a:	d00f      	beq.n	801296c <HAL_SPI_TransmitReceive+0x70>
 801294c:	69fb      	ldr	r3, [r7, #28]
 801294e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012952:	d107      	bne.n	8012964 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	689b      	ldr	r3, [r3, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d103      	bne.n	8012964 <HAL_SPI_TransmitReceive+0x68>
 801295c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012960:	2b04      	cmp	r3, #4
 8012962:	d003      	beq.n	801296c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012964:	2302      	movs	r3, #2
 8012966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801296a:	e15b      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d005      	beq.n	801297e <HAL_SPI_TransmitReceive+0x82>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d002      	beq.n	801297e <HAL_SPI_TransmitReceive+0x82>
 8012978:	887b      	ldrh	r3, [r7, #2]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d103      	bne.n	8012986 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801297e:	2301      	movs	r3, #1
 8012980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012984:	e14e      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801298c:	b2db      	uxtb	r3, r3
 801298e:	2b04      	cmp	r3, #4
 8012990:	d003      	beq.n	801299a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	2205      	movs	r2, #5
 8012996:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	2200      	movs	r2, #0
 801299e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	887a      	ldrh	r2, [r7, #2]
 80129aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	887a      	ldrh	r2, [r7, #2]
 80129b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	68ba      	ldr	r2, [r7, #8]
 80129b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	887a      	ldrh	r2, [r7, #2]
 80129bc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	887a      	ldrh	r2, [r7, #2]
 80129c2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	2200      	movs	r2, #0
 80129c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2200      	movs	r2, #0
 80129ce:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129da:	2b40      	cmp	r3, #64	; 0x40
 80129dc:	d007      	beq.n	80129ee <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80129ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80129f6:	d178      	bne.n	8012aea <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80129f8:	68fb      	ldr	r3, [r7, #12]
 80129fa:	685b      	ldr	r3, [r3, #4]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d002      	beq.n	8012a06 <HAL_SPI_TransmitReceive+0x10a>
 8012a00:	8b7b      	ldrh	r3, [r7, #26]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	d166      	bne.n	8012ad4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a0a:	881a      	ldrh	r2, [r3, #0]
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a16:	1c9a      	adds	r2, r3, #2
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	3b01      	subs	r3, #1
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012a2a:	e053      	b.n	8012ad4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	f003 0302 	and.w	r3, r3, #2
 8012a36:	2b02      	cmp	r3, #2
 8012a38:	d11b      	bne.n	8012a72 <HAL_SPI_TransmitReceive+0x176>
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d016      	beq.n	8012a72 <HAL_SPI_TransmitReceive+0x176>
 8012a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d113      	bne.n	8012a72 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a4e:	881a      	ldrh	r2, [r3, #0]
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a5a:	1c9a      	adds	r2, r3, #2
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012a64:	b29b      	uxth	r3, r3
 8012a66:	3b01      	subs	r3, #1
 8012a68:	b29a      	uxth	r2, r3
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	689b      	ldr	r3, [r3, #8]
 8012a78:	f003 0301 	and.w	r3, r3, #1
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d119      	bne.n	8012ab4 <HAL_SPI_TransmitReceive+0x1b8>
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d014      	beq.n	8012ab4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68da      	ldr	r2, [r3, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a94:	b292      	uxth	r2, r2
 8012a96:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a9c:	1c9a      	adds	r2, r3, #2
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012ab0:	2301      	movs	r3, #1
 8012ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012ab4:	f7f3 fb20 	bl	80060f8 <HAL_GetTick>
 8012ab8:	4602      	mov	r2, r0
 8012aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d807      	bhi.n	8012ad4 <HAL_SPI_TransmitReceive+0x1d8>
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aca:	d003      	beq.n	8012ad4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8012acc:	2303      	movs	r3, #3
 8012ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012ad2:	e0a7      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1a6      	bne.n	8012a2c <HAL_SPI_TransmitReceive+0x130>
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d1a1      	bne.n	8012a2c <HAL_SPI_TransmitReceive+0x130>
 8012ae8:	e07c      	b.n	8012be4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d002      	beq.n	8012af8 <HAL_SPI_TransmitReceive+0x1fc>
 8012af2:	8b7b      	ldrh	r3, [r7, #26]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	d16b      	bne.n	8012bd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	330c      	adds	r3, #12
 8012b02:	7812      	ldrb	r2, [r2, #0]
 8012b04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b0a:	1c5a      	adds	r2, r3, #1
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	3b01      	subs	r3, #1
 8012b18:	b29a      	uxth	r2, r3
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012b1e:	e057      	b.n	8012bd0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	2b02      	cmp	r3, #2
 8012b2c:	d11c      	bne.n	8012b68 <HAL_SPI_TransmitReceive+0x26c>
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d017      	beq.n	8012b68 <HAL_SPI_TransmitReceive+0x26c>
 8012b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d114      	bne.n	8012b68 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	330c      	adds	r3, #12
 8012b48:	7812      	ldrb	r2, [r2, #0]
 8012b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b50:	1c5a      	adds	r2, r3, #1
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	3b01      	subs	r3, #1
 8012b5e:	b29a      	uxth	r2, r3
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012b64:	2300      	movs	r3, #0
 8012b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b01      	cmp	r3, #1
 8012b74:	d119      	bne.n	8012baa <HAL_SPI_TransmitReceive+0x2ae>
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d014      	beq.n	8012baa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	68da      	ldr	r2, [r3, #12]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b8a:	b2d2      	uxtb	r2, r2
 8012b8c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b92:	1c5a      	adds	r2, r3, #1
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012b9c:	b29b      	uxth	r3, r3
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	b29a      	uxth	r2, r3
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8012baa:	f7f3 faa5 	bl	80060f8 <HAL_GetTick>
 8012bae:	4602      	mov	r2, r0
 8012bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d803      	bhi.n	8012bc2 <HAL_SPI_TransmitReceive+0x2c6>
 8012bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc0:	d102      	bne.n	8012bc8 <HAL_SPI_TransmitReceive+0x2cc>
 8012bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d103      	bne.n	8012bd0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8012bc8:	2303      	movs	r3, #3
 8012bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8012bce:	e029      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d1a2      	bne.n	8012b20 <HAL_SPI_TransmitReceive+0x224>
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d19d      	bne.n	8012b20 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012be6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	f001 fc8a 	bl	8014502 <SPI_EndRxTxTransaction>
 8012bee:	4603      	mov	r3, r0
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d006      	beq.n	8012c02 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2220      	movs	r2, #32
 8012bfe:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012c00:	e010      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d10b      	bne.n	8012c22 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	617b      	str	r3, [r7, #20]
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	617b      	str	r3, [r7, #20]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	689b      	ldr	r3, [r3, #8]
 8012c1c:	617b      	str	r3, [r7, #20]
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	e000      	b.n	8012c24 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8012c22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2201      	movs	r2, #1
 8012c28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012c34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3730      	adds	r7, #48	; 0x30
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b087      	sub	sp, #28
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	4613      	mov	r3, r2
 8012c4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012c4e:	2300      	movs	r3, #0
 8012c50:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d101      	bne.n	8012c60 <HAL_SPI_Transmit_IT+0x20>
 8012c5c:	2302      	movs	r3, #2
 8012c5e:	e06f      	b.n	8012d40 <HAL_SPI_Transmit_IT+0x100>
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2201      	movs	r2, #1
 8012c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d002      	beq.n	8012c74 <HAL_SPI_Transmit_IT+0x34>
 8012c6e:	88fb      	ldrh	r3, [r7, #6]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d102      	bne.n	8012c7a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8012c74:	2301      	movs	r3, #1
 8012c76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012c78:	e05d      	b.n	8012d36 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c80:	b2db      	uxtb	r3, r3
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d002      	beq.n	8012c8c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8012c86:	2302      	movs	r3, #2
 8012c88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012c8a:	e054      	b.n	8012d36 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2203      	movs	r2, #3
 8012c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2200      	movs	r2, #0
 8012c98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68ba      	ldr	r2, [r7, #8]
 8012c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	88fa      	ldrh	r2, [r7, #6]
 8012ca4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	88fa      	ldrh	r2, [r7, #6]
 8012caa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	68db      	ldr	r3, [r3, #12]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d003      	beq.n	8012cd4 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	4a1f      	ldr	r2, [pc, #124]	; (8012d4c <HAL_SPI_Transmit_IT+0x10c>)
 8012cd0:	645a      	str	r2, [r3, #68]	; 0x44
 8012cd2:	e002      	b.n	8012cda <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	4a1e      	ldr	r2, [pc, #120]	; (8012d50 <HAL_SPI_Transmit_IT+0x110>)
 8012cd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ce2:	d10f      	bne.n	8012d04 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	685a      	ldr	r2, [r3, #4]
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8012d12:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d1e:	2b40      	cmp	r3, #64	; 0x40
 8012d20:	d008      	beq.n	8012d34 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012d30:	601a      	str	r2, [r3, #0]
 8012d32:	e000      	b.n	8012d36 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8012d34:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	2200      	movs	r2, #0
 8012d3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	371c      	adds	r7, #28
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr
 8012d4c:	080142e5 	.word	0x080142e5
 8012d50:	0801429f 	.word	0x0801429f

08012d54 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b086      	sub	sp, #24
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	60f8      	str	r0, [r7, #12]
 8012d5c:	60b9      	str	r1, [r7, #8]
 8012d5e:	4613      	mov	r3, r2
 8012d60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012d62:	2300      	movs	r3, #0
 8012d64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	689b      	ldr	r3, [r3, #8]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d110      	bne.n	8012d90 <HAL_SPI_Receive_IT+0x3c>
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012d76:	d10b      	bne.n	8012d90 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2204      	movs	r2, #4
 8012d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8012d80:	88fb      	ldrh	r3, [r7, #6]
 8012d82:	68ba      	ldr	r2, [r7, #8]
 8012d84:	68b9      	ldr	r1, [r7, #8]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f000 f882 	bl	8012e90 <HAL_SPI_TransmitReceive_IT>
 8012d8c:	4603      	mov	r3, r0
 8012d8e:	e076      	b.n	8012e7e <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d101      	bne.n	8012d9e <HAL_SPI_Receive_IT+0x4a>
 8012d9a:	2302      	movs	r3, #2
 8012d9c:	e06f      	b.n	8012e7e <HAL_SPI_Receive_IT+0x12a>
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2201      	movs	r2, #1
 8012da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012dac:	b2db      	uxtb	r3, r3
 8012dae:	2b01      	cmp	r3, #1
 8012db0:	d002      	beq.n	8012db8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8012db2:	2302      	movs	r3, #2
 8012db4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012db6:	e05d      	b.n	8012e74 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d002      	beq.n	8012dc4 <HAL_SPI_Receive_IT+0x70>
 8012dbe:	88fb      	ldrh	r3, [r7, #6]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d102      	bne.n	8012dca <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012dc8:	e054      	b.n	8012e74 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2204      	movs	r2, #4
 8012dce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	2200      	movs	r2, #0
 8012dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	88fa      	ldrh	r2, [r7, #6]
 8012de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	88fa      	ldrh	r2, [r7, #6]
 8012de8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	2200      	movs	r2, #0
 8012dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	2200      	movs	r2, #0
 8012df4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8012dfc:	68fb      	ldr	r3, [r7, #12]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d003      	beq.n	8012e12 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	4a1e      	ldr	r2, [pc, #120]	; (8012e88 <HAL_SPI_Receive_IT+0x134>)
 8012e0e:	641a      	str	r2, [r3, #64]	; 0x40
 8012e10:	e002      	b.n	8012e18 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	4a1d      	ldr	r2, [pc, #116]	; (8012e8c <HAL_SPI_Receive_IT+0x138>)
 8012e16:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	689b      	ldr	r3, [r3, #8]
 8012e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012e20:	d10f      	bne.n	8012e42 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	681a      	ldr	r2, [r3, #0]
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012e40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	685a      	ldr	r2, [r3, #4]
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8012e50:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e5c:	2b40      	cmp	r3, #64	; 0x40
 8012e5e:	d008      	beq.n	8012e72 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e6e:	601a      	str	r2, [r3, #0]
 8012e70:	e000      	b.n	8012e74 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8012e72:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	2200      	movs	r2, #0
 8012e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3718      	adds	r7, #24
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}
 8012e86:	bf00      	nop
 8012e88:	08014259 	.word	0x08014259
 8012e8c:	0801420f 	.word	0x0801420f

08012e90 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8012e90:	b480      	push	{r7}
 8012e92:	b087      	sub	sp, #28
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	60b9      	str	r1, [r7, #8]
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012ea8:	2b01      	cmp	r3, #1
 8012eaa:	d101      	bne.n	8012eb0 <HAL_SPI_TransmitReceive_IT+0x20>
 8012eac:	2302      	movs	r3, #2
 8012eae:	e075      	b.n	8012f9c <HAL_SPI_TransmitReceive_IT+0x10c>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ebe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8012ec0:	68fb      	ldr	r3, [r7, #12]
 8012ec2:	685b      	ldr	r3, [r3, #4]
 8012ec4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012ec6:	7dbb      	ldrb	r3, [r7, #22]
 8012ec8:	2b01      	cmp	r3, #1
 8012eca:	d00d      	beq.n	8012ee8 <HAL_SPI_TransmitReceive_IT+0x58>
 8012ecc:	693b      	ldr	r3, [r7, #16]
 8012ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012ed2:	d106      	bne.n	8012ee2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d102      	bne.n	8012ee2 <HAL_SPI_TransmitReceive_IT+0x52>
 8012edc:	7dbb      	ldrb	r3, [r7, #22]
 8012ede:	2b04      	cmp	r3, #4
 8012ee0:	d002      	beq.n	8012ee8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8012ee2:	2302      	movs	r3, #2
 8012ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ee6:	e054      	b.n	8012f92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d005      	beq.n	8012efa <HAL_SPI_TransmitReceive_IT+0x6a>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <HAL_SPI_TransmitReceive_IT+0x6a>
 8012ef4:	887b      	ldrh	r3, [r7, #2]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d102      	bne.n	8012f00 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8012efa:	2301      	movs	r3, #1
 8012efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012efe:	e048      	b.n	8012f92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f06:	b2db      	uxtb	r3, r3
 8012f08:	2b04      	cmp	r3, #4
 8012f0a:	d003      	beq.n	8012f14 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2205      	movs	r2, #5
 8012f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	2200      	movs	r2, #0
 8012f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	887a      	ldrh	r2, [r7, #2]
 8012f24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	887a      	ldrh	r2, [r7, #2]
 8012f2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	687a      	ldr	r2, [r7, #4]
 8012f30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	887a      	ldrh	r2, [r7, #2]
 8012f36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	887a      	ldrh	r2, [r7, #2]
 8012f3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	68db      	ldr	r3, [r3, #12]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d006      	beq.n	8012f54 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	4a17      	ldr	r2, [pc, #92]	; (8012fa8 <HAL_SPI_TransmitReceive_IT+0x118>)
 8012f4a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	4a17      	ldr	r2, [pc, #92]	; (8012fac <HAL_SPI_TransmitReceive_IT+0x11c>)
 8012f50:	645a      	str	r2, [r3, #68]	; 0x44
 8012f52:	e005      	b.n	8012f60 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	4a16      	ldr	r2, [pc, #88]	; (8012fb0 <HAL_SPI_TransmitReceive_IT+0x120>)
 8012f58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	4a15      	ldr	r2, [pc, #84]	; (8012fb4 <HAL_SPI_TransmitReceive_IT+0x124>)
 8012f5e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	685a      	ldr	r2, [r3, #4]
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8012f6e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f7a:	2b40      	cmp	r3, #64	; 0x40
 8012f7c:	d008      	beq.n	8012f90 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f8c:	601a      	str	r2, [r3, #0]
 8012f8e:	e000      	b.n	8012f92 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8012f90:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2200      	movs	r2, #0
 8012f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	371c      	adds	r7, #28
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr
 8012fa8:	08014151 	.word	0x08014151
 8012fac:	080141b1 	.word	0x080141b1
 8012fb0:	0801408d 	.word	0x0801408d
 8012fb4:	080140f1 	.word	0x080140f1

08012fb8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b086      	sub	sp, #24
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d101      	bne.n	8012fd8 <HAL_SPI_Transmit_DMA+0x20>
 8012fd4:	2302      	movs	r3, #2
 8012fd6:	e09b      	b.n	8013110 <HAL_SPI_Transmit_DMA+0x158>
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	2b01      	cmp	r3, #1
 8012fea:	d002      	beq.n	8012ff2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8012fec:	2302      	movs	r3, #2
 8012fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012ff0:	e089      	b.n	8013106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d002      	beq.n	8012ffe <HAL_SPI_Transmit_DMA+0x46>
 8012ff8:	88fb      	ldrh	r3, [r7, #6]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d102      	bne.n	8013004 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8012ffe:	2301      	movs	r3, #1
 8013000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013002:	e080      	b.n	8013106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2203      	movs	r2, #3
 8013008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	2200      	movs	r2, #0
 8013010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	68ba      	ldr	r2, [r7, #8]
 8013016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	88fa      	ldrh	r2, [r7, #6]
 801301c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	88fa      	ldrh	r2, [r7, #6]
 8013022:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	2200      	movs	r2, #0
 8013028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2200      	movs	r2, #0
 801302e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2200      	movs	r2, #0
 8013034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	2200      	movs	r2, #0
 801303a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2200      	movs	r2, #0
 8013040:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	689b      	ldr	r3, [r3, #8]
 8013046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801304a:	d10f      	bne.n	801306c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801305a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801306a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013070:	4a29      	ldr	r2, [pc, #164]	; (8013118 <HAL_SPI_Transmit_DMA+0x160>)
 8013072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013078:	4a28      	ldr	r2, [pc, #160]	; (801311c <HAL_SPI_Transmit_DMA+0x164>)
 801307a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013080:	4a27      	ldr	r2, [pc, #156]	; (8013120 <HAL_SPI_Transmit_DMA+0x168>)
 8013082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013088:	2200      	movs	r2, #0
 801308a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013094:	4619      	mov	r1, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	330c      	adds	r3, #12
 801309c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80130a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80130a4:	f7f4 fa91 	bl	80075ca <HAL_DMA_Start_IT>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d00c      	beq.n	80130c8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130b2:	f043 0210 	orr.w	r2, r3, #16
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80130ba:	2301      	movs	r3, #1
 80130bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80130be:	68fb      	ldr	r3, [r7, #12]
 80130c0:	2201      	movs	r2, #1
 80130c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80130c6:	e01e      	b.n	8013106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130d2:	2b40      	cmp	r3, #64	; 0x40
 80130d4:	d007      	beq.n	80130e6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	681a      	ldr	r2, [r3, #0]
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80130e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	685a      	ldr	r2, [r3, #4]
 80130ec:	68fb      	ldr	r3, [r7, #12]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f042 0220 	orr.w	r2, r2, #32
 80130f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	685a      	ldr	r2, [r3, #4]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	f042 0202 	orr.w	r2, r2, #2
 8013104:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801310e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3718      	adds	r7, #24
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08013e3d 	.word	0x08013e3d
 801311c:	08013c5d 	.word	0x08013c5d
 8013120:	08013e91 	.word	0x08013e91

08013124 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b086      	sub	sp, #24
 8013128:	af00      	add	r7, sp, #0
 801312a:	60f8      	str	r0, [r7, #12]
 801312c:	60b9      	str	r1, [r7, #8]
 801312e:	4613      	mov	r3, r2
 8013130:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013132:	2300      	movs	r3, #0
 8013134:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d110      	bne.n	8013160 <HAL_SPI_Receive_DMA+0x3c>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013146:	d10b      	bne.n	8013160 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	2204      	movs	r2, #4
 801314c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013150:	88fb      	ldrh	r3, [r7, #6]
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	68b9      	ldr	r1, [r7, #8]
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f000 f8ac 	bl	80132b4 <HAL_SPI_TransmitReceive_DMA>
 801315c:	4603      	mov	r3, r0
 801315e:	e09f      	b.n	80132a0 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013166:	2b01      	cmp	r3, #1
 8013168:	d101      	bne.n	801316e <HAL_SPI_Receive_DMA+0x4a>
 801316a:	2302      	movs	r3, #2
 801316c:	e098      	b.n	80132a0 <HAL_SPI_Receive_DMA+0x17c>
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2201      	movs	r2, #1
 8013172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801317c:	b2db      	uxtb	r3, r3
 801317e:	2b01      	cmp	r3, #1
 8013180:	d002      	beq.n	8013188 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8013182:	2302      	movs	r3, #2
 8013184:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013186:	e086      	b.n	8013296 <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d002      	beq.n	8013194 <HAL_SPI_Receive_DMA+0x70>
 801318e:	88fb      	ldrh	r3, [r7, #6]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d102      	bne.n	801319a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8013194:	2301      	movs	r3, #1
 8013196:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013198:	e07d      	b.n	8013296 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	2204      	movs	r2, #4
 801319e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	2200      	movs	r2, #0
 80131a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	68ba      	ldr	r2, [r7, #8]
 80131ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	88fa      	ldrh	r2, [r7, #6]
 80131b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	88fa      	ldrh	r2, [r7, #6]
 80131b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	2200      	movs	r2, #0
 80131be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2200      	movs	r2, #0
 80131c4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	2200      	movs	r2, #0
 80131ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	2200      	movs	r2, #0
 80131d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	689b      	ldr	r3, [r3, #8]
 80131d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80131da:	d10f      	bne.n	80131fc <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80131ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80131fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013200:	4a29      	ldr	r2, [pc, #164]	; (80132a8 <HAL_SPI_Receive_DMA+0x184>)
 8013202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013208:	4a28      	ldr	r2, [pc, #160]	; (80132ac <HAL_SPI_Receive_DMA+0x188>)
 801320a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013210:	4a27      	ldr	r2, [pc, #156]	; (80132b0 <HAL_SPI_Receive_DMA+0x18c>)
 8013212:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013218:	2200      	movs	r2, #0
 801321a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	330c      	adds	r3, #12
 8013226:	4619      	mov	r1, r3
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801322c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013232:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013234:	f7f4 f9c9 	bl	80075ca <HAL_DMA_Start_IT>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d00c      	beq.n	8013258 <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013242:	f043 0210 	orr.w	r2, r3, #16
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801324a:	2301      	movs	r3, #1
 801324c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	2201      	movs	r2, #1
 8013252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013256:	e01e      	b.n	8013296 <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013262:	2b40      	cmp	r3, #64	; 0x40
 8013264:	d007      	beq.n	8013276 <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013274:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	685a      	ldr	r2, [r3, #4]
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	f042 0220 	orr.w	r2, r2, #32
 8013284:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f042 0201 	orr.w	r2, r2, #1
 8013294:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2200      	movs	r2, #0
 801329a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801329e:	7dfb      	ldrb	r3, [r7, #23]
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3718      	adds	r7, #24
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	08013e59 	.word	0x08013e59
 80132ac:	08013d05 	.word	0x08013d05
 80132b0:	08013e91 	.word	0x08013e91

080132b4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b086      	sub	sp, #24
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
 80132c0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80132c2:	2300      	movs	r3, #0
 80132c4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d101      	bne.n	80132d4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80132d0:	2302      	movs	r3, #2
 80132d2:	e0e3      	b.n	801349c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2201      	movs	r2, #1
 80132d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80132e2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	685b      	ldr	r3, [r3, #4]
 80132e8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80132ea:	7dbb      	ldrb	r3, [r7, #22]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d00d      	beq.n	801330c <HAL_SPI_TransmitReceive_DMA+0x58>
 80132f0:	693b      	ldr	r3, [r7, #16]
 80132f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80132f6:	d106      	bne.n	8013306 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	689b      	ldr	r3, [r3, #8]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d102      	bne.n	8013306 <HAL_SPI_TransmitReceive_DMA+0x52>
 8013300:	7dbb      	ldrb	r3, [r7, #22]
 8013302:	2b04      	cmp	r3, #4
 8013304:	d002      	beq.n	801330c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8013306:	2302      	movs	r3, #2
 8013308:	75fb      	strb	r3, [r7, #23]
    goto error;
 801330a:	e0c2      	b.n	8013492 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801330c:	68bb      	ldr	r3, [r7, #8]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d005      	beq.n	801331e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013318:	887b      	ldrh	r3, [r7, #2]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d102      	bne.n	8013324 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 801331e:	2301      	movs	r3, #1
 8013320:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013322:	e0b6      	b.n	8013492 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801332a:	b2db      	uxtb	r3, r3
 801332c:	2b04      	cmp	r3, #4
 801332e:	d003      	beq.n	8013338 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2205      	movs	r2, #5
 8013334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	2200      	movs	r2, #0
 801333c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	68ba      	ldr	r2, [r7, #8]
 8013342:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	887a      	ldrh	r2, [r7, #2]
 8013348:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	887a      	ldrh	r2, [r7, #2]
 801334e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	887a      	ldrh	r2, [r7, #2]
 801335a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	887a      	ldrh	r2, [r7, #2]
 8013360:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2200      	movs	r2, #0
 8013366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2200      	movs	r2, #0
 801336c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013374:	b2db      	uxtb	r3, r3
 8013376:	2b04      	cmp	r3, #4
 8013378:	d108      	bne.n	801338c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801337e:	4a49      	ldr	r2, [pc, #292]	; (80134a4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8013380:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013386:	4a48      	ldr	r2, [pc, #288]	; (80134a8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8013388:	63da      	str	r2, [r3, #60]	; 0x3c
 801338a:	e007      	b.n	801339c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013390:	4a46      	ldr	r2, [pc, #280]	; (80134ac <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8013392:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013398:	4a45      	ldr	r2, [pc, #276]	; (80134b0 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 801339a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133a0:	4a44      	ldr	r2, [pc, #272]	; (80134b4 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80133a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80133a8:	2200      	movs	r2, #0
 80133aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	330c      	adds	r3, #12
 80133b6:	4619      	mov	r1, r3
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80133c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80133c4:	f7f4 f901 	bl	80075ca <HAL_DMA_Start_IT>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d00c      	beq.n	80133e8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133d2:	f043 0210 	orr.w	r2, r3, #16
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80133da:	2301      	movs	r3, #1
 80133dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2201      	movs	r2, #1
 80133e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80133e6:	e054      	b.n	8013492 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	685a      	ldr	r2, [r3, #4]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	681b      	ldr	r3, [r3, #0]
 80133f2:	f042 0201 	orr.w	r2, r2, #1
 80133f6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133fc:	2200      	movs	r2, #0
 80133fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013404:	2200      	movs	r2, #0
 8013406:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801340c:	2200      	movs	r2, #0
 801340e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013414:	2200      	movs	r2, #0
 8013416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801341c:	68fb      	ldr	r3, [r7, #12]
 801341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013420:	4619      	mov	r1, r3
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	330c      	adds	r3, #12
 8013428:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801342a:	68fb      	ldr	r3, [r7, #12]
 801342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801342e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013430:	f7f4 f8cb 	bl	80075ca <HAL_DMA_Start_IT>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00c      	beq.n	8013454 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801343e:	f043 0210 	orr.w	r2, r3, #16
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8013446:	2301      	movs	r3, #1
 8013448:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	2201      	movs	r2, #1
 801344e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013452:	e01e      	b.n	8013492 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801345e:	2b40      	cmp	r3, #64	; 0x40
 8013460:	d007      	beq.n	8013472 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013470:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	685a      	ldr	r2, [r3, #4]
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	f042 0220 	orr.w	r2, r2, #32
 8013480:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	685a      	ldr	r2, [r3, #4]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f042 0202 	orr.w	r2, r2, #2
 8013490:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	2200      	movs	r2, #0
 8013496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801349a:	7dfb      	ldrb	r3, [r7, #23]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3718      	adds	r7, #24
 80134a0:	46bd      	mov	sp, r7
 80134a2:	bd80      	pop	{r7, pc}
 80134a4:	08013e59 	.word	0x08013e59
 80134a8:	08013d05 	.word	0x08013d05
 80134ac:	08013e75 	.word	0x08013e75
 80134b0:	08013dad 	.word	0x08013dad
 80134b4:	08013e91 	.word	0x08013e91

080134b8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80134c0:	2300      	movs	r3, #0
 80134c2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80134c4:	4b6e      	ldr	r3, [pc, #440]	; (8013680 <HAL_SPI_Abort+0x1c8>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4a6e      	ldr	r2, [pc, #440]	; (8013684 <HAL_SPI_Abort+0x1cc>)
 80134ca:	fba2 2303 	umull	r2, r3, r2, r3
 80134ce:	0a5b      	lsrs	r3, r3, #9
 80134d0:	2264      	movs	r2, #100	; 0x64
 80134d2:	fb02 f303 	mul.w	r3, r2, r3
 80134d6:	617b      	str	r3, [r7, #20]
  count = resetcount;
 80134d8:	697b      	ldr	r3, [r7, #20]
 80134da:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	685a      	ldr	r2, [r3, #4]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	f022 0220 	bic.w	r2, r2, #32
 80134ea:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134f6:	2b80      	cmp	r3, #128	; 0x80
 80134f8:	d117      	bne.n	801352a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	4a62      	ldr	r2, [pc, #392]	; (8013688 <HAL_SPI_Abort+0x1d0>)
 80134fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013500:	69bb      	ldr	r3, [r7, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d106      	bne.n	8013514 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801350a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013512:	e008      	b.n	8013526 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	3b01      	subs	r3, #1
 8013518:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013520:	b2db      	uxtb	r3, r3
 8013522:	2b07      	cmp	r3, #7
 8013524:	d1ec      	bne.n	8013500 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013534:	2b40      	cmp	r3, #64	; 0x40
 8013536:	d117      	bne.n	8013568 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	4a54      	ldr	r2, [pc, #336]	; (801368c <HAL_SPI_Abort+0x1d4>)
 801353c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801353e:	69bb      	ldr	r3, [r7, #24]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d106      	bne.n	8013552 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013548:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013550:	e008      	b.n	8013564 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013552:	69bb      	ldr	r3, [r7, #24]
 8013554:	3b01      	subs	r3, #1
 8013556:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801355e:	b2db      	uxtb	r3, r3
 8013560:	2b07      	cmp	r3, #7
 8013562:	d1ec      	bne.n	801353e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	685b      	ldr	r3, [r3, #4]
 801356e:	f003 0302 	and.w	r3, r3, #2
 8013572:	2b02      	cmp	r3, #2
 8013574:	d12e      	bne.n	80135d4 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801357a:	2b00      	cmp	r3, #0
 801357c:	d02a      	beq.n	80135d4 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013582:	2200      	movs	r2, #0
 8013584:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801358a:	4618      	mov	r0, r3
 801358c:	f7f4 f875 	bl	800767a <HAL_DMA_Abort>
 8013590:	4603      	mov	r3, r0
 8013592:	2b00      	cmp	r3, #0
 8013594:	d002      	beq.n	801359c <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2240      	movs	r2, #64	; 0x40
 801359a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	685a      	ldr	r2, [r3, #4]
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	f022 0202 	bic.w	r2, r2, #2
 80135aa:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 80135ac:	69bb      	ldr	r3, [r7, #24]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d106      	bne.n	80135c0 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 80135be:	e009      	b.n	80135d4 <HAL_SPI_Abort+0x11c>
        }
        count--;
 80135c0:	69bb      	ldr	r3, [r7, #24]
 80135c2:	3b01      	subs	r3, #1
 80135c4:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	689b      	ldr	r3, [r3, #8]
 80135cc:	f003 0302 	and.w	r3, r3, #2
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d0eb      	beq.n	80135ac <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	f003 0301 	and.w	r3, r3, #1
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d122      	bne.n	8013628 <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d01e      	beq.n	8013628 <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135ee:	2200      	movs	r2, #0
 80135f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7f4 f83f 	bl	800767a <HAL_DMA_Abort>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d002      	beq.n	8013608 <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	2240      	movs	r2, #64	; 0x40
 8013606:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	681a      	ldr	r2, [r3, #0]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013616:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	685a      	ldr	r2, [r3, #4]
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	f022 0201 	bic.w	r2, r2, #1
 8013626:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2200      	movs	r2, #0
 8013632:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013638:	2b40      	cmp	r3, #64	; 0x40
 801363a:	d102      	bne.n	8013642 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 801363c:	2301      	movs	r3, #1
 801363e:	77fb      	strb	r3, [r7, #31]
 8013640:	e002      	b.n	8013648 <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2200      	movs	r2, #0
 8013646:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013648:	2300      	movs	r3, #0
 801364a:	60fb      	str	r3, [r7, #12]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	68db      	ldr	r3, [r3, #12]
 8013652:	60fb      	str	r3, [r7, #12]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	689b      	ldr	r3, [r3, #8]
 801365a:	60fb      	str	r3, [r7, #12]
 801365c:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 801365e:	2300      	movs	r3, #0
 8013660:	613b      	str	r3, [r7, #16]
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	689b      	ldr	r3, [r3, #8]
 8013668:	613b      	str	r3, [r7, #16]
 801366a:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2201      	movs	r2, #1
 8013670:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013674:	7ffb      	ldrb	r3, [r7, #31]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3720      	adds	r7, #32
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	20000058 	.word	0x20000058
 8013684:	057619f1 	.word	0x057619f1
 8013688:	0801483d 	.word	0x0801483d
 801368c:	080147ad 	.word	0x080147ad

08013690 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013690:	b580      	push	{r7, lr}
 8013692:	b088      	sub	sp, #32
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013698:	2300      	movs	r3, #0
 801369a:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 801369c:	2301      	movs	r3, #1
 801369e:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80136a0:	4b72      	ldr	r3, [pc, #456]	; (801386c <HAL_SPI_Abort_IT+0x1dc>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	4a72      	ldr	r2, [pc, #456]	; (8013870 <HAL_SPI_Abort_IT+0x1e0>)
 80136a6:	fba2 2303 	umull	r2, r3, r2, r3
 80136aa:	0a5b      	lsrs	r3, r3, #9
 80136ac:	2264      	movs	r2, #100	; 0x64
 80136ae:	fb02 f303 	mul.w	r3, r2, r3
 80136b2:	613b      	str	r3, [r7, #16]
  count = resetcount;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	685a      	ldr	r2, [r3, #4]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	f022 0220 	bic.w	r2, r2, #32
 80136c6:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80136d2:	2b80      	cmp	r3, #128	; 0x80
 80136d4:	d117      	bne.n	8013706 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4a66      	ldr	r2, [pc, #408]	; (8013874 <HAL_SPI_Abort_IT+0x1e4>)
 80136da:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d106      	bne.n	80136f0 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80136e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80136ee:	e008      	b.n	8013702 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	3b01      	subs	r3, #1
 80136f4:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	2b07      	cmp	r3, #7
 8013700:	d1ec      	bne.n	80136dc <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013702:	693b      	ldr	r3, [r7, #16]
 8013704:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	685b      	ldr	r3, [r3, #4]
 801370c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013710:	2b40      	cmp	r3, #64	; 0x40
 8013712:	d117      	bne.n	8013744 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	4a58      	ldr	r2, [pc, #352]	; (8013878 <HAL_SPI_Abort_IT+0x1e8>)
 8013718:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d106      	bne.n	801372e <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 801372c:	e008      	b.n	8013740 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	3b01      	subs	r3, #1
 8013732:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801373a:	b2db      	uxtb	r3, r3
 801373c:	2b07      	cmp	r3, #7
 801373e:	d1ec      	bne.n	801371a <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00f      	beq.n	801376c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	685b      	ldr	r3, [r3, #4]
 8013752:	f003 0302 	and.w	r3, r3, #2
 8013756:	2b02      	cmp	r3, #2
 8013758:	d104      	bne.n	8013764 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801375e:	4a47      	ldr	r2, [pc, #284]	; (801387c <HAL_SPI_Abort_IT+0x1ec>)
 8013760:	651a      	str	r2, [r3, #80]	; 0x50
 8013762:	e003      	b.n	801376c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013768:	2200      	movs	r2, #0
 801376a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013770:	2b00      	cmp	r3, #0
 8013772:	d00f      	beq.n	8013794 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	f003 0301 	and.w	r3, r3, #1
 801377e:	2b01      	cmp	r3, #1
 8013780:	d104      	bne.n	801378c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013786:	4a3e      	ldr	r2, [pc, #248]	; (8013880 <HAL_SPI_Abort_IT+0x1f0>)
 8013788:	651a      	str	r2, [r3, #80]	; 0x50
 801378a:	e003      	b.n	8013794 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013790:	2200      	movs	r2, #0
 8013792:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	685b      	ldr	r3, [r3, #4]
 801379a:	f003 0302 	and.w	r3, r3, #2
 801379e:	2b02      	cmp	r3, #2
 80137a0:	d115      	bne.n	80137ce <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d011      	beq.n	80137ce <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7f3 ffd3 	bl	800775a <HAL_DMA_Abort_IT>
 80137b4:	4603      	mov	r3, r0
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d007      	beq.n	80137ca <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80137be:	2200      	movs	r2, #0
 80137c0:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2240      	movs	r2, #64	; 0x40
 80137c6:	655a      	str	r2, [r3, #84]	; 0x54
 80137c8:	e001      	b.n	80137ce <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 80137ca:	2300      	movs	r3, #0
 80137cc:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	685b      	ldr	r3, [r3, #4]
 80137d4:	f003 0301 	and.w	r3, r3, #1
 80137d8:	2b01      	cmp	r3, #1
 80137da:	d115      	bne.n	8013808 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d011      	beq.n	8013808 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f3 ffb6 	bl	800775a <HAL_DMA_Abort_IT>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d007      	beq.n	8013804 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137f8:	2200      	movs	r2, #0
 80137fa:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2240      	movs	r2, #64	; 0x40
 8013800:	655a      	str	r2, [r3, #84]	; 0x54
 8013802:	e001      	b.n	8013808 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013804:	2300      	movs	r3, #0
 8013806:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	2b01      	cmp	r3, #1
 801380c:	d128      	bne.n	8013860 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	2200      	movs	r2, #0
 8013812:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	2200      	movs	r2, #0
 8013818:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801381e:	2b40      	cmp	r3, #64	; 0x40
 8013820:	d102      	bne.n	8013828 <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013822:	2301      	movs	r3, #1
 8013824:	77fb      	strb	r3, [r7, #31]
 8013826:	e002      	b.n	801382e <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2200      	movs	r2, #0
 801382c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801382e:	2300      	movs	r3, #0
 8013830:	60bb      	str	r3, [r7, #8]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	60bb      	str	r3, [r7, #8]
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	689b      	ldr	r3, [r3, #8]
 8013840:	60bb      	str	r3, [r7, #8]
 8013842:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013844:	2300      	movs	r3, #0
 8013846:	60fb      	str	r3, [r7, #12]
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	689b      	ldr	r3, [r3, #8]
 801384e:	60fb      	str	r3, [r7, #12]
 8013850:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	2201      	movs	r2, #1
 8013856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f9da 	bl	8013c14 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013860:	7ffb      	ldrb	r3, [r7, #31]
}
 8013862:	4618      	mov	r0, r3
 8013864:	3720      	adds	r7, #32
 8013866:	46bd      	mov	sp, r7
 8013868:	bd80      	pop	{r7, pc}
 801386a:	bf00      	nop
 801386c:	20000058 	.word	0x20000058
 8013870:	057619f1 	.word	0x057619f1
 8013874:	0801483d 	.word	0x0801483d
 8013878:	080147ad 	.word	0x080147ad
 801387c:	08013ef9 	.word	0x08013ef9
 8013880:	08013fcd 	.word	0x08013fcd

08013884 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8013884:	b480      	push	{r7}
 8013886:	b083      	sub	sp, #12
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013892:	2b01      	cmp	r3, #1
 8013894:	d101      	bne.n	801389a <HAL_SPI_DMAPause+0x16>
 8013896:	2302      	movs	r3, #2
 8013898:	e010      	b.n	80138bc <HAL_SPI_DMAPause+0x38>
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	2201      	movs	r2, #1
 801389e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	685a      	ldr	r2, [r3, #4]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	f022 0203 	bic.w	r2, r2, #3
 80138b0:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2200      	movs	r2, #0
 80138b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80138ba:	2300      	movs	r3, #0
}
 80138bc:	4618      	mov	r0, r3
 80138be:	370c      	adds	r7, #12
 80138c0:	46bd      	mov	sp, r7
 80138c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c6:	4770      	bx	lr

080138c8 <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 80138c8:	b480      	push	{r7}
 80138ca:	b083      	sub	sp, #12
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138d6:	2b01      	cmp	r3, #1
 80138d8:	d101      	bne.n	80138de <HAL_SPI_DMAResume+0x16>
 80138da:	2302      	movs	r3, #2
 80138dc:	e010      	b.n	8013900 <HAL_SPI_DMAResume+0x38>
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	2201      	movs	r2, #1
 80138e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	685a      	ldr	r2, [r3, #4]
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	f042 0203 	orr.w	r2, r2, #3
 80138f4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80138fe:	2300      	movs	r3, #0
}
 8013900:	4618      	mov	r0, r3
 8013902:	370c      	adds	r7, #12
 8013904:	46bd      	mov	sp, r7
 8013906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801390a:	4770      	bx	lr

0801390c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013914:	2300      	movs	r3, #0
 8013916:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801391c:	2b00      	cmp	r3, #0
 801391e:	d00f      	beq.n	8013940 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013924:	4618      	mov	r0, r3
 8013926:	f7f3 fea8 	bl	800767a <HAL_DMA_Abort>
 801392a:	4603      	mov	r3, r0
 801392c:	2b00      	cmp	r3, #0
 801392e:	d007      	beq.n	8013940 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013934:	f043 0210 	orr.w	r2, r3, #16
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 801393c:	2301      	movs	r3, #1
 801393e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013944:	2b00      	cmp	r3, #0
 8013946:	d00f      	beq.n	8013968 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801394c:	4618      	mov	r0, r3
 801394e:	f7f3 fe94 	bl	800767a <HAL_DMA_Abort>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d007      	beq.n	8013968 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801395c:	f043 0210 	orr.w	r2, r3, #16
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8013964:	2301      	movs	r3, #1
 8013966:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	685a      	ldr	r2, [r3, #4]
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	f022 0203 	bic.w	r2, r2, #3
 8013976:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2201      	movs	r2, #1
 801397c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8013980:	7bfb      	ldrb	r3, [r7, #15]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b088      	sub	sp, #32
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	689b      	ldr	r3, [r3, #8]
 80139a0:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80139a2:	69bb      	ldr	r3, [r7, #24]
 80139a4:	099b      	lsrs	r3, r3, #6
 80139a6:	f003 0301 	and.w	r3, r3, #1
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10f      	bne.n	80139ce <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80139ae:	69bb      	ldr	r3, [r7, #24]
 80139b0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	d00a      	beq.n	80139ce <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	099b      	lsrs	r3, r3, #6
 80139bc:	f003 0301 	and.w	r3, r3, #1
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d004      	beq.n	80139ce <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	4798      	blx	r3
    return;
 80139cc:	e0d7      	b.n	8013b7e <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80139ce:	69bb      	ldr	r3, [r7, #24]
 80139d0:	085b      	lsrs	r3, r3, #1
 80139d2:	f003 0301 	and.w	r3, r3, #1
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d00a      	beq.n	80139f0 <HAL_SPI_IRQHandler+0x66>
 80139da:	69fb      	ldr	r3, [r7, #28]
 80139dc:	09db      	lsrs	r3, r3, #7
 80139de:	f003 0301 	and.w	r3, r3, #1
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d004      	beq.n	80139f0 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	4798      	blx	r3
    return;
 80139ee:	e0c6      	b.n	8013b7e <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	095b      	lsrs	r3, r3, #5
 80139f4:	f003 0301 	and.w	r3, r3, #1
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d10c      	bne.n	8013a16 <HAL_SPI_IRQHandler+0x8c>
 80139fc:	69bb      	ldr	r3, [r7, #24]
 80139fe:	099b      	lsrs	r3, r3, #6
 8013a00:	f003 0301 	and.w	r3, r3, #1
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d106      	bne.n	8013a16 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013a08:	69bb      	ldr	r3, [r7, #24]
 8013a0a:	0a1b      	lsrs	r3, r3, #8
 8013a0c:	f003 0301 	and.w	r3, r3, #1
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	f000 80b4 	beq.w	8013b7e <HAL_SPI_IRQHandler+0x1f4>
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	095b      	lsrs	r3, r3, #5
 8013a1a:	f003 0301 	and.w	r3, r3, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	f000 80ad 	beq.w	8013b7e <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013a24:	69bb      	ldr	r3, [r7, #24]
 8013a26:	099b      	lsrs	r3, r3, #6
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d023      	beq.n	8013a78 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a36:	b2db      	uxtb	r3, r3
 8013a38:	2b03      	cmp	r3, #3
 8013a3a:	d011      	beq.n	8013a60 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a40:	f043 0204 	orr.w	r2, r3, #4
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013a48:	2300      	movs	r3, #0
 8013a4a:	60bb      	str	r3, [r7, #8]
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	68db      	ldr	r3, [r3, #12]
 8013a52:	60bb      	str	r3, [r7, #8]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	689b      	ldr	r3, [r3, #8]
 8013a5a:	60bb      	str	r3, [r7, #8]
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	e00b      	b.n	8013a78 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013a60:	2300      	movs	r3, #0
 8013a62:	60fb      	str	r3, [r7, #12]
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	68db      	ldr	r3, [r3, #12]
 8013a6a:	60fb      	str	r3, [r7, #12]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	689b      	ldr	r3, [r3, #8]
 8013a72:	60fb      	str	r3, [r7, #12]
 8013a74:	68fb      	ldr	r3, [r7, #12]
        return;
 8013a76:	e082      	b.n	8013b7e <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8013a78:	69bb      	ldr	r3, [r7, #24]
 8013a7a:	095b      	lsrs	r3, r3, #5
 8013a7c:	f003 0301 	and.w	r3, r3, #1
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d014      	beq.n	8013aae <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a88:	f043 0201 	orr.w	r2, r3, #1
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013a90:	2300      	movs	r3, #0
 8013a92:	613b      	str	r3, [r7, #16]
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	613b      	str	r3, [r7, #16]
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013aaa:	601a      	str	r2, [r3, #0]
 8013aac:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013aae:	69bb      	ldr	r3, [r7, #24]
 8013ab0:	0a1b      	lsrs	r3, r3, #8
 8013ab2:	f003 0301 	and.w	r3, r3, #1
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00c      	beq.n	8013ad4 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013abe:	f043 0208 	orr.w	r2, r3, #8
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	617b      	str	r3, [r7, #20]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	689b      	ldr	r3, [r3, #8]
 8013ad0:	617b      	str	r3, [r7, #20]
 8013ad2:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d04f      	beq.n	8013b7c <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	685a      	ldr	r2, [r3, #4]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013aea:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	2201      	movs	r2, #1
 8013af0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8013af4:	69fb      	ldr	r3, [r7, #28]
 8013af6:	f003 0302 	and.w	r3, r3, #2
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d104      	bne.n	8013b08 <HAL_SPI_IRQHandler+0x17e>
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	f003 0301 	and.w	r3, r3, #1
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d034      	beq.n	8013b72 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	685a      	ldr	r2, [r3, #4]
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	f022 0203 	bic.w	r2, r2, #3
 8013b16:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d011      	beq.n	8013b44 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b24:	4a17      	ldr	r2, [pc, #92]	; (8013b84 <HAL_SPI_IRQHandler+0x1fa>)
 8013b26:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	f7f3 fe14 	bl	800775a <HAL_DMA_Abort_IT>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d005      	beq.n	8013b44 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d016      	beq.n	8013b7a <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b50:	4a0c      	ldr	r2, [pc, #48]	; (8013b84 <HAL_SPI_IRQHandler+0x1fa>)
 8013b52:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013b58:	4618      	mov	r0, r3
 8013b5a:	f7f3 fdfe 	bl	800775a <HAL_DMA_Abort_IT>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00a      	beq.n	8013b7a <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8013b70:	e003      	b.n	8013b7a <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f844 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8013b78:	e000      	b.n	8013b7c <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8013b7a:	bf00      	nop
    return;
 8013b7c:	bf00      	nop
  }
}
 8013b7e:	3720      	adds	r7, #32
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	08013ed1 	.word	0x08013ed1

08013b88 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013b88:	b480      	push	{r7}
 8013b8a:	b083      	sub	sp, #12
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013b90:	bf00      	nop
 8013b92:	370c      	adds	r7, #12
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013b9c:	b480      	push	{r7}
 8013b9e:	b083      	sub	sp, #12
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013ba4:	bf00      	nop
 8013ba6:	370c      	adds	r7, #12
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bae:	4770      	bx	lr

08013bb0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013bb8:	bf00      	nop
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8013bcc:	bf00      	nop
 8013bce:	370c      	adds	r7, #12
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd6:	4770      	bx	lr

08013bd8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013bd8:	b480      	push	{r7}
 8013bda:	b083      	sub	sp, #12
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013be0:	bf00      	nop
 8013be2:	370c      	adds	r7, #12
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr

08013bec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8013bf4:	bf00      	nop
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b083      	sub	sp, #12
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013c08:	bf00      	nop
 8013c0a:	370c      	adds	r7, #12
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c12:	4770      	bx	lr

08013c14 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
 8013c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8013c1c:	bf00      	nop
 8013c1e:	370c      	adds	r7, #12
 8013c20:	46bd      	mov	sp, r7
 8013c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c26:	4770      	bx	lr

08013c28 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b083      	sub	sp, #12
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c36:	b2db      	uxtb	r3, r3
}
 8013c38:	4618      	mov	r0, r3
 8013c3a:	370c      	adds	r7, #12
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c42:	4770      	bx	lr

08013c44 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5a:	4770      	bx	lr

08013c5c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b086      	sub	sp, #24
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c68:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013c6a:	f7f2 fa45 	bl	80060f8 <HAL_GetTick>
 8013c6e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c7e:	d03b      	beq.n	8013cf8 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	685a      	ldr	r2, [r3, #4]
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	f022 0220 	bic.w	r2, r2, #32
 8013c8e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013c90:	697b      	ldr	r3, [r7, #20]
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	685a      	ldr	r2, [r3, #4]
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	681b      	ldr	r3, [r3, #0]
 8013c9a:	f022 0202 	bic.w	r2, r2, #2
 8013c9e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013ca0:	693a      	ldr	r2, [r7, #16]
 8013ca2:	2164      	movs	r1, #100	; 0x64
 8013ca4:	6978      	ldr	r0, [r7, #20]
 8013ca6:	f000 fc2c 	bl	8014502 <SPI_EndRxTxTransaction>
 8013caa:	4603      	mov	r3, r0
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d005      	beq.n	8013cbc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cb4:	f043 0220 	orr.w	r2, r3, #32
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	689b      	ldr	r3, [r3, #8]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d10a      	bne.n	8013cda <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60fb      	str	r3, [r7, #12]
 8013cc8:	697b      	ldr	r3, [r7, #20]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	68db      	ldr	r3, [r3, #12]
 8013cce:	60fb      	str	r3, [r7, #12]
 8013cd0:	697b      	ldr	r3, [r7, #20]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	689b      	ldr	r3, [r3, #8]
 8013cd6:	60fb      	str	r3, [r7, #12]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	2201      	movs	r2, #1
 8013ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d003      	beq.n	8013cf8 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013cf0:	6978      	ldr	r0, [r7, #20]
 8013cf2:	f7ff ff85 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013cf6:	e002      	b.n	8013cfe <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8013cf8:	6978      	ldr	r0, [r7, #20]
 8013cfa:	f7ff ff45 	bl	8013b88 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d10:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013d12:	f7f2 f9f1 	bl	80060f8 <HAL_GetTick>
 8013d16:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013d26:	d03b      	beq.n	8013da0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	685a      	ldr	r2, [r3, #4]
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	f022 0220 	bic.w	r2, r2, #32
 8013d36:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	689b      	ldr	r3, [r3, #8]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10d      	bne.n	8013d5c <SPI_DMAReceiveCplt+0x58>
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d48:	d108      	bne.n	8013d5c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	685a      	ldr	r2, [r3, #4]
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	f022 0203 	bic.w	r2, r2, #3
 8013d58:	605a      	str	r2, [r3, #4]
 8013d5a:	e007      	b.n	8013d6c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	685a      	ldr	r2, [r3, #4]
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f022 0201 	bic.w	r2, r2, #1
 8013d6a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013d6c:	68ba      	ldr	r2, [r7, #8]
 8013d6e:	2164      	movs	r1, #100	; 0x64
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f000 fb61 	bl	8014438 <SPI_EndRxTransaction>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d002      	beq.n	8013d82 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	2220      	movs	r2, #32
 8013d80:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2200      	movs	r2, #0
 8013d86:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d003      	beq.n	8013da0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013d98:	68f8      	ldr	r0, [r7, #12]
 8013d9a:	f7ff ff31 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013d9e:	e002      	b.n	8013da6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7ff fefb 	bl	8013b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013da6:	3710      	adds	r7, #16
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}

08013dac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013db8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013dba:	f7f2 f99d 	bl	80060f8 <HAL_GetTick>
 8013dbe:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013dce:	d02f      	beq.n	8013e30 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	685a      	ldr	r2, [r3, #4]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	f022 0220 	bic.w	r2, r2, #32
 8013dde:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8013de0:	68ba      	ldr	r2, [r7, #8]
 8013de2:	2164      	movs	r1, #100	; 0x64
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f000 fb8c 	bl	8014502 <SPI_EndRxTxTransaction>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d005      	beq.n	8013dfc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013df4:	f043 0220 	orr.w	r2, r3, #32
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	685a      	ldr	r2, [r3, #4]
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	f022 0203 	bic.w	r2, r2, #3
 8013e0a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	2200      	movs	r2, #0
 8013e16:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2201      	movs	r2, #1
 8013e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d003      	beq.n	8013e30 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013e28:	68f8      	ldr	r0, [r7, #12]
 8013e2a:	f7ff fee9 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013e2e:	e002      	b.n	8013e36 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f7ff febd 	bl	8013bb0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013e36:	3710      	adds	r7, #16
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	bd80      	pop	{r7, pc}

08013e3c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e48:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8013e4a:	68f8      	ldr	r0, [r7, #12]
 8013e4c:	f7ff feba 	bl	8013bc4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013e50:	bf00      	nop
 8013e52:	3710      	adds	r7, #16
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b084      	sub	sp, #16
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e64:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	f7ff feb6 	bl	8013bd8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013e6c:	bf00      	nop
 8013e6e:	3710      	adds	r7, #16
 8013e70:	46bd      	mov	sp, r7
 8013e72:	bd80      	pop	{r7, pc}

08013e74 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e80:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8013e82:	68f8      	ldr	r0, [r7, #12]
 8013e84:	f7ff feb2 	bl	8013bec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013e88:	bf00      	nop
 8013e8a:	3710      	adds	r7, #16
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}

08013e90 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e9c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	685a      	ldr	r2, [r3, #4]
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	f022 0203 	bic.w	r2, r2, #3
 8013eac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013eb2:	f043 0210 	orr.w	r2, r3, #16
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	2201      	movs	r2, #1
 8013ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	f7ff fe9c 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013ec8:	bf00      	nop
 8013eca:	3710      	adds	r7, #16
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}

08013ed0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013ed0:	b580      	push	{r7, lr}
 8013ed2:	b084      	sub	sp, #16
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013edc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f7ff fe88 	bl	8013c00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013ef0:	bf00      	nop
 8013ef2:	3710      	adds	r7, #16
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	bd80      	pop	{r7, pc}

08013ef8 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f04:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013f0a:	2200      	movs	r2, #0
 8013f0c:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013f0e:	4b2d      	ldr	r3, [pc, #180]	; (8013fc4 <SPI_DMATxAbortCallback+0xcc>)
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	4a2d      	ldr	r2, [pc, #180]	; (8013fc8 <SPI_DMATxAbortCallback+0xd0>)
 8013f14:	fba2 2303 	umull	r2, r3, r2, r3
 8013f18:	0a5b      	lsrs	r3, r3, #9
 8013f1a:	2264      	movs	r2, #100	; 0x64
 8013f1c:	fb02 f303 	mul.w	r3, r2, r3
 8013f20:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	685a      	ldr	r2, [r3, #4]
 8013f28:	697b      	ldr	r3, [r7, #20]
 8013f2a:	681b      	ldr	r3, [r3, #0]
 8013f2c:	f022 0202 	bic.w	r2, r2, #2
 8013f30:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d106      	bne.n	8013f46 <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013f44:	e009      	b.n	8013f5a <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 8013f46:	693b      	ldr	r3, [r7, #16]
 8013f48:	3b01      	subs	r3, #1
 8013f4a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	689b      	ldr	r3, [r3, #8]
 8013f52:	f003 0302 	and.w	r3, r3, #2
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d0eb      	beq.n	8013f32 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d004      	beq.n	8013f6c <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d126      	bne.n	8013fba <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	2200      	movs	r2, #0
 8013f76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f7c:	2b40      	cmp	r3, #64	; 0x40
 8013f7e:	d002      	beq.n	8013f86 <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	2200      	movs	r2, #0
 8013f84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f86:	2300      	movs	r3, #0
 8013f88:	60bb      	str	r3, [r7, #8]
 8013f8a:	697b      	ldr	r3, [r7, #20]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	68db      	ldr	r3, [r3, #12]
 8013f90:	60bb      	str	r3, [r7, #8]
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	60bb      	str	r3, [r7, #8]
 8013f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	689b      	ldr	r3, [r3, #8]
 8013fa6:	60fb      	str	r3, [r7, #12]
 8013fa8:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	2201      	movs	r2, #1
 8013fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 8013fb2:	6978      	ldr	r0, [r7, #20]
 8013fb4:	f7ff fe2e 	bl	8013c14 <HAL_SPI_AbortCpltCallback>
 8013fb8:	e000      	b.n	8013fbc <SPI_DMATxAbortCallback+0xc4>
      return;
 8013fba:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013fbc:	3718      	adds	r7, #24
 8013fbe:	46bd      	mov	sp, r7
 8013fc0:	bd80      	pop	{r7, pc}
 8013fc2:	bf00      	nop
 8013fc4:	20000058 	.word	0x20000058
 8013fc8:	057619f1 	.word	0x057619f1

08013fcc <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b086      	sub	sp, #24
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fd8:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013fe8:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013fee:	2200      	movs	r2, #0
 8013ff0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8013ff2:	697b      	ldr	r3, [r7, #20]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	685a      	ldr	r2, [r3, #4]
 8013ff8:	697b      	ldr	r3, [r7, #20]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	f022 0201 	bic.w	r2, r2, #1
 8014000:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014002:	f7f2 f879 	bl	80060f8 <HAL_GetTick>
 8014006:	4603      	mov	r3, r0
 8014008:	461a      	mov	r2, r3
 801400a:	2164      	movs	r1, #100	; 0x64
 801400c:	6978      	ldr	r0, [r7, #20]
 801400e:	f000 fa78 	bl	8014502 <SPI_EndRxTxTransaction>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d005      	beq.n	8014024 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801401c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014020:	697b      	ldr	r3, [r7, #20]
 8014022:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014028:	2b00      	cmp	r3, #0
 801402a:	d004      	beq.n	8014036 <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014032:	2b00      	cmp	r3, #0
 8014034:	d126      	bne.n	8014084 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	2200      	movs	r2, #0
 801403a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 801403c:	697b      	ldr	r3, [r7, #20]
 801403e:	2200      	movs	r2, #0
 8014040:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014046:	2b40      	cmp	r3, #64	; 0x40
 8014048:	d002      	beq.n	8014050 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	2200      	movs	r2, #0
 801404e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014050:	2300      	movs	r3, #0
 8014052:	60fb      	str	r3, [r7, #12]
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	68db      	ldr	r3, [r3, #12]
 801405a:	60fb      	str	r3, [r7, #12]
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	689b      	ldr	r3, [r3, #8]
 8014062:	60fb      	str	r3, [r7, #12]
 8014064:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8014066:	2300      	movs	r3, #0
 8014068:	613b      	str	r3, [r7, #16]
 801406a:	697b      	ldr	r3, [r7, #20]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	689b      	ldr	r3, [r3, #8]
 8014070:	613b      	str	r3, [r7, #16]
 8014072:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	2201      	movs	r2, #1
 8014078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 801407c:	6978      	ldr	r0, [r7, #20]
 801407e:	f7ff fdc9 	bl	8013c14 <HAL_SPI_AbortCpltCallback>
 8014082:	e000      	b.n	8014086 <SPI_DMARxAbortCallback+0xba>
      return;
 8014084:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014086:	3718      	adds	r7, #24
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	f103 020c 	add.w	r2, r3, #12
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140a0:	7812      	ldrb	r2, [r2, #0]
 80140a2:	b2d2      	uxtb	r2, r2
 80140a4:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140aa:	1c5a      	adds	r2, r3, #1
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140b4:	b29b      	uxth	r3, r3
 80140b6:	3b01      	subs	r3, #1
 80140b8:	b29a      	uxth	r2, r3
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d10f      	bne.n	80140e8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	685a      	ldr	r2, [r3, #4]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80140d6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80140dc:	b29b      	uxth	r3, r3
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d102      	bne.n	80140e8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f000 fa4e 	bl	8014584 <SPI_CloseRxTx_ISR>
    }
  }
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	330c      	adds	r3, #12
 8014102:	7812      	ldrb	r2, [r2, #0]
 8014104:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801410a:	1c5a      	adds	r2, r3, #1
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014114:	b29b      	uxth	r3, r3
 8014116:	3b01      	subs	r3, #1
 8014118:	b29a      	uxth	r2, r3
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014122:	b29b      	uxth	r3, r3
 8014124:	2b00      	cmp	r3, #0
 8014126:	d10f      	bne.n	8014148 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	685a      	ldr	r2, [r3, #4]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014136:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801413c:	b29b      	uxth	r3, r3
 801413e:	2b00      	cmp	r3, #0
 8014140:	d102      	bne.n	8014148 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fa1e 	bl	8014584 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014148:	bf00      	nop
 801414a:	3708      	adds	r7, #8
 801414c:	46bd      	mov	sp, r7
 801414e:	bd80      	pop	{r7, pc}

08014150 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014150:	b580      	push	{r7, lr}
 8014152:	b082      	sub	sp, #8
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	68da      	ldr	r2, [r3, #12]
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014162:	b292      	uxth	r2, r2
 8014164:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801416a:	1c9a      	adds	r2, r3, #2
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014174:	b29b      	uxth	r3, r3
 8014176:	3b01      	subs	r3, #1
 8014178:	b29a      	uxth	r2, r3
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014182:	b29b      	uxth	r3, r3
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10f      	bne.n	80141a8 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	685a      	ldr	r2, [r3, #4]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014196:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801419c:	b29b      	uxth	r3, r3
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 f9ee 	bl	8014584 <SPI_CloseRxTx_ISR>
    }
  }
}
 80141a8:	bf00      	nop
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141bc:	881a      	ldrh	r2, [r3, #0]
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80141c8:	1c9a      	adds	r2, r3, #2
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80141d2:	b29b      	uxth	r3, r3
 80141d4:	3b01      	subs	r3, #1
 80141d6:	b29a      	uxth	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d10f      	bne.n	8014206 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	685a      	ldr	r2, [r3, #4]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80141f4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d102      	bne.n	8014206 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f000 f9bf 	bl	8014584 <SPI_CloseRxTx_ISR>
    }
  }
}
 8014206:	bf00      	nop
 8014208:	3708      	adds	r7, #8
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}

0801420e <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801420e:	b580      	push	{r7, lr}
 8014210:	b082      	sub	sp, #8
 8014212:	af00      	add	r7, sp, #0
 8014214:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	f103 020c 	add.w	r2, r3, #12
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014222:	7812      	ldrb	r2, [r2, #0]
 8014224:	b2d2      	uxtb	r2, r2
 8014226:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801422c:	1c5a      	adds	r2, r3, #1
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014236:	b29b      	uxth	r3, r3
 8014238:	3b01      	subs	r3, #1
 801423a:	b29a      	uxth	r2, r3
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014244:	b29b      	uxth	r3, r3
 8014246:	2b00      	cmp	r3, #0
 8014248:	d102      	bne.n	8014250 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 fa0e 	bl	801466c <SPI_CloseRx_ISR>
  }
}
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	68da      	ldr	r2, [r3, #12]
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801426a:	b292      	uxth	r2, r2
 801426c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014272:	1c9a      	adds	r2, r3, #2
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801427c:	b29b      	uxth	r3, r3
 801427e:	3b01      	subs	r3, #1
 8014280:	b29a      	uxth	r2, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801428a:	b29b      	uxth	r3, r3
 801428c:	2b00      	cmp	r3, #0
 801428e:	d102      	bne.n	8014296 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8014290:	6878      	ldr	r0, [r7, #4]
 8014292:	f000 f9eb 	bl	801466c <SPI_CloseRx_ISR>
  }
}
 8014296:	bf00      	nop
 8014298:	3708      	adds	r7, #8
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}

0801429e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 801429e:	b580      	push	{r7, lr}
 80142a0:	b082      	sub	sp, #8
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	330c      	adds	r3, #12
 80142b0:	7812      	ldrb	r2, [r2, #0]
 80142b2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142b8:	1c5a      	adds	r2, r3, #1
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	3b01      	subs	r3, #1
 80142c6:	b29a      	uxth	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80142d0:	b29b      	uxth	r3, r3
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d102      	bne.n	80142dc <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f000 fa07 	bl	80146ea <SPI_CloseTx_ISR>
  }
}
 80142dc:	bf00      	nop
 80142de:	3708      	adds	r7, #8
 80142e0:	46bd      	mov	sp, r7
 80142e2:	bd80      	pop	{r7, pc}

080142e4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b082      	sub	sp, #8
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142f0:	881a      	ldrh	r2, [r3, #0]
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142fc:	1c9a      	adds	r2, r3, #2
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014306:	b29b      	uxth	r3, r3
 8014308:	3b01      	subs	r3, #1
 801430a:	b29a      	uxth	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014314:	b29b      	uxth	r3, r3
 8014316:	2b00      	cmp	r3, #0
 8014318:	d102      	bne.n	8014320 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 f9e5 	bl	80146ea <SPI_CloseTx_ISR>
  }
}
 8014320:	bf00      	nop
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}

08014328 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b088      	sub	sp, #32
 801432c:	af00      	add	r7, sp, #0
 801432e:	60f8      	str	r0, [r7, #12]
 8014330:	60b9      	str	r1, [r7, #8]
 8014332:	603b      	str	r3, [r7, #0]
 8014334:	4613      	mov	r3, r2
 8014336:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8014338:	f7f1 fede 	bl	80060f8 <HAL_GetTick>
 801433c:	4602      	mov	r2, r0
 801433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014340:	1a9b      	subs	r3, r3, r2
 8014342:	683a      	ldr	r2, [r7, #0]
 8014344:	4413      	add	r3, r2
 8014346:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8014348:	f7f1 fed6 	bl	80060f8 <HAL_GetTick>
 801434c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801434e:	4b39      	ldr	r3, [pc, #228]	; (8014434 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	015b      	lsls	r3, r3, #5
 8014354:	0d1b      	lsrs	r3, r3, #20
 8014356:	69fa      	ldr	r2, [r7, #28]
 8014358:	fb02 f303 	mul.w	r3, r2, r3
 801435c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801435e:	e054      	b.n	801440a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014366:	d050      	beq.n	801440a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8014368:	f7f1 fec6 	bl	80060f8 <HAL_GetTick>
 801436c:	4602      	mov	r2, r0
 801436e:	69bb      	ldr	r3, [r7, #24]
 8014370:	1ad3      	subs	r3, r2, r3
 8014372:	69fa      	ldr	r2, [r7, #28]
 8014374:	429a      	cmp	r2, r3
 8014376:	d902      	bls.n	801437e <SPI_WaitFlagStateUntilTimeout+0x56>
 8014378:	69fb      	ldr	r3, [r7, #28]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d13d      	bne.n	80143fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	685a      	ldr	r2, [r3, #4]
 8014384:	68fb      	ldr	r3, [r7, #12]
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801438c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014396:	d111      	bne.n	80143bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	689b      	ldr	r3, [r3, #8]
 801439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80143a0:	d004      	beq.n	80143ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	689b      	ldr	r3, [r3, #8]
 80143a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80143aa:	d107      	bne.n	80143bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80143ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80143c4:	d10f      	bne.n	80143e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	681a      	ldr	r2, [r3, #0]
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80143d4:	601a      	str	r2, [r3, #0]
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80143e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2201      	movs	r2, #1
 80143ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2200      	movs	r2, #0
 80143f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80143f6:	2303      	movs	r3, #3
 80143f8:	e017      	b.n	801442a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d101      	bne.n	8014404 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014400:	2300      	movs	r3, #0
 8014402:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	3b01      	subs	r3, #1
 8014408:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	689a      	ldr	r2, [r3, #8]
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	4013      	ands	r3, r2
 8014414:	68ba      	ldr	r2, [r7, #8]
 8014416:	429a      	cmp	r2, r3
 8014418:	bf0c      	ite	eq
 801441a:	2301      	moveq	r3, #1
 801441c:	2300      	movne	r3, #0
 801441e:	b2db      	uxtb	r3, r3
 8014420:	461a      	mov	r2, r3
 8014422:	79fb      	ldrb	r3, [r7, #7]
 8014424:	429a      	cmp	r2, r3
 8014426:	d19b      	bne.n	8014360 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8014428:	2300      	movs	r3, #0
}
 801442a:	4618      	mov	r0, r3
 801442c:	3720      	adds	r7, #32
 801442e:	46bd      	mov	sp, r7
 8014430:	bd80      	pop	{r7, pc}
 8014432:	bf00      	nop
 8014434:	20000058 	.word	0x20000058

08014438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af02      	add	r7, sp, #8
 801443e:	60f8      	str	r0, [r7, #12]
 8014440:	60b9      	str	r1, [r7, #8]
 8014442:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	685b      	ldr	r3, [r3, #4]
 8014448:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801444c:	d111      	bne.n	8014472 <SPI_EndRxTransaction+0x3a>
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	689b      	ldr	r3, [r3, #8]
 8014452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014456:	d004      	beq.n	8014462 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	689b      	ldr	r3, [r3, #8]
 801445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014460:	d107      	bne.n	8014472 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	681a      	ldr	r2, [r3, #0]
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014470:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014472:	68fb      	ldr	r3, [r7, #12]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801447a:	d12a      	bne.n	80144d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	689b      	ldr	r3, [r3, #8]
 8014480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014484:	d012      	beq.n	80144ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	9300      	str	r3, [sp, #0]
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	2200      	movs	r2, #0
 801448e:	2180      	movs	r1, #128	; 0x80
 8014490:	68f8      	ldr	r0, [r7, #12]
 8014492:	f7ff ff49 	bl	8014328 <SPI_WaitFlagStateUntilTimeout>
 8014496:	4603      	mov	r3, r0
 8014498:	2b00      	cmp	r3, #0
 801449a:	d02d      	beq.n	80144f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801449c:	68fb      	ldr	r3, [r7, #12]
 801449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144a0:	f043 0220 	orr.w	r2, r3, #32
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80144a8:	2303      	movs	r3, #3
 80144aa:	e026      	b.n	80144fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	9300      	str	r3, [sp, #0]
 80144b0:	68bb      	ldr	r3, [r7, #8]
 80144b2:	2200      	movs	r2, #0
 80144b4:	2101      	movs	r1, #1
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f7ff ff36 	bl	8014328 <SPI_WaitFlagStateUntilTimeout>
 80144bc:	4603      	mov	r3, r0
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d01a      	beq.n	80144f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144c6:	f043 0220 	orr.w	r2, r3, #32
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80144ce:	2303      	movs	r3, #3
 80144d0:	e013      	b.n	80144fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	9300      	str	r3, [sp, #0]
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	2200      	movs	r2, #0
 80144da:	2101      	movs	r1, #1
 80144dc:	68f8      	ldr	r0, [r7, #12]
 80144de:	f7ff ff23 	bl	8014328 <SPI_WaitFlagStateUntilTimeout>
 80144e2:	4603      	mov	r3, r0
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d007      	beq.n	80144f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144ec:	f043 0220 	orr.w	r2, r3, #32
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80144f4:	2303      	movs	r3, #3
 80144f6:	e000      	b.n	80144fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80144f8:	2300      	movs	r3, #0
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}

08014502 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014502:	b580      	push	{r7, lr}
 8014504:	b088      	sub	sp, #32
 8014506:	af02      	add	r7, sp, #8
 8014508:	60f8      	str	r0, [r7, #12]
 801450a:	60b9      	str	r1, [r7, #8]
 801450c:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801450e:	4b1b      	ldr	r3, [pc, #108]	; (801457c <SPI_EndRxTxTransaction+0x7a>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4a1b      	ldr	r2, [pc, #108]	; (8014580 <SPI_EndRxTxTransaction+0x7e>)
 8014514:	fba2 2303 	umull	r2, r3, r2, r3
 8014518:	0d5b      	lsrs	r3, r3, #21
 801451a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801451e:	fb02 f303 	mul.w	r3, r2, r3
 8014522:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	685b      	ldr	r3, [r3, #4]
 8014528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801452c:	d112      	bne.n	8014554 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	9300      	str	r3, [sp, #0]
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	2200      	movs	r2, #0
 8014536:	2180      	movs	r1, #128	; 0x80
 8014538:	68f8      	ldr	r0, [r7, #12]
 801453a:	f7ff fef5 	bl	8014328 <SPI_WaitFlagStateUntilTimeout>
 801453e:	4603      	mov	r3, r0
 8014540:	2b00      	cmp	r3, #0
 8014542:	d016      	beq.n	8014572 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014548:	f043 0220 	orr.w	r2, r3, #32
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014550:	2303      	movs	r3, #3
 8014552:	e00f      	b.n	8014574 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d00a      	beq.n	8014570 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801455a:	697b      	ldr	r3, [r7, #20]
 801455c:	3b01      	subs	r3, #1
 801455e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	689b      	ldr	r3, [r3, #8]
 8014566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801456a:	2b80      	cmp	r3, #128	; 0x80
 801456c:	d0f2      	beq.n	8014554 <SPI_EndRxTxTransaction+0x52>
 801456e:	e000      	b.n	8014572 <SPI_EndRxTxTransaction+0x70>
        break;
 8014570:	bf00      	nop
  }

  return HAL_OK;
 8014572:	2300      	movs	r3, #0
}
 8014574:	4618      	mov	r0, r3
 8014576:	3718      	adds	r7, #24
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	20000058 	.word	0x20000058
 8014580:	165e9f81 	.word	0x165e9f81

08014584 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b086      	sub	sp, #24
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 801458c:	4b35      	ldr	r3, [pc, #212]	; (8014664 <SPI_CloseRxTx_ISR+0xe0>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	4a35      	ldr	r2, [pc, #212]	; (8014668 <SPI_CloseRxTx_ISR+0xe4>)
 8014592:	fba2 2303 	umull	r2, r3, r2, r3
 8014596:	0a5b      	lsrs	r3, r3, #9
 8014598:	2264      	movs	r2, #100	; 0x64
 801459a:	fb02 f303 	mul.w	r3, r2, r3
 801459e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80145a0:	f7f1 fdaa 	bl	80060f8 <HAL_GetTick>
 80145a4:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	685a      	ldr	r2, [r3, #4]
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	f022 0220 	bic.w	r2, r2, #32
 80145b4:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d106      	bne.n	80145ca <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145c0:	f043 0220 	orr.w	r2, r3, #32
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80145c8:	e009      	b.n	80145de <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80145ca:	693b      	ldr	r3, [r7, #16]
 80145cc:	3b01      	subs	r3, #1
 80145ce:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	689b      	ldr	r3, [r3, #8]
 80145d6:	f003 0302 	and.w	r3, r3, #2
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d0eb      	beq.n	80145b6 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80145de:	697a      	ldr	r2, [r7, #20]
 80145e0:	2164      	movs	r1, #100	; 0x64
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f7ff ff8d 	bl	8014502 <SPI_EndRxTxTransaction>
 80145e8:	4603      	mov	r3, r0
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d005      	beq.n	80145fa <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80145f2:	f043 0220 	orr.w	r2, r3, #32
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	689b      	ldr	r3, [r3, #8]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d10a      	bne.n	8014618 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014602:	2300      	movs	r3, #0
 8014604:	60fb      	str	r3, [r7, #12]
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	68db      	ldr	r3, [r3, #12]
 801460c:	60fb      	str	r3, [r7, #12]
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	689b      	ldr	r3, [r3, #8]
 8014614:	60fb      	str	r3, [r7, #12]
 8014616:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801461c:	2b00      	cmp	r3, #0
 801461e:	d115      	bne.n	801464c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014626:	b2db      	uxtb	r3, r3
 8014628:	2b04      	cmp	r3, #4
 801462a:	d107      	bne.n	801463c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2201      	movs	r2, #1
 8014630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014634:	6878      	ldr	r0, [r7, #4]
 8014636:	f7ff fab1 	bl	8013b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 801463a:	e00e      	b.n	801465a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	2201      	movs	r2, #1
 8014640:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f7ff fab3 	bl	8013bb0 <HAL_SPI_TxRxCpltCallback>
}
 801464a:	e006      	b.n	801465a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2201      	movs	r2, #1
 8014650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014654:	6878      	ldr	r0, [r7, #4]
 8014656:	f7ff fad3 	bl	8013c00 <HAL_SPI_ErrorCallback>
}
 801465a:	bf00      	nop
 801465c:	3718      	adds	r7, #24
 801465e:	46bd      	mov	sp, r7
 8014660:	bd80      	pop	{r7, pc}
 8014662:	bf00      	nop
 8014664:	20000058 	.word	0x20000058
 8014668:	057619f1 	.word	0x057619f1

0801466c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b084      	sub	sp, #16
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	685a      	ldr	r2, [r3, #4]
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014682:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014684:	f7f1 fd38 	bl	80060f8 <HAL_GetTick>
 8014688:	4603      	mov	r3, r0
 801468a:	461a      	mov	r2, r3
 801468c:	2164      	movs	r1, #100	; 0x64
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f7ff fed2 	bl	8014438 <SPI_EndRxTransaction>
 8014694:	4603      	mov	r3, r0
 8014696:	2b00      	cmp	r3, #0
 8014698:	d005      	beq.n	80146a6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801469e:	f043 0220 	orr.w	r2, r3, #32
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	689b      	ldr	r3, [r3, #8]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d10a      	bne.n	80146c4 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80146ae:	2300      	movs	r3, #0
 80146b0:	60fb      	str	r3, [r7, #12]
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	68db      	ldr	r3, [r3, #12]
 80146b8:	60fb      	str	r3, [r7, #12]
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	689b      	ldr	r3, [r3, #8]
 80146c0:	60fb      	str	r3, [r7, #12]
 80146c2:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2201      	movs	r2, #1
 80146c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d103      	bne.n	80146dc <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80146d4:	6878      	ldr	r0, [r7, #4]
 80146d6:	f7ff fa61 	bl	8013b9c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80146da:	e002      	b.n	80146e2 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80146dc:	6878      	ldr	r0, [r7, #4]
 80146de:	f7ff fa8f 	bl	8013c00 <HAL_SPI_ErrorCallback>
}
 80146e2:	bf00      	nop
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}

080146ea <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b086      	sub	sp, #24
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80146f2:	4b2c      	ldr	r3, [pc, #176]	; (80147a4 <SPI_CloseTx_ISR+0xba>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	4a2c      	ldr	r2, [pc, #176]	; (80147a8 <SPI_CloseTx_ISR+0xbe>)
 80146f8:	fba2 2303 	umull	r2, r3, r2, r3
 80146fc:	0a5b      	lsrs	r3, r3, #9
 80146fe:	2264      	movs	r2, #100	; 0x64
 8014700:	fb02 f303 	mul.w	r3, r2, r3
 8014704:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014706:	f7f1 fcf7 	bl	80060f8 <HAL_GetTick>
 801470a:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 801470c:	693b      	ldr	r3, [r7, #16]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d106      	bne.n	8014720 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014716:	f043 0220 	orr.w	r2, r3, #32
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801471e:	e009      	b.n	8014734 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	3b01      	subs	r3, #1
 8014724:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	689b      	ldr	r3, [r3, #8]
 801472c:	f003 0302 	and.w	r3, r3, #2
 8014730:	2b00      	cmp	r3, #0
 8014732:	d0eb      	beq.n	801470c <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	685a      	ldr	r2, [r3, #4]
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014742:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014744:	697a      	ldr	r2, [r7, #20]
 8014746:	2164      	movs	r1, #100	; 0x64
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7ff feda 	bl	8014502 <SPI_EndRxTxTransaction>
 801474e:	4603      	mov	r3, r0
 8014750:	2b00      	cmp	r3, #0
 8014752:	d005      	beq.n	8014760 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014758:	f043 0220 	orr.w	r2, r3, #32
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	689b      	ldr	r3, [r3, #8]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d10a      	bne.n	801477e <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014768:	2300      	movs	r3, #0
 801476a:	60fb      	str	r3, [r7, #12]
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	60fb      	str	r3, [r7, #12]
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	689b      	ldr	r3, [r3, #8]
 801477a:	60fb      	str	r3, [r7, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	2201      	movs	r2, #1
 8014782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801478a:	2b00      	cmp	r3, #0
 801478c:	d003      	beq.n	8014796 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 801478e:	6878      	ldr	r0, [r7, #4]
 8014790:	f7ff fa36 	bl	8013c00 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014794:	e002      	b.n	801479c <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f7ff f9f6 	bl	8013b88 <HAL_SPI_TxCpltCallback>
}
 801479c:	bf00      	nop
 801479e:	3718      	adds	r7, #24
 80147a0:	46bd      	mov	sp, r7
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	20000058 	.word	0x20000058
 80147a8:	057619f1 	.word	0x057619f1

080147ac <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 80147ac:	b480      	push	{r7}
 80147ae:	b085      	sub	sp, #20
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 80147b4:	2300      	movs	r3, #0
 80147b6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80147b8:	4b1e      	ldr	r3, [pc, #120]	; (8014834 <SPI_AbortRx_ISR+0x88>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	4a1e      	ldr	r2, [pc, #120]	; (8014838 <SPI_AbortRx_ISR+0x8c>)
 80147be:	fba2 2303 	umull	r2, r3, r2, r3
 80147c2:	0a5b      	lsrs	r3, r3, #9
 80147c4:	2264      	movs	r2, #100	; 0x64
 80147c6:	fb02 f303 	mul.w	r3, r2, r3
 80147ca:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d106      	bne.n	80147e0 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80147de:	e009      	b.n	80147f4 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	3b01      	subs	r3, #1
 80147e4:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	689b      	ldr	r3, [r3, #8]
 80147ec:	f003 0302 	and.w	r3, r3, #2
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d0eb      	beq.n	80147cc <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014802:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	685a      	ldr	r2, [r3, #4]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014812:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 801481c:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2207      	movs	r2, #7
 8014822:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014826:	bf00      	nop
 8014828:	3714      	adds	r7, #20
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr
 8014832:	bf00      	nop
 8014834:	20000058 	.word	0x20000058
 8014838:	057619f1 	.word	0x057619f1

0801483c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	685a      	ldr	r2, [r3, #4]
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014852:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014862:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2207      	movs	r2, #7
 8014868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 801486c:	bf00      	nop
 801486e:	370c      	adds	r7, #12
 8014870:	46bd      	mov	sp, r7
 8014872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014876:	4770      	bx	lr

08014878 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014878:	b580      	push	{r7, lr}
 801487a:	b084      	sub	sp, #16
 801487c:	af00      	add	r7, sp, #0
 801487e:	60f8      	str	r0, [r7, #12]
 8014880:	60b9      	str	r1, [r7, #8]
 8014882:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d101      	bne.n	801488e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 801488a:	2301      	movs	r3, #1
 801488c:	e034      	b.n	80148f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014894:	b2db      	uxtb	r3, r3
 8014896:	2b00      	cmp	r3, #0
 8014898:	d106      	bne.n	80148a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2200      	movs	r2, #0
 801489e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80148a2:	68f8      	ldr	r0, [r7, #12]
 80148a4:	f7f1 f82a 	bl	80058fc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	681a      	ldr	r2, [r3, #0]
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	3308      	adds	r3, #8
 80148b0:	4619      	mov	r1, r3
 80148b2:	4610      	mov	r0, r2
 80148b4:	f003 f9a0 	bl	8017bf8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	6818      	ldr	r0, [r3, #0]
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	461a      	mov	r2, r3
 80148c2:	68b9      	ldr	r1, [r7, #8]
 80148c4:	f003 fa1e 	bl	8017d04 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	6858      	ldr	r0, [r3, #4]
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	689a      	ldr	r2, [r3, #8]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148d4:	6879      	ldr	r1, [r7, #4]
 80148d6:	f003 fa52 	bl	8017d7e <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	68fa      	ldr	r2, [r7, #12]
 80148e0:	6892      	ldr	r2, [r2, #8]
 80148e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	68fa      	ldr	r2, [r7, #12]
 80148ec:	6892      	ldr	r2, [r2, #8]
 80148ee:	f041 0101 	orr.w	r1, r1, #1
 80148f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80148f6:	2300      	movs	r3, #0
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3710      	adds	r7, #16
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8014900:	b580      	push	{r7, lr}
 8014902:	b082      	sub	sp, #8
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7f1 f825 	bl	8005958 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	6818      	ldr	r0, [r3, #0]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	6859      	ldr	r1, [r3, #4]
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	461a      	mov	r2, r3
 801491c:	f003 f9be 	bl	8017c9c <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	2200      	movs	r2, #0
 8014924:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2200      	movs	r2, #0
 801492c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8014930:	2300      	movs	r3, #0
}
 8014932:	4618      	mov	r0, r3
 8014934:	3708      	adds	r7, #8
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}

0801493a <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 801493a:	b480      	push	{r7}
 801493c:	b083      	sub	sp, #12
 801493e:	af00      	add	r7, sp, #0
 8014940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 8014942:	bf00      	nop
 8014944:	370c      	adds	r7, #12
 8014946:	46bd      	mov	sp, r7
 8014948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801494c:	4770      	bx	lr

0801494e <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 801494e:	b480      	push	{r7}
 8014950:	b083      	sub	sp, #12
 8014952:	af00      	add	r7, sp, #0
 8014954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 8014956:	bf00      	nop
 8014958:	370c      	adds	r7, #12
 801495a:	46bd      	mov	sp, r7
 801495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014960:	4770      	bx	lr

08014962 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 8014962:	b480      	push	{r7}
 8014964:	b087      	sub	sp, #28
 8014966:	af00      	add	r7, sp, #0
 8014968:	60f8      	str	r0, [r7, #12]
 801496a:	60b9      	str	r1, [r7, #8]
 801496c:	607a      	str	r2, [r7, #4]
 801496e:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8014970:	68bb      	ldr	r3, [r7, #8]
 8014972:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801497a:	2b01      	cmp	r3, #1
 801497c:	d101      	bne.n	8014982 <HAL_SRAM_Read_8b+0x20>
 801497e:	2302      	movs	r3, #2
 8014980:	e022      	b.n	80149c8 <HAL_SRAM_Read_8b+0x66>
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2201      	movs	r2, #1
 8014986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	2202      	movs	r2, #2
 801498e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014992:	e00d      	b.n	80149b0 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8014994:	697b      	ldr	r3, [r7, #20]
 8014996:	781b      	ldrb	r3, [r3, #0]
 8014998:	b2da      	uxtb	r2, r3
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	3301      	adds	r3, #1
 80149a2:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	3301      	adds	r3, #1
 80149a8:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	3b01      	subs	r3, #1
 80149ae:	603b      	str	r3, [r7, #0]
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d1ee      	bne.n	8014994 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	2201      	movs	r2, #1
 80149ba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2200      	movs	r2, #0
 80149c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 80149c6:	2300      	movs	r3, #0
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	371c      	adds	r7, #28
 80149cc:	46bd      	mov	sp, r7
 80149ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d2:	4770      	bx	lr

080149d4 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 80149d4:	b480      	push	{r7}
 80149d6:	b087      	sub	sp, #28
 80149d8:	af00      	add	r7, sp, #0
 80149da:	60f8      	str	r0, [r7, #12]
 80149dc:	60b9      	str	r1, [r7, #8]
 80149de:	607a      	str	r2, [r7, #4]
 80149e0:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80149ec:	b2db      	uxtb	r3, r3
 80149ee:	2b04      	cmp	r3, #4
 80149f0:	d101      	bne.n	80149f6 <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 80149f2:	2301      	movs	r3, #1
 80149f4:	e028      	b.n	8014a48 <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d101      	bne.n	8014a04 <HAL_SRAM_Write_8b+0x30>
 8014a00:	2302      	movs	r3, #2
 8014a02:	e021      	b.n	8014a48 <HAL_SRAM_Write_8b+0x74>
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	2201      	movs	r2, #1
 8014a08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	2202      	movs	r2, #2
 8014a10:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014a14:	e00c      	b.n	8014a30 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	781a      	ldrb	r2, [r3, #0]
 8014a1a:	697b      	ldr	r3, [r7, #20]
 8014a1c:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	3301      	adds	r3, #1
 8014a22:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	3301      	adds	r3, #1
 8014a28:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	3b01      	subs	r3, #1
 8014a2e:	603b      	str	r3, [r7, #0]
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d1ef      	bne.n	8014a16 <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2201      	movs	r2, #1
 8014a3a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	2200      	movs	r2, #0
 8014a42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	371c      	adds	r7, #28
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b087      	sub	sp, #28
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	607a      	str	r2, [r7, #4]
 8014a60:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014a6c:	2b01      	cmp	r3, #1
 8014a6e:	d101      	bne.n	8014a74 <HAL_SRAM_Read_16b+0x20>
 8014a70:	2302      	movs	r3, #2
 8014a72:	e022      	b.n	8014aba <HAL_SRAM_Read_16b+0x66>
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	2201      	movs	r2, #1
 8014a78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	2202      	movs	r2, #2
 8014a80:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014a84:	e00d      	b.n	8014aa2 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 8014a86:	697b      	ldr	r3, [r7, #20]
 8014a88:	881b      	ldrh	r3, [r3, #0]
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	3302      	adds	r3, #2
 8014a94:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8014a96:	697b      	ldr	r3, [r7, #20]
 8014a98:	3302      	adds	r3, #2
 8014a9a:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	3b01      	subs	r3, #1
 8014aa0:	603b      	str	r3, [r7, #0]
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d1ee      	bne.n	8014a86 <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2201      	movs	r2, #1
 8014aac:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014ab8:	2300      	movs	r3, #0
}
 8014aba:	4618      	mov	r0, r3
 8014abc:	371c      	adds	r7, #28
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr

08014ac6 <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 8014ac6:	b480      	push	{r7}
 8014ac8:	b087      	sub	sp, #28
 8014aca:	af00      	add	r7, sp, #0
 8014acc:	60f8      	str	r0, [r7, #12]
 8014ace:	60b9      	str	r1, [r7, #8]
 8014ad0:	607a      	str	r2, [r7, #4]
 8014ad2:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8014ad4:	68bb      	ldr	r3, [r7, #8]
 8014ad6:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014ade:	b2db      	uxtb	r3, r3
 8014ae0:	2b04      	cmp	r3, #4
 8014ae2:	d101      	bne.n	8014ae8 <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8014ae4:	2301      	movs	r3, #1
 8014ae6:	e028      	b.n	8014b3a <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014aee:	2b01      	cmp	r3, #1
 8014af0:	d101      	bne.n	8014af6 <HAL_SRAM_Write_16b+0x30>
 8014af2:	2302      	movs	r3, #2
 8014af4:	e021      	b.n	8014b3a <HAL_SRAM_Write_16b+0x74>
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2201      	movs	r2, #1
 8014afa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2202      	movs	r2, #2
 8014b02:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014b06:	e00c      	b.n	8014b22 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	881a      	ldrh	r2, [r3, #0]
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	3302      	adds	r3, #2
 8014b14:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	3302      	adds	r3, #2
 8014b1a:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014b1c:	683b      	ldr	r3, [r7, #0]
 8014b1e:	3b01      	subs	r3, #1
 8014b20:	603b      	str	r3, [r7, #0]
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d1ef      	bne.n	8014b08 <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2201      	movs	r2, #1
 8014b2c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014b38:	2300      	movs	r3, #0
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	371c      	adds	r7, #28
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b44:	4770      	bx	lr

08014b46 <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8014b46:	b480      	push	{r7}
 8014b48:	b085      	sub	sp, #20
 8014b4a:	af00      	add	r7, sp, #0
 8014b4c:	60f8      	str	r0, [r7, #12]
 8014b4e:	60b9      	str	r1, [r7, #8]
 8014b50:	607a      	str	r2, [r7, #4]
 8014b52:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014b5a:	2b01      	cmp	r3, #1
 8014b5c:	d101      	bne.n	8014b62 <HAL_SRAM_Read_32b+0x1c>
 8014b5e:	2302      	movs	r3, #2
 8014b60:	e021      	b.n	8014ba6 <HAL_SRAM_Read_32b+0x60>
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	2201      	movs	r2, #1
 8014b66:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2202      	movs	r2, #2
 8014b6e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014b72:	e00c      	b.n	8014b8e <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 8014b74:	68bb      	ldr	r3, [r7, #8]
 8014b76:	681a      	ldr	r2, [r3, #0]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	3304      	adds	r3, #4
 8014b80:	607b      	str	r3, [r7, #4]
    pAddress++;
 8014b82:	68bb      	ldr	r3, [r7, #8]
 8014b84:	3304      	adds	r3, #4
 8014b86:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	3b01      	subs	r3, #1
 8014b8c:	603b      	str	r3, [r7, #0]
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d1ef      	bne.n	8014b74 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	2201      	movs	r2, #1
 8014b98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014ba4:	2300      	movs	r3, #0
}
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	3714      	adds	r7, #20
 8014baa:	46bd      	mov	sp, r7
 8014bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb0:	4770      	bx	lr

08014bb2 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8014bb2:	b480      	push	{r7}
 8014bb4:	b085      	sub	sp, #20
 8014bb6:	af00      	add	r7, sp, #0
 8014bb8:	60f8      	str	r0, [r7, #12]
 8014bba:	60b9      	str	r1, [r7, #8]
 8014bbc:	607a      	str	r2, [r7, #4]
 8014bbe:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b04      	cmp	r3, #4
 8014bca:	d101      	bne.n	8014bd0 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e028      	b.n	8014c22 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d101      	bne.n	8014bde <HAL_SRAM_Write_32b+0x2c>
 8014bda:	2302      	movs	r3, #2
 8014bdc:	e021      	b.n	8014c22 <HAL_SRAM_Write_32b+0x70>
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2201      	movs	r2, #1
 8014be2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	2202      	movs	r2, #2
 8014bea:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014bee:	e00c      	b.n	8014c0a <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	68bb      	ldr	r3, [r7, #8]
 8014bf6:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	3304      	adds	r3, #4
 8014c02:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	3b01      	subs	r3, #1
 8014c08:	603b      	str	r3, [r7, #0]
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d1ef      	bne.n	8014bf0 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	2201      	movs	r2, #1
 8014c14:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014c20:	2300      	movs	r3, #0
}
 8014c22:	4618      	mov	r0, r3
 8014c24:	3714      	adds	r7, #20
 8014c26:	46bd      	mov	sp, r7
 8014c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2c:	4770      	bx	lr

08014c2e <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8014c2e:	b580      	push	{r7, lr}
 8014c30:	b084      	sub	sp, #16
 8014c32:	af00      	add	r7, sp, #0
 8014c34:	60f8      	str	r0, [r7, #12]
 8014c36:	60b9      	str	r1, [r7, #8]
 8014c38:	607a      	str	r2, [r7, #4]
 8014c3a:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014c42:	2b01      	cmp	r3, #1
 8014c44:	d101      	bne.n	8014c4a <HAL_SRAM_Read_DMA+0x1c>
 8014c46:	2302      	movs	r3, #2
 8014c48:	e01f      	b.n	8014c8a <HAL_SRAM_Read_DMA+0x5c>
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	2201      	movs	r2, #1
 8014c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8014c52:	68fb      	ldr	r3, [r7, #12]
 8014c54:	2202      	movs	r2, #2
 8014c56:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c5e:	4a0d      	ldr	r2, [pc, #52]	; (8014c94 <HAL_SRAM_Read_DMA+0x66>)
 8014c60:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c66:	4a0c      	ldr	r2, [pc, #48]	; (8014c98 <HAL_SRAM_Read_DMA+0x6a>)
 8014c68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	687a      	ldr	r2, [r7, #4]
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	f7f2 fca9 	bl	80075ca <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 8014c88:	2300      	movs	r3, #0
}
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	3710      	adds	r7, #16
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd80      	pop	{r7, pc}
 8014c92:	bf00      	nop
 8014c94:	0801493b 	.word	0x0801493b
 8014c98:	0801494f 	.word	0x0801494f

08014c9c <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b084      	sub	sp, #16
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	60f8      	str	r0, [r7, #12]
 8014ca4:	60b9      	str	r1, [r7, #8]
 8014ca6:	607a      	str	r2, [r7, #4]
 8014ca8:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014cb0:	b2db      	uxtb	r3, r3
 8014cb2:	2b04      	cmp	r3, #4
 8014cb4:	d101      	bne.n	8014cba <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	e026      	b.n	8014d08 <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d101      	bne.n	8014cc8 <HAL_SRAM_Write_DMA+0x2c>
 8014cc4:	2302      	movs	r3, #2
 8014cc6:	e01f      	b.n	8014d08 <HAL_SRAM_Write_DMA+0x6c>
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	2201      	movs	r2, #1
 8014ccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	2202      	movs	r2, #2
 8014cd4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014cdc:	4a0c      	ldr	r2, [pc, #48]	; (8014d10 <HAL_SRAM_Write_DMA+0x74>)
 8014cde:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014ce4:	4a0b      	ldr	r2, [pc, #44]	; (8014d14 <HAL_SRAM_Write_DMA+0x78>)
 8014ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8014cec:	6879      	ldr	r1, [r7, #4]
 8014cee:	68ba      	ldr	r2, [r7, #8]
 8014cf0:	683b      	ldr	r3, [r7, #0]
 8014cf2:	f7f2 fc6a 	bl	80075ca <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	2201      	movs	r2, #1
 8014cfa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	2200      	movs	r2, #0
 8014d02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 8014d06:	2300      	movs	r3, #0
}
 8014d08:	4618      	mov	r0, r3
 8014d0a:	3710      	adds	r7, #16
 8014d0c:	46bd      	mov	sp, r7
 8014d0e:	bd80      	pop	{r7, pc}
 8014d10:	0801493b 	.word	0x0801493b
 8014d14:	0801494f 	.word	0x0801494f

08014d18 <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b082      	sub	sp, #8
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d26:	2b01      	cmp	r3, #1
 8014d28:	d101      	bne.n	8014d2e <HAL_SRAM_WriteOperation_Enable+0x16>
 8014d2a:	2302      	movs	r3, #2
 8014d2c:	e014      	b.n	8014d58 <HAL_SRAM_WriteOperation_Enable+0x40>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	2201      	movs	r2, #1
 8014d32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	681a      	ldr	r2, [r3, #0]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	689b      	ldr	r3, [r3, #8]
 8014d3e:	4619      	mov	r1, r3
 8014d40:	4610      	mov	r0, r2
 8014d42:	f003 f85b 	bl	8017dfc <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2201      	movs	r2, #1
 8014d4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	2200      	movs	r2, #0
 8014d52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8014d56:	2300      	movs	r3, #0
}
 8014d58:	4618      	mov	r0, r3
 8014d5a:	3708      	adds	r7, #8
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}

08014d60 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8014d60:	b580      	push	{r7, lr}
 8014d62:	b082      	sub	sp, #8
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d6e:	2b01      	cmp	r3, #1
 8014d70:	d101      	bne.n	8014d76 <HAL_SRAM_WriteOperation_Disable+0x16>
 8014d72:	2302      	movs	r3, #2
 8014d74:	e018      	b.n	8014da8 <HAL_SRAM_WriteOperation_Disable+0x48>
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	2201      	movs	r2, #1
 8014d7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2202      	movs	r2, #2
 8014d82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	689b      	ldr	r3, [r3, #8]
 8014d8e:	4619      	mov	r1, r3
 8014d90:	4610      	mov	r0, r2
 8014d92:	f003 f849 	bl	8017e28 <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	2204      	movs	r2, #4
 8014d9a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	2200      	movs	r2, #0
 8014da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 8014da6:	2300      	movs	r3, #0
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  return hsram->State;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014dbe:	b2db      	uxtb	r3, r3
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d101      	bne.n	8014dde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e03f      	b.n	8014e5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014de4:	b2db      	uxtb	r3, r3
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d106      	bne.n	8014df8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f7f0 fcc4 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2224      	movs	r2, #36	; 0x24
 8014dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	68da      	ldr	r2, [r3, #12]
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014e0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014e10:	6878      	ldr	r0, [r7, #4]
 8014e12:	f002 fc7e 	bl	8017712 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	691a      	ldr	r2, [r3, #16]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014e24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	695a      	ldr	r2, [r3, #20]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014e34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	68da      	ldr	r2, [r3, #12]
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014e44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2220      	movs	r2, #32
 8014e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2220      	movs	r2, #32
 8014e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3708      	adds	r7, #8
 8014e62:	46bd      	mov	sp, r7
 8014e64:	bd80      	pop	{r7, pc}

08014e66 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8014e66:	b580      	push	{r7, lr}
 8014e68:	b082      	sub	sp, #8
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d101      	bne.n	8014e78 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8014e74:	2301      	movs	r3, #1
 8014e76:	e047      	b.n	8014f08 <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d106      	bne.n	8014e92 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	2200      	movs	r2, #0
 8014e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f7f0 fc77 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2224      	movs	r2, #36	; 0x24
 8014e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	68da      	ldr	r2, [r3, #12]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014ea8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f002 fc31 	bl	8017712 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	691a      	ldr	r2, [r3, #16]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014ebe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	695a      	ldr	r2, [r3, #20]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8014ece:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	695a      	ldr	r2, [r3, #20]
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	f042 0208 	orr.w	r2, r2, #8
 8014ede:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	68da      	ldr	r2, [r3, #12]
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014eee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2220      	movs	r2, #32
 8014efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2220      	movs	r2, #32
 8014f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014f06:	2300      	movs	r3, #0
}
 8014f08:	4618      	mov	r0, r3
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b082      	sub	sp, #8
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d101      	bne.n	8014f24 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8014f20:	2301      	movs	r3, #1
 8014f22:	e057      	b.n	8014fd4 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014f2a:	b2db      	uxtb	r3, r3
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d106      	bne.n	8014f3e <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f7f0 fc21 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	2224      	movs	r2, #36	; 0x24
 8014f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	68da      	ldr	r2, [r3, #12]
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	681b      	ldr	r3, [r3, #0]
 8014f50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014f54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014f56:	6878      	ldr	r0, [r7, #4]
 8014f58:	f002 fbdb 	bl	8017712 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	691a      	ldr	r2, [r3, #16]
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8014f6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	695a      	ldr	r2, [r3, #20]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014f7a:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	691a      	ldr	r2, [r3, #16]
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8014f8a:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	691a      	ldr	r2, [r3, #16]
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	f022 0220 	bic.w	r2, r2, #32
 8014f9a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	6919      	ldr	r1, [r3, #16]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	683a      	ldr	r2, [r7, #0]
 8014fa8:	430a      	orrs	r2, r1
 8014faa:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	68da      	ldr	r2, [r3, #12]
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014fba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2200      	movs	r2, #0
 8014fc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2220      	movs	r2, #32
 8014fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2220      	movs	r2, #32
 8014fce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014fd2:	2300      	movs	r3, #0
}
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	3708      	adds	r7, #8
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}

08014fdc <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8014fdc:	b580      	push	{r7, lr}
 8014fde:	b084      	sub	sp, #16
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	60f8      	str	r0, [r7, #12]
 8014fe4:	460b      	mov	r3, r1
 8014fe6:	607a      	str	r2, [r7, #4]
 8014fe8:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d101      	bne.n	8014ff4 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8014ff0:	2301      	movs	r3, #1
 8014ff2:	e05f      	b.n	80150b4 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014ffa:	b2db      	uxtb	r3, r3
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d106      	bne.n	801500e <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015000:	68fb      	ldr	r3, [r7, #12]
 8015002:	2200      	movs	r2, #0
 8015004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f7f0 fbb9 	bl	8005780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	2224      	movs	r2, #36	; 0x24
 8015012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	681b      	ldr	r3, [r3, #0]
 801501a:	68da      	ldr	r2, [r3, #12]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015024:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015026:	68f8      	ldr	r0, [r7, #12]
 8015028:	f002 fb73 	bl	8017712 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	691a      	ldr	r2, [r3, #16]
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801503a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	695a      	ldr	r2, [r3, #20]
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801504a:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 801504c:	68fb      	ldr	r3, [r7, #12]
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	691a      	ldr	r2, [r3, #16]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	f022 020f 	bic.w	r2, r2, #15
 801505a:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	6919      	ldr	r1, [r3, #16]
 8015062:	7afa      	ldrb	r2, [r7, #11]
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	430a      	orrs	r2, r1
 801506a:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	68da      	ldr	r2, [r3, #12]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801507a:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 801507c:	68fb      	ldr	r3, [r7, #12]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	68d9      	ldr	r1, [r3, #12]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	430a      	orrs	r2, r1
 801508a:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801508c:	68fb      	ldr	r3, [r7, #12]
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	68da      	ldr	r2, [r3, #12]
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	681b      	ldr	r3, [r3, #0]
 8015096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801509a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2200      	movs	r2, #0
 80150a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	2220      	movs	r2, #32
 80150a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	2220      	movs	r2, #32
 80150ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80150b2:	2300      	movs	r3, #0
}
 80150b4:	4618      	mov	r0, r3
 80150b6:	3710      	adds	r7, #16
 80150b8:	46bd      	mov	sp, r7
 80150ba:	bd80      	pop	{r7, pc}

080150bc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d101      	bne.n	80150ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80150ca:	2301      	movs	r3, #1
 80150cc:	e021      	b.n	8015112 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	2224      	movs	r2, #36	; 0x24
 80150d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	68da      	ldr	r2, [r3, #12]
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80150e4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f7f0 fb9a 	bl	8005820 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2200      	movs	r2, #0
 80150f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2200      	movs	r2, #0
 80150f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2200      	movs	r2, #0
 80150fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	2200      	movs	r2, #0
 8015106:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2200      	movs	r2, #0
 801510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015110:	2300      	movs	r3, #0
}
 8015112:	4618      	mov	r0, r3
 8015114:	3708      	adds	r7, #8
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}

0801511a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801511a:	b580      	push	{r7, lr}
 801511c:	b08a      	sub	sp, #40	; 0x28
 801511e:	af02      	add	r7, sp, #8
 8015120:	60f8      	str	r0, [r7, #12]
 8015122:	60b9      	str	r1, [r7, #8]
 8015124:	603b      	str	r3, [r7, #0]
 8015126:	4613      	mov	r3, r2
 8015128:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801512a:	2300      	movs	r3, #0
 801512c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015134:	b2db      	uxtb	r3, r3
 8015136:	2b20      	cmp	r3, #32
 8015138:	d17c      	bne.n	8015234 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d002      	beq.n	8015146 <HAL_UART_Transmit+0x2c>
 8015140:	88fb      	ldrh	r3, [r7, #6]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d101      	bne.n	801514a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8015146:	2301      	movs	r3, #1
 8015148:	e075      	b.n	8015236 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015150:	2b01      	cmp	r3, #1
 8015152:	d101      	bne.n	8015158 <HAL_UART_Transmit+0x3e>
 8015154:	2302      	movs	r3, #2
 8015156:	e06e      	b.n	8015236 <HAL_UART_Transmit+0x11c>
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	2201      	movs	r2, #1
 801515c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	2200      	movs	r2, #0
 8015164:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	2221      	movs	r2, #33	; 0x21
 801516a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801516e:	f7f0 ffc3 	bl	80060f8 <HAL_GetTick>
 8015172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	88fa      	ldrh	r2, [r7, #6]
 8015178:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	88fa      	ldrh	r2, [r7, #6]
 801517e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	689b      	ldr	r3, [r3, #8]
 8015184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015188:	d108      	bne.n	801519c <HAL_UART_Transmit+0x82>
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	691b      	ldr	r3, [r3, #16]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d104      	bne.n	801519c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8015192:	2300      	movs	r3, #0
 8015194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015196:	68bb      	ldr	r3, [r7, #8]
 8015198:	61bb      	str	r3, [r7, #24]
 801519a:	e003      	b.n	80151a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 801519c:	68bb      	ldr	r3, [r7, #8]
 801519e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80151a0:	2300      	movs	r3, #0
 80151a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	2200      	movs	r2, #0
 80151a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80151ac:	e02a      	b.n	8015204 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	9300      	str	r3, [sp, #0]
 80151b2:	697b      	ldr	r3, [r7, #20]
 80151b4:	2200      	movs	r2, #0
 80151b6:	2180      	movs	r1, #128	; 0x80
 80151b8:	68f8      	ldr	r0, [r7, #12]
 80151ba:	f001 ff19 	bl	8016ff0 <UART_WaitOnFlagUntilTimeout>
 80151be:	4603      	mov	r3, r0
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d001      	beq.n	80151c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80151c4:	2303      	movs	r3, #3
 80151c6:	e036      	b.n	8015236 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10b      	bne.n	80151e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80151ce:	69bb      	ldr	r3, [r7, #24]
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	461a      	mov	r2, r3
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80151dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80151de:	69bb      	ldr	r3, [r7, #24]
 80151e0:	3302      	adds	r3, #2
 80151e2:	61bb      	str	r3, [r7, #24]
 80151e4:	e007      	b.n	80151f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	781a      	ldrb	r2, [r3, #0]
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	3301      	adds	r3, #1
 80151f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80151fa:	b29b      	uxth	r3, r3
 80151fc:	3b01      	subs	r3, #1
 80151fe:	b29a      	uxth	r2, r3
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8015208:	b29b      	uxth	r3, r3
 801520a:	2b00      	cmp	r3, #0
 801520c:	d1cf      	bne.n	80151ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801520e:	683b      	ldr	r3, [r7, #0]
 8015210:	9300      	str	r3, [sp, #0]
 8015212:	697b      	ldr	r3, [r7, #20]
 8015214:	2200      	movs	r2, #0
 8015216:	2140      	movs	r1, #64	; 0x40
 8015218:	68f8      	ldr	r0, [r7, #12]
 801521a:	f001 fee9 	bl	8016ff0 <UART_WaitOnFlagUntilTimeout>
 801521e:	4603      	mov	r3, r0
 8015220:	2b00      	cmp	r3, #0
 8015222:	d001      	beq.n	8015228 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015224:	2303      	movs	r3, #3
 8015226:	e006      	b.n	8015236 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015228:	68fb      	ldr	r3, [r7, #12]
 801522a:	2220      	movs	r2, #32
 801522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015230:	2300      	movs	r3, #0
 8015232:	e000      	b.n	8015236 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015234:	2302      	movs	r3, #2
  }
}
 8015236:	4618      	mov	r0, r3
 8015238:	3720      	adds	r7, #32
 801523a:	46bd      	mov	sp, r7
 801523c:	bd80      	pop	{r7, pc}

0801523e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801523e:	b580      	push	{r7, lr}
 8015240:	b08a      	sub	sp, #40	; 0x28
 8015242:	af02      	add	r7, sp, #8
 8015244:	60f8      	str	r0, [r7, #12]
 8015246:	60b9      	str	r1, [r7, #8]
 8015248:	603b      	str	r3, [r7, #0]
 801524a:	4613      	mov	r3, r2
 801524c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801524e:	2300      	movs	r3, #0
 8015250:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015258:	b2db      	uxtb	r3, r3
 801525a:	2b20      	cmp	r3, #32
 801525c:	f040 808c 	bne.w	8015378 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d002      	beq.n	801526c <HAL_UART_Receive+0x2e>
 8015266:	88fb      	ldrh	r3, [r7, #6]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d101      	bne.n	8015270 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 801526c:	2301      	movs	r3, #1
 801526e:	e084      	b.n	801537a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015276:	2b01      	cmp	r3, #1
 8015278:	d101      	bne.n	801527e <HAL_UART_Receive+0x40>
 801527a:	2302      	movs	r3, #2
 801527c:	e07d      	b.n	801537a <HAL_UART_Receive+0x13c>
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2201      	movs	r2, #1
 8015282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2200      	movs	r2, #0
 801528a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	2222      	movs	r2, #34	; 0x22
 8015290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	2200      	movs	r2, #0
 8015298:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801529a:	f7f0 ff2d 	bl	80060f8 <HAL_GetTick>
 801529e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	88fa      	ldrh	r2, [r7, #6]
 80152a4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	88fa      	ldrh	r2, [r7, #6]
 80152aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	689b      	ldr	r3, [r3, #8]
 80152b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80152b4:	d108      	bne.n	80152c8 <HAL_UART_Receive+0x8a>
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	691b      	ldr	r3, [r3, #16]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d104      	bne.n	80152c8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80152be:	2300      	movs	r3, #0
 80152c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	61bb      	str	r3, [r7, #24]
 80152c6:	e003      	b.n	80152d0 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80152cc:	2300      	movs	r3, #0
 80152ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2200      	movs	r2, #0
 80152d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80152d8:	e043      	b.n	8015362 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80152da:	683b      	ldr	r3, [r7, #0]
 80152dc:	9300      	str	r3, [sp, #0]
 80152de:	697b      	ldr	r3, [r7, #20]
 80152e0:	2200      	movs	r2, #0
 80152e2:	2120      	movs	r1, #32
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f001 fe83 	bl	8016ff0 <UART_WaitOnFlagUntilTimeout>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d001      	beq.n	80152f4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80152f0:	2303      	movs	r3, #3
 80152f2:	e042      	b.n	801537a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d10c      	bne.n	8015314 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	685b      	ldr	r3, [r3, #4]
 8015300:	b29b      	uxth	r3, r3
 8015302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015306:	b29a      	uxth	r2, r3
 8015308:	69bb      	ldr	r3, [r7, #24]
 801530a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	3302      	adds	r3, #2
 8015310:	61bb      	str	r3, [r7, #24]
 8015312:	e01f      	b.n	8015354 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	689b      	ldr	r3, [r3, #8]
 8015318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801531c:	d007      	beq.n	801532e <HAL_UART_Receive+0xf0>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	689b      	ldr	r3, [r3, #8]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d10a      	bne.n	801533c <HAL_UART_Receive+0xfe>
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	691b      	ldr	r3, [r3, #16]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d106      	bne.n	801533c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	685b      	ldr	r3, [r3, #4]
 8015334:	b2da      	uxtb	r2, r3
 8015336:	69fb      	ldr	r3, [r7, #28]
 8015338:	701a      	strb	r2, [r3, #0]
 801533a:	e008      	b.n	801534e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801533c:	68fb      	ldr	r3, [r7, #12]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	685b      	ldr	r3, [r3, #4]
 8015342:	b2db      	uxtb	r3, r3
 8015344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015348:	b2da      	uxtb	r2, r3
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 801534e:	69fb      	ldr	r3, [r7, #28]
 8015350:	3301      	adds	r3, #1
 8015352:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015358:	b29b      	uxth	r3, r3
 801535a:	3b01      	subs	r3, #1
 801535c:	b29a      	uxth	r2, r3
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015366:	b29b      	uxth	r3, r3
 8015368:	2b00      	cmp	r3, #0
 801536a:	d1b6      	bne.n	80152da <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801536c:	68fb      	ldr	r3, [r7, #12]
 801536e:	2220      	movs	r2, #32
 8015370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015374:	2300      	movs	r3, #0
 8015376:	e000      	b.n	801537a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8015378:	2302      	movs	r3, #2
  }
}
 801537a:	4618      	mov	r0, r3
 801537c:	3720      	adds	r7, #32
 801537e:	46bd      	mov	sp, r7
 8015380:	bd80      	pop	{r7, pc}

08015382 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015382:	b480      	push	{r7}
 8015384:	b085      	sub	sp, #20
 8015386:	af00      	add	r7, sp, #0
 8015388:	60f8      	str	r0, [r7, #12]
 801538a:	60b9      	str	r1, [r7, #8]
 801538c:	4613      	mov	r3, r2
 801538e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015396:	b2db      	uxtb	r3, r3
 8015398:	2b20      	cmp	r3, #32
 801539a:	d130      	bne.n	80153fe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d002      	beq.n	80153a8 <HAL_UART_Transmit_IT+0x26>
 80153a2:	88fb      	ldrh	r3, [r7, #6]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d101      	bne.n	80153ac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80153a8:	2301      	movs	r3, #1
 80153aa:	e029      	b.n	8015400 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153b2:	2b01      	cmp	r3, #1
 80153b4:	d101      	bne.n	80153ba <HAL_UART_Transmit_IT+0x38>
 80153b6:	2302      	movs	r3, #2
 80153b8:	e022      	b.n	8015400 <HAL_UART_Transmit_IT+0x7e>
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	2201      	movs	r2, #1
 80153be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	68ba      	ldr	r2, [r7, #8]
 80153c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	88fa      	ldrh	r2, [r7, #6]
 80153cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	88fa      	ldrh	r2, [r7, #6]
 80153d2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	2200      	movs	r2, #0
 80153d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	2221      	movs	r2, #33	; 0x21
 80153de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	2200      	movs	r2, #0
 80153e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	68da      	ldr	r2, [r3, #12]
 80153f0:	68fb      	ldr	r3, [r7, #12]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80153f8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80153fa:	2300      	movs	r3, #0
 80153fc:	e000      	b.n	8015400 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80153fe:	2302      	movs	r3, #2
  }
}
 8015400:	4618      	mov	r0, r3
 8015402:	3714      	adds	r7, #20
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr

0801540c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b084      	sub	sp, #16
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	4613      	mov	r3, r2
 8015418:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015420:	b2db      	uxtb	r3, r3
 8015422:	2b20      	cmp	r3, #32
 8015424:	d11d      	bne.n	8015462 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015426:	68bb      	ldr	r3, [r7, #8]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d002      	beq.n	8015432 <HAL_UART_Receive_IT+0x26>
 801542c:	88fb      	ldrh	r3, [r7, #6]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015432:	2301      	movs	r3, #1
 8015434:	e016      	b.n	8015464 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801543c:	2b01      	cmp	r3, #1
 801543e:	d101      	bne.n	8015444 <HAL_UART_Receive_IT+0x38>
 8015440:	2302      	movs	r3, #2
 8015442:	e00f      	b.n	8015464 <HAL_UART_Receive_IT+0x58>
 8015444:	68fb      	ldr	r3, [r7, #12]
 8015446:	2201      	movs	r2, #1
 8015448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2200      	movs	r2, #0
 8015450:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015452:	88fb      	ldrh	r3, [r7, #6]
 8015454:	461a      	mov	r2, r3
 8015456:	68b9      	ldr	r1, [r7, #8]
 8015458:	68f8      	ldr	r0, [r7, #12]
 801545a:	f001 fe37 	bl	80170cc <UART_Start_Receive_IT>
 801545e:	4603      	mov	r3, r0
 8015460:	e000      	b.n	8015464 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015462:	2302      	movs	r3, #2
  }
}
 8015464:	4618      	mov	r0, r3
 8015466:	3710      	adds	r7, #16
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}

0801546c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b08c      	sub	sp, #48	; 0x30
 8015470:	af00      	add	r7, sp, #0
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	60b9      	str	r1, [r7, #8]
 8015476:	4613      	mov	r3, r2
 8015478:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015480:	b2db      	uxtb	r3, r3
 8015482:	2b20      	cmp	r3, #32
 8015484:	d165      	bne.n	8015552 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d002      	beq.n	8015492 <HAL_UART_Transmit_DMA+0x26>
 801548c:	88fb      	ldrh	r3, [r7, #6]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d101      	bne.n	8015496 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8015492:	2301      	movs	r3, #1
 8015494:	e05e      	b.n	8015554 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801549c:	2b01      	cmp	r3, #1
 801549e:	d101      	bne.n	80154a4 <HAL_UART_Transmit_DMA+0x38>
 80154a0:	2302      	movs	r3, #2
 80154a2:	e057      	b.n	8015554 <HAL_UART_Transmit_DMA+0xe8>
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	2201      	movs	r2, #1
 80154a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80154ac:	68ba      	ldr	r2, [r7, #8]
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	88fa      	ldrh	r2, [r7, #6]
 80154b6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	88fa      	ldrh	r2, [r7, #6]
 80154bc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	2221      	movs	r2, #33	; 0x21
 80154c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154d0:	4a22      	ldr	r2, [pc, #136]	; (801555c <HAL_UART_Transmit_DMA+0xf0>)
 80154d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154d8:	4a21      	ldr	r2, [pc, #132]	; (8015560 <HAL_UART_Transmit_DMA+0xf4>)
 80154da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80154dc:	68fb      	ldr	r3, [r7, #12]
 80154de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e0:	4a20      	ldr	r2, [pc, #128]	; (8015564 <HAL_UART_Transmit_DMA+0xf8>)
 80154e2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154e8:	2200      	movs	r2, #0
 80154ea:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80154ec:	f107 0308 	add.w	r3, r7, #8
 80154f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80154f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f8:	6819      	ldr	r1, [r3, #0]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	3304      	adds	r3, #4
 8015500:	461a      	mov	r2, r3
 8015502:	88fb      	ldrh	r3, [r7, #6]
 8015504:	f7f2 f861 	bl	80075ca <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015508:	68fb      	ldr	r3, [r7, #12]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015510:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	2200      	movs	r2, #0
 8015516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	3314      	adds	r3, #20
 8015520:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015522:	69bb      	ldr	r3, [r7, #24]
 8015524:	e853 3f00 	ldrex	r3, [r3]
 8015528:	617b      	str	r3, [r7, #20]
   return(result);
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015530:	62bb      	str	r3, [r7, #40]	; 0x28
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	3314      	adds	r3, #20
 8015538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801553a:	627a      	str	r2, [r7, #36]	; 0x24
 801553c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801553e:	6a39      	ldr	r1, [r7, #32]
 8015540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015542:	e841 2300 	strex	r3, r2, [r1]
 8015546:	61fb      	str	r3, [r7, #28]
   return(result);
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1e5      	bne.n	801551a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 801554e:	2300      	movs	r3, #0
 8015550:	e000      	b.n	8015554 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015552:	2302      	movs	r3, #2
  }
}
 8015554:	4618      	mov	r0, r3
 8015556:	3730      	adds	r7, #48	; 0x30
 8015558:	46bd      	mov	sp, r7
 801555a:	bd80      	pop	{r7, pc}
 801555c:	08016d4b 	.word	0x08016d4b
 8015560:	08016de5 	.word	0x08016de5
 8015564:	08016f5d 	.word	0x08016f5d

08015568 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b084      	sub	sp, #16
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	4613      	mov	r3, r2
 8015574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801557c:	b2db      	uxtb	r3, r3
 801557e:	2b20      	cmp	r3, #32
 8015580:	d11d      	bne.n	80155be <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d002      	beq.n	801558e <HAL_UART_Receive_DMA+0x26>
 8015588:	88fb      	ldrh	r3, [r7, #6]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d101      	bne.n	8015592 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801558e:	2301      	movs	r3, #1
 8015590:	e016      	b.n	80155c0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015598:	2b01      	cmp	r3, #1
 801559a:	d101      	bne.n	80155a0 <HAL_UART_Receive_DMA+0x38>
 801559c:	2302      	movs	r3, #2
 801559e:	e00f      	b.n	80155c0 <HAL_UART_Receive_DMA+0x58>
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	2201      	movs	r2, #1
 80155a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2200      	movs	r2, #0
 80155ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80155ae:	88fb      	ldrh	r3, [r7, #6]
 80155b0:	461a      	mov	r2, r3
 80155b2:	68b9      	ldr	r1, [r7, #8]
 80155b4:	68f8      	ldr	r0, [r7, #12]
 80155b6:	f001 fdc3 	bl	8017140 <UART_Start_Receive_DMA>
 80155ba:	4603      	mov	r3, r0
 80155bc:	e000      	b.n	80155c0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80155be:	2302      	movs	r3, #2
  }
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3710      	adds	r7, #16
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}

080155c8 <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 80155c8:	b480      	push	{r7}
 80155ca:	b09d      	sub	sp, #116	; 0x74
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80155d0:	2300      	movs	r3, #0
 80155d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80155da:	2b01      	cmp	r3, #1
 80155dc:	d101      	bne.n	80155e2 <HAL_UART_DMAPause+0x1a>
 80155de:	2302      	movs	r3, #2
 80155e0:	e098      	b.n	8015714 <HAL_UART_DMAPause+0x14c>
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2201      	movs	r2, #1
 80155e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	695b      	ldr	r3, [r3, #20]
 80155f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80155f4:	2b80      	cmp	r3, #128	; 0x80
 80155f6:	bf0c      	ite	eq
 80155f8:	2301      	moveq	r3, #1
 80155fa:	2300      	movne	r3, #0
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015606:	b2db      	uxtb	r3, r3
 8015608:	2b21      	cmp	r3, #33	; 0x21
 801560a:	d11c      	bne.n	8015646 <HAL_UART_DMAPause+0x7e>
 801560c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801560e:	2b00      	cmp	r3, #0
 8015610:	d019      	beq.n	8015646 <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	3314      	adds	r3, #20
 8015618:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801561a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801561c:	e853 3f00 	ldrex	r3, [r3]
 8015620:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015622:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015628:	66bb      	str	r3, [r7, #104]	; 0x68
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	3314      	adds	r3, #20
 8015630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015632:	65ba      	str	r2, [r7, #88]	; 0x58
 8015634:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015636:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015638:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801563a:	e841 2300 	strex	r3, r2, [r1]
 801563e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015642:	2b00      	cmp	r3, #0
 8015644:	d1e5      	bne.n	8015612 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681b      	ldr	r3, [r3, #0]
 801564a:	695b      	ldr	r3, [r3, #20]
 801564c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015650:	2b40      	cmp	r3, #64	; 0x40
 8015652:	bf0c      	ite	eq
 8015654:	2301      	moveq	r3, #1
 8015656:	2300      	movne	r3, #0
 8015658:	b2db      	uxtb	r3, r3
 801565a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015662:	b2db      	uxtb	r3, r3
 8015664:	2b22      	cmp	r3, #34	; 0x22
 8015666:	d150      	bne.n	801570a <HAL_UART_DMAPause+0x142>
 8015668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801566a:	2b00      	cmp	r3, #0
 801566c:	d04d      	beq.n	801570a <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	330c      	adds	r3, #12
 8015674:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015678:	e853 3f00 	ldrex	r3, [r3]
 801567c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801567e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015684:	667b      	str	r3, [r7, #100]	; 0x64
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	330c      	adds	r3, #12
 801568c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801568e:	647a      	str	r2, [r7, #68]	; 0x44
 8015690:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015692:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015696:	e841 2300 	strex	r3, r2, [r1]
 801569a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d1e5      	bne.n	801566e <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	3314      	adds	r3, #20
 80156a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ac:	e853 3f00 	ldrex	r3, [r3]
 80156b0:	623b      	str	r3, [r7, #32]
   return(result);
 80156b2:	6a3b      	ldr	r3, [r7, #32]
 80156b4:	f023 0301 	bic.w	r3, r3, #1
 80156b8:	663b      	str	r3, [r7, #96]	; 0x60
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	3314      	adds	r3, #20
 80156c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80156c2:	633a      	str	r2, [r7, #48]	; 0x30
 80156c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156ca:	e841 2300 	strex	r3, r2, [r1]
 80156ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d1e5      	bne.n	80156a2 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	3314      	adds	r3, #20
 80156dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	e853 3f00 	ldrex	r3, [r3]
 80156e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80156ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	3314      	adds	r3, #20
 80156f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80156f6:	61fa      	str	r2, [r7, #28]
 80156f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80156fa:	69b9      	ldr	r1, [r7, #24]
 80156fc:	69fa      	ldr	r2, [r7, #28]
 80156fe:	e841 2300 	strex	r3, r2, [r1]
 8015702:	617b      	str	r3, [r7, #20]
   return(result);
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d1e5      	bne.n	80156d6 <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	2200      	movs	r2, #0
 801570e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015712:	2300      	movs	r3, #0
}
 8015714:	4618      	mov	r0, r3
 8015716:	3774      	adds	r7, #116	; 0x74
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr

08015720 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015720:	b480      	push	{r7}
 8015722:	b09d      	sub	sp, #116	; 0x74
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801572e:	2b01      	cmp	r3, #1
 8015730:	d101      	bne.n	8015736 <HAL_UART_DMAResume+0x16>
 8015732:	2302      	movs	r3, #2
 8015734:	e087      	b.n	8015846 <HAL_UART_DMAResume+0x126>
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2201      	movs	r2, #1
 801573a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b21      	cmp	r3, #33	; 0x21
 8015748:	d119      	bne.n	801577e <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	3314      	adds	r3, #20
 8015750:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015754:	e853 3f00 	ldrex	r3, [r3]
 8015758:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015760:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	681b      	ldr	r3, [r3, #0]
 8015766:	3314      	adds	r3, #20
 8015768:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801576a:	65fa      	str	r2, [r7, #92]	; 0x5c
 801576c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801576e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015772:	e841 2300 	strex	r3, r2, [r1]
 8015776:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801577a:	2b00      	cmp	r3, #0
 801577c:	d1e5      	bne.n	801574a <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015784:	b2db      	uxtb	r3, r3
 8015786:	2b22      	cmp	r3, #34	; 0x22
 8015788:	d158      	bne.n	801583c <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 801578a:	2300      	movs	r3, #0
 801578c:	60fb      	str	r3, [r7, #12]
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	60fb      	str	r3, [r7, #12]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	60fb      	str	r3, [r7, #12]
 801579e:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	330c      	adds	r3, #12
 80157a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80157aa:	e853 3f00 	ldrex	r3, [r3]
 80157ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80157b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80157b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80157b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	330c      	adds	r3, #12
 80157be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80157c0:	64ba      	str	r2, [r7, #72]	; 0x48
 80157c2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80157c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80157c8:	e841 2300 	strex	r3, r2, [r1]
 80157cc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80157ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d1e5      	bne.n	80157a0 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	3314      	adds	r3, #20
 80157da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80157dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157de:	e853 3f00 	ldrex	r3, [r3]
 80157e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80157e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e6:	f043 0301 	orr.w	r3, r3, #1
 80157ea:	667b      	str	r3, [r7, #100]	; 0x64
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	3314      	adds	r3, #20
 80157f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80157f4:	637a      	str	r2, [r7, #52]	; 0x34
 80157f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80157f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80157fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80157fc:	e841 2300 	strex	r3, r2, [r1]
 8015800:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015804:	2b00      	cmp	r3, #0
 8015806:	d1e5      	bne.n	80157d4 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	3314      	adds	r3, #20
 801580e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015810:	697b      	ldr	r3, [r7, #20]
 8015812:	e853 3f00 	ldrex	r3, [r3]
 8015816:	613b      	str	r3, [r7, #16]
   return(result);
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801581e:	663b      	str	r3, [r7, #96]	; 0x60
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	3314      	adds	r3, #20
 8015826:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015828:	623a      	str	r2, [r7, #32]
 801582a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801582c:	69f9      	ldr	r1, [r7, #28]
 801582e:	6a3a      	ldr	r2, [r7, #32]
 8015830:	e841 2300 	strex	r3, r2, [r1]
 8015834:	61bb      	str	r3, [r7, #24]
   return(result);
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1e5      	bne.n	8015808 <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2200      	movs	r2, #0
 8015840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015844:	2300      	movs	r3, #0
}
 8015846:	4618      	mov	r0, r3
 8015848:	3774      	adds	r7, #116	; 0x74
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr

08015852 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b090      	sub	sp, #64	; 0x40
 8015856:	af00      	add	r7, sp, #0
 8015858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 801585a:	2300      	movs	r3, #0
 801585c:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	695b      	ldr	r3, [r3, #20]
 8015864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015868:	2b80      	cmp	r3, #128	; 0x80
 801586a:	bf0c      	ite	eq
 801586c:	2301      	moveq	r3, #1
 801586e:	2300      	movne	r3, #0
 8015870:	b2db      	uxtb	r3, r3
 8015872:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801587a:	b2db      	uxtb	r3, r3
 801587c:	2b21      	cmp	r3, #33	; 0x21
 801587e:	d128      	bne.n	80158d2 <HAL_UART_DMAStop+0x80>
 8015880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015882:	2b00      	cmp	r3, #0
 8015884:	d025      	beq.n	80158d2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	3314      	adds	r3, #20
 801588c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015890:	e853 3f00 	ldrex	r3, [r3]
 8015894:	623b      	str	r3, [r7, #32]
   return(result);
 8015896:	6a3b      	ldr	r3, [r7, #32]
 8015898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801589c:	63bb      	str	r3, [r7, #56]	; 0x38
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	3314      	adds	r3, #20
 80158a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80158a6:	633a      	str	r2, [r7, #48]	; 0x30
 80158a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80158ae:	e841 2300 	strex	r3, r2, [r1]
 80158b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80158b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d1e5      	bne.n	8015886 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d004      	beq.n	80158cc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7f1 fed7 	bl	800767a <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80158cc:	6878      	ldr	r0, [r7, #4]
 80158ce:	f001 fcd1 	bl	8017274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	695b      	ldr	r3, [r3, #20]
 80158d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80158dc:	2b40      	cmp	r3, #64	; 0x40
 80158de:	bf0c      	ite	eq
 80158e0:	2301      	moveq	r3, #1
 80158e2:	2300      	movne	r3, #0
 80158e4:	b2db      	uxtb	r3, r3
 80158e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80158ee:	b2db      	uxtb	r3, r3
 80158f0:	2b22      	cmp	r3, #34	; 0x22
 80158f2:	d128      	bne.n	8015946 <HAL_UART_DMAStop+0xf4>
 80158f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d025      	beq.n	8015946 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	3314      	adds	r3, #20
 8015900:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	e853 3f00 	ldrex	r3, [r3]
 8015908:	60fb      	str	r3, [r7, #12]
   return(result);
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015910:	637b      	str	r3, [r7, #52]	; 0x34
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	681b      	ldr	r3, [r3, #0]
 8015916:	3314      	adds	r3, #20
 8015918:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801591a:	61fa      	str	r2, [r7, #28]
 801591c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801591e:	69b9      	ldr	r1, [r7, #24]
 8015920:	69fa      	ldr	r2, [r7, #28]
 8015922:	e841 2300 	strex	r3, r2, [r1]
 8015926:	617b      	str	r3, [r7, #20]
   return(result);
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2b00      	cmp	r3, #0
 801592c:	d1e5      	bne.n	80158fa <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015932:	2b00      	cmp	r3, #0
 8015934:	d004      	beq.n	8015940 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801593a:	4618      	mov	r0, r3
 801593c:	f7f1 fe9d 	bl	800767a <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8015940:	6878      	ldr	r0, [r7, #4]
 8015942:	f001 fcbf 	bl	80172c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015946:	2300      	movs	r3, #0
}
 8015948:	4618      	mov	r0, r3
 801594a:	3740      	adds	r7, #64	; 0x40
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b088      	sub	sp, #32
 8015954:	af00      	add	r7, sp, #0
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	60b9      	str	r1, [r7, #8]
 801595a:	603b      	str	r3, [r7, #0]
 801595c:	4613      	mov	r3, r2
 801595e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015966:	b2db      	uxtb	r3, r3
 8015968:	2b20      	cmp	r3, #32
 801596a:	f040 80c9 	bne.w	8015b00 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	2b00      	cmp	r3, #0
 8015972:	d002      	beq.n	801597a <HAL_UARTEx_ReceiveToIdle+0x2a>
 8015974:	88fb      	ldrh	r3, [r7, #6]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d101      	bne.n	801597e <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 801597a:	2301      	movs	r3, #1
 801597c:	e0c1      	b.n	8015b02 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015984:	2b01      	cmp	r3, #1
 8015986:	d101      	bne.n	801598c <HAL_UARTEx_ReceiveToIdle+0x3c>
 8015988:	2302      	movs	r3, #2
 801598a:	e0ba      	b.n	8015b02 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	2201      	movs	r2, #1
 8015990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2200      	movs	r2, #0
 8015998:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	2222      	movs	r2, #34	; 0x22
 801599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2201      	movs	r2, #1
 80159a6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80159a8:	f7f0 fba6 	bl	80060f8 <HAL_GetTick>
 80159ac:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	88fa      	ldrh	r2, [r7, #6]
 80159b2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	88fa      	ldrh	r2, [r7, #6]
 80159b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	689b      	ldr	r3, [r3, #8]
 80159be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80159c2:	d108      	bne.n	80159d6 <HAL_UARTEx_ReceiveToIdle+0x86>
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	691b      	ldr	r3, [r3, #16]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d104      	bne.n	80159d6 <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 80159cc:	2300      	movs	r3, #0
 80159ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80159d0:	68bb      	ldr	r3, [r7, #8]
 80159d2:	61bb      	str	r3, [r7, #24]
 80159d4:	e003      	b.n	80159de <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80159da:	2300      	movs	r3, #0
 80159dc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	2200      	movs	r2, #0
 80159e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	2200      	movs	r2, #0
 80159ea:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80159ec:	e074      	b.n	8015ad8 <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	f003 0310 	and.w	r3, r3, #16
 80159f8:	2b10      	cmp	r3, #16
 80159fa:	d114      	bne.n	8015a26 <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80159fc:	2300      	movs	r3, #0
 80159fe:	613b      	str	r3, [r7, #16]
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	613b      	str	r3, [r7, #16]
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	613b      	str	r3, [r7, #16]
 8015a10:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d005      	beq.n	8015a26 <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2220      	movs	r2, #32
 8015a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8015a22:	2300      	movs	r3, #0
 8015a24:	e06d      	b.n	8015b02 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	f003 0320 	and.w	r3, r3, #32
 8015a30:	2b20      	cmp	r3, #32
 8015a32:	d13c      	bne.n	8015aae <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8015a34:	69fb      	ldr	r3, [r7, #28]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d10c      	bne.n	8015a54 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	681b      	ldr	r3, [r3, #0]
 8015a3e:	685b      	ldr	r3, [r3, #4]
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015a4c:	69bb      	ldr	r3, [r7, #24]
 8015a4e:	3302      	adds	r3, #2
 8015a50:	61bb      	str	r3, [r7, #24]
 8015a52:	e01f      	b.n	8015a94 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	689b      	ldr	r3, [r3, #8]
 8015a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a5c:	d007      	beq.n	8015a6e <HAL_UARTEx_ReceiveToIdle+0x11e>
 8015a5e:	68fb      	ldr	r3, [r7, #12]
 8015a60:	689b      	ldr	r3, [r3, #8]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d10a      	bne.n	8015a7c <HAL_UARTEx_ReceiveToIdle+0x12c>
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	691b      	ldr	r3, [r3, #16]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d106      	bne.n	8015a7c <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	685b      	ldr	r3, [r3, #4]
 8015a74:	b2da      	uxtb	r2, r3
 8015a76:	69fb      	ldr	r3, [r7, #28]
 8015a78:	701a      	strb	r2, [r3, #0]
 8015a7a:	e008      	b.n	8015a8e <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	685b      	ldr	r3, [r3, #4]
 8015a82:	b2db      	uxtb	r3, r3
 8015a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a88:	b2da      	uxtb	r2, r3
 8015a8a:	69fb      	ldr	r3, [r7, #28]
 8015a8c:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8015a8e:	69fb      	ldr	r3, [r7, #28]
 8015a90:	3301      	adds	r3, #1
 8015a92:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	881b      	ldrh	r3, [r3, #0]
 8015a98:	3301      	adds	r3, #1
 8015a9a:	b29a      	uxth	r2, r3
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015aa0:	68fb      	ldr	r3, [r7, #12]
 8015aa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015aa4:	b29b      	uxth	r3, r3
 8015aa6:	3b01      	subs	r3, #1
 8015aa8:	b29a      	uxth	r2, r3
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ab4:	d010      	beq.n	8015ad8 <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015ab6:	f7f0 fb1f 	bl	80060f8 <HAL_GetTick>
 8015aba:	4602      	mov	r2, r0
 8015abc:	697b      	ldr	r3, [r7, #20]
 8015abe:	1ad3      	subs	r3, r2, r3
 8015ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d302      	bcc.n	8015acc <HAL_UARTEx_ReceiveToIdle+0x17c>
 8015ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d105      	bne.n	8015ad8 <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015acc:	68fb      	ldr	r3, [r7, #12]
 8015ace:	2220      	movs	r2, #32
 8015ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8015ad4:	2303      	movs	r3, #3
 8015ad6:	e014      	b.n	8015b02 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015adc:	b29b      	uxth	r3, r3
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d185      	bne.n	80159ee <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	1ad3      	subs	r3, r2, r3
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	683b      	ldr	r3, [r7, #0]
 8015af2:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8015af4:	68fb      	ldr	r3, [r7, #12]
 8015af6:	2220      	movs	r2, #32
 8015af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8015afc:	2300      	movs	r3, #0
 8015afe:	e000      	b.n	8015b02 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8015b00:	2302      	movs	r3, #2
  }
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3720      	adds	r7, #32
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b08c      	sub	sp, #48	; 0x30
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	60f8      	str	r0, [r7, #12]
 8015b12:	60b9      	str	r1, [r7, #8]
 8015b14:	4613      	mov	r3, r2
 8015b16:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015b1e:	b2db      	uxtb	r3, r3
 8015b20:	2b20      	cmp	r3, #32
 8015b22:	d152      	bne.n	8015bca <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d002      	beq.n	8015b30 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8015b2a:	88fb      	ldrh	r3, [r7, #6]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d101      	bne.n	8015b34 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8015b30:	2301      	movs	r3, #1
 8015b32:	e04b      	b.n	8015bcc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b3a:	2b01      	cmp	r3, #1
 8015b3c:	d101      	bne.n	8015b42 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8015b3e:	2302      	movs	r3, #2
 8015b40:	e044      	b.n	8015bcc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	2201      	movs	r2, #1
 8015b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8015b50:	88fb      	ldrh	r3, [r7, #6]
 8015b52:	461a      	mov	r2, r3
 8015b54:	68b9      	ldr	r1, [r7, #8]
 8015b56:	68f8      	ldr	r0, [r7, #12]
 8015b58:	f001 fab8 	bl	80170cc <UART_Start_Receive_IT>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d12c      	bne.n	8015bc4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d125      	bne.n	8015bbe <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015b72:	2300      	movs	r3, #0
 8015b74:	613b      	str	r3, [r7, #16]
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	613b      	str	r3, [r7, #16]
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	613b      	str	r3, [r7, #16]
 8015b86:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	330c      	adds	r3, #12
 8015b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b90:	69bb      	ldr	r3, [r7, #24]
 8015b92:	e853 3f00 	ldrex	r3, [r3]
 8015b96:	617b      	str	r3, [r7, #20]
   return(result);
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	f043 0310 	orr.w	r3, r3, #16
 8015b9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	330c      	adds	r3, #12
 8015ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ba8:	627a      	str	r2, [r7, #36]	; 0x24
 8015baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bac:	6a39      	ldr	r1, [r7, #32]
 8015bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015bb0:	e841 2300 	strex	r3, r2, [r1]
 8015bb4:	61fb      	str	r3, [r7, #28]
   return(result);
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d1e5      	bne.n	8015b88 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8015bbc:	e002      	b.n	8015bc4 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015bbe:	2301      	movs	r3, #1
 8015bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015bc8:	e000      	b.n	8015bcc <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8015bca:	2302      	movs	r3, #2
  }
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3730      	adds	r7, #48	; 0x30
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b08c      	sub	sp, #48	; 0x30
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	60f8      	str	r0, [r7, #12]
 8015bdc:	60b9      	str	r1, [r7, #8]
 8015bde:	4613      	mov	r3, r2
 8015be0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015be8:	b2db      	uxtb	r3, r3
 8015bea:	2b20      	cmp	r3, #32
 8015bec:	d152      	bne.n	8015c94 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d002      	beq.n	8015bfa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8015bf4:	88fb      	ldrh	r3, [r7, #6]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d101      	bne.n	8015bfe <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	e04b      	b.n	8015c96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d101      	bne.n	8015c0c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8015c08:	2302      	movs	r3, #2
 8015c0a:	e044      	b.n	8015c96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	2201      	movs	r2, #1
 8015c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2201      	movs	r2, #1
 8015c18:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8015c1a:	88fb      	ldrh	r3, [r7, #6]
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	68b9      	ldr	r1, [r7, #8]
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f001 fa8d 	bl	8017140 <UART_Start_Receive_DMA>
 8015c26:	4603      	mov	r3, r0
 8015c28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8015c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d12c      	bne.n	8015c8e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c38:	2b01      	cmp	r3, #1
 8015c3a:	d125      	bne.n	8015c88 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	613b      	str	r3, [r7, #16]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	681b      	ldr	r3, [r3, #0]
 8015c46:	613b      	str	r3, [r7, #16]
 8015c48:	68fb      	ldr	r3, [r7, #12]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	685b      	ldr	r3, [r3, #4]
 8015c4e:	613b      	str	r3, [r7, #16]
 8015c50:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	330c      	adds	r3, #12
 8015c58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	e853 3f00 	ldrex	r3, [r3]
 8015c60:	617b      	str	r3, [r7, #20]
   return(result);
 8015c62:	697b      	ldr	r3, [r7, #20]
 8015c64:	f043 0310 	orr.w	r3, r3, #16
 8015c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c6a:	68fb      	ldr	r3, [r7, #12]
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	330c      	adds	r3, #12
 8015c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015c72:	627a      	str	r2, [r7, #36]	; 0x24
 8015c74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c76:	6a39      	ldr	r1, [r7, #32]
 8015c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c7a:	e841 2300 	strex	r3, r2, [r1]
 8015c7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d1e5      	bne.n	8015c52 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8015c86:	e002      	b.n	8015c8e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8015c88:	2301      	movs	r3, #1
 8015c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8015c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015c92:	e000      	b.n	8015c96 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8015c94:	2302      	movs	r3, #2
  }
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	3730      	adds	r7, #48	; 0x30
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}

08015c9e <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8015c9e:	b580      	push	{r7, lr}
 8015ca0:	b0a0      	sub	sp, #128	; 0x80
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	330c      	adds	r3, #12
 8015cac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015cb0:	e853 3f00 	ldrex	r3, [r3]
 8015cb4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8015cb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cb8:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8015cbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	330c      	adds	r3, #12
 8015cc4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8015cc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8015cc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015ccc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015cce:	e841 2300 	strex	r3, r2, [r1]
 8015cd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8015cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d1e5      	bne.n	8015ca6 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	3314      	adds	r3, #20
 8015ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ce4:	e853 3f00 	ldrex	r3, [r3]
 8015ce8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cec:	f023 0301 	bic.w	r3, r3, #1
 8015cf0:	67bb      	str	r3, [r7, #120]	; 0x78
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	3314      	adds	r3, #20
 8015cf8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015cfa:	657a      	str	r2, [r7, #84]	; 0x54
 8015cfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015d00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d02:	e841 2300 	strex	r3, r2, [r1]
 8015d06:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d1e5      	bne.n	8015cda <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d12:	2b01      	cmp	r3, #1
 8015d14:	d119      	bne.n	8015d4a <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	330c      	adds	r3, #12
 8015d1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d20:	e853 3f00 	ldrex	r3, [r3]
 8015d24:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d28:	f023 0310 	bic.w	r3, r3, #16
 8015d2c:	677b      	str	r3, [r7, #116]	; 0x74
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	330c      	adds	r3, #12
 8015d34:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015d36:	643a      	str	r2, [r7, #64]	; 0x40
 8015d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015d3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015d3e:	e841 2300 	strex	r3, r2, [r1]
 8015d42:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d1e5      	bne.n	8015d16 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	695b      	ldr	r3, [r3, #20]
 8015d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d54:	2b80      	cmp	r3, #128	; 0x80
 8015d56:	d136      	bne.n	8015dc6 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	681b      	ldr	r3, [r3, #0]
 8015d5c:	3314      	adds	r3, #20
 8015d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d60:	6a3b      	ldr	r3, [r7, #32]
 8015d62:	e853 3f00 	ldrex	r3, [r3]
 8015d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d68:	69fb      	ldr	r3, [r7, #28]
 8015d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	3314      	adds	r3, #20
 8015d76:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d80:	e841 2300 	strex	r3, r2, [r1]
 8015d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d1e5      	bne.n	8015d58 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d018      	beq.n	8015dc6 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d98:	2200      	movs	r2, #0
 8015d9a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015da0:	4618      	mov	r0, r3
 8015da2:	f7f1 fc6a 	bl	800767a <HAL_DMA_Abort>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d00c      	beq.n	8015dc6 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7f2 f826 	bl	8007e02 <HAL_DMA_GetError>
 8015db6:	4603      	mov	r3, r0
 8015db8:	2b20      	cmp	r3, #32
 8015dba:	d104      	bne.n	8015dc6 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2210      	movs	r2, #16
 8015dc0:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8015dc2:	2303      	movs	r3, #3
 8015dc4:	e052      	b.n	8015e6c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	695b      	ldr	r3, [r3, #20]
 8015dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015dd0:	2b40      	cmp	r3, #64	; 0x40
 8015dd2:	d136      	bne.n	8015e42 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	3314      	adds	r3, #20
 8015dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	e853 3f00 	ldrex	r3, [r3]
 8015de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	681b      	ldr	r3, [r3, #0]
 8015df0:	3314      	adds	r3, #20
 8015df2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015df4:	61ba      	str	r2, [r7, #24]
 8015df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015df8:	6979      	ldr	r1, [r7, #20]
 8015dfa:	69ba      	ldr	r2, [r7, #24]
 8015dfc:	e841 2300 	strex	r3, r2, [r1]
 8015e00:	613b      	str	r3, [r7, #16]
   return(result);
 8015e02:	693b      	ldr	r3, [r7, #16]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d1e5      	bne.n	8015dd4 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d018      	beq.n	8015e42 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e14:	2200      	movs	r2, #0
 8015e16:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f7f1 fc2c 	bl	800767a <HAL_DMA_Abort>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00c      	beq.n	8015e42 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7f1 ffe8 	bl	8007e02 <HAL_DMA_GetError>
 8015e32:	4603      	mov	r3, r0
 8015e34:	2b20      	cmp	r3, #32
 8015e36:	d104      	bne.n	8015e42 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2210      	movs	r2, #16
 8015e3c:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8015e3e:	2303      	movs	r3, #3
 8015e40:	e014      	b.n	8015e6c <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2200      	movs	r2, #0
 8015e46:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	2200      	movs	r2, #0
 8015e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2220      	movs	r2, #32
 8015e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2220      	movs	r2, #32
 8015e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2200      	movs	r2, #0
 8015e68:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3780      	adds	r7, #128	; 0x80
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}

08015e74 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b08e      	sub	sp, #56	; 0x38
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	330c      	adds	r3, #12
 8015e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	e853 3f00 	ldrex	r3, [r3]
 8015e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015e8c:	69fb      	ldr	r3, [r7, #28]
 8015e8e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8015e92:	637b      	str	r3, [r7, #52]	; 0x34
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	330c      	adds	r3, #12
 8015e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015e9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ea0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ea4:	e841 2300 	strex	r3, r2, [r1]
 8015ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d1e5      	bne.n	8015e7c <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	695b      	ldr	r3, [r3, #20]
 8015eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015eba:	2b80      	cmp	r3, #128	; 0x80
 8015ebc:	d136      	bne.n	8015f2c <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	3314      	adds	r3, #20
 8015ec4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	e853 3f00 	ldrex	r3, [r3]
 8015ecc:	60bb      	str	r3, [r7, #8]
   return(result);
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015ed4:	633b      	str	r3, [r7, #48]	; 0x30
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	3314      	adds	r3, #20
 8015edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ede:	61ba      	str	r2, [r7, #24]
 8015ee0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ee2:	6979      	ldr	r1, [r7, #20]
 8015ee4:	69ba      	ldr	r2, [r7, #24]
 8015ee6:	e841 2300 	strex	r3, r2, [r1]
 8015eea:	613b      	str	r3, [r7, #16]
   return(result);
 8015eec:	693b      	ldr	r3, [r7, #16]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d1e5      	bne.n	8015ebe <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d018      	beq.n	8015f2c <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015efe:	2200      	movs	r2, #0
 8015f00:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7f1 fbb7 	bl	800767a <HAL_DMA_Abort>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00c      	beq.n	8015f2c <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7f1 ff73 	bl	8007e02 <HAL_DMA_GetError>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b20      	cmp	r3, #32
 8015f20:	d104      	bne.n	8015f2c <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2210      	movs	r2, #16
 8015f26:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8015f28:	2303      	movs	r3, #3
 8015f2a:	e007      	b.n	8015f3c <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2220      	movs	r2, #32
 8015f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8015f3a:	2300      	movs	r3, #0
}
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	3738      	adds	r7, #56	; 0x38
 8015f40:	46bd      	mov	sp, r7
 8015f42:	bd80      	pop	{r7, pc}

08015f44 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b09a      	sub	sp, #104	; 0x68
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	330c      	adds	r3, #12
 8015f52:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f56:	e853 3f00 	ldrex	r3, [r3]
 8015f5a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8015f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015f5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8015f62:	667b      	str	r3, [r7, #100]	; 0x64
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	330c      	adds	r3, #12
 8015f6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015f6c:	657a      	str	r2, [r7, #84]	; 0x54
 8015f6e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f74:	e841 2300 	strex	r3, r2, [r1]
 8015f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d1e5      	bne.n	8015f4c <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	3314      	adds	r3, #20
 8015f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f8a:	e853 3f00 	ldrex	r3, [r3]
 8015f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f92:	f023 0301 	bic.w	r3, r3, #1
 8015f96:	663b      	str	r3, [r7, #96]	; 0x60
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	3314      	adds	r3, #20
 8015f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fa0:	643a      	str	r2, [r7, #64]	; 0x40
 8015fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015fa8:	e841 2300 	strex	r3, r2, [r1]
 8015fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d1e5      	bne.n	8015f80 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015fb8:	2b01      	cmp	r3, #1
 8015fba:	d119      	bne.n	8015ff0 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	330c      	adds	r3, #12
 8015fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fc4:	6a3b      	ldr	r3, [r7, #32]
 8015fc6:	e853 3f00 	ldrex	r3, [r3]
 8015fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	f023 0310 	bic.w	r3, r3, #16
 8015fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	330c      	adds	r3, #12
 8015fda:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015fdc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8015fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fe4:	e841 2300 	strex	r3, r2, [r1]
 8015fe8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d1e5      	bne.n	8015fbc <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	695b      	ldr	r3, [r3, #20]
 8015ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ffa:	2b40      	cmp	r3, #64	; 0x40
 8015ffc:	d136      	bne.n	801606c <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	3314      	adds	r3, #20
 8016004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	e853 3f00 	ldrex	r3, [r3]
 801600c:	60bb      	str	r3, [r7, #8]
   return(result);
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016014:	65bb      	str	r3, [r7, #88]	; 0x58
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	3314      	adds	r3, #20
 801601c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801601e:	61ba      	str	r2, [r7, #24]
 8016020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016022:	6979      	ldr	r1, [r7, #20]
 8016024:	69ba      	ldr	r2, [r7, #24]
 8016026:	e841 2300 	strex	r3, r2, [r1]
 801602a:	613b      	str	r3, [r7, #16]
   return(result);
 801602c:	693b      	ldr	r3, [r7, #16]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d1e5      	bne.n	8015ffe <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016036:	2b00      	cmp	r3, #0
 8016038:	d018      	beq.n	801606c <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801603e:	2200      	movs	r2, #0
 8016040:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016046:	4618      	mov	r0, r3
 8016048:	f7f1 fb17 	bl	800767a <HAL_DMA_Abort>
 801604c:	4603      	mov	r3, r0
 801604e:	2b00      	cmp	r3, #0
 8016050:	d00c      	beq.n	801606c <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016056:	4618      	mov	r0, r3
 8016058:	f7f1 fed3 	bl	8007e02 <HAL_DMA_GetError>
 801605c:	4603      	mov	r3, r0
 801605e:	2b20      	cmp	r3, #32
 8016060:	d104      	bne.n	801606c <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2210      	movs	r2, #16
 8016066:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016068:	2303      	movs	r3, #3
 801606a:	e00a      	b.n	8016082 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	2200      	movs	r2, #0
 8016070:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	2220      	movs	r2, #32
 8016076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	2200      	movs	r2, #0
 801607e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8016080:	2300      	movs	r3, #0
}
 8016082:	4618      	mov	r0, r3
 8016084:	3768      	adds	r7, #104	; 0x68
 8016086:	46bd      	mov	sp, r7
 8016088:	bd80      	pop	{r7, pc}

0801608a <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 801608a:	b580      	push	{r7, lr}
 801608c:	b0a2      	sub	sp, #136	; 0x88
 801608e:	af00      	add	r7, sp, #0
 8016090:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8016092:	2301      	movs	r3, #1
 8016094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	330c      	adds	r3, #12
 801609e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80160a2:	e853 3f00 	ldrex	r3, [r3]
 80160a6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80160a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80160aa:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80160ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	330c      	adds	r3, #12
 80160b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80160bc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80160be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80160c2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80160c4:	e841 2300 	strex	r3, r2, [r1]
 80160c8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80160ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d1e3      	bne.n	8016098 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	3314      	adds	r3, #20
 80160d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160da:	e853 3f00 	ldrex	r3, [r3]
 80160de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80160e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80160e2:	f023 0301 	bic.w	r3, r3, #1
 80160e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	3314      	adds	r3, #20
 80160ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80160f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80160f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80160f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80160f8:	e841 2300 	strex	r3, r2, [r1]
 80160fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80160fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016100:	2b00      	cmp	r3, #0
 8016102:	d1e5      	bne.n	80160d0 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016108:	2b01      	cmp	r3, #1
 801610a:	d119      	bne.n	8016140 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	330c      	adds	r3, #12
 8016112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016116:	e853 3f00 	ldrex	r3, [r3]
 801611a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801611c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801611e:	f023 0310 	bic.w	r3, r3, #16
 8016122:	67bb      	str	r3, [r7, #120]	; 0x78
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	330c      	adds	r3, #12
 801612a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801612c:	647a      	str	r2, [r7, #68]	; 0x44
 801612e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016130:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016134:	e841 2300 	strex	r3, r2, [r1]
 8016138:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801613a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1e5      	bne.n	801610c <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016144:	2b00      	cmp	r3, #0
 8016146:	d00f      	beq.n	8016168 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	695b      	ldr	r3, [r3, #20]
 801614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016152:	2b80      	cmp	r3, #128	; 0x80
 8016154:	d104      	bne.n	8016160 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801615a:	4a54      	ldr	r2, [pc, #336]	; (80162ac <HAL_UART_Abort_IT+0x222>)
 801615c:	651a      	str	r2, [r3, #80]	; 0x50
 801615e:	e003      	b.n	8016168 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016164:	2200      	movs	r2, #0
 8016166:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801616c:	2b00      	cmp	r3, #0
 801616e:	d00f      	beq.n	8016190 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	695b      	ldr	r3, [r3, #20]
 8016176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801617a:	2b40      	cmp	r3, #64	; 0x40
 801617c:	d104      	bne.n	8016188 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016182:	4a4b      	ldr	r2, [pc, #300]	; (80162b0 <HAL_UART_Abort_IT+0x226>)
 8016184:	651a      	str	r2, [r3, #80]	; 0x50
 8016186:	e003      	b.n	8016190 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801618c:	2200      	movs	r2, #0
 801618e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	695b      	ldr	r3, [r3, #20]
 8016196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801619a:	2b80      	cmp	r3, #128	; 0x80
 801619c:	d12d      	bne.n	80161fa <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	3314      	adds	r3, #20
 80161a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161a8:	e853 3f00 	ldrex	r3, [r3]
 80161ac:	623b      	str	r3, [r7, #32]
   return(result);
 80161ae:	6a3b      	ldr	r3, [r7, #32]
 80161b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80161b4:	677b      	str	r3, [r7, #116]	; 0x74
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	3314      	adds	r3, #20
 80161bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80161be:	633a      	str	r2, [r7, #48]	; 0x30
 80161c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80161c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161c6:	e841 2300 	strex	r3, r2, [r1]
 80161ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80161cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d1e5      	bne.n	801619e <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161d6:	2b00      	cmp	r3, #0
 80161d8:	d00f      	beq.n	80161fa <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161de:	4618      	mov	r0, r3
 80161e0:	f7f1 fabb 	bl	800775a <HAL_DMA_Abort_IT>
 80161e4:	4603      	mov	r3, r0
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d004      	beq.n	80161f4 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161ee:	2200      	movs	r2, #0
 80161f0:	651a      	str	r2, [r3, #80]	; 0x50
 80161f2:	e002      	b.n	80161fa <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 80161f4:	2300      	movs	r3, #0
 80161f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	695b      	ldr	r3, [r3, #20]
 8016200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016204:	2b40      	cmp	r3, #64	; 0x40
 8016206:	d130      	bne.n	801626a <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	3314      	adds	r3, #20
 801620e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016210:	693b      	ldr	r3, [r7, #16]
 8016212:	e853 3f00 	ldrex	r3, [r3]
 8016216:	60fb      	str	r3, [r7, #12]
   return(result);
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801621e:	673b      	str	r3, [r7, #112]	; 0x70
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	681b      	ldr	r3, [r3, #0]
 8016224:	3314      	adds	r3, #20
 8016226:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016228:	61fa      	str	r2, [r7, #28]
 801622a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801622c:	69b9      	ldr	r1, [r7, #24]
 801622e:	69fa      	ldr	r2, [r7, #28]
 8016230:	e841 2300 	strex	r3, r2, [r1]
 8016234:	617b      	str	r3, [r7, #20]
   return(result);
 8016236:	697b      	ldr	r3, [r7, #20]
 8016238:	2b00      	cmp	r3, #0
 801623a:	d1e5      	bne.n	8016208 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016240:	2b00      	cmp	r3, #0
 8016242:	d012      	beq.n	801626a <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016248:	4618      	mov	r0, r3
 801624a:	f7f1 fa86 	bl	800775a <HAL_DMA_Abort_IT>
 801624e:	4603      	mov	r3, r0
 8016250:	2b00      	cmp	r3, #0
 8016252:	d007      	beq.n	8016264 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016258:	2200      	movs	r2, #0
 801625a:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 801625c:	2301      	movs	r3, #1
 801625e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016262:	e002      	b.n	801626a <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8016264:	2300      	movs	r3, #0
 8016266:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 801626a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801626e:	2b01      	cmp	r3, #1
 8016270:	d116      	bne.n	80162a0 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	2200      	movs	r2, #0
 8016276:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2200      	movs	r2, #0
 8016282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2220      	movs	r2, #32
 8016288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	2220      	movs	r2, #32
 8016290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 801629a:	6878      	ldr	r0, [r7, #4]
 801629c:	f000 fbe5 	bl	8016a6a <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80162a0:	2300      	movs	r3, #0
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3788      	adds	r7, #136	; 0x88
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	080173b3 	.word	0x080173b3
 80162b0:	08017413 	.word	0x08017413

080162b4 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b08e      	sub	sp, #56	; 0x38
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	330c      	adds	r3, #12
 80162c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162c4:	6a3b      	ldr	r3, [r7, #32]
 80162c6:	e853 3f00 	ldrex	r3, [r3]
 80162ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80162cc:	69fb      	ldr	r3, [r7, #28]
 80162ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80162d2:	637b      	str	r3, [r7, #52]	; 0x34
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	330c      	adds	r3, #12
 80162da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80162de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162e4:	e841 2300 	strex	r3, r2, [r1]
 80162e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80162ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1e5      	bne.n	80162bc <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	695b      	ldr	r3, [r3, #20]
 80162f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80162fa:	2b80      	cmp	r3, #128	; 0x80
 80162fc:	d13c      	bne.n	8016378 <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	3314      	adds	r3, #20
 8016304:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	e853 3f00 	ldrex	r3, [r3]
 801630c:	60bb      	str	r3, [r7, #8]
   return(result);
 801630e:	68bb      	ldr	r3, [r7, #8]
 8016310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016314:	633b      	str	r3, [r7, #48]	; 0x30
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	3314      	adds	r3, #20
 801631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801631e:	61ba      	str	r2, [r7, #24]
 8016320:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016322:	6979      	ldr	r1, [r7, #20]
 8016324:	69ba      	ldr	r2, [r7, #24]
 8016326:	e841 2300 	strex	r3, r2, [r1]
 801632a:	613b      	str	r3, [r7, #16]
   return(result);
 801632c:	693b      	ldr	r3, [r7, #16]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d1e5      	bne.n	80162fe <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016336:	2b00      	cmp	r3, #0
 8016338:	d013      	beq.n	8016362 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801633e:	4a16      	ldr	r2, [pc, #88]	; (8016398 <HAL_UART_AbortTransmit_IT+0xe4>)
 8016340:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016346:	4618      	mov	r0, r3
 8016348:	f7f1 fa07 	bl	800775a <HAL_DMA_Abort_IT>
 801634c:	4603      	mov	r3, r0
 801634e:	2b00      	cmp	r3, #0
 8016350:	d01c      	beq.n	801638c <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016358:	687a      	ldr	r2, [r7, #4]
 801635a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801635c:	4610      	mov	r0, r2
 801635e:	4798      	blx	r3
 8016360:	e014      	b.n	801638c <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2200      	movs	r2, #0
 8016366:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	2220      	movs	r2, #32
 801636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 8016370:	6878      	ldr	r0, [r7, #4]
 8016372:	f000 fb84 	bl	8016a7e <HAL_UART_AbortTransmitCpltCallback>
 8016376:	e009      	b.n	801638c <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2200      	movs	r2, #0
 801637c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	2220      	movs	r2, #32
 8016382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f000 fb79 	bl	8016a7e <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 801638c:	2300      	movs	r3, #0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3738      	adds	r7, #56	; 0x38
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	08017473 	.word	0x08017473

0801639c <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b09a      	sub	sp, #104	; 0x68
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	330c      	adds	r3, #12
 80163aa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80163ae:	e853 3f00 	ldrex	r3, [r3]
 80163b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80163b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80163ba:	667b      	str	r3, [r7, #100]	; 0x64
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	330c      	adds	r3, #12
 80163c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80163c4:	657a      	str	r2, [r7, #84]	; 0x54
 80163c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80163ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80163cc:	e841 2300 	strex	r3, r2, [r1]
 80163d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80163d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d1e5      	bne.n	80163a4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	3314      	adds	r3, #20
 80163de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163e2:	e853 3f00 	ldrex	r3, [r3]
 80163e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80163e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ea:	f023 0301 	bic.w	r3, r3, #1
 80163ee:	663b      	str	r3, [r7, #96]	; 0x60
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	3314      	adds	r3, #20
 80163f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80163f8:	643a      	str	r2, [r7, #64]	; 0x40
 80163fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80163fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016400:	e841 2300 	strex	r3, r2, [r1]
 8016404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016408:	2b00      	cmp	r3, #0
 801640a:	d1e5      	bne.n	80163d8 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016410:	2b01      	cmp	r3, #1
 8016412:	d119      	bne.n	8016448 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	681b      	ldr	r3, [r3, #0]
 8016418:	330c      	adds	r3, #12
 801641a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801641c:	6a3b      	ldr	r3, [r7, #32]
 801641e:	e853 3f00 	ldrex	r3, [r3]
 8016422:	61fb      	str	r3, [r7, #28]
   return(result);
 8016424:	69fb      	ldr	r3, [r7, #28]
 8016426:	f023 0310 	bic.w	r3, r3, #16
 801642a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	330c      	adds	r3, #12
 8016432:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016434:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016436:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801643a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801643c:	e841 2300 	strex	r3, r2, [r1]
 8016440:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016444:	2b00      	cmp	r3, #0
 8016446:	d1e5      	bne.n	8016414 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	695b      	ldr	r3, [r3, #20]
 801644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016452:	2b40      	cmp	r3, #64	; 0x40
 8016454:	d13f      	bne.n	80164d6 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	3314      	adds	r3, #20
 801645c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	e853 3f00 	ldrex	r3, [r3]
 8016464:	60bb      	str	r3, [r7, #8]
   return(result);
 8016466:	68bb      	ldr	r3, [r7, #8]
 8016468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801646c:	65bb      	str	r3, [r7, #88]	; 0x58
 801646e:	687b      	ldr	r3, [r7, #4]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	3314      	adds	r3, #20
 8016474:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016476:	61ba      	str	r2, [r7, #24]
 8016478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801647a:	6979      	ldr	r1, [r7, #20]
 801647c:	69ba      	ldr	r2, [r7, #24]
 801647e:	e841 2300 	strex	r3, r2, [r1]
 8016482:	613b      	str	r3, [r7, #16]
   return(result);
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d1e5      	bne.n	8016456 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801648e:	2b00      	cmp	r3, #0
 8016490:	d013      	beq.n	80164ba <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016496:	4a19      	ldr	r2, [pc, #100]	; (80164fc <HAL_UART_AbortReceive_IT+0x160>)
 8016498:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801649e:	4618      	mov	r0, r3
 80164a0:	f7f1 f95b 	bl	800775a <HAL_DMA_Abort_IT>
 80164a4:	4603      	mov	r3, r0
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d022      	beq.n	80164f0 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164b0:	687a      	ldr	r2, [r7, #4]
 80164b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80164b4:	4610      	mov	r0, r2
 80164b6:	4798      	blx	r3
 80164b8:	e01a      	b.n	80164f0 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2200      	movs	r2, #0
 80164be:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2220      	movs	r2, #32
 80164c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	2200      	movs	r2, #0
 80164cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 80164ce:	6878      	ldr	r0, [r7, #4]
 80164d0:	f000 fadf 	bl	8016a92 <HAL_UART_AbortReceiveCpltCallback>
 80164d4:	e00c      	b.n	80164f0 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	2200      	movs	r2, #0
 80164da:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	2220      	movs	r2, #32
 80164e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2200      	movs	r2, #0
 80164e8:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	f000 fad1 	bl	8016a92 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80164f0:	2300      	movs	r3, #0
}
 80164f2:	4618      	mov	r0, r3
 80164f4:	3768      	adds	r7, #104	; 0x68
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	0801749d 	.word	0x0801749d

08016500 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b0ba      	sub	sp, #232	; 0xe8
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	681b      	ldr	r3, [r3, #0]
 8016516:	68db      	ldr	r3, [r3, #12]
 8016518:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	695b      	ldr	r3, [r3, #20]
 8016522:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016526:	2300      	movs	r3, #0
 8016528:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 801652c:	2300      	movs	r3, #0
 801652e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016536:	f003 030f 	and.w	r3, r3, #15
 801653a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 801653e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016542:	2b00      	cmp	r3, #0
 8016544:	d10f      	bne.n	8016566 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801654a:	f003 0320 	and.w	r3, r3, #32
 801654e:	2b00      	cmp	r3, #0
 8016550:	d009      	beq.n	8016566 <HAL_UART_IRQHandler+0x66>
 8016552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016556:	f003 0320 	and.w	r3, r3, #32
 801655a:	2b00      	cmp	r3, #0
 801655c:	d003      	beq.n	8016566 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 801655e:	6878      	ldr	r0, [r7, #4]
 8016560:	f001 f81c 	bl	801759c <UART_Receive_IT>
      return;
 8016564:	e256      	b.n	8016a14 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016566:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801656a:	2b00      	cmp	r3, #0
 801656c:	f000 80de 	beq.w	801672c <HAL_UART_IRQHandler+0x22c>
 8016570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016574:	f003 0301 	and.w	r3, r3, #1
 8016578:	2b00      	cmp	r3, #0
 801657a:	d106      	bne.n	801658a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016580:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016584:	2b00      	cmp	r3, #0
 8016586:	f000 80d1 	beq.w	801672c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801658a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801658e:	f003 0301 	and.w	r3, r3, #1
 8016592:	2b00      	cmp	r3, #0
 8016594:	d00b      	beq.n	80165ae <HAL_UART_IRQHandler+0xae>
 8016596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d005      	beq.n	80165ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165a6:	f043 0201 	orr.w	r2, r3, #1
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80165ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165b2:	f003 0304 	and.w	r3, r3, #4
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d00b      	beq.n	80165d2 <HAL_UART_IRQHandler+0xd2>
 80165ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80165be:	f003 0301 	and.w	r3, r3, #1
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d005      	beq.n	80165d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ca:	f043 0202 	orr.w	r2, r3, #2
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80165d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165d6:	f003 0302 	and.w	r3, r3, #2
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d00b      	beq.n	80165f6 <HAL_UART_IRQHandler+0xf6>
 80165de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80165e2:	f003 0301 	and.w	r3, r3, #1
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d005      	beq.n	80165f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80165ee:	f043 0204 	orr.w	r2, r3, #4
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80165f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80165fa:	f003 0308 	and.w	r3, r3, #8
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d011      	beq.n	8016626 <HAL_UART_IRQHandler+0x126>
 8016602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016606:	f003 0320 	and.w	r3, r3, #32
 801660a:	2b00      	cmp	r3, #0
 801660c:	d105      	bne.n	801661a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 801660e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016612:	f003 0301 	and.w	r3, r3, #1
 8016616:	2b00      	cmp	r3, #0
 8016618:	d005      	beq.n	8016626 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801661e:	f043 0208 	orr.w	r2, r3, #8
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801662a:	2b00      	cmp	r3, #0
 801662c:	f000 81ed 	beq.w	8016a0a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016634:	f003 0320 	and.w	r3, r3, #32
 8016638:	2b00      	cmp	r3, #0
 801663a:	d008      	beq.n	801664e <HAL_UART_IRQHandler+0x14e>
 801663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016640:	f003 0320 	and.w	r3, r3, #32
 8016644:	2b00      	cmp	r3, #0
 8016646:	d002      	beq.n	801664e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016648:	6878      	ldr	r0, [r7, #4]
 801664a:	f000 ffa7 	bl	801759c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	695b      	ldr	r3, [r3, #20]
 8016654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016658:	2b40      	cmp	r3, #64	; 0x40
 801665a:	bf0c      	ite	eq
 801665c:	2301      	moveq	r3, #1
 801665e:	2300      	movne	r3, #0
 8016660:	b2db      	uxtb	r3, r3
 8016662:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801666a:	f003 0308 	and.w	r3, r3, #8
 801666e:	2b00      	cmp	r3, #0
 8016670:	d103      	bne.n	801667a <HAL_UART_IRQHandler+0x17a>
 8016672:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016676:	2b00      	cmp	r3, #0
 8016678:	d04f      	beq.n	801671a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 fe22 	bl	80172c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	695b      	ldr	r3, [r3, #20]
 8016686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801668a:	2b40      	cmp	r3, #64	; 0x40
 801668c:	d141      	bne.n	8016712 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	3314      	adds	r3, #20
 8016694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016698:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801669c:	e853 3f00 	ldrex	r3, [r3]
 80166a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80166a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80166ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	681b      	ldr	r3, [r3, #0]
 80166b4:	3314      	adds	r3, #20
 80166b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80166ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80166be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80166c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80166ca:	e841 2300 	strex	r3, r2, [r1]
 80166ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80166d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d1d9      	bne.n	801668e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d013      	beq.n	801670a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166e6:	4a7d      	ldr	r2, [pc, #500]	; (80168dc <HAL_UART_IRQHandler+0x3dc>)
 80166e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f1 f833 	bl	800775a <HAL_DMA_Abort_IT>
 80166f4:	4603      	mov	r3, r0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d016      	beq.n	8016728 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016700:	687a      	ldr	r2, [r7, #4]
 8016702:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016704:	4610      	mov	r0, r2
 8016706:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016708:	e00e      	b.n	8016728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 f9a3 	bl	8016a56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016710:	e00a      	b.n	8016728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f000 f99f 	bl	8016a56 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016718:	e006      	b.n	8016728 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f000 f99b 	bl	8016a56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2200      	movs	r2, #0
 8016724:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016726:	e170      	b.n	8016a0a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016728:	bf00      	nop
    return;
 801672a:	e16e      	b.n	8016a0a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016730:	2b01      	cmp	r3, #1
 8016732:	f040 814a 	bne.w	80169ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801673a:	f003 0310 	and.w	r3, r3, #16
 801673e:	2b00      	cmp	r3, #0
 8016740:	f000 8143 	beq.w	80169ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016748:	f003 0310 	and.w	r3, r3, #16
 801674c:	2b00      	cmp	r3, #0
 801674e:	f000 813c 	beq.w	80169ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016752:	2300      	movs	r3, #0
 8016754:	60bb      	str	r3, [r7, #8]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	60bb      	str	r3, [r7, #8]
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	685b      	ldr	r3, [r3, #4]
 8016764:	60bb      	str	r3, [r7, #8]
 8016766:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	695b      	ldr	r3, [r3, #20]
 801676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016772:	2b40      	cmp	r3, #64	; 0x40
 8016774:	f040 80b4 	bne.w	80168e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	685b      	ldr	r3, [r3, #4]
 8016780:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016784:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016788:	2b00      	cmp	r3, #0
 801678a:	f000 8140 	beq.w	8016a0e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016796:	429a      	cmp	r2, r3
 8016798:	f080 8139 	bcs.w	8016a0e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80167a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167a8:	69db      	ldr	r3, [r3, #28]
 80167aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167ae:	f000 8088 	beq.w	80168c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	330c      	adds	r3, #12
 80167b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80167c0:	e853 3f00 	ldrex	r3, [r3]
 80167c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80167c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80167cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80167d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	330c      	adds	r3, #12
 80167da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80167de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80167e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80167ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80167ee:	e841 2300 	strex	r3, r2, [r1]
 80167f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80167f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d1d9      	bne.n	80167b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	681b      	ldr	r3, [r3, #0]
 8016802:	3314      	adds	r3, #20
 8016804:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016806:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016808:	e853 3f00 	ldrex	r3, [r3]
 801680c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801680e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016810:	f023 0301 	bic.w	r3, r3, #1
 8016814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	3314      	adds	r3, #20
 801681e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016826:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016828:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801682a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801682e:	e841 2300 	strex	r3, r2, [r1]
 8016832:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016836:	2b00      	cmp	r3, #0
 8016838:	d1e1      	bne.n	80167fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	3314      	adds	r3, #20
 8016840:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016844:	e853 3f00 	ldrex	r3, [r3]
 8016848:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801684a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801684c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016850:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	3314      	adds	r3, #20
 801685a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801685e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016860:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016862:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016864:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016866:	e841 2300 	strex	r3, r2, [r1]
 801686a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801686c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801686e:	2b00      	cmp	r3, #0
 8016870:	d1e3      	bne.n	801683a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	2220      	movs	r2, #32
 8016876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	2200      	movs	r2, #0
 801687e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	330c      	adds	r3, #12
 8016886:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801688a:	e853 3f00 	ldrex	r3, [r3]
 801688e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016892:	f023 0310 	bic.w	r3, r3, #16
 8016896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	330c      	adds	r3, #12
 80168a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80168a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80168a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80168aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80168ac:	e841 2300 	strex	r3, r2, [r1]
 80168b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80168b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1e3      	bne.n	8016880 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168bc:	4618      	mov	r0, r3
 80168be:	f7f0 fedc 	bl	800767a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80168ca:	b29b      	uxth	r3, r3
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	4619      	mov	r1, r3
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f000 f8e7 	bl	8016aa6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80168d8:	e099      	b.n	8016a0e <HAL_UART_IRQHandler+0x50e>
 80168da:	bf00      	nop
 80168dc:	0801738b 	.word	0x0801738b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	1ad3      	subs	r3, r2, r3
 80168ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	f000 808b 	beq.w	8016a12 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80168fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016900:	2b00      	cmp	r3, #0
 8016902:	f000 8086 	beq.w	8016a12 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	330c      	adds	r3, #12
 801690c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016910:	e853 3f00 	ldrex	r3, [r3]
 8016914:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016918:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801691c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	330c      	adds	r3, #12
 8016926:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801692a:	647a      	str	r2, [r7, #68]	; 0x44
 801692c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801692e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016930:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016932:	e841 2300 	strex	r3, r2, [r1]
 8016936:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801693a:	2b00      	cmp	r3, #0
 801693c:	d1e3      	bne.n	8016906 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	3314      	adds	r3, #20
 8016944:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016948:	e853 3f00 	ldrex	r3, [r3]
 801694c:	623b      	str	r3, [r7, #32]
   return(result);
 801694e:	6a3b      	ldr	r3, [r7, #32]
 8016950:	f023 0301 	bic.w	r3, r3, #1
 8016954:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	3314      	adds	r3, #20
 801695e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016962:	633a      	str	r2, [r7, #48]	; 0x30
 8016964:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016966:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801696a:	e841 2300 	strex	r3, r2, [r1]
 801696e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016972:	2b00      	cmp	r3, #0
 8016974:	d1e3      	bne.n	801693e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2220      	movs	r2, #32
 801697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	2200      	movs	r2, #0
 8016982:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	330c      	adds	r3, #12
 801698a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801698c:	693b      	ldr	r3, [r7, #16]
 801698e:	e853 3f00 	ldrex	r3, [r3]
 8016992:	60fb      	str	r3, [r7, #12]
   return(result);
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	f023 0310 	bic.w	r3, r3, #16
 801699a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	681b      	ldr	r3, [r3, #0]
 80169a2:	330c      	adds	r3, #12
 80169a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80169a8:	61fa      	str	r2, [r7, #28]
 80169aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169ac:	69b9      	ldr	r1, [r7, #24]
 80169ae:	69fa      	ldr	r2, [r7, #28]
 80169b0:	e841 2300 	strex	r3, r2, [r1]
 80169b4:	617b      	str	r3, [r7, #20]
   return(result);
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d1e3      	bne.n	8016984 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80169bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80169c0:	4619      	mov	r1, r3
 80169c2:	6878      	ldr	r0, [r7, #4]
 80169c4:	f000 f86f 	bl	8016aa6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80169c8:	e023      	b.n	8016a12 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80169ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d009      	beq.n	80169ea <HAL_UART_IRQHandler+0x4ea>
 80169d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80169da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d003      	beq.n	80169ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80169e2:	6878      	ldr	r0, [r7, #4]
 80169e4:	f000 fd72 	bl	80174cc <UART_Transmit_IT>
    return;
 80169e8:	e014      	b.n	8016a14 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80169ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80169ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00e      	beq.n	8016a14 <HAL_UART_IRQHandler+0x514>
 80169f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80169fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d008      	beq.n	8016a14 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 fdb2 	bl	801756c <UART_EndTransmit_IT>
    return;
 8016a08:	e004      	b.n	8016a14 <HAL_UART_IRQHandler+0x514>
    return;
 8016a0a:	bf00      	nop
 8016a0c:	e002      	b.n	8016a14 <HAL_UART_IRQHandler+0x514>
      return;
 8016a0e:	bf00      	nop
 8016a10:	e000      	b.n	8016a14 <HAL_UART_IRQHandler+0x514>
      return;
 8016a12:	bf00      	nop
  }
}
 8016a14:	37e8      	adds	r7, #232	; 0xe8
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}

08016a1a <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016a1a:	b480      	push	{r7}
 8016a1c:	b083      	sub	sp, #12
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016a22:	bf00      	nop
 8016a24:	370c      	adds	r7, #12
 8016a26:	46bd      	mov	sp, r7
 8016a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a2c:	4770      	bx	lr

08016a2e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016a2e:	b480      	push	{r7}
 8016a30:	b083      	sub	sp, #12
 8016a32:	af00      	add	r7, sp, #0
 8016a34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8016a36:	bf00      	nop
 8016a38:	370c      	adds	r7, #12
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr

08016a42 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016a42:	b480      	push	{r7}
 8016a44:	b083      	sub	sp, #12
 8016a46:	af00      	add	r7, sp, #0
 8016a48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8016a4a:	bf00      	nop
 8016a4c:	370c      	adds	r7, #12
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a54:	4770      	bx	lr

08016a56 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016a56:	b480      	push	{r7}
 8016a58:	b083      	sub	sp, #12
 8016a5a:	af00      	add	r7, sp, #0
 8016a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016a5e:	bf00      	nop
 8016a60:	370c      	adds	r7, #12
 8016a62:	46bd      	mov	sp, r7
 8016a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a68:	4770      	bx	lr

08016a6a <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016a6a:	b480      	push	{r7}
 8016a6c:	b083      	sub	sp, #12
 8016a6e:	af00      	add	r7, sp, #0
 8016a70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016a72:	bf00      	nop
 8016a74:	370c      	adds	r7, #12
 8016a76:	46bd      	mov	sp, r7
 8016a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a7c:	4770      	bx	lr

08016a7e <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016a7e:	b480      	push	{r7}
 8016a80:	b083      	sub	sp, #12
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016a86:	bf00      	nop
 8016a88:	370c      	adds	r7, #12
 8016a8a:	46bd      	mov	sp, r7
 8016a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a90:	4770      	bx	lr

08016a92 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016a92:	b480      	push	{r7}
 8016a94:	b083      	sub	sp, #12
 8016a96:	af00      	add	r7, sp, #0
 8016a98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016a9a:	bf00      	nop
 8016a9c:	370c      	adds	r7, #12
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa4:	4770      	bx	lr

08016aa6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016aa6:	b480      	push	{r7}
 8016aa8:	b083      	sub	sp, #12
 8016aaa:	af00      	add	r7, sp, #0
 8016aac:	6078      	str	r0, [r7, #4]
 8016aae:	460b      	mov	r3, r1
 8016ab0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016ab2:	bf00      	nop
 8016ab4:	370c      	adds	r7, #12
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abc:	4770      	bx	lr

08016abe <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8016abe:	b480      	push	{r7}
 8016ac0:	b089      	sub	sp, #36	; 0x24
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016acc:	2b01      	cmp	r3, #1
 8016ace:	d101      	bne.n	8016ad4 <HAL_LIN_SendBreak+0x16>
 8016ad0:	2302      	movs	r3, #2
 8016ad2:	e02a      	b.n	8016b2a <HAL_LIN_SendBreak+0x6c>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2201      	movs	r2, #1
 8016ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2224      	movs	r2, #36	; 0x24
 8016ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	330c      	adds	r3, #12
 8016aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016aec:	68fb      	ldr	r3, [r7, #12]
 8016aee:	e853 3f00 	ldrex	r3, [r3]
 8016af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8016af4:	68bb      	ldr	r3, [r7, #8]
 8016af6:	f043 0301 	orr.w	r3, r3, #1
 8016afa:	61fb      	str	r3, [r7, #28]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	330c      	adds	r3, #12
 8016b02:	69fa      	ldr	r2, [r7, #28]
 8016b04:	61ba      	str	r2, [r7, #24]
 8016b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b08:	6979      	ldr	r1, [r7, #20]
 8016b0a:	69ba      	ldr	r2, [r7, #24]
 8016b0c:	e841 2300 	strex	r3, r2, [r1]
 8016b10:	613b      	str	r3, [r7, #16]
   return(result);
 8016b12:	693b      	ldr	r3, [r7, #16]
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d1e5      	bne.n	8016ae4 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2220      	movs	r2, #32
 8016b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2200      	movs	r2, #0
 8016b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016b28:	2300      	movs	r3, #0
}
 8016b2a:	4618      	mov	r0, r3
 8016b2c:	3724      	adds	r7, #36	; 0x24
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b34:	4770      	bx	lr

08016b36 <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 8016b36:	b480      	push	{r7}
 8016b38:	b089      	sub	sp, #36	; 0x24
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d101      	bne.n	8016b4c <HAL_MultiProcessor_EnterMuteMode+0x16>
 8016b48:	2302      	movs	r3, #2
 8016b4a:	e02a      	b.n	8016ba2 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	2201      	movs	r2, #1
 8016b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2224      	movs	r2, #36	; 0x24
 8016b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	330c      	adds	r3, #12
 8016b62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	e853 3f00 	ldrex	r3, [r3]
 8016b6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	f043 0302 	orr.w	r3, r3, #2
 8016b72:	61fb      	str	r3, [r7, #28]
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	330c      	adds	r3, #12
 8016b7a:	69fa      	ldr	r2, [r7, #28]
 8016b7c:	61ba      	str	r2, [r7, #24]
 8016b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016b80:	6979      	ldr	r1, [r7, #20]
 8016b82:	69ba      	ldr	r2, [r7, #24]
 8016b84:	e841 2300 	strex	r3, r2, [r1]
 8016b88:	613b      	str	r3, [r7, #16]
   return(result);
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d1e5      	bne.n	8016b5c <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	2220      	movs	r2, #32
 8016b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016ba0:	2300      	movs	r3, #0
}
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	3724      	adds	r7, #36	; 0x24
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr

08016bae <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 8016bae:	b480      	push	{r7}
 8016bb0:	b089      	sub	sp, #36	; 0x24
 8016bb2:	af00      	add	r7, sp, #0
 8016bb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016bbc:	2b01      	cmp	r3, #1
 8016bbe:	d101      	bne.n	8016bc4 <HAL_MultiProcessor_ExitMuteMode+0x16>
 8016bc0:	2302      	movs	r3, #2
 8016bc2:	e02a      	b.n	8016c1a <HAL_MultiProcessor_ExitMuteMode+0x6c>
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	2224      	movs	r2, #36	; 0x24
 8016bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	330c      	adds	r3, #12
 8016bda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	e853 3f00 	ldrex	r3, [r3]
 8016be2:	60bb      	str	r3, [r7, #8]
   return(result);
 8016be4:	68bb      	ldr	r3, [r7, #8]
 8016be6:	f023 0302 	bic.w	r3, r3, #2
 8016bea:	61fb      	str	r3, [r7, #28]
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	330c      	adds	r3, #12
 8016bf2:	69fa      	ldr	r2, [r7, #28]
 8016bf4:	61ba      	str	r2, [r7, #24]
 8016bf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bf8:	6979      	ldr	r1, [r7, #20]
 8016bfa:	69ba      	ldr	r2, [r7, #24]
 8016bfc:	e841 2300 	strex	r3, r2, [r1]
 8016c00:	613b      	str	r3, [r7, #16]
   return(result);
 8016c02:	693b      	ldr	r3, [r7, #16]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d1e5      	bne.n	8016bd4 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2220      	movs	r2, #32
 8016c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2200      	movs	r2, #0
 8016c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016c18:	2300      	movs	r3, #0
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3724      	adds	r7, #36	; 0x24
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c24:	4770      	bx	lr

08016c26 <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8016c26:	b480      	push	{r7}
 8016c28:	b085      	sub	sp, #20
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016c38:	2b01      	cmp	r3, #1
 8016c3a:	d101      	bne.n	8016c40 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8016c3c:	2302      	movs	r3, #2
 8016c3e:	e020      	b.n	8016c82 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2201      	movs	r2, #1
 8016c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2224      	movs	r2, #36	; 0x24
 8016c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	68db      	ldr	r3, [r3, #12]
 8016c56:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	f023 030c 	bic.w	r3, r3, #12
 8016c5e:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	f043 0308 	orr.w	r3, r3, #8
 8016c66:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	68fa      	ldr	r2, [r7, #12]
 8016c6e:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	2220      	movs	r2, #32
 8016c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016c80:	2300      	movs	r3, #0
}
 8016c82:	4618      	mov	r0, r3
 8016c84:	3714      	adds	r7, #20
 8016c86:	46bd      	mov	sp, r7
 8016c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8c:	4770      	bx	lr

08016c8e <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8016c8e:	b480      	push	{r7}
 8016c90:	b085      	sub	sp, #20
 8016c92:	af00      	add	r7, sp, #0
 8016c94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8016c96:	2300      	movs	r3, #0
 8016c98:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016ca0:	2b01      	cmp	r3, #1
 8016ca2:	d101      	bne.n	8016ca8 <HAL_HalfDuplex_EnableReceiver+0x1a>
 8016ca4:	2302      	movs	r3, #2
 8016ca6:	e020      	b.n	8016cea <HAL_HalfDuplex_EnableReceiver+0x5c>
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2201      	movs	r2, #1
 8016cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	2224      	movs	r2, #36	; 0x24
 8016cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	68db      	ldr	r3, [r3, #12]
 8016cbe:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8016cc0:	68fb      	ldr	r3, [r7, #12]
 8016cc2:	f023 030c 	bic.w	r3, r3, #12
 8016cc6:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f043 0304 	orr.w	r3, r3, #4
 8016cce:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2220      	movs	r2, #32
 8016cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8016ce8:	2300      	movs	r3, #0
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	3714      	adds	r7, #20
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf4:	4770      	bx	lr

08016cf6 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8016cf6:	b480      	push	{r7}
 8016cf8:	b085      	sub	sp, #20
 8016cfa:	af00      	add	r7, sp, #0
 8016cfc:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8016cfe:	2300      	movs	r3, #0
 8016d00:	60fb      	str	r3, [r7, #12]
 8016d02:	2300      	movs	r3, #0
 8016d04:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016d16:	b2db      	uxtb	r3, r3
 8016d18:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	b2da      	uxtb	r2, r3
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	b2db      	uxtb	r3, r3
 8016d22:	4313      	orrs	r3, r2
 8016d24:	b2db      	uxtb	r3, r3
}
 8016d26:	4618      	mov	r0, r3
 8016d28:	3714      	adds	r7, #20
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d30:	4770      	bx	lr

08016d32 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8016d32:	b480      	push	{r7}
 8016d34:	b083      	sub	sp, #12
 8016d36:	af00      	add	r7, sp, #0
 8016d38:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8016d3e:	4618      	mov	r0, r3
 8016d40:	370c      	adds	r7, #12
 8016d42:	46bd      	mov	sp, r7
 8016d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d48:	4770      	bx	lr

08016d4a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8016d4a:	b580      	push	{r7, lr}
 8016d4c:	b090      	sub	sp, #64	; 0x40
 8016d4e:	af00      	add	r7, sp, #0
 8016d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d56:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d137      	bne.n	8016dd6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8016d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d68:	2200      	movs	r2, #0
 8016d6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	3314      	adds	r3, #20
 8016d72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d76:	e853 3f00 	ldrex	r3, [r3]
 8016d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8016d7c:	6a3b      	ldr	r3, [r7, #32]
 8016d7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8016d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	3314      	adds	r3, #20
 8016d8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d8c:	633a      	str	r2, [r7, #48]	; 0x30
 8016d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016d92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016d94:	e841 2300 	strex	r3, r2, [r1]
 8016d98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d1e5      	bne.n	8016d6c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	330c      	adds	r3, #12
 8016da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	e853 3f00 	ldrex	r3, [r3]
 8016dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016db6:	637b      	str	r3, [r7, #52]	; 0x34
 8016db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	330c      	adds	r3, #12
 8016dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016dc0:	61fa      	str	r2, [r7, #28]
 8016dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016dc4:	69b9      	ldr	r1, [r7, #24]
 8016dc6:	69fa      	ldr	r2, [r7, #28]
 8016dc8:	e841 2300 	strex	r3, r2, [r1]
 8016dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d1e5      	bne.n	8016da0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016dd4:	e002      	b.n	8016ddc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8016dd6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016dd8:	f7ff fe1f 	bl	8016a1a <HAL_UART_TxCpltCallback>
}
 8016ddc:	bf00      	nop
 8016dde:	3740      	adds	r7, #64	; 0x40
 8016de0:	46bd      	mov	sp, r7
 8016de2:	bd80      	pop	{r7, pc}

08016de4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b084      	sub	sp, #16
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8016df2:	68f8      	ldr	r0, [r7, #12]
 8016df4:	f7ff fe1b 	bl	8016a2e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016df8:	bf00      	nop
 8016dfa:	3710      	adds	r7, #16
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b09c      	sub	sp, #112	; 0x70
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d172      	bne.n	8016f02 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8016e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e1e:	2200      	movs	r2, #0
 8016e20:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	330c      	adds	r3, #12
 8016e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e2c:	e853 3f00 	ldrex	r3, [r3]
 8016e30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8016e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	330c      	adds	r3, #12
 8016e40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8016e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016e4a:	e841 2300 	strex	r3, r2, [r1]
 8016e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d1e5      	bne.n	8016e22 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	3314      	adds	r3, #20
 8016e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e60:	e853 3f00 	ldrex	r3, [r3]
 8016e64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e68:	f023 0301 	bic.w	r3, r3, #1
 8016e6c:	667b      	str	r3, [r7, #100]	; 0x64
 8016e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	3314      	adds	r3, #20
 8016e74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016e76:	647a      	str	r2, [r7, #68]	; 0x44
 8016e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e7e:	e841 2300 	strex	r3, r2, [r1]
 8016e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d1e5      	bne.n	8016e56 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	3314      	adds	r3, #20
 8016e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e94:	e853 3f00 	ldrex	r3, [r3]
 8016e98:	623b      	str	r3, [r7, #32]
   return(result);
 8016e9a:	6a3b      	ldr	r3, [r7, #32]
 8016e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8016ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	3314      	adds	r3, #20
 8016ea8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8016eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8016eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016eb2:	e841 2300 	strex	r3, r2, [r1]
 8016eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d1e5      	bne.n	8016e8a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ec0:	2220      	movs	r2, #32
 8016ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eca:	2b01      	cmp	r3, #1
 8016ecc:	d119      	bne.n	8016f02 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	330c      	adds	r3, #12
 8016ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ed6:	693b      	ldr	r3, [r7, #16]
 8016ed8:	e853 3f00 	ldrex	r3, [r3]
 8016edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f023 0310 	bic.w	r3, r3, #16
 8016ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	330c      	adds	r3, #12
 8016eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016eee:	61fa      	str	r2, [r7, #28]
 8016ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ef2:	69b9      	ldr	r1, [r7, #24]
 8016ef4:	69fa      	ldr	r2, [r7, #28]
 8016ef6:	e841 2300 	strex	r3, r2, [r1]
 8016efa:	617b      	str	r3, [r7, #20]
   return(result);
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d1e5      	bne.n	8016ece <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f06:	2b01      	cmp	r3, #1
 8016f08:	d106      	bne.n	8016f18 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016f0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f0e:	4619      	mov	r1, r3
 8016f10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8016f12:	f7ff fdc8 	bl	8016aa6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016f16:	e002      	b.n	8016f1e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8016f18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8016f1a:	f7ea fcf5 	bl	8001908 <HAL_UART_RxCpltCallback>
}
 8016f1e:	bf00      	nop
 8016f20:	3770      	adds	r7, #112	; 0x70
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}

08016f26 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b084      	sub	sp, #16
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f32:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f38:	2b01      	cmp	r3, #1
 8016f3a:	d108      	bne.n	8016f4e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016f40:	085b      	lsrs	r3, r3, #1
 8016f42:	b29b      	uxth	r3, r3
 8016f44:	4619      	mov	r1, r3
 8016f46:	68f8      	ldr	r0, [r7, #12]
 8016f48:	f7ff fdad 	bl	8016aa6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8016f4c:	e002      	b.n	8016f54 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8016f4e:	68f8      	ldr	r0, [r7, #12]
 8016f50:	f7ff fd77 	bl	8016a42 <HAL_UART_RxHalfCpltCallback>
}
 8016f54:	bf00      	nop
 8016f56:	3710      	adds	r7, #16
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd80      	pop	{r7, pc}

08016f5c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8016f5c:	b580      	push	{r7, lr}
 8016f5e:	b084      	sub	sp, #16
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8016f64:	2300      	movs	r3, #0
 8016f66:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f6c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8016f6e:	68bb      	ldr	r3, [r7, #8]
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	695b      	ldr	r3, [r3, #20]
 8016f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f78:	2b80      	cmp	r3, #128	; 0x80
 8016f7a:	bf0c      	ite	eq
 8016f7c:	2301      	moveq	r3, #1
 8016f7e:	2300      	movne	r3, #0
 8016f80:	b2db      	uxtb	r3, r3
 8016f82:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	2b21      	cmp	r3, #33	; 0x21
 8016f8e:	d108      	bne.n	8016fa2 <UART_DMAError+0x46>
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d005      	beq.n	8016fa2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8016f9c:	68b8      	ldr	r0, [r7, #8]
 8016f9e:	f000 f969 	bl	8017274 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	695b      	ldr	r3, [r3, #20]
 8016fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016fac:	2b40      	cmp	r3, #64	; 0x40
 8016fae:	bf0c      	ite	eq
 8016fb0:	2301      	moveq	r3, #1
 8016fb2:	2300      	movne	r3, #0
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8016fb8:	68bb      	ldr	r3, [r7, #8]
 8016fba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	2b22      	cmp	r3, #34	; 0x22
 8016fc2:	d108      	bne.n	8016fd6 <UART_DMAError+0x7a>
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d005      	beq.n	8016fd6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8016fca:	68bb      	ldr	r3, [r7, #8]
 8016fcc:	2200      	movs	r2, #0
 8016fce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8016fd0:	68b8      	ldr	r0, [r7, #8]
 8016fd2:	f000 f977 	bl	80172c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8016fd6:	68bb      	ldr	r3, [r7, #8]
 8016fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016fda:	f043 0210 	orr.w	r2, r3, #16
 8016fde:	68bb      	ldr	r3, [r7, #8]
 8016fe0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016fe2:	68b8      	ldr	r0, [r7, #8]
 8016fe4:	f7ff fd37 	bl	8016a56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016fe8:	bf00      	nop
 8016fea:	3710      	adds	r7, #16
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b090      	sub	sp, #64	; 0x40
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	60f8      	str	r0, [r7, #12]
 8016ff8:	60b9      	str	r1, [r7, #8]
 8016ffa:	603b      	str	r3, [r7, #0]
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017000:	e050      	b.n	80170a4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017008:	d04c      	beq.n	80170a4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801700a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801700c:	2b00      	cmp	r3, #0
 801700e:	d007      	beq.n	8017020 <UART_WaitOnFlagUntilTimeout+0x30>
 8017010:	f7ef f872 	bl	80060f8 <HAL_GetTick>
 8017014:	4602      	mov	r2, r0
 8017016:	683b      	ldr	r3, [r7, #0]
 8017018:	1ad3      	subs	r3, r2, r3
 801701a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801701c:	429a      	cmp	r2, r3
 801701e:	d241      	bcs.n	80170a4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	330c      	adds	r3, #12
 8017026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801702a:	e853 3f00 	ldrex	r3, [r3]
 801702e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017032:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8017036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	681b      	ldr	r3, [r3, #0]
 801703c:	330c      	adds	r3, #12
 801703e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017040:	637a      	str	r2, [r7, #52]	; 0x34
 8017042:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017048:	e841 2300 	strex	r3, r2, [r1]
 801704c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017050:	2b00      	cmp	r3, #0
 8017052:	d1e5      	bne.n	8017020 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	681b      	ldr	r3, [r3, #0]
 8017058:	3314      	adds	r3, #20
 801705a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801705c:	697b      	ldr	r3, [r7, #20]
 801705e:	e853 3f00 	ldrex	r3, [r3]
 8017062:	613b      	str	r3, [r7, #16]
   return(result);
 8017064:	693b      	ldr	r3, [r7, #16]
 8017066:	f023 0301 	bic.w	r3, r3, #1
 801706a:	63bb      	str	r3, [r7, #56]	; 0x38
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	3314      	adds	r3, #20
 8017072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017074:	623a      	str	r2, [r7, #32]
 8017076:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017078:	69f9      	ldr	r1, [r7, #28]
 801707a:	6a3a      	ldr	r2, [r7, #32]
 801707c:	e841 2300 	strex	r3, r2, [r1]
 8017080:	61bb      	str	r3, [r7, #24]
   return(result);
 8017082:	69bb      	ldr	r3, [r7, #24]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d1e5      	bne.n	8017054 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2220      	movs	r2, #32
 801708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	2220      	movs	r2, #32
 8017094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	2200      	movs	r2, #0
 801709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80170a0:	2303      	movs	r3, #3
 80170a2:	e00f      	b.n	80170c4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	681a      	ldr	r2, [r3, #0]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	4013      	ands	r3, r2
 80170ae:	68ba      	ldr	r2, [r7, #8]
 80170b0:	429a      	cmp	r2, r3
 80170b2:	bf0c      	ite	eq
 80170b4:	2301      	moveq	r3, #1
 80170b6:	2300      	movne	r3, #0
 80170b8:	b2db      	uxtb	r3, r3
 80170ba:	461a      	mov	r2, r3
 80170bc:	79fb      	ldrb	r3, [r7, #7]
 80170be:	429a      	cmp	r2, r3
 80170c0:	d09f      	beq.n	8017002 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80170c2:	2300      	movs	r3, #0
}
 80170c4:	4618      	mov	r0, r3
 80170c6:	3740      	adds	r7, #64	; 0x40
 80170c8:	46bd      	mov	sp, r7
 80170ca:	bd80      	pop	{r7, pc}

080170cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80170cc:	b480      	push	{r7}
 80170ce:	b085      	sub	sp, #20
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	60f8      	str	r0, [r7, #12]
 80170d4:	60b9      	str	r1, [r7, #8]
 80170d6:	4613      	mov	r3, r2
 80170d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	68ba      	ldr	r2, [r7, #8]
 80170de:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	88fa      	ldrh	r2, [r7, #6]
 80170e4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	88fa      	ldrh	r2, [r7, #6]
 80170ea:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	2200      	movs	r2, #0
 80170f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	2222      	movs	r2, #34	; 0x22
 80170f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	2200      	movs	r2, #0
 80170fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	68da      	ldr	r2, [r3, #12]
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017110:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	695a      	ldr	r2, [r3, #20]
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	f042 0201 	orr.w	r2, r2, #1
 8017120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	68da      	ldr	r2, [r3, #12]
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	f042 0220 	orr.w	r2, r2, #32
 8017130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017132:	2300      	movs	r3, #0
}
 8017134:	4618      	mov	r0, r3
 8017136:	3714      	adds	r7, #20
 8017138:	46bd      	mov	sp, r7
 801713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801713e:	4770      	bx	lr

08017140 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b098      	sub	sp, #96	; 0x60
 8017144:	af00      	add	r7, sp, #0
 8017146:	60f8      	str	r0, [r7, #12]
 8017148:	60b9      	str	r1, [r7, #8]
 801714a:	4613      	mov	r3, r2
 801714c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 801714e:	68ba      	ldr	r2, [r7, #8]
 8017150:	68fb      	ldr	r3, [r7, #12]
 8017152:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	88fa      	ldrh	r2, [r7, #6]
 8017158:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	2200      	movs	r2, #0
 801715e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	2222      	movs	r2, #34	; 0x22
 8017164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801716c:	4a3e      	ldr	r2, [pc, #248]	; (8017268 <UART_Start_Receive_DMA+0x128>)
 801716e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017174:	4a3d      	ldr	r2, [pc, #244]	; (801726c <UART_Start_Receive_DMA+0x12c>)
 8017176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801717c:	4a3c      	ldr	r2, [pc, #240]	; (8017270 <UART_Start_Receive_DMA+0x130>)
 801717e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017184:	2200      	movs	r2, #0
 8017186:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8017188:	f107 0308 	add.w	r3, r7, #8
 801718c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017192:	68fb      	ldr	r3, [r7, #12]
 8017194:	681b      	ldr	r3, [r3, #0]
 8017196:	3304      	adds	r3, #4
 8017198:	4619      	mov	r1, r3
 801719a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801719c:	681a      	ldr	r2, [r3, #0]
 801719e:	88fb      	ldrh	r3, [r7, #6]
 80171a0:	f7f0 fa13 	bl	80075ca <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80171a4:	2300      	movs	r3, #0
 80171a6:	613b      	str	r3, [r7, #16]
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	613b      	str	r3, [r7, #16]
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	613b      	str	r3, [r7, #16]
 80171b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	2200      	movs	r2, #0
 80171be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80171c2:	68fb      	ldr	r3, [r7, #12]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	330c      	adds	r3, #12
 80171c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171cc:	e853 3f00 	ldrex	r3, [r3]
 80171d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80171d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80171d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	330c      	adds	r3, #12
 80171e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80171e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80171e4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171e6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80171e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80171ea:	e841 2300 	strex	r3, r2, [r1]
 80171ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80171f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1e5      	bne.n	80171c2 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	3314      	adds	r3, #20
 80171fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017200:	e853 3f00 	ldrex	r3, [r3]
 8017204:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017208:	f043 0301 	orr.w	r3, r3, #1
 801720c:	657b      	str	r3, [r7, #84]	; 0x54
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	3314      	adds	r3, #20
 8017214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017216:	63ba      	str	r2, [r7, #56]	; 0x38
 8017218:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801721a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801721c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801721e:	e841 2300 	strex	r3, r2, [r1]
 8017222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017226:	2b00      	cmp	r3, #0
 8017228:	d1e5      	bne.n	80171f6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	3314      	adds	r3, #20
 8017230:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017232:	69bb      	ldr	r3, [r7, #24]
 8017234:	e853 3f00 	ldrex	r3, [r3]
 8017238:	617b      	str	r3, [r7, #20]
   return(result);
 801723a:	697b      	ldr	r3, [r7, #20]
 801723c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017240:	653b      	str	r3, [r7, #80]	; 0x50
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	3314      	adds	r3, #20
 8017248:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801724a:	627a      	str	r2, [r7, #36]	; 0x24
 801724c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801724e:	6a39      	ldr	r1, [r7, #32]
 8017250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017252:	e841 2300 	strex	r3, r2, [r1]
 8017256:	61fb      	str	r3, [r7, #28]
   return(result);
 8017258:	69fb      	ldr	r3, [r7, #28]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d1e5      	bne.n	801722a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 801725e:	2300      	movs	r3, #0
}
 8017260:	4618      	mov	r0, r3
 8017262:	3760      	adds	r7, #96	; 0x60
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}
 8017268:	08016e01 	.word	0x08016e01
 801726c:	08016f27 	.word	0x08016f27
 8017270:	08016f5d 	.word	0x08016f5d

08017274 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8017274:	b480      	push	{r7}
 8017276:	b089      	sub	sp, #36	; 0x24
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	330c      	adds	r3, #12
 8017282:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	e853 3f00 	ldrex	r3, [r3]
 801728a:	60bb      	str	r3, [r7, #8]
   return(result);
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8017292:	61fb      	str	r3, [r7, #28]
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	681b      	ldr	r3, [r3, #0]
 8017298:	330c      	adds	r3, #12
 801729a:	69fa      	ldr	r2, [r7, #28]
 801729c:	61ba      	str	r2, [r7, #24]
 801729e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172a0:	6979      	ldr	r1, [r7, #20]
 80172a2:	69ba      	ldr	r2, [r7, #24]
 80172a4:	e841 2300 	strex	r3, r2, [r1]
 80172a8:	613b      	str	r3, [r7, #16]
   return(result);
 80172aa:	693b      	ldr	r3, [r7, #16]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d1e5      	bne.n	801727c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2220      	movs	r2, #32
 80172b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80172b8:	bf00      	nop
 80172ba:	3724      	adds	r7, #36	; 0x24
 80172bc:	46bd      	mov	sp, r7
 80172be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c2:	4770      	bx	lr

080172c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80172c4:	b480      	push	{r7}
 80172c6:	b095      	sub	sp, #84	; 0x54
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	330c      	adds	r3, #12
 80172d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172d6:	e853 3f00 	ldrex	r3, [r3]
 80172da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80172dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80172e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	681b      	ldr	r3, [r3, #0]
 80172e8:	330c      	adds	r3, #12
 80172ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80172ec:	643a      	str	r2, [r7, #64]	; 0x40
 80172ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80172f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80172f4:	e841 2300 	strex	r3, r2, [r1]
 80172f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80172fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1e5      	bne.n	80172cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681b      	ldr	r3, [r3, #0]
 8017304:	3314      	adds	r3, #20
 8017306:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017308:	6a3b      	ldr	r3, [r7, #32]
 801730a:	e853 3f00 	ldrex	r3, [r3]
 801730e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017310:	69fb      	ldr	r3, [r7, #28]
 8017312:	f023 0301 	bic.w	r3, r3, #1
 8017316:	64bb      	str	r3, [r7, #72]	; 0x48
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	3314      	adds	r3, #20
 801731e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017320:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017324:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017328:	e841 2300 	strex	r3, r2, [r1]
 801732c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017330:	2b00      	cmp	r3, #0
 8017332:	d1e5      	bne.n	8017300 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017338:	2b01      	cmp	r3, #1
 801733a:	d119      	bne.n	8017370 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	330c      	adds	r3, #12
 8017342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	e853 3f00 	ldrex	r3, [r3]
 801734a:	60bb      	str	r3, [r7, #8]
   return(result);
 801734c:	68bb      	ldr	r3, [r7, #8]
 801734e:	f023 0310 	bic.w	r3, r3, #16
 8017352:	647b      	str	r3, [r7, #68]	; 0x44
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	330c      	adds	r3, #12
 801735a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801735c:	61ba      	str	r2, [r7, #24]
 801735e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017360:	6979      	ldr	r1, [r7, #20]
 8017362:	69ba      	ldr	r2, [r7, #24]
 8017364:	e841 2300 	strex	r3, r2, [r1]
 8017368:	613b      	str	r3, [r7, #16]
   return(result);
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d1e5      	bne.n	801733c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	2220      	movs	r2, #32
 8017374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2200      	movs	r2, #0
 801737c:	631a      	str	r2, [r3, #48]	; 0x30
}
 801737e:	bf00      	nop
 8017380:	3754      	adds	r7, #84	; 0x54
 8017382:	46bd      	mov	sp, r7
 8017384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017388:	4770      	bx	lr

0801738a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801738a:	b580      	push	{r7, lr}
 801738c:	b084      	sub	sp, #16
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017396:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	2200      	movs	r2, #0
 801739c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	2200      	movs	r2, #0
 80173a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	f7ff fb56 	bl	8016a56 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80173aa:	bf00      	nop
 80173ac:	3710      	adds	r7, #16
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd80      	pop	{r7, pc}

080173b2 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80173b2:	b580      	push	{r7, lr}
 80173b4:	b084      	sub	sp, #16
 80173b6:	af00      	add	r7, sp, #0
 80173b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173be:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173c4:	2200      	movs	r2, #0
 80173c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d004      	beq.n	80173da <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d117      	bne.n	801740a <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80173da:	68fb      	ldr	r3, [r7, #12]
 80173dc:	2200      	movs	r2, #0
 80173de:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	2200      	movs	r2, #0
 80173e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	2200      	movs	r2, #0
 80173ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2220      	movs	r2, #32
 80173f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	2220      	movs	r2, #32
 80173f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2200      	movs	r2, #0
 8017400:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017402:	68f8      	ldr	r0, [r7, #12]
 8017404:	f7ff fb31 	bl	8016a6a <HAL_UART_AbortCpltCallback>
 8017408:	e000      	b.n	801740c <UART_DMATxAbortCallback+0x5a>
      return;
 801740a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801740c:	3710      	adds	r7, #16
 801740e:	46bd      	mov	sp, r7
 8017410:	bd80      	pop	{r7, pc}

08017412 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017412:	b580      	push	{r7, lr}
 8017414:	b084      	sub	sp, #16
 8017416:	af00      	add	r7, sp, #0
 8017418:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801741e:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017424:	2200      	movs	r2, #0
 8017426:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801742c:	2b00      	cmp	r3, #0
 801742e:	d004      	beq.n	801743a <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017436:	2b00      	cmp	r3, #0
 8017438:	d117      	bne.n	801746a <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2200      	movs	r2, #0
 801743e:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2200      	movs	r2, #0
 8017444:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	2200      	movs	r2, #0
 801744a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801744c:	68fb      	ldr	r3, [r7, #12]
 801744e:	2220      	movs	r2, #32
 8017450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	2220      	movs	r2, #32
 8017458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801745c:	68fb      	ldr	r3, [r7, #12]
 801745e:	2200      	movs	r2, #0
 8017460:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017462:	68f8      	ldr	r0, [r7, #12]
 8017464:	f7ff fb01 	bl	8016a6a <HAL_UART_AbortCpltCallback>
 8017468:	e000      	b.n	801746c <UART_DMARxAbortCallback+0x5a>
      return;
 801746a:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801746c:	3710      	adds	r7, #16
 801746e:	46bd      	mov	sp, r7
 8017470:	bd80      	pop	{r7, pc}

08017472 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017472:	b580      	push	{r7, lr}
 8017474:	b084      	sub	sp, #16
 8017476:	af00      	add	r7, sp, #0
 8017478:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801747e:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	2200      	movs	r2, #0
 8017484:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	2220      	movs	r2, #32
 801748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 801748e:	68f8      	ldr	r0, [r7, #12]
 8017490:	f7ff faf5 	bl	8016a7e <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017494:	bf00      	nop
 8017496:	3710      	adds	r7, #16
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}

0801749c <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174a8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80174aa:	68fb      	ldr	r3, [r7, #12]
 80174ac:	2200      	movs	r2, #0
 80174ae:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	2220      	movs	r2, #32
 80174b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2200      	movs	r2, #0
 80174bc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80174be:	68f8      	ldr	r0, [r7, #12]
 80174c0:	f7ff fae7 	bl	8016a92 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80174c4:	bf00      	nop
 80174c6:	3710      	adds	r7, #16
 80174c8:	46bd      	mov	sp, r7
 80174ca:	bd80      	pop	{r7, pc}

080174cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b085      	sub	sp, #20
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174da:	b2db      	uxtb	r3, r3
 80174dc:	2b21      	cmp	r3, #33	; 0x21
 80174de:	d13e      	bne.n	801755e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	689b      	ldr	r3, [r3, #8]
 80174e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80174e8:	d114      	bne.n	8017514 <UART_Transmit_IT+0x48>
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	691b      	ldr	r3, [r3, #16]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d110      	bne.n	8017514 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	6a1b      	ldr	r3, [r3, #32]
 80174f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	881b      	ldrh	r3, [r3, #0]
 80174fc:	461a      	mov	r2, r3
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017506:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	6a1b      	ldr	r3, [r3, #32]
 801750c:	1c9a      	adds	r2, r3, #2
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	621a      	str	r2, [r3, #32]
 8017512:	e008      	b.n	8017526 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	6a1b      	ldr	r3, [r3, #32]
 8017518:	1c59      	adds	r1, r3, #1
 801751a:	687a      	ldr	r2, [r7, #4]
 801751c:	6211      	str	r1, [r2, #32]
 801751e:	781a      	ldrb	r2, [r3, #0]
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801752a:	b29b      	uxth	r3, r3
 801752c:	3b01      	subs	r3, #1
 801752e:	b29b      	uxth	r3, r3
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	4619      	mov	r1, r3
 8017534:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017536:	2b00      	cmp	r3, #0
 8017538:	d10f      	bne.n	801755a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	68da      	ldr	r2, [r3, #12]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017548:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	68da      	ldr	r2, [r3, #12]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017558:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801755a:	2300      	movs	r3, #0
 801755c:	e000      	b.n	8017560 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 801755e:	2302      	movs	r3, #2
  }
}
 8017560:	4618      	mov	r0, r3
 8017562:	3714      	adds	r7, #20
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	68da      	ldr	r2, [r3, #12]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017582:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2220      	movs	r2, #32
 8017588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	f7ff fa44 	bl	8016a1a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017592:	2300      	movs	r3, #0
}
 8017594:	4618      	mov	r0, r3
 8017596:	3708      	adds	r7, #8
 8017598:	46bd      	mov	sp, r7
 801759a:	bd80      	pop	{r7, pc}

0801759c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801759c:	b580      	push	{r7, lr}
 801759e:	b08c      	sub	sp, #48	; 0x30
 80175a0:	af00      	add	r7, sp, #0
 80175a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80175aa:	b2db      	uxtb	r3, r3
 80175ac:	2b22      	cmp	r3, #34	; 0x22
 80175ae:	f040 80ab 	bne.w	8017708 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	689b      	ldr	r3, [r3, #8]
 80175b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80175ba:	d117      	bne.n	80175ec <UART_Receive_IT+0x50>
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	691b      	ldr	r3, [r3, #16]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d113      	bne.n	80175ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80175c4:	2300      	movs	r3, #0
 80175c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175cc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	685b      	ldr	r3, [r3, #4]
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80175da:	b29a      	uxth	r2, r3
 80175dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175e4:	1c9a      	adds	r2, r3, #2
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	629a      	str	r2, [r3, #40]	; 0x28
 80175ea:	e026      	b.n	801763a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80175f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80175f2:	2300      	movs	r3, #0
 80175f4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	689b      	ldr	r3, [r3, #8]
 80175fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80175fe:	d007      	beq.n	8017610 <UART_Receive_IT+0x74>
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	689b      	ldr	r3, [r3, #8]
 8017604:	2b00      	cmp	r3, #0
 8017606:	d10a      	bne.n	801761e <UART_Receive_IT+0x82>
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	691b      	ldr	r3, [r3, #16]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d106      	bne.n	801761e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	b2da      	uxtb	r2, r3
 8017618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801761a:	701a      	strb	r2, [r3, #0]
 801761c:	e008      	b.n	8017630 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	685b      	ldr	r3, [r3, #4]
 8017624:	b2db      	uxtb	r3, r3
 8017626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801762a:	b2da      	uxtb	r2, r3
 801762c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801762e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017634:	1c5a      	adds	r2, r3, #1
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801763e:	b29b      	uxth	r3, r3
 8017640:	3b01      	subs	r3, #1
 8017642:	b29b      	uxth	r3, r3
 8017644:	687a      	ldr	r2, [r7, #4]
 8017646:	4619      	mov	r1, r3
 8017648:	85d1      	strh	r1, [r2, #46]	; 0x2e
 801764a:	2b00      	cmp	r3, #0
 801764c:	d15a      	bne.n	8017704 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	681b      	ldr	r3, [r3, #0]
 8017652:	68da      	ldr	r2, [r3, #12]
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	f022 0220 	bic.w	r2, r2, #32
 801765c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	68da      	ldr	r2, [r3, #12]
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801766c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	681b      	ldr	r3, [r3, #0]
 8017672:	695a      	ldr	r2, [r3, #20]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	f022 0201 	bic.w	r2, r2, #1
 801767c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	2220      	movs	r2, #32
 8017682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801768a:	2b01      	cmp	r3, #1
 801768c:	d135      	bne.n	80176fa <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	2200      	movs	r2, #0
 8017692:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	330c      	adds	r3, #12
 801769a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	e853 3f00 	ldrex	r3, [r3]
 80176a2:	613b      	str	r3, [r7, #16]
   return(result);
 80176a4:	693b      	ldr	r3, [r7, #16]
 80176a6:	f023 0310 	bic.w	r3, r3, #16
 80176aa:	627b      	str	r3, [r7, #36]	; 0x24
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	330c      	adds	r3, #12
 80176b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80176b4:	623a      	str	r2, [r7, #32]
 80176b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176b8:	69f9      	ldr	r1, [r7, #28]
 80176ba:	6a3a      	ldr	r2, [r7, #32]
 80176bc:	e841 2300 	strex	r3, r2, [r1]
 80176c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80176c2:	69bb      	ldr	r3, [r7, #24]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d1e5      	bne.n	8017694 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	f003 0310 	and.w	r3, r3, #16
 80176d2:	2b10      	cmp	r3, #16
 80176d4:	d10a      	bne.n	80176ec <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80176d6:	2300      	movs	r3, #0
 80176d8:	60fb      	str	r3, [r7, #12]
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	60fb      	str	r3, [r7, #12]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	60fb      	str	r3, [r7, #12]
 80176ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80176f0:	4619      	mov	r1, r3
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f7ff f9d7 	bl	8016aa6 <HAL_UARTEx_RxEventCallback>
 80176f8:	e002      	b.n	8017700 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f7ea f904 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017700:	2300      	movs	r3, #0
 8017702:	e002      	b.n	801770a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017704:	2300      	movs	r3, #0
 8017706:	e000      	b.n	801770a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017708:	2302      	movs	r3, #2
  }
}
 801770a:	4618      	mov	r0, r3
 801770c:	3730      	adds	r7, #48	; 0x30
 801770e:	46bd      	mov	sp, r7
 8017710:	bd80      	pop	{r7, pc}

08017712 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017712:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017716:	b0c0      	sub	sp, #256	; 0x100
 8017718:	af00      	add	r7, sp, #0
 801771a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801771e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	691b      	ldr	r3, [r3, #16]
 8017726:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 801772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801772e:	68d9      	ldr	r1, [r3, #12]
 8017730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017734:	681a      	ldr	r2, [r3, #0]
 8017736:	ea40 0301 	orr.w	r3, r0, r1
 801773a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801773c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017740:	689a      	ldr	r2, [r3, #8]
 8017742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017746:	691b      	ldr	r3, [r3, #16]
 8017748:	431a      	orrs	r2, r3
 801774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801774e:	695b      	ldr	r3, [r3, #20]
 8017750:	431a      	orrs	r2, r3
 8017752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017756:	69db      	ldr	r3, [r3, #28]
 8017758:	4313      	orrs	r3, r2
 801775a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801775e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	68db      	ldr	r3, [r3, #12]
 8017766:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 801776a:	f021 010c 	bic.w	r1, r1, #12
 801776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017772:	681a      	ldr	r2, [r3, #0]
 8017774:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017778:	430b      	orrs	r3, r1
 801777a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	695b      	ldr	r3, [r3, #20]
 8017784:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801778c:	6999      	ldr	r1, [r3, #24]
 801778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017792:	681a      	ldr	r2, [r3, #0]
 8017794:	ea40 0301 	orr.w	r3, r0, r1
 8017798:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801779e:	681a      	ldr	r2, [r3, #0]
 80177a0:	4b8e      	ldr	r3, [pc, #568]	; (80179dc <UART_SetConfig+0x2ca>)
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d005      	beq.n	80177b2 <UART_SetConfig+0xa0>
 80177a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	4b8c      	ldr	r3, [pc, #560]	; (80179e0 <UART_SetConfig+0x2ce>)
 80177ae:	429a      	cmp	r2, r3
 80177b0:	d104      	bne.n	80177bc <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80177b2:	f7fa fa11 	bl	8011bd8 <HAL_RCC_GetPCLK2Freq>
 80177b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80177ba:	e003      	b.n	80177c4 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80177bc:	f7fa f9f8 	bl	8011bb0 <HAL_RCC_GetPCLK1Freq>
 80177c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80177c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80177c8:	69db      	ldr	r3, [r3, #28]
 80177ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80177ce:	f040 810b 	bne.w	80179e8 <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80177d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80177d6:	2200      	movs	r2, #0
 80177d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80177dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80177e0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80177e4:	4622      	mov	r2, r4
 80177e6:	462b      	mov	r3, r5
 80177e8:	1891      	adds	r1, r2, r2
 80177ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80177ec:	415b      	adcs	r3, r3
 80177ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80177f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80177f4:	4621      	mov	r1, r4
 80177f6:	eb12 0801 	adds.w	r8, r2, r1
 80177fa:	4629      	mov	r1, r5
 80177fc:	eb43 0901 	adc.w	r9, r3, r1
 8017800:	f04f 0200 	mov.w	r2, #0
 8017804:	f04f 0300 	mov.w	r3, #0
 8017808:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801780c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017810:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017814:	4690      	mov	r8, r2
 8017816:	4699      	mov	r9, r3
 8017818:	4623      	mov	r3, r4
 801781a:	eb18 0303 	adds.w	r3, r8, r3
 801781e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017822:	462b      	mov	r3, r5
 8017824:	eb49 0303 	adc.w	r3, r9, r3
 8017828:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	2200      	movs	r2, #0
 8017834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017838:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 801783c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017840:	460b      	mov	r3, r1
 8017842:	18db      	adds	r3, r3, r3
 8017844:	653b      	str	r3, [r7, #80]	; 0x50
 8017846:	4613      	mov	r3, r2
 8017848:	eb42 0303 	adc.w	r3, r2, r3
 801784c:	657b      	str	r3, [r7, #84]	; 0x54
 801784e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017852:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017856:	f001 fabd 	bl	8018dd4 <__aeabi_uldivmod>
 801785a:	4602      	mov	r2, r0
 801785c:	460b      	mov	r3, r1
 801785e:	4b61      	ldr	r3, [pc, #388]	; (80179e4 <UART_SetConfig+0x2d2>)
 8017860:	fba3 2302 	umull	r2, r3, r3, r2
 8017864:	095b      	lsrs	r3, r3, #5
 8017866:	011c      	lsls	r4, r3, #4
 8017868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801786c:	2200      	movs	r2, #0
 801786e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017872:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017876:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 801787a:	4642      	mov	r2, r8
 801787c:	464b      	mov	r3, r9
 801787e:	1891      	adds	r1, r2, r2
 8017880:	64b9      	str	r1, [r7, #72]	; 0x48
 8017882:	415b      	adcs	r3, r3
 8017884:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017886:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 801788a:	4641      	mov	r1, r8
 801788c:	eb12 0a01 	adds.w	sl, r2, r1
 8017890:	4649      	mov	r1, r9
 8017892:	eb43 0b01 	adc.w	fp, r3, r1
 8017896:	f04f 0200 	mov.w	r2, #0
 801789a:	f04f 0300 	mov.w	r3, #0
 801789e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80178a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80178a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80178aa:	4692      	mov	sl, r2
 80178ac:	469b      	mov	fp, r3
 80178ae:	4643      	mov	r3, r8
 80178b0:	eb1a 0303 	adds.w	r3, sl, r3
 80178b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80178b8:	464b      	mov	r3, r9
 80178ba:	eb4b 0303 	adc.w	r3, fp, r3
 80178be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80178c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	2200      	movs	r2, #0
 80178ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80178ce:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80178d2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80178d6:	460b      	mov	r3, r1
 80178d8:	18db      	adds	r3, r3, r3
 80178da:	643b      	str	r3, [r7, #64]	; 0x40
 80178dc:	4613      	mov	r3, r2
 80178de:	eb42 0303 	adc.w	r3, r2, r3
 80178e2:	647b      	str	r3, [r7, #68]	; 0x44
 80178e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80178e8:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80178ec:	f001 fa72 	bl	8018dd4 <__aeabi_uldivmod>
 80178f0:	4602      	mov	r2, r0
 80178f2:	460b      	mov	r3, r1
 80178f4:	4611      	mov	r1, r2
 80178f6:	4b3b      	ldr	r3, [pc, #236]	; (80179e4 <UART_SetConfig+0x2d2>)
 80178f8:	fba3 2301 	umull	r2, r3, r3, r1
 80178fc:	095b      	lsrs	r3, r3, #5
 80178fe:	2264      	movs	r2, #100	; 0x64
 8017900:	fb02 f303 	mul.w	r3, r2, r3
 8017904:	1acb      	subs	r3, r1, r3
 8017906:	00db      	lsls	r3, r3, #3
 8017908:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801790c:	4b35      	ldr	r3, [pc, #212]	; (80179e4 <UART_SetConfig+0x2d2>)
 801790e:	fba3 2302 	umull	r2, r3, r3, r2
 8017912:	095b      	lsrs	r3, r3, #5
 8017914:	005b      	lsls	r3, r3, #1
 8017916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801791a:	441c      	add	r4, r3
 801791c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017920:	2200      	movs	r2, #0
 8017922:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017926:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 801792a:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 801792e:	4642      	mov	r2, r8
 8017930:	464b      	mov	r3, r9
 8017932:	1891      	adds	r1, r2, r2
 8017934:	63b9      	str	r1, [r7, #56]	; 0x38
 8017936:	415b      	adcs	r3, r3
 8017938:	63fb      	str	r3, [r7, #60]	; 0x3c
 801793a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801793e:	4641      	mov	r1, r8
 8017940:	1851      	adds	r1, r2, r1
 8017942:	6339      	str	r1, [r7, #48]	; 0x30
 8017944:	4649      	mov	r1, r9
 8017946:	414b      	adcs	r3, r1
 8017948:	637b      	str	r3, [r7, #52]	; 0x34
 801794a:	f04f 0200 	mov.w	r2, #0
 801794e:	f04f 0300 	mov.w	r3, #0
 8017952:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8017956:	4659      	mov	r1, fp
 8017958:	00cb      	lsls	r3, r1, #3
 801795a:	4651      	mov	r1, sl
 801795c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017960:	4651      	mov	r1, sl
 8017962:	00ca      	lsls	r2, r1, #3
 8017964:	4610      	mov	r0, r2
 8017966:	4619      	mov	r1, r3
 8017968:	4603      	mov	r3, r0
 801796a:	4642      	mov	r2, r8
 801796c:	189b      	adds	r3, r3, r2
 801796e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017972:	464b      	mov	r3, r9
 8017974:	460a      	mov	r2, r1
 8017976:	eb42 0303 	adc.w	r3, r2, r3
 801797a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017982:	685b      	ldr	r3, [r3, #4]
 8017984:	2200      	movs	r2, #0
 8017986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801798a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 801798e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8017992:	460b      	mov	r3, r1
 8017994:	18db      	adds	r3, r3, r3
 8017996:	62bb      	str	r3, [r7, #40]	; 0x28
 8017998:	4613      	mov	r3, r2
 801799a:	eb42 0303 	adc.w	r3, r2, r3
 801799e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80179a4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80179a8:	f001 fa14 	bl	8018dd4 <__aeabi_uldivmod>
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	4b0c      	ldr	r3, [pc, #48]	; (80179e4 <UART_SetConfig+0x2d2>)
 80179b2:	fba3 1302 	umull	r1, r3, r3, r2
 80179b6:	095b      	lsrs	r3, r3, #5
 80179b8:	2164      	movs	r1, #100	; 0x64
 80179ba:	fb01 f303 	mul.w	r3, r1, r3
 80179be:	1ad3      	subs	r3, r2, r3
 80179c0:	00db      	lsls	r3, r3, #3
 80179c2:	3332      	adds	r3, #50	; 0x32
 80179c4:	4a07      	ldr	r2, [pc, #28]	; (80179e4 <UART_SetConfig+0x2d2>)
 80179c6:	fba2 2303 	umull	r2, r3, r2, r3
 80179ca:	095b      	lsrs	r3, r3, #5
 80179cc:	f003 0207 	and.w	r2, r3, #7
 80179d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	4422      	add	r2, r4
 80179d8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80179da:	e104      	b.n	8017be6 <UART_SetConfig+0x4d4>
 80179dc:	40011000 	.word	0x40011000
 80179e0:	40011400 	.word	0x40011400
 80179e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80179e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80179ec:	2200      	movs	r2, #0
 80179ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80179f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80179f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80179fa:	4642      	mov	r2, r8
 80179fc:	464b      	mov	r3, r9
 80179fe:	1891      	adds	r1, r2, r2
 8017a00:	6239      	str	r1, [r7, #32]
 8017a02:	415b      	adcs	r3, r3
 8017a04:	627b      	str	r3, [r7, #36]	; 0x24
 8017a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017a0a:	4641      	mov	r1, r8
 8017a0c:	1854      	adds	r4, r2, r1
 8017a0e:	4649      	mov	r1, r9
 8017a10:	eb43 0501 	adc.w	r5, r3, r1
 8017a14:	f04f 0200 	mov.w	r2, #0
 8017a18:	f04f 0300 	mov.w	r3, #0
 8017a1c:	00eb      	lsls	r3, r5, #3
 8017a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017a22:	00e2      	lsls	r2, r4, #3
 8017a24:	4614      	mov	r4, r2
 8017a26:	461d      	mov	r5, r3
 8017a28:	4643      	mov	r3, r8
 8017a2a:	18e3      	adds	r3, r4, r3
 8017a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017a30:	464b      	mov	r3, r9
 8017a32:	eb45 0303 	adc.w	r3, r5, r3
 8017a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017a3e:	685b      	ldr	r3, [r3, #4]
 8017a40:	2200      	movs	r2, #0
 8017a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017a46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017a4a:	f04f 0200 	mov.w	r2, #0
 8017a4e:	f04f 0300 	mov.w	r3, #0
 8017a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8017a56:	4629      	mov	r1, r5
 8017a58:	008b      	lsls	r3, r1, #2
 8017a5a:	4621      	mov	r1, r4
 8017a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017a60:	4621      	mov	r1, r4
 8017a62:	008a      	lsls	r2, r1, #2
 8017a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8017a68:	f001 f9b4 	bl	8018dd4 <__aeabi_uldivmod>
 8017a6c:	4602      	mov	r2, r0
 8017a6e:	460b      	mov	r3, r1
 8017a70:	4b60      	ldr	r3, [pc, #384]	; (8017bf4 <UART_SetConfig+0x4e2>)
 8017a72:	fba3 2302 	umull	r2, r3, r3, r2
 8017a76:	095b      	lsrs	r3, r3, #5
 8017a78:	011c      	lsls	r4, r3, #4
 8017a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017a7e:	2200      	movs	r2, #0
 8017a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8017a8c:	4642      	mov	r2, r8
 8017a8e:	464b      	mov	r3, r9
 8017a90:	1891      	adds	r1, r2, r2
 8017a92:	61b9      	str	r1, [r7, #24]
 8017a94:	415b      	adcs	r3, r3
 8017a96:	61fb      	str	r3, [r7, #28]
 8017a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017a9c:	4641      	mov	r1, r8
 8017a9e:	1851      	adds	r1, r2, r1
 8017aa0:	6139      	str	r1, [r7, #16]
 8017aa2:	4649      	mov	r1, r9
 8017aa4:	414b      	adcs	r3, r1
 8017aa6:	617b      	str	r3, [r7, #20]
 8017aa8:	f04f 0200 	mov.w	r2, #0
 8017aac:	f04f 0300 	mov.w	r3, #0
 8017ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8017ab4:	4659      	mov	r1, fp
 8017ab6:	00cb      	lsls	r3, r1, #3
 8017ab8:	4651      	mov	r1, sl
 8017aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017abe:	4651      	mov	r1, sl
 8017ac0:	00ca      	lsls	r2, r1, #3
 8017ac2:	4610      	mov	r0, r2
 8017ac4:	4619      	mov	r1, r3
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	4642      	mov	r2, r8
 8017aca:	189b      	adds	r3, r3, r2
 8017acc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017ad0:	464b      	mov	r3, r9
 8017ad2:	460a      	mov	r2, r1
 8017ad4:	eb42 0303 	adc.w	r3, r2, r3
 8017ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8017ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8017ae8:	f04f 0200 	mov.w	r2, #0
 8017aec:	f04f 0300 	mov.w	r3, #0
 8017af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8017af4:	4649      	mov	r1, r9
 8017af6:	008b      	lsls	r3, r1, #2
 8017af8:	4641      	mov	r1, r8
 8017afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017afe:	4641      	mov	r1, r8
 8017b00:	008a      	lsls	r2, r1, #2
 8017b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8017b06:	f001 f965 	bl	8018dd4 <__aeabi_uldivmod>
 8017b0a:	4602      	mov	r2, r0
 8017b0c:	460b      	mov	r3, r1
 8017b0e:	4b39      	ldr	r3, [pc, #228]	; (8017bf4 <UART_SetConfig+0x4e2>)
 8017b10:	fba3 1302 	umull	r1, r3, r3, r2
 8017b14:	095b      	lsrs	r3, r3, #5
 8017b16:	2164      	movs	r1, #100	; 0x64
 8017b18:	fb01 f303 	mul.w	r3, r1, r3
 8017b1c:	1ad3      	subs	r3, r2, r3
 8017b1e:	011b      	lsls	r3, r3, #4
 8017b20:	3332      	adds	r3, #50	; 0x32
 8017b22:	4a34      	ldr	r2, [pc, #208]	; (8017bf4 <UART_SetConfig+0x4e2>)
 8017b24:	fba2 2303 	umull	r2, r3, r2, r3
 8017b28:	095b      	lsrs	r3, r3, #5
 8017b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017b2e:	441c      	add	r4, r3
 8017b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017b34:	2200      	movs	r2, #0
 8017b36:	673b      	str	r3, [r7, #112]	; 0x70
 8017b38:	677a      	str	r2, [r7, #116]	; 0x74
 8017b3a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8017b3e:	4642      	mov	r2, r8
 8017b40:	464b      	mov	r3, r9
 8017b42:	1891      	adds	r1, r2, r2
 8017b44:	60b9      	str	r1, [r7, #8]
 8017b46:	415b      	adcs	r3, r3
 8017b48:	60fb      	str	r3, [r7, #12]
 8017b4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017b4e:	4641      	mov	r1, r8
 8017b50:	1851      	adds	r1, r2, r1
 8017b52:	6039      	str	r1, [r7, #0]
 8017b54:	4649      	mov	r1, r9
 8017b56:	414b      	adcs	r3, r1
 8017b58:	607b      	str	r3, [r7, #4]
 8017b5a:	f04f 0200 	mov.w	r2, #0
 8017b5e:	f04f 0300 	mov.w	r3, #0
 8017b62:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8017b66:	4659      	mov	r1, fp
 8017b68:	00cb      	lsls	r3, r1, #3
 8017b6a:	4651      	mov	r1, sl
 8017b6c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017b70:	4651      	mov	r1, sl
 8017b72:	00ca      	lsls	r2, r1, #3
 8017b74:	4610      	mov	r0, r2
 8017b76:	4619      	mov	r1, r3
 8017b78:	4603      	mov	r3, r0
 8017b7a:	4642      	mov	r2, r8
 8017b7c:	189b      	adds	r3, r3, r2
 8017b7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8017b80:	464b      	mov	r3, r9
 8017b82:	460a      	mov	r2, r1
 8017b84:	eb42 0303 	adc.w	r3, r2, r3
 8017b88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	2200      	movs	r2, #0
 8017b92:	663b      	str	r3, [r7, #96]	; 0x60
 8017b94:	667a      	str	r2, [r7, #100]	; 0x64
 8017b96:	f04f 0200 	mov.w	r2, #0
 8017b9a:	f04f 0300 	mov.w	r3, #0
 8017b9e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8017ba2:	4649      	mov	r1, r9
 8017ba4:	008b      	lsls	r3, r1, #2
 8017ba6:	4641      	mov	r1, r8
 8017ba8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017bac:	4641      	mov	r1, r8
 8017bae:	008a      	lsls	r2, r1, #2
 8017bb0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8017bb4:	f001 f90e 	bl	8018dd4 <__aeabi_uldivmod>
 8017bb8:	4602      	mov	r2, r0
 8017bba:	460b      	mov	r3, r1
 8017bbc:	4b0d      	ldr	r3, [pc, #52]	; (8017bf4 <UART_SetConfig+0x4e2>)
 8017bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8017bc2:	095b      	lsrs	r3, r3, #5
 8017bc4:	2164      	movs	r1, #100	; 0x64
 8017bc6:	fb01 f303 	mul.w	r3, r1, r3
 8017bca:	1ad3      	subs	r3, r2, r3
 8017bcc:	011b      	lsls	r3, r3, #4
 8017bce:	3332      	adds	r3, #50	; 0x32
 8017bd0:	4a08      	ldr	r2, [pc, #32]	; (8017bf4 <UART_SetConfig+0x4e2>)
 8017bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8017bd6:	095b      	lsrs	r3, r3, #5
 8017bd8:	f003 020f 	and.w	r2, r3, #15
 8017bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	4422      	add	r2, r4
 8017be4:	609a      	str	r2, [r3, #8]
}
 8017be6:	bf00      	nop
 8017be8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8017bec:	46bd      	mov	sp, r7
 8017bee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017bf2:	bf00      	nop
 8017bf4:	51eb851f 	.word	0x51eb851f

08017bf8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8017bf8:	b480      	push	{r7}
 8017bfa:	b085      	sub	sp, #20
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	6078      	str	r0, [r7, #4]
 8017c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8017c02:	2300      	movs	r3, #0
 8017c04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c10:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8017c12:	68fa      	ldr	r2, [r7, #12]
 8017c14:	4b20      	ldr	r3, [pc, #128]	; (8017c98 <FSMC_NORSRAM_Init+0xa0>)
 8017c16:	4013      	ands	r3, r2
 8017c18:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8017c1e:	683b      	ldr	r3, [r7, #0]
 8017c20:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017c22:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8017c24:	683b      	ldr	r3, [r7, #0]
 8017c26:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8017c28:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8017c2e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8017c30:	683b      	ldr	r3, [r7, #0]
 8017c32:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8017c34:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8017c36:	683b      	ldr	r3, [r7, #0]
 8017c38:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8017c3a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8017c40:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8017c42:	683b      	ldr	r3, [r7, #0]
 8017c44:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8017c46:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8017c48:	683b      	ldr	r3, [r7, #0]
 8017c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8017c4c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8017c4e:	683b      	ldr	r3, [r7, #0]
 8017c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8017c52:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8017c58:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8017c5a:	683b      	ldr	r3, [r7, #0]
 8017c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8017c5e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8017c60:	683b      	ldr	r3, [r7, #0]
 8017c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8017c64:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8017c66:	68fa      	ldr	r2, [r7, #12]
 8017c68:	4313      	orrs	r3, r2
 8017c6a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8017c6c:	683b      	ldr	r3, [r7, #0]
 8017c6e:	689b      	ldr	r3, [r3, #8]
 8017c70:	2b08      	cmp	r3, #8
 8017c72:	d103      	bne.n	8017c7c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c7a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8017c7c:	683b      	ldr	r3, [r7, #0]
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	68f9      	ldr	r1, [r7, #12]
 8017c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8017c88:	2300      	movs	r3, #0
}
 8017c8a:	4618      	mov	r0, r3
 8017c8c:	3714      	adds	r7, #20
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop
 8017c98:	fff00080 	.word	0xfff00080

08017c9c <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 8017c9c:	b480      	push	{r7}
 8017c9e:	b085      	sub	sp, #20
 8017ca0:	af00      	add	r7, sp, #0
 8017ca2:	60f8      	str	r0, [r7, #12]
 8017ca4:	60b9      	str	r1, [r7, #8]
 8017ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	687a      	ldr	r2, [r7, #4]
 8017cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017cb0:	f023 0101 	bic.w	r1, r3, #1
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	687a      	ldr	r2, [r7, #4]
 8017cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d106      	bne.n	8017cd0 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	687a      	ldr	r2, [r7, #4]
 8017cc6:	f243 01db 	movw	r1, #12507	; 0x30db
 8017cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017cce:	e005      	b.n	8017cdc <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	687a      	ldr	r2, [r7, #4]
 8017cd4:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8017cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	1c5a      	adds	r2, r3, #1
 8017ce0:	68fb      	ldr	r3, [r7, #12]
 8017ce2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	687a      	ldr	r2, [r7, #4]
 8017cee:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 8017cf6:	2300      	movs	r3, #0
}
 8017cf8:	4618      	mov	r0, r3
 8017cfa:	3714      	adds	r7, #20
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d02:	4770      	bx	lr

08017d04 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8017d04:	b480      	push	{r7}
 8017d06:	b087      	sub	sp, #28
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8017d10:	2300      	movs	r3, #0
 8017d12:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	1c5a      	adds	r2, r3, #1
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d1e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8017d20:	697b      	ldr	r3, [r7, #20]
 8017d22:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8017d26:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017d32:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	689b      	ldr	r3, [r3, #8]
 8017d38:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8017d3a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	68db      	ldr	r3, [r3, #12]
 8017d40:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8017d42:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	691b      	ldr	r3, [r3, #16]
 8017d48:	3b01      	subs	r3, #1
 8017d4a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017d4c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8017d4e:	68bb      	ldr	r3, [r7, #8]
 8017d50:	695b      	ldr	r3, [r3, #20]
 8017d52:	3b02      	subs	r3, #2
 8017d54:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8017d56:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017d5c:	4313      	orrs	r3, r2
 8017d5e:	697a      	ldr	r2, [r7, #20]
 8017d60:	4313      	orrs	r3, r2
 8017d62:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	1c5a      	adds	r2, r3, #1
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	6979      	ldr	r1, [r7, #20]
 8017d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8017d70:	2300      	movs	r3, #0
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	371c      	adds	r7, #28
 8017d76:	46bd      	mov	sp, r7
 8017d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7c:	4770      	bx	lr

08017d7e <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8017d7e:	b480      	push	{r7}
 8017d80:	b087      	sub	sp, #28
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	60f8      	str	r0, [r7, #12]
 8017d86:	60b9      	str	r1, [r7, #8]
 8017d88:	607a      	str	r2, [r7, #4]
 8017d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8017d90:	683b      	ldr	r3, [r7, #0]
 8017d92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017d96:	d122      	bne.n	8017dde <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	687a      	ldr	r2, [r7, #4]
 8017d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017da0:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8017da2:	697a      	ldr	r2, [r7, #20]
 8017da4:	4b14      	ldr	r3, [pc, #80]	; (8017df8 <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 8017da6:	4013      	ands	r3, r2
 8017da8:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017daa:	68bb      	ldr	r3, [r7, #8]
 8017dac:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8017dae:	68bb      	ldr	r3, [r7, #8]
 8017db0:	685b      	ldr	r3, [r3, #4]
 8017db2:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017db4:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8017db6:	68bb      	ldr	r3, [r7, #8]
 8017db8:	689b      	ldr	r3, [r3, #8]
 8017dba:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8017dbc:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017dbe:	68bb      	ldr	r3, [r7, #8]
 8017dc0:	68db      	ldr	r3, [r3, #12]
 8017dc2:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8017dc4:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8017dc6:	68bb      	ldr	r3, [r7, #8]
 8017dc8:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8017dca:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8017dcc:	697a      	ldr	r2, [r7, #20]
 8017dce:	4313      	orrs	r3, r2
 8017dd0:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	687a      	ldr	r2, [r7, #4]
 8017dd6:	6979      	ldr	r1, [r7, #20]
 8017dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8017ddc:	e005      	b.n	8017dea <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	687a      	ldr	r2, [r7, #4]
 8017de2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8017de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8017dea:	2300      	movs	r3, #0
}
 8017dec:	4618      	mov	r0, r3
 8017dee:	371c      	adds	r7, #28
 8017df0:	46bd      	mov	sp, r7
 8017df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017df6:	4770      	bx	lr
 8017df8:	cff00000 	.word	0xcff00000

08017dfc <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
 8017e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	683a      	ldr	r2, [r7, #0]
 8017e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e0e:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	683a      	ldr	r2, [r7, #0]
 8017e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8017e1a:	2300      	movs	r3, #0
}
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	370c      	adds	r7, #12
 8017e20:	46bd      	mov	sp, r7
 8017e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e26:	4770      	bx	lr

08017e28 <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8017e28:	b480      	push	{r7}
 8017e2a:	b083      	sub	sp, #12
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	683a      	ldr	r2, [r7, #0]
 8017e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	683a      	ldr	r2, [r7, #0]
 8017e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 8017e46:	2300      	movs	r3, #0
}
 8017e48:	4618      	mov	r0, r3
 8017e4a:	370c      	adds	r7, #12
 8017e4c:	46bd      	mov	sp, r7
 8017e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e52:	4770      	bx	lr

08017e54 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8017e54:	b480      	push	{r7}
 8017e56:	b085      	sub	sp, #20
 8017e58:	af00      	add	r7, sp, #0
 8017e5a:	6078      	str	r0, [r7, #4]
 8017e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8017e5e:	2300      	movs	r3, #0
 8017e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8017e62:	683b      	ldr	r3, [r7, #0]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	2b10      	cmp	r3, #16
 8017e68:	d103      	bne.n	8017e72 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	681b      	ldr	r3, [r3, #0]
 8017e6e:	60fb      	str	r3, [r7, #12]
 8017e70:	e002      	b.n	8017e78 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	6a1b      	ldr	r3, [r3, #32]
 8017e76:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8017e78:	68fa      	ldr	r2, [r7, #12]
 8017e7a:	4b16      	ldr	r3, [pc, #88]	; (8017ed4 <FSMC_NAND_Init+0x80>)
 8017e7c:	4013      	ands	r3, r2
 8017e7e:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8017e80:	683b      	ldr	r3, [r7, #0]
 8017e82:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8017e84:	683b      	ldr	r3, [r7, #0]
 8017e86:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8017e88:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8017e8e:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8017e94:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8017e96:	683b      	ldr	r3, [r7, #0]
 8017e98:	695b      	ldr	r3, [r3, #20]
 8017e9a:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8017e9c:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8017e9e:	683b      	ldr	r3, [r7, #0]
 8017ea0:	699b      	ldr	r3, [r3, #24]
 8017ea2:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8017ea4:	431a      	orrs	r2, r3
 8017ea6:	68fb      	ldr	r3, [r7, #12]
 8017ea8:	4313      	orrs	r3, r2
 8017eaa:	f043 0308 	orr.w	r3, r3, #8
 8017eae:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8017eb0:	683b      	ldr	r3, [r7, #0]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b10      	cmp	r3, #16
 8017eb6:	d103      	bne.n	8017ec0 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	68fa      	ldr	r2, [r7, #12]
 8017ebc:	601a      	str	r2, [r3, #0]
 8017ebe:	e002      	b.n	8017ec6 <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	68fa      	ldr	r2, [r7, #12]
 8017ec4:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8017ec6:	2300      	movs	r3, #0
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	3714      	adds	r7, #20
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr
 8017ed4:	fff00181 	.word	0xfff00181

08017ed8 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8017ed8:	b480      	push	{r7}
 8017eda:	b087      	sub	sp, #28
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	60f8      	str	r0, [r7, #12]
 8017ee0:	60b9      	str	r1, [r7, #8]
 8017ee2:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	2b10      	cmp	r3, #16
 8017eec:	d103      	bne.n	8017ef6 <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	689b      	ldr	r3, [r3, #8]
 8017ef2:	617b      	str	r3, [r7, #20]
 8017ef4:	e002      	b.n	8017efc <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8017ef6:	68fb      	ldr	r3, [r7, #12]
 8017ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017efa:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8017efc:	2300      	movs	r3, #0
 8017efe:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8017f04:	68bb      	ldr	r3, [r7, #8]
 8017f06:	685b      	ldr	r3, [r3, #4]
 8017f08:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f0a:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8017f0c:	68bb      	ldr	r3, [r7, #8]
 8017f0e:	689b      	ldr	r3, [r3, #8]
 8017f10:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8017f12:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	68db      	ldr	r3, [r3, #12]
 8017f18:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8017f1a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f1c:	697a      	ldr	r2, [r7, #20]
 8017f1e:	4313      	orrs	r3, r2
 8017f20:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b10      	cmp	r3, #16
 8017f26:	d103      	bne.n	8017f30 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	697a      	ldr	r2, [r7, #20]
 8017f2c:	609a      	str	r2, [r3, #8]
 8017f2e:	e002      	b.n	8017f36 <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8017f30:	68fb      	ldr	r3, [r7, #12]
 8017f32:	697a      	ldr	r2, [r7, #20]
 8017f34:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8017f36:	2300      	movs	r3, #0
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	371c      	adds	r7, #28
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f42:	4770      	bx	lr

08017f44 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8017f44:	b480      	push	{r7}
 8017f46:	b087      	sub	sp, #28
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8017f50:	2300      	movs	r3, #0
 8017f52:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2b10      	cmp	r3, #16
 8017f58:	d103      	bne.n	8017f62 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	68db      	ldr	r3, [r3, #12]
 8017f5e:	617b      	str	r3, [r7, #20]
 8017f60:	e002      	b.n	8017f68 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f66:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8017f68:	2300      	movs	r3, #0
 8017f6a:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8017f70:	68bb      	ldr	r3, [r7, #8]
 8017f72:	685b      	ldr	r3, [r3, #4]
 8017f74:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f76:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	689b      	ldr	r3, [r3, #8]
 8017f7c:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8017f7e:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8017f80:	68bb      	ldr	r3, [r7, #8]
 8017f82:	68db      	ldr	r3, [r3, #12]
 8017f84:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8017f86:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8017f88:	697a      	ldr	r2, [r7, #20]
 8017f8a:	4313      	orrs	r3, r2
 8017f8c:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	2b10      	cmp	r3, #16
 8017f92:	d103      	bne.n	8017f9c <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	697a      	ldr	r2, [r7, #20]
 8017f98:	60da      	str	r2, [r3, #12]
 8017f9a:	e002      	b.n	8017fa2 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	697a      	ldr	r2, [r7, #20]
 8017fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8017fa2:	2300      	movs	r3, #0
}
 8017fa4:	4618      	mov	r0, r3
 8017fa6:	371c      	adds	r7, #28
 8017fa8:	46bd      	mov	sp, r7
 8017faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fae:	4770      	bx	lr

08017fb0 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b083      	sub	sp, #12
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
 8017fb8:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 8017fba:	683b      	ldr	r3, [r7, #0]
 8017fbc:	2b10      	cmp	r3, #16
 8017fbe:	d106      	bne.n	8017fce <FSMC_NAND_DeInit+0x1e>
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	f023 0204 	bic.w	r2, r3, #4
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	601a      	str	r2, [r3, #0]
 8017fcc:	e005      	b.n	8017fda <FSMC_NAND_DeInit+0x2a>
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6a1b      	ldr	r3, [r3, #32]
 8017fd2:	f023 0204 	bic.w	r2, r3, #4
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 8017fda:	683b      	ldr	r3, [r7, #0]
 8017fdc:	2b10      	cmp	r3, #16
 8017fde:	d10e      	bne.n	8017ffe <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	2218      	movs	r2, #24
 8017fe4:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	2240      	movs	r2, #64	; 0x40
 8017fea:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8017ff2:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8017ffa:	60da      	str	r2, [r3, #12]
 8017ffc:	e00d      	b.n	801801a <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	2218      	movs	r2, #24
 8018002:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	2240      	movs	r2, #64	; 0x40
 8018008:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018010:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018018:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 801801a:	2300      	movs	r3, #0
}
 801801c:	4618      	mov	r0, r3
 801801e:	370c      	adds	r7, #12
 8018020:	46bd      	mov	sp, r7
 8018022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018026:	4770      	bx	lr

08018028 <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8018028:	b480      	push	{r7}
 801802a:	b083      	sub	sp, #12
 801802c:	af00      	add	r7, sp, #0
 801802e:	6078      	str	r0, [r7, #4]
 8018030:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018032:	683b      	ldr	r3, [r7, #0]
 8018034:	2b10      	cmp	r3, #16
 8018036:	d106      	bne.n	8018046 <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	601a      	str	r2, [r3, #0]
 8018044:	e005      	b.n	8018052 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	6a1b      	ldr	r3, [r3, #32]
 801804a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018052:	2300      	movs	r3, #0
}
 8018054:	4618      	mov	r0, r3
 8018056:	370c      	adds	r7, #12
 8018058:	46bd      	mov	sp, r7
 801805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805e:	4770      	bx	lr

08018060 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018060:	b480      	push	{r7}
 8018062:	b083      	sub	sp, #12
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	2b10      	cmp	r3, #16
 801806e:	d106      	bne.n	801807e <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	601a      	str	r2, [r3, #0]
 801807c:	e005      	b.n	801808a <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	6a1b      	ldr	r3, [r3, #32]
 8018082:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 801808a:	2300      	movs	r3, #0
}
 801808c:	4618      	mov	r0, r3
 801808e:	370c      	adds	r7, #12
 8018090:	46bd      	mov	sp, r7
 8018092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018096:	4770      	bx	lr

08018098 <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b086      	sub	sp, #24
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
 80180a4:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80180a6:	2300      	movs	r3, #0
 80180a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80180aa:	f7ee f825 	bl	80060f8 <HAL_GetTick>
 80180ae:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80180b0:	e010      	b.n	80180d4 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80180b2:	683b      	ldr	r3, [r7, #0]
 80180b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180b8:	d00c      	beq.n	80180d4 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80180ba:	683b      	ldr	r3, [r7, #0]
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d007      	beq.n	80180d0 <FSMC_NAND_GetECC+0x38>
 80180c0:	f7ee f81a 	bl	80060f8 <HAL_GetTick>
 80180c4:	4602      	mov	r2, r0
 80180c6:	697b      	ldr	r3, [r7, #20]
 80180c8:	1ad3      	subs	r3, r2, r3
 80180ca:	683a      	ldr	r2, [r7, #0]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d201      	bcs.n	80180d4 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 80180d0:	2303      	movs	r3, #3
 80180d2:	e024      	b.n	801811e <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	2b10      	cmp	r3, #16
 80180d8:	d109      	bne.n	80180ee <FSMC_NAND_GetECC+0x56>
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	685b      	ldr	r3, [r3, #4]
 80180de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180e2:	2b40      	cmp	r3, #64	; 0x40
 80180e4:	bf14      	ite	ne
 80180e6:	2301      	movne	r3, #1
 80180e8:	2300      	moveq	r3, #0
 80180ea:	b2db      	uxtb	r3, r3
 80180ec:	e008      	b.n	8018100 <FSMC_NAND_GetECC+0x68>
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180f6:	2b40      	cmp	r3, #64	; 0x40
 80180f8:	bf14      	ite	ne
 80180fa:	2301      	movne	r3, #1
 80180fc:	2300      	moveq	r3, #0
 80180fe:	b2db      	uxtb	r3, r3
 8018100:	2b00      	cmp	r3, #0
 8018102:	d1d6      	bne.n	80180b2 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	2b10      	cmp	r3, #16
 8018108:	d104      	bne.n	8018114 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	695a      	ldr	r2, [r3, #20]
 801810e:	68bb      	ldr	r3, [r7, #8]
 8018110:	601a      	str	r2, [r3, #0]
 8018112:	e003      	b.n	801811c <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018118:	68bb      	ldr	r3, [r7, #8]
 801811a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 801811c:	2300      	movs	r3, #0
}
 801811e:	4618      	mov	r0, r3
 8018120:	3718      	adds	r7, #24
 8018122:	46bd      	mov	sp, r7
 8018124:	bd80      	pop	{r7, pc}

08018126 <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 8018126:	b480      	push	{r7}
 8018128:	b085      	sub	sp, #20
 801812a:	af00      	add	r7, sp, #0
 801812c:	6078      	str	r0, [r7, #4]
 801812e:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018130:	2300      	movs	r3, #0
 8018132:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	681b      	ldr	r3, [r3, #0]
 8018138:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018140:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018144:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018146:	683b      	ldr	r3, [r7, #0]
 8018148:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	685b      	ldr	r3, [r3, #4]
 801814e:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018150:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	689b      	ldr	r3, [r3, #8]
 8018156:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 8018158:	431a      	orrs	r2, r3
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	4313      	orrs	r3, r2
 801815e:	f043 0310 	orr.w	r3, r3, #16
 8018162:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 801816a:	2300      	movs	r3, #0
}
 801816c:	4618      	mov	r0, r3
 801816e:	3714      	adds	r7, #20
 8018170:	46bd      	mov	sp, r7
 8018172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018176:	4770      	bx	lr

08018178 <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018178:	b480      	push	{r7}
 801817a:	b085      	sub	sp, #20
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018182:	2300      	movs	r3, #0
 8018184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	689b      	ldr	r3, [r3, #8]
 801818a:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 801818c:	2300      	movs	r3, #0
 801818e:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 8018190:	683b      	ldr	r3, [r7, #0]
 8018192:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 801819a:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 801819c:	683b      	ldr	r3, [r7, #0]
 801819e:	689b      	ldr	r3, [r3, #8]
 80181a0:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 80181a2:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 80181a4:	683b      	ldr	r3, [r7, #0]
 80181a6:	68db      	ldr	r3, [r3, #12]
 80181a8:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 80181aa:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80181ac:	68fa      	ldr	r2, [r7, #12]
 80181ae:	4313      	orrs	r3, r2
 80181b0:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	68fa      	ldr	r2, [r7, #12]
 80181b6:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 80181b8:	2300      	movs	r3, #0
}
 80181ba:	4618      	mov	r0, r3
 80181bc:	3714      	adds	r7, #20
 80181be:	46bd      	mov	sp, r7
 80181c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c4:	4770      	bx	lr

080181c6 <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80181c6:	b480      	push	{r7}
 80181c8:	b085      	sub	sp, #20
 80181ca:	af00      	add	r7, sp, #0
 80181cc:	6078      	str	r0, [r7, #4]
 80181ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80181d0:	2300      	movs	r3, #0
 80181d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 80181da:	2300      	movs	r3, #0
 80181dc:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 80181e2:	683b      	ldr	r3, [r7, #0]
 80181e4:	685b      	ldr	r3, [r3, #4]
 80181e6:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 80181e8:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 80181ea:	683b      	ldr	r3, [r7, #0]
 80181ec:	689b      	ldr	r3, [r3, #8]
 80181ee:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 80181f0:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 80181f2:	683b      	ldr	r3, [r7, #0]
 80181f4:	68db      	ldr	r3, [r3, #12]
 80181f6:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 80181f8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 80181fa:	68fa      	ldr	r2, [r7, #12]
 80181fc:	4313      	orrs	r3, r2
 80181fe:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	68fa      	ldr	r2, [r7, #12]
 8018204:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 8018206:	2300      	movs	r3, #0
}
 8018208:	4618      	mov	r0, r3
 801820a:	3714      	adds	r7, #20
 801820c:	46bd      	mov	sp, r7
 801820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018212:	4770      	bx	lr

08018214 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 801821e:	2300      	movs	r3, #0
 8018220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	691b      	ldr	r3, [r3, #16]
 8018226:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 8018228:	2300      	movs	r3, #0
 801822a:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018230:	683b      	ldr	r3, [r7, #0]
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018236:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018238:	683b      	ldr	r3, [r7, #0]
 801823a:	689b      	ldr	r3, [r3, #8]
 801823c:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 801823e:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 8018240:	683b      	ldr	r3, [r7, #0]
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 8018246:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018248:	68fa      	ldr	r2, [r7, #12]
 801824a:	4313      	orrs	r3, r2
 801824c:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	68fa      	ldr	r2, [r7, #12]
 8018252:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018254:	2300      	movs	r3, #0
}
 8018256:	4618      	mov	r0, r3
 8018258:	3714      	adds	r7, #20
 801825a:	46bd      	mov	sp, r7
 801825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018260:	4770      	bx	lr

08018262 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 8018262:	b480      	push	{r7}
 8018264:	b083      	sub	sp, #12
 8018266:	af00      	add	r7, sp, #0
 8018268:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	f023 0204 	bic.w	r2, r3, #4
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	2218      	movs	r2, #24
 801827a:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2200      	movs	r2, #0
 8018280:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018288:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018290:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018298:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	370c      	adds	r7, #12
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <strlen>:
 80182a8:	4603      	mov	r3, r0
 80182aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80182ae:	2a00      	cmp	r2, #0
 80182b0:	d1fb      	bne.n	80182aa <strlen+0x2>
 80182b2:	1a18      	subs	r0, r3, r0
 80182b4:	3801      	subs	r0, #1
 80182b6:	4770      	bx	lr
	...

080182c0 <memchr>:
 80182c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80182c4:	2a10      	cmp	r2, #16
 80182c6:	db2b      	blt.n	8018320 <memchr+0x60>
 80182c8:	f010 0f07 	tst.w	r0, #7
 80182cc:	d008      	beq.n	80182e0 <memchr+0x20>
 80182ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80182d2:	3a01      	subs	r2, #1
 80182d4:	428b      	cmp	r3, r1
 80182d6:	d02d      	beq.n	8018334 <memchr+0x74>
 80182d8:	f010 0f07 	tst.w	r0, #7
 80182dc:	b342      	cbz	r2, 8018330 <memchr+0x70>
 80182de:	d1f6      	bne.n	80182ce <memchr+0xe>
 80182e0:	b4f0      	push	{r4, r5, r6, r7}
 80182e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80182e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80182ea:	f022 0407 	bic.w	r4, r2, #7
 80182ee:	f07f 0700 	mvns.w	r7, #0
 80182f2:	2300      	movs	r3, #0
 80182f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80182f8:	3c08      	subs	r4, #8
 80182fa:	ea85 0501 	eor.w	r5, r5, r1
 80182fe:	ea86 0601 	eor.w	r6, r6, r1
 8018302:	fa85 f547 	uadd8	r5, r5, r7
 8018306:	faa3 f587 	sel	r5, r3, r7
 801830a:	fa86 f647 	uadd8	r6, r6, r7
 801830e:	faa5 f687 	sel	r6, r5, r7
 8018312:	b98e      	cbnz	r6, 8018338 <memchr+0x78>
 8018314:	d1ee      	bne.n	80182f4 <memchr+0x34>
 8018316:	bcf0      	pop	{r4, r5, r6, r7}
 8018318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801831c:	f002 0207 	and.w	r2, r2, #7
 8018320:	b132      	cbz	r2, 8018330 <memchr+0x70>
 8018322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018326:	3a01      	subs	r2, #1
 8018328:	ea83 0301 	eor.w	r3, r3, r1
 801832c:	b113      	cbz	r3, 8018334 <memchr+0x74>
 801832e:	d1f8      	bne.n	8018322 <memchr+0x62>
 8018330:	2000      	movs	r0, #0
 8018332:	4770      	bx	lr
 8018334:	3801      	subs	r0, #1
 8018336:	4770      	bx	lr
 8018338:	2d00      	cmp	r5, #0
 801833a:	bf06      	itte	eq
 801833c:	4635      	moveq	r5, r6
 801833e:	3803      	subeq	r0, #3
 8018340:	3807      	subne	r0, #7
 8018342:	f015 0f01 	tst.w	r5, #1
 8018346:	d107      	bne.n	8018358 <memchr+0x98>
 8018348:	3001      	adds	r0, #1
 801834a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801834e:	bf02      	ittt	eq
 8018350:	3001      	addeq	r0, #1
 8018352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018356:	3001      	addeq	r0, #1
 8018358:	bcf0      	pop	{r4, r5, r6, r7}
 801835a:	3801      	subs	r0, #1
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop

08018360 <__aeabi_drsub>:
 8018360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018364:	e002      	b.n	801836c <__adddf3>
 8018366:	bf00      	nop

08018368 <__aeabi_dsub>:
 8018368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801836c <__adddf3>:
 801836c:	b530      	push	{r4, r5, lr}
 801836e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8018372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8018376:	ea94 0f05 	teq	r4, r5
 801837a:	bf08      	it	eq
 801837c:	ea90 0f02 	teqeq	r0, r2
 8018380:	bf1f      	itttt	ne
 8018382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8018386:	ea55 0c02 	orrsne.w	ip, r5, r2
 801838a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801838e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018392:	f000 80e2 	beq.w	801855a <__adddf3+0x1ee>
 8018396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801839a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801839e:	bfb8      	it	lt
 80183a0:	426d      	neglt	r5, r5
 80183a2:	dd0c      	ble.n	80183be <__adddf3+0x52>
 80183a4:	442c      	add	r4, r5
 80183a6:	ea80 0202 	eor.w	r2, r0, r2
 80183aa:	ea81 0303 	eor.w	r3, r1, r3
 80183ae:	ea82 0000 	eor.w	r0, r2, r0
 80183b2:	ea83 0101 	eor.w	r1, r3, r1
 80183b6:	ea80 0202 	eor.w	r2, r0, r2
 80183ba:	ea81 0303 	eor.w	r3, r1, r3
 80183be:	2d36      	cmp	r5, #54	; 0x36
 80183c0:	bf88      	it	hi
 80183c2:	bd30      	pophi	{r4, r5, pc}
 80183c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80183c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80183cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80183d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80183d4:	d002      	beq.n	80183dc <__adddf3+0x70>
 80183d6:	4240      	negs	r0, r0
 80183d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80183dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80183e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80183e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80183e8:	d002      	beq.n	80183f0 <__adddf3+0x84>
 80183ea:	4252      	negs	r2, r2
 80183ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80183f0:	ea94 0f05 	teq	r4, r5
 80183f4:	f000 80a7 	beq.w	8018546 <__adddf3+0x1da>
 80183f8:	f1a4 0401 	sub.w	r4, r4, #1
 80183fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8018400:	db0d      	blt.n	801841e <__adddf3+0xb2>
 8018402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018406:	fa22 f205 	lsr.w	r2, r2, r5
 801840a:	1880      	adds	r0, r0, r2
 801840c:	f141 0100 	adc.w	r1, r1, #0
 8018410:	fa03 f20e 	lsl.w	r2, r3, lr
 8018414:	1880      	adds	r0, r0, r2
 8018416:	fa43 f305 	asr.w	r3, r3, r5
 801841a:	4159      	adcs	r1, r3
 801841c:	e00e      	b.n	801843c <__adddf3+0xd0>
 801841e:	f1a5 0520 	sub.w	r5, r5, #32
 8018422:	f10e 0e20 	add.w	lr, lr, #32
 8018426:	2a01      	cmp	r2, #1
 8018428:	fa03 fc0e 	lsl.w	ip, r3, lr
 801842c:	bf28      	it	cs
 801842e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018432:	fa43 f305 	asr.w	r3, r3, r5
 8018436:	18c0      	adds	r0, r0, r3
 8018438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801843c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018440:	d507      	bpl.n	8018452 <__adddf3+0xe6>
 8018442:	f04f 0e00 	mov.w	lr, #0
 8018446:	f1dc 0c00 	rsbs	ip, ip, #0
 801844a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801844e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018456:	d31b      	bcc.n	8018490 <__adddf3+0x124>
 8018458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801845c:	d30c      	bcc.n	8018478 <__adddf3+0x10c>
 801845e:	0849      	lsrs	r1, r1, #1
 8018460:	ea5f 0030 	movs.w	r0, r0, rrx
 8018464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018468:	f104 0401 	add.w	r4, r4, #1
 801846c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8018470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8018474:	f080 809a 	bcs.w	80185ac <__adddf3+0x240>
 8018478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801847c:	bf08      	it	eq
 801847e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018482:	f150 0000 	adcs.w	r0, r0, #0
 8018486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801848a:	ea41 0105 	orr.w	r1, r1, r5
 801848e:	bd30      	pop	{r4, r5, pc}
 8018490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8018494:	4140      	adcs	r0, r0
 8018496:	eb41 0101 	adc.w	r1, r1, r1
 801849a:	3c01      	subs	r4, #1
 801849c:	bf28      	it	cs
 801849e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80184a2:	d2e9      	bcs.n	8018478 <__adddf3+0x10c>
 80184a4:	f091 0f00 	teq	r1, #0
 80184a8:	bf04      	itt	eq
 80184aa:	4601      	moveq	r1, r0
 80184ac:	2000      	moveq	r0, #0
 80184ae:	fab1 f381 	clz	r3, r1
 80184b2:	bf08      	it	eq
 80184b4:	3320      	addeq	r3, #32
 80184b6:	f1a3 030b 	sub.w	r3, r3, #11
 80184ba:	f1b3 0220 	subs.w	r2, r3, #32
 80184be:	da0c      	bge.n	80184da <__adddf3+0x16e>
 80184c0:	320c      	adds	r2, #12
 80184c2:	dd08      	ble.n	80184d6 <__adddf3+0x16a>
 80184c4:	f102 0c14 	add.w	ip, r2, #20
 80184c8:	f1c2 020c 	rsb	r2, r2, #12
 80184cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80184d0:	fa21 f102 	lsr.w	r1, r1, r2
 80184d4:	e00c      	b.n	80184f0 <__adddf3+0x184>
 80184d6:	f102 0214 	add.w	r2, r2, #20
 80184da:	bfd8      	it	le
 80184dc:	f1c2 0c20 	rsble	ip, r2, #32
 80184e0:	fa01 f102 	lsl.w	r1, r1, r2
 80184e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80184e8:	bfdc      	itt	le
 80184ea:	ea41 010c 	orrle.w	r1, r1, ip
 80184ee:	4090      	lslle	r0, r2
 80184f0:	1ae4      	subs	r4, r4, r3
 80184f2:	bfa2      	ittt	ge
 80184f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80184f8:	4329      	orrge	r1, r5
 80184fa:	bd30      	popge	{r4, r5, pc}
 80184fc:	ea6f 0404 	mvn.w	r4, r4
 8018500:	3c1f      	subs	r4, #31
 8018502:	da1c      	bge.n	801853e <__adddf3+0x1d2>
 8018504:	340c      	adds	r4, #12
 8018506:	dc0e      	bgt.n	8018526 <__adddf3+0x1ba>
 8018508:	f104 0414 	add.w	r4, r4, #20
 801850c:	f1c4 0220 	rsb	r2, r4, #32
 8018510:	fa20 f004 	lsr.w	r0, r0, r4
 8018514:	fa01 f302 	lsl.w	r3, r1, r2
 8018518:	ea40 0003 	orr.w	r0, r0, r3
 801851c:	fa21 f304 	lsr.w	r3, r1, r4
 8018520:	ea45 0103 	orr.w	r1, r5, r3
 8018524:	bd30      	pop	{r4, r5, pc}
 8018526:	f1c4 040c 	rsb	r4, r4, #12
 801852a:	f1c4 0220 	rsb	r2, r4, #32
 801852e:	fa20 f002 	lsr.w	r0, r0, r2
 8018532:	fa01 f304 	lsl.w	r3, r1, r4
 8018536:	ea40 0003 	orr.w	r0, r0, r3
 801853a:	4629      	mov	r1, r5
 801853c:	bd30      	pop	{r4, r5, pc}
 801853e:	fa21 f004 	lsr.w	r0, r1, r4
 8018542:	4629      	mov	r1, r5
 8018544:	bd30      	pop	{r4, r5, pc}
 8018546:	f094 0f00 	teq	r4, #0
 801854a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801854e:	bf06      	itte	eq
 8018550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018554:	3401      	addeq	r4, #1
 8018556:	3d01      	subne	r5, #1
 8018558:	e74e      	b.n	80183f8 <__adddf3+0x8c>
 801855a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801855e:	bf18      	it	ne
 8018560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018564:	d029      	beq.n	80185ba <__adddf3+0x24e>
 8018566:	ea94 0f05 	teq	r4, r5
 801856a:	bf08      	it	eq
 801856c:	ea90 0f02 	teqeq	r0, r2
 8018570:	d005      	beq.n	801857e <__adddf3+0x212>
 8018572:	ea54 0c00 	orrs.w	ip, r4, r0
 8018576:	bf04      	itt	eq
 8018578:	4619      	moveq	r1, r3
 801857a:	4610      	moveq	r0, r2
 801857c:	bd30      	pop	{r4, r5, pc}
 801857e:	ea91 0f03 	teq	r1, r3
 8018582:	bf1e      	ittt	ne
 8018584:	2100      	movne	r1, #0
 8018586:	2000      	movne	r0, #0
 8018588:	bd30      	popne	{r4, r5, pc}
 801858a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801858e:	d105      	bne.n	801859c <__adddf3+0x230>
 8018590:	0040      	lsls	r0, r0, #1
 8018592:	4149      	adcs	r1, r1
 8018594:	bf28      	it	cs
 8018596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801859a:	bd30      	pop	{r4, r5, pc}
 801859c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80185a0:	bf3c      	itt	cc
 80185a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80185a6:	bd30      	popcc	{r4, r5, pc}
 80185a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80185ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80185b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80185b4:	f04f 0000 	mov.w	r0, #0
 80185b8:	bd30      	pop	{r4, r5, pc}
 80185ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80185be:	bf1a      	itte	ne
 80185c0:	4619      	movne	r1, r3
 80185c2:	4610      	movne	r0, r2
 80185c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80185c8:	bf1c      	itt	ne
 80185ca:	460b      	movne	r3, r1
 80185cc:	4602      	movne	r2, r0
 80185ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80185d2:	bf06      	itte	eq
 80185d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80185d8:	ea91 0f03 	teqeq	r1, r3
 80185dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80185e0:	bd30      	pop	{r4, r5, pc}
 80185e2:	bf00      	nop

080185e4 <__aeabi_ui2d>:
 80185e4:	f090 0f00 	teq	r0, #0
 80185e8:	bf04      	itt	eq
 80185ea:	2100      	moveq	r1, #0
 80185ec:	4770      	bxeq	lr
 80185ee:	b530      	push	{r4, r5, lr}
 80185f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80185f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80185f8:	f04f 0500 	mov.w	r5, #0
 80185fc:	f04f 0100 	mov.w	r1, #0
 8018600:	e750      	b.n	80184a4 <__adddf3+0x138>
 8018602:	bf00      	nop

08018604 <__aeabi_i2d>:
 8018604:	f090 0f00 	teq	r0, #0
 8018608:	bf04      	itt	eq
 801860a:	2100      	moveq	r1, #0
 801860c:	4770      	bxeq	lr
 801860e:	b530      	push	{r4, r5, lr}
 8018610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 801861c:	bf48      	it	mi
 801861e:	4240      	negmi	r0, r0
 8018620:	f04f 0100 	mov.w	r1, #0
 8018624:	e73e      	b.n	80184a4 <__adddf3+0x138>
 8018626:	bf00      	nop

08018628 <__aeabi_f2d>:
 8018628:	0042      	lsls	r2, r0, #1
 801862a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 801862e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018636:	bf1f      	itttt	ne
 8018638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 801863c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018644:	4770      	bxne	lr
 8018646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 801864a:	bf08      	it	eq
 801864c:	4770      	bxeq	lr
 801864e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018652:	bf04      	itt	eq
 8018654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018658:	4770      	bxeq	lr
 801865a:	b530      	push	{r4, r5, lr}
 801865c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018668:	e71c      	b.n	80184a4 <__adddf3+0x138>
 801866a:	bf00      	nop

0801866c <__aeabi_ul2d>:
 801866c:	ea50 0201 	orrs.w	r2, r0, r1
 8018670:	bf08      	it	eq
 8018672:	4770      	bxeq	lr
 8018674:	b530      	push	{r4, r5, lr}
 8018676:	f04f 0500 	mov.w	r5, #0
 801867a:	e00a      	b.n	8018692 <__aeabi_l2d+0x16>

0801867c <__aeabi_l2d>:
 801867c:	ea50 0201 	orrs.w	r2, r0, r1
 8018680:	bf08      	it	eq
 8018682:	4770      	bxeq	lr
 8018684:	b530      	push	{r4, r5, lr}
 8018686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801868a:	d502      	bpl.n	8018692 <__aeabi_l2d+0x16>
 801868c:	4240      	negs	r0, r0
 801868e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801869a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801869e:	f43f aed8 	beq.w	8018452 <__adddf3+0xe6>
 80186a2:	f04f 0203 	mov.w	r2, #3
 80186a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80186aa:	bf18      	it	ne
 80186ac:	3203      	addne	r2, #3
 80186ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80186b2:	bf18      	it	ne
 80186b4:	3203      	addne	r2, #3
 80186b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80186ba:	f1c2 0320 	rsb	r3, r2, #32
 80186be:	fa00 fc03 	lsl.w	ip, r0, r3
 80186c2:	fa20 f002 	lsr.w	r0, r0, r2
 80186c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80186ca:	ea40 000e 	orr.w	r0, r0, lr
 80186ce:	fa21 f102 	lsr.w	r1, r1, r2
 80186d2:	4414      	add	r4, r2
 80186d4:	e6bd      	b.n	8018452 <__adddf3+0xe6>
 80186d6:	bf00      	nop

080186d8 <__aeabi_dmul>:
 80186d8:	b570      	push	{r4, r5, r6, lr}
 80186da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80186de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80186e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80186e6:	bf1d      	ittte	ne
 80186e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80186ec:	ea94 0f0c 	teqne	r4, ip
 80186f0:	ea95 0f0c 	teqne	r5, ip
 80186f4:	f000 f8de 	bleq	80188b4 <__aeabi_dmul+0x1dc>
 80186f8:	442c      	add	r4, r5
 80186fa:	ea81 0603 	eor.w	r6, r1, r3
 80186fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801870a:	bf18      	it	ne
 801870c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018718:	d038      	beq.n	801878c <__aeabi_dmul+0xb4>
 801871a:	fba0 ce02 	umull	ip, lr, r0, r2
 801871e:	f04f 0500 	mov.w	r5, #0
 8018722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801872a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801872e:	f04f 0600 	mov.w	r6, #0
 8018732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018736:	f09c 0f00 	teq	ip, #0
 801873a:	bf18      	it	ne
 801873c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801874c:	d204      	bcs.n	8018758 <__aeabi_dmul+0x80>
 801874e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018752:	416d      	adcs	r5, r5
 8018754:	eb46 0606 	adc.w	r6, r6, r6
 8018758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801875c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801876c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018770:	bf88      	it	hi
 8018772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018776:	d81e      	bhi.n	80187b6 <__aeabi_dmul+0xde>
 8018778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801877c:	bf08      	it	eq
 801877e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018782:	f150 0000 	adcs.w	r0, r0, #0
 8018786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801878a:	bd70      	pop	{r4, r5, r6, pc}
 801878c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018790:	ea46 0101 	orr.w	r1, r6, r1
 8018794:	ea40 0002 	orr.w	r0, r0, r2
 8018798:	ea81 0103 	eor.w	r1, r1, r3
 801879c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80187a0:	bfc2      	ittt	gt
 80187a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80187a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80187aa:	bd70      	popgt	{r4, r5, r6, pc}
 80187ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80187b0:	f04f 0e00 	mov.w	lr, #0
 80187b4:	3c01      	subs	r4, #1
 80187b6:	f300 80ab 	bgt.w	8018910 <__aeabi_dmul+0x238>
 80187ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80187be:	bfde      	ittt	le
 80187c0:	2000      	movle	r0, #0
 80187c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80187c6:	bd70      	pople	{r4, r5, r6, pc}
 80187c8:	f1c4 0400 	rsb	r4, r4, #0
 80187cc:	3c20      	subs	r4, #32
 80187ce:	da35      	bge.n	801883c <__aeabi_dmul+0x164>
 80187d0:	340c      	adds	r4, #12
 80187d2:	dc1b      	bgt.n	801880c <__aeabi_dmul+0x134>
 80187d4:	f104 0414 	add.w	r4, r4, #20
 80187d8:	f1c4 0520 	rsb	r5, r4, #32
 80187dc:	fa00 f305 	lsl.w	r3, r0, r5
 80187e0:	fa20 f004 	lsr.w	r0, r0, r4
 80187e4:	fa01 f205 	lsl.w	r2, r1, r5
 80187e8:	ea40 0002 	orr.w	r0, r0, r2
 80187ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80187f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80187f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80187f8:	fa21 f604 	lsr.w	r6, r1, r4
 80187fc:	eb42 0106 	adc.w	r1, r2, r6
 8018800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018804:	bf08      	it	eq
 8018806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801880a:	bd70      	pop	{r4, r5, r6, pc}
 801880c:	f1c4 040c 	rsb	r4, r4, #12
 8018810:	f1c4 0520 	rsb	r5, r4, #32
 8018814:	fa00 f304 	lsl.w	r3, r0, r4
 8018818:	fa20 f005 	lsr.w	r0, r0, r5
 801881c:	fa01 f204 	lsl.w	r2, r1, r4
 8018820:	ea40 0002 	orr.w	r0, r0, r2
 8018824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801882c:	f141 0100 	adc.w	r1, r1, #0
 8018830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018834:	bf08      	it	eq
 8018836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801883a:	bd70      	pop	{r4, r5, r6, pc}
 801883c:	f1c4 0520 	rsb	r5, r4, #32
 8018840:	fa00 f205 	lsl.w	r2, r0, r5
 8018844:	ea4e 0e02 	orr.w	lr, lr, r2
 8018848:	fa20 f304 	lsr.w	r3, r0, r4
 801884c:	fa01 f205 	lsl.w	r2, r1, r5
 8018850:	ea43 0302 	orr.w	r3, r3, r2
 8018854:	fa21 f004 	lsr.w	r0, r1, r4
 8018858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801885c:	fa21 f204 	lsr.w	r2, r1, r4
 8018860:	ea20 0002 	bic.w	r0, r0, r2
 8018864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801886c:	bf08      	it	eq
 801886e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018872:	bd70      	pop	{r4, r5, r6, pc}
 8018874:	f094 0f00 	teq	r4, #0
 8018878:	d10f      	bne.n	801889a <__aeabi_dmul+0x1c2>
 801887a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801887e:	0040      	lsls	r0, r0, #1
 8018880:	eb41 0101 	adc.w	r1, r1, r1
 8018884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018888:	bf08      	it	eq
 801888a:	3c01      	subeq	r4, #1
 801888c:	d0f7      	beq.n	801887e <__aeabi_dmul+0x1a6>
 801888e:	ea41 0106 	orr.w	r1, r1, r6
 8018892:	f095 0f00 	teq	r5, #0
 8018896:	bf18      	it	ne
 8018898:	4770      	bxne	lr
 801889a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801889e:	0052      	lsls	r2, r2, #1
 80188a0:	eb43 0303 	adc.w	r3, r3, r3
 80188a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80188a8:	bf08      	it	eq
 80188aa:	3d01      	subeq	r5, #1
 80188ac:	d0f7      	beq.n	801889e <__aeabi_dmul+0x1c6>
 80188ae:	ea43 0306 	orr.w	r3, r3, r6
 80188b2:	4770      	bx	lr
 80188b4:	ea94 0f0c 	teq	r4, ip
 80188b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80188bc:	bf18      	it	ne
 80188be:	ea95 0f0c 	teqne	r5, ip
 80188c2:	d00c      	beq.n	80188de <__aeabi_dmul+0x206>
 80188c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80188c8:	bf18      	it	ne
 80188ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80188ce:	d1d1      	bne.n	8018874 <__aeabi_dmul+0x19c>
 80188d0:	ea81 0103 	eor.w	r1, r1, r3
 80188d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80188d8:	f04f 0000 	mov.w	r0, #0
 80188dc:	bd70      	pop	{r4, r5, r6, pc}
 80188de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80188e2:	bf06      	itte	eq
 80188e4:	4610      	moveq	r0, r2
 80188e6:	4619      	moveq	r1, r3
 80188e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80188ec:	d019      	beq.n	8018922 <__aeabi_dmul+0x24a>
 80188ee:	ea94 0f0c 	teq	r4, ip
 80188f2:	d102      	bne.n	80188fa <__aeabi_dmul+0x222>
 80188f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80188f8:	d113      	bne.n	8018922 <__aeabi_dmul+0x24a>
 80188fa:	ea95 0f0c 	teq	r5, ip
 80188fe:	d105      	bne.n	801890c <__aeabi_dmul+0x234>
 8018900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8018904:	bf1c      	itt	ne
 8018906:	4610      	movne	r0, r2
 8018908:	4619      	movne	r1, r3
 801890a:	d10a      	bne.n	8018922 <__aeabi_dmul+0x24a>
 801890c:	ea81 0103 	eor.w	r1, r1, r3
 8018910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801891c:	f04f 0000 	mov.w	r0, #0
 8018920:	bd70      	pop	{r4, r5, r6, pc}
 8018922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801892a:	bd70      	pop	{r4, r5, r6, pc}

0801892c <__aeabi_ddiv>:
 801892c:	b570      	push	{r4, r5, r6, lr}
 801892e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801893a:	bf1d      	ittte	ne
 801893c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018940:	ea94 0f0c 	teqne	r4, ip
 8018944:	ea95 0f0c 	teqne	r5, ip
 8018948:	f000 f8a7 	bleq	8018a9a <__aeabi_ddiv+0x16e>
 801894c:	eba4 0405 	sub.w	r4, r4, r5
 8018950:	ea81 0e03 	eor.w	lr, r1, r3
 8018954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801895c:	f000 8088 	beq.w	8018a70 <__aeabi_ddiv+0x144>
 8018960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8018968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801896c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8018974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8018978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801897c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8018980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8018984:	429d      	cmp	r5, r3
 8018986:	bf08      	it	eq
 8018988:	4296      	cmpeq	r6, r2
 801898a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801898e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8018992:	d202      	bcs.n	801899a <__aeabi_ddiv+0x6e>
 8018994:	085b      	lsrs	r3, r3, #1
 8018996:	ea4f 0232 	mov.w	r2, r2, rrx
 801899a:	1ab6      	subs	r6, r6, r2
 801899c:	eb65 0503 	sbc.w	r5, r5, r3
 80189a0:	085b      	lsrs	r3, r3, #1
 80189a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80189a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80189aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80189ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80189b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80189b6:	bf22      	ittt	cs
 80189b8:	1ab6      	subcs	r6, r6, r2
 80189ba:	4675      	movcs	r5, lr
 80189bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80189c0:	085b      	lsrs	r3, r3, #1
 80189c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80189c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80189ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80189ce:	bf22      	ittt	cs
 80189d0:	1ab6      	subcs	r6, r6, r2
 80189d2:	4675      	movcs	r5, lr
 80189d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80189d8:	085b      	lsrs	r3, r3, #1
 80189da:	ea4f 0232 	mov.w	r2, r2, rrx
 80189de:	ebb6 0e02 	subs.w	lr, r6, r2
 80189e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80189e6:	bf22      	ittt	cs
 80189e8:	1ab6      	subcs	r6, r6, r2
 80189ea:	4675      	movcs	r5, lr
 80189ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80189f0:	085b      	lsrs	r3, r3, #1
 80189f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80189f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80189fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80189fe:	bf22      	ittt	cs
 8018a00:	1ab6      	subcs	r6, r6, r2
 8018a02:	4675      	movcs	r5, lr
 8018a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8018a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8018a0c:	d018      	beq.n	8018a40 <__aeabi_ddiv+0x114>
 8018a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8018a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8018a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8018a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8018a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8018a2a:	d1c0      	bne.n	80189ae <__aeabi_ddiv+0x82>
 8018a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018a30:	d10b      	bne.n	8018a4a <__aeabi_ddiv+0x11e>
 8018a32:	ea41 0100 	orr.w	r1, r1, r0
 8018a36:	f04f 0000 	mov.w	r0, #0
 8018a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8018a3e:	e7b6      	b.n	80189ae <__aeabi_ddiv+0x82>
 8018a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018a44:	bf04      	itt	eq
 8018a46:	4301      	orreq	r1, r0
 8018a48:	2000      	moveq	r0, #0
 8018a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018a4e:	bf88      	it	hi
 8018a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018a54:	f63f aeaf 	bhi.w	80187b6 <__aeabi_dmul+0xde>
 8018a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8018a5c:	bf04      	itt	eq
 8018a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8018a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018a66:	f150 0000 	adcs.w	r0, r0, #0
 8018a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018a6e:	bd70      	pop	{r4, r5, r6, pc}
 8018a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8018a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8018a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8018a7c:	bfc2      	ittt	gt
 8018a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018a86:	bd70      	popgt	{r4, r5, r6, pc}
 8018a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018a8c:	f04f 0e00 	mov.w	lr, #0
 8018a90:	3c01      	subs	r4, #1
 8018a92:	e690      	b.n	80187b6 <__aeabi_dmul+0xde>
 8018a94:	ea45 0e06 	orr.w	lr, r5, r6
 8018a98:	e68d      	b.n	80187b6 <__aeabi_dmul+0xde>
 8018a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018a9e:	ea94 0f0c 	teq	r4, ip
 8018aa2:	bf08      	it	eq
 8018aa4:	ea95 0f0c 	teqeq	r5, ip
 8018aa8:	f43f af3b 	beq.w	8018922 <__aeabi_dmul+0x24a>
 8018aac:	ea94 0f0c 	teq	r4, ip
 8018ab0:	d10a      	bne.n	8018ac8 <__aeabi_ddiv+0x19c>
 8018ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018ab6:	f47f af34 	bne.w	8018922 <__aeabi_dmul+0x24a>
 8018aba:	ea95 0f0c 	teq	r5, ip
 8018abe:	f47f af25 	bne.w	801890c <__aeabi_dmul+0x234>
 8018ac2:	4610      	mov	r0, r2
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	e72c      	b.n	8018922 <__aeabi_dmul+0x24a>
 8018ac8:	ea95 0f0c 	teq	r5, ip
 8018acc:	d106      	bne.n	8018adc <__aeabi_ddiv+0x1b0>
 8018ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018ad2:	f43f aefd 	beq.w	80188d0 <__aeabi_dmul+0x1f8>
 8018ad6:	4610      	mov	r0, r2
 8018ad8:	4619      	mov	r1, r3
 8018ada:	e722      	b.n	8018922 <__aeabi_dmul+0x24a>
 8018adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018ae0:	bf18      	it	ne
 8018ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018ae6:	f47f aec5 	bne.w	8018874 <__aeabi_dmul+0x19c>
 8018aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8018aee:	f47f af0d 	bne.w	801890c <__aeabi_dmul+0x234>
 8018af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8018af6:	f47f aeeb 	bne.w	80188d0 <__aeabi_dmul+0x1f8>
 8018afa:	e712      	b.n	8018922 <__aeabi_dmul+0x24a>

08018afc <__gedf2>:
 8018afc:	f04f 3cff 	mov.w	ip, #4294967295
 8018b00:	e006      	b.n	8018b10 <__cmpdf2+0x4>
 8018b02:	bf00      	nop

08018b04 <__ledf2>:
 8018b04:	f04f 0c01 	mov.w	ip, #1
 8018b08:	e002      	b.n	8018b10 <__cmpdf2+0x4>
 8018b0a:	bf00      	nop

08018b0c <__cmpdf2>:
 8018b0c:	f04f 0c01 	mov.w	ip, #1
 8018b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8018b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018b20:	bf18      	it	ne
 8018b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8018b26:	d01b      	beq.n	8018b60 <__cmpdf2+0x54>
 8018b28:	b001      	add	sp, #4
 8018b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8018b2e:	bf0c      	ite	eq
 8018b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8018b34:	ea91 0f03 	teqne	r1, r3
 8018b38:	bf02      	ittt	eq
 8018b3a:	ea90 0f02 	teqeq	r0, r2
 8018b3e:	2000      	moveq	r0, #0
 8018b40:	4770      	bxeq	lr
 8018b42:	f110 0f00 	cmn.w	r0, #0
 8018b46:	ea91 0f03 	teq	r1, r3
 8018b4a:	bf58      	it	pl
 8018b4c:	4299      	cmppl	r1, r3
 8018b4e:	bf08      	it	eq
 8018b50:	4290      	cmpeq	r0, r2
 8018b52:	bf2c      	ite	cs
 8018b54:	17d8      	asrcs	r0, r3, #31
 8018b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8018b5a:	f040 0001 	orr.w	r0, r0, #1
 8018b5e:	4770      	bx	lr
 8018b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018b68:	d102      	bne.n	8018b70 <__cmpdf2+0x64>
 8018b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8018b6e:	d107      	bne.n	8018b80 <__cmpdf2+0x74>
 8018b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018b78:	d1d6      	bne.n	8018b28 <__cmpdf2+0x1c>
 8018b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8018b7e:	d0d3      	beq.n	8018b28 <__cmpdf2+0x1c>
 8018b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop

08018b88 <__aeabi_cdrcmple>:
 8018b88:	4684      	mov	ip, r0
 8018b8a:	4610      	mov	r0, r2
 8018b8c:	4662      	mov	r2, ip
 8018b8e:	468c      	mov	ip, r1
 8018b90:	4619      	mov	r1, r3
 8018b92:	4663      	mov	r3, ip
 8018b94:	e000      	b.n	8018b98 <__aeabi_cdcmpeq>
 8018b96:	bf00      	nop

08018b98 <__aeabi_cdcmpeq>:
 8018b98:	b501      	push	{r0, lr}
 8018b9a:	f7ff ffb7 	bl	8018b0c <__cmpdf2>
 8018b9e:	2800      	cmp	r0, #0
 8018ba0:	bf48      	it	mi
 8018ba2:	f110 0f00 	cmnmi.w	r0, #0
 8018ba6:	bd01      	pop	{r0, pc}

08018ba8 <__aeabi_dcmpeq>:
 8018ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018bac:	f7ff fff4 	bl	8018b98 <__aeabi_cdcmpeq>
 8018bb0:	bf0c      	ite	eq
 8018bb2:	2001      	moveq	r0, #1
 8018bb4:	2000      	movne	r0, #0
 8018bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8018bba:	bf00      	nop

08018bbc <__aeabi_dcmplt>:
 8018bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018bc0:	f7ff ffea 	bl	8018b98 <__aeabi_cdcmpeq>
 8018bc4:	bf34      	ite	cc
 8018bc6:	2001      	movcc	r0, #1
 8018bc8:	2000      	movcs	r0, #0
 8018bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8018bce:	bf00      	nop

08018bd0 <__aeabi_dcmple>:
 8018bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018bd4:	f7ff ffe0 	bl	8018b98 <__aeabi_cdcmpeq>
 8018bd8:	bf94      	ite	ls
 8018bda:	2001      	movls	r0, #1
 8018bdc:	2000      	movhi	r0, #0
 8018bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8018be2:	bf00      	nop

08018be4 <__aeabi_dcmpge>:
 8018be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018be8:	f7ff ffce 	bl	8018b88 <__aeabi_cdrcmple>
 8018bec:	bf94      	ite	ls
 8018bee:	2001      	movls	r0, #1
 8018bf0:	2000      	movhi	r0, #0
 8018bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8018bf6:	bf00      	nop

08018bf8 <__aeabi_dcmpgt>:
 8018bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8018bfc:	f7ff ffc4 	bl	8018b88 <__aeabi_cdrcmple>
 8018c00:	bf34      	ite	cc
 8018c02:	2001      	movcc	r0, #1
 8018c04:	2000      	movcs	r0, #0
 8018c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8018c0a:	bf00      	nop

08018c0c <__aeabi_dcmpun>:
 8018c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8018c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c14:	d102      	bne.n	8018c1c <__aeabi_dcmpun+0x10>
 8018c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8018c1a:	d10a      	bne.n	8018c32 <__aeabi_dcmpun+0x26>
 8018c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8018c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8018c24:	d102      	bne.n	8018c2c <__aeabi_dcmpun+0x20>
 8018c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8018c2a:	d102      	bne.n	8018c32 <__aeabi_dcmpun+0x26>
 8018c2c:	f04f 0000 	mov.w	r0, #0
 8018c30:	4770      	bx	lr
 8018c32:	f04f 0001 	mov.w	r0, #1
 8018c36:	4770      	bx	lr

08018c38 <__aeabi_d2iz>:
 8018c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8018c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018c40:	d215      	bcs.n	8018c6e <__aeabi_d2iz+0x36>
 8018c42:	d511      	bpl.n	8018c68 <__aeabi_d2iz+0x30>
 8018c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018c4c:	d912      	bls.n	8018c74 <__aeabi_d2iz+0x3c>
 8018c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8018c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8018c62:	bf18      	it	ne
 8018c64:	4240      	negne	r0, r0
 8018c66:	4770      	bx	lr
 8018c68:	f04f 0000 	mov.w	r0, #0
 8018c6c:	4770      	bx	lr
 8018c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018c72:	d105      	bne.n	8018c80 <__aeabi_d2iz+0x48>
 8018c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8018c78:	bf08      	it	eq
 8018c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8018c7e:	4770      	bx	lr
 8018c80:	f04f 0000 	mov.w	r0, #0
 8018c84:	4770      	bx	lr
 8018c86:	bf00      	nop

08018c88 <__aeabi_d2uiz>:
 8018c88:	004a      	lsls	r2, r1, #1
 8018c8a:	d211      	bcs.n	8018cb0 <__aeabi_d2uiz+0x28>
 8018c8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8018c90:	d211      	bcs.n	8018cb6 <__aeabi_d2uiz+0x2e>
 8018c92:	d50d      	bpl.n	8018cb0 <__aeabi_d2uiz+0x28>
 8018c94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8018c98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8018c9c:	d40e      	bmi.n	8018cbc <__aeabi_d2uiz+0x34>
 8018c9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018ca6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8018caa:	fa23 f002 	lsr.w	r0, r3, r2
 8018cae:	4770      	bx	lr
 8018cb0:	f04f 0000 	mov.w	r0, #0
 8018cb4:	4770      	bx	lr
 8018cb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8018cba:	d102      	bne.n	8018cc2 <__aeabi_d2uiz+0x3a>
 8018cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8018cc0:	4770      	bx	lr
 8018cc2:	f04f 0000 	mov.w	r0, #0
 8018cc6:	4770      	bx	lr

08018cc8 <__aeabi_d2f>:
 8018cc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8018ccc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8018cd0:	bf24      	itt	cs
 8018cd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8018cd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8018cda:	d90d      	bls.n	8018cf8 <__aeabi_d2f+0x30>
 8018cdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8018ce0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8018ce4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8018ce8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8018cec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8018cf0:	bf08      	it	eq
 8018cf2:	f020 0001 	biceq.w	r0, r0, #1
 8018cf6:	4770      	bx	lr
 8018cf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8018cfc:	d121      	bne.n	8018d42 <__aeabi_d2f+0x7a>
 8018cfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8018d02:	bfbc      	itt	lt
 8018d04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8018d08:	4770      	bxlt	lr
 8018d0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018d0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8018d12:	f1c2 0218 	rsb	r2, r2, #24
 8018d16:	f1c2 0c20 	rsb	ip, r2, #32
 8018d1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8018d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8018d22:	bf18      	it	ne
 8018d24:	f040 0001 	orrne.w	r0, r0, #1
 8018d28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8018d2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8018d30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8018d34:	ea40 000c 	orr.w	r0, r0, ip
 8018d38:	fa23 f302 	lsr.w	r3, r3, r2
 8018d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018d40:	e7cc      	b.n	8018cdc <__aeabi_d2f+0x14>
 8018d42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8018d46:	d107      	bne.n	8018d58 <__aeabi_d2f+0x90>
 8018d48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8018d4c:	bf1e      	ittt	ne
 8018d4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8018d52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8018d56:	4770      	bxne	lr
 8018d58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8018d5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8018d60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018d64:	4770      	bx	lr
 8018d66:	bf00      	nop

08018d68 <__aeabi_d2lz>:
 8018d68:	b538      	push	{r3, r4, r5, lr}
 8018d6a:	2200      	movs	r2, #0
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	4604      	mov	r4, r0
 8018d70:	460d      	mov	r5, r1
 8018d72:	f7ff ff23 	bl	8018bbc <__aeabi_dcmplt>
 8018d76:	b928      	cbnz	r0, 8018d84 <__aeabi_d2lz+0x1c>
 8018d78:	4620      	mov	r0, r4
 8018d7a:	4629      	mov	r1, r5
 8018d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018d80:	f000 b80a 	b.w	8018d98 <__aeabi_d2ulz>
 8018d84:	4620      	mov	r0, r4
 8018d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8018d8a:	f000 f805 	bl	8018d98 <__aeabi_d2ulz>
 8018d8e:	4240      	negs	r0, r0
 8018d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018d94:	bd38      	pop	{r3, r4, r5, pc}
 8018d96:	bf00      	nop

08018d98 <__aeabi_d2ulz>:
 8018d98:	b5d0      	push	{r4, r6, r7, lr}
 8018d9a:	4b0c      	ldr	r3, [pc, #48]	; (8018dcc <__aeabi_d2ulz+0x34>)
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	4606      	mov	r6, r0
 8018da0:	460f      	mov	r7, r1
 8018da2:	f7ff fc99 	bl	80186d8 <__aeabi_dmul>
 8018da6:	f7ff ff6f 	bl	8018c88 <__aeabi_d2uiz>
 8018daa:	4604      	mov	r4, r0
 8018dac:	f7ff fc1a 	bl	80185e4 <__aeabi_ui2d>
 8018db0:	4b07      	ldr	r3, [pc, #28]	; (8018dd0 <__aeabi_d2ulz+0x38>)
 8018db2:	2200      	movs	r2, #0
 8018db4:	f7ff fc90 	bl	80186d8 <__aeabi_dmul>
 8018db8:	4602      	mov	r2, r0
 8018dba:	460b      	mov	r3, r1
 8018dbc:	4630      	mov	r0, r6
 8018dbe:	4639      	mov	r1, r7
 8018dc0:	f7ff fad2 	bl	8018368 <__aeabi_dsub>
 8018dc4:	f7ff ff60 	bl	8018c88 <__aeabi_d2uiz>
 8018dc8:	4621      	mov	r1, r4
 8018dca:	bdd0      	pop	{r4, r6, r7, pc}
 8018dcc:	3df00000 	.word	0x3df00000
 8018dd0:	41f00000 	.word	0x41f00000

08018dd4 <__aeabi_uldivmod>:
 8018dd4:	b953      	cbnz	r3, 8018dec <__aeabi_uldivmod+0x18>
 8018dd6:	b94a      	cbnz	r2, 8018dec <__aeabi_uldivmod+0x18>
 8018dd8:	2900      	cmp	r1, #0
 8018dda:	bf08      	it	eq
 8018ddc:	2800      	cmpeq	r0, #0
 8018dde:	bf1c      	itt	ne
 8018de0:	f04f 31ff 	movne.w	r1, #4294967295
 8018de4:	f04f 30ff 	movne.w	r0, #4294967295
 8018de8:	f000 b974 	b.w	80190d4 <__aeabi_idiv0>
 8018dec:	f1ad 0c08 	sub.w	ip, sp, #8
 8018df0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8018df4:	f000 f806 	bl	8018e04 <__udivmoddi4>
 8018df8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e00:	b004      	add	sp, #16
 8018e02:	4770      	bx	lr

08018e04 <__udivmoddi4>:
 8018e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e08:	9d08      	ldr	r5, [sp, #32]
 8018e0a:	4604      	mov	r4, r0
 8018e0c:	468e      	mov	lr, r1
 8018e0e:	2b00      	cmp	r3, #0
 8018e10:	d14d      	bne.n	8018eae <__udivmoddi4+0xaa>
 8018e12:	428a      	cmp	r2, r1
 8018e14:	4694      	mov	ip, r2
 8018e16:	d969      	bls.n	8018eec <__udivmoddi4+0xe8>
 8018e18:	fab2 f282 	clz	r2, r2
 8018e1c:	b152      	cbz	r2, 8018e34 <__udivmoddi4+0x30>
 8018e1e:	fa01 f302 	lsl.w	r3, r1, r2
 8018e22:	f1c2 0120 	rsb	r1, r2, #32
 8018e26:	fa20 f101 	lsr.w	r1, r0, r1
 8018e2a:	fa0c fc02 	lsl.w	ip, ip, r2
 8018e2e:	ea41 0e03 	orr.w	lr, r1, r3
 8018e32:	4094      	lsls	r4, r2
 8018e34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8018e38:	0c21      	lsrs	r1, r4, #16
 8018e3a:	fbbe f6f8 	udiv	r6, lr, r8
 8018e3e:	fa1f f78c 	uxth.w	r7, ip
 8018e42:	fb08 e316 	mls	r3, r8, r6, lr
 8018e46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018e4a:	fb06 f107 	mul.w	r1, r6, r7
 8018e4e:	4299      	cmp	r1, r3
 8018e50:	d90a      	bls.n	8018e68 <__udivmoddi4+0x64>
 8018e52:	eb1c 0303 	adds.w	r3, ip, r3
 8018e56:	f106 30ff 	add.w	r0, r6, #4294967295
 8018e5a:	f080 811f 	bcs.w	801909c <__udivmoddi4+0x298>
 8018e5e:	4299      	cmp	r1, r3
 8018e60:	f240 811c 	bls.w	801909c <__udivmoddi4+0x298>
 8018e64:	3e02      	subs	r6, #2
 8018e66:	4463      	add	r3, ip
 8018e68:	1a5b      	subs	r3, r3, r1
 8018e6a:	b2a4      	uxth	r4, r4
 8018e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8018e70:	fb08 3310 	mls	r3, r8, r0, r3
 8018e74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8018e78:	fb00 f707 	mul.w	r7, r0, r7
 8018e7c:	42a7      	cmp	r7, r4
 8018e7e:	d90a      	bls.n	8018e96 <__udivmoddi4+0x92>
 8018e80:	eb1c 0404 	adds.w	r4, ip, r4
 8018e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8018e88:	f080 810a 	bcs.w	80190a0 <__udivmoddi4+0x29c>
 8018e8c:	42a7      	cmp	r7, r4
 8018e8e:	f240 8107 	bls.w	80190a0 <__udivmoddi4+0x29c>
 8018e92:	4464      	add	r4, ip
 8018e94:	3802      	subs	r0, #2
 8018e96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8018e9a:	1be4      	subs	r4, r4, r7
 8018e9c:	2600      	movs	r6, #0
 8018e9e:	b11d      	cbz	r5, 8018ea8 <__udivmoddi4+0xa4>
 8018ea0:	40d4      	lsrs	r4, r2
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	e9c5 4300 	strd	r4, r3, [r5]
 8018ea8:	4631      	mov	r1, r6
 8018eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018eae:	428b      	cmp	r3, r1
 8018eb0:	d909      	bls.n	8018ec6 <__udivmoddi4+0xc2>
 8018eb2:	2d00      	cmp	r5, #0
 8018eb4:	f000 80ef 	beq.w	8019096 <__udivmoddi4+0x292>
 8018eb8:	2600      	movs	r6, #0
 8018eba:	e9c5 0100 	strd	r0, r1, [r5]
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	4631      	mov	r1, r6
 8018ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ec6:	fab3 f683 	clz	r6, r3
 8018eca:	2e00      	cmp	r6, #0
 8018ecc:	d14a      	bne.n	8018f64 <__udivmoddi4+0x160>
 8018ece:	428b      	cmp	r3, r1
 8018ed0:	d302      	bcc.n	8018ed8 <__udivmoddi4+0xd4>
 8018ed2:	4282      	cmp	r2, r0
 8018ed4:	f200 80f9 	bhi.w	80190ca <__udivmoddi4+0x2c6>
 8018ed8:	1a84      	subs	r4, r0, r2
 8018eda:	eb61 0303 	sbc.w	r3, r1, r3
 8018ede:	2001      	movs	r0, #1
 8018ee0:	469e      	mov	lr, r3
 8018ee2:	2d00      	cmp	r5, #0
 8018ee4:	d0e0      	beq.n	8018ea8 <__udivmoddi4+0xa4>
 8018ee6:	e9c5 4e00 	strd	r4, lr, [r5]
 8018eea:	e7dd      	b.n	8018ea8 <__udivmoddi4+0xa4>
 8018eec:	b902      	cbnz	r2, 8018ef0 <__udivmoddi4+0xec>
 8018eee:	deff      	udf	#255	; 0xff
 8018ef0:	fab2 f282 	clz	r2, r2
 8018ef4:	2a00      	cmp	r2, #0
 8018ef6:	f040 8092 	bne.w	801901e <__udivmoddi4+0x21a>
 8018efa:	eba1 010c 	sub.w	r1, r1, ip
 8018efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8018f02:	fa1f fe8c 	uxth.w	lr, ip
 8018f06:	2601      	movs	r6, #1
 8018f08:	0c20      	lsrs	r0, r4, #16
 8018f0a:	fbb1 f3f7 	udiv	r3, r1, r7
 8018f0e:	fb07 1113 	mls	r1, r7, r3, r1
 8018f12:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8018f16:	fb0e f003 	mul.w	r0, lr, r3
 8018f1a:	4288      	cmp	r0, r1
 8018f1c:	d908      	bls.n	8018f30 <__udivmoddi4+0x12c>
 8018f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8018f22:	f103 38ff 	add.w	r8, r3, #4294967295
 8018f26:	d202      	bcs.n	8018f2e <__udivmoddi4+0x12a>
 8018f28:	4288      	cmp	r0, r1
 8018f2a:	f200 80cb 	bhi.w	80190c4 <__udivmoddi4+0x2c0>
 8018f2e:	4643      	mov	r3, r8
 8018f30:	1a09      	subs	r1, r1, r0
 8018f32:	b2a4      	uxth	r4, r4
 8018f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8018f38:	fb07 1110 	mls	r1, r7, r0, r1
 8018f3c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8018f40:	fb0e fe00 	mul.w	lr, lr, r0
 8018f44:	45a6      	cmp	lr, r4
 8018f46:	d908      	bls.n	8018f5a <__udivmoddi4+0x156>
 8018f48:	eb1c 0404 	adds.w	r4, ip, r4
 8018f4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8018f50:	d202      	bcs.n	8018f58 <__udivmoddi4+0x154>
 8018f52:	45a6      	cmp	lr, r4
 8018f54:	f200 80bb 	bhi.w	80190ce <__udivmoddi4+0x2ca>
 8018f58:	4608      	mov	r0, r1
 8018f5a:	eba4 040e 	sub.w	r4, r4, lr
 8018f5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8018f62:	e79c      	b.n	8018e9e <__udivmoddi4+0x9a>
 8018f64:	f1c6 0720 	rsb	r7, r6, #32
 8018f68:	40b3      	lsls	r3, r6
 8018f6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8018f6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8018f72:	fa20 f407 	lsr.w	r4, r0, r7
 8018f76:	fa01 f306 	lsl.w	r3, r1, r6
 8018f7a:	431c      	orrs	r4, r3
 8018f7c:	40f9      	lsrs	r1, r7
 8018f7e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8018f82:	fa00 f306 	lsl.w	r3, r0, r6
 8018f86:	fbb1 f8f9 	udiv	r8, r1, r9
 8018f8a:	0c20      	lsrs	r0, r4, #16
 8018f8c:	fa1f fe8c 	uxth.w	lr, ip
 8018f90:	fb09 1118 	mls	r1, r9, r8, r1
 8018f94:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8018f98:	fb08 f00e 	mul.w	r0, r8, lr
 8018f9c:	4288      	cmp	r0, r1
 8018f9e:	fa02 f206 	lsl.w	r2, r2, r6
 8018fa2:	d90b      	bls.n	8018fbc <__udivmoddi4+0x1b8>
 8018fa4:	eb1c 0101 	adds.w	r1, ip, r1
 8018fa8:	f108 3aff 	add.w	sl, r8, #4294967295
 8018fac:	f080 8088 	bcs.w	80190c0 <__udivmoddi4+0x2bc>
 8018fb0:	4288      	cmp	r0, r1
 8018fb2:	f240 8085 	bls.w	80190c0 <__udivmoddi4+0x2bc>
 8018fb6:	f1a8 0802 	sub.w	r8, r8, #2
 8018fba:	4461      	add	r1, ip
 8018fbc:	1a09      	subs	r1, r1, r0
 8018fbe:	b2a4      	uxth	r4, r4
 8018fc0:	fbb1 f0f9 	udiv	r0, r1, r9
 8018fc4:	fb09 1110 	mls	r1, r9, r0, r1
 8018fc8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8018fcc:	fb00 fe0e 	mul.w	lr, r0, lr
 8018fd0:	458e      	cmp	lr, r1
 8018fd2:	d908      	bls.n	8018fe6 <__udivmoddi4+0x1e2>
 8018fd4:	eb1c 0101 	adds.w	r1, ip, r1
 8018fd8:	f100 34ff 	add.w	r4, r0, #4294967295
 8018fdc:	d26c      	bcs.n	80190b8 <__udivmoddi4+0x2b4>
 8018fde:	458e      	cmp	lr, r1
 8018fe0:	d96a      	bls.n	80190b8 <__udivmoddi4+0x2b4>
 8018fe2:	3802      	subs	r0, #2
 8018fe4:	4461      	add	r1, ip
 8018fe6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8018fea:	fba0 9402 	umull	r9, r4, r0, r2
 8018fee:	eba1 010e 	sub.w	r1, r1, lr
 8018ff2:	42a1      	cmp	r1, r4
 8018ff4:	46c8      	mov	r8, r9
 8018ff6:	46a6      	mov	lr, r4
 8018ff8:	d356      	bcc.n	80190a8 <__udivmoddi4+0x2a4>
 8018ffa:	d053      	beq.n	80190a4 <__udivmoddi4+0x2a0>
 8018ffc:	b15d      	cbz	r5, 8019016 <__udivmoddi4+0x212>
 8018ffe:	ebb3 0208 	subs.w	r2, r3, r8
 8019002:	eb61 010e 	sbc.w	r1, r1, lr
 8019006:	fa01 f707 	lsl.w	r7, r1, r7
 801900a:	fa22 f306 	lsr.w	r3, r2, r6
 801900e:	40f1      	lsrs	r1, r6
 8019010:	431f      	orrs	r7, r3
 8019012:	e9c5 7100 	strd	r7, r1, [r5]
 8019016:	2600      	movs	r6, #0
 8019018:	4631      	mov	r1, r6
 801901a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801901e:	f1c2 0320 	rsb	r3, r2, #32
 8019022:	40d8      	lsrs	r0, r3
 8019024:	fa0c fc02 	lsl.w	ip, ip, r2
 8019028:	fa21 f303 	lsr.w	r3, r1, r3
 801902c:	4091      	lsls	r1, r2
 801902e:	4301      	orrs	r1, r0
 8019030:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019034:	fa1f fe8c 	uxth.w	lr, ip
 8019038:	fbb3 f0f7 	udiv	r0, r3, r7
 801903c:	fb07 3610 	mls	r6, r7, r0, r3
 8019040:	0c0b      	lsrs	r3, r1, #16
 8019042:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019046:	fb00 f60e 	mul.w	r6, r0, lr
 801904a:	429e      	cmp	r6, r3
 801904c:	fa04 f402 	lsl.w	r4, r4, r2
 8019050:	d908      	bls.n	8019064 <__udivmoddi4+0x260>
 8019052:	eb1c 0303 	adds.w	r3, ip, r3
 8019056:	f100 38ff 	add.w	r8, r0, #4294967295
 801905a:	d22f      	bcs.n	80190bc <__udivmoddi4+0x2b8>
 801905c:	429e      	cmp	r6, r3
 801905e:	d92d      	bls.n	80190bc <__udivmoddi4+0x2b8>
 8019060:	3802      	subs	r0, #2
 8019062:	4463      	add	r3, ip
 8019064:	1b9b      	subs	r3, r3, r6
 8019066:	b289      	uxth	r1, r1
 8019068:	fbb3 f6f7 	udiv	r6, r3, r7
 801906c:	fb07 3316 	mls	r3, r7, r6, r3
 8019070:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8019074:	fb06 f30e 	mul.w	r3, r6, lr
 8019078:	428b      	cmp	r3, r1
 801907a:	d908      	bls.n	801908e <__udivmoddi4+0x28a>
 801907c:	eb1c 0101 	adds.w	r1, ip, r1
 8019080:	f106 38ff 	add.w	r8, r6, #4294967295
 8019084:	d216      	bcs.n	80190b4 <__udivmoddi4+0x2b0>
 8019086:	428b      	cmp	r3, r1
 8019088:	d914      	bls.n	80190b4 <__udivmoddi4+0x2b0>
 801908a:	3e02      	subs	r6, #2
 801908c:	4461      	add	r1, ip
 801908e:	1ac9      	subs	r1, r1, r3
 8019090:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8019094:	e738      	b.n	8018f08 <__udivmoddi4+0x104>
 8019096:	462e      	mov	r6, r5
 8019098:	4628      	mov	r0, r5
 801909a:	e705      	b.n	8018ea8 <__udivmoddi4+0xa4>
 801909c:	4606      	mov	r6, r0
 801909e:	e6e3      	b.n	8018e68 <__udivmoddi4+0x64>
 80190a0:	4618      	mov	r0, r3
 80190a2:	e6f8      	b.n	8018e96 <__udivmoddi4+0x92>
 80190a4:	454b      	cmp	r3, r9
 80190a6:	d2a9      	bcs.n	8018ffc <__udivmoddi4+0x1f8>
 80190a8:	ebb9 0802 	subs.w	r8, r9, r2
 80190ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80190b0:	3801      	subs	r0, #1
 80190b2:	e7a3      	b.n	8018ffc <__udivmoddi4+0x1f8>
 80190b4:	4646      	mov	r6, r8
 80190b6:	e7ea      	b.n	801908e <__udivmoddi4+0x28a>
 80190b8:	4620      	mov	r0, r4
 80190ba:	e794      	b.n	8018fe6 <__udivmoddi4+0x1e2>
 80190bc:	4640      	mov	r0, r8
 80190be:	e7d1      	b.n	8019064 <__udivmoddi4+0x260>
 80190c0:	46d0      	mov	r8, sl
 80190c2:	e77b      	b.n	8018fbc <__udivmoddi4+0x1b8>
 80190c4:	3b02      	subs	r3, #2
 80190c6:	4461      	add	r1, ip
 80190c8:	e732      	b.n	8018f30 <__udivmoddi4+0x12c>
 80190ca:	4630      	mov	r0, r6
 80190cc:	e709      	b.n	8018ee2 <__udivmoddi4+0xde>
 80190ce:	4464      	add	r4, ip
 80190d0:	3802      	subs	r0, #2
 80190d2:	e742      	b.n	8018f5a <__udivmoddi4+0x156>

080190d4 <__aeabi_idiv0>:
 80190d4:	4770      	bx	lr
 80190d6:	bf00      	nop

080190d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80190d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019110 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80190dc:	480d      	ldr	r0, [pc, #52]	; (8019114 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80190de:	490e      	ldr	r1, [pc, #56]	; (8019118 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80190e0:	4a0e      	ldr	r2, [pc, #56]	; (801911c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80190e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80190e4:	e002      	b.n	80190ec <LoopCopyDataInit>

080190e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80190e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80190e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80190ea:	3304      	adds	r3, #4

080190ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80190ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80190ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80190f0:	d3f9      	bcc.n	80190e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80190f2:	4a0b      	ldr	r2, [pc, #44]	; (8019120 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80190f4:	4c0b      	ldr	r4, [pc, #44]	; (8019124 <LoopFillZerobss+0x26>)
  movs r3, #0
 80190f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80190f8:	e001      	b.n	80190fe <LoopFillZerobss>

080190fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80190fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80190fc:	3204      	adds	r2, #4

080190fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80190fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019100:	d3fb      	bcc.n	80190fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019102:	f7ec fda7 	bl	8005c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019106:	f000 f81b 	bl	8019140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801910a:	f7e8 fc25 	bl	8001958 <main>
  bx  lr    
 801910e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019110:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019118:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801911c:	08051de8 	.word	0x08051de8
  ldr r2, =_sbss
 8019120:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019124:	200008a4 	.word	0x200008a4

08019128 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019128:	e7fe      	b.n	8019128 <ADC_IRQHandler>

0801912a <atoi>:
 801912a:	220a      	movs	r2, #10
 801912c:	2100      	movs	r1, #0
 801912e:	f001 bd7f 	b.w	801ac30 <strtol>
	...

08019134 <__errno>:
 8019134:	4b01      	ldr	r3, [pc, #4]	; (801913c <__errno+0x8>)
 8019136:	6818      	ldr	r0, [r3, #0]
 8019138:	4770      	bx	lr
 801913a:	bf00      	nop
 801913c:	20000064 	.word	0x20000064

08019140 <__libc_init_array>:
 8019140:	b570      	push	{r4, r5, r6, lr}
 8019142:	4d0d      	ldr	r5, [pc, #52]	; (8019178 <__libc_init_array+0x38>)
 8019144:	4c0d      	ldr	r4, [pc, #52]	; (801917c <__libc_init_array+0x3c>)
 8019146:	1b64      	subs	r4, r4, r5
 8019148:	10a4      	asrs	r4, r4, #2
 801914a:	2600      	movs	r6, #0
 801914c:	42a6      	cmp	r6, r4
 801914e:	d109      	bne.n	8019164 <__libc_init_array+0x24>
 8019150:	4d0b      	ldr	r5, [pc, #44]	; (8019180 <__libc_init_array+0x40>)
 8019152:	4c0c      	ldr	r4, [pc, #48]	; (8019184 <__libc_init_array+0x44>)
 8019154:	f005 fc46 	bl	801e9e4 <_init>
 8019158:	1b64      	subs	r4, r4, r5
 801915a:	10a4      	asrs	r4, r4, #2
 801915c:	2600      	movs	r6, #0
 801915e:	42a6      	cmp	r6, r4
 8019160:	d105      	bne.n	801916e <__libc_init_array+0x2e>
 8019162:	bd70      	pop	{r4, r5, r6, pc}
 8019164:	f855 3b04 	ldr.w	r3, [r5], #4
 8019168:	4798      	blx	r3
 801916a:	3601      	adds	r6, #1
 801916c:	e7ee      	b.n	801914c <__libc_init_array+0xc>
 801916e:	f855 3b04 	ldr.w	r3, [r5], #4
 8019172:	4798      	blx	r3
 8019174:	3601      	adds	r6, #1
 8019176:	e7f2      	b.n	801915e <__libc_init_array+0x1e>
 8019178:	08051de0 	.word	0x08051de0
 801917c:	08051de0 	.word	0x08051de0
 8019180:	08051de0 	.word	0x08051de0
 8019184:	08051de4 	.word	0x08051de4

08019188 <memset>:
 8019188:	4402      	add	r2, r0
 801918a:	4603      	mov	r3, r0
 801918c:	4293      	cmp	r3, r2
 801918e:	d100      	bne.n	8019192 <memset+0xa>
 8019190:	4770      	bx	lr
 8019192:	f803 1b01 	strb.w	r1, [r3], #1
 8019196:	e7f9      	b.n	801918c <memset+0x4>

08019198 <__cvt>:
 8019198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801919c:	ec55 4b10 	vmov	r4, r5, d0
 80191a0:	2d00      	cmp	r5, #0
 80191a2:	460e      	mov	r6, r1
 80191a4:	4619      	mov	r1, r3
 80191a6:	462b      	mov	r3, r5
 80191a8:	bfbb      	ittet	lt
 80191aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80191ae:	461d      	movlt	r5, r3
 80191b0:	2300      	movge	r3, #0
 80191b2:	232d      	movlt	r3, #45	; 0x2d
 80191b4:	700b      	strb	r3, [r1, #0]
 80191b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80191bc:	4691      	mov	r9, r2
 80191be:	f023 0820 	bic.w	r8, r3, #32
 80191c2:	bfbc      	itt	lt
 80191c4:	4622      	movlt	r2, r4
 80191c6:	4614      	movlt	r4, r2
 80191c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80191cc:	d005      	beq.n	80191da <__cvt+0x42>
 80191ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80191d2:	d100      	bne.n	80191d6 <__cvt+0x3e>
 80191d4:	3601      	adds	r6, #1
 80191d6:	2102      	movs	r1, #2
 80191d8:	e000      	b.n	80191dc <__cvt+0x44>
 80191da:	2103      	movs	r1, #3
 80191dc:	ab03      	add	r3, sp, #12
 80191de:	9301      	str	r3, [sp, #4]
 80191e0:	ab02      	add	r3, sp, #8
 80191e2:	9300      	str	r3, [sp, #0]
 80191e4:	ec45 4b10 	vmov	d0, r4, r5
 80191e8:	4653      	mov	r3, sl
 80191ea:	4632      	mov	r2, r6
 80191ec:	f001 fdb8 	bl	801ad60 <_dtoa_r>
 80191f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80191f4:	4607      	mov	r7, r0
 80191f6:	d102      	bne.n	80191fe <__cvt+0x66>
 80191f8:	f019 0f01 	tst.w	r9, #1
 80191fc:	d022      	beq.n	8019244 <__cvt+0xac>
 80191fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019202:	eb07 0906 	add.w	r9, r7, r6
 8019206:	d110      	bne.n	801922a <__cvt+0x92>
 8019208:	783b      	ldrb	r3, [r7, #0]
 801920a:	2b30      	cmp	r3, #48	; 0x30
 801920c:	d10a      	bne.n	8019224 <__cvt+0x8c>
 801920e:	2200      	movs	r2, #0
 8019210:	2300      	movs	r3, #0
 8019212:	4620      	mov	r0, r4
 8019214:	4629      	mov	r1, r5
 8019216:	f7ff fcc7 	bl	8018ba8 <__aeabi_dcmpeq>
 801921a:	b918      	cbnz	r0, 8019224 <__cvt+0x8c>
 801921c:	f1c6 0601 	rsb	r6, r6, #1
 8019220:	f8ca 6000 	str.w	r6, [sl]
 8019224:	f8da 3000 	ldr.w	r3, [sl]
 8019228:	4499      	add	r9, r3
 801922a:	2200      	movs	r2, #0
 801922c:	2300      	movs	r3, #0
 801922e:	4620      	mov	r0, r4
 8019230:	4629      	mov	r1, r5
 8019232:	f7ff fcb9 	bl	8018ba8 <__aeabi_dcmpeq>
 8019236:	b108      	cbz	r0, 801923c <__cvt+0xa4>
 8019238:	f8cd 900c 	str.w	r9, [sp, #12]
 801923c:	2230      	movs	r2, #48	; 0x30
 801923e:	9b03      	ldr	r3, [sp, #12]
 8019240:	454b      	cmp	r3, r9
 8019242:	d307      	bcc.n	8019254 <__cvt+0xbc>
 8019244:	9b03      	ldr	r3, [sp, #12]
 8019246:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019248:	1bdb      	subs	r3, r3, r7
 801924a:	4638      	mov	r0, r7
 801924c:	6013      	str	r3, [r2, #0]
 801924e:	b004      	add	sp, #16
 8019250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019254:	1c59      	adds	r1, r3, #1
 8019256:	9103      	str	r1, [sp, #12]
 8019258:	701a      	strb	r2, [r3, #0]
 801925a:	e7f0      	b.n	801923e <__cvt+0xa6>

0801925c <__exponent>:
 801925c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801925e:	4603      	mov	r3, r0
 8019260:	2900      	cmp	r1, #0
 8019262:	bfb8      	it	lt
 8019264:	4249      	neglt	r1, r1
 8019266:	f803 2b02 	strb.w	r2, [r3], #2
 801926a:	bfb4      	ite	lt
 801926c:	222d      	movlt	r2, #45	; 0x2d
 801926e:	222b      	movge	r2, #43	; 0x2b
 8019270:	2909      	cmp	r1, #9
 8019272:	7042      	strb	r2, [r0, #1]
 8019274:	dd2a      	ble.n	80192cc <__exponent+0x70>
 8019276:	f10d 0407 	add.w	r4, sp, #7
 801927a:	46a4      	mov	ip, r4
 801927c:	270a      	movs	r7, #10
 801927e:	46a6      	mov	lr, r4
 8019280:	460a      	mov	r2, r1
 8019282:	fb91 f6f7 	sdiv	r6, r1, r7
 8019286:	fb07 1516 	mls	r5, r7, r6, r1
 801928a:	3530      	adds	r5, #48	; 0x30
 801928c:	2a63      	cmp	r2, #99	; 0x63
 801928e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019292:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019296:	4631      	mov	r1, r6
 8019298:	dcf1      	bgt.n	801927e <__exponent+0x22>
 801929a:	3130      	adds	r1, #48	; 0x30
 801929c:	f1ae 0502 	sub.w	r5, lr, #2
 80192a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80192a4:	1c44      	adds	r4, r0, #1
 80192a6:	4629      	mov	r1, r5
 80192a8:	4561      	cmp	r1, ip
 80192aa:	d30a      	bcc.n	80192c2 <__exponent+0x66>
 80192ac:	f10d 0209 	add.w	r2, sp, #9
 80192b0:	eba2 020e 	sub.w	r2, r2, lr
 80192b4:	4565      	cmp	r5, ip
 80192b6:	bf88      	it	hi
 80192b8:	2200      	movhi	r2, #0
 80192ba:	4413      	add	r3, r2
 80192bc:	1a18      	subs	r0, r3, r0
 80192be:	b003      	add	sp, #12
 80192c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80192c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80192c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80192ca:	e7ed      	b.n	80192a8 <__exponent+0x4c>
 80192cc:	2330      	movs	r3, #48	; 0x30
 80192ce:	3130      	adds	r1, #48	; 0x30
 80192d0:	7083      	strb	r3, [r0, #2]
 80192d2:	70c1      	strb	r1, [r0, #3]
 80192d4:	1d03      	adds	r3, r0, #4
 80192d6:	e7f1      	b.n	80192bc <__exponent+0x60>

080192d8 <_printf_float>:
 80192d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192dc:	ed2d 8b02 	vpush	{d8}
 80192e0:	b08d      	sub	sp, #52	; 0x34
 80192e2:	460c      	mov	r4, r1
 80192e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80192e8:	4616      	mov	r6, r2
 80192ea:	461f      	mov	r7, r3
 80192ec:	4605      	mov	r5, r0
 80192ee:	f002 fe95 	bl	801c01c <_localeconv_r>
 80192f2:	f8d0 a000 	ldr.w	sl, [r0]
 80192f6:	4650      	mov	r0, sl
 80192f8:	f7fe ffd6 	bl	80182a8 <strlen>
 80192fc:	2300      	movs	r3, #0
 80192fe:	930a      	str	r3, [sp, #40]	; 0x28
 8019300:	6823      	ldr	r3, [r4, #0]
 8019302:	9305      	str	r3, [sp, #20]
 8019304:	f8d8 3000 	ldr.w	r3, [r8]
 8019308:	f894 b018 	ldrb.w	fp, [r4, #24]
 801930c:	3307      	adds	r3, #7
 801930e:	f023 0307 	bic.w	r3, r3, #7
 8019312:	f103 0208 	add.w	r2, r3, #8
 8019316:	f8c8 2000 	str.w	r2, [r8]
 801931a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801931e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019322:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019326:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801932a:	9307      	str	r3, [sp, #28]
 801932c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019330:	ee08 0a10 	vmov	s16, r0
 8019334:	4b9f      	ldr	r3, [pc, #636]	; (80195b4 <_printf_float+0x2dc>)
 8019336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801933a:	f04f 32ff 	mov.w	r2, #4294967295
 801933e:	f7ff fc65 	bl	8018c0c <__aeabi_dcmpun>
 8019342:	bb88      	cbnz	r0, 80193a8 <_printf_float+0xd0>
 8019344:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019348:	4b9a      	ldr	r3, [pc, #616]	; (80195b4 <_printf_float+0x2dc>)
 801934a:	f04f 32ff 	mov.w	r2, #4294967295
 801934e:	f7ff fc3f 	bl	8018bd0 <__aeabi_dcmple>
 8019352:	bb48      	cbnz	r0, 80193a8 <_printf_float+0xd0>
 8019354:	2200      	movs	r2, #0
 8019356:	2300      	movs	r3, #0
 8019358:	4640      	mov	r0, r8
 801935a:	4649      	mov	r1, r9
 801935c:	f7ff fc2e 	bl	8018bbc <__aeabi_dcmplt>
 8019360:	b110      	cbz	r0, 8019368 <_printf_float+0x90>
 8019362:	232d      	movs	r3, #45	; 0x2d
 8019364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019368:	4b93      	ldr	r3, [pc, #588]	; (80195b8 <_printf_float+0x2e0>)
 801936a:	4894      	ldr	r0, [pc, #592]	; (80195bc <_printf_float+0x2e4>)
 801936c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019370:	bf94      	ite	ls
 8019372:	4698      	movls	r8, r3
 8019374:	4680      	movhi	r8, r0
 8019376:	2303      	movs	r3, #3
 8019378:	6123      	str	r3, [r4, #16]
 801937a:	9b05      	ldr	r3, [sp, #20]
 801937c:	f023 0204 	bic.w	r2, r3, #4
 8019380:	6022      	str	r2, [r4, #0]
 8019382:	f04f 0900 	mov.w	r9, #0
 8019386:	9700      	str	r7, [sp, #0]
 8019388:	4633      	mov	r3, r6
 801938a:	aa0b      	add	r2, sp, #44	; 0x2c
 801938c:	4621      	mov	r1, r4
 801938e:	4628      	mov	r0, r5
 8019390:	f000 f9d8 	bl	8019744 <_printf_common>
 8019394:	3001      	adds	r0, #1
 8019396:	f040 8090 	bne.w	80194ba <_printf_float+0x1e2>
 801939a:	f04f 30ff 	mov.w	r0, #4294967295
 801939e:	b00d      	add	sp, #52	; 0x34
 80193a0:	ecbd 8b02 	vpop	{d8}
 80193a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193a8:	4642      	mov	r2, r8
 80193aa:	464b      	mov	r3, r9
 80193ac:	4640      	mov	r0, r8
 80193ae:	4649      	mov	r1, r9
 80193b0:	f7ff fc2c 	bl	8018c0c <__aeabi_dcmpun>
 80193b4:	b140      	cbz	r0, 80193c8 <_printf_float+0xf0>
 80193b6:	464b      	mov	r3, r9
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	bfbc      	itt	lt
 80193bc:	232d      	movlt	r3, #45	; 0x2d
 80193be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80193c2:	487f      	ldr	r0, [pc, #508]	; (80195c0 <_printf_float+0x2e8>)
 80193c4:	4b7f      	ldr	r3, [pc, #508]	; (80195c4 <_printf_float+0x2ec>)
 80193c6:	e7d1      	b.n	801936c <_printf_float+0x94>
 80193c8:	6863      	ldr	r3, [r4, #4]
 80193ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80193ce:	9206      	str	r2, [sp, #24]
 80193d0:	1c5a      	adds	r2, r3, #1
 80193d2:	d13f      	bne.n	8019454 <_printf_float+0x17c>
 80193d4:	2306      	movs	r3, #6
 80193d6:	6063      	str	r3, [r4, #4]
 80193d8:	9b05      	ldr	r3, [sp, #20]
 80193da:	6861      	ldr	r1, [r4, #4]
 80193dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80193e0:	2300      	movs	r3, #0
 80193e2:	9303      	str	r3, [sp, #12]
 80193e4:	ab0a      	add	r3, sp, #40	; 0x28
 80193e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80193ea:	ab09      	add	r3, sp, #36	; 0x24
 80193ec:	ec49 8b10 	vmov	d0, r8, r9
 80193f0:	9300      	str	r3, [sp, #0]
 80193f2:	6022      	str	r2, [r4, #0]
 80193f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80193f8:	4628      	mov	r0, r5
 80193fa:	f7ff fecd 	bl	8019198 <__cvt>
 80193fe:	9b06      	ldr	r3, [sp, #24]
 8019400:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019402:	2b47      	cmp	r3, #71	; 0x47
 8019404:	4680      	mov	r8, r0
 8019406:	d108      	bne.n	801941a <_printf_float+0x142>
 8019408:	1cc8      	adds	r0, r1, #3
 801940a:	db02      	blt.n	8019412 <_printf_float+0x13a>
 801940c:	6863      	ldr	r3, [r4, #4]
 801940e:	4299      	cmp	r1, r3
 8019410:	dd41      	ble.n	8019496 <_printf_float+0x1be>
 8019412:	f1ab 0b02 	sub.w	fp, fp, #2
 8019416:	fa5f fb8b 	uxtb.w	fp, fp
 801941a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801941e:	d820      	bhi.n	8019462 <_printf_float+0x18a>
 8019420:	3901      	subs	r1, #1
 8019422:	465a      	mov	r2, fp
 8019424:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019428:	9109      	str	r1, [sp, #36]	; 0x24
 801942a:	f7ff ff17 	bl	801925c <__exponent>
 801942e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019430:	1813      	adds	r3, r2, r0
 8019432:	2a01      	cmp	r2, #1
 8019434:	4681      	mov	r9, r0
 8019436:	6123      	str	r3, [r4, #16]
 8019438:	dc02      	bgt.n	8019440 <_printf_float+0x168>
 801943a:	6822      	ldr	r2, [r4, #0]
 801943c:	07d2      	lsls	r2, r2, #31
 801943e:	d501      	bpl.n	8019444 <_printf_float+0x16c>
 8019440:	3301      	adds	r3, #1
 8019442:	6123      	str	r3, [r4, #16]
 8019444:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019448:	2b00      	cmp	r3, #0
 801944a:	d09c      	beq.n	8019386 <_printf_float+0xae>
 801944c:	232d      	movs	r3, #45	; 0x2d
 801944e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019452:	e798      	b.n	8019386 <_printf_float+0xae>
 8019454:	9a06      	ldr	r2, [sp, #24]
 8019456:	2a47      	cmp	r2, #71	; 0x47
 8019458:	d1be      	bne.n	80193d8 <_printf_float+0x100>
 801945a:	2b00      	cmp	r3, #0
 801945c:	d1bc      	bne.n	80193d8 <_printf_float+0x100>
 801945e:	2301      	movs	r3, #1
 8019460:	e7b9      	b.n	80193d6 <_printf_float+0xfe>
 8019462:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019466:	d118      	bne.n	801949a <_printf_float+0x1c2>
 8019468:	2900      	cmp	r1, #0
 801946a:	6863      	ldr	r3, [r4, #4]
 801946c:	dd0b      	ble.n	8019486 <_printf_float+0x1ae>
 801946e:	6121      	str	r1, [r4, #16]
 8019470:	b913      	cbnz	r3, 8019478 <_printf_float+0x1a0>
 8019472:	6822      	ldr	r2, [r4, #0]
 8019474:	07d0      	lsls	r0, r2, #31
 8019476:	d502      	bpl.n	801947e <_printf_float+0x1a6>
 8019478:	3301      	adds	r3, #1
 801947a:	440b      	add	r3, r1
 801947c:	6123      	str	r3, [r4, #16]
 801947e:	65a1      	str	r1, [r4, #88]	; 0x58
 8019480:	f04f 0900 	mov.w	r9, #0
 8019484:	e7de      	b.n	8019444 <_printf_float+0x16c>
 8019486:	b913      	cbnz	r3, 801948e <_printf_float+0x1b6>
 8019488:	6822      	ldr	r2, [r4, #0]
 801948a:	07d2      	lsls	r2, r2, #31
 801948c:	d501      	bpl.n	8019492 <_printf_float+0x1ba>
 801948e:	3302      	adds	r3, #2
 8019490:	e7f4      	b.n	801947c <_printf_float+0x1a4>
 8019492:	2301      	movs	r3, #1
 8019494:	e7f2      	b.n	801947c <_printf_float+0x1a4>
 8019496:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801949a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801949c:	4299      	cmp	r1, r3
 801949e:	db05      	blt.n	80194ac <_printf_float+0x1d4>
 80194a0:	6823      	ldr	r3, [r4, #0]
 80194a2:	6121      	str	r1, [r4, #16]
 80194a4:	07d8      	lsls	r0, r3, #31
 80194a6:	d5ea      	bpl.n	801947e <_printf_float+0x1a6>
 80194a8:	1c4b      	adds	r3, r1, #1
 80194aa:	e7e7      	b.n	801947c <_printf_float+0x1a4>
 80194ac:	2900      	cmp	r1, #0
 80194ae:	bfd4      	ite	le
 80194b0:	f1c1 0202 	rsble	r2, r1, #2
 80194b4:	2201      	movgt	r2, #1
 80194b6:	4413      	add	r3, r2
 80194b8:	e7e0      	b.n	801947c <_printf_float+0x1a4>
 80194ba:	6823      	ldr	r3, [r4, #0]
 80194bc:	055a      	lsls	r2, r3, #21
 80194be:	d407      	bmi.n	80194d0 <_printf_float+0x1f8>
 80194c0:	6923      	ldr	r3, [r4, #16]
 80194c2:	4642      	mov	r2, r8
 80194c4:	4631      	mov	r1, r6
 80194c6:	4628      	mov	r0, r5
 80194c8:	47b8      	blx	r7
 80194ca:	3001      	adds	r0, #1
 80194cc:	d12c      	bne.n	8019528 <_printf_float+0x250>
 80194ce:	e764      	b.n	801939a <_printf_float+0xc2>
 80194d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80194d4:	f240 80e0 	bls.w	8019698 <_printf_float+0x3c0>
 80194d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80194dc:	2200      	movs	r2, #0
 80194de:	2300      	movs	r3, #0
 80194e0:	f7ff fb62 	bl	8018ba8 <__aeabi_dcmpeq>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	d034      	beq.n	8019552 <_printf_float+0x27a>
 80194e8:	4a37      	ldr	r2, [pc, #220]	; (80195c8 <_printf_float+0x2f0>)
 80194ea:	2301      	movs	r3, #1
 80194ec:	4631      	mov	r1, r6
 80194ee:	4628      	mov	r0, r5
 80194f0:	47b8      	blx	r7
 80194f2:	3001      	adds	r0, #1
 80194f4:	f43f af51 	beq.w	801939a <_printf_float+0xc2>
 80194f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80194fc:	429a      	cmp	r2, r3
 80194fe:	db02      	blt.n	8019506 <_printf_float+0x22e>
 8019500:	6823      	ldr	r3, [r4, #0]
 8019502:	07d8      	lsls	r0, r3, #31
 8019504:	d510      	bpl.n	8019528 <_printf_float+0x250>
 8019506:	ee18 3a10 	vmov	r3, s16
 801950a:	4652      	mov	r2, sl
 801950c:	4631      	mov	r1, r6
 801950e:	4628      	mov	r0, r5
 8019510:	47b8      	blx	r7
 8019512:	3001      	adds	r0, #1
 8019514:	f43f af41 	beq.w	801939a <_printf_float+0xc2>
 8019518:	f04f 0800 	mov.w	r8, #0
 801951c:	f104 091a 	add.w	r9, r4, #26
 8019520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019522:	3b01      	subs	r3, #1
 8019524:	4543      	cmp	r3, r8
 8019526:	dc09      	bgt.n	801953c <_printf_float+0x264>
 8019528:	6823      	ldr	r3, [r4, #0]
 801952a:	079b      	lsls	r3, r3, #30
 801952c:	f100 8105 	bmi.w	801973a <_printf_float+0x462>
 8019530:	68e0      	ldr	r0, [r4, #12]
 8019532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019534:	4298      	cmp	r0, r3
 8019536:	bfb8      	it	lt
 8019538:	4618      	movlt	r0, r3
 801953a:	e730      	b.n	801939e <_printf_float+0xc6>
 801953c:	2301      	movs	r3, #1
 801953e:	464a      	mov	r2, r9
 8019540:	4631      	mov	r1, r6
 8019542:	4628      	mov	r0, r5
 8019544:	47b8      	blx	r7
 8019546:	3001      	adds	r0, #1
 8019548:	f43f af27 	beq.w	801939a <_printf_float+0xc2>
 801954c:	f108 0801 	add.w	r8, r8, #1
 8019550:	e7e6      	b.n	8019520 <_printf_float+0x248>
 8019552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019554:	2b00      	cmp	r3, #0
 8019556:	dc39      	bgt.n	80195cc <_printf_float+0x2f4>
 8019558:	4a1b      	ldr	r2, [pc, #108]	; (80195c8 <_printf_float+0x2f0>)
 801955a:	2301      	movs	r3, #1
 801955c:	4631      	mov	r1, r6
 801955e:	4628      	mov	r0, r5
 8019560:	47b8      	blx	r7
 8019562:	3001      	adds	r0, #1
 8019564:	f43f af19 	beq.w	801939a <_printf_float+0xc2>
 8019568:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801956c:	4313      	orrs	r3, r2
 801956e:	d102      	bne.n	8019576 <_printf_float+0x29e>
 8019570:	6823      	ldr	r3, [r4, #0]
 8019572:	07d9      	lsls	r1, r3, #31
 8019574:	d5d8      	bpl.n	8019528 <_printf_float+0x250>
 8019576:	ee18 3a10 	vmov	r3, s16
 801957a:	4652      	mov	r2, sl
 801957c:	4631      	mov	r1, r6
 801957e:	4628      	mov	r0, r5
 8019580:	47b8      	blx	r7
 8019582:	3001      	adds	r0, #1
 8019584:	f43f af09 	beq.w	801939a <_printf_float+0xc2>
 8019588:	f04f 0900 	mov.w	r9, #0
 801958c:	f104 0a1a 	add.w	sl, r4, #26
 8019590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019592:	425b      	negs	r3, r3
 8019594:	454b      	cmp	r3, r9
 8019596:	dc01      	bgt.n	801959c <_printf_float+0x2c4>
 8019598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801959a:	e792      	b.n	80194c2 <_printf_float+0x1ea>
 801959c:	2301      	movs	r3, #1
 801959e:	4652      	mov	r2, sl
 80195a0:	4631      	mov	r1, r6
 80195a2:	4628      	mov	r0, r5
 80195a4:	47b8      	blx	r7
 80195a6:	3001      	adds	r0, #1
 80195a8:	f43f aef7 	beq.w	801939a <_printf_float+0xc2>
 80195ac:	f109 0901 	add.w	r9, r9, #1
 80195b0:	e7ee      	b.n	8019590 <_printf_float+0x2b8>
 80195b2:	bf00      	nop
 80195b4:	7fefffff 	.word	0x7fefffff
 80195b8:	08051900 	.word	0x08051900
 80195bc:	08051904 	.word	0x08051904
 80195c0:	0805190c 	.word	0x0805190c
 80195c4:	08051908 	.word	0x08051908
 80195c8:	08051910 	.word	0x08051910
 80195cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80195d0:	429a      	cmp	r2, r3
 80195d2:	bfa8      	it	ge
 80195d4:	461a      	movge	r2, r3
 80195d6:	2a00      	cmp	r2, #0
 80195d8:	4691      	mov	r9, r2
 80195da:	dc37      	bgt.n	801964c <_printf_float+0x374>
 80195dc:	f04f 0b00 	mov.w	fp, #0
 80195e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80195e4:	f104 021a 	add.w	r2, r4, #26
 80195e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80195ea:	9305      	str	r3, [sp, #20]
 80195ec:	eba3 0309 	sub.w	r3, r3, r9
 80195f0:	455b      	cmp	r3, fp
 80195f2:	dc33      	bgt.n	801965c <_printf_float+0x384>
 80195f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80195f8:	429a      	cmp	r2, r3
 80195fa:	db3b      	blt.n	8019674 <_printf_float+0x39c>
 80195fc:	6823      	ldr	r3, [r4, #0]
 80195fe:	07da      	lsls	r2, r3, #31
 8019600:	d438      	bmi.n	8019674 <_printf_float+0x39c>
 8019602:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019604:	9a05      	ldr	r2, [sp, #20]
 8019606:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019608:	1a9a      	subs	r2, r3, r2
 801960a:	eba3 0901 	sub.w	r9, r3, r1
 801960e:	4591      	cmp	r9, r2
 8019610:	bfa8      	it	ge
 8019612:	4691      	movge	r9, r2
 8019614:	f1b9 0f00 	cmp.w	r9, #0
 8019618:	dc35      	bgt.n	8019686 <_printf_float+0x3ae>
 801961a:	f04f 0800 	mov.w	r8, #0
 801961e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019622:	f104 0a1a 	add.w	sl, r4, #26
 8019626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801962a:	1a9b      	subs	r3, r3, r2
 801962c:	eba3 0309 	sub.w	r3, r3, r9
 8019630:	4543      	cmp	r3, r8
 8019632:	f77f af79 	ble.w	8019528 <_printf_float+0x250>
 8019636:	2301      	movs	r3, #1
 8019638:	4652      	mov	r2, sl
 801963a:	4631      	mov	r1, r6
 801963c:	4628      	mov	r0, r5
 801963e:	47b8      	blx	r7
 8019640:	3001      	adds	r0, #1
 8019642:	f43f aeaa 	beq.w	801939a <_printf_float+0xc2>
 8019646:	f108 0801 	add.w	r8, r8, #1
 801964a:	e7ec      	b.n	8019626 <_printf_float+0x34e>
 801964c:	4613      	mov	r3, r2
 801964e:	4631      	mov	r1, r6
 8019650:	4642      	mov	r2, r8
 8019652:	4628      	mov	r0, r5
 8019654:	47b8      	blx	r7
 8019656:	3001      	adds	r0, #1
 8019658:	d1c0      	bne.n	80195dc <_printf_float+0x304>
 801965a:	e69e      	b.n	801939a <_printf_float+0xc2>
 801965c:	2301      	movs	r3, #1
 801965e:	4631      	mov	r1, r6
 8019660:	4628      	mov	r0, r5
 8019662:	9205      	str	r2, [sp, #20]
 8019664:	47b8      	blx	r7
 8019666:	3001      	adds	r0, #1
 8019668:	f43f ae97 	beq.w	801939a <_printf_float+0xc2>
 801966c:	9a05      	ldr	r2, [sp, #20]
 801966e:	f10b 0b01 	add.w	fp, fp, #1
 8019672:	e7b9      	b.n	80195e8 <_printf_float+0x310>
 8019674:	ee18 3a10 	vmov	r3, s16
 8019678:	4652      	mov	r2, sl
 801967a:	4631      	mov	r1, r6
 801967c:	4628      	mov	r0, r5
 801967e:	47b8      	blx	r7
 8019680:	3001      	adds	r0, #1
 8019682:	d1be      	bne.n	8019602 <_printf_float+0x32a>
 8019684:	e689      	b.n	801939a <_printf_float+0xc2>
 8019686:	9a05      	ldr	r2, [sp, #20]
 8019688:	464b      	mov	r3, r9
 801968a:	4442      	add	r2, r8
 801968c:	4631      	mov	r1, r6
 801968e:	4628      	mov	r0, r5
 8019690:	47b8      	blx	r7
 8019692:	3001      	adds	r0, #1
 8019694:	d1c1      	bne.n	801961a <_printf_float+0x342>
 8019696:	e680      	b.n	801939a <_printf_float+0xc2>
 8019698:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801969a:	2a01      	cmp	r2, #1
 801969c:	dc01      	bgt.n	80196a2 <_printf_float+0x3ca>
 801969e:	07db      	lsls	r3, r3, #31
 80196a0:	d538      	bpl.n	8019714 <_printf_float+0x43c>
 80196a2:	2301      	movs	r3, #1
 80196a4:	4642      	mov	r2, r8
 80196a6:	4631      	mov	r1, r6
 80196a8:	4628      	mov	r0, r5
 80196aa:	47b8      	blx	r7
 80196ac:	3001      	adds	r0, #1
 80196ae:	f43f ae74 	beq.w	801939a <_printf_float+0xc2>
 80196b2:	ee18 3a10 	vmov	r3, s16
 80196b6:	4652      	mov	r2, sl
 80196b8:	4631      	mov	r1, r6
 80196ba:	4628      	mov	r0, r5
 80196bc:	47b8      	blx	r7
 80196be:	3001      	adds	r0, #1
 80196c0:	f43f ae6b 	beq.w	801939a <_printf_float+0xc2>
 80196c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80196c8:	2200      	movs	r2, #0
 80196ca:	2300      	movs	r3, #0
 80196cc:	f7ff fa6c 	bl	8018ba8 <__aeabi_dcmpeq>
 80196d0:	b9d8      	cbnz	r0, 801970a <_printf_float+0x432>
 80196d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196d4:	f108 0201 	add.w	r2, r8, #1
 80196d8:	3b01      	subs	r3, #1
 80196da:	4631      	mov	r1, r6
 80196dc:	4628      	mov	r0, r5
 80196de:	47b8      	blx	r7
 80196e0:	3001      	adds	r0, #1
 80196e2:	d10e      	bne.n	8019702 <_printf_float+0x42a>
 80196e4:	e659      	b.n	801939a <_printf_float+0xc2>
 80196e6:	2301      	movs	r3, #1
 80196e8:	4652      	mov	r2, sl
 80196ea:	4631      	mov	r1, r6
 80196ec:	4628      	mov	r0, r5
 80196ee:	47b8      	blx	r7
 80196f0:	3001      	adds	r0, #1
 80196f2:	f43f ae52 	beq.w	801939a <_printf_float+0xc2>
 80196f6:	f108 0801 	add.w	r8, r8, #1
 80196fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80196fc:	3b01      	subs	r3, #1
 80196fe:	4543      	cmp	r3, r8
 8019700:	dcf1      	bgt.n	80196e6 <_printf_float+0x40e>
 8019702:	464b      	mov	r3, r9
 8019704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019708:	e6dc      	b.n	80194c4 <_printf_float+0x1ec>
 801970a:	f04f 0800 	mov.w	r8, #0
 801970e:	f104 0a1a 	add.w	sl, r4, #26
 8019712:	e7f2      	b.n	80196fa <_printf_float+0x422>
 8019714:	2301      	movs	r3, #1
 8019716:	4642      	mov	r2, r8
 8019718:	e7df      	b.n	80196da <_printf_float+0x402>
 801971a:	2301      	movs	r3, #1
 801971c:	464a      	mov	r2, r9
 801971e:	4631      	mov	r1, r6
 8019720:	4628      	mov	r0, r5
 8019722:	47b8      	blx	r7
 8019724:	3001      	adds	r0, #1
 8019726:	f43f ae38 	beq.w	801939a <_printf_float+0xc2>
 801972a:	f108 0801 	add.w	r8, r8, #1
 801972e:	68e3      	ldr	r3, [r4, #12]
 8019730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019732:	1a5b      	subs	r3, r3, r1
 8019734:	4543      	cmp	r3, r8
 8019736:	dcf0      	bgt.n	801971a <_printf_float+0x442>
 8019738:	e6fa      	b.n	8019530 <_printf_float+0x258>
 801973a:	f04f 0800 	mov.w	r8, #0
 801973e:	f104 0919 	add.w	r9, r4, #25
 8019742:	e7f4      	b.n	801972e <_printf_float+0x456>

08019744 <_printf_common>:
 8019744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019748:	4616      	mov	r6, r2
 801974a:	4699      	mov	r9, r3
 801974c:	688a      	ldr	r2, [r1, #8]
 801974e:	690b      	ldr	r3, [r1, #16]
 8019750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019754:	4293      	cmp	r3, r2
 8019756:	bfb8      	it	lt
 8019758:	4613      	movlt	r3, r2
 801975a:	6033      	str	r3, [r6, #0]
 801975c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019760:	4607      	mov	r7, r0
 8019762:	460c      	mov	r4, r1
 8019764:	b10a      	cbz	r2, 801976a <_printf_common+0x26>
 8019766:	3301      	adds	r3, #1
 8019768:	6033      	str	r3, [r6, #0]
 801976a:	6823      	ldr	r3, [r4, #0]
 801976c:	0699      	lsls	r1, r3, #26
 801976e:	bf42      	ittt	mi
 8019770:	6833      	ldrmi	r3, [r6, #0]
 8019772:	3302      	addmi	r3, #2
 8019774:	6033      	strmi	r3, [r6, #0]
 8019776:	6825      	ldr	r5, [r4, #0]
 8019778:	f015 0506 	ands.w	r5, r5, #6
 801977c:	d106      	bne.n	801978c <_printf_common+0x48>
 801977e:	f104 0a19 	add.w	sl, r4, #25
 8019782:	68e3      	ldr	r3, [r4, #12]
 8019784:	6832      	ldr	r2, [r6, #0]
 8019786:	1a9b      	subs	r3, r3, r2
 8019788:	42ab      	cmp	r3, r5
 801978a:	dc26      	bgt.n	80197da <_printf_common+0x96>
 801978c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019790:	1e13      	subs	r3, r2, #0
 8019792:	6822      	ldr	r2, [r4, #0]
 8019794:	bf18      	it	ne
 8019796:	2301      	movne	r3, #1
 8019798:	0692      	lsls	r2, r2, #26
 801979a:	d42b      	bmi.n	80197f4 <_printf_common+0xb0>
 801979c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80197a0:	4649      	mov	r1, r9
 80197a2:	4638      	mov	r0, r7
 80197a4:	47c0      	blx	r8
 80197a6:	3001      	adds	r0, #1
 80197a8:	d01e      	beq.n	80197e8 <_printf_common+0xa4>
 80197aa:	6823      	ldr	r3, [r4, #0]
 80197ac:	68e5      	ldr	r5, [r4, #12]
 80197ae:	6832      	ldr	r2, [r6, #0]
 80197b0:	f003 0306 	and.w	r3, r3, #6
 80197b4:	2b04      	cmp	r3, #4
 80197b6:	bf08      	it	eq
 80197b8:	1aad      	subeq	r5, r5, r2
 80197ba:	68a3      	ldr	r3, [r4, #8]
 80197bc:	6922      	ldr	r2, [r4, #16]
 80197be:	bf0c      	ite	eq
 80197c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80197c4:	2500      	movne	r5, #0
 80197c6:	4293      	cmp	r3, r2
 80197c8:	bfc4      	itt	gt
 80197ca:	1a9b      	subgt	r3, r3, r2
 80197cc:	18ed      	addgt	r5, r5, r3
 80197ce:	2600      	movs	r6, #0
 80197d0:	341a      	adds	r4, #26
 80197d2:	42b5      	cmp	r5, r6
 80197d4:	d11a      	bne.n	801980c <_printf_common+0xc8>
 80197d6:	2000      	movs	r0, #0
 80197d8:	e008      	b.n	80197ec <_printf_common+0xa8>
 80197da:	2301      	movs	r3, #1
 80197dc:	4652      	mov	r2, sl
 80197de:	4649      	mov	r1, r9
 80197e0:	4638      	mov	r0, r7
 80197e2:	47c0      	blx	r8
 80197e4:	3001      	adds	r0, #1
 80197e6:	d103      	bne.n	80197f0 <_printf_common+0xac>
 80197e8:	f04f 30ff 	mov.w	r0, #4294967295
 80197ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197f0:	3501      	adds	r5, #1
 80197f2:	e7c6      	b.n	8019782 <_printf_common+0x3e>
 80197f4:	18e1      	adds	r1, r4, r3
 80197f6:	1c5a      	adds	r2, r3, #1
 80197f8:	2030      	movs	r0, #48	; 0x30
 80197fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80197fe:	4422      	add	r2, r4
 8019800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019808:	3302      	adds	r3, #2
 801980a:	e7c7      	b.n	801979c <_printf_common+0x58>
 801980c:	2301      	movs	r3, #1
 801980e:	4622      	mov	r2, r4
 8019810:	4649      	mov	r1, r9
 8019812:	4638      	mov	r0, r7
 8019814:	47c0      	blx	r8
 8019816:	3001      	adds	r0, #1
 8019818:	d0e6      	beq.n	80197e8 <_printf_common+0xa4>
 801981a:	3601      	adds	r6, #1
 801981c:	e7d9      	b.n	80197d2 <_printf_common+0x8e>
	...

08019820 <_printf_i>:
 8019820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019824:	7e0f      	ldrb	r7, [r1, #24]
 8019826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019828:	2f78      	cmp	r7, #120	; 0x78
 801982a:	4691      	mov	r9, r2
 801982c:	4680      	mov	r8, r0
 801982e:	460c      	mov	r4, r1
 8019830:	469a      	mov	sl, r3
 8019832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019836:	d807      	bhi.n	8019848 <_printf_i+0x28>
 8019838:	2f62      	cmp	r7, #98	; 0x62
 801983a:	d80a      	bhi.n	8019852 <_printf_i+0x32>
 801983c:	2f00      	cmp	r7, #0
 801983e:	f000 80d8 	beq.w	80199f2 <_printf_i+0x1d2>
 8019842:	2f58      	cmp	r7, #88	; 0x58
 8019844:	f000 80a3 	beq.w	801998e <_printf_i+0x16e>
 8019848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801984c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019850:	e03a      	b.n	80198c8 <_printf_i+0xa8>
 8019852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019856:	2b15      	cmp	r3, #21
 8019858:	d8f6      	bhi.n	8019848 <_printf_i+0x28>
 801985a:	a101      	add	r1, pc, #4	; (adr r1, 8019860 <_printf_i+0x40>)
 801985c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019860:	080198b9 	.word	0x080198b9
 8019864:	080198cd 	.word	0x080198cd
 8019868:	08019849 	.word	0x08019849
 801986c:	08019849 	.word	0x08019849
 8019870:	08019849 	.word	0x08019849
 8019874:	08019849 	.word	0x08019849
 8019878:	080198cd 	.word	0x080198cd
 801987c:	08019849 	.word	0x08019849
 8019880:	08019849 	.word	0x08019849
 8019884:	08019849 	.word	0x08019849
 8019888:	08019849 	.word	0x08019849
 801988c:	080199d9 	.word	0x080199d9
 8019890:	080198fd 	.word	0x080198fd
 8019894:	080199bb 	.word	0x080199bb
 8019898:	08019849 	.word	0x08019849
 801989c:	08019849 	.word	0x08019849
 80198a0:	080199fb 	.word	0x080199fb
 80198a4:	08019849 	.word	0x08019849
 80198a8:	080198fd 	.word	0x080198fd
 80198ac:	08019849 	.word	0x08019849
 80198b0:	08019849 	.word	0x08019849
 80198b4:	080199c3 	.word	0x080199c3
 80198b8:	682b      	ldr	r3, [r5, #0]
 80198ba:	1d1a      	adds	r2, r3, #4
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	602a      	str	r2, [r5, #0]
 80198c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80198c8:	2301      	movs	r3, #1
 80198ca:	e0a3      	b.n	8019a14 <_printf_i+0x1f4>
 80198cc:	6820      	ldr	r0, [r4, #0]
 80198ce:	6829      	ldr	r1, [r5, #0]
 80198d0:	0606      	lsls	r6, r0, #24
 80198d2:	f101 0304 	add.w	r3, r1, #4
 80198d6:	d50a      	bpl.n	80198ee <_printf_i+0xce>
 80198d8:	680e      	ldr	r6, [r1, #0]
 80198da:	602b      	str	r3, [r5, #0]
 80198dc:	2e00      	cmp	r6, #0
 80198de:	da03      	bge.n	80198e8 <_printf_i+0xc8>
 80198e0:	232d      	movs	r3, #45	; 0x2d
 80198e2:	4276      	negs	r6, r6
 80198e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198e8:	485e      	ldr	r0, [pc, #376]	; (8019a64 <_printf_i+0x244>)
 80198ea:	230a      	movs	r3, #10
 80198ec:	e019      	b.n	8019922 <_printf_i+0x102>
 80198ee:	680e      	ldr	r6, [r1, #0]
 80198f0:	602b      	str	r3, [r5, #0]
 80198f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80198f6:	bf18      	it	ne
 80198f8:	b236      	sxthne	r6, r6
 80198fa:	e7ef      	b.n	80198dc <_printf_i+0xbc>
 80198fc:	682b      	ldr	r3, [r5, #0]
 80198fe:	6820      	ldr	r0, [r4, #0]
 8019900:	1d19      	adds	r1, r3, #4
 8019902:	6029      	str	r1, [r5, #0]
 8019904:	0601      	lsls	r1, r0, #24
 8019906:	d501      	bpl.n	801990c <_printf_i+0xec>
 8019908:	681e      	ldr	r6, [r3, #0]
 801990a:	e002      	b.n	8019912 <_printf_i+0xf2>
 801990c:	0646      	lsls	r6, r0, #25
 801990e:	d5fb      	bpl.n	8019908 <_printf_i+0xe8>
 8019910:	881e      	ldrh	r6, [r3, #0]
 8019912:	4854      	ldr	r0, [pc, #336]	; (8019a64 <_printf_i+0x244>)
 8019914:	2f6f      	cmp	r7, #111	; 0x6f
 8019916:	bf0c      	ite	eq
 8019918:	2308      	moveq	r3, #8
 801991a:	230a      	movne	r3, #10
 801991c:	2100      	movs	r1, #0
 801991e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019922:	6865      	ldr	r5, [r4, #4]
 8019924:	60a5      	str	r5, [r4, #8]
 8019926:	2d00      	cmp	r5, #0
 8019928:	bfa2      	ittt	ge
 801992a:	6821      	ldrge	r1, [r4, #0]
 801992c:	f021 0104 	bicge.w	r1, r1, #4
 8019930:	6021      	strge	r1, [r4, #0]
 8019932:	b90e      	cbnz	r6, 8019938 <_printf_i+0x118>
 8019934:	2d00      	cmp	r5, #0
 8019936:	d04d      	beq.n	80199d4 <_printf_i+0x1b4>
 8019938:	4615      	mov	r5, r2
 801993a:	fbb6 f1f3 	udiv	r1, r6, r3
 801993e:	fb03 6711 	mls	r7, r3, r1, r6
 8019942:	5dc7      	ldrb	r7, [r0, r7]
 8019944:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019948:	4637      	mov	r7, r6
 801994a:	42bb      	cmp	r3, r7
 801994c:	460e      	mov	r6, r1
 801994e:	d9f4      	bls.n	801993a <_printf_i+0x11a>
 8019950:	2b08      	cmp	r3, #8
 8019952:	d10b      	bne.n	801996c <_printf_i+0x14c>
 8019954:	6823      	ldr	r3, [r4, #0]
 8019956:	07de      	lsls	r6, r3, #31
 8019958:	d508      	bpl.n	801996c <_printf_i+0x14c>
 801995a:	6923      	ldr	r3, [r4, #16]
 801995c:	6861      	ldr	r1, [r4, #4]
 801995e:	4299      	cmp	r1, r3
 8019960:	bfde      	ittt	le
 8019962:	2330      	movle	r3, #48	; 0x30
 8019964:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019968:	f105 35ff 	addle.w	r5, r5, #4294967295
 801996c:	1b52      	subs	r2, r2, r5
 801996e:	6122      	str	r2, [r4, #16]
 8019970:	f8cd a000 	str.w	sl, [sp]
 8019974:	464b      	mov	r3, r9
 8019976:	aa03      	add	r2, sp, #12
 8019978:	4621      	mov	r1, r4
 801997a:	4640      	mov	r0, r8
 801997c:	f7ff fee2 	bl	8019744 <_printf_common>
 8019980:	3001      	adds	r0, #1
 8019982:	d14c      	bne.n	8019a1e <_printf_i+0x1fe>
 8019984:	f04f 30ff 	mov.w	r0, #4294967295
 8019988:	b004      	add	sp, #16
 801998a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801998e:	4835      	ldr	r0, [pc, #212]	; (8019a64 <_printf_i+0x244>)
 8019990:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019994:	6829      	ldr	r1, [r5, #0]
 8019996:	6823      	ldr	r3, [r4, #0]
 8019998:	f851 6b04 	ldr.w	r6, [r1], #4
 801999c:	6029      	str	r1, [r5, #0]
 801999e:	061d      	lsls	r5, r3, #24
 80199a0:	d514      	bpl.n	80199cc <_printf_i+0x1ac>
 80199a2:	07df      	lsls	r7, r3, #31
 80199a4:	bf44      	itt	mi
 80199a6:	f043 0320 	orrmi.w	r3, r3, #32
 80199aa:	6023      	strmi	r3, [r4, #0]
 80199ac:	b91e      	cbnz	r6, 80199b6 <_printf_i+0x196>
 80199ae:	6823      	ldr	r3, [r4, #0]
 80199b0:	f023 0320 	bic.w	r3, r3, #32
 80199b4:	6023      	str	r3, [r4, #0]
 80199b6:	2310      	movs	r3, #16
 80199b8:	e7b0      	b.n	801991c <_printf_i+0xfc>
 80199ba:	6823      	ldr	r3, [r4, #0]
 80199bc:	f043 0320 	orr.w	r3, r3, #32
 80199c0:	6023      	str	r3, [r4, #0]
 80199c2:	2378      	movs	r3, #120	; 0x78
 80199c4:	4828      	ldr	r0, [pc, #160]	; (8019a68 <_printf_i+0x248>)
 80199c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80199ca:	e7e3      	b.n	8019994 <_printf_i+0x174>
 80199cc:	0659      	lsls	r1, r3, #25
 80199ce:	bf48      	it	mi
 80199d0:	b2b6      	uxthmi	r6, r6
 80199d2:	e7e6      	b.n	80199a2 <_printf_i+0x182>
 80199d4:	4615      	mov	r5, r2
 80199d6:	e7bb      	b.n	8019950 <_printf_i+0x130>
 80199d8:	682b      	ldr	r3, [r5, #0]
 80199da:	6826      	ldr	r6, [r4, #0]
 80199dc:	6961      	ldr	r1, [r4, #20]
 80199de:	1d18      	adds	r0, r3, #4
 80199e0:	6028      	str	r0, [r5, #0]
 80199e2:	0635      	lsls	r5, r6, #24
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	d501      	bpl.n	80199ec <_printf_i+0x1cc>
 80199e8:	6019      	str	r1, [r3, #0]
 80199ea:	e002      	b.n	80199f2 <_printf_i+0x1d2>
 80199ec:	0670      	lsls	r0, r6, #25
 80199ee:	d5fb      	bpl.n	80199e8 <_printf_i+0x1c8>
 80199f0:	8019      	strh	r1, [r3, #0]
 80199f2:	2300      	movs	r3, #0
 80199f4:	6123      	str	r3, [r4, #16]
 80199f6:	4615      	mov	r5, r2
 80199f8:	e7ba      	b.n	8019970 <_printf_i+0x150>
 80199fa:	682b      	ldr	r3, [r5, #0]
 80199fc:	1d1a      	adds	r2, r3, #4
 80199fe:	602a      	str	r2, [r5, #0]
 8019a00:	681d      	ldr	r5, [r3, #0]
 8019a02:	6862      	ldr	r2, [r4, #4]
 8019a04:	2100      	movs	r1, #0
 8019a06:	4628      	mov	r0, r5
 8019a08:	f7fe fc5a 	bl	80182c0 <memchr>
 8019a0c:	b108      	cbz	r0, 8019a12 <_printf_i+0x1f2>
 8019a0e:	1b40      	subs	r0, r0, r5
 8019a10:	6060      	str	r0, [r4, #4]
 8019a12:	6863      	ldr	r3, [r4, #4]
 8019a14:	6123      	str	r3, [r4, #16]
 8019a16:	2300      	movs	r3, #0
 8019a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a1c:	e7a8      	b.n	8019970 <_printf_i+0x150>
 8019a1e:	6923      	ldr	r3, [r4, #16]
 8019a20:	462a      	mov	r2, r5
 8019a22:	4649      	mov	r1, r9
 8019a24:	4640      	mov	r0, r8
 8019a26:	47d0      	blx	sl
 8019a28:	3001      	adds	r0, #1
 8019a2a:	d0ab      	beq.n	8019984 <_printf_i+0x164>
 8019a2c:	6823      	ldr	r3, [r4, #0]
 8019a2e:	079b      	lsls	r3, r3, #30
 8019a30:	d413      	bmi.n	8019a5a <_printf_i+0x23a>
 8019a32:	68e0      	ldr	r0, [r4, #12]
 8019a34:	9b03      	ldr	r3, [sp, #12]
 8019a36:	4298      	cmp	r0, r3
 8019a38:	bfb8      	it	lt
 8019a3a:	4618      	movlt	r0, r3
 8019a3c:	e7a4      	b.n	8019988 <_printf_i+0x168>
 8019a3e:	2301      	movs	r3, #1
 8019a40:	4632      	mov	r2, r6
 8019a42:	4649      	mov	r1, r9
 8019a44:	4640      	mov	r0, r8
 8019a46:	47d0      	blx	sl
 8019a48:	3001      	adds	r0, #1
 8019a4a:	d09b      	beq.n	8019984 <_printf_i+0x164>
 8019a4c:	3501      	adds	r5, #1
 8019a4e:	68e3      	ldr	r3, [r4, #12]
 8019a50:	9903      	ldr	r1, [sp, #12]
 8019a52:	1a5b      	subs	r3, r3, r1
 8019a54:	42ab      	cmp	r3, r5
 8019a56:	dcf2      	bgt.n	8019a3e <_printf_i+0x21e>
 8019a58:	e7eb      	b.n	8019a32 <_printf_i+0x212>
 8019a5a:	2500      	movs	r5, #0
 8019a5c:	f104 0619 	add.w	r6, r4, #25
 8019a60:	e7f5      	b.n	8019a4e <_printf_i+0x22e>
 8019a62:	bf00      	nop
 8019a64:	08051912 	.word	0x08051912
 8019a68:	08051923 	.word	0x08051923

08019a6c <_scanf_float>:
 8019a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a70:	b087      	sub	sp, #28
 8019a72:	4617      	mov	r7, r2
 8019a74:	9303      	str	r3, [sp, #12]
 8019a76:	688b      	ldr	r3, [r1, #8]
 8019a78:	1e5a      	subs	r2, r3, #1
 8019a7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019a7e:	bf83      	ittte	hi
 8019a80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019a84:	195b      	addhi	r3, r3, r5
 8019a86:	9302      	strhi	r3, [sp, #8]
 8019a88:	2300      	movls	r3, #0
 8019a8a:	bf86      	itte	hi
 8019a8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019a90:	608b      	strhi	r3, [r1, #8]
 8019a92:	9302      	strls	r3, [sp, #8]
 8019a94:	680b      	ldr	r3, [r1, #0]
 8019a96:	468b      	mov	fp, r1
 8019a98:	2500      	movs	r5, #0
 8019a9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019a9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8019aa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019aa6:	4680      	mov	r8, r0
 8019aa8:	460c      	mov	r4, r1
 8019aaa:	465e      	mov	r6, fp
 8019aac:	46aa      	mov	sl, r5
 8019aae:	46a9      	mov	r9, r5
 8019ab0:	9501      	str	r5, [sp, #4]
 8019ab2:	68a2      	ldr	r2, [r4, #8]
 8019ab4:	b152      	cbz	r2, 8019acc <_scanf_float+0x60>
 8019ab6:	683b      	ldr	r3, [r7, #0]
 8019ab8:	781b      	ldrb	r3, [r3, #0]
 8019aba:	2b4e      	cmp	r3, #78	; 0x4e
 8019abc:	d864      	bhi.n	8019b88 <_scanf_float+0x11c>
 8019abe:	2b40      	cmp	r3, #64	; 0x40
 8019ac0:	d83c      	bhi.n	8019b3c <_scanf_float+0xd0>
 8019ac2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019ac6:	b2c8      	uxtb	r0, r1
 8019ac8:	280e      	cmp	r0, #14
 8019aca:	d93a      	bls.n	8019b42 <_scanf_float+0xd6>
 8019acc:	f1b9 0f00 	cmp.w	r9, #0
 8019ad0:	d003      	beq.n	8019ada <_scanf_float+0x6e>
 8019ad2:	6823      	ldr	r3, [r4, #0]
 8019ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8019ad8:	6023      	str	r3, [r4, #0]
 8019ada:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ade:	f1ba 0f01 	cmp.w	sl, #1
 8019ae2:	f200 8113 	bhi.w	8019d0c <_scanf_float+0x2a0>
 8019ae6:	455e      	cmp	r6, fp
 8019ae8:	f200 8105 	bhi.w	8019cf6 <_scanf_float+0x28a>
 8019aec:	2501      	movs	r5, #1
 8019aee:	4628      	mov	r0, r5
 8019af0:	b007      	add	sp, #28
 8019af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8019afa:	2a0d      	cmp	r2, #13
 8019afc:	d8e6      	bhi.n	8019acc <_scanf_float+0x60>
 8019afe:	a101      	add	r1, pc, #4	; (adr r1, 8019b04 <_scanf_float+0x98>)
 8019b00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019b04:	08019c43 	.word	0x08019c43
 8019b08:	08019acd 	.word	0x08019acd
 8019b0c:	08019acd 	.word	0x08019acd
 8019b10:	08019acd 	.word	0x08019acd
 8019b14:	08019ca3 	.word	0x08019ca3
 8019b18:	08019c7b 	.word	0x08019c7b
 8019b1c:	08019acd 	.word	0x08019acd
 8019b20:	08019acd 	.word	0x08019acd
 8019b24:	08019c51 	.word	0x08019c51
 8019b28:	08019acd 	.word	0x08019acd
 8019b2c:	08019acd 	.word	0x08019acd
 8019b30:	08019acd 	.word	0x08019acd
 8019b34:	08019acd 	.word	0x08019acd
 8019b38:	08019c09 	.word	0x08019c09
 8019b3c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8019b40:	e7db      	b.n	8019afa <_scanf_float+0x8e>
 8019b42:	290e      	cmp	r1, #14
 8019b44:	d8c2      	bhi.n	8019acc <_scanf_float+0x60>
 8019b46:	a001      	add	r0, pc, #4	; (adr r0, 8019b4c <_scanf_float+0xe0>)
 8019b48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019b4c:	08019bfb 	.word	0x08019bfb
 8019b50:	08019acd 	.word	0x08019acd
 8019b54:	08019bfb 	.word	0x08019bfb
 8019b58:	08019c8f 	.word	0x08019c8f
 8019b5c:	08019acd 	.word	0x08019acd
 8019b60:	08019ba9 	.word	0x08019ba9
 8019b64:	08019be5 	.word	0x08019be5
 8019b68:	08019be5 	.word	0x08019be5
 8019b6c:	08019be5 	.word	0x08019be5
 8019b70:	08019be5 	.word	0x08019be5
 8019b74:	08019be5 	.word	0x08019be5
 8019b78:	08019be5 	.word	0x08019be5
 8019b7c:	08019be5 	.word	0x08019be5
 8019b80:	08019be5 	.word	0x08019be5
 8019b84:	08019be5 	.word	0x08019be5
 8019b88:	2b6e      	cmp	r3, #110	; 0x6e
 8019b8a:	d809      	bhi.n	8019ba0 <_scanf_float+0x134>
 8019b8c:	2b60      	cmp	r3, #96	; 0x60
 8019b8e:	d8b2      	bhi.n	8019af6 <_scanf_float+0x8a>
 8019b90:	2b54      	cmp	r3, #84	; 0x54
 8019b92:	d077      	beq.n	8019c84 <_scanf_float+0x218>
 8019b94:	2b59      	cmp	r3, #89	; 0x59
 8019b96:	d199      	bne.n	8019acc <_scanf_float+0x60>
 8019b98:	2d07      	cmp	r5, #7
 8019b9a:	d197      	bne.n	8019acc <_scanf_float+0x60>
 8019b9c:	2508      	movs	r5, #8
 8019b9e:	e029      	b.n	8019bf4 <_scanf_float+0x188>
 8019ba0:	2b74      	cmp	r3, #116	; 0x74
 8019ba2:	d06f      	beq.n	8019c84 <_scanf_float+0x218>
 8019ba4:	2b79      	cmp	r3, #121	; 0x79
 8019ba6:	e7f6      	b.n	8019b96 <_scanf_float+0x12a>
 8019ba8:	6821      	ldr	r1, [r4, #0]
 8019baa:	05c8      	lsls	r0, r1, #23
 8019bac:	d51a      	bpl.n	8019be4 <_scanf_float+0x178>
 8019bae:	9b02      	ldr	r3, [sp, #8]
 8019bb0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8019bb4:	6021      	str	r1, [r4, #0]
 8019bb6:	f109 0901 	add.w	r9, r9, #1
 8019bba:	b11b      	cbz	r3, 8019bc4 <_scanf_float+0x158>
 8019bbc:	3b01      	subs	r3, #1
 8019bbe:	3201      	adds	r2, #1
 8019bc0:	9302      	str	r3, [sp, #8]
 8019bc2:	60a2      	str	r2, [r4, #8]
 8019bc4:	68a3      	ldr	r3, [r4, #8]
 8019bc6:	3b01      	subs	r3, #1
 8019bc8:	60a3      	str	r3, [r4, #8]
 8019bca:	6923      	ldr	r3, [r4, #16]
 8019bcc:	3301      	adds	r3, #1
 8019bce:	6123      	str	r3, [r4, #16]
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	3b01      	subs	r3, #1
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	607b      	str	r3, [r7, #4]
 8019bd8:	f340 8084 	ble.w	8019ce4 <_scanf_float+0x278>
 8019bdc:	683b      	ldr	r3, [r7, #0]
 8019bde:	3301      	adds	r3, #1
 8019be0:	603b      	str	r3, [r7, #0]
 8019be2:	e766      	b.n	8019ab2 <_scanf_float+0x46>
 8019be4:	eb1a 0f05 	cmn.w	sl, r5
 8019be8:	f47f af70 	bne.w	8019acc <_scanf_float+0x60>
 8019bec:	6822      	ldr	r2, [r4, #0]
 8019bee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8019bf2:	6022      	str	r2, [r4, #0]
 8019bf4:	f806 3b01 	strb.w	r3, [r6], #1
 8019bf8:	e7e4      	b.n	8019bc4 <_scanf_float+0x158>
 8019bfa:	6822      	ldr	r2, [r4, #0]
 8019bfc:	0610      	lsls	r0, r2, #24
 8019bfe:	f57f af65 	bpl.w	8019acc <_scanf_float+0x60>
 8019c02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019c06:	e7f4      	b.n	8019bf2 <_scanf_float+0x186>
 8019c08:	f1ba 0f00 	cmp.w	sl, #0
 8019c0c:	d10e      	bne.n	8019c2c <_scanf_float+0x1c0>
 8019c0e:	f1b9 0f00 	cmp.w	r9, #0
 8019c12:	d10e      	bne.n	8019c32 <_scanf_float+0x1c6>
 8019c14:	6822      	ldr	r2, [r4, #0]
 8019c16:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019c1a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019c1e:	d108      	bne.n	8019c32 <_scanf_float+0x1c6>
 8019c20:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019c24:	6022      	str	r2, [r4, #0]
 8019c26:	f04f 0a01 	mov.w	sl, #1
 8019c2a:	e7e3      	b.n	8019bf4 <_scanf_float+0x188>
 8019c2c:	f1ba 0f02 	cmp.w	sl, #2
 8019c30:	d055      	beq.n	8019cde <_scanf_float+0x272>
 8019c32:	2d01      	cmp	r5, #1
 8019c34:	d002      	beq.n	8019c3c <_scanf_float+0x1d0>
 8019c36:	2d04      	cmp	r5, #4
 8019c38:	f47f af48 	bne.w	8019acc <_scanf_float+0x60>
 8019c3c:	3501      	adds	r5, #1
 8019c3e:	b2ed      	uxtb	r5, r5
 8019c40:	e7d8      	b.n	8019bf4 <_scanf_float+0x188>
 8019c42:	f1ba 0f01 	cmp.w	sl, #1
 8019c46:	f47f af41 	bne.w	8019acc <_scanf_float+0x60>
 8019c4a:	f04f 0a02 	mov.w	sl, #2
 8019c4e:	e7d1      	b.n	8019bf4 <_scanf_float+0x188>
 8019c50:	b97d      	cbnz	r5, 8019c72 <_scanf_float+0x206>
 8019c52:	f1b9 0f00 	cmp.w	r9, #0
 8019c56:	f47f af3c 	bne.w	8019ad2 <_scanf_float+0x66>
 8019c5a:	6822      	ldr	r2, [r4, #0]
 8019c5c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8019c60:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8019c64:	f47f af39 	bne.w	8019ada <_scanf_float+0x6e>
 8019c68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019c6c:	6022      	str	r2, [r4, #0]
 8019c6e:	2501      	movs	r5, #1
 8019c70:	e7c0      	b.n	8019bf4 <_scanf_float+0x188>
 8019c72:	2d03      	cmp	r5, #3
 8019c74:	d0e2      	beq.n	8019c3c <_scanf_float+0x1d0>
 8019c76:	2d05      	cmp	r5, #5
 8019c78:	e7de      	b.n	8019c38 <_scanf_float+0x1cc>
 8019c7a:	2d02      	cmp	r5, #2
 8019c7c:	f47f af26 	bne.w	8019acc <_scanf_float+0x60>
 8019c80:	2503      	movs	r5, #3
 8019c82:	e7b7      	b.n	8019bf4 <_scanf_float+0x188>
 8019c84:	2d06      	cmp	r5, #6
 8019c86:	f47f af21 	bne.w	8019acc <_scanf_float+0x60>
 8019c8a:	2507      	movs	r5, #7
 8019c8c:	e7b2      	b.n	8019bf4 <_scanf_float+0x188>
 8019c8e:	6822      	ldr	r2, [r4, #0]
 8019c90:	0591      	lsls	r1, r2, #22
 8019c92:	f57f af1b 	bpl.w	8019acc <_scanf_float+0x60>
 8019c96:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8019c9a:	6022      	str	r2, [r4, #0]
 8019c9c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019ca0:	e7a8      	b.n	8019bf4 <_scanf_float+0x188>
 8019ca2:	6822      	ldr	r2, [r4, #0]
 8019ca4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8019ca8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8019cac:	d006      	beq.n	8019cbc <_scanf_float+0x250>
 8019cae:	0550      	lsls	r0, r2, #21
 8019cb0:	f57f af0c 	bpl.w	8019acc <_scanf_float+0x60>
 8019cb4:	f1b9 0f00 	cmp.w	r9, #0
 8019cb8:	f43f af0f 	beq.w	8019ada <_scanf_float+0x6e>
 8019cbc:	0591      	lsls	r1, r2, #22
 8019cbe:	bf58      	it	pl
 8019cc0:	9901      	ldrpl	r1, [sp, #4]
 8019cc2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8019cc6:	bf58      	it	pl
 8019cc8:	eba9 0101 	subpl.w	r1, r9, r1
 8019ccc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8019cd0:	bf58      	it	pl
 8019cd2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019cd6:	6022      	str	r2, [r4, #0]
 8019cd8:	f04f 0900 	mov.w	r9, #0
 8019cdc:	e78a      	b.n	8019bf4 <_scanf_float+0x188>
 8019cde:	f04f 0a03 	mov.w	sl, #3
 8019ce2:	e787      	b.n	8019bf4 <_scanf_float+0x188>
 8019ce4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019ce8:	4639      	mov	r1, r7
 8019cea:	4640      	mov	r0, r8
 8019cec:	4798      	blx	r3
 8019cee:	2800      	cmp	r0, #0
 8019cf0:	f43f aedf 	beq.w	8019ab2 <_scanf_float+0x46>
 8019cf4:	e6ea      	b.n	8019acc <_scanf_float+0x60>
 8019cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019cfe:	463a      	mov	r2, r7
 8019d00:	4640      	mov	r0, r8
 8019d02:	4798      	blx	r3
 8019d04:	6923      	ldr	r3, [r4, #16]
 8019d06:	3b01      	subs	r3, #1
 8019d08:	6123      	str	r3, [r4, #16]
 8019d0a:	e6ec      	b.n	8019ae6 <_scanf_float+0x7a>
 8019d0c:	1e6b      	subs	r3, r5, #1
 8019d0e:	2b06      	cmp	r3, #6
 8019d10:	d825      	bhi.n	8019d5e <_scanf_float+0x2f2>
 8019d12:	2d02      	cmp	r5, #2
 8019d14:	d836      	bhi.n	8019d84 <_scanf_float+0x318>
 8019d16:	455e      	cmp	r6, fp
 8019d18:	f67f aee8 	bls.w	8019aec <_scanf_float+0x80>
 8019d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d24:	463a      	mov	r2, r7
 8019d26:	4640      	mov	r0, r8
 8019d28:	4798      	blx	r3
 8019d2a:	6923      	ldr	r3, [r4, #16]
 8019d2c:	3b01      	subs	r3, #1
 8019d2e:	6123      	str	r3, [r4, #16]
 8019d30:	e7f1      	b.n	8019d16 <_scanf_float+0x2aa>
 8019d32:	9802      	ldr	r0, [sp, #8]
 8019d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8019d3c:	9002      	str	r0, [sp, #8]
 8019d3e:	463a      	mov	r2, r7
 8019d40:	4640      	mov	r0, r8
 8019d42:	4798      	blx	r3
 8019d44:	6923      	ldr	r3, [r4, #16]
 8019d46:	3b01      	subs	r3, #1
 8019d48:	6123      	str	r3, [r4, #16]
 8019d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019d4e:	fa5f fa8a 	uxtb.w	sl, sl
 8019d52:	f1ba 0f02 	cmp.w	sl, #2
 8019d56:	d1ec      	bne.n	8019d32 <_scanf_float+0x2c6>
 8019d58:	3d03      	subs	r5, #3
 8019d5a:	b2ed      	uxtb	r5, r5
 8019d5c:	1b76      	subs	r6, r6, r5
 8019d5e:	6823      	ldr	r3, [r4, #0]
 8019d60:	05da      	lsls	r2, r3, #23
 8019d62:	d52f      	bpl.n	8019dc4 <_scanf_float+0x358>
 8019d64:	055b      	lsls	r3, r3, #21
 8019d66:	d510      	bpl.n	8019d8a <_scanf_float+0x31e>
 8019d68:	455e      	cmp	r6, fp
 8019d6a:	f67f aebf 	bls.w	8019aec <_scanf_float+0x80>
 8019d6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019d72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019d76:	463a      	mov	r2, r7
 8019d78:	4640      	mov	r0, r8
 8019d7a:	4798      	blx	r3
 8019d7c:	6923      	ldr	r3, [r4, #16]
 8019d7e:	3b01      	subs	r3, #1
 8019d80:	6123      	str	r3, [r4, #16]
 8019d82:	e7f1      	b.n	8019d68 <_scanf_float+0x2fc>
 8019d84:	46aa      	mov	sl, r5
 8019d86:	9602      	str	r6, [sp, #8]
 8019d88:	e7df      	b.n	8019d4a <_scanf_float+0x2de>
 8019d8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019d8e:	6923      	ldr	r3, [r4, #16]
 8019d90:	2965      	cmp	r1, #101	; 0x65
 8019d92:	f103 33ff 	add.w	r3, r3, #4294967295
 8019d96:	f106 35ff 	add.w	r5, r6, #4294967295
 8019d9a:	6123      	str	r3, [r4, #16]
 8019d9c:	d00c      	beq.n	8019db8 <_scanf_float+0x34c>
 8019d9e:	2945      	cmp	r1, #69	; 0x45
 8019da0:	d00a      	beq.n	8019db8 <_scanf_float+0x34c>
 8019da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019da6:	463a      	mov	r2, r7
 8019da8:	4640      	mov	r0, r8
 8019daa:	4798      	blx	r3
 8019dac:	6923      	ldr	r3, [r4, #16]
 8019dae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019db2:	3b01      	subs	r3, #1
 8019db4:	1eb5      	subs	r5, r6, #2
 8019db6:	6123      	str	r3, [r4, #16]
 8019db8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019dbc:	463a      	mov	r2, r7
 8019dbe:	4640      	mov	r0, r8
 8019dc0:	4798      	blx	r3
 8019dc2:	462e      	mov	r6, r5
 8019dc4:	6825      	ldr	r5, [r4, #0]
 8019dc6:	f015 0510 	ands.w	r5, r5, #16
 8019dca:	d159      	bne.n	8019e80 <_scanf_float+0x414>
 8019dcc:	7035      	strb	r5, [r6, #0]
 8019dce:	6823      	ldr	r3, [r4, #0]
 8019dd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8019dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019dd8:	d11b      	bne.n	8019e12 <_scanf_float+0x3a6>
 8019dda:	9b01      	ldr	r3, [sp, #4]
 8019ddc:	454b      	cmp	r3, r9
 8019dde:	eba3 0209 	sub.w	r2, r3, r9
 8019de2:	d123      	bne.n	8019e2c <_scanf_float+0x3c0>
 8019de4:	2200      	movs	r2, #0
 8019de6:	4659      	mov	r1, fp
 8019de8:	4640      	mov	r0, r8
 8019dea:	f000 fe97 	bl	801ab1c <_strtod_r>
 8019dee:	6822      	ldr	r2, [r4, #0]
 8019df0:	9b03      	ldr	r3, [sp, #12]
 8019df2:	f012 0f02 	tst.w	r2, #2
 8019df6:	ec57 6b10 	vmov	r6, r7, d0
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	d021      	beq.n	8019e42 <_scanf_float+0x3d6>
 8019dfe:	9903      	ldr	r1, [sp, #12]
 8019e00:	1d1a      	adds	r2, r3, #4
 8019e02:	600a      	str	r2, [r1, #0]
 8019e04:	681b      	ldr	r3, [r3, #0]
 8019e06:	e9c3 6700 	strd	r6, r7, [r3]
 8019e0a:	68e3      	ldr	r3, [r4, #12]
 8019e0c:	3301      	adds	r3, #1
 8019e0e:	60e3      	str	r3, [r4, #12]
 8019e10:	e66d      	b.n	8019aee <_scanf_float+0x82>
 8019e12:	9b04      	ldr	r3, [sp, #16]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d0e5      	beq.n	8019de4 <_scanf_float+0x378>
 8019e18:	9905      	ldr	r1, [sp, #20]
 8019e1a:	230a      	movs	r3, #10
 8019e1c:	462a      	mov	r2, r5
 8019e1e:	3101      	adds	r1, #1
 8019e20:	4640      	mov	r0, r8
 8019e22:	f000 ff03 	bl	801ac2c <_strtol_r>
 8019e26:	9b04      	ldr	r3, [sp, #16]
 8019e28:	9e05      	ldr	r6, [sp, #20]
 8019e2a:	1ac2      	subs	r2, r0, r3
 8019e2c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8019e30:	429e      	cmp	r6, r3
 8019e32:	bf28      	it	cs
 8019e34:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8019e38:	4912      	ldr	r1, [pc, #72]	; (8019e84 <_scanf_float+0x418>)
 8019e3a:	4630      	mov	r0, r6
 8019e3c:	f000 f82c 	bl	8019e98 <siprintf>
 8019e40:	e7d0      	b.n	8019de4 <_scanf_float+0x378>
 8019e42:	9903      	ldr	r1, [sp, #12]
 8019e44:	f012 0f04 	tst.w	r2, #4
 8019e48:	f103 0204 	add.w	r2, r3, #4
 8019e4c:	600a      	str	r2, [r1, #0]
 8019e4e:	d1d9      	bne.n	8019e04 <_scanf_float+0x398>
 8019e50:	f8d3 8000 	ldr.w	r8, [r3]
 8019e54:	ee10 2a10 	vmov	r2, s0
 8019e58:	ee10 0a10 	vmov	r0, s0
 8019e5c:	463b      	mov	r3, r7
 8019e5e:	4639      	mov	r1, r7
 8019e60:	f7fe fed4 	bl	8018c0c <__aeabi_dcmpun>
 8019e64:	b128      	cbz	r0, 8019e72 <_scanf_float+0x406>
 8019e66:	4808      	ldr	r0, [pc, #32]	; (8019e88 <_scanf_float+0x41c>)
 8019e68:	f000 f810 	bl	8019e8c <nanf>
 8019e6c:	ed88 0a00 	vstr	s0, [r8]
 8019e70:	e7cb      	b.n	8019e0a <_scanf_float+0x39e>
 8019e72:	4630      	mov	r0, r6
 8019e74:	4639      	mov	r1, r7
 8019e76:	f7fe ff27 	bl	8018cc8 <__aeabi_d2f>
 8019e7a:	f8c8 0000 	str.w	r0, [r8]
 8019e7e:	e7c4      	b.n	8019e0a <_scanf_float+0x39e>
 8019e80:	2500      	movs	r5, #0
 8019e82:	e634      	b.n	8019aee <_scanf_float+0x82>
 8019e84:	08051934 	.word	0x08051934
 8019e88:	08051d40 	.word	0x08051d40

08019e8c <nanf>:
 8019e8c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e94 <nanf+0x8>
 8019e90:	4770      	bx	lr
 8019e92:	bf00      	nop
 8019e94:	7fc00000 	.word	0x7fc00000

08019e98 <siprintf>:
 8019e98:	b40e      	push	{r1, r2, r3}
 8019e9a:	b500      	push	{lr}
 8019e9c:	b09c      	sub	sp, #112	; 0x70
 8019e9e:	ab1d      	add	r3, sp, #116	; 0x74
 8019ea0:	9002      	str	r0, [sp, #8]
 8019ea2:	9006      	str	r0, [sp, #24]
 8019ea4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ea8:	4809      	ldr	r0, [pc, #36]	; (8019ed0 <siprintf+0x38>)
 8019eaa:	9107      	str	r1, [sp, #28]
 8019eac:	9104      	str	r1, [sp, #16]
 8019eae:	4909      	ldr	r1, [pc, #36]	; (8019ed4 <siprintf+0x3c>)
 8019eb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8019eb4:	9105      	str	r1, [sp, #20]
 8019eb6:	6800      	ldr	r0, [r0, #0]
 8019eb8:	9301      	str	r3, [sp, #4]
 8019eba:	a902      	add	r1, sp, #8
 8019ebc:	f002 feee 	bl	801cc9c <_svfiprintf_r>
 8019ec0:	9b02      	ldr	r3, [sp, #8]
 8019ec2:	2200      	movs	r2, #0
 8019ec4:	701a      	strb	r2, [r3, #0]
 8019ec6:	b01c      	add	sp, #112	; 0x70
 8019ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019ecc:	b003      	add	sp, #12
 8019ece:	4770      	bx	lr
 8019ed0:	20000064 	.word	0x20000064
 8019ed4:	ffff0208 	.word	0xffff0208

08019ed8 <sulp>:
 8019ed8:	b570      	push	{r4, r5, r6, lr}
 8019eda:	4604      	mov	r4, r0
 8019edc:	460d      	mov	r5, r1
 8019ede:	ec45 4b10 	vmov	d0, r4, r5
 8019ee2:	4616      	mov	r6, r2
 8019ee4:	f002 fc38 	bl	801c758 <__ulp>
 8019ee8:	ec51 0b10 	vmov	r0, r1, d0
 8019eec:	b17e      	cbz	r6, 8019f0e <sulp+0x36>
 8019eee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019ef2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	dd09      	ble.n	8019f0e <sulp+0x36>
 8019efa:	051b      	lsls	r3, r3, #20
 8019efc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019f00:	2400      	movs	r4, #0
 8019f02:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019f06:	4622      	mov	r2, r4
 8019f08:	462b      	mov	r3, r5
 8019f0a:	f7fe fbe5 	bl	80186d8 <__aeabi_dmul>
 8019f0e:	bd70      	pop	{r4, r5, r6, pc}

08019f10 <_strtod_l>:
 8019f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f14:	ed2d 8b02 	vpush	{d8}
 8019f18:	b09d      	sub	sp, #116	; 0x74
 8019f1a:	461f      	mov	r7, r3
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	9318      	str	r3, [sp, #96]	; 0x60
 8019f20:	4ba2      	ldr	r3, [pc, #648]	; (801a1ac <_strtod_l+0x29c>)
 8019f22:	9213      	str	r2, [sp, #76]	; 0x4c
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	9305      	str	r3, [sp, #20]
 8019f28:	4604      	mov	r4, r0
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	4688      	mov	r8, r1
 8019f2e:	f7fe f9bb 	bl	80182a8 <strlen>
 8019f32:	f04f 0a00 	mov.w	sl, #0
 8019f36:	4605      	mov	r5, r0
 8019f38:	f04f 0b00 	mov.w	fp, #0
 8019f3c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019f40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019f42:	781a      	ldrb	r2, [r3, #0]
 8019f44:	2a2b      	cmp	r2, #43	; 0x2b
 8019f46:	d04e      	beq.n	8019fe6 <_strtod_l+0xd6>
 8019f48:	d83b      	bhi.n	8019fc2 <_strtod_l+0xb2>
 8019f4a:	2a0d      	cmp	r2, #13
 8019f4c:	d834      	bhi.n	8019fb8 <_strtod_l+0xa8>
 8019f4e:	2a08      	cmp	r2, #8
 8019f50:	d834      	bhi.n	8019fbc <_strtod_l+0xac>
 8019f52:	2a00      	cmp	r2, #0
 8019f54:	d03e      	beq.n	8019fd4 <_strtod_l+0xc4>
 8019f56:	2300      	movs	r3, #0
 8019f58:	930a      	str	r3, [sp, #40]	; 0x28
 8019f5a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8019f5c:	7833      	ldrb	r3, [r6, #0]
 8019f5e:	2b30      	cmp	r3, #48	; 0x30
 8019f60:	f040 80b0 	bne.w	801a0c4 <_strtod_l+0x1b4>
 8019f64:	7873      	ldrb	r3, [r6, #1]
 8019f66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019f6a:	2b58      	cmp	r3, #88	; 0x58
 8019f6c:	d168      	bne.n	801a040 <_strtod_l+0x130>
 8019f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019f70:	9301      	str	r3, [sp, #4]
 8019f72:	ab18      	add	r3, sp, #96	; 0x60
 8019f74:	9702      	str	r7, [sp, #8]
 8019f76:	9300      	str	r3, [sp, #0]
 8019f78:	4a8d      	ldr	r2, [pc, #564]	; (801a1b0 <_strtod_l+0x2a0>)
 8019f7a:	ab19      	add	r3, sp, #100	; 0x64
 8019f7c:	a917      	add	r1, sp, #92	; 0x5c
 8019f7e:	4620      	mov	r0, r4
 8019f80:	f001 fd44 	bl	801ba0c <__gethex>
 8019f84:	f010 0707 	ands.w	r7, r0, #7
 8019f88:	4605      	mov	r5, r0
 8019f8a:	d005      	beq.n	8019f98 <_strtod_l+0x88>
 8019f8c:	2f06      	cmp	r7, #6
 8019f8e:	d12c      	bne.n	8019fea <_strtod_l+0xda>
 8019f90:	3601      	adds	r6, #1
 8019f92:	2300      	movs	r3, #0
 8019f94:	9617      	str	r6, [sp, #92]	; 0x5c
 8019f96:	930a      	str	r3, [sp, #40]	; 0x28
 8019f98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	f040 8590 	bne.w	801aac0 <_strtod_l+0xbb0>
 8019fa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019fa2:	b1eb      	cbz	r3, 8019fe0 <_strtod_l+0xd0>
 8019fa4:	4652      	mov	r2, sl
 8019fa6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019faa:	ec43 2b10 	vmov	d0, r2, r3
 8019fae:	b01d      	add	sp, #116	; 0x74
 8019fb0:	ecbd 8b02 	vpop	{d8}
 8019fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb8:	2a20      	cmp	r2, #32
 8019fba:	d1cc      	bne.n	8019f56 <_strtod_l+0x46>
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	9317      	str	r3, [sp, #92]	; 0x5c
 8019fc0:	e7be      	b.n	8019f40 <_strtod_l+0x30>
 8019fc2:	2a2d      	cmp	r2, #45	; 0x2d
 8019fc4:	d1c7      	bne.n	8019f56 <_strtod_l+0x46>
 8019fc6:	2201      	movs	r2, #1
 8019fc8:	920a      	str	r2, [sp, #40]	; 0x28
 8019fca:	1c5a      	adds	r2, r3, #1
 8019fcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8019fce:	785b      	ldrb	r3, [r3, #1]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d1c2      	bne.n	8019f5a <_strtod_l+0x4a>
 8019fd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019fd6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	f040 856e 	bne.w	801aabc <_strtod_l+0xbac>
 8019fe0:	4652      	mov	r2, sl
 8019fe2:	465b      	mov	r3, fp
 8019fe4:	e7e1      	b.n	8019faa <_strtod_l+0x9a>
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	e7ee      	b.n	8019fc8 <_strtod_l+0xb8>
 8019fea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019fec:	b13a      	cbz	r2, 8019ffe <_strtod_l+0xee>
 8019fee:	2135      	movs	r1, #53	; 0x35
 8019ff0:	a81a      	add	r0, sp, #104	; 0x68
 8019ff2:	f002 fcbc 	bl	801c96e <__copybits>
 8019ff6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019ff8:	4620      	mov	r0, r4
 8019ffa:	f002 f87b 	bl	801c0f4 <_Bfree>
 8019ffe:	3f01      	subs	r7, #1
 801a000:	2f04      	cmp	r7, #4
 801a002:	d806      	bhi.n	801a012 <_strtod_l+0x102>
 801a004:	e8df f007 	tbb	[pc, r7]
 801a008:	1714030a 	.word	0x1714030a
 801a00c:	0a          	.byte	0x0a
 801a00d:	00          	.byte	0x00
 801a00e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a012:	0728      	lsls	r0, r5, #28
 801a014:	d5c0      	bpl.n	8019f98 <_strtod_l+0x88>
 801a016:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a01a:	e7bd      	b.n	8019f98 <_strtod_l+0x88>
 801a01c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a020:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a022:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a026:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a02a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a02e:	e7f0      	b.n	801a012 <_strtod_l+0x102>
 801a030:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a1b4 <_strtod_l+0x2a4>
 801a034:	e7ed      	b.n	801a012 <_strtod_l+0x102>
 801a036:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a03a:	f04f 3aff 	mov.w	sl, #4294967295
 801a03e:	e7e8      	b.n	801a012 <_strtod_l+0x102>
 801a040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a042:	1c5a      	adds	r2, r3, #1
 801a044:	9217      	str	r2, [sp, #92]	; 0x5c
 801a046:	785b      	ldrb	r3, [r3, #1]
 801a048:	2b30      	cmp	r3, #48	; 0x30
 801a04a:	d0f9      	beq.n	801a040 <_strtod_l+0x130>
 801a04c:	2b00      	cmp	r3, #0
 801a04e:	d0a3      	beq.n	8019f98 <_strtod_l+0x88>
 801a050:	2301      	movs	r3, #1
 801a052:	f04f 0900 	mov.w	r9, #0
 801a056:	9304      	str	r3, [sp, #16]
 801a058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a05a:	9308      	str	r3, [sp, #32]
 801a05c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a060:	464f      	mov	r7, r9
 801a062:	220a      	movs	r2, #10
 801a064:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a066:	7806      	ldrb	r6, [r0, #0]
 801a068:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a06c:	b2d9      	uxtb	r1, r3
 801a06e:	2909      	cmp	r1, #9
 801a070:	d92a      	bls.n	801a0c8 <_strtod_l+0x1b8>
 801a072:	9905      	ldr	r1, [sp, #20]
 801a074:	462a      	mov	r2, r5
 801a076:	f002 ff2b 	bl	801ced0 <strncmp>
 801a07a:	b398      	cbz	r0, 801a0e4 <_strtod_l+0x1d4>
 801a07c:	2000      	movs	r0, #0
 801a07e:	4632      	mov	r2, r6
 801a080:	463d      	mov	r5, r7
 801a082:	9005      	str	r0, [sp, #20]
 801a084:	4603      	mov	r3, r0
 801a086:	2a65      	cmp	r2, #101	; 0x65
 801a088:	d001      	beq.n	801a08e <_strtod_l+0x17e>
 801a08a:	2a45      	cmp	r2, #69	; 0x45
 801a08c:	d118      	bne.n	801a0c0 <_strtod_l+0x1b0>
 801a08e:	b91d      	cbnz	r5, 801a098 <_strtod_l+0x188>
 801a090:	9a04      	ldr	r2, [sp, #16]
 801a092:	4302      	orrs	r2, r0
 801a094:	d09e      	beq.n	8019fd4 <_strtod_l+0xc4>
 801a096:	2500      	movs	r5, #0
 801a098:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a09c:	f108 0201 	add.w	r2, r8, #1
 801a0a0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a0a2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a0a6:	2a2b      	cmp	r2, #43	; 0x2b
 801a0a8:	d075      	beq.n	801a196 <_strtod_l+0x286>
 801a0aa:	2a2d      	cmp	r2, #45	; 0x2d
 801a0ac:	d07b      	beq.n	801a1a6 <_strtod_l+0x296>
 801a0ae:	f04f 0c00 	mov.w	ip, #0
 801a0b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a0b6:	2909      	cmp	r1, #9
 801a0b8:	f240 8082 	bls.w	801a1c0 <_strtod_l+0x2b0>
 801a0bc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a0c0:	2600      	movs	r6, #0
 801a0c2:	e09d      	b.n	801a200 <_strtod_l+0x2f0>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	e7c4      	b.n	801a052 <_strtod_l+0x142>
 801a0c8:	2f08      	cmp	r7, #8
 801a0ca:	bfd8      	it	le
 801a0cc:	9907      	ldrle	r1, [sp, #28]
 801a0ce:	f100 0001 	add.w	r0, r0, #1
 801a0d2:	bfda      	itte	le
 801a0d4:	fb02 3301 	mlale	r3, r2, r1, r3
 801a0d8:	9307      	strle	r3, [sp, #28]
 801a0da:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a0de:	3701      	adds	r7, #1
 801a0e0:	9017      	str	r0, [sp, #92]	; 0x5c
 801a0e2:	e7bf      	b.n	801a064 <_strtod_l+0x154>
 801a0e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a0e6:	195a      	adds	r2, r3, r5
 801a0e8:	9217      	str	r2, [sp, #92]	; 0x5c
 801a0ea:	5d5a      	ldrb	r2, [r3, r5]
 801a0ec:	2f00      	cmp	r7, #0
 801a0ee:	d037      	beq.n	801a160 <_strtod_l+0x250>
 801a0f0:	9005      	str	r0, [sp, #20]
 801a0f2:	463d      	mov	r5, r7
 801a0f4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a0f8:	2b09      	cmp	r3, #9
 801a0fa:	d912      	bls.n	801a122 <_strtod_l+0x212>
 801a0fc:	2301      	movs	r3, #1
 801a0fe:	e7c2      	b.n	801a086 <_strtod_l+0x176>
 801a100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a102:	1c5a      	adds	r2, r3, #1
 801a104:	9217      	str	r2, [sp, #92]	; 0x5c
 801a106:	785a      	ldrb	r2, [r3, #1]
 801a108:	3001      	adds	r0, #1
 801a10a:	2a30      	cmp	r2, #48	; 0x30
 801a10c:	d0f8      	beq.n	801a100 <_strtod_l+0x1f0>
 801a10e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a112:	2b08      	cmp	r3, #8
 801a114:	f200 84d9 	bhi.w	801aaca <_strtod_l+0xbba>
 801a118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a11a:	9005      	str	r0, [sp, #20]
 801a11c:	2000      	movs	r0, #0
 801a11e:	9308      	str	r3, [sp, #32]
 801a120:	4605      	mov	r5, r0
 801a122:	3a30      	subs	r2, #48	; 0x30
 801a124:	f100 0301 	add.w	r3, r0, #1
 801a128:	d014      	beq.n	801a154 <_strtod_l+0x244>
 801a12a:	9905      	ldr	r1, [sp, #20]
 801a12c:	4419      	add	r1, r3
 801a12e:	9105      	str	r1, [sp, #20]
 801a130:	462b      	mov	r3, r5
 801a132:	eb00 0e05 	add.w	lr, r0, r5
 801a136:	210a      	movs	r1, #10
 801a138:	4573      	cmp	r3, lr
 801a13a:	d113      	bne.n	801a164 <_strtod_l+0x254>
 801a13c:	182b      	adds	r3, r5, r0
 801a13e:	2b08      	cmp	r3, #8
 801a140:	f105 0501 	add.w	r5, r5, #1
 801a144:	4405      	add	r5, r0
 801a146:	dc1c      	bgt.n	801a182 <_strtod_l+0x272>
 801a148:	9907      	ldr	r1, [sp, #28]
 801a14a:	230a      	movs	r3, #10
 801a14c:	fb03 2301 	mla	r3, r3, r1, r2
 801a150:	9307      	str	r3, [sp, #28]
 801a152:	2300      	movs	r3, #0
 801a154:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a156:	1c51      	adds	r1, r2, #1
 801a158:	9117      	str	r1, [sp, #92]	; 0x5c
 801a15a:	7852      	ldrb	r2, [r2, #1]
 801a15c:	4618      	mov	r0, r3
 801a15e:	e7c9      	b.n	801a0f4 <_strtod_l+0x1e4>
 801a160:	4638      	mov	r0, r7
 801a162:	e7d2      	b.n	801a10a <_strtod_l+0x1fa>
 801a164:	2b08      	cmp	r3, #8
 801a166:	dc04      	bgt.n	801a172 <_strtod_l+0x262>
 801a168:	9e07      	ldr	r6, [sp, #28]
 801a16a:	434e      	muls	r6, r1
 801a16c:	9607      	str	r6, [sp, #28]
 801a16e:	3301      	adds	r3, #1
 801a170:	e7e2      	b.n	801a138 <_strtod_l+0x228>
 801a172:	f103 0c01 	add.w	ip, r3, #1
 801a176:	f1bc 0f10 	cmp.w	ip, #16
 801a17a:	bfd8      	it	le
 801a17c:	fb01 f909 	mulle.w	r9, r1, r9
 801a180:	e7f5      	b.n	801a16e <_strtod_l+0x25e>
 801a182:	2d10      	cmp	r5, #16
 801a184:	bfdc      	itt	le
 801a186:	230a      	movle	r3, #10
 801a188:	fb03 2909 	mlale	r9, r3, r9, r2
 801a18c:	e7e1      	b.n	801a152 <_strtod_l+0x242>
 801a18e:	2300      	movs	r3, #0
 801a190:	9305      	str	r3, [sp, #20]
 801a192:	2301      	movs	r3, #1
 801a194:	e77c      	b.n	801a090 <_strtod_l+0x180>
 801a196:	f04f 0c00 	mov.w	ip, #0
 801a19a:	f108 0202 	add.w	r2, r8, #2
 801a19e:	9217      	str	r2, [sp, #92]	; 0x5c
 801a1a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a1a4:	e785      	b.n	801a0b2 <_strtod_l+0x1a2>
 801a1a6:	f04f 0c01 	mov.w	ip, #1
 801a1aa:	e7f6      	b.n	801a19a <_strtod_l+0x28a>
 801a1ac:	08051b88 	.word	0x08051b88
 801a1b0:	0805193c 	.word	0x0805193c
 801a1b4:	7ff00000 	.word	0x7ff00000
 801a1b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a1ba:	1c51      	adds	r1, r2, #1
 801a1bc:	9117      	str	r1, [sp, #92]	; 0x5c
 801a1be:	7852      	ldrb	r2, [r2, #1]
 801a1c0:	2a30      	cmp	r2, #48	; 0x30
 801a1c2:	d0f9      	beq.n	801a1b8 <_strtod_l+0x2a8>
 801a1c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a1c8:	2908      	cmp	r1, #8
 801a1ca:	f63f af79 	bhi.w	801a0c0 <_strtod_l+0x1b0>
 801a1ce:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a1d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a1d4:	9206      	str	r2, [sp, #24]
 801a1d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a1d8:	1c51      	adds	r1, r2, #1
 801a1da:	9117      	str	r1, [sp, #92]	; 0x5c
 801a1dc:	7852      	ldrb	r2, [r2, #1]
 801a1de:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a1e2:	2e09      	cmp	r6, #9
 801a1e4:	d937      	bls.n	801a256 <_strtod_l+0x346>
 801a1e6:	9e06      	ldr	r6, [sp, #24]
 801a1e8:	1b89      	subs	r1, r1, r6
 801a1ea:	2908      	cmp	r1, #8
 801a1ec:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a1f0:	dc02      	bgt.n	801a1f8 <_strtod_l+0x2e8>
 801a1f2:	4576      	cmp	r6, lr
 801a1f4:	bfa8      	it	ge
 801a1f6:	4676      	movge	r6, lr
 801a1f8:	f1bc 0f00 	cmp.w	ip, #0
 801a1fc:	d000      	beq.n	801a200 <_strtod_l+0x2f0>
 801a1fe:	4276      	negs	r6, r6
 801a200:	2d00      	cmp	r5, #0
 801a202:	d14d      	bne.n	801a2a0 <_strtod_l+0x390>
 801a204:	9904      	ldr	r1, [sp, #16]
 801a206:	4301      	orrs	r1, r0
 801a208:	f47f aec6 	bne.w	8019f98 <_strtod_l+0x88>
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	f47f aee1 	bne.w	8019fd4 <_strtod_l+0xc4>
 801a212:	2a69      	cmp	r2, #105	; 0x69
 801a214:	d027      	beq.n	801a266 <_strtod_l+0x356>
 801a216:	dc24      	bgt.n	801a262 <_strtod_l+0x352>
 801a218:	2a49      	cmp	r2, #73	; 0x49
 801a21a:	d024      	beq.n	801a266 <_strtod_l+0x356>
 801a21c:	2a4e      	cmp	r2, #78	; 0x4e
 801a21e:	f47f aed9 	bne.w	8019fd4 <_strtod_l+0xc4>
 801a222:	499f      	ldr	r1, [pc, #636]	; (801a4a0 <_strtod_l+0x590>)
 801a224:	a817      	add	r0, sp, #92	; 0x5c
 801a226:	f001 fe49 	bl	801bebc <__match>
 801a22a:	2800      	cmp	r0, #0
 801a22c:	f43f aed2 	beq.w	8019fd4 <_strtod_l+0xc4>
 801a230:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a232:	781b      	ldrb	r3, [r3, #0]
 801a234:	2b28      	cmp	r3, #40	; 0x28
 801a236:	d12d      	bne.n	801a294 <_strtod_l+0x384>
 801a238:	499a      	ldr	r1, [pc, #616]	; (801a4a4 <_strtod_l+0x594>)
 801a23a:	aa1a      	add	r2, sp, #104	; 0x68
 801a23c:	a817      	add	r0, sp, #92	; 0x5c
 801a23e:	f001 fe51 	bl	801bee4 <__hexnan>
 801a242:	2805      	cmp	r0, #5
 801a244:	d126      	bne.n	801a294 <_strtod_l+0x384>
 801a246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a248:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a24c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a250:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a254:	e6a0      	b.n	8019f98 <_strtod_l+0x88>
 801a256:	210a      	movs	r1, #10
 801a258:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a25c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a260:	e7b9      	b.n	801a1d6 <_strtod_l+0x2c6>
 801a262:	2a6e      	cmp	r2, #110	; 0x6e
 801a264:	e7db      	b.n	801a21e <_strtod_l+0x30e>
 801a266:	4990      	ldr	r1, [pc, #576]	; (801a4a8 <_strtod_l+0x598>)
 801a268:	a817      	add	r0, sp, #92	; 0x5c
 801a26a:	f001 fe27 	bl	801bebc <__match>
 801a26e:	2800      	cmp	r0, #0
 801a270:	f43f aeb0 	beq.w	8019fd4 <_strtod_l+0xc4>
 801a274:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a276:	498d      	ldr	r1, [pc, #564]	; (801a4ac <_strtod_l+0x59c>)
 801a278:	3b01      	subs	r3, #1
 801a27a:	a817      	add	r0, sp, #92	; 0x5c
 801a27c:	9317      	str	r3, [sp, #92]	; 0x5c
 801a27e:	f001 fe1d 	bl	801bebc <__match>
 801a282:	b910      	cbnz	r0, 801a28a <_strtod_l+0x37a>
 801a284:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a286:	3301      	adds	r3, #1
 801a288:	9317      	str	r3, [sp, #92]	; 0x5c
 801a28a:	f8df b230 	ldr.w	fp, [pc, #560]	; 801a4bc <_strtod_l+0x5ac>
 801a28e:	f04f 0a00 	mov.w	sl, #0
 801a292:	e681      	b.n	8019f98 <_strtod_l+0x88>
 801a294:	4886      	ldr	r0, [pc, #536]	; (801a4b0 <_strtod_l+0x5a0>)
 801a296:	f002 fe03 	bl	801cea0 <nan>
 801a29a:	ec5b ab10 	vmov	sl, fp, d0
 801a29e:	e67b      	b.n	8019f98 <_strtod_l+0x88>
 801a2a0:	9b05      	ldr	r3, [sp, #20]
 801a2a2:	9807      	ldr	r0, [sp, #28]
 801a2a4:	1af3      	subs	r3, r6, r3
 801a2a6:	2f00      	cmp	r7, #0
 801a2a8:	bf08      	it	eq
 801a2aa:	462f      	moveq	r7, r5
 801a2ac:	2d10      	cmp	r5, #16
 801a2ae:	9306      	str	r3, [sp, #24]
 801a2b0:	46a8      	mov	r8, r5
 801a2b2:	bfa8      	it	ge
 801a2b4:	f04f 0810 	movge.w	r8, #16
 801a2b8:	f7fe f994 	bl	80185e4 <__aeabi_ui2d>
 801a2bc:	2d09      	cmp	r5, #9
 801a2be:	4682      	mov	sl, r0
 801a2c0:	468b      	mov	fp, r1
 801a2c2:	dd13      	ble.n	801a2ec <_strtod_l+0x3dc>
 801a2c4:	4b7b      	ldr	r3, [pc, #492]	; (801a4b4 <_strtod_l+0x5a4>)
 801a2c6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2ca:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a2ce:	f7fe fa03 	bl	80186d8 <__aeabi_dmul>
 801a2d2:	4682      	mov	sl, r0
 801a2d4:	4648      	mov	r0, r9
 801a2d6:	468b      	mov	fp, r1
 801a2d8:	f7fe f984 	bl	80185e4 <__aeabi_ui2d>
 801a2dc:	4602      	mov	r2, r0
 801a2de:	460b      	mov	r3, r1
 801a2e0:	4650      	mov	r0, sl
 801a2e2:	4659      	mov	r1, fp
 801a2e4:	f7fe f842 	bl	801836c <__adddf3>
 801a2e8:	4682      	mov	sl, r0
 801a2ea:	468b      	mov	fp, r1
 801a2ec:	2d0f      	cmp	r5, #15
 801a2ee:	dc38      	bgt.n	801a362 <_strtod_l+0x452>
 801a2f0:	9b06      	ldr	r3, [sp, #24]
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	f43f ae50 	beq.w	8019f98 <_strtod_l+0x88>
 801a2f8:	dd24      	ble.n	801a344 <_strtod_l+0x434>
 801a2fa:	2b16      	cmp	r3, #22
 801a2fc:	dc0b      	bgt.n	801a316 <_strtod_l+0x406>
 801a2fe:	496d      	ldr	r1, [pc, #436]	; (801a4b4 <_strtod_l+0x5a4>)
 801a300:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a304:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a308:	4652      	mov	r2, sl
 801a30a:	465b      	mov	r3, fp
 801a30c:	f7fe f9e4 	bl	80186d8 <__aeabi_dmul>
 801a310:	4682      	mov	sl, r0
 801a312:	468b      	mov	fp, r1
 801a314:	e640      	b.n	8019f98 <_strtod_l+0x88>
 801a316:	9a06      	ldr	r2, [sp, #24]
 801a318:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a31c:	4293      	cmp	r3, r2
 801a31e:	db20      	blt.n	801a362 <_strtod_l+0x452>
 801a320:	4c64      	ldr	r4, [pc, #400]	; (801a4b4 <_strtod_l+0x5a4>)
 801a322:	f1c5 050f 	rsb	r5, r5, #15
 801a326:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a32a:	4652      	mov	r2, sl
 801a32c:	465b      	mov	r3, fp
 801a32e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a332:	f7fe f9d1 	bl	80186d8 <__aeabi_dmul>
 801a336:	9b06      	ldr	r3, [sp, #24]
 801a338:	1b5d      	subs	r5, r3, r5
 801a33a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a33e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a342:	e7e3      	b.n	801a30c <_strtod_l+0x3fc>
 801a344:	9b06      	ldr	r3, [sp, #24]
 801a346:	3316      	adds	r3, #22
 801a348:	db0b      	blt.n	801a362 <_strtod_l+0x452>
 801a34a:	9b05      	ldr	r3, [sp, #20]
 801a34c:	1b9e      	subs	r6, r3, r6
 801a34e:	4b59      	ldr	r3, [pc, #356]	; (801a4b4 <_strtod_l+0x5a4>)
 801a350:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a354:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a358:	4650      	mov	r0, sl
 801a35a:	4659      	mov	r1, fp
 801a35c:	f7fe fae6 	bl	801892c <__aeabi_ddiv>
 801a360:	e7d6      	b.n	801a310 <_strtod_l+0x400>
 801a362:	9b06      	ldr	r3, [sp, #24]
 801a364:	eba5 0808 	sub.w	r8, r5, r8
 801a368:	4498      	add	r8, r3
 801a36a:	f1b8 0f00 	cmp.w	r8, #0
 801a36e:	dd74      	ble.n	801a45a <_strtod_l+0x54a>
 801a370:	f018 030f 	ands.w	r3, r8, #15
 801a374:	d00a      	beq.n	801a38c <_strtod_l+0x47c>
 801a376:	494f      	ldr	r1, [pc, #316]	; (801a4b4 <_strtod_l+0x5a4>)
 801a378:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a37c:	4652      	mov	r2, sl
 801a37e:	465b      	mov	r3, fp
 801a380:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a384:	f7fe f9a8 	bl	80186d8 <__aeabi_dmul>
 801a388:	4682      	mov	sl, r0
 801a38a:	468b      	mov	fp, r1
 801a38c:	f038 080f 	bics.w	r8, r8, #15
 801a390:	d04f      	beq.n	801a432 <_strtod_l+0x522>
 801a392:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a396:	dd22      	ble.n	801a3de <_strtod_l+0x4ce>
 801a398:	2500      	movs	r5, #0
 801a39a:	462e      	mov	r6, r5
 801a39c:	9507      	str	r5, [sp, #28]
 801a39e:	9505      	str	r5, [sp, #20]
 801a3a0:	2322      	movs	r3, #34	; 0x22
 801a3a2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a4bc <_strtod_l+0x5ac>
 801a3a6:	6023      	str	r3, [r4, #0]
 801a3a8:	f04f 0a00 	mov.w	sl, #0
 801a3ac:	9b07      	ldr	r3, [sp, #28]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	f43f adf2 	beq.w	8019f98 <_strtod_l+0x88>
 801a3b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a3b6:	4620      	mov	r0, r4
 801a3b8:	f001 fe9c 	bl	801c0f4 <_Bfree>
 801a3bc:	9905      	ldr	r1, [sp, #20]
 801a3be:	4620      	mov	r0, r4
 801a3c0:	f001 fe98 	bl	801c0f4 <_Bfree>
 801a3c4:	4631      	mov	r1, r6
 801a3c6:	4620      	mov	r0, r4
 801a3c8:	f001 fe94 	bl	801c0f4 <_Bfree>
 801a3cc:	9907      	ldr	r1, [sp, #28]
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	f001 fe90 	bl	801c0f4 <_Bfree>
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	4620      	mov	r0, r4
 801a3d8:	f001 fe8c 	bl	801c0f4 <_Bfree>
 801a3dc:	e5dc      	b.n	8019f98 <_strtod_l+0x88>
 801a3de:	4b36      	ldr	r3, [pc, #216]	; (801a4b8 <_strtod_l+0x5a8>)
 801a3e0:	9304      	str	r3, [sp, #16]
 801a3e2:	2300      	movs	r3, #0
 801a3e4:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a3e8:	4650      	mov	r0, sl
 801a3ea:	4659      	mov	r1, fp
 801a3ec:	4699      	mov	r9, r3
 801a3ee:	f1b8 0f01 	cmp.w	r8, #1
 801a3f2:	dc21      	bgt.n	801a438 <_strtod_l+0x528>
 801a3f4:	b10b      	cbz	r3, 801a3fa <_strtod_l+0x4ea>
 801a3f6:	4682      	mov	sl, r0
 801a3f8:	468b      	mov	fp, r1
 801a3fa:	4b2f      	ldr	r3, [pc, #188]	; (801a4b8 <_strtod_l+0x5a8>)
 801a3fc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a400:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a404:	4652      	mov	r2, sl
 801a406:	465b      	mov	r3, fp
 801a408:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a40c:	f7fe f964 	bl	80186d8 <__aeabi_dmul>
 801a410:	4b2a      	ldr	r3, [pc, #168]	; (801a4bc <_strtod_l+0x5ac>)
 801a412:	460a      	mov	r2, r1
 801a414:	400b      	ands	r3, r1
 801a416:	492a      	ldr	r1, [pc, #168]	; (801a4c0 <_strtod_l+0x5b0>)
 801a418:	428b      	cmp	r3, r1
 801a41a:	4682      	mov	sl, r0
 801a41c:	d8bc      	bhi.n	801a398 <_strtod_l+0x488>
 801a41e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a422:	428b      	cmp	r3, r1
 801a424:	bf86      	itte	hi
 801a426:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801a4c4 <_strtod_l+0x5b4>
 801a42a:	f04f 3aff 	movhi.w	sl, #4294967295
 801a42e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a432:	2300      	movs	r3, #0
 801a434:	9304      	str	r3, [sp, #16]
 801a436:	e084      	b.n	801a542 <_strtod_l+0x632>
 801a438:	f018 0f01 	tst.w	r8, #1
 801a43c:	d005      	beq.n	801a44a <_strtod_l+0x53a>
 801a43e:	9b04      	ldr	r3, [sp, #16]
 801a440:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a444:	f7fe f948 	bl	80186d8 <__aeabi_dmul>
 801a448:	2301      	movs	r3, #1
 801a44a:	9a04      	ldr	r2, [sp, #16]
 801a44c:	3208      	adds	r2, #8
 801a44e:	f109 0901 	add.w	r9, r9, #1
 801a452:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a456:	9204      	str	r2, [sp, #16]
 801a458:	e7c9      	b.n	801a3ee <_strtod_l+0x4de>
 801a45a:	d0ea      	beq.n	801a432 <_strtod_l+0x522>
 801a45c:	f1c8 0800 	rsb	r8, r8, #0
 801a460:	f018 020f 	ands.w	r2, r8, #15
 801a464:	d00a      	beq.n	801a47c <_strtod_l+0x56c>
 801a466:	4b13      	ldr	r3, [pc, #76]	; (801a4b4 <_strtod_l+0x5a4>)
 801a468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a46c:	4650      	mov	r0, sl
 801a46e:	4659      	mov	r1, fp
 801a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a474:	f7fe fa5a 	bl	801892c <__aeabi_ddiv>
 801a478:	4682      	mov	sl, r0
 801a47a:	468b      	mov	fp, r1
 801a47c:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a480:	d0d7      	beq.n	801a432 <_strtod_l+0x522>
 801a482:	f1b8 0f1f 	cmp.w	r8, #31
 801a486:	dd1f      	ble.n	801a4c8 <_strtod_l+0x5b8>
 801a488:	2500      	movs	r5, #0
 801a48a:	462e      	mov	r6, r5
 801a48c:	9507      	str	r5, [sp, #28]
 801a48e:	9505      	str	r5, [sp, #20]
 801a490:	2322      	movs	r3, #34	; 0x22
 801a492:	f04f 0a00 	mov.w	sl, #0
 801a496:	f04f 0b00 	mov.w	fp, #0
 801a49a:	6023      	str	r3, [r4, #0]
 801a49c:	e786      	b.n	801a3ac <_strtod_l+0x49c>
 801a49e:	bf00      	nop
 801a4a0:	0805190d 	.word	0x0805190d
 801a4a4:	08051950 	.word	0x08051950
 801a4a8:	08051905 	.word	0x08051905
 801a4ac:	08051a94 	.word	0x08051a94
 801a4b0:	08051d40 	.word	0x08051d40
 801a4b4:	08051c20 	.word	0x08051c20
 801a4b8:	08051bf8 	.word	0x08051bf8
 801a4bc:	7ff00000 	.word	0x7ff00000
 801a4c0:	7ca00000 	.word	0x7ca00000
 801a4c4:	7fefffff 	.word	0x7fefffff
 801a4c8:	f018 0310 	ands.w	r3, r8, #16
 801a4cc:	bf18      	it	ne
 801a4ce:	236a      	movne	r3, #106	; 0x6a
 801a4d0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801a880 <_strtod_l+0x970>
 801a4d4:	9304      	str	r3, [sp, #16]
 801a4d6:	4650      	mov	r0, sl
 801a4d8:	4659      	mov	r1, fp
 801a4da:	2300      	movs	r3, #0
 801a4dc:	f018 0f01 	tst.w	r8, #1
 801a4e0:	d004      	beq.n	801a4ec <_strtod_l+0x5dc>
 801a4e2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801a4e6:	f7fe f8f7 	bl	80186d8 <__aeabi_dmul>
 801a4ea:	2301      	movs	r3, #1
 801a4ec:	ea5f 0868 	movs.w	r8, r8, asr #1
 801a4f0:	f109 0908 	add.w	r9, r9, #8
 801a4f4:	d1f2      	bne.n	801a4dc <_strtod_l+0x5cc>
 801a4f6:	b10b      	cbz	r3, 801a4fc <_strtod_l+0x5ec>
 801a4f8:	4682      	mov	sl, r0
 801a4fa:	468b      	mov	fp, r1
 801a4fc:	9b04      	ldr	r3, [sp, #16]
 801a4fe:	b1c3      	cbz	r3, 801a532 <_strtod_l+0x622>
 801a500:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a504:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a508:	2b00      	cmp	r3, #0
 801a50a:	4659      	mov	r1, fp
 801a50c:	dd11      	ble.n	801a532 <_strtod_l+0x622>
 801a50e:	2b1f      	cmp	r3, #31
 801a510:	f340 8124 	ble.w	801a75c <_strtod_l+0x84c>
 801a514:	2b34      	cmp	r3, #52	; 0x34
 801a516:	bfde      	ittt	le
 801a518:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801a51c:	f04f 33ff 	movle.w	r3, #4294967295
 801a520:	fa03 f202 	lslle.w	r2, r3, r2
 801a524:	f04f 0a00 	mov.w	sl, #0
 801a528:	bfcc      	ite	gt
 801a52a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a52e:	ea02 0b01 	andle.w	fp, r2, r1
 801a532:	2200      	movs	r2, #0
 801a534:	2300      	movs	r3, #0
 801a536:	4650      	mov	r0, sl
 801a538:	4659      	mov	r1, fp
 801a53a:	f7fe fb35 	bl	8018ba8 <__aeabi_dcmpeq>
 801a53e:	2800      	cmp	r0, #0
 801a540:	d1a2      	bne.n	801a488 <_strtod_l+0x578>
 801a542:	9b07      	ldr	r3, [sp, #28]
 801a544:	9300      	str	r3, [sp, #0]
 801a546:	9908      	ldr	r1, [sp, #32]
 801a548:	462b      	mov	r3, r5
 801a54a:	463a      	mov	r2, r7
 801a54c:	4620      	mov	r0, r4
 801a54e:	f001 fe39 	bl	801c1c4 <__s2b>
 801a552:	9007      	str	r0, [sp, #28]
 801a554:	2800      	cmp	r0, #0
 801a556:	f43f af1f 	beq.w	801a398 <_strtod_l+0x488>
 801a55a:	9b05      	ldr	r3, [sp, #20]
 801a55c:	1b9e      	subs	r6, r3, r6
 801a55e:	9b06      	ldr	r3, [sp, #24]
 801a560:	2b00      	cmp	r3, #0
 801a562:	bfb4      	ite	lt
 801a564:	4633      	movlt	r3, r6
 801a566:	2300      	movge	r3, #0
 801a568:	930c      	str	r3, [sp, #48]	; 0x30
 801a56a:	9b06      	ldr	r3, [sp, #24]
 801a56c:	2500      	movs	r5, #0
 801a56e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a572:	9312      	str	r3, [sp, #72]	; 0x48
 801a574:	462e      	mov	r6, r5
 801a576:	9b07      	ldr	r3, [sp, #28]
 801a578:	4620      	mov	r0, r4
 801a57a:	6859      	ldr	r1, [r3, #4]
 801a57c:	f001 fd7a 	bl	801c074 <_Balloc>
 801a580:	9005      	str	r0, [sp, #20]
 801a582:	2800      	cmp	r0, #0
 801a584:	f43f af0c 	beq.w	801a3a0 <_strtod_l+0x490>
 801a588:	9b07      	ldr	r3, [sp, #28]
 801a58a:	691a      	ldr	r2, [r3, #16]
 801a58c:	3202      	adds	r2, #2
 801a58e:	f103 010c 	add.w	r1, r3, #12
 801a592:	0092      	lsls	r2, r2, #2
 801a594:	300c      	adds	r0, #12
 801a596:	f001 fd5f 	bl	801c058 <memcpy>
 801a59a:	ec4b ab10 	vmov	d0, sl, fp
 801a59e:	aa1a      	add	r2, sp, #104	; 0x68
 801a5a0:	a919      	add	r1, sp, #100	; 0x64
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	f002 f954 	bl	801c850 <__d2b>
 801a5a8:	ec4b ab18 	vmov	d8, sl, fp
 801a5ac:	9018      	str	r0, [sp, #96]	; 0x60
 801a5ae:	2800      	cmp	r0, #0
 801a5b0:	f43f aef6 	beq.w	801a3a0 <_strtod_l+0x490>
 801a5b4:	2101      	movs	r1, #1
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f001 fe9e 	bl	801c2f8 <__i2b>
 801a5bc:	4606      	mov	r6, r0
 801a5be:	2800      	cmp	r0, #0
 801a5c0:	f43f aeee 	beq.w	801a3a0 <_strtod_l+0x490>
 801a5c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a5c6:	9904      	ldr	r1, [sp, #16]
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	bfab      	itete	ge
 801a5cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801a5ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801a5d0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801a5d2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801a5d6:	bfac      	ite	ge
 801a5d8:	eb03 0902 	addge.w	r9, r3, r2
 801a5dc:	1ad7      	sublt	r7, r2, r3
 801a5de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a5e0:	eba3 0801 	sub.w	r8, r3, r1
 801a5e4:	4490      	add	r8, r2
 801a5e6:	4ba1      	ldr	r3, [pc, #644]	; (801a86c <_strtod_l+0x95c>)
 801a5e8:	f108 38ff 	add.w	r8, r8, #4294967295
 801a5ec:	4598      	cmp	r8, r3
 801a5ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a5f2:	f280 80c7 	bge.w	801a784 <_strtod_l+0x874>
 801a5f6:	eba3 0308 	sub.w	r3, r3, r8
 801a5fa:	2b1f      	cmp	r3, #31
 801a5fc:	eba2 0203 	sub.w	r2, r2, r3
 801a600:	f04f 0101 	mov.w	r1, #1
 801a604:	f300 80b1 	bgt.w	801a76a <_strtod_l+0x85a>
 801a608:	fa01 f303 	lsl.w	r3, r1, r3
 801a60c:	930d      	str	r3, [sp, #52]	; 0x34
 801a60e:	2300      	movs	r3, #0
 801a610:	9308      	str	r3, [sp, #32]
 801a612:	eb09 0802 	add.w	r8, r9, r2
 801a616:	9b04      	ldr	r3, [sp, #16]
 801a618:	45c1      	cmp	r9, r8
 801a61a:	4417      	add	r7, r2
 801a61c:	441f      	add	r7, r3
 801a61e:	464b      	mov	r3, r9
 801a620:	bfa8      	it	ge
 801a622:	4643      	movge	r3, r8
 801a624:	42bb      	cmp	r3, r7
 801a626:	bfa8      	it	ge
 801a628:	463b      	movge	r3, r7
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	bfc2      	ittt	gt
 801a62e:	eba8 0803 	subgt.w	r8, r8, r3
 801a632:	1aff      	subgt	r7, r7, r3
 801a634:	eba9 0903 	subgt.w	r9, r9, r3
 801a638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	dd17      	ble.n	801a66e <_strtod_l+0x75e>
 801a63e:	4631      	mov	r1, r6
 801a640:	461a      	mov	r2, r3
 801a642:	4620      	mov	r0, r4
 801a644:	f001 ff18 	bl	801c478 <__pow5mult>
 801a648:	4606      	mov	r6, r0
 801a64a:	2800      	cmp	r0, #0
 801a64c:	f43f aea8 	beq.w	801a3a0 <_strtod_l+0x490>
 801a650:	4601      	mov	r1, r0
 801a652:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a654:	4620      	mov	r0, r4
 801a656:	f001 fe65 	bl	801c324 <__multiply>
 801a65a:	900b      	str	r0, [sp, #44]	; 0x2c
 801a65c:	2800      	cmp	r0, #0
 801a65e:	f43f ae9f 	beq.w	801a3a0 <_strtod_l+0x490>
 801a662:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a664:	4620      	mov	r0, r4
 801a666:	f001 fd45 	bl	801c0f4 <_Bfree>
 801a66a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a66c:	9318      	str	r3, [sp, #96]	; 0x60
 801a66e:	f1b8 0f00 	cmp.w	r8, #0
 801a672:	f300 808c 	bgt.w	801a78e <_strtod_l+0x87e>
 801a676:	9b06      	ldr	r3, [sp, #24]
 801a678:	2b00      	cmp	r3, #0
 801a67a:	dd08      	ble.n	801a68e <_strtod_l+0x77e>
 801a67c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a67e:	9905      	ldr	r1, [sp, #20]
 801a680:	4620      	mov	r0, r4
 801a682:	f001 fef9 	bl	801c478 <__pow5mult>
 801a686:	9005      	str	r0, [sp, #20]
 801a688:	2800      	cmp	r0, #0
 801a68a:	f43f ae89 	beq.w	801a3a0 <_strtod_l+0x490>
 801a68e:	2f00      	cmp	r7, #0
 801a690:	dd08      	ble.n	801a6a4 <_strtod_l+0x794>
 801a692:	9905      	ldr	r1, [sp, #20]
 801a694:	463a      	mov	r2, r7
 801a696:	4620      	mov	r0, r4
 801a698:	f001 ff48 	bl	801c52c <__lshift>
 801a69c:	9005      	str	r0, [sp, #20]
 801a69e:	2800      	cmp	r0, #0
 801a6a0:	f43f ae7e 	beq.w	801a3a0 <_strtod_l+0x490>
 801a6a4:	f1b9 0f00 	cmp.w	r9, #0
 801a6a8:	dd08      	ble.n	801a6bc <_strtod_l+0x7ac>
 801a6aa:	4631      	mov	r1, r6
 801a6ac:	464a      	mov	r2, r9
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f001 ff3c 	bl	801c52c <__lshift>
 801a6b4:	4606      	mov	r6, r0
 801a6b6:	2800      	cmp	r0, #0
 801a6b8:	f43f ae72 	beq.w	801a3a0 <_strtod_l+0x490>
 801a6bc:	9a05      	ldr	r2, [sp, #20]
 801a6be:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a6c0:	4620      	mov	r0, r4
 801a6c2:	f001 ffbf 	bl	801c644 <__mdiff>
 801a6c6:	4605      	mov	r5, r0
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	f43f ae69 	beq.w	801a3a0 <_strtod_l+0x490>
 801a6ce:	68c3      	ldr	r3, [r0, #12]
 801a6d0:	930b      	str	r3, [sp, #44]	; 0x2c
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	60c3      	str	r3, [r0, #12]
 801a6d6:	4631      	mov	r1, r6
 801a6d8:	f001 ff98 	bl	801c60c <__mcmp>
 801a6dc:	2800      	cmp	r0, #0
 801a6de:	da60      	bge.n	801a7a2 <_strtod_l+0x892>
 801a6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6e2:	ea53 030a 	orrs.w	r3, r3, sl
 801a6e6:	f040 8082 	bne.w	801a7ee <_strtod_l+0x8de>
 801a6ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d17d      	bne.n	801a7ee <_strtod_l+0x8de>
 801a6f2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a6f6:	0d1b      	lsrs	r3, r3, #20
 801a6f8:	051b      	lsls	r3, r3, #20
 801a6fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a6fe:	d976      	bls.n	801a7ee <_strtod_l+0x8de>
 801a700:	696b      	ldr	r3, [r5, #20]
 801a702:	b913      	cbnz	r3, 801a70a <_strtod_l+0x7fa>
 801a704:	692b      	ldr	r3, [r5, #16]
 801a706:	2b01      	cmp	r3, #1
 801a708:	dd71      	ble.n	801a7ee <_strtod_l+0x8de>
 801a70a:	4629      	mov	r1, r5
 801a70c:	2201      	movs	r2, #1
 801a70e:	4620      	mov	r0, r4
 801a710:	f001 ff0c 	bl	801c52c <__lshift>
 801a714:	4631      	mov	r1, r6
 801a716:	4605      	mov	r5, r0
 801a718:	f001 ff78 	bl	801c60c <__mcmp>
 801a71c:	2800      	cmp	r0, #0
 801a71e:	dd66      	ble.n	801a7ee <_strtod_l+0x8de>
 801a720:	9904      	ldr	r1, [sp, #16]
 801a722:	4a53      	ldr	r2, [pc, #332]	; (801a870 <_strtod_l+0x960>)
 801a724:	465b      	mov	r3, fp
 801a726:	2900      	cmp	r1, #0
 801a728:	f000 8081 	beq.w	801a82e <_strtod_l+0x91e>
 801a72c:	ea02 010b 	and.w	r1, r2, fp
 801a730:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a734:	dc7b      	bgt.n	801a82e <_strtod_l+0x91e>
 801a736:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a73a:	f77f aea9 	ble.w	801a490 <_strtod_l+0x580>
 801a73e:	4b4d      	ldr	r3, [pc, #308]	; (801a874 <_strtod_l+0x964>)
 801a740:	4650      	mov	r0, sl
 801a742:	4659      	mov	r1, fp
 801a744:	2200      	movs	r2, #0
 801a746:	f7fd ffc7 	bl	80186d8 <__aeabi_dmul>
 801a74a:	460b      	mov	r3, r1
 801a74c:	4303      	orrs	r3, r0
 801a74e:	bf08      	it	eq
 801a750:	2322      	moveq	r3, #34	; 0x22
 801a752:	4682      	mov	sl, r0
 801a754:	468b      	mov	fp, r1
 801a756:	bf08      	it	eq
 801a758:	6023      	streq	r3, [r4, #0]
 801a75a:	e62b      	b.n	801a3b4 <_strtod_l+0x4a4>
 801a75c:	f04f 32ff 	mov.w	r2, #4294967295
 801a760:	fa02 f303 	lsl.w	r3, r2, r3
 801a764:	ea03 0a0a 	and.w	sl, r3, sl
 801a768:	e6e3      	b.n	801a532 <_strtod_l+0x622>
 801a76a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801a76e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801a772:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801a776:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801a77a:	fa01 f308 	lsl.w	r3, r1, r8
 801a77e:	9308      	str	r3, [sp, #32]
 801a780:	910d      	str	r1, [sp, #52]	; 0x34
 801a782:	e746      	b.n	801a612 <_strtod_l+0x702>
 801a784:	2300      	movs	r3, #0
 801a786:	9308      	str	r3, [sp, #32]
 801a788:	2301      	movs	r3, #1
 801a78a:	930d      	str	r3, [sp, #52]	; 0x34
 801a78c:	e741      	b.n	801a612 <_strtod_l+0x702>
 801a78e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a790:	4642      	mov	r2, r8
 801a792:	4620      	mov	r0, r4
 801a794:	f001 feca 	bl	801c52c <__lshift>
 801a798:	9018      	str	r0, [sp, #96]	; 0x60
 801a79a:	2800      	cmp	r0, #0
 801a79c:	f47f af6b 	bne.w	801a676 <_strtod_l+0x766>
 801a7a0:	e5fe      	b.n	801a3a0 <_strtod_l+0x490>
 801a7a2:	465f      	mov	r7, fp
 801a7a4:	d16e      	bne.n	801a884 <_strtod_l+0x974>
 801a7a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a7a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a7ac:	b342      	cbz	r2, 801a800 <_strtod_l+0x8f0>
 801a7ae:	4a32      	ldr	r2, [pc, #200]	; (801a878 <_strtod_l+0x968>)
 801a7b0:	4293      	cmp	r3, r2
 801a7b2:	d128      	bne.n	801a806 <_strtod_l+0x8f6>
 801a7b4:	9b04      	ldr	r3, [sp, #16]
 801a7b6:	4651      	mov	r1, sl
 801a7b8:	b1eb      	cbz	r3, 801a7f6 <_strtod_l+0x8e6>
 801a7ba:	4b2d      	ldr	r3, [pc, #180]	; (801a870 <_strtod_l+0x960>)
 801a7bc:	403b      	ands	r3, r7
 801a7be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a7c2:	f04f 32ff 	mov.w	r2, #4294967295
 801a7c6:	d819      	bhi.n	801a7fc <_strtod_l+0x8ec>
 801a7c8:	0d1b      	lsrs	r3, r3, #20
 801a7ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a7ce:	fa02 f303 	lsl.w	r3, r2, r3
 801a7d2:	4299      	cmp	r1, r3
 801a7d4:	d117      	bne.n	801a806 <_strtod_l+0x8f6>
 801a7d6:	4b29      	ldr	r3, [pc, #164]	; (801a87c <_strtod_l+0x96c>)
 801a7d8:	429f      	cmp	r7, r3
 801a7da:	d102      	bne.n	801a7e2 <_strtod_l+0x8d2>
 801a7dc:	3101      	adds	r1, #1
 801a7de:	f43f addf 	beq.w	801a3a0 <_strtod_l+0x490>
 801a7e2:	4b23      	ldr	r3, [pc, #140]	; (801a870 <_strtod_l+0x960>)
 801a7e4:	403b      	ands	r3, r7
 801a7e6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a7ea:	f04f 0a00 	mov.w	sl, #0
 801a7ee:	9b04      	ldr	r3, [sp, #16]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d1a4      	bne.n	801a73e <_strtod_l+0x82e>
 801a7f4:	e5de      	b.n	801a3b4 <_strtod_l+0x4a4>
 801a7f6:	f04f 33ff 	mov.w	r3, #4294967295
 801a7fa:	e7ea      	b.n	801a7d2 <_strtod_l+0x8c2>
 801a7fc:	4613      	mov	r3, r2
 801a7fe:	e7e8      	b.n	801a7d2 <_strtod_l+0x8c2>
 801a800:	ea53 030a 	orrs.w	r3, r3, sl
 801a804:	d08c      	beq.n	801a720 <_strtod_l+0x810>
 801a806:	9b08      	ldr	r3, [sp, #32]
 801a808:	b1db      	cbz	r3, 801a842 <_strtod_l+0x932>
 801a80a:	423b      	tst	r3, r7
 801a80c:	d0ef      	beq.n	801a7ee <_strtod_l+0x8de>
 801a80e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a810:	9a04      	ldr	r2, [sp, #16]
 801a812:	4650      	mov	r0, sl
 801a814:	4659      	mov	r1, fp
 801a816:	b1c3      	cbz	r3, 801a84a <_strtod_l+0x93a>
 801a818:	f7ff fb5e 	bl	8019ed8 <sulp>
 801a81c:	4602      	mov	r2, r0
 801a81e:	460b      	mov	r3, r1
 801a820:	ec51 0b18 	vmov	r0, r1, d8
 801a824:	f7fd fda2 	bl	801836c <__adddf3>
 801a828:	4682      	mov	sl, r0
 801a82a:	468b      	mov	fp, r1
 801a82c:	e7df      	b.n	801a7ee <_strtod_l+0x8de>
 801a82e:	4013      	ands	r3, r2
 801a830:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a834:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a838:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a83c:	f04f 3aff 	mov.w	sl, #4294967295
 801a840:	e7d5      	b.n	801a7ee <_strtod_l+0x8de>
 801a842:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a844:	ea13 0f0a 	tst.w	r3, sl
 801a848:	e7e0      	b.n	801a80c <_strtod_l+0x8fc>
 801a84a:	f7ff fb45 	bl	8019ed8 <sulp>
 801a84e:	4602      	mov	r2, r0
 801a850:	460b      	mov	r3, r1
 801a852:	ec51 0b18 	vmov	r0, r1, d8
 801a856:	f7fd fd87 	bl	8018368 <__aeabi_dsub>
 801a85a:	2200      	movs	r2, #0
 801a85c:	2300      	movs	r3, #0
 801a85e:	4682      	mov	sl, r0
 801a860:	468b      	mov	fp, r1
 801a862:	f7fe f9a1 	bl	8018ba8 <__aeabi_dcmpeq>
 801a866:	2800      	cmp	r0, #0
 801a868:	d0c1      	beq.n	801a7ee <_strtod_l+0x8de>
 801a86a:	e611      	b.n	801a490 <_strtod_l+0x580>
 801a86c:	fffffc02 	.word	0xfffffc02
 801a870:	7ff00000 	.word	0x7ff00000
 801a874:	39500000 	.word	0x39500000
 801a878:	000fffff 	.word	0x000fffff
 801a87c:	7fefffff 	.word	0x7fefffff
 801a880:	08051968 	.word	0x08051968
 801a884:	4631      	mov	r1, r6
 801a886:	4628      	mov	r0, r5
 801a888:	f002 f83e 	bl	801c908 <__ratio>
 801a88c:	ec59 8b10 	vmov	r8, r9, d0
 801a890:	ee10 0a10 	vmov	r0, s0
 801a894:	2200      	movs	r2, #0
 801a896:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a89a:	4649      	mov	r1, r9
 801a89c:	f7fe f998 	bl	8018bd0 <__aeabi_dcmple>
 801a8a0:	2800      	cmp	r0, #0
 801a8a2:	d07a      	beq.n	801a99a <_strtod_l+0xa8a>
 801a8a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8a6:	2b00      	cmp	r3, #0
 801a8a8:	d04a      	beq.n	801a940 <_strtod_l+0xa30>
 801a8aa:	4b95      	ldr	r3, [pc, #596]	; (801ab00 <_strtod_l+0xbf0>)
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a8b2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801ab00 <_strtod_l+0xbf0>
 801a8b6:	f04f 0800 	mov.w	r8, #0
 801a8ba:	4b92      	ldr	r3, [pc, #584]	; (801ab04 <_strtod_l+0xbf4>)
 801a8bc:	403b      	ands	r3, r7
 801a8be:	930d      	str	r3, [sp, #52]	; 0x34
 801a8c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a8c2:	4b91      	ldr	r3, [pc, #580]	; (801ab08 <_strtod_l+0xbf8>)
 801a8c4:	429a      	cmp	r2, r3
 801a8c6:	f040 80b0 	bne.w	801aa2a <_strtod_l+0xb1a>
 801a8ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a8ce:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801a8d2:	ec4b ab10 	vmov	d0, sl, fp
 801a8d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801a8da:	f001 ff3d 	bl	801c758 <__ulp>
 801a8de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a8e2:	ec53 2b10 	vmov	r2, r3, d0
 801a8e6:	f7fd fef7 	bl	80186d8 <__aeabi_dmul>
 801a8ea:	4652      	mov	r2, sl
 801a8ec:	465b      	mov	r3, fp
 801a8ee:	f7fd fd3d 	bl	801836c <__adddf3>
 801a8f2:	460b      	mov	r3, r1
 801a8f4:	4983      	ldr	r1, [pc, #524]	; (801ab04 <_strtod_l+0xbf4>)
 801a8f6:	4a85      	ldr	r2, [pc, #532]	; (801ab0c <_strtod_l+0xbfc>)
 801a8f8:	4019      	ands	r1, r3
 801a8fa:	4291      	cmp	r1, r2
 801a8fc:	4682      	mov	sl, r0
 801a8fe:	d960      	bls.n	801a9c2 <_strtod_l+0xab2>
 801a900:	ee18 3a90 	vmov	r3, s17
 801a904:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a908:	4293      	cmp	r3, r2
 801a90a:	d104      	bne.n	801a916 <_strtod_l+0xa06>
 801a90c:	ee18 3a10 	vmov	r3, s16
 801a910:	3301      	adds	r3, #1
 801a912:	f43f ad45 	beq.w	801a3a0 <_strtod_l+0x490>
 801a916:	f8df b200 	ldr.w	fp, [pc, #512]	; 801ab18 <_strtod_l+0xc08>
 801a91a:	f04f 3aff 	mov.w	sl, #4294967295
 801a91e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a920:	4620      	mov	r0, r4
 801a922:	f001 fbe7 	bl	801c0f4 <_Bfree>
 801a926:	9905      	ldr	r1, [sp, #20]
 801a928:	4620      	mov	r0, r4
 801a92a:	f001 fbe3 	bl	801c0f4 <_Bfree>
 801a92e:	4631      	mov	r1, r6
 801a930:	4620      	mov	r0, r4
 801a932:	f001 fbdf 	bl	801c0f4 <_Bfree>
 801a936:	4629      	mov	r1, r5
 801a938:	4620      	mov	r0, r4
 801a93a:	f001 fbdb 	bl	801c0f4 <_Bfree>
 801a93e:	e61a      	b.n	801a576 <_strtod_l+0x666>
 801a940:	f1ba 0f00 	cmp.w	sl, #0
 801a944:	d11b      	bne.n	801a97e <_strtod_l+0xa6e>
 801a946:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a94a:	b9f3      	cbnz	r3, 801a98a <_strtod_l+0xa7a>
 801a94c:	4b6c      	ldr	r3, [pc, #432]	; (801ab00 <_strtod_l+0xbf0>)
 801a94e:	2200      	movs	r2, #0
 801a950:	4640      	mov	r0, r8
 801a952:	4649      	mov	r1, r9
 801a954:	f7fe f932 	bl	8018bbc <__aeabi_dcmplt>
 801a958:	b9d0      	cbnz	r0, 801a990 <_strtod_l+0xa80>
 801a95a:	4640      	mov	r0, r8
 801a95c:	4649      	mov	r1, r9
 801a95e:	4b6c      	ldr	r3, [pc, #432]	; (801ab10 <_strtod_l+0xc00>)
 801a960:	2200      	movs	r2, #0
 801a962:	f7fd feb9 	bl	80186d8 <__aeabi_dmul>
 801a966:	4680      	mov	r8, r0
 801a968:	4689      	mov	r9, r1
 801a96a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801a96e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801a972:	9315      	str	r3, [sp, #84]	; 0x54
 801a974:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a978:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a97c:	e79d      	b.n	801a8ba <_strtod_l+0x9aa>
 801a97e:	f1ba 0f01 	cmp.w	sl, #1
 801a982:	d102      	bne.n	801a98a <_strtod_l+0xa7a>
 801a984:	2f00      	cmp	r7, #0
 801a986:	f43f ad83 	beq.w	801a490 <_strtod_l+0x580>
 801a98a:	4b62      	ldr	r3, [pc, #392]	; (801ab14 <_strtod_l+0xc04>)
 801a98c:	2200      	movs	r2, #0
 801a98e:	e78e      	b.n	801a8ae <_strtod_l+0x99e>
 801a990:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801ab10 <_strtod_l+0xc00>
 801a994:	f04f 0800 	mov.w	r8, #0
 801a998:	e7e7      	b.n	801a96a <_strtod_l+0xa5a>
 801a99a:	4b5d      	ldr	r3, [pc, #372]	; (801ab10 <_strtod_l+0xc00>)
 801a99c:	4640      	mov	r0, r8
 801a99e:	4649      	mov	r1, r9
 801a9a0:	2200      	movs	r2, #0
 801a9a2:	f7fd fe99 	bl	80186d8 <__aeabi_dmul>
 801a9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a9a8:	4680      	mov	r8, r0
 801a9aa:	4689      	mov	r9, r1
 801a9ac:	b933      	cbnz	r3, 801a9bc <_strtod_l+0xaac>
 801a9ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a9b2:	900e      	str	r0, [sp, #56]	; 0x38
 801a9b4:	930f      	str	r3, [sp, #60]	; 0x3c
 801a9b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801a9ba:	e7dd      	b.n	801a978 <_strtod_l+0xa68>
 801a9bc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801a9c0:	e7f9      	b.n	801a9b6 <_strtod_l+0xaa6>
 801a9c2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a9c6:	9b04      	ldr	r3, [sp, #16]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d1a8      	bne.n	801a91e <_strtod_l+0xa0e>
 801a9cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a9d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801a9d2:	0d1b      	lsrs	r3, r3, #20
 801a9d4:	051b      	lsls	r3, r3, #20
 801a9d6:	429a      	cmp	r2, r3
 801a9d8:	d1a1      	bne.n	801a91e <_strtod_l+0xa0e>
 801a9da:	4640      	mov	r0, r8
 801a9dc:	4649      	mov	r1, r9
 801a9de:	f7fe f9c3 	bl	8018d68 <__aeabi_d2lz>
 801a9e2:	f7fd fe4b 	bl	801867c <__aeabi_l2d>
 801a9e6:	4602      	mov	r2, r0
 801a9e8:	460b      	mov	r3, r1
 801a9ea:	4640      	mov	r0, r8
 801a9ec:	4649      	mov	r1, r9
 801a9ee:	f7fd fcbb 	bl	8018368 <__aeabi_dsub>
 801a9f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a9f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a9f8:	ea43 030a 	orr.w	r3, r3, sl
 801a9fc:	4313      	orrs	r3, r2
 801a9fe:	4680      	mov	r8, r0
 801aa00:	4689      	mov	r9, r1
 801aa02:	d055      	beq.n	801aab0 <_strtod_l+0xba0>
 801aa04:	a336      	add	r3, pc, #216	; (adr r3, 801aae0 <_strtod_l+0xbd0>)
 801aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa0a:	f7fe f8d7 	bl	8018bbc <__aeabi_dcmplt>
 801aa0e:	2800      	cmp	r0, #0
 801aa10:	f47f acd0 	bne.w	801a3b4 <_strtod_l+0x4a4>
 801aa14:	a334      	add	r3, pc, #208	; (adr r3, 801aae8 <_strtod_l+0xbd8>)
 801aa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa1a:	4640      	mov	r0, r8
 801aa1c:	4649      	mov	r1, r9
 801aa1e:	f7fe f8eb 	bl	8018bf8 <__aeabi_dcmpgt>
 801aa22:	2800      	cmp	r0, #0
 801aa24:	f43f af7b 	beq.w	801a91e <_strtod_l+0xa0e>
 801aa28:	e4c4      	b.n	801a3b4 <_strtod_l+0x4a4>
 801aa2a:	9b04      	ldr	r3, [sp, #16]
 801aa2c:	b333      	cbz	r3, 801aa7c <_strtod_l+0xb6c>
 801aa2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aa30:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801aa34:	d822      	bhi.n	801aa7c <_strtod_l+0xb6c>
 801aa36:	a32e      	add	r3, pc, #184	; (adr r3, 801aaf0 <_strtod_l+0xbe0>)
 801aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa3c:	4640      	mov	r0, r8
 801aa3e:	4649      	mov	r1, r9
 801aa40:	f7fe f8c6 	bl	8018bd0 <__aeabi_dcmple>
 801aa44:	b1a0      	cbz	r0, 801aa70 <_strtod_l+0xb60>
 801aa46:	4649      	mov	r1, r9
 801aa48:	4640      	mov	r0, r8
 801aa4a:	f7fe f91d 	bl	8018c88 <__aeabi_d2uiz>
 801aa4e:	2801      	cmp	r0, #1
 801aa50:	bf38      	it	cc
 801aa52:	2001      	movcc	r0, #1
 801aa54:	f7fd fdc6 	bl	80185e4 <__aeabi_ui2d>
 801aa58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aa5a:	4680      	mov	r8, r0
 801aa5c:	4689      	mov	r9, r1
 801aa5e:	bb23      	cbnz	r3, 801aaaa <_strtod_l+0xb9a>
 801aa60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aa64:	9010      	str	r0, [sp, #64]	; 0x40
 801aa66:	9311      	str	r3, [sp, #68]	; 0x44
 801aa68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801aa6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aa70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801aa74:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801aa78:	1a9b      	subs	r3, r3, r2
 801aa7a:	9309      	str	r3, [sp, #36]	; 0x24
 801aa7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aa80:	eeb0 0a48 	vmov.f32	s0, s16
 801aa84:	eef0 0a68 	vmov.f32	s1, s17
 801aa88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aa8c:	f001 fe64 	bl	801c758 <__ulp>
 801aa90:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801aa94:	ec53 2b10 	vmov	r2, r3, d0
 801aa98:	f7fd fe1e 	bl	80186d8 <__aeabi_dmul>
 801aa9c:	ec53 2b18 	vmov	r2, r3, d8
 801aaa0:	f7fd fc64 	bl	801836c <__adddf3>
 801aaa4:	4682      	mov	sl, r0
 801aaa6:	468b      	mov	fp, r1
 801aaa8:	e78d      	b.n	801a9c6 <_strtod_l+0xab6>
 801aaaa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801aaae:	e7db      	b.n	801aa68 <_strtod_l+0xb58>
 801aab0:	a311      	add	r3, pc, #68	; (adr r3, 801aaf8 <_strtod_l+0xbe8>)
 801aab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aab6:	f7fe f881 	bl	8018bbc <__aeabi_dcmplt>
 801aaba:	e7b2      	b.n	801aa22 <_strtod_l+0xb12>
 801aabc:	2300      	movs	r3, #0
 801aabe:	930a      	str	r3, [sp, #40]	; 0x28
 801aac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aac2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aac4:	6013      	str	r3, [r2, #0]
 801aac6:	f7ff ba6b 	b.w	8019fa0 <_strtod_l+0x90>
 801aaca:	2a65      	cmp	r2, #101	; 0x65
 801aacc:	f43f ab5f 	beq.w	801a18e <_strtod_l+0x27e>
 801aad0:	2a45      	cmp	r2, #69	; 0x45
 801aad2:	f43f ab5c 	beq.w	801a18e <_strtod_l+0x27e>
 801aad6:	2301      	movs	r3, #1
 801aad8:	f7ff bb94 	b.w	801a204 <_strtod_l+0x2f4>
 801aadc:	f3af 8000 	nop.w
 801aae0:	94a03595 	.word	0x94a03595
 801aae4:	3fdfffff 	.word	0x3fdfffff
 801aae8:	35afe535 	.word	0x35afe535
 801aaec:	3fe00000 	.word	0x3fe00000
 801aaf0:	ffc00000 	.word	0xffc00000
 801aaf4:	41dfffff 	.word	0x41dfffff
 801aaf8:	94a03595 	.word	0x94a03595
 801aafc:	3fcfffff 	.word	0x3fcfffff
 801ab00:	3ff00000 	.word	0x3ff00000
 801ab04:	7ff00000 	.word	0x7ff00000
 801ab08:	7fe00000 	.word	0x7fe00000
 801ab0c:	7c9fffff 	.word	0x7c9fffff
 801ab10:	3fe00000 	.word	0x3fe00000
 801ab14:	bff00000 	.word	0xbff00000
 801ab18:	7fefffff 	.word	0x7fefffff

0801ab1c <_strtod_r>:
 801ab1c:	4b01      	ldr	r3, [pc, #4]	; (801ab24 <_strtod_r+0x8>)
 801ab1e:	f7ff b9f7 	b.w	8019f10 <_strtod_l>
 801ab22:	bf00      	nop
 801ab24:	200000cc 	.word	0x200000cc

0801ab28 <_strtol_l.constprop.0>:
 801ab28:	2b01      	cmp	r3, #1
 801ab2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab2e:	d001      	beq.n	801ab34 <_strtol_l.constprop.0+0xc>
 801ab30:	2b24      	cmp	r3, #36	; 0x24
 801ab32:	d906      	bls.n	801ab42 <_strtol_l.constprop.0+0x1a>
 801ab34:	f7fe fafe 	bl	8019134 <__errno>
 801ab38:	2316      	movs	r3, #22
 801ab3a:	6003      	str	r3, [r0, #0]
 801ab3c:	2000      	movs	r0, #0
 801ab3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab42:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801ac28 <_strtol_l.constprop.0+0x100>
 801ab46:	460d      	mov	r5, r1
 801ab48:	462e      	mov	r6, r5
 801ab4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ab4e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801ab52:	f017 0708 	ands.w	r7, r7, #8
 801ab56:	d1f7      	bne.n	801ab48 <_strtol_l.constprop.0+0x20>
 801ab58:	2c2d      	cmp	r4, #45	; 0x2d
 801ab5a:	d132      	bne.n	801abc2 <_strtol_l.constprop.0+0x9a>
 801ab5c:	782c      	ldrb	r4, [r5, #0]
 801ab5e:	2701      	movs	r7, #1
 801ab60:	1cb5      	adds	r5, r6, #2
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d05b      	beq.n	801ac1e <_strtol_l.constprop.0+0xf6>
 801ab66:	2b10      	cmp	r3, #16
 801ab68:	d109      	bne.n	801ab7e <_strtol_l.constprop.0+0x56>
 801ab6a:	2c30      	cmp	r4, #48	; 0x30
 801ab6c:	d107      	bne.n	801ab7e <_strtol_l.constprop.0+0x56>
 801ab6e:	782c      	ldrb	r4, [r5, #0]
 801ab70:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801ab74:	2c58      	cmp	r4, #88	; 0x58
 801ab76:	d14d      	bne.n	801ac14 <_strtol_l.constprop.0+0xec>
 801ab78:	786c      	ldrb	r4, [r5, #1]
 801ab7a:	2310      	movs	r3, #16
 801ab7c:	3502      	adds	r5, #2
 801ab7e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801ab82:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab86:	f04f 0c00 	mov.w	ip, #0
 801ab8a:	fbb8 f9f3 	udiv	r9, r8, r3
 801ab8e:	4666      	mov	r6, ip
 801ab90:	fb03 8a19 	mls	sl, r3, r9, r8
 801ab94:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801ab98:	f1be 0f09 	cmp.w	lr, #9
 801ab9c:	d816      	bhi.n	801abcc <_strtol_l.constprop.0+0xa4>
 801ab9e:	4674      	mov	r4, lr
 801aba0:	42a3      	cmp	r3, r4
 801aba2:	dd24      	ble.n	801abee <_strtol_l.constprop.0+0xc6>
 801aba4:	f1bc 0f00 	cmp.w	ip, #0
 801aba8:	db1e      	blt.n	801abe8 <_strtol_l.constprop.0+0xc0>
 801abaa:	45b1      	cmp	r9, r6
 801abac:	d31c      	bcc.n	801abe8 <_strtol_l.constprop.0+0xc0>
 801abae:	d101      	bne.n	801abb4 <_strtol_l.constprop.0+0x8c>
 801abb0:	45a2      	cmp	sl, r4
 801abb2:	db19      	blt.n	801abe8 <_strtol_l.constprop.0+0xc0>
 801abb4:	fb06 4603 	mla	r6, r6, r3, r4
 801abb8:	f04f 0c01 	mov.w	ip, #1
 801abbc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801abc0:	e7e8      	b.n	801ab94 <_strtol_l.constprop.0+0x6c>
 801abc2:	2c2b      	cmp	r4, #43	; 0x2b
 801abc4:	bf04      	itt	eq
 801abc6:	782c      	ldrbeq	r4, [r5, #0]
 801abc8:	1cb5      	addeq	r5, r6, #2
 801abca:	e7ca      	b.n	801ab62 <_strtol_l.constprop.0+0x3a>
 801abcc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801abd0:	f1be 0f19 	cmp.w	lr, #25
 801abd4:	d801      	bhi.n	801abda <_strtol_l.constprop.0+0xb2>
 801abd6:	3c37      	subs	r4, #55	; 0x37
 801abd8:	e7e2      	b.n	801aba0 <_strtol_l.constprop.0+0x78>
 801abda:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801abde:	f1be 0f19 	cmp.w	lr, #25
 801abe2:	d804      	bhi.n	801abee <_strtol_l.constprop.0+0xc6>
 801abe4:	3c57      	subs	r4, #87	; 0x57
 801abe6:	e7db      	b.n	801aba0 <_strtol_l.constprop.0+0x78>
 801abe8:	f04f 3cff 	mov.w	ip, #4294967295
 801abec:	e7e6      	b.n	801abbc <_strtol_l.constprop.0+0x94>
 801abee:	f1bc 0f00 	cmp.w	ip, #0
 801abf2:	da05      	bge.n	801ac00 <_strtol_l.constprop.0+0xd8>
 801abf4:	2322      	movs	r3, #34	; 0x22
 801abf6:	6003      	str	r3, [r0, #0]
 801abf8:	4646      	mov	r6, r8
 801abfa:	b942      	cbnz	r2, 801ac0e <_strtol_l.constprop.0+0xe6>
 801abfc:	4630      	mov	r0, r6
 801abfe:	e79e      	b.n	801ab3e <_strtol_l.constprop.0+0x16>
 801ac00:	b107      	cbz	r7, 801ac04 <_strtol_l.constprop.0+0xdc>
 801ac02:	4276      	negs	r6, r6
 801ac04:	2a00      	cmp	r2, #0
 801ac06:	d0f9      	beq.n	801abfc <_strtol_l.constprop.0+0xd4>
 801ac08:	f1bc 0f00 	cmp.w	ip, #0
 801ac0c:	d000      	beq.n	801ac10 <_strtol_l.constprop.0+0xe8>
 801ac0e:	1e69      	subs	r1, r5, #1
 801ac10:	6011      	str	r1, [r2, #0]
 801ac12:	e7f3      	b.n	801abfc <_strtol_l.constprop.0+0xd4>
 801ac14:	2430      	movs	r4, #48	; 0x30
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d1b1      	bne.n	801ab7e <_strtol_l.constprop.0+0x56>
 801ac1a:	2308      	movs	r3, #8
 801ac1c:	e7af      	b.n	801ab7e <_strtol_l.constprop.0+0x56>
 801ac1e:	2c30      	cmp	r4, #48	; 0x30
 801ac20:	d0a5      	beq.n	801ab6e <_strtol_l.constprop.0+0x46>
 801ac22:	230a      	movs	r3, #10
 801ac24:	e7ab      	b.n	801ab7e <_strtol_l.constprop.0+0x56>
 801ac26:	bf00      	nop
 801ac28:	08051991 	.word	0x08051991

0801ac2c <_strtol_r>:
 801ac2c:	f7ff bf7c 	b.w	801ab28 <_strtol_l.constprop.0>

0801ac30 <strtol>:
 801ac30:	4613      	mov	r3, r2
 801ac32:	460a      	mov	r2, r1
 801ac34:	4601      	mov	r1, r0
 801ac36:	4802      	ldr	r0, [pc, #8]	; (801ac40 <strtol+0x10>)
 801ac38:	6800      	ldr	r0, [r0, #0]
 801ac3a:	f7ff bf75 	b.w	801ab28 <_strtol_l.constprop.0>
 801ac3e:	bf00      	nop
 801ac40:	20000064 	.word	0x20000064

0801ac44 <quorem>:
 801ac44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac48:	6903      	ldr	r3, [r0, #16]
 801ac4a:	690c      	ldr	r4, [r1, #16]
 801ac4c:	42a3      	cmp	r3, r4
 801ac4e:	4607      	mov	r7, r0
 801ac50:	f2c0 8081 	blt.w	801ad56 <quorem+0x112>
 801ac54:	3c01      	subs	r4, #1
 801ac56:	f101 0814 	add.w	r8, r1, #20
 801ac5a:	f100 0514 	add.w	r5, r0, #20
 801ac5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ac62:	9301      	str	r3, [sp, #4]
 801ac64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ac68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ac6c:	3301      	adds	r3, #1
 801ac6e:	429a      	cmp	r2, r3
 801ac70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ac74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ac78:	fbb2 f6f3 	udiv	r6, r2, r3
 801ac7c:	d331      	bcc.n	801ace2 <quorem+0x9e>
 801ac7e:	f04f 0e00 	mov.w	lr, #0
 801ac82:	4640      	mov	r0, r8
 801ac84:	46ac      	mov	ip, r5
 801ac86:	46f2      	mov	sl, lr
 801ac88:	f850 2b04 	ldr.w	r2, [r0], #4
 801ac8c:	b293      	uxth	r3, r2
 801ac8e:	fb06 e303 	mla	r3, r6, r3, lr
 801ac92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ac96:	b29b      	uxth	r3, r3
 801ac98:	ebaa 0303 	sub.w	r3, sl, r3
 801ac9c:	f8dc a000 	ldr.w	sl, [ip]
 801aca0:	0c12      	lsrs	r2, r2, #16
 801aca2:	fa13 f38a 	uxtah	r3, r3, sl
 801aca6:	fb06 e202 	mla	r2, r6, r2, lr
 801acaa:	9300      	str	r3, [sp, #0]
 801acac:	9b00      	ldr	r3, [sp, #0]
 801acae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801acb2:	b292      	uxth	r2, r2
 801acb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801acb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801acbc:	f8bd 3000 	ldrh.w	r3, [sp]
 801acc0:	4581      	cmp	r9, r0
 801acc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801acc6:	f84c 3b04 	str.w	r3, [ip], #4
 801acca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801acce:	d2db      	bcs.n	801ac88 <quorem+0x44>
 801acd0:	f855 300b 	ldr.w	r3, [r5, fp]
 801acd4:	b92b      	cbnz	r3, 801ace2 <quorem+0x9e>
 801acd6:	9b01      	ldr	r3, [sp, #4]
 801acd8:	3b04      	subs	r3, #4
 801acda:	429d      	cmp	r5, r3
 801acdc:	461a      	mov	r2, r3
 801acde:	d32e      	bcc.n	801ad3e <quorem+0xfa>
 801ace0:	613c      	str	r4, [r7, #16]
 801ace2:	4638      	mov	r0, r7
 801ace4:	f001 fc92 	bl	801c60c <__mcmp>
 801ace8:	2800      	cmp	r0, #0
 801acea:	db24      	blt.n	801ad36 <quorem+0xf2>
 801acec:	3601      	adds	r6, #1
 801acee:	4628      	mov	r0, r5
 801acf0:	f04f 0c00 	mov.w	ip, #0
 801acf4:	f858 2b04 	ldr.w	r2, [r8], #4
 801acf8:	f8d0 e000 	ldr.w	lr, [r0]
 801acfc:	b293      	uxth	r3, r2
 801acfe:	ebac 0303 	sub.w	r3, ip, r3
 801ad02:	0c12      	lsrs	r2, r2, #16
 801ad04:	fa13 f38e 	uxtah	r3, r3, lr
 801ad08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801ad0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801ad10:	b29b      	uxth	r3, r3
 801ad12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ad16:	45c1      	cmp	r9, r8
 801ad18:	f840 3b04 	str.w	r3, [r0], #4
 801ad1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801ad20:	d2e8      	bcs.n	801acf4 <quorem+0xb0>
 801ad22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ad26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ad2a:	b922      	cbnz	r2, 801ad36 <quorem+0xf2>
 801ad2c:	3b04      	subs	r3, #4
 801ad2e:	429d      	cmp	r5, r3
 801ad30:	461a      	mov	r2, r3
 801ad32:	d30a      	bcc.n	801ad4a <quorem+0x106>
 801ad34:	613c      	str	r4, [r7, #16]
 801ad36:	4630      	mov	r0, r6
 801ad38:	b003      	add	sp, #12
 801ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad3e:	6812      	ldr	r2, [r2, #0]
 801ad40:	3b04      	subs	r3, #4
 801ad42:	2a00      	cmp	r2, #0
 801ad44:	d1cc      	bne.n	801ace0 <quorem+0x9c>
 801ad46:	3c01      	subs	r4, #1
 801ad48:	e7c7      	b.n	801acda <quorem+0x96>
 801ad4a:	6812      	ldr	r2, [r2, #0]
 801ad4c:	3b04      	subs	r3, #4
 801ad4e:	2a00      	cmp	r2, #0
 801ad50:	d1f0      	bne.n	801ad34 <quorem+0xf0>
 801ad52:	3c01      	subs	r4, #1
 801ad54:	e7eb      	b.n	801ad2e <quorem+0xea>
 801ad56:	2000      	movs	r0, #0
 801ad58:	e7ee      	b.n	801ad38 <quorem+0xf4>
 801ad5a:	0000      	movs	r0, r0
 801ad5c:	0000      	movs	r0, r0
	...

0801ad60 <_dtoa_r>:
 801ad60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad64:	ed2d 8b04 	vpush	{d8-d9}
 801ad68:	ec57 6b10 	vmov	r6, r7, d0
 801ad6c:	b093      	sub	sp, #76	; 0x4c
 801ad6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ad70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ad74:	9106      	str	r1, [sp, #24]
 801ad76:	ee10 aa10 	vmov	sl, s0
 801ad7a:	4604      	mov	r4, r0
 801ad7c:	9209      	str	r2, [sp, #36]	; 0x24
 801ad7e:	930c      	str	r3, [sp, #48]	; 0x30
 801ad80:	46bb      	mov	fp, r7
 801ad82:	b975      	cbnz	r5, 801ada2 <_dtoa_r+0x42>
 801ad84:	2010      	movs	r0, #16
 801ad86:	f001 f94d 	bl	801c024 <malloc>
 801ad8a:	4602      	mov	r2, r0
 801ad8c:	6260      	str	r0, [r4, #36]	; 0x24
 801ad8e:	b920      	cbnz	r0, 801ad9a <_dtoa_r+0x3a>
 801ad90:	4ba7      	ldr	r3, [pc, #668]	; (801b030 <_dtoa_r+0x2d0>)
 801ad92:	21ea      	movs	r1, #234	; 0xea
 801ad94:	48a7      	ldr	r0, [pc, #668]	; (801b034 <_dtoa_r+0x2d4>)
 801ad96:	f002 f8bd 	bl	801cf14 <__assert_func>
 801ad9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ad9e:	6005      	str	r5, [r0, #0]
 801ada0:	60c5      	str	r5, [r0, #12]
 801ada2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ada4:	6819      	ldr	r1, [r3, #0]
 801ada6:	b151      	cbz	r1, 801adbe <_dtoa_r+0x5e>
 801ada8:	685a      	ldr	r2, [r3, #4]
 801adaa:	604a      	str	r2, [r1, #4]
 801adac:	2301      	movs	r3, #1
 801adae:	4093      	lsls	r3, r2
 801adb0:	608b      	str	r3, [r1, #8]
 801adb2:	4620      	mov	r0, r4
 801adb4:	f001 f99e 	bl	801c0f4 <_Bfree>
 801adb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801adba:	2200      	movs	r2, #0
 801adbc:	601a      	str	r2, [r3, #0]
 801adbe:	1e3b      	subs	r3, r7, #0
 801adc0:	bfaa      	itet	ge
 801adc2:	2300      	movge	r3, #0
 801adc4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801adc8:	f8c8 3000 	strge.w	r3, [r8]
 801adcc:	4b9a      	ldr	r3, [pc, #616]	; (801b038 <_dtoa_r+0x2d8>)
 801adce:	bfbc      	itt	lt
 801add0:	2201      	movlt	r2, #1
 801add2:	f8c8 2000 	strlt.w	r2, [r8]
 801add6:	ea33 030b 	bics.w	r3, r3, fp
 801adda:	d11b      	bne.n	801ae14 <_dtoa_r+0xb4>
 801addc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801adde:	f242 730f 	movw	r3, #9999	; 0x270f
 801ade2:	6013      	str	r3, [r2, #0]
 801ade4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ade8:	4333      	orrs	r3, r6
 801adea:	f000 8592 	beq.w	801b912 <_dtoa_r+0xbb2>
 801adee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801adf0:	b963      	cbnz	r3, 801ae0c <_dtoa_r+0xac>
 801adf2:	4b92      	ldr	r3, [pc, #584]	; (801b03c <_dtoa_r+0x2dc>)
 801adf4:	e022      	b.n	801ae3c <_dtoa_r+0xdc>
 801adf6:	4b92      	ldr	r3, [pc, #584]	; (801b040 <_dtoa_r+0x2e0>)
 801adf8:	9301      	str	r3, [sp, #4]
 801adfa:	3308      	adds	r3, #8
 801adfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801adfe:	6013      	str	r3, [r2, #0]
 801ae00:	9801      	ldr	r0, [sp, #4]
 801ae02:	b013      	add	sp, #76	; 0x4c
 801ae04:	ecbd 8b04 	vpop	{d8-d9}
 801ae08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae0c:	4b8b      	ldr	r3, [pc, #556]	; (801b03c <_dtoa_r+0x2dc>)
 801ae0e:	9301      	str	r3, [sp, #4]
 801ae10:	3303      	adds	r3, #3
 801ae12:	e7f3      	b.n	801adfc <_dtoa_r+0x9c>
 801ae14:	2200      	movs	r2, #0
 801ae16:	2300      	movs	r3, #0
 801ae18:	4650      	mov	r0, sl
 801ae1a:	4659      	mov	r1, fp
 801ae1c:	f7fd fec4 	bl	8018ba8 <__aeabi_dcmpeq>
 801ae20:	ec4b ab19 	vmov	d9, sl, fp
 801ae24:	4680      	mov	r8, r0
 801ae26:	b158      	cbz	r0, 801ae40 <_dtoa_r+0xe0>
 801ae28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ae2a:	2301      	movs	r3, #1
 801ae2c:	6013      	str	r3, [r2, #0]
 801ae2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	f000 856b 	beq.w	801b90c <_dtoa_r+0xbac>
 801ae36:	4883      	ldr	r0, [pc, #524]	; (801b044 <_dtoa_r+0x2e4>)
 801ae38:	6018      	str	r0, [r3, #0]
 801ae3a:	1e43      	subs	r3, r0, #1
 801ae3c:	9301      	str	r3, [sp, #4]
 801ae3e:	e7df      	b.n	801ae00 <_dtoa_r+0xa0>
 801ae40:	ec4b ab10 	vmov	d0, sl, fp
 801ae44:	aa10      	add	r2, sp, #64	; 0x40
 801ae46:	a911      	add	r1, sp, #68	; 0x44
 801ae48:	4620      	mov	r0, r4
 801ae4a:	f001 fd01 	bl	801c850 <__d2b>
 801ae4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ae52:	ee08 0a10 	vmov	s16, r0
 801ae56:	2d00      	cmp	r5, #0
 801ae58:	f000 8084 	beq.w	801af64 <_dtoa_r+0x204>
 801ae5c:	ee19 3a90 	vmov	r3, s19
 801ae60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ae64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ae68:	4656      	mov	r6, sl
 801ae6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ae6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ae72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ae76:	4b74      	ldr	r3, [pc, #464]	; (801b048 <_dtoa_r+0x2e8>)
 801ae78:	2200      	movs	r2, #0
 801ae7a:	4630      	mov	r0, r6
 801ae7c:	4639      	mov	r1, r7
 801ae7e:	f7fd fa73 	bl	8018368 <__aeabi_dsub>
 801ae82:	a365      	add	r3, pc, #404	; (adr r3, 801b018 <_dtoa_r+0x2b8>)
 801ae84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae88:	f7fd fc26 	bl	80186d8 <__aeabi_dmul>
 801ae8c:	a364      	add	r3, pc, #400	; (adr r3, 801b020 <_dtoa_r+0x2c0>)
 801ae8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae92:	f7fd fa6b 	bl	801836c <__adddf3>
 801ae96:	4606      	mov	r6, r0
 801ae98:	4628      	mov	r0, r5
 801ae9a:	460f      	mov	r7, r1
 801ae9c:	f7fd fbb2 	bl	8018604 <__aeabi_i2d>
 801aea0:	a361      	add	r3, pc, #388	; (adr r3, 801b028 <_dtoa_r+0x2c8>)
 801aea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aea6:	f7fd fc17 	bl	80186d8 <__aeabi_dmul>
 801aeaa:	4602      	mov	r2, r0
 801aeac:	460b      	mov	r3, r1
 801aeae:	4630      	mov	r0, r6
 801aeb0:	4639      	mov	r1, r7
 801aeb2:	f7fd fa5b 	bl	801836c <__adddf3>
 801aeb6:	4606      	mov	r6, r0
 801aeb8:	460f      	mov	r7, r1
 801aeba:	f7fd febd 	bl	8018c38 <__aeabi_d2iz>
 801aebe:	2200      	movs	r2, #0
 801aec0:	9000      	str	r0, [sp, #0]
 801aec2:	2300      	movs	r3, #0
 801aec4:	4630      	mov	r0, r6
 801aec6:	4639      	mov	r1, r7
 801aec8:	f7fd fe78 	bl	8018bbc <__aeabi_dcmplt>
 801aecc:	b150      	cbz	r0, 801aee4 <_dtoa_r+0x184>
 801aece:	9800      	ldr	r0, [sp, #0]
 801aed0:	f7fd fb98 	bl	8018604 <__aeabi_i2d>
 801aed4:	4632      	mov	r2, r6
 801aed6:	463b      	mov	r3, r7
 801aed8:	f7fd fe66 	bl	8018ba8 <__aeabi_dcmpeq>
 801aedc:	b910      	cbnz	r0, 801aee4 <_dtoa_r+0x184>
 801aede:	9b00      	ldr	r3, [sp, #0]
 801aee0:	3b01      	subs	r3, #1
 801aee2:	9300      	str	r3, [sp, #0]
 801aee4:	9b00      	ldr	r3, [sp, #0]
 801aee6:	2b16      	cmp	r3, #22
 801aee8:	d85a      	bhi.n	801afa0 <_dtoa_r+0x240>
 801aeea:	9a00      	ldr	r2, [sp, #0]
 801aeec:	4b57      	ldr	r3, [pc, #348]	; (801b04c <_dtoa_r+0x2ec>)
 801aeee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aef6:	ec51 0b19 	vmov	r0, r1, d9
 801aefa:	f7fd fe5f 	bl	8018bbc <__aeabi_dcmplt>
 801aefe:	2800      	cmp	r0, #0
 801af00:	d050      	beq.n	801afa4 <_dtoa_r+0x244>
 801af02:	9b00      	ldr	r3, [sp, #0]
 801af04:	3b01      	subs	r3, #1
 801af06:	9300      	str	r3, [sp, #0]
 801af08:	2300      	movs	r3, #0
 801af0a:	930b      	str	r3, [sp, #44]	; 0x2c
 801af0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801af0e:	1b5d      	subs	r5, r3, r5
 801af10:	1e6b      	subs	r3, r5, #1
 801af12:	9305      	str	r3, [sp, #20]
 801af14:	bf45      	ittet	mi
 801af16:	f1c5 0301 	rsbmi	r3, r5, #1
 801af1a:	9304      	strmi	r3, [sp, #16]
 801af1c:	2300      	movpl	r3, #0
 801af1e:	2300      	movmi	r3, #0
 801af20:	bf4c      	ite	mi
 801af22:	9305      	strmi	r3, [sp, #20]
 801af24:	9304      	strpl	r3, [sp, #16]
 801af26:	9b00      	ldr	r3, [sp, #0]
 801af28:	2b00      	cmp	r3, #0
 801af2a:	db3d      	blt.n	801afa8 <_dtoa_r+0x248>
 801af2c:	9b05      	ldr	r3, [sp, #20]
 801af2e:	9a00      	ldr	r2, [sp, #0]
 801af30:	920a      	str	r2, [sp, #40]	; 0x28
 801af32:	4413      	add	r3, r2
 801af34:	9305      	str	r3, [sp, #20]
 801af36:	2300      	movs	r3, #0
 801af38:	9307      	str	r3, [sp, #28]
 801af3a:	9b06      	ldr	r3, [sp, #24]
 801af3c:	2b09      	cmp	r3, #9
 801af3e:	f200 8089 	bhi.w	801b054 <_dtoa_r+0x2f4>
 801af42:	2b05      	cmp	r3, #5
 801af44:	bfc4      	itt	gt
 801af46:	3b04      	subgt	r3, #4
 801af48:	9306      	strgt	r3, [sp, #24]
 801af4a:	9b06      	ldr	r3, [sp, #24]
 801af4c:	f1a3 0302 	sub.w	r3, r3, #2
 801af50:	bfcc      	ite	gt
 801af52:	2500      	movgt	r5, #0
 801af54:	2501      	movle	r5, #1
 801af56:	2b03      	cmp	r3, #3
 801af58:	f200 8087 	bhi.w	801b06a <_dtoa_r+0x30a>
 801af5c:	e8df f003 	tbb	[pc, r3]
 801af60:	59383a2d 	.word	0x59383a2d
 801af64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801af68:	441d      	add	r5, r3
 801af6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801af6e:	2b20      	cmp	r3, #32
 801af70:	bfc1      	itttt	gt
 801af72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801af76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801af7a:	fa0b f303 	lslgt.w	r3, fp, r3
 801af7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801af82:	bfda      	itte	le
 801af84:	f1c3 0320 	rsble	r3, r3, #32
 801af88:	fa06 f003 	lslle.w	r0, r6, r3
 801af8c:	4318      	orrgt	r0, r3
 801af8e:	f7fd fb29 	bl	80185e4 <__aeabi_ui2d>
 801af92:	2301      	movs	r3, #1
 801af94:	4606      	mov	r6, r0
 801af96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801af9a:	3d01      	subs	r5, #1
 801af9c:	930e      	str	r3, [sp, #56]	; 0x38
 801af9e:	e76a      	b.n	801ae76 <_dtoa_r+0x116>
 801afa0:	2301      	movs	r3, #1
 801afa2:	e7b2      	b.n	801af0a <_dtoa_r+0x1aa>
 801afa4:	900b      	str	r0, [sp, #44]	; 0x2c
 801afa6:	e7b1      	b.n	801af0c <_dtoa_r+0x1ac>
 801afa8:	9b04      	ldr	r3, [sp, #16]
 801afaa:	9a00      	ldr	r2, [sp, #0]
 801afac:	1a9b      	subs	r3, r3, r2
 801afae:	9304      	str	r3, [sp, #16]
 801afb0:	4253      	negs	r3, r2
 801afb2:	9307      	str	r3, [sp, #28]
 801afb4:	2300      	movs	r3, #0
 801afb6:	930a      	str	r3, [sp, #40]	; 0x28
 801afb8:	e7bf      	b.n	801af3a <_dtoa_r+0x1da>
 801afba:	2300      	movs	r3, #0
 801afbc:	9308      	str	r3, [sp, #32]
 801afbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	dc55      	bgt.n	801b070 <_dtoa_r+0x310>
 801afc4:	2301      	movs	r3, #1
 801afc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801afca:	461a      	mov	r2, r3
 801afcc:	9209      	str	r2, [sp, #36]	; 0x24
 801afce:	e00c      	b.n	801afea <_dtoa_r+0x28a>
 801afd0:	2301      	movs	r3, #1
 801afd2:	e7f3      	b.n	801afbc <_dtoa_r+0x25c>
 801afd4:	2300      	movs	r3, #0
 801afd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afd8:	9308      	str	r3, [sp, #32]
 801afda:	9b00      	ldr	r3, [sp, #0]
 801afdc:	4413      	add	r3, r2
 801afde:	9302      	str	r3, [sp, #8]
 801afe0:	3301      	adds	r3, #1
 801afe2:	2b01      	cmp	r3, #1
 801afe4:	9303      	str	r3, [sp, #12]
 801afe6:	bfb8      	it	lt
 801afe8:	2301      	movlt	r3, #1
 801afea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801afec:	2200      	movs	r2, #0
 801afee:	6042      	str	r2, [r0, #4]
 801aff0:	2204      	movs	r2, #4
 801aff2:	f102 0614 	add.w	r6, r2, #20
 801aff6:	429e      	cmp	r6, r3
 801aff8:	6841      	ldr	r1, [r0, #4]
 801affa:	d93d      	bls.n	801b078 <_dtoa_r+0x318>
 801affc:	4620      	mov	r0, r4
 801affe:	f001 f839 	bl	801c074 <_Balloc>
 801b002:	9001      	str	r0, [sp, #4]
 801b004:	2800      	cmp	r0, #0
 801b006:	d13b      	bne.n	801b080 <_dtoa_r+0x320>
 801b008:	4b11      	ldr	r3, [pc, #68]	; (801b050 <_dtoa_r+0x2f0>)
 801b00a:	4602      	mov	r2, r0
 801b00c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b010:	e6c0      	b.n	801ad94 <_dtoa_r+0x34>
 801b012:	2301      	movs	r3, #1
 801b014:	e7df      	b.n	801afd6 <_dtoa_r+0x276>
 801b016:	bf00      	nop
 801b018:	636f4361 	.word	0x636f4361
 801b01c:	3fd287a7 	.word	0x3fd287a7
 801b020:	8b60c8b3 	.word	0x8b60c8b3
 801b024:	3fc68a28 	.word	0x3fc68a28
 801b028:	509f79fb 	.word	0x509f79fb
 801b02c:	3fd34413 	.word	0x3fd34413
 801b030:	08051a9e 	.word	0x08051a9e
 801b034:	08051ab5 	.word	0x08051ab5
 801b038:	7ff00000 	.word	0x7ff00000
 801b03c:	08051a9a 	.word	0x08051a9a
 801b040:	08051a91 	.word	0x08051a91
 801b044:	08051911 	.word	0x08051911
 801b048:	3ff80000 	.word	0x3ff80000
 801b04c:	08051c20 	.word	0x08051c20
 801b050:	08051b10 	.word	0x08051b10
 801b054:	2501      	movs	r5, #1
 801b056:	2300      	movs	r3, #0
 801b058:	9306      	str	r3, [sp, #24]
 801b05a:	9508      	str	r5, [sp, #32]
 801b05c:	f04f 33ff 	mov.w	r3, #4294967295
 801b060:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b064:	2200      	movs	r2, #0
 801b066:	2312      	movs	r3, #18
 801b068:	e7b0      	b.n	801afcc <_dtoa_r+0x26c>
 801b06a:	2301      	movs	r3, #1
 801b06c:	9308      	str	r3, [sp, #32]
 801b06e:	e7f5      	b.n	801b05c <_dtoa_r+0x2fc>
 801b070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b076:	e7b8      	b.n	801afea <_dtoa_r+0x28a>
 801b078:	3101      	adds	r1, #1
 801b07a:	6041      	str	r1, [r0, #4]
 801b07c:	0052      	lsls	r2, r2, #1
 801b07e:	e7b8      	b.n	801aff2 <_dtoa_r+0x292>
 801b080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b082:	9a01      	ldr	r2, [sp, #4]
 801b084:	601a      	str	r2, [r3, #0]
 801b086:	9b03      	ldr	r3, [sp, #12]
 801b088:	2b0e      	cmp	r3, #14
 801b08a:	f200 809d 	bhi.w	801b1c8 <_dtoa_r+0x468>
 801b08e:	2d00      	cmp	r5, #0
 801b090:	f000 809a 	beq.w	801b1c8 <_dtoa_r+0x468>
 801b094:	9b00      	ldr	r3, [sp, #0]
 801b096:	2b00      	cmp	r3, #0
 801b098:	dd32      	ble.n	801b100 <_dtoa_r+0x3a0>
 801b09a:	4ab7      	ldr	r2, [pc, #732]	; (801b378 <_dtoa_r+0x618>)
 801b09c:	f003 030f 	and.w	r3, r3, #15
 801b0a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b0a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b0a8:	9b00      	ldr	r3, [sp, #0]
 801b0aa:	05d8      	lsls	r0, r3, #23
 801b0ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b0b0:	d516      	bpl.n	801b0e0 <_dtoa_r+0x380>
 801b0b2:	4bb2      	ldr	r3, [pc, #712]	; (801b37c <_dtoa_r+0x61c>)
 801b0b4:	ec51 0b19 	vmov	r0, r1, d9
 801b0b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b0bc:	f7fd fc36 	bl	801892c <__aeabi_ddiv>
 801b0c0:	f007 070f 	and.w	r7, r7, #15
 801b0c4:	4682      	mov	sl, r0
 801b0c6:	468b      	mov	fp, r1
 801b0c8:	2503      	movs	r5, #3
 801b0ca:	4eac      	ldr	r6, [pc, #688]	; (801b37c <_dtoa_r+0x61c>)
 801b0cc:	b957      	cbnz	r7, 801b0e4 <_dtoa_r+0x384>
 801b0ce:	4642      	mov	r2, r8
 801b0d0:	464b      	mov	r3, r9
 801b0d2:	4650      	mov	r0, sl
 801b0d4:	4659      	mov	r1, fp
 801b0d6:	f7fd fc29 	bl	801892c <__aeabi_ddiv>
 801b0da:	4682      	mov	sl, r0
 801b0dc:	468b      	mov	fp, r1
 801b0de:	e028      	b.n	801b132 <_dtoa_r+0x3d2>
 801b0e0:	2502      	movs	r5, #2
 801b0e2:	e7f2      	b.n	801b0ca <_dtoa_r+0x36a>
 801b0e4:	07f9      	lsls	r1, r7, #31
 801b0e6:	d508      	bpl.n	801b0fa <_dtoa_r+0x39a>
 801b0e8:	4640      	mov	r0, r8
 801b0ea:	4649      	mov	r1, r9
 801b0ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b0f0:	f7fd faf2 	bl	80186d8 <__aeabi_dmul>
 801b0f4:	3501      	adds	r5, #1
 801b0f6:	4680      	mov	r8, r0
 801b0f8:	4689      	mov	r9, r1
 801b0fa:	107f      	asrs	r7, r7, #1
 801b0fc:	3608      	adds	r6, #8
 801b0fe:	e7e5      	b.n	801b0cc <_dtoa_r+0x36c>
 801b100:	f000 809b 	beq.w	801b23a <_dtoa_r+0x4da>
 801b104:	9b00      	ldr	r3, [sp, #0]
 801b106:	4f9d      	ldr	r7, [pc, #628]	; (801b37c <_dtoa_r+0x61c>)
 801b108:	425e      	negs	r6, r3
 801b10a:	4b9b      	ldr	r3, [pc, #620]	; (801b378 <_dtoa_r+0x618>)
 801b10c:	f006 020f 	and.w	r2, r6, #15
 801b110:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b118:	ec51 0b19 	vmov	r0, r1, d9
 801b11c:	f7fd fadc 	bl	80186d8 <__aeabi_dmul>
 801b120:	1136      	asrs	r6, r6, #4
 801b122:	4682      	mov	sl, r0
 801b124:	468b      	mov	fp, r1
 801b126:	2300      	movs	r3, #0
 801b128:	2502      	movs	r5, #2
 801b12a:	2e00      	cmp	r6, #0
 801b12c:	d17a      	bne.n	801b224 <_dtoa_r+0x4c4>
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d1d3      	bne.n	801b0da <_dtoa_r+0x37a>
 801b132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b134:	2b00      	cmp	r3, #0
 801b136:	f000 8082 	beq.w	801b23e <_dtoa_r+0x4de>
 801b13a:	4b91      	ldr	r3, [pc, #580]	; (801b380 <_dtoa_r+0x620>)
 801b13c:	2200      	movs	r2, #0
 801b13e:	4650      	mov	r0, sl
 801b140:	4659      	mov	r1, fp
 801b142:	f7fd fd3b 	bl	8018bbc <__aeabi_dcmplt>
 801b146:	2800      	cmp	r0, #0
 801b148:	d079      	beq.n	801b23e <_dtoa_r+0x4de>
 801b14a:	9b03      	ldr	r3, [sp, #12]
 801b14c:	2b00      	cmp	r3, #0
 801b14e:	d076      	beq.n	801b23e <_dtoa_r+0x4de>
 801b150:	9b02      	ldr	r3, [sp, #8]
 801b152:	2b00      	cmp	r3, #0
 801b154:	dd36      	ble.n	801b1c4 <_dtoa_r+0x464>
 801b156:	9b00      	ldr	r3, [sp, #0]
 801b158:	4650      	mov	r0, sl
 801b15a:	4659      	mov	r1, fp
 801b15c:	1e5f      	subs	r7, r3, #1
 801b15e:	2200      	movs	r2, #0
 801b160:	4b88      	ldr	r3, [pc, #544]	; (801b384 <_dtoa_r+0x624>)
 801b162:	f7fd fab9 	bl	80186d8 <__aeabi_dmul>
 801b166:	9e02      	ldr	r6, [sp, #8]
 801b168:	4682      	mov	sl, r0
 801b16a:	468b      	mov	fp, r1
 801b16c:	3501      	adds	r5, #1
 801b16e:	4628      	mov	r0, r5
 801b170:	f7fd fa48 	bl	8018604 <__aeabi_i2d>
 801b174:	4652      	mov	r2, sl
 801b176:	465b      	mov	r3, fp
 801b178:	f7fd faae 	bl	80186d8 <__aeabi_dmul>
 801b17c:	4b82      	ldr	r3, [pc, #520]	; (801b388 <_dtoa_r+0x628>)
 801b17e:	2200      	movs	r2, #0
 801b180:	f7fd f8f4 	bl	801836c <__adddf3>
 801b184:	46d0      	mov	r8, sl
 801b186:	46d9      	mov	r9, fp
 801b188:	4682      	mov	sl, r0
 801b18a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b18e:	2e00      	cmp	r6, #0
 801b190:	d158      	bne.n	801b244 <_dtoa_r+0x4e4>
 801b192:	4b7e      	ldr	r3, [pc, #504]	; (801b38c <_dtoa_r+0x62c>)
 801b194:	2200      	movs	r2, #0
 801b196:	4640      	mov	r0, r8
 801b198:	4649      	mov	r1, r9
 801b19a:	f7fd f8e5 	bl	8018368 <__aeabi_dsub>
 801b19e:	4652      	mov	r2, sl
 801b1a0:	465b      	mov	r3, fp
 801b1a2:	4680      	mov	r8, r0
 801b1a4:	4689      	mov	r9, r1
 801b1a6:	f7fd fd27 	bl	8018bf8 <__aeabi_dcmpgt>
 801b1aa:	2800      	cmp	r0, #0
 801b1ac:	f040 8295 	bne.w	801b6da <_dtoa_r+0x97a>
 801b1b0:	4652      	mov	r2, sl
 801b1b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b1b6:	4640      	mov	r0, r8
 801b1b8:	4649      	mov	r1, r9
 801b1ba:	f7fd fcff 	bl	8018bbc <__aeabi_dcmplt>
 801b1be:	2800      	cmp	r0, #0
 801b1c0:	f040 8289 	bne.w	801b6d6 <_dtoa_r+0x976>
 801b1c4:	ec5b ab19 	vmov	sl, fp, d9
 801b1c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	f2c0 8148 	blt.w	801b460 <_dtoa_r+0x700>
 801b1d0:	9a00      	ldr	r2, [sp, #0]
 801b1d2:	2a0e      	cmp	r2, #14
 801b1d4:	f300 8144 	bgt.w	801b460 <_dtoa_r+0x700>
 801b1d8:	4b67      	ldr	r3, [pc, #412]	; (801b378 <_dtoa_r+0x618>)
 801b1da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b1de:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b1e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	f280 80d5 	bge.w	801b394 <_dtoa_r+0x634>
 801b1ea:	9b03      	ldr	r3, [sp, #12]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	f300 80d1 	bgt.w	801b394 <_dtoa_r+0x634>
 801b1f2:	f040 826f 	bne.w	801b6d4 <_dtoa_r+0x974>
 801b1f6:	4b65      	ldr	r3, [pc, #404]	; (801b38c <_dtoa_r+0x62c>)
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	4640      	mov	r0, r8
 801b1fc:	4649      	mov	r1, r9
 801b1fe:	f7fd fa6b 	bl	80186d8 <__aeabi_dmul>
 801b202:	4652      	mov	r2, sl
 801b204:	465b      	mov	r3, fp
 801b206:	f7fd fced 	bl	8018be4 <__aeabi_dcmpge>
 801b20a:	9e03      	ldr	r6, [sp, #12]
 801b20c:	4637      	mov	r7, r6
 801b20e:	2800      	cmp	r0, #0
 801b210:	f040 8245 	bne.w	801b69e <_dtoa_r+0x93e>
 801b214:	9d01      	ldr	r5, [sp, #4]
 801b216:	2331      	movs	r3, #49	; 0x31
 801b218:	f805 3b01 	strb.w	r3, [r5], #1
 801b21c:	9b00      	ldr	r3, [sp, #0]
 801b21e:	3301      	adds	r3, #1
 801b220:	9300      	str	r3, [sp, #0]
 801b222:	e240      	b.n	801b6a6 <_dtoa_r+0x946>
 801b224:	07f2      	lsls	r2, r6, #31
 801b226:	d505      	bpl.n	801b234 <_dtoa_r+0x4d4>
 801b228:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b22c:	f7fd fa54 	bl	80186d8 <__aeabi_dmul>
 801b230:	3501      	adds	r5, #1
 801b232:	2301      	movs	r3, #1
 801b234:	1076      	asrs	r6, r6, #1
 801b236:	3708      	adds	r7, #8
 801b238:	e777      	b.n	801b12a <_dtoa_r+0x3ca>
 801b23a:	2502      	movs	r5, #2
 801b23c:	e779      	b.n	801b132 <_dtoa_r+0x3d2>
 801b23e:	9f00      	ldr	r7, [sp, #0]
 801b240:	9e03      	ldr	r6, [sp, #12]
 801b242:	e794      	b.n	801b16e <_dtoa_r+0x40e>
 801b244:	9901      	ldr	r1, [sp, #4]
 801b246:	4b4c      	ldr	r3, [pc, #304]	; (801b378 <_dtoa_r+0x618>)
 801b248:	4431      	add	r1, r6
 801b24a:	910d      	str	r1, [sp, #52]	; 0x34
 801b24c:	9908      	ldr	r1, [sp, #32]
 801b24e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b252:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b256:	2900      	cmp	r1, #0
 801b258:	d043      	beq.n	801b2e2 <_dtoa_r+0x582>
 801b25a:	494d      	ldr	r1, [pc, #308]	; (801b390 <_dtoa_r+0x630>)
 801b25c:	2000      	movs	r0, #0
 801b25e:	f7fd fb65 	bl	801892c <__aeabi_ddiv>
 801b262:	4652      	mov	r2, sl
 801b264:	465b      	mov	r3, fp
 801b266:	f7fd f87f 	bl	8018368 <__aeabi_dsub>
 801b26a:	9d01      	ldr	r5, [sp, #4]
 801b26c:	4682      	mov	sl, r0
 801b26e:	468b      	mov	fp, r1
 801b270:	4649      	mov	r1, r9
 801b272:	4640      	mov	r0, r8
 801b274:	f7fd fce0 	bl	8018c38 <__aeabi_d2iz>
 801b278:	4606      	mov	r6, r0
 801b27a:	f7fd f9c3 	bl	8018604 <__aeabi_i2d>
 801b27e:	4602      	mov	r2, r0
 801b280:	460b      	mov	r3, r1
 801b282:	4640      	mov	r0, r8
 801b284:	4649      	mov	r1, r9
 801b286:	f7fd f86f 	bl	8018368 <__aeabi_dsub>
 801b28a:	3630      	adds	r6, #48	; 0x30
 801b28c:	f805 6b01 	strb.w	r6, [r5], #1
 801b290:	4652      	mov	r2, sl
 801b292:	465b      	mov	r3, fp
 801b294:	4680      	mov	r8, r0
 801b296:	4689      	mov	r9, r1
 801b298:	f7fd fc90 	bl	8018bbc <__aeabi_dcmplt>
 801b29c:	2800      	cmp	r0, #0
 801b29e:	d163      	bne.n	801b368 <_dtoa_r+0x608>
 801b2a0:	4642      	mov	r2, r8
 801b2a2:	464b      	mov	r3, r9
 801b2a4:	4936      	ldr	r1, [pc, #216]	; (801b380 <_dtoa_r+0x620>)
 801b2a6:	2000      	movs	r0, #0
 801b2a8:	f7fd f85e 	bl	8018368 <__aeabi_dsub>
 801b2ac:	4652      	mov	r2, sl
 801b2ae:	465b      	mov	r3, fp
 801b2b0:	f7fd fc84 	bl	8018bbc <__aeabi_dcmplt>
 801b2b4:	2800      	cmp	r0, #0
 801b2b6:	f040 80b5 	bne.w	801b424 <_dtoa_r+0x6c4>
 801b2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2bc:	429d      	cmp	r5, r3
 801b2be:	d081      	beq.n	801b1c4 <_dtoa_r+0x464>
 801b2c0:	4b30      	ldr	r3, [pc, #192]	; (801b384 <_dtoa_r+0x624>)
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	4650      	mov	r0, sl
 801b2c6:	4659      	mov	r1, fp
 801b2c8:	f7fd fa06 	bl	80186d8 <__aeabi_dmul>
 801b2cc:	4b2d      	ldr	r3, [pc, #180]	; (801b384 <_dtoa_r+0x624>)
 801b2ce:	4682      	mov	sl, r0
 801b2d0:	468b      	mov	fp, r1
 801b2d2:	4640      	mov	r0, r8
 801b2d4:	4649      	mov	r1, r9
 801b2d6:	2200      	movs	r2, #0
 801b2d8:	f7fd f9fe 	bl	80186d8 <__aeabi_dmul>
 801b2dc:	4680      	mov	r8, r0
 801b2de:	4689      	mov	r9, r1
 801b2e0:	e7c6      	b.n	801b270 <_dtoa_r+0x510>
 801b2e2:	4650      	mov	r0, sl
 801b2e4:	4659      	mov	r1, fp
 801b2e6:	f7fd f9f7 	bl	80186d8 <__aeabi_dmul>
 801b2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b2ec:	9d01      	ldr	r5, [sp, #4]
 801b2ee:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2f0:	4682      	mov	sl, r0
 801b2f2:	468b      	mov	fp, r1
 801b2f4:	4649      	mov	r1, r9
 801b2f6:	4640      	mov	r0, r8
 801b2f8:	f7fd fc9e 	bl	8018c38 <__aeabi_d2iz>
 801b2fc:	4606      	mov	r6, r0
 801b2fe:	f7fd f981 	bl	8018604 <__aeabi_i2d>
 801b302:	3630      	adds	r6, #48	; 0x30
 801b304:	4602      	mov	r2, r0
 801b306:	460b      	mov	r3, r1
 801b308:	4640      	mov	r0, r8
 801b30a:	4649      	mov	r1, r9
 801b30c:	f7fd f82c 	bl	8018368 <__aeabi_dsub>
 801b310:	f805 6b01 	strb.w	r6, [r5], #1
 801b314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b316:	429d      	cmp	r5, r3
 801b318:	4680      	mov	r8, r0
 801b31a:	4689      	mov	r9, r1
 801b31c:	f04f 0200 	mov.w	r2, #0
 801b320:	d124      	bne.n	801b36c <_dtoa_r+0x60c>
 801b322:	4b1b      	ldr	r3, [pc, #108]	; (801b390 <_dtoa_r+0x630>)
 801b324:	4650      	mov	r0, sl
 801b326:	4659      	mov	r1, fp
 801b328:	f7fd f820 	bl	801836c <__adddf3>
 801b32c:	4602      	mov	r2, r0
 801b32e:	460b      	mov	r3, r1
 801b330:	4640      	mov	r0, r8
 801b332:	4649      	mov	r1, r9
 801b334:	f7fd fc60 	bl	8018bf8 <__aeabi_dcmpgt>
 801b338:	2800      	cmp	r0, #0
 801b33a:	d173      	bne.n	801b424 <_dtoa_r+0x6c4>
 801b33c:	4652      	mov	r2, sl
 801b33e:	465b      	mov	r3, fp
 801b340:	4913      	ldr	r1, [pc, #76]	; (801b390 <_dtoa_r+0x630>)
 801b342:	2000      	movs	r0, #0
 801b344:	f7fd f810 	bl	8018368 <__aeabi_dsub>
 801b348:	4602      	mov	r2, r0
 801b34a:	460b      	mov	r3, r1
 801b34c:	4640      	mov	r0, r8
 801b34e:	4649      	mov	r1, r9
 801b350:	f7fd fc34 	bl	8018bbc <__aeabi_dcmplt>
 801b354:	2800      	cmp	r0, #0
 801b356:	f43f af35 	beq.w	801b1c4 <_dtoa_r+0x464>
 801b35a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b35c:	1e6b      	subs	r3, r5, #1
 801b35e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b360:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b364:	2b30      	cmp	r3, #48	; 0x30
 801b366:	d0f8      	beq.n	801b35a <_dtoa_r+0x5fa>
 801b368:	9700      	str	r7, [sp, #0]
 801b36a:	e049      	b.n	801b400 <_dtoa_r+0x6a0>
 801b36c:	4b05      	ldr	r3, [pc, #20]	; (801b384 <_dtoa_r+0x624>)
 801b36e:	f7fd f9b3 	bl	80186d8 <__aeabi_dmul>
 801b372:	4680      	mov	r8, r0
 801b374:	4689      	mov	r9, r1
 801b376:	e7bd      	b.n	801b2f4 <_dtoa_r+0x594>
 801b378:	08051c20 	.word	0x08051c20
 801b37c:	08051bf8 	.word	0x08051bf8
 801b380:	3ff00000 	.word	0x3ff00000
 801b384:	40240000 	.word	0x40240000
 801b388:	401c0000 	.word	0x401c0000
 801b38c:	40140000 	.word	0x40140000
 801b390:	3fe00000 	.word	0x3fe00000
 801b394:	9d01      	ldr	r5, [sp, #4]
 801b396:	4656      	mov	r6, sl
 801b398:	465f      	mov	r7, fp
 801b39a:	4642      	mov	r2, r8
 801b39c:	464b      	mov	r3, r9
 801b39e:	4630      	mov	r0, r6
 801b3a0:	4639      	mov	r1, r7
 801b3a2:	f7fd fac3 	bl	801892c <__aeabi_ddiv>
 801b3a6:	f7fd fc47 	bl	8018c38 <__aeabi_d2iz>
 801b3aa:	4682      	mov	sl, r0
 801b3ac:	f7fd f92a 	bl	8018604 <__aeabi_i2d>
 801b3b0:	4642      	mov	r2, r8
 801b3b2:	464b      	mov	r3, r9
 801b3b4:	f7fd f990 	bl	80186d8 <__aeabi_dmul>
 801b3b8:	4602      	mov	r2, r0
 801b3ba:	460b      	mov	r3, r1
 801b3bc:	4630      	mov	r0, r6
 801b3be:	4639      	mov	r1, r7
 801b3c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b3c4:	f7fc ffd0 	bl	8018368 <__aeabi_dsub>
 801b3c8:	f805 6b01 	strb.w	r6, [r5], #1
 801b3cc:	9e01      	ldr	r6, [sp, #4]
 801b3ce:	9f03      	ldr	r7, [sp, #12]
 801b3d0:	1bae      	subs	r6, r5, r6
 801b3d2:	42b7      	cmp	r7, r6
 801b3d4:	4602      	mov	r2, r0
 801b3d6:	460b      	mov	r3, r1
 801b3d8:	d135      	bne.n	801b446 <_dtoa_r+0x6e6>
 801b3da:	f7fc ffc7 	bl	801836c <__adddf3>
 801b3de:	4642      	mov	r2, r8
 801b3e0:	464b      	mov	r3, r9
 801b3e2:	4606      	mov	r6, r0
 801b3e4:	460f      	mov	r7, r1
 801b3e6:	f7fd fc07 	bl	8018bf8 <__aeabi_dcmpgt>
 801b3ea:	b9d0      	cbnz	r0, 801b422 <_dtoa_r+0x6c2>
 801b3ec:	4642      	mov	r2, r8
 801b3ee:	464b      	mov	r3, r9
 801b3f0:	4630      	mov	r0, r6
 801b3f2:	4639      	mov	r1, r7
 801b3f4:	f7fd fbd8 	bl	8018ba8 <__aeabi_dcmpeq>
 801b3f8:	b110      	cbz	r0, 801b400 <_dtoa_r+0x6a0>
 801b3fa:	f01a 0f01 	tst.w	sl, #1
 801b3fe:	d110      	bne.n	801b422 <_dtoa_r+0x6c2>
 801b400:	4620      	mov	r0, r4
 801b402:	ee18 1a10 	vmov	r1, s16
 801b406:	f000 fe75 	bl	801c0f4 <_Bfree>
 801b40a:	2300      	movs	r3, #0
 801b40c:	9800      	ldr	r0, [sp, #0]
 801b40e:	702b      	strb	r3, [r5, #0]
 801b410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b412:	3001      	adds	r0, #1
 801b414:	6018      	str	r0, [r3, #0]
 801b416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b418:	2b00      	cmp	r3, #0
 801b41a:	f43f acf1 	beq.w	801ae00 <_dtoa_r+0xa0>
 801b41e:	601d      	str	r5, [r3, #0]
 801b420:	e4ee      	b.n	801ae00 <_dtoa_r+0xa0>
 801b422:	9f00      	ldr	r7, [sp, #0]
 801b424:	462b      	mov	r3, r5
 801b426:	461d      	mov	r5, r3
 801b428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b42c:	2a39      	cmp	r2, #57	; 0x39
 801b42e:	d106      	bne.n	801b43e <_dtoa_r+0x6de>
 801b430:	9a01      	ldr	r2, [sp, #4]
 801b432:	429a      	cmp	r2, r3
 801b434:	d1f7      	bne.n	801b426 <_dtoa_r+0x6c6>
 801b436:	9901      	ldr	r1, [sp, #4]
 801b438:	2230      	movs	r2, #48	; 0x30
 801b43a:	3701      	adds	r7, #1
 801b43c:	700a      	strb	r2, [r1, #0]
 801b43e:	781a      	ldrb	r2, [r3, #0]
 801b440:	3201      	adds	r2, #1
 801b442:	701a      	strb	r2, [r3, #0]
 801b444:	e790      	b.n	801b368 <_dtoa_r+0x608>
 801b446:	4ba6      	ldr	r3, [pc, #664]	; (801b6e0 <_dtoa_r+0x980>)
 801b448:	2200      	movs	r2, #0
 801b44a:	f7fd f945 	bl	80186d8 <__aeabi_dmul>
 801b44e:	2200      	movs	r2, #0
 801b450:	2300      	movs	r3, #0
 801b452:	4606      	mov	r6, r0
 801b454:	460f      	mov	r7, r1
 801b456:	f7fd fba7 	bl	8018ba8 <__aeabi_dcmpeq>
 801b45a:	2800      	cmp	r0, #0
 801b45c:	d09d      	beq.n	801b39a <_dtoa_r+0x63a>
 801b45e:	e7cf      	b.n	801b400 <_dtoa_r+0x6a0>
 801b460:	9a08      	ldr	r2, [sp, #32]
 801b462:	2a00      	cmp	r2, #0
 801b464:	f000 80d7 	beq.w	801b616 <_dtoa_r+0x8b6>
 801b468:	9a06      	ldr	r2, [sp, #24]
 801b46a:	2a01      	cmp	r2, #1
 801b46c:	f300 80ba 	bgt.w	801b5e4 <_dtoa_r+0x884>
 801b470:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b472:	2a00      	cmp	r2, #0
 801b474:	f000 80b2 	beq.w	801b5dc <_dtoa_r+0x87c>
 801b478:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b47c:	9e07      	ldr	r6, [sp, #28]
 801b47e:	9d04      	ldr	r5, [sp, #16]
 801b480:	9a04      	ldr	r2, [sp, #16]
 801b482:	441a      	add	r2, r3
 801b484:	9204      	str	r2, [sp, #16]
 801b486:	9a05      	ldr	r2, [sp, #20]
 801b488:	2101      	movs	r1, #1
 801b48a:	441a      	add	r2, r3
 801b48c:	4620      	mov	r0, r4
 801b48e:	9205      	str	r2, [sp, #20]
 801b490:	f000 ff32 	bl	801c2f8 <__i2b>
 801b494:	4607      	mov	r7, r0
 801b496:	2d00      	cmp	r5, #0
 801b498:	dd0c      	ble.n	801b4b4 <_dtoa_r+0x754>
 801b49a:	9b05      	ldr	r3, [sp, #20]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	dd09      	ble.n	801b4b4 <_dtoa_r+0x754>
 801b4a0:	42ab      	cmp	r3, r5
 801b4a2:	9a04      	ldr	r2, [sp, #16]
 801b4a4:	bfa8      	it	ge
 801b4a6:	462b      	movge	r3, r5
 801b4a8:	1ad2      	subs	r2, r2, r3
 801b4aa:	9204      	str	r2, [sp, #16]
 801b4ac:	9a05      	ldr	r2, [sp, #20]
 801b4ae:	1aed      	subs	r5, r5, r3
 801b4b0:	1ad3      	subs	r3, r2, r3
 801b4b2:	9305      	str	r3, [sp, #20]
 801b4b4:	9b07      	ldr	r3, [sp, #28]
 801b4b6:	b31b      	cbz	r3, 801b500 <_dtoa_r+0x7a0>
 801b4b8:	9b08      	ldr	r3, [sp, #32]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	f000 80af 	beq.w	801b61e <_dtoa_r+0x8be>
 801b4c0:	2e00      	cmp	r6, #0
 801b4c2:	dd13      	ble.n	801b4ec <_dtoa_r+0x78c>
 801b4c4:	4639      	mov	r1, r7
 801b4c6:	4632      	mov	r2, r6
 801b4c8:	4620      	mov	r0, r4
 801b4ca:	f000 ffd5 	bl	801c478 <__pow5mult>
 801b4ce:	ee18 2a10 	vmov	r2, s16
 801b4d2:	4601      	mov	r1, r0
 801b4d4:	4607      	mov	r7, r0
 801b4d6:	4620      	mov	r0, r4
 801b4d8:	f000 ff24 	bl	801c324 <__multiply>
 801b4dc:	ee18 1a10 	vmov	r1, s16
 801b4e0:	4680      	mov	r8, r0
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f000 fe06 	bl	801c0f4 <_Bfree>
 801b4e8:	ee08 8a10 	vmov	s16, r8
 801b4ec:	9b07      	ldr	r3, [sp, #28]
 801b4ee:	1b9a      	subs	r2, r3, r6
 801b4f0:	d006      	beq.n	801b500 <_dtoa_r+0x7a0>
 801b4f2:	ee18 1a10 	vmov	r1, s16
 801b4f6:	4620      	mov	r0, r4
 801b4f8:	f000 ffbe 	bl	801c478 <__pow5mult>
 801b4fc:	ee08 0a10 	vmov	s16, r0
 801b500:	2101      	movs	r1, #1
 801b502:	4620      	mov	r0, r4
 801b504:	f000 fef8 	bl	801c2f8 <__i2b>
 801b508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	4606      	mov	r6, r0
 801b50e:	f340 8088 	ble.w	801b622 <_dtoa_r+0x8c2>
 801b512:	461a      	mov	r2, r3
 801b514:	4601      	mov	r1, r0
 801b516:	4620      	mov	r0, r4
 801b518:	f000 ffae 	bl	801c478 <__pow5mult>
 801b51c:	9b06      	ldr	r3, [sp, #24]
 801b51e:	2b01      	cmp	r3, #1
 801b520:	4606      	mov	r6, r0
 801b522:	f340 8081 	ble.w	801b628 <_dtoa_r+0x8c8>
 801b526:	f04f 0800 	mov.w	r8, #0
 801b52a:	6933      	ldr	r3, [r6, #16]
 801b52c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b530:	6918      	ldr	r0, [r3, #16]
 801b532:	f000 fe91 	bl	801c258 <__hi0bits>
 801b536:	f1c0 0020 	rsb	r0, r0, #32
 801b53a:	9b05      	ldr	r3, [sp, #20]
 801b53c:	4418      	add	r0, r3
 801b53e:	f010 001f 	ands.w	r0, r0, #31
 801b542:	f000 8092 	beq.w	801b66a <_dtoa_r+0x90a>
 801b546:	f1c0 0320 	rsb	r3, r0, #32
 801b54a:	2b04      	cmp	r3, #4
 801b54c:	f340 808a 	ble.w	801b664 <_dtoa_r+0x904>
 801b550:	f1c0 001c 	rsb	r0, r0, #28
 801b554:	9b04      	ldr	r3, [sp, #16]
 801b556:	4403      	add	r3, r0
 801b558:	9304      	str	r3, [sp, #16]
 801b55a:	9b05      	ldr	r3, [sp, #20]
 801b55c:	4403      	add	r3, r0
 801b55e:	4405      	add	r5, r0
 801b560:	9305      	str	r3, [sp, #20]
 801b562:	9b04      	ldr	r3, [sp, #16]
 801b564:	2b00      	cmp	r3, #0
 801b566:	dd07      	ble.n	801b578 <_dtoa_r+0x818>
 801b568:	ee18 1a10 	vmov	r1, s16
 801b56c:	461a      	mov	r2, r3
 801b56e:	4620      	mov	r0, r4
 801b570:	f000 ffdc 	bl	801c52c <__lshift>
 801b574:	ee08 0a10 	vmov	s16, r0
 801b578:	9b05      	ldr	r3, [sp, #20]
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	dd05      	ble.n	801b58a <_dtoa_r+0x82a>
 801b57e:	4631      	mov	r1, r6
 801b580:	461a      	mov	r2, r3
 801b582:	4620      	mov	r0, r4
 801b584:	f000 ffd2 	bl	801c52c <__lshift>
 801b588:	4606      	mov	r6, r0
 801b58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d06e      	beq.n	801b66e <_dtoa_r+0x90e>
 801b590:	ee18 0a10 	vmov	r0, s16
 801b594:	4631      	mov	r1, r6
 801b596:	f001 f839 	bl	801c60c <__mcmp>
 801b59a:	2800      	cmp	r0, #0
 801b59c:	da67      	bge.n	801b66e <_dtoa_r+0x90e>
 801b59e:	9b00      	ldr	r3, [sp, #0]
 801b5a0:	3b01      	subs	r3, #1
 801b5a2:	ee18 1a10 	vmov	r1, s16
 801b5a6:	9300      	str	r3, [sp, #0]
 801b5a8:	220a      	movs	r2, #10
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	f000 fdc3 	bl	801c138 <__multadd>
 801b5b2:	9b08      	ldr	r3, [sp, #32]
 801b5b4:	ee08 0a10 	vmov	s16, r0
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	f000 81b1 	beq.w	801b920 <_dtoa_r+0xbc0>
 801b5be:	2300      	movs	r3, #0
 801b5c0:	4639      	mov	r1, r7
 801b5c2:	220a      	movs	r2, #10
 801b5c4:	4620      	mov	r0, r4
 801b5c6:	f000 fdb7 	bl	801c138 <__multadd>
 801b5ca:	9b02      	ldr	r3, [sp, #8]
 801b5cc:	2b00      	cmp	r3, #0
 801b5ce:	4607      	mov	r7, r0
 801b5d0:	f300 808e 	bgt.w	801b6f0 <_dtoa_r+0x990>
 801b5d4:	9b06      	ldr	r3, [sp, #24]
 801b5d6:	2b02      	cmp	r3, #2
 801b5d8:	dc51      	bgt.n	801b67e <_dtoa_r+0x91e>
 801b5da:	e089      	b.n	801b6f0 <_dtoa_r+0x990>
 801b5dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b5de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b5e2:	e74b      	b.n	801b47c <_dtoa_r+0x71c>
 801b5e4:	9b03      	ldr	r3, [sp, #12]
 801b5e6:	1e5e      	subs	r6, r3, #1
 801b5e8:	9b07      	ldr	r3, [sp, #28]
 801b5ea:	42b3      	cmp	r3, r6
 801b5ec:	bfbf      	itttt	lt
 801b5ee:	9b07      	ldrlt	r3, [sp, #28]
 801b5f0:	9607      	strlt	r6, [sp, #28]
 801b5f2:	1af2      	sublt	r2, r6, r3
 801b5f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b5f6:	bfb6      	itet	lt
 801b5f8:	189b      	addlt	r3, r3, r2
 801b5fa:	1b9e      	subge	r6, r3, r6
 801b5fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b5fe:	9b03      	ldr	r3, [sp, #12]
 801b600:	bfb8      	it	lt
 801b602:	2600      	movlt	r6, #0
 801b604:	2b00      	cmp	r3, #0
 801b606:	bfb7      	itett	lt
 801b608:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b60c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b610:	1a9d      	sublt	r5, r3, r2
 801b612:	2300      	movlt	r3, #0
 801b614:	e734      	b.n	801b480 <_dtoa_r+0x720>
 801b616:	9e07      	ldr	r6, [sp, #28]
 801b618:	9d04      	ldr	r5, [sp, #16]
 801b61a:	9f08      	ldr	r7, [sp, #32]
 801b61c:	e73b      	b.n	801b496 <_dtoa_r+0x736>
 801b61e:	9a07      	ldr	r2, [sp, #28]
 801b620:	e767      	b.n	801b4f2 <_dtoa_r+0x792>
 801b622:	9b06      	ldr	r3, [sp, #24]
 801b624:	2b01      	cmp	r3, #1
 801b626:	dc18      	bgt.n	801b65a <_dtoa_r+0x8fa>
 801b628:	f1ba 0f00 	cmp.w	sl, #0
 801b62c:	d115      	bne.n	801b65a <_dtoa_r+0x8fa>
 801b62e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b632:	b993      	cbnz	r3, 801b65a <_dtoa_r+0x8fa>
 801b634:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b638:	0d1b      	lsrs	r3, r3, #20
 801b63a:	051b      	lsls	r3, r3, #20
 801b63c:	b183      	cbz	r3, 801b660 <_dtoa_r+0x900>
 801b63e:	9b04      	ldr	r3, [sp, #16]
 801b640:	3301      	adds	r3, #1
 801b642:	9304      	str	r3, [sp, #16]
 801b644:	9b05      	ldr	r3, [sp, #20]
 801b646:	3301      	adds	r3, #1
 801b648:	9305      	str	r3, [sp, #20]
 801b64a:	f04f 0801 	mov.w	r8, #1
 801b64e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b650:	2b00      	cmp	r3, #0
 801b652:	f47f af6a 	bne.w	801b52a <_dtoa_r+0x7ca>
 801b656:	2001      	movs	r0, #1
 801b658:	e76f      	b.n	801b53a <_dtoa_r+0x7da>
 801b65a:	f04f 0800 	mov.w	r8, #0
 801b65e:	e7f6      	b.n	801b64e <_dtoa_r+0x8ee>
 801b660:	4698      	mov	r8, r3
 801b662:	e7f4      	b.n	801b64e <_dtoa_r+0x8ee>
 801b664:	f43f af7d 	beq.w	801b562 <_dtoa_r+0x802>
 801b668:	4618      	mov	r0, r3
 801b66a:	301c      	adds	r0, #28
 801b66c:	e772      	b.n	801b554 <_dtoa_r+0x7f4>
 801b66e:	9b03      	ldr	r3, [sp, #12]
 801b670:	2b00      	cmp	r3, #0
 801b672:	dc37      	bgt.n	801b6e4 <_dtoa_r+0x984>
 801b674:	9b06      	ldr	r3, [sp, #24]
 801b676:	2b02      	cmp	r3, #2
 801b678:	dd34      	ble.n	801b6e4 <_dtoa_r+0x984>
 801b67a:	9b03      	ldr	r3, [sp, #12]
 801b67c:	9302      	str	r3, [sp, #8]
 801b67e:	9b02      	ldr	r3, [sp, #8]
 801b680:	b96b      	cbnz	r3, 801b69e <_dtoa_r+0x93e>
 801b682:	4631      	mov	r1, r6
 801b684:	2205      	movs	r2, #5
 801b686:	4620      	mov	r0, r4
 801b688:	f000 fd56 	bl	801c138 <__multadd>
 801b68c:	4601      	mov	r1, r0
 801b68e:	4606      	mov	r6, r0
 801b690:	ee18 0a10 	vmov	r0, s16
 801b694:	f000 ffba 	bl	801c60c <__mcmp>
 801b698:	2800      	cmp	r0, #0
 801b69a:	f73f adbb 	bgt.w	801b214 <_dtoa_r+0x4b4>
 801b69e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b6a0:	9d01      	ldr	r5, [sp, #4]
 801b6a2:	43db      	mvns	r3, r3
 801b6a4:	9300      	str	r3, [sp, #0]
 801b6a6:	f04f 0800 	mov.w	r8, #0
 801b6aa:	4631      	mov	r1, r6
 801b6ac:	4620      	mov	r0, r4
 801b6ae:	f000 fd21 	bl	801c0f4 <_Bfree>
 801b6b2:	2f00      	cmp	r7, #0
 801b6b4:	f43f aea4 	beq.w	801b400 <_dtoa_r+0x6a0>
 801b6b8:	f1b8 0f00 	cmp.w	r8, #0
 801b6bc:	d005      	beq.n	801b6ca <_dtoa_r+0x96a>
 801b6be:	45b8      	cmp	r8, r7
 801b6c0:	d003      	beq.n	801b6ca <_dtoa_r+0x96a>
 801b6c2:	4641      	mov	r1, r8
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	f000 fd15 	bl	801c0f4 <_Bfree>
 801b6ca:	4639      	mov	r1, r7
 801b6cc:	4620      	mov	r0, r4
 801b6ce:	f000 fd11 	bl	801c0f4 <_Bfree>
 801b6d2:	e695      	b.n	801b400 <_dtoa_r+0x6a0>
 801b6d4:	2600      	movs	r6, #0
 801b6d6:	4637      	mov	r7, r6
 801b6d8:	e7e1      	b.n	801b69e <_dtoa_r+0x93e>
 801b6da:	9700      	str	r7, [sp, #0]
 801b6dc:	4637      	mov	r7, r6
 801b6de:	e599      	b.n	801b214 <_dtoa_r+0x4b4>
 801b6e0:	40240000 	.word	0x40240000
 801b6e4:	9b08      	ldr	r3, [sp, #32]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	f000 80ca 	beq.w	801b880 <_dtoa_r+0xb20>
 801b6ec:	9b03      	ldr	r3, [sp, #12]
 801b6ee:	9302      	str	r3, [sp, #8]
 801b6f0:	2d00      	cmp	r5, #0
 801b6f2:	dd05      	ble.n	801b700 <_dtoa_r+0x9a0>
 801b6f4:	4639      	mov	r1, r7
 801b6f6:	462a      	mov	r2, r5
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	f000 ff17 	bl	801c52c <__lshift>
 801b6fe:	4607      	mov	r7, r0
 801b700:	f1b8 0f00 	cmp.w	r8, #0
 801b704:	d05b      	beq.n	801b7be <_dtoa_r+0xa5e>
 801b706:	6879      	ldr	r1, [r7, #4]
 801b708:	4620      	mov	r0, r4
 801b70a:	f000 fcb3 	bl	801c074 <_Balloc>
 801b70e:	4605      	mov	r5, r0
 801b710:	b928      	cbnz	r0, 801b71e <_dtoa_r+0x9be>
 801b712:	4b87      	ldr	r3, [pc, #540]	; (801b930 <_dtoa_r+0xbd0>)
 801b714:	4602      	mov	r2, r0
 801b716:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b71a:	f7ff bb3b 	b.w	801ad94 <_dtoa_r+0x34>
 801b71e:	693a      	ldr	r2, [r7, #16]
 801b720:	3202      	adds	r2, #2
 801b722:	0092      	lsls	r2, r2, #2
 801b724:	f107 010c 	add.w	r1, r7, #12
 801b728:	300c      	adds	r0, #12
 801b72a:	f000 fc95 	bl	801c058 <memcpy>
 801b72e:	2201      	movs	r2, #1
 801b730:	4629      	mov	r1, r5
 801b732:	4620      	mov	r0, r4
 801b734:	f000 fefa 	bl	801c52c <__lshift>
 801b738:	9b01      	ldr	r3, [sp, #4]
 801b73a:	f103 0901 	add.w	r9, r3, #1
 801b73e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b742:	4413      	add	r3, r2
 801b744:	9305      	str	r3, [sp, #20]
 801b746:	f00a 0301 	and.w	r3, sl, #1
 801b74a:	46b8      	mov	r8, r7
 801b74c:	9304      	str	r3, [sp, #16]
 801b74e:	4607      	mov	r7, r0
 801b750:	4631      	mov	r1, r6
 801b752:	ee18 0a10 	vmov	r0, s16
 801b756:	f7ff fa75 	bl	801ac44 <quorem>
 801b75a:	4641      	mov	r1, r8
 801b75c:	9002      	str	r0, [sp, #8]
 801b75e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b762:	ee18 0a10 	vmov	r0, s16
 801b766:	f000 ff51 	bl	801c60c <__mcmp>
 801b76a:	463a      	mov	r2, r7
 801b76c:	9003      	str	r0, [sp, #12]
 801b76e:	4631      	mov	r1, r6
 801b770:	4620      	mov	r0, r4
 801b772:	f000 ff67 	bl	801c644 <__mdiff>
 801b776:	68c2      	ldr	r2, [r0, #12]
 801b778:	f109 3bff 	add.w	fp, r9, #4294967295
 801b77c:	4605      	mov	r5, r0
 801b77e:	bb02      	cbnz	r2, 801b7c2 <_dtoa_r+0xa62>
 801b780:	4601      	mov	r1, r0
 801b782:	ee18 0a10 	vmov	r0, s16
 801b786:	f000 ff41 	bl	801c60c <__mcmp>
 801b78a:	4602      	mov	r2, r0
 801b78c:	4629      	mov	r1, r5
 801b78e:	4620      	mov	r0, r4
 801b790:	9207      	str	r2, [sp, #28]
 801b792:	f000 fcaf 	bl	801c0f4 <_Bfree>
 801b796:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b79a:	ea43 0102 	orr.w	r1, r3, r2
 801b79e:	9b04      	ldr	r3, [sp, #16]
 801b7a0:	430b      	orrs	r3, r1
 801b7a2:	464d      	mov	r5, r9
 801b7a4:	d10f      	bne.n	801b7c6 <_dtoa_r+0xa66>
 801b7a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b7aa:	d02a      	beq.n	801b802 <_dtoa_r+0xaa2>
 801b7ac:	9b03      	ldr	r3, [sp, #12]
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	dd02      	ble.n	801b7b8 <_dtoa_r+0xa58>
 801b7b2:	9b02      	ldr	r3, [sp, #8]
 801b7b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b7b8:	f88b a000 	strb.w	sl, [fp]
 801b7bc:	e775      	b.n	801b6aa <_dtoa_r+0x94a>
 801b7be:	4638      	mov	r0, r7
 801b7c0:	e7ba      	b.n	801b738 <_dtoa_r+0x9d8>
 801b7c2:	2201      	movs	r2, #1
 801b7c4:	e7e2      	b.n	801b78c <_dtoa_r+0xa2c>
 801b7c6:	9b03      	ldr	r3, [sp, #12]
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	db04      	blt.n	801b7d6 <_dtoa_r+0xa76>
 801b7cc:	9906      	ldr	r1, [sp, #24]
 801b7ce:	430b      	orrs	r3, r1
 801b7d0:	9904      	ldr	r1, [sp, #16]
 801b7d2:	430b      	orrs	r3, r1
 801b7d4:	d122      	bne.n	801b81c <_dtoa_r+0xabc>
 801b7d6:	2a00      	cmp	r2, #0
 801b7d8:	ddee      	ble.n	801b7b8 <_dtoa_r+0xa58>
 801b7da:	ee18 1a10 	vmov	r1, s16
 801b7de:	2201      	movs	r2, #1
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	f000 fea3 	bl	801c52c <__lshift>
 801b7e6:	4631      	mov	r1, r6
 801b7e8:	ee08 0a10 	vmov	s16, r0
 801b7ec:	f000 ff0e 	bl	801c60c <__mcmp>
 801b7f0:	2800      	cmp	r0, #0
 801b7f2:	dc03      	bgt.n	801b7fc <_dtoa_r+0xa9c>
 801b7f4:	d1e0      	bne.n	801b7b8 <_dtoa_r+0xa58>
 801b7f6:	f01a 0f01 	tst.w	sl, #1
 801b7fa:	d0dd      	beq.n	801b7b8 <_dtoa_r+0xa58>
 801b7fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b800:	d1d7      	bne.n	801b7b2 <_dtoa_r+0xa52>
 801b802:	2339      	movs	r3, #57	; 0x39
 801b804:	f88b 3000 	strb.w	r3, [fp]
 801b808:	462b      	mov	r3, r5
 801b80a:	461d      	mov	r5, r3
 801b80c:	3b01      	subs	r3, #1
 801b80e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b812:	2a39      	cmp	r2, #57	; 0x39
 801b814:	d071      	beq.n	801b8fa <_dtoa_r+0xb9a>
 801b816:	3201      	adds	r2, #1
 801b818:	701a      	strb	r2, [r3, #0]
 801b81a:	e746      	b.n	801b6aa <_dtoa_r+0x94a>
 801b81c:	2a00      	cmp	r2, #0
 801b81e:	dd07      	ble.n	801b830 <_dtoa_r+0xad0>
 801b820:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b824:	d0ed      	beq.n	801b802 <_dtoa_r+0xaa2>
 801b826:	f10a 0301 	add.w	r3, sl, #1
 801b82a:	f88b 3000 	strb.w	r3, [fp]
 801b82e:	e73c      	b.n	801b6aa <_dtoa_r+0x94a>
 801b830:	9b05      	ldr	r3, [sp, #20]
 801b832:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b836:	4599      	cmp	r9, r3
 801b838:	d047      	beq.n	801b8ca <_dtoa_r+0xb6a>
 801b83a:	ee18 1a10 	vmov	r1, s16
 801b83e:	2300      	movs	r3, #0
 801b840:	220a      	movs	r2, #10
 801b842:	4620      	mov	r0, r4
 801b844:	f000 fc78 	bl	801c138 <__multadd>
 801b848:	45b8      	cmp	r8, r7
 801b84a:	ee08 0a10 	vmov	s16, r0
 801b84e:	f04f 0300 	mov.w	r3, #0
 801b852:	f04f 020a 	mov.w	r2, #10
 801b856:	4641      	mov	r1, r8
 801b858:	4620      	mov	r0, r4
 801b85a:	d106      	bne.n	801b86a <_dtoa_r+0xb0a>
 801b85c:	f000 fc6c 	bl	801c138 <__multadd>
 801b860:	4680      	mov	r8, r0
 801b862:	4607      	mov	r7, r0
 801b864:	f109 0901 	add.w	r9, r9, #1
 801b868:	e772      	b.n	801b750 <_dtoa_r+0x9f0>
 801b86a:	f000 fc65 	bl	801c138 <__multadd>
 801b86e:	4639      	mov	r1, r7
 801b870:	4680      	mov	r8, r0
 801b872:	2300      	movs	r3, #0
 801b874:	220a      	movs	r2, #10
 801b876:	4620      	mov	r0, r4
 801b878:	f000 fc5e 	bl	801c138 <__multadd>
 801b87c:	4607      	mov	r7, r0
 801b87e:	e7f1      	b.n	801b864 <_dtoa_r+0xb04>
 801b880:	9b03      	ldr	r3, [sp, #12]
 801b882:	9302      	str	r3, [sp, #8]
 801b884:	9d01      	ldr	r5, [sp, #4]
 801b886:	ee18 0a10 	vmov	r0, s16
 801b88a:	4631      	mov	r1, r6
 801b88c:	f7ff f9da 	bl	801ac44 <quorem>
 801b890:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b894:	9b01      	ldr	r3, [sp, #4]
 801b896:	f805 ab01 	strb.w	sl, [r5], #1
 801b89a:	1aea      	subs	r2, r5, r3
 801b89c:	9b02      	ldr	r3, [sp, #8]
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	dd09      	ble.n	801b8b6 <_dtoa_r+0xb56>
 801b8a2:	ee18 1a10 	vmov	r1, s16
 801b8a6:	2300      	movs	r3, #0
 801b8a8:	220a      	movs	r2, #10
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	f000 fc44 	bl	801c138 <__multadd>
 801b8b0:	ee08 0a10 	vmov	s16, r0
 801b8b4:	e7e7      	b.n	801b886 <_dtoa_r+0xb26>
 801b8b6:	9b02      	ldr	r3, [sp, #8]
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	bfc8      	it	gt
 801b8bc:	461d      	movgt	r5, r3
 801b8be:	9b01      	ldr	r3, [sp, #4]
 801b8c0:	bfd8      	it	le
 801b8c2:	2501      	movle	r5, #1
 801b8c4:	441d      	add	r5, r3
 801b8c6:	f04f 0800 	mov.w	r8, #0
 801b8ca:	ee18 1a10 	vmov	r1, s16
 801b8ce:	2201      	movs	r2, #1
 801b8d0:	4620      	mov	r0, r4
 801b8d2:	f000 fe2b 	bl	801c52c <__lshift>
 801b8d6:	4631      	mov	r1, r6
 801b8d8:	ee08 0a10 	vmov	s16, r0
 801b8dc:	f000 fe96 	bl	801c60c <__mcmp>
 801b8e0:	2800      	cmp	r0, #0
 801b8e2:	dc91      	bgt.n	801b808 <_dtoa_r+0xaa8>
 801b8e4:	d102      	bne.n	801b8ec <_dtoa_r+0xb8c>
 801b8e6:	f01a 0f01 	tst.w	sl, #1
 801b8ea:	d18d      	bne.n	801b808 <_dtoa_r+0xaa8>
 801b8ec:	462b      	mov	r3, r5
 801b8ee:	461d      	mov	r5, r3
 801b8f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b8f4:	2a30      	cmp	r2, #48	; 0x30
 801b8f6:	d0fa      	beq.n	801b8ee <_dtoa_r+0xb8e>
 801b8f8:	e6d7      	b.n	801b6aa <_dtoa_r+0x94a>
 801b8fa:	9a01      	ldr	r2, [sp, #4]
 801b8fc:	429a      	cmp	r2, r3
 801b8fe:	d184      	bne.n	801b80a <_dtoa_r+0xaaa>
 801b900:	9b00      	ldr	r3, [sp, #0]
 801b902:	3301      	adds	r3, #1
 801b904:	9300      	str	r3, [sp, #0]
 801b906:	2331      	movs	r3, #49	; 0x31
 801b908:	7013      	strb	r3, [r2, #0]
 801b90a:	e6ce      	b.n	801b6aa <_dtoa_r+0x94a>
 801b90c:	4b09      	ldr	r3, [pc, #36]	; (801b934 <_dtoa_r+0xbd4>)
 801b90e:	f7ff ba95 	b.w	801ae3c <_dtoa_r+0xdc>
 801b912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b914:	2b00      	cmp	r3, #0
 801b916:	f47f aa6e 	bne.w	801adf6 <_dtoa_r+0x96>
 801b91a:	4b07      	ldr	r3, [pc, #28]	; (801b938 <_dtoa_r+0xbd8>)
 801b91c:	f7ff ba8e 	b.w	801ae3c <_dtoa_r+0xdc>
 801b920:	9b02      	ldr	r3, [sp, #8]
 801b922:	2b00      	cmp	r3, #0
 801b924:	dcae      	bgt.n	801b884 <_dtoa_r+0xb24>
 801b926:	9b06      	ldr	r3, [sp, #24]
 801b928:	2b02      	cmp	r3, #2
 801b92a:	f73f aea8 	bgt.w	801b67e <_dtoa_r+0x91e>
 801b92e:	e7a9      	b.n	801b884 <_dtoa_r+0xb24>
 801b930:	08051b10 	.word	0x08051b10
 801b934:	08051910 	.word	0x08051910
 801b938:	08051a91 	.word	0x08051a91

0801b93c <rshift>:
 801b93c:	6903      	ldr	r3, [r0, #16]
 801b93e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b942:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b946:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b94a:	f100 0414 	add.w	r4, r0, #20
 801b94e:	dd45      	ble.n	801b9dc <rshift+0xa0>
 801b950:	f011 011f 	ands.w	r1, r1, #31
 801b954:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b958:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b95c:	d10c      	bne.n	801b978 <rshift+0x3c>
 801b95e:	f100 0710 	add.w	r7, r0, #16
 801b962:	4629      	mov	r1, r5
 801b964:	42b1      	cmp	r1, r6
 801b966:	d334      	bcc.n	801b9d2 <rshift+0x96>
 801b968:	1a9b      	subs	r3, r3, r2
 801b96a:	009b      	lsls	r3, r3, #2
 801b96c:	1eea      	subs	r2, r5, #3
 801b96e:	4296      	cmp	r6, r2
 801b970:	bf38      	it	cc
 801b972:	2300      	movcc	r3, #0
 801b974:	4423      	add	r3, r4
 801b976:	e015      	b.n	801b9a4 <rshift+0x68>
 801b978:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b97c:	f1c1 0820 	rsb	r8, r1, #32
 801b980:	40cf      	lsrs	r7, r1
 801b982:	f105 0e04 	add.w	lr, r5, #4
 801b986:	46a1      	mov	r9, r4
 801b988:	4576      	cmp	r6, lr
 801b98a:	46f4      	mov	ip, lr
 801b98c:	d815      	bhi.n	801b9ba <rshift+0x7e>
 801b98e:	1a9a      	subs	r2, r3, r2
 801b990:	0092      	lsls	r2, r2, #2
 801b992:	3a04      	subs	r2, #4
 801b994:	3501      	adds	r5, #1
 801b996:	42ae      	cmp	r6, r5
 801b998:	bf38      	it	cc
 801b99a:	2200      	movcc	r2, #0
 801b99c:	18a3      	adds	r3, r4, r2
 801b99e:	50a7      	str	r7, [r4, r2]
 801b9a0:	b107      	cbz	r7, 801b9a4 <rshift+0x68>
 801b9a2:	3304      	adds	r3, #4
 801b9a4:	1b1a      	subs	r2, r3, r4
 801b9a6:	42a3      	cmp	r3, r4
 801b9a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b9ac:	bf08      	it	eq
 801b9ae:	2300      	moveq	r3, #0
 801b9b0:	6102      	str	r2, [r0, #16]
 801b9b2:	bf08      	it	eq
 801b9b4:	6143      	streq	r3, [r0, #20]
 801b9b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b9ba:	f8dc c000 	ldr.w	ip, [ip]
 801b9be:	fa0c fc08 	lsl.w	ip, ip, r8
 801b9c2:	ea4c 0707 	orr.w	r7, ip, r7
 801b9c6:	f849 7b04 	str.w	r7, [r9], #4
 801b9ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b9ce:	40cf      	lsrs	r7, r1
 801b9d0:	e7da      	b.n	801b988 <rshift+0x4c>
 801b9d2:	f851 cb04 	ldr.w	ip, [r1], #4
 801b9d6:	f847 cf04 	str.w	ip, [r7, #4]!
 801b9da:	e7c3      	b.n	801b964 <rshift+0x28>
 801b9dc:	4623      	mov	r3, r4
 801b9de:	e7e1      	b.n	801b9a4 <rshift+0x68>

0801b9e0 <__hexdig_fun>:
 801b9e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b9e4:	2b09      	cmp	r3, #9
 801b9e6:	d802      	bhi.n	801b9ee <__hexdig_fun+0xe>
 801b9e8:	3820      	subs	r0, #32
 801b9ea:	b2c0      	uxtb	r0, r0
 801b9ec:	4770      	bx	lr
 801b9ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b9f2:	2b05      	cmp	r3, #5
 801b9f4:	d801      	bhi.n	801b9fa <__hexdig_fun+0x1a>
 801b9f6:	3847      	subs	r0, #71	; 0x47
 801b9f8:	e7f7      	b.n	801b9ea <__hexdig_fun+0xa>
 801b9fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b9fe:	2b05      	cmp	r3, #5
 801ba00:	d801      	bhi.n	801ba06 <__hexdig_fun+0x26>
 801ba02:	3827      	subs	r0, #39	; 0x27
 801ba04:	e7f1      	b.n	801b9ea <__hexdig_fun+0xa>
 801ba06:	2000      	movs	r0, #0
 801ba08:	4770      	bx	lr
	...

0801ba0c <__gethex>:
 801ba0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba10:	ed2d 8b02 	vpush	{d8}
 801ba14:	b089      	sub	sp, #36	; 0x24
 801ba16:	ee08 0a10 	vmov	s16, r0
 801ba1a:	9304      	str	r3, [sp, #16]
 801ba1c:	4bb4      	ldr	r3, [pc, #720]	; (801bcf0 <__gethex+0x2e4>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	9301      	str	r3, [sp, #4]
 801ba22:	4618      	mov	r0, r3
 801ba24:	468b      	mov	fp, r1
 801ba26:	4690      	mov	r8, r2
 801ba28:	f7fc fc3e 	bl	80182a8 <strlen>
 801ba2c:	9b01      	ldr	r3, [sp, #4]
 801ba2e:	f8db 2000 	ldr.w	r2, [fp]
 801ba32:	4403      	add	r3, r0
 801ba34:	4682      	mov	sl, r0
 801ba36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ba3a:	9305      	str	r3, [sp, #20]
 801ba3c:	1c93      	adds	r3, r2, #2
 801ba3e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801ba42:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801ba46:	32fe      	adds	r2, #254	; 0xfe
 801ba48:	18d1      	adds	r1, r2, r3
 801ba4a:	461f      	mov	r7, r3
 801ba4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ba50:	9100      	str	r1, [sp, #0]
 801ba52:	2830      	cmp	r0, #48	; 0x30
 801ba54:	d0f8      	beq.n	801ba48 <__gethex+0x3c>
 801ba56:	f7ff ffc3 	bl	801b9e0 <__hexdig_fun>
 801ba5a:	4604      	mov	r4, r0
 801ba5c:	2800      	cmp	r0, #0
 801ba5e:	d13a      	bne.n	801bad6 <__gethex+0xca>
 801ba60:	9901      	ldr	r1, [sp, #4]
 801ba62:	4652      	mov	r2, sl
 801ba64:	4638      	mov	r0, r7
 801ba66:	f001 fa33 	bl	801ced0 <strncmp>
 801ba6a:	4605      	mov	r5, r0
 801ba6c:	2800      	cmp	r0, #0
 801ba6e:	d168      	bne.n	801bb42 <__gethex+0x136>
 801ba70:	f817 000a 	ldrb.w	r0, [r7, sl]
 801ba74:	eb07 060a 	add.w	r6, r7, sl
 801ba78:	f7ff ffb2 	bl	801b9e0 <__hexdig_fun>
 801ba7c:	2800      	cmp	r0, #0
 801ba7e:	d062      	beq.n	801bb46 <__gethex+0x13a>
 801ba80:	4633      	mov	r3, r6
 801ba82:	7818      	ldrb	r0, [r3, #0]
 801ba84:	2830      	cmp	r0, #48	; 0x30
 801ba86:	461f      	mov	r7, r3
 801ba88:	f103 0301 	add.w	r3, r3, #1
 801ba8c:	d0f9      	beq.n	801ba82 <__gethex+0x76>
 801ba8e:	f7ff ffa7 	bl	801b9e0 <__hexdig_fun>
 801ba92:	2301      	movs	r3, #1
 801ba94:	fab0 f480 	clz	r4, r0
 801ba98:	0964      	lsrs	r4, r4, #5
 801ba9a:	4635      	mov	r5, r6
 801ba9c:	9300      	str	r3, [sp, #0]
 801ba9e:	463a      	mov	r2, r7
 801baa0:	4616      	mov	r6, r2
 801baa2:	3201      	adds	r2, #1
 801baa4:	7830      	ldrb	r0, [r6, #0]
 801baa6:	f7ff ff9b 	bl	801b9e0 <__hexdig_fun>
 801baaa:	2800      	cmp	r0, #0
 801baac:	d1f8      	bne.n	801baa0 <__gethex+0x94>
 801baae:	9901      	ldr	r1, [sp, #4]
 801bab0:	4652      	mov	r2, sl
 801bab2:	4630      	mov	r0, r6
 801bab4:	f001 fa0c 	bl	801ced0 <strncmp>
 801bab8:	b980      	cbnz	r0, 801badc <__gethex+0xd0>
 801baba:	b94d      	cbnz	r5, 801bad0 <__gethex+0xc4>
 801babc:	eb06 050a 	add.w	r5, r6, sl
 801bac0:	462a      	mov	r2, r5
 801bac2:	4616      	mov	r6, r2
 801bac4:	3201      	adds	r2, #1
 801bac6:	7830      	ldrb	r0, [r6, #0]
 801bac8:	f7ff ff8a 	bl	801b9e0 <__hexdig_fun>
 801bacc:	2800      	cmp	r0, #0
 801bace:	d1f8      	bne.n	801bac2 <__gethex+0xb6>
 801bad0:	1bad      	subs	r5, r5, r6
 801bad2:	00ad      	lsls	r5, r5, #2
 801bad4:	e004      	b.n	801bae0 <__gethex+0xd4>
 801bad6:	2400      	movs	r4, #0
 801bad8:	4625      	mov	r5, r4
 801bada:	e7e0      	b.n	801ba9e <__gethex+0x92>
 801badc:	2d00      	cmp	r5, #0
 801bade:	d1f7      	bne.n	801bad0 <__gethex+0xc4>
 801bae0:	7833      	ldrb	r3, [r6, #0]
 801bae2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bae6:	2b50      	cmp	r3, #80	; 0x50
 801bae8:	d13b      	bne.n	801bb62 <__gethex+0x156>
 801baea:	7873      	ldrb	r3, [r6, #1]
 801baec:	2b2b      	cmp	r3, #43	; 0x2b
 801baee:	d02c      	beq.n	801bb4a <__gethex+0x13e>
 801baf0:	2b2d      	cmp	r3, #45	; 0x2d
 801baf2:	d02e      	beq.n	801bb52 <__gethex+0x146>
 801baf4:	1c71      	adds	r1, r6, #1
 801baf6:	f04f 0900 	mov.w	r9, #0
 801bafa:	7808      	ldrb	r0, [r1, #0]
 801bafc:	f7ff ff70 	bl	801b9e0 <__hexdig_fun>
 801bb00:	1e43      	subs	r3, r0, #1
 801bb02:	b2db      	uxtb	r3, r3
 801bb04:	2b18      	cmp	r3, #24
 801bb06:	d82c      	bhi.n	801bb62 <__gethex+0x156>
 801bb08:	f1a0 0210 	sub.w	r2, r0, #16
 801bb0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801bb10:	f7ff ff66 	bl	801b9e0 <__hexdig_fun>
 801bb14:	1e43      	subs	r3, r0, #1
 801bb16:	b2db      	uxtb	r3, r3
 801bb18:	2b18      	cmp	r3, #24
 801bb1a:	d91d      	bls.n	801bb58 <__gethex+0x14c>
 801bb1c:	f1b9 0f00 	cmp.w	r9, #0
 801bb20:	d000      	beq.n	801bb24 <__gethex+0x118>
 801bb22:	4252      	negs	r2, r2
 801bb24:	4415      	add	r5, r2
 801bb26:	f8cb 1000 	str.w	r1, [fp]
 801bb2a:	b1e4      	cbz	r4, 801bb66 <__gethex+0x15a>
 801bb2c:	9b00      	ldr	r3, [sp, #0]
 801bb2e:	2b00      	cmp	r3, #0
 801bb30:	bf14      	ite	ne
 801bb32:	2700      	movne	r7, #0
 801bb34:	2706      	moveq	r7, #6
 801bb36:	4638      	mov	r0, r7
 801bb38:	b009      	add	sp, #36	; 0x24
 801bb3a:	ecbd 8b02 	vpop	{d8}
 801bb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb42:	463e      	mov	r6, r7
 801bb44:	4625      	mov	r5, r4
 801bb46:	2401      	movs	r4, #1
 801bb48:	e7ca      	b.n	801bae0 <__gethex+0xd4>
 801bb4a:	f04f 0900 	mov.w	r9, #0
 801bb4e:	1cb1      	adds	r1, r6, #2
 801bb50:	e7d3      	b.n	801bafa <__gethex+0xee>
 801bb52:	f04f 0901 	mov.w	r9, #1
 801bb56:	e7fa      	b.n	801bb4e <__gethex+0x142>
 801bb58:	230a      	movs	r3, #10
 801bb5a:	fb03 0202 	mla	r2, r3, r2, r0
 801bb5e:	3a10      	subs	r2, #16
 801bb60:	e7d4      	b.n	801bb0c <__gethex+0x100>
 801bb62:	4631      	mov	r1, r6
 801bb64:	e7df      	b.n	801bb26 <__gethex+0x11a>
 801bb66:	1bf3      	subs	r3, r6, r7
 801bb68:	3b01      	subs	r3, #1
 801bb6a:	4621      	mov	r1, r4
 801bb6c:	2b07      	cmp	r3, #7
 801bb6e:	dc0b      	bgt.n	801bb88 <__gethex+0x17c>
 801bb70:	ee18 0a10 	vmov	r0, s16
 801bb74:	f000 fa7e 	bl	801c074 <_Balloc>
 801bb78:	4604      	mov	r4, r0
 801bb7a:	b940      	cbnz	r0, 801bb8e <__gethex+0x182>
 801bb7c:	4b5d      	ldr	r3, [pc, #372]	; (801bcf4 <__gethex+0x2e8>)
 801bb7e:	4602      	mov	r2, r0
 801bb80:	21de      	movs	r1, #222	; 0xde
 801bb82:	485d      	ldr	r0, [pc, #372]	; (801bcf8 <__gethex+0x2ec>)
 801bb84:	f001 f9c6 	bl	801cf14 <__assert_func>
 801bb88:	3101      	adds	r1, #1
 801bb8a:	105b      	asrs	r3, r3, #1
 801bb8c:	e7ee      	b.n	801bb6c <__gethex+0x160>
 801bb8e:	f100 0914 	add.w	r9, r0, #20
 801bb92:	f04f 0b00 	mov.w	fp, #0
 801bb96:	f1ca 0301 	rsb	r3, sl, #1
 801bb9a:	f8cd 9008 	str.w	r9, [sp, #8]
 801bb9e:	f8cd b000 	str.w	fp, [sp]
 801bba2:	9306      	str	r3, [sp, #24]
 801bba4:	42b7      	cmp	r7, r6
 801bba6:	d340      	bcc.n	801bc2a <__gethex+0x21e>
 801bba8:	9802      	ldr	r0, [sp, #8]
 801bbaa:	9b00      	ldr	r3, [sp, #0]
 801bbac:	f840 3b04 	str.w	r3, [r0], #4
 801bbb0:	eba0 0009 	sub.w	r0, r0, r9
 801bbb4:	1080      	asrs	r0, r0, #2
 801bbb6:	0146      	lsls	r6, r0, #5
 801bbb8:	6120      	str	r0, [r4, #16]
 801bbba:	4618      	mov	r0, r3
 801bbbc:	f000 fb4c 	bl	801c258 <__hi0bits>
 801bbc0:	1a30      	subs	r0, r6, r0
 801bbc2:	f8d8 6000 	ldr.w	r6, [r8]
 801bbc6:	42b0      	cmp	r0, r6
 801bbc8:	dd63      	ble.n	801bc92 <__gethex+0x286>
 801bbca:	1b87      	subs	r7, r0, r6
 801bbcc:	4639      	mov	r1, r7
 801bbce:	4620      	mov	r0, r4
 801bbd0:	f000 fef0 	bl	801c9b4 <__any_on>
 801bbd4:	4682      	mov	sl, r0
 801bbd6:	b1a8      	cbz	r0, 801bc04 <__gethex+0x1f8>
 801bbd8:	1e7b      	subs	r3, r7, #1
 801bbda:	1159      	asrs	r1, r3, #5
 801bbdc:	f003 021f 	and.w	r2, r3, #31
 801bbe0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801bbe4:	f04f 0a01 	mov.w	sl, #1
 801bbe8:	fa0a f202 	lsl.w	r2, sl, r2
 801bbec:	420a      	tst	r2, r1
 801bbee:	d009      	beq.n	801bc04 <__gethex+0x1f8>
 801bbf0:	4553      	cmp	r3, sl
 801bbf2:	dd05      	ble.n	801bc00 <__gethex+0x1f4>
 801bbf4:	1eb9      	subs	r1, r7, #2
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	f000 fedc 	bl	801c9b4 <__any_on>
 801bbfc:	2800      	cmp	r0, #0
 801bbfe:	d145      	bne.n	801bc8c <__gethex+0x280>
 801bc00:	f04f 0a02 	mov.w	sl, #2
 801bc04:	4639      	mov	r1, r7
 801bc06:	4620      	mov	r0, r4
 801bc08:	f7ff fe98 	bl	801b93c <rshift>
 801bc0c:	443d      	add	r5, r7
 801bc0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801bc12:	42ab      	cmp	r3, r5
 801bc14:	da4c      	bge.n	801bcb0 <__gethex+0x2a4>
 801bc16:	ee18 0a10 	vmov	r0, s16
 801bc1a:	4621      	mov	r1, r4
 801bc1c:	f000 fa6a 	bl	801c0f4 <_Bfree>
 801bc20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bc22:	2300      	movs	r3, #0
 801bc24:	6013      	str	r3, [r2, #0]
 801bc26:	27a3      	movs	r7, #163	; 0xa3
 801bc28:	e785      	b.n	801bb36 <__gethex+0x12a>
 801bc2a:	1e73      	subs	r3, r6, #1
 801bc2c:	9a05      	ldr	r2, [sp, #20]
 801bc2e:	9303      	str	r3, [sp, #12]
 801bc30:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801bc34:	4293      	cmp	r3, r2
 801bc36:	d019      	beq.n	801bc6c <__gethex+0x260>
 801bc38:	f1bb 0f20 	cmp.w	fp, #32
 801bc3c:	d107      	bne.n	801bc4e <__gethex+0x242>
 801bc3e:	9b02      	ldr	r3, [sp, #8]
 801bc40:	9a00      	ldr	r2, [sp, #0]
 801bc42:	f843 2b04 	str.w	r2, [r3], #4
 801bc46:	9302      	str	r3, [sp, #8]
 801bc48:	2300      	movs	r3, #0
 801bc4a:	9300      	str	r3, [sp, #0]
 801bc4c:	469b      	mov	fp, r3
 801bc4e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801bc52:	f7ff fec5 	bl	801b9e0 <__hexdig_fun>
 801bc56:	9b00      	ldr	r3, [sp, #0]
 801bc58:	f000 000f 	and.w	r0, r0, #15
 801bc5c:	fa00 f00b 	lsl.w	r0, r0, fp
 801bc60:	4303      	orrs	r3, r0
 801bc62:	9300      	str	r3, [sp, #0]
 801bc64:	f10b 0b04 	add.w	fp, fp, #4
 801bc68:	9b03      	ldr	r3, [sp, #12]
 801bc6a:	e00d      	b.n	801bc88 <__gethex+0x27c>
 801bc6c:	9b03      	ldr	r3, [sp, #12]
 801bc6e:	9a06      	ldr	r2, [sp, #24]
 801bc70:	4413      	add	r3, r2
 801bc72:	42bb      	cmp	r3, r7
 801bc74:	d3e0      	bcc.n	801bc38 <__gethex+0x22c>
 801bc76:	4618      	mov	r0, r3
 801bc78:	9901      	ldr	r1, [sp, #4]
 801bc7a:	9307      	str	r3, [sp, #28]
 801bc7c:	4652      	mov	r2, sl
 801bc7e:	f001 f927 	bl	801ced0 <strncmp>
 801bc82:	9b07      	ldr	r3, [sp, #28]
 801bc84:	2800      	cmp	r0, #0
 801bc86:	d1d7      	bne.n	801bc38 <__gethex+0x22c>
 801bc88:	461e      	mov	r6, r3
 801bc8a:	e78b      	b.n	801bba4 <__gethex+0x198>
 801bc8c:	f04f 0a03 	mov.w	sl, #3
 801bc90:	e7b8      	b.n	801bc04 <__gethex+0x1f8>
 801bc92:	da0a      	bge.n	801bcaa <__gethex+0x29e>
 801bc94:	1a37      	subs	r7, r6, r0
 801bc96:	4621      	mov	r1, r4
 801bc98:	ee18 0a10 	vmov	r0, s16
 801bc9c:	463a      	mov	r2, r7
 801bc9e:	f000 fc45 	bl	801c52c <__lshift>
 801bca2:	1bed      	subs	r5, r5, r7
 801bca4:	4604      	mov	r4, r0
 801bca6:	f100 0914 	add.w	r9, r0, #20
 801bcaa:	f04f 0a00 	mov.w	sl, #0
 801bcae:	e7ae      	b.n	801bc0e <__gethex+0x202>
 801bcb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bcb4:	42a8      	cmp	r0, r5
 801bcb6:	dd72      	ble.n	801bd9e <__gethex+0x392>
 801bcb8:	1b45      	subs	r5, r0, r5
 801bcba:	42ae      	cmp	r6, r5
 801bcbc:	dc36      	bgt.n	801bd2c <__gethex+0x320>
 801bcbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bcc2:	2b02      	cmp	r3, #2
 801bcc4:	d02a      	beq.n	801bd1c <__gethex+0x310>
 801bcc6:	2b03      	cmp	r3, #3
 801bcc8:	d02c      	beq.n	801bd24 <__gethex+0x318>
 801bcca:	2b01      	cmp	r3, #1
 801bccc:	d11c      	bne.n	801bd08 <__gethex+0x2fc>
 801bcce:	42ae      	cmp	r6, r5
 801bcd0:	d11a      	bne.n	801bd08 <__gethex+0x2fc>
 801bcd2:	2e01      	cmp	r6, #1
 801bcd4:	d112      	bne.n	801bcfc <__gethex+0x2f0>
 801bcd6:	9a04      	ldr	r2, [sp, #16]
 801bcd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bcdc:	6013      	str	r3, [r2, #0]
 801bcde:	2301      	movs	r3, #1
 801bce0:	6123      	str	r3, [r4, #16]
 801bce2:	f8c9 3000 	str.w	r3, [r9]
 801bce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801bce8:	2762      	movs	r7, #98	; 0x62
 801bcea:	601c      	str	r4, [r3, #0]
 801bcec:	e723      	b.n	801bb36 <__gethex+0x12a>
 801bcee:	bf00      	nop
 801bcf0:	08051b88 	.word	0x08051b88
 801bcf4:	08051b10 	.word	0x08051b10
 801bcf8:	08051b21 	.word	0x08051b21
 801bcfc:	1e71      	subs	r1, r6, #1
 801bcfe:	4620      	mov	r0, r4
 801bd00:	f000 fe58 	bl	801c9b4 <__any_on>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	d1e6      	bne.n	801bcd6 <__gethex+0x2ca>
 801bd08:	ee18 0a10 	vmov	r0, s16
 801bd0c:	4621      	mov	r1, r4
 801bd0e:	f000 f9f1 	bl	801c0f4 <_Bfree>
 801bd12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801bd14:	2300      	movs	r3, #0
 801bd16:	6013      	str	r3, [r2, #0]
 801bd18:	2750      	movs	r7, #80	; 0x50
 801bd1a:	e70c      	b.n	801bb36 <__gethex+0x12a>
 801bd1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d1f2      	bne.n	801bd08 <__gethex+0x2fc>
 801bd22:	e7d8      	b.n	801bcd6 <__gethex+0x2ca>
 801bd24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d1d5      	bne.n	801bcd6 <__gethex+0x2ca>
 801bd2a:	e7ed      	b.n	801bd08 <__gethex+0x2fc>
 801bd2c:	1e6f      	subs	r7, r5, #1
 801bd2e:	f1ba 0f00 	cmp.w	sl, #0
 801bd32:	d131      	bne.n	801bd98 <__gethex+0x38c>
 801bd34:	b127      	cbz	r7, 801bd40 <__gethex+0x334>
 801bd36:	4639      	mov	r1, r7
 801bd38:	4620      	mov	r0, r4
 801bd3a:	f000 fe3b 	bl	801c9b4 <__any_on>
 801bd3e:	4682      	mov	sl, r0
 801bd40:	117b      	asrs	r3, r7, #5
 801bd42:	2101      	movs	r1, #1
 801bd44:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801bd48:	f007 071f 	and.w	r7, r7, #31
 801bd4c:	fa01 f707 	lsl.w	r7, r1, r7
 801bd50:	421f      	tst	r7, r3
 801bd52:	4629      	mov	r1, r5
 801bd54:	4620      	mov	r0, r4
 801bd56:	bf18      	it	ne
 801bd58:	f04a 0a02 	orrne.w	sl, sl, #2
 801bd5c:	1b76      	subs	r6, r6, r5
 801bd5e:	f7ff fded 	bl	801b93c <rshift>
 801bd62:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801bd66:	2702      	movs	r7, #2
 801bd68:	f1ba 0f00 	cmp.w	sl, #0
 801bd6c:	d048      	beq.n	801be00 <__gethex+0x3f4>
 801bd6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801bd72:	2b02      	cmp	r3, #2
 801bd74:	d015      	beq.n	801bda2 <__gethex+0x396>
 801bd76:	2b03      	cmp	r3, #3
 801bd78:	d017      	beq.n	801bdaa <__gethex+0x39e>
 801bd7a:	2b01      	cmp	r3, #1
 801bd7c:	d109      	bne.n	801bd92 <__gethex+0x386>
 801bd7e:	f01a 0f02 	tst.w	sl, #2
 801bd82:	d006      	beq.n	801bd92 <__gethex+0x386>
 801bd84:	f8d9 0000 	ldr.w	r0, [r9]
 801bd88:	ea4a 0a00 	orr.w	sl, sl, r0
 801bd8c:	f01a 0f01 	tst.w	sl, #1
 801bd90:	d10e      	bne.n	801bdb0 <__gethex+0x3a4>
 801bd92:	f047 0710 	orr.w	r7, r7, #16
 801bd96:	e033      	b.n	801be00 <__gethex+0x3f4>
 801bd98:	f04f 0a01 	mov.w	sl, #1
 801bd9c:	e7d0      	b.n	801bd40 <__gethex+0x334>
 801bd9e:	2701      	movs	r7, #1
 801bda0:	e7e2      	b.n	801bd68 <__gethex+0x35c>
 801bda2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bda4:	f1c3 0301 	rsb	r3, r3, #1
 801bda8:	9315      	str	r3, [sp, #84]	; 0x54
 801bdaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d0f0      	beq.n	801bd92 <__gethex+0x386>
 801bdb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bdb4:	f104 0314 	add.w	r3, r4, #20
 801bdb8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801bdbc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801bdc0:	f04f 0c00 	mov.w	ip, #0
 801bdc4:	4618      	mov	r0, r3
 801bdc6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bdca:	f1b2 3fff 	cmp.w	r2, #4294967295
 801bdce:	d01c      	beq.n	801be0a <__gethex+0x3fe>
 801bdd0:	3201      	adds	r2, #1
 801bdd2:	6002      	str	r2, [r0, #0]
 801bdd4:	2f02      	cmp	r7, #2
 801bdd6:	f104 0314 	add.w	r3, r4, #20
 801bdda:	d13f      	bne.n	801be5c <__gethex+0x450>
 801bddc:	f8d8 2000 	ldr.w	r2, [r8]
 801bde0:	3a01      	subs	r2, #1
 801bde2:	42b2      	cmp	r2, r6
 801bde4:	d10a      	bne.n	801bdfc <__gethex+0x3f0>
 801bde6:	1171      	asrs	r1, r6, #5
 801bde8:	2201      	movs	r2, #1
 801bdea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801bdee:	f006 061f 	and.w	r6, r6, #31
 801bdf2:	fa02 f606 	lsl.w	r6, r2, r6
 801bdf6:	421e      	tst	r6, r3
 801bdf8:	bf18      	it	ne
 801bdfa:	4617      	movne	r7, r2
 801bdfc:	f047 0720 	orr.w	r7, r7, #32
 801be00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801be02:	601c      	str	r4, [r3, #0]
 801be04:	9b04      	ldr	r3, [sp, #16]
 801be06:	601d      	str	r5, [r3, #0]
 801be08:	e695      	b.n	801bb36 <__gethex+0x12a>
 801be0a:	4299      	cmp	r1, r3
 801be0c:	f843 cc04 	str.w	ip, [r3, #-4]
 801be10:	d8d8      	bhi.n	801bdc4 <__gethex+0x3b8>
 801be12:	68a3      	ldr	r3, [r4, #8]
 801be14:	459b      	cmp	fp, r3
 801be16:	db19      	blt.n	801be4c <__gethex+0x440>
 801be18:	6861      	ldr	r1, [r4, #4]
 801be1a:	ee18 0a10 	vmov	r0, s16
 801be1e:	3101      	adds	r1, #1
 801be20:	f000 f928 	bl	801c074 <_Balloc>
 801be24:	4681      	mov	r9, r0
 801be26:	b918      	cbnz	r0, 801be30 <__gethex+0x424>
 801be28:	4b1a      	ldr	r3, [pc, #104]	; (801be94 <__gethex+0x488>)
 801be2a:	4602      	mov	r2, r0
 801be2c:	2184      	movs	r1, #132	; 0x84
 801be2e:	e6a8      	b.n	801bb82 <__gethex+0x176>
 801be30:	6922      	ldr	r2, [r4, #16]
 801be32:	3202      	adds	r2, #2
 801be34:	f104 010c 	add.w	r1, r4, #12
 801be38:	0092      	lsls	r2, r2, #2
 801be3a:	300c      	adds	r0, #12
 801be3c:	f000 f90c 	bl	801c058 <memcpy>
 801be40:	4621      	mov	r1, r4
 801be42:	ee18 0a10 	vmov	r0, s16
 801be46:	f000 f955 	bl	801c0f4 <_Bfree>
 801be4a:	464c      	mov	r4, r9
 801be4c:	6923      	ldr	r3, [r4, #16]
 801be4e:	1c5a      	adds	r2, r3, #1
 801be50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801be54:	6122      	str	r2, [r4, #16]
 801be56:	2201      	movs	r2, #1
 801be58:	615a      	str	r2, [r3, #20]
 801be5a:	e7bb      	b.n	801bdd4 <__gethex+0x3c8>
 801be5c:	6922      	ldr	r2, [r4, #16]
 801be5e:	455a      	cmp	r2, fp
 801be60:	dd0b      	ble.n	801be7a <__gethex+0x46e>
 801be62:	2101      	movs	r1, #1
 801be64:	4620      	mov	r0, r4
 801be66:	f7ff fd69 	bl	801b93c <rshift>
 801be6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801be6e:	3501      	adds	r5, #1
 801be70:	42ab      	cmp	r3, r5
 801be72:	f6ff aed0 	blt.w	801bc16 <__gethex+0x20a>
 801be76:	2701      	movs	r7, #1
 801be78:	e7c0      	b.n	801bdfc <__gethex+0x3f0>
 801be7a:	f016 061f 	ands.w	r6, r6, #31
 801be7e:	d0fa      	beq.n	801be76 <__gethex+0x46a>
 801be80:	4453      	add	r3, sl
 801be82:	f1c6 0620 	rsb	r6, r6, #32
 801be86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801be8a:	f000 f9e5 	bl	801c258 <__hi0bits>
 801be8e:	42b0      	cmp	r0, r6
 801be90:	dbe7      	blt.n	801be62 <__gethex+0x456>
 801be92:	e7f0      	b.n	801be76 <__gethex+0x46a>
 801be94:	08051b10 	.word	0x08051b10

0801be98 <L_shift>:
 801be98:	f1c2 0208 	rsb	r2, r2, #8
 801be9c:	0092      	lsls	r2, r2, #2
 801be9e:	b570      	push	{r4, r5, r6, lr}
 801bea0:	f1c2 0620 	rsb	r6, r2, #32
 801bea4:	6843      	ldr	r3, [r0, #4]
 801bea6:	6804      	ldr	r4, [r0, #0]
 801bea8:	fa03 f506 	lsl.w	r5, r3, r6
 801beac:	432c      	orrs	r4, r5
 801beae:	40d3      	lsrs	r3, r2
 801beb0:	6004      	str	r4, [r0, #0]
 801beb2:	f840 3f04 	str.w	r3, [r0, #4]!
 801beb6:	4288      	cmp	r0, r1
 801beb8:	d3f4      	bcc.n	801bea4 <L_shift+0xc>
 801beba:	bd70      	pop	{r4, r5, r6, pc}

0801bebc <__match>:
 801bebc:	b530      	push	{r4, r5, lr}
 801bebe:	6803      	ldr	r3, [r0, #0]
 801bec0:	3301      	adds	r3, #1
 801bec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bec6:	b914      	cbnz	r4, 801bece <__match+0x12>
 801bec8:	6003      	str	r3, [r0, #0]
 801beca:	2001      	movs	r0, #1
 801becc:	bd30      	pop	{r4, r5, pc}
 801bece:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bed2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bed6:	2d19      	cmp	r5, #25
 801bed8:	bf98      	it	ls
 801beda:	3220      	addls	r2, #32
 801bedc:	42a2      	cmp	r2, r4
 801bede:	d0f0      	beq.n	801bec2 <__match+0x6>
 801bee0:	2000      	movs	r0, #0
 801bee2:	e7f3      	b.n	801becc <__match+0x10>

0801bee4 <__hexnan>:
 801bee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bee8:	680b      	ldr	r3, [r1, #0]
 801beea:	115e      	asrs	r6, r3, #5
 801beec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bef0:	f013 031f 	ands.w	r3, r3, #31
 801bef4:	b087      	sub	sp, #28
 801bef6:	bf18      	it	ne
 801bef8:	3604      	addne	r6, #4
 801befa:	2500      	movs	r5, #0
 801befc:	1f37      	subs	r7, r6, #4
 801befe:	4690      	mov	r8, r2
 801bf00:	6802      	ldr	r2, [r0, #0]
 801bf02:	9301      	str	r3, [sp, #4]
 801bf04:	4682      	mov	sl, r0
 801bf06:	f846 5c04 	str.w	r5, [r6, #-4]
 801bf0a:	46b9      	mov	r9, r7
 801bf0c:	463c      	mov	r4, r7
 801bf0e:	9502      	str	r5, [sp, #8]
 801bf10:	46ab      	mov	fp, r5
 801bf12:	7851      	ldrb	r1, [r2, #1]
 801bf14:	1c53      	adds	r3, r2, #1
 801bf16:	9303      	str	r3, [sp, #12]
 801bf18:	b341      	cbz	r1, 801bf6c <__hexnan+0x88>
 801bf1a:	4608      	mov	r0, r1
 801bf1c:	9205      	str	r2, [sp, #20]
 801bf1e:	9104      	str	r1, [sp, #16]
 801bf20:	f7ff fd5e 	bl	801b9e0 <__hexdig_fun>
 801bf24:	2800      	cmp	r0, #0
 801bf26:	d14f      	bne.n	801bfc8 <__hexnan+0xe4>
 801bf28:	9904      	ldr	r1, [sp, #16]
 801bf2a:	9a05      	ldr	r2, [sp, #20]
 801bf2c:	2920      	cmp	r1, #32
 801bf2e:	d818      	bhi.n	801bf62 <__hexnan+0x7e>
 801bf30:	9b02      	ldr	r3, [sp, #8]
 801bf32:	459b      	cmp	fp, r3
 801bf34:	dd13      	ble.n	801bf5e <__hexnan+0x7a>
 801bf36:	454c      	cmp	r4, r9
 801bf38:	d206      	bcs.n	801bf48 <__hexnan+0x64>
 801bf3a:	2d07      	cmp	r5, #7
 801bf3c:	dc04      	bgt.n	801bf48 <__hexnan+0x64>
 801bf3e:	462a      	mov	r2, r5
 801bf40:	4649      	mov	r1, r9
 801bf42:	4620      	mov	r0, r4
 801bf44:	f7ff ffa8 	bl	801be98 <L_shift>
 801bf48:	4544      	cmp	r4, r8
 801bf4a:	d950      	bls.n	801bfee <__hexnan+0x10a>
 801bf4c:	2300      	movs	r3, #0
 801bf4e:	f1a4 0904 	sub.w	r9, r4, #4
 801bf52:	f844 3c04 	str.w	r3, [r4, #-4]
 801bf56:	f8cd b008 	str.w	fp, [sp, #8]
 801bf5a:	464c      	mov	r4, r9
 801bf5c:	461d      	mov	r5, r3
 801bf5e:	9a03      	ldr	r2, [sp, #12]
 801bf60:	e7d7      	b.n	801bf12 <__hexnan+0x2e>
 801bf62:	2929      	cmp	r1, #41	; 0x29
 801bf64:	d156      	bne.n	801c014 <__hexnan+0x130>
 801bf66:	3202      	adds	r2, #2
 801bf68:	f8ca 2000 	str.w	r2, [sl]
 801bf6c:	f1bb 0f00 	cmp.w	fp, #0
 801bf70:	d050      	beq.n	801c014 <__hexnan+0x130>
 801bf72:	454c      	cmp	r4, r9
 801bf74:	d206      	bcs.n	801bf84 <__hexnan+0xa0>
 801bf76:	2d07      	cmp	r5, #7
 801bf78:	dc04      	bgt.n	801bf84 <__hexnan+0xa0>
 801bf7a:	462a      	mov	r2, r5
 801bf7c:	4649      	mov	r1, r9
 801bf7e:	4620      	mov	r0, r4
 801bf80:	f7ff ff8a 	bl	801be98 <L_shift>
 801bf84:	4544      	cmp	r4, r8
 801bf86:	d934      	bls.n	801bff2 <__hexnan+0x10e>
 801bf88:	f1a8 0204 	sub.w	r2, r8, #4
 801bf8c:	4623      	mov	r3, r4
 801bf8e:	f853 1b04 	ldr.w	r1, [r3], #4
 801bf92:	f842 1f04 	str.w	r1, [r2, #4]!
 801bf96:	429f      	cmp	r7, r3
 801bf98:	d2f9      	bcs.n	801bf8e <__hexnan+0xaa>
 801bf9a:	1b3b      	subs	r3, r7, r4
 801bf9c:	f023 0303 	bic.w	r3, r3, #3
 801bfa0:	3304      	adds	r3, #4
 801bfa2:	3401      	adds	r4, #1
 801bfa4:	3e03      	subs	r6, #3
 801bfa6:	42b4      	cmp	r4, r6
 801bfa8:	bf88      	it	hi
 801bfaa:	2304      	movhi	r3, #4
 801bfac:	4443      	add	r3, r8
 801bfae:	2200      	movs	r2, #0
 801bfb0:	f843 2b04 	str.w	r2, [r3], #4
 801bfb4:	429f      	cmp	r7, r3
 801bfb6:	d2fb      	bcs.n	801bfb0 <__hexnan+0xcc>
 801bfb8:	683b      	ldr	r3, [r7, #0]
 801bfba:	b91b      	cbnz	r3, 801bfc4 <__hexnan+0xe0>
 801bfbc:	4547      	cmp	r7, r8
 801bfbe:	d127      	bne.n	801c010 <__hexnan+0x12c>
 801bfc0:	2301      	movs	r3, #1
 801bfc2:	603b      	str	r3, [r7, #0]
 801bfc4:	2005      	movs	r0, #5
 801bfc6:	e026      	b.n	801c016 <__hexnan+0x132>
 801bfc8:	3501      	adds	r5, #1
 801bfca:	2d08      	cmp	r5, #8
 801bfcc:	f10b 0b01 	add.w	fp, fp, #1
 801bfd0:	dd06      	ble.n	801bfe0 <__hexnan+0xfc>
 801bfd2:	4544      	cmp	r4, r8
 801bfd4:	d9c3      	bls.n	801bf5e <__hexnan+0x7a>
 801bfd6:	2300      	movs	r3, #0
 801bfd8:	f844 3c04 	str.w	r3, [r4, #-4]
 801bfdc:	2501      	movs	r5, #1
 801bfde:	3c04      	subs	r4, #4
 801bfe0:	6822      	ldr	r2, [r4, #0]
 801bfe2:	f000 000f 	and.w	r0, r0, #15
 801bfe6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801bfea:	6022      	str	r2, [r4, #0]
 801bfec:	e7b7      	b.n	801bf5e <__hexnan+0x7a>
 801bfee:	2508      	movs	r5, #8
 801bff0:	e7b5      	b.n	801bf5e <__hexnan+0x7a>
 801bff2:	9b01      	ldr	r3, [sp, #4]
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d0df      	beq.n	801bfb8 <__hexnan+0xd4>
 801bff8:	f04f 32ff 	mov.w	r2, #4294967295
 801bffc:	f1c3 0320 	rsb	r3, r3, #32
 801c000:	fa22 f303 	lsr.w	r3, r2, r3
 801c004:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c008:	401a      	ands	r2, r3
 801c00a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c00e:	e7d3      	b.n	801bfb8 <__hexnan+0xd4>
 801c010:	3f04      	subs	r7, #4
 801c012:	e7d1      	b.n	801bfb8 <__hexnan+0xd4>
 801c014:	2004      	movs	r0, #4
 801c016:	b007      	add	sp, #28
 801c018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c01c <_localeconv_r>:
 801c01c:	4800      	ldr	r0, [pc, #0]	; (801c020 <_localeconv_r+0x4>)
 801c01e:	4770      	bx	lr
 801c020:	200001bc 	.word	0x200001bc

0801c024 <malloc>:
 801c024:	4b02      	ldr	r3, [pc, #8]	; (801c030 <malloc+0xc>)
 801c026:	4601      	mov	r1, r0
 801c028:	6818      	ldr	r0, [r3, #0]
 801c02a:	f000 bd67 	b.w	801cafc <_malloc_r>
 801c02e:	bf00      	nop
 801c030:	20000064 	.word	0x20000064

0801c034 <__ascii_mbtowc>:
 801c034:	b082      	sub	sp, #8
 801c036:	b901      	cbnz	r1, 801c03a <__ascii_mbtowc+0x6>
 801c038:	a901      	add	r1, sp, #4
 801c03a:	b142      	cbz	r2, 801c04e <__ascii_mbtowc+0x1a>
 801c03c:	b14b      	cbz	r3, 801c052 <__ascii_mbtowc+0x1e>
 801c03e:	7813      	ldrb	r3, [r2, #0]
 801c040:	600b      	str	r3, [r1, #0]
 801c042:	7812      	ldrb	r2, [r2, #0]
 801c044:	1e10      	subs	r0, r2, #0
 801c046:	bf18      	it	ne
 801c048:	2001      	movne	r0, #1
 801c04a:	b002      	add	sp, #8
 801c04c:	4770      	bx	lr
 801c04e:	4610      	mov	r0, r2
 801c050:	e7fb      	b.n	801c04a <__ascii_mbtowc+0x16>
 801c052:	f06f 0001 	mvn.w	r0, #1
 801c056:	e7f8      	b.n	801c04a <__ascii_mbtowc+0x16>

0801c058 <memcpy>:
 801c058:	440a      	add	r2, r1
 801c05a:	4291      	cmp	r1, r2
 801c05c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c060:	d100      	bne.n	801c064 <memcpy+0xc>
 801c062:	4770      	bx	lr
 801c064:	b510      	push	{r4, lr}
 801c066:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c06a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c06e:	4291      	cmp	r1, r2
 801c070:	d1f9      	bne.n	801c066 <memcpy+0xe>
 801c072:	bd10      	pop	{r4, pc}

0801c074 <_Balloc>:
 801c074:	b570      	push	{r4, r5, r6, lr}
 801c076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c078:	4604      	mov	r4, r0
 801c07a:	460d      	mov	r5, r1
 801c07c:	b976      	cbnz	r6, 801c09c <_Balloc+0x28>
 801c07e:	2010      	movs	r0, #16
 801c080:	f7ff ffd0 	bl	801c024 <malloc>
 801c084:	4602      	mov	r2, r0
 801c086:	6260      	str	r0, [r4, #36]	; 0x24
 801c088:	b920      	cbnz	r0, 801c094 <_Balloc+0x20>
 801c08a:	4b18      	ldr	r3, [pc, #96]	; (801c0ec <_Balloc+0x78>)
 801c08c:	4818      	ldr	r0, [pc, #96]	; (801c0f0 <_Balloc+0x7c>)
 801c08e:	2166      	movs	r1, #102	; 0x66
 801c090:	f000 ff40 	bl	801cf14 <__assert_func>
 801c094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c098:	6006      	str	r6, [r0, #0]
 801c09a:	60c6      	str	r6, [r0, #12]
 801c09c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c09e:	68f3      	ldr	r3, [r6, #12]
 801c0a0:	b183      	cbz	r3, 801c0c4 <_Balloc+0x50>
 801c0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0a4:	68db      	ldr	r3, [r3, #12]
 801c0a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c0aa:	b9b8      	cbnz	r0, 801c0dc <_Balloc+0x68>
 801c0ac:	2101      	movs	r1, #1
 801c0ae:	fa01 f605 	lsl.w	r6, r1, r5
 801c0b2:	1d72      	adds	r2, r6, #5
 801c0b4:	0092      	lsls	r2, r2, #2
 801c0b6:	4620      	mov	r0, r4
 801c0b8:	f000 fc9d 	bl	801c9f6 <_calloc_r>
 801c0bc:	b160      	cbz	r0, 801c0d8 <_Balloc+0x64>
 801c0be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c0c2:	e00e      	b.n	801c0e2 <_Balloc+0x6e>
 801c0c4:	2221      	movs	r2, #33	; 0x21
 801c0c6:	2104      	movs	r1, #4
 801c0c8:	4620      	mov	r0, r4
 801c0ca:	f000 fc94 	bl	801c9f6 <_calloc_r>
 801c0ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c0d0:	60f0      	str	r0, [r6, #12]
 801c0d2:	68db      	ldr	r3, [r3, #12]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d1e4      	bne.n	801c0a2 <_Balloc+0x2e>
 801c0d8:	2000      	movs	r0, #0
 801c0da:	bd70      	pop	{r4, r5, r6, pc}
 801c0dc:	6802      	ldr	r2, [r0, #0]
 801c0de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c0e8:	e7f7      	b.n	801c0da <_Balloc+0x66>
 801c0ea:	bf00      	nop
 801c0ec:	08051a9e 	.word	0x08051a9e
 801c0f0:	08051b9c 	.word	0x08051b9c

0801c0f4 <_Bfree>:
 801c0f4:	b570      	push	{r4, r5, r6, lr}
 801c0f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c0f8:	4605      	mov	r5, r0
 801c0fa:	460c      	mov	r4, r1
 801c0fc:	b976      	cbnz	r6, 801c11c <_Bfree+0x28>
 801c0fe:	2010      	movs	r0, #16
 801c100:	f7ff ff90 	bl	801c024 <malloc>
 801c104:	4602      	mov	r2, r0
 801c106:	6268      	str	r0, [r5, #36]	; 0x24
 801c108:	b920      	cbnz	r0, 801c114 <_Bfree+0x20>
 801c10a:	4b09      	ldr	r3, [pc, #36]	; (801c130 <_Bfree+0x3c>)
 801c10c:	4809      	ldr	r0, [pc, #36]	; (801c134 <_Bfree+0x40>)
 801c10e:	218a      	movs	r1, #138	; 0x8a
 801c110:	f000 ff00 	bl	801cf14 <__assert_func>
 801c114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c118:	6006      	str	r6, [r0, #0]
 801c11a:	60c6      	str	r6, [r0, #12]
 801c11c:	b13c      	cbz	r4, 801c12e <_Bfree+0x3a>
 801c11e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c120:	6862      	ldr	r2, [r4, #4]
 801c122:	68db      	ldr	r3, [r3, #12]
 801c124:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c128:	6021      	str	r1, [r4, #0]
 801c12a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c12e:	bd70      	pop	{r4, r5, r6, pc}
 801c130:	08051a9e 	.word	0x08051a9e
 801c134:	08051b9c 	.word	0x08051b9c

0801c138 <__multadd>:
 801c138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c13c:	690d      	ldr	r5, [r1, #16]
 801c13e:	4607      	mov	r7, r0
 801c140:	460c      	mov	r4, r1
 801c142:	461e      	mov	r6, r3
 801c144:	f101 0c14 	add.w	ip, r1, #20
 801c148:	2000      	movs	r0, #0
 801c14a:	f8dc 3000 	ldr.w	r3, [ip]
 801c14e:	b299      	uxth	r1, r3
 801c150:	fb02 6101 	mla	r1, r2, r1, r6
 801c154:	0c1e      	lsrs	r6, r3, #16
 801c156:	0c0b      	lsrs	r3, r1, #16
 801c158:	fb02 3306 	mla	r3, r2, r6, r3
 801c15c:	b289      	uxth	r1, r1
 801c15e:	3001      	adds	r0, #1
 801c160:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c164:	4285      	cmp	r5, r0
 801c166:	f84c 1b04 	str.w	r1, [ip], #4
 801c16a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c16e:	dcec      	bgt.n	801c14a <__multadd+0x12>
 801c170:	b30e      	cbz	r6, 801c1b6 <__multadd+0x7e>
 801c172:	68a3      	ldr	r3, [r4, #8]
 801c174:	42ab      	cmp	r3, r5
 801c176:	dc19      	bgt.n	801c1ac <__multadd+0x74>
 801c178:	6861      	ldr	r1, [r4, #4]
 801c17a:	4638      	mov	r0, r7
 801c17c:	3101      	adds	r1, #1
 801c17e:	f7ff ff79 	bl	801c074 <_Balloc>
 801c182:	4680      	mov	r8, r0
 801c184:	b928      	cbnz	r0, 801c192 <__multadd+0x5a>
 801c186:	4602      	mov	r2, r0
 801c188:	4b0c      	ldr	r3, [pc, #48]	; (801c1bc <__multadd+0x84>)
 801c18a:	480d      	ldr	r0, [pc, #52]	; (801c1c0 <__multadd+0x88>)
 801c18c:	21b5      	movs	r1, #181	; 0xb5
 801c18e:	f000 fec1 	bl	801cf14 <__assert_func>
 801c192:	6922      	ldr	r2, [r4, #16]
 801c194:	3202      	adds	r2, #2
 801c196:	f104 010c 	add.w	r1, r4, #12
 801c19a:	0092      	lsls	r2, r2, #2
 801c19c:	300c      	adds	r0, #12
 801c19e:	f7ff ff5b 	bl	801c058 <memcpy>
 801c1a2:	4621      	mov	r1, r4
 801c1a4:	4638      	mov	r0, r7
 801c1a6:	f7ff ffa5 	bl	801c0f4 <_Bfree>
 801c1aa:	4644      	mov	r4, r8
 801c1ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c1b0:	3501      	adds	r5, #1
 801c1b2:	615e      	str	r6, [r3, #20]
 801c1b4:	6125      	str	r5, [r4, #16]
 801c1b6:	4620      	mov	r0, r4
 801c1b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1bc:	08051b10 	.word	0x08051b10
 801c1c0:	08051b9c 	.word	0x08051b9c

0801c1c4 <__s2b>:
 801c1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1c8:	460c      	mov	r4, r1
 801c1ca:	4615      	mov	r5, r2
 801c1cc:	461f      	mov	r7, r3
 801c1ce:	2209      	movs	r2, #9
 801c1d0:	3308      	adds	r3, #8
 801c1d2:	4606      	mov	r6, r0
 801c1d4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c1d8:	2100      	movs	r1, #0
 801c1da:	2201      	movs	r2, #1
 801c1dc:	429a      	cmp	r2, r3
 801c1de:	db09      	blt.n	801c1f4 <__s2b+0x30>
 801c1e0:	4630      	mov	r0, r6
 801c1e2:	f7ff ff47 	bl	801c074 <_Balloc>
 801c1e6:	b940      	cbnz	r0, 801c1fa <__s2b+0x36>
 801c1e8:	4602      	mov	r2, r0
 801c1ea:	4b19      	ldr	r3, [pc, #100]	; (801c250 <__s2b+0x8c>)
 801c1ec:	4819      	ldr	r0, [pc, #100]	; (801c254 <__s2b+0x90>)
 801c1ee:	21ce      	movs	r1, #206	; 0xce
 801c1f0:	f000 fe90 	bl	801cf14 <__assert_func>
 801c1f4:	0052      	lsls	r2, r2, #1
 801c1f6:	3101      	adds	r1, #1
 801c1f8:	e7f0      	b.n	801c1dc <__s2b+0x18>
 801c1fa:	9b08      	ldr	r3, [sp, #32]
 801c1fc:	6143      	str	r3, [r0, #20]
 801c1fe:	2d09      	cmp	r5, #9
 801c200:	f04f 0301 	mov.w	r3, #1
 801c204:	6103      	str	r3, [r0, #16]
 801c206:	dd16      	ble.n	801c236 <__s2b+0x72>
 801c208:	f104 0909 	add.w	r9, r4, #9
 801c20c:	46c8      	mov	r8, r9
 801c20e:	442c      	add	r4, r5
 801c210:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c214:	4601      	mov	r1, r0
 801c216:	3b30      	subs	r3, #48	; 0x30
 801c218:	220a      	movs	r2, #10
 801c21a:	4630      	mov	r0, r6
 801c21c:	f7ff ff8c 	bl	801c138 <__multadd>
 801c220:	45a0      	cmp	r8, r4
 801c222:	d1f5      	bne.n	801c210 <__s2b+0x4c>
 801c224:	f1a5 0408 	sub.w	r4, r5, #8
 801c228:	444c      	add	r4, r9
 801c22a:	1b2d      	subs	r5, r5, r4
 801c22c:	1963      	adds	r3, r4, r5
 801c22e:	42bb      	cmp	r3, r7
 801c230:	db04      	blt.n	801c23c <__s2b+0x78>
 801c232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c236:	340a      	adds	r4, #10
 801c238:	2509      	movs	r5, #9
 801c23a:	e7f6      	b.n	801c22a <__s2b+0x66>
 801c23c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c240:	4601      	mov	r1, r0
 801c242:	3b30      	subs	r3, #48	; 0x30
 801c244:	220a      	movs	r2, #10
 801c246:	4630      	mov	r0, r6
 801c248:	f7ff ff76 	bl	801c138 <__multadd>
 801c24c:	e7ee      	b.n	801c22c <__s2b+0x68>
 801c24e:	bf00      	nop
 801c250:	08051b10 	.word	0x08051b10
 801c254:	08051b9c 	.word	0x08051b9c

0801c258 <__hi0bits>:
 801c258:	0c03      	lsrs	r3, r0, #16
 801c25a:	041b      	lsls	r3, r3, #16
 801c25c:	b9d3      	cbnz	r3, 801c294 <__hi0bits+0x3c>
 801c25e:	0400      	lsls	r0, r0, #16
 801c260:	2310      	movs	r3, #16
 801c262:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c266:	bf04      	itt	eq
 801c268:	0200      	lsleq	r0, r0, #8
 801c26a:	3308      	addeq	r3, #8
 801c26c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c270:	bf04      	itt	eq
 801c272:	0100      	lsleq	r0, r0, #4
 801c274:	3304      	addeq	r3, #4
 801c276:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c27a:	bf04      	itt	eq
 801c27c:	0080      	lsleq	r0, r0, #2
 801c27e:	3302      	addeq	r3, #2
 801c280:	2800      	cmp	r0, #0
 801c282:	db05      	blt.n	801c290 <__hi0bits+0x38>
 801c284:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c288:	f103 0301 	add.w	r3, r3, #1
 801c28c:	bf08      	it	eq
 801c28e:	2320      	moveq	r3, #32
 801c290:	4618      	mov	r0, r3
 801c292:	4770      	bx	lr
 801c294:	2300      	movs	r3, #0
 801c296:	e7e4      	b.n	801c262 <__hi0bits+0xa>

0801c298 <__lo0bits>:
 801c298:	6803      	ldr	r3, [r0, #0]
 801c29a:	f013 0207 	ands.w	r2, r3, #7
 801c29e:	4601      	mov	r1, r0
 801c2a0:	d00b      	beq.n	801c2ba <__lo0bits+0x22>
 801c2a2:	07da      	lsls	r2, r3, #31
 801c2a4:	d423      	bmi.n	801c2ee <__lo0bits+0x56>
 801c2a6:	0798      	lsls	r0, r3, #30
 801c2a8:	bf49      	itett	mi
 801c2aa:	085b      	lsrmi	r3, r3, #1
 801c2ac:	089b      	lsrpl	r3, r3, #2
 801c2ae:	2001      	movmi	r0, #1
 801c2b0:	600b      	strmi	r3, [r1, #0]
 801c2b2:	bf5c      	itt	pl
 801c2b4:	600b      	strpl	r3, [r1, #0]
 801c2b6:	2002      	movpl	r0, #2
 801c2b8:	4770      	bx	lr
 801c2ba:	b298      	uxth	r0, r3
 801c2bc:	b9a8      	cbnz	r0, 801c2ea <__lo0bits+0x52>
 801c2be:	0c1b      	lsrs	r3, r3, #16
 801c2c0:	2010      	movs	r0, #16
 801c2c2:	b2da      	uxtb	r2, r3
 801c2c4:	b90a      	cbnz	r2, 801c2ca <__lo0bits+0x32>
 801c2c6:	3008      	adds	r0, #8
 801c2c8:	0a1b      	lsrs	r3, r3, #8
 801c2ca:	071a      	lsls	r2, r3, #28
 801c2cc:	bf04      	itt	eq
 801c2ce:	091b      	lsreq	r3, r3, #4
 801c2d0:	3004      	addeq	r0, #4
 801c2d2:	079a      	lsls	r2, r3, #30
 801c2d4:	bf04      	itt	eq
 801c2d6:	089b      	lsreq	r3, r3, #2
 801c2d8:	3002      	addeq	r0, #2
 801c2da:	07da      	lsls	r2, r3, #31
 801c2dc:	d403      	bmi.n	801c2e6 <__lo0bits+0x4e>
 801c2de:	085b      	lsrs	r3, r3, #1
 801c2e0:	f100 0001 	add.w	r0, r0, #1
 801c2e4:	d005      	beq.n	801c2f2 <__lo0bits+0x5a>
 801c2e6:	600b      	str	r3, [r1, #0]
 801c2e8:	4770      	bx	lr
 801c2ea:	4610      	mov	r0, r2
 801c2ec:	e7e9      	b.n	801c2c2 <__lo0bits+0x2a>
 801c2ee:	2000      	movs	r0, #0
 801c2f0:	4770      	bx	lr
 801c2f2:	2020      	movs	r0, #32
 801c2f4:	4770      	bx	lr
	...

0801c2f8 <__i2b>:
 801c2f8:	b510      	push	{r4, lr}
 801c2fa:	460c      	mov	r4, r1
 801c2fc:	2101      	movs	r1, #1
 801c2fe:	f7ff feb9 	bl	801c074 <_Balloc>
 801c302:	4602      	mov	r2, r0
 801c304:	b928      	cbnz	r0, 801c312 <__i2b+0x1a>
 801c306:	4b05      	ldr	r3, [pc, #20]	; (801c31c <__i2b+0x24>)
 801c308:	4805      	ldr	r0, [pc, #20]	; (801c320 <__i2b+0x28>)
 801c30a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c30e:	f000 fe01 	bl	801cf14 <__assert_func>
 801c312:	2301      	movs	r3, #1
 801c314:	6144      	str	r4, [r0, #20]
 801c316:	6103      	str	r3, [r0, #16]
 801c318:	bd10      	pop	{r4, pc}
 801c31a:	bf00      	nop
 801c31c:	08051b10 	.word	0x08051b10
 801c320:	08051b9c 	.word	0x08051b9c

0801c324 <__multiply>:
 801c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c328:	4691      	mov	r9, r2
 801c32a:	690a      	ldr	r2, [r1, #16]
 801c32c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c330:	429a      	cmp	r2, r3
 801c332:	bfb8      	it	lt
 801c334:	460b      	movlt	r3, r1
 801c336:	460c      	mov	r4, r1
 801c338:	bfbc      	itt	lt
 801c33a:	464c      	movlt	r4, r9
 801c33c:	4699      	movlt	r9, r3
 801c33e:	6927      	ldr	r7, [r4, #16]
 801c340:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c344:	68a3      	ldr	r3, [r4, #8]
 801c346:	6861      	ldr	r1, [r4, #4]
 801c348:	eb07 060a 	add.w	r6, r7, sl
 801c34c:	42b3      	cmp	r3, r6
 801c34e:	b085      	sub	sp, #20
 801c350:	bfb8      	it	lt
 801c352:	3101      	addlt	r1, #1
 801c354:	f7ff fe8e 	bl	801c074 <_Balloc>
 801c358:	b930      	cbnz	r0, 801c368 <__multiply+0x44>
 801c35a:	4602      	mov	r2, r0
 801c35c:	4b44      	ldr	r3, [pc, #272]	; (801c470 <__multiply+0x14c>)
 801c35e:	4845      	ldr	r0, [pc, #276]	; (801c474 <__multiply+0x150>)
 801c360:	f240 115d 	movw	r1, #349	; 0x15d
 801c364:	f000 fdd6 	bl	801cf14 <__assert_func>
 801c368:	f100 0514 	add.w	r5, r0, #20
 801c36c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c370:	462b      	mov	r3, r5
 801c372:	2200      	movs	r2, #0
 801c374:	4543      	cmp	r3, r8
 801c376:	d321      	bcc.n	801c3bc <__multiply+0x98>
 801c378:	f104 0314 	add.w	r3, r4, #20
 801c37c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c380:	f109 0314 	add.w	r3, r9, #20
 801c384:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c388:	9202      	str	r2, [sp, #8]
 801c38a:	1b3a      	subs	r2, r7, r4
 801c38c:	3a15      	subs	r2, #21
 801c38e:	f022 0203 	bic.w	r2, r2, #3
 801c392:	3204      	adds	r2, #4
 801c394:	f104 0115 	add.w	r1, r4, #21
 801c398:	428f      	cmp	r7, r1
 801c39a:	bf38      	it	cc
 801c39c:	2204      	movcc	r2, #4
 801c39e:	9201      	str	r2, [sp, #4]
 801c3a0:	9a02      	ldr	r2, [sp, #8]
 801c3a2:	9303      	str	r3, [sp, #12]
 801c3a4:	429a      	cmp	r2, r3
 801c3a6:	d80c      	bhi.n	801c3c2 <__multiply+0x9e>
 801c3a8:	2e00      	cmp	r6, #0
 801c3aa:	dd03      	ble.n	801c3b4 <__multiply+0x90>
 801c3ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d05a      	beq.n	801c46a <__multiply+0x146>
 801c3b4:	6106      	str	r6, [r0, #16]
 801c3b6:	b005      	add	sp, #20
 801c3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3bc:	f843 2b04 	str.w	r2, [r3], #4
 801c3c0:	e7d8      	b.n	801c374 <__multiply+0x50>
 801c3c2:	f8b3 a000 	ldrh.w	sl, [r3]
 801c3c6:	f1ba 0f00 	cmp.w	sl, #0
 801c3ca:	d024      	beq.n	801c416 <__multiply+0xf2>
 801c3cc:	f104 0e14 	add.w	lr, r4, #20
 801c3d0:	46a9      	mov	r9, r5
 801c3d2:	f04f 0c00 	mov.w	ip, #0
 801c3d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c3da:	f8d9 1000 	ldr.w	r1, [r9]
 801c3de:	fa1f fb82 	uxth.w	fp, r2
 801c3e2:	b289      	uxth	r1, r1
 801c3e4:	fb0a 110b 	mla	r1, sl, fp, r1
 801c3e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c3ec:	f8d9 2000 	ldr.w	r2, [r9]
 801c3f0:	4461      	add	r1, ip
 801c3f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c3f6:	fb0a c20b 	mla	r2, sl, fp, ip
 801c3fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c3fe:	b289      	uxth	r1, r1
 801c400:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c404:	4577      	cmp	r7, lr
 801c406:	f849 1b04 	str.w	r1, [r9], #4
 801c40a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c40e:	d8e2      	bhi.n	801c3d6 <__multiply+0xb2>
 801c410:	9a01      	ldr	r2, [sp, #4]
 801c412:	f845 c002 	str.w	ip, [r5, r2]
 801c416:	9a03      	ldr	r2, [sp, #12]
 801c418:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c41c:	3304      	adds	r3, #4
 801c41e:	f1b9 0f00 	cmp.w	r9, #0
 801c422:	d020      	beq.n	801c466 <__multiply+0x142>
 801c424:	6829      	ldr	r1, [r5, #0]
 801c426:	f104 0c14 	add.w	ip, r4, #20
 801c42a:	46ae      	mov	lr, r5
 801c42c:	f04f 0a00 	mov.w	sl, #0
 801c430:	f8bc b000 	ldrh.w	fp, [ip]
 801c434:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c438:	fb09 220b 	mla	r2, r9, fp, r2
 801c43c:	4492      	add	sl, r2
 801c43e:	b289      	uxth	r1, r1
 801c440:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c444:	f84e 1b04 	str.w	r1, [lr], #4
 801c448:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c44c:	f8be 1000 	ldrh.w	r1, [lr]
 801c450:	0c12      	lsrs	r2, r2, #16
 801c452:	fb09 1102 	mla	r1, r9, r2, r1
 801c456:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c45a:	4567      	cmp	r7, ip
 801c45c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c460:	d8e6      	bhi.n	801c430 <__multiply+0x10c>
 801c462:	9a01      	ldr	r2, [sp, #4]
 801c464:	50a9      	str	r1, [r5, r2]
 801c466:	3504      	adds	r5, #4
 801c468:	e79a      	b.n	801c3a0 <__multiply+0x7c>
 801c46a:	3e01      	subs	r6, #1
 801c46c:	e79c      	b.n	801c3a8 <__multiply+0x84>
 801c46e:	bf00      	nop
 801c470:	08051b10 	.word	0x08051b10
 801c474:	08051b9c 	.word	0x08051b9c

0801c478 <__pow5mult>:
 801c478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c47c:	4615      	mov	r5, r2
 801c47e:	f012 0203 	ands.w	r2, r2, #3
 801c482:	4606      	mov	r6, r0
 801c484:	460f      	mov	r7, r1
 801c486:	d007      	beq.n	801c498 <__pow5mult+0x20>
 801c488:	4c25      	ldr	r4, [pc, #148]	; (801c520 <__pow5mult+0xa8>)
 801c48a:	3a01      	subs	r2, #1
 801c48c:	2300      	movs	r3, #0
 801c48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c492:	f7ff fe51 	bl	801c138 <__multadd>
 801c496:	4607      	mov	r7, r0
 801c498:	10ad      	asrs	r5, r5, #2
 801c49a:	d03d      	beq.n	801c518 <__pow5mult+0xa0>
 801c49c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c49e:	b97c      	cbnz	r4, 801c4c0 <__pow5mult+0x48>
 801c4a0:	2010      	movs	r0, #16
 801c4a2:	f7ff fdbf 	bl	801c024 <malloc>
 801c4a6:	4602      	mov	r2, r0
 801c4a8:	6270      	str	r0, [r6, #36]	; 0x24
 801c4aa:	b928      	cbnz	r0, 801c4b8 <__pow5mult+0x40>
 801c4ac:	4b1d      	ldr	r3, [pc, #116]	; (801c524 <__pow5mult+0xac>)
 801c4ae:	481e      	ldr	r0, [pc, #120]	; (801c528 <__pow5mult+0xb0>)
 801c4b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c4b4:	f000 fd2e 	bl	801cf14 <__assert_func>
 801c4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c4bc:	6004      	str	r4, [r0, #0]
 801c4be:	60c4      	str	r4, [r0, #12]
 801c4c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c4c8:	b94c      	cbnz	r4, 801c4de <__pow5mult+0x66>
 801c4ca:	f240 2171 	movw	r1, #625	; 0x271
 801c4ce:	4630      	mov	r0, r6
 801c4d0:	f7ff ff12 	bl	801c2f8 <__i2b>
 801c4d4:	2300      	movs	r3, #0
 801c4d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c4da:	4604      	mov	r4, r0
 801c4dc:	6003      	str	r3, [r0, #0]
 801c4de:	f04f 0900 	mov.w	r9, #0
 801c4e2:	07eb      	lsls	r3, r5, #31
 801c4e4:	d50a      	bpl.n	801c4fc <__pow5mult+0x84>
 801c4e6:	4639      	mov	r1, r7
 801c4e8:	4622      	mov	r2, r4
 801c4ea:	4630      	mov	r0, r6
 801c4ec:	f7ff ff1a 	bl	801c324 <__multiply>
 801c4f0:	4639      	mov	r1, r7
 801c4f2:	4680      	mov	r8, r0
 801c4f4:	4630      	mov	r0, r6
 801c4f6:	f7ff fdfd 	bl	801c0f4 <_Bfree>
 801c4fa:	4647      	mov	r7, r8
 801c4fc:	106d      	asrs	r5, r5, #1
 801c4fe:	d00b      	beq.n	801c518 <__pow5mult+0xa0>
 801c500:	6820      	ldr	r0, [r4, #0]
 801c502:	b938      	cbnz	r0, 801c514 <__pow5mult+0x9c>
 801c504:	4622      	mov	r2, r4
 801c506:	4621      	mov	r1, r4
 801c508:	4630      	mov	r0, r6
 801c50a:	f7ff ff0b 	bl	801c324 <__multiply>
 801c50e:	6020      	str	r0, [r4, #0]
 801c510:	f8c0 9000 	str.w	r9, [r0]
 801c514:	4604      	mov	r4, r0
 801c516:	e7e4      	b.n	801c4e2 <__pow5mult+0x6a>
 801c518:	4638      	mov	r0, r7
 801c51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c51e:	bf00      	nop
 801c520:	08051ce8 	.word	0x08051ce8
 801c524:	08051a9e 	.word	0x08051a9e
 801c528:	08051b9c 	.word	0x08051b9c

0801c52c <__lshift>:
 801c52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c530:	460c      	mov	r4, r1
 801c532:	6849      	ldr	r1, [r1, #4]
 801c534:	6923      	ldr	r3, [r4, #16]
 801c536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c53a:	68a3      	ldr	r3, [r4, #8]
 801c53c:	4607      	mov	r7, r0
 801c53e:	4691      	mov	r9, r2
 801c540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c544:	f108 0601 	add.w	r6, r8, #1
 801c548:	42b3      	cmp	r3, r6
 801c54a:	db0b      	blt.n	801c564 <__lshift+0x38>
 801c54c:	4638      	mov	r0, r7
 801c54e:	f7ff fd91 	bl	801c074 <_Balloc>
 801c552:	4605      	mov	r5, r0
 801c554:	b948      	cbnz	r0, 801c56a <__lshift+0x3e>
 801c556:	4602      	mov	r2, r0
 801c558:	4b2a      	ldr	r3, [pc, #168]	; (801c604 <__lshift+0xd8>)
 801c55a:	482b      	ldr	r0, [pc, #172]	; (801c608 <__lshift+0xdc>)
 801c55c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c560:	f000 fcd8 	bl	801cf14 <__assert_func>
 801c564:	3101      	adds	r1, #1
 801c566:	005b      	lsls	r3, r3, #1
 801c568:	e7ee      	b.n	801c548 <__lshift+0x1c>
 801c56a:	2300      	movs	r3, #0
 801c56c:	f100 0114 	add.w	r1, r0, #20
 801c570:	f100 0210 	add.w	r2, r0, #16
 801c574:	4618      	mov	r0, r3
 801c576:	4553      	cmp	r3, sl
 801c578:	db37      	blt.n	801c5ea <__lshift+0xbe>
 801c57a:	6920      	ldr	r0, [r4, #16]
 801c57c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c580:	f104 0314 	add.w	r3, r4, #20
 801c584:	f019 091f 	ands.w	r9, r9, #31
 801c588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c58c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c590:	d02f      	beq.n	801c5f2 <__lshift+0xc6>
 801c592:	f1c9 0e20 	rsb	lr, r9, #32
 801c596:	468a      	mov	sl, r1
 801c598:	f04f 0c00 	mov.w	ip, #0
 801c59c:	681a      	ldr	r2, [r3, #0]
 801c59e:	fa02 f209 	lsl.w	r2, r2, r9
 801c5a2:	ea42 020c 	orr.w	r2, r2, ip
 801c5a6:	f84a 2b04 	str.w	r2, [sl], #4
 801c5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5ae:	4298      	cmp	r0, r3
 801c5b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801c5b4:	d8f2      	bhi.n	801c59c <__lshift+0x70>
 801c5b6:	1b03      	subs	r3, r0, r4
 801c5b8:	3b15      	subs	r3, #21
 801c5ba:	f023 0303 	bic.w	r3, r3, #3
 801c5be:	3304      	adds	r3, #4
 801c5c0:	f104 0215 	add.w	r2, r4, #21
 801c5c4:	4290      	cmp	r0, r2
 801c5c6:	bf38      	it	cc
 801c5c8:	2304      	movcc	r3, #4
 801c5ca:	f841 c003 	str.w	ip, [r1, r3]
 801c5ce:	f1bc 0f00 	cmp.w	ip, #0
 801c5d2:	d001      	beq.n	801c5d8 <__lshift+0xac>
 801c5d4:	f108 0602 	add.w	r6, r8, #2
 801c5d8:	3e01      	subs	r6, #1
 801c5da:	4638      	mov	r0, r7
 801c5dc:	612e      	str	r6, [r5, #16]
 801c5de:	4621      	mov	r1, r4
 801c5e0:	f7ff fd88 	bl	801c0f4 <_Bfree>
 801c5e4:	4628      	mov	r0, r5
 801c5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5ea:	f842 0f04 	str.w	r0, [r2, #4]!
 801c5ee:	3301      	adds	r3, #1
 801c5f0:	e7c1      	b.n	801c576 <__lshift+0x4a>
 801c5f2:	3904      	subs	r1, #4
 801c5f4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c5f8:	f841 2f04 	str.w	r2, [r1, #4]!
 801c5fc:	4298      	cmp	r0, r3
 801c5fe:	d8f9      	bhi.n	801c5f4 <__lshift+0xc8>
 801c600:	e7ea      	b.n	801c5d8 <__lshift+0xac>
 801c602:	bf00      	nop
 801c604:	08051b10 	.word	0x08051b10
 801c608:	08051b9c 	.word	0x08051b9c

0801c60c <__mcmp>:
 801c60c:	b530      	push	{r4, r5, lr}
 801c60e:	6902      	ldr	r2, [r0, #16]
 801c610:	690c      	ldr	r4, [r1, #16]
 801c612:	1b12      	subs	r2, r2, r4
 801c614:	d10e      	bne.n	801c634 <__mcmp+0x28>
 801c616:	f100 0314 	add.w	r3, r0, #20
 801c61a:	3114      	adds	r1, #20
 801c61c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c620:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c624:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c628:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c62c:	42a5      	cmp	r5, r4
 801c62e:	d003      	beq.n	801c638 <__mcmp+0x2c>
 801c630:	d305      	bcc.n	801c63e <__mcmp+0x32>
 801c632:	2201      	movs	r2, #1
 801c634:	4610      	mov	r0, r2
 801c636:	bd30      	pop	{r4, r5, pc}
 801c638:	4283      	cmp	r3, r0
 801c63a:	d3f3      	bcc.n	801c624 <__mcmp+0x18>
 801c63c:	e7fa      	b.n	801c634 <__mcmp+0x28>
 801c63e:	f04f 32ff 	mov.w	r2, #4294967295
 801c642:	e7f7      	b.n	801c634 <__mcmp+0x28>

0801c644 <__mdiff>:
 801c644:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c648:	460c      	mov	r4, r1
 801c64a:	4606      	mov	r6, r0
 801c64c:	4611      	mov	r1, r2
 801c64e:	4620      	mov	r0, r4
 801c650:	4690      	mov	r8, r2
 801c652:	f7ff ffdb 	bl	801c60c <__mcmp>
 801c656:	1e05      	subs	r5, r0, #0
 801c658:	d110      	bne.n	801c67c <__mdiff+0x38>
 801c65a:	4629      	mov	r1, r5
 801c65c:	4630      	mov	r0, r6
 801c65e:	f7ff fd09 	bl	801c074 <_Balloc>
 801c662:	b930      	cbnz	r0, 801c672 <__mdiff+0x2e>
 801c664:	4b3a      	ldr	r3, [pc, #232]	; (801c750 <__mdiff+0x10c>)
 801c666:	4602      	mov	r2, r0
 801c668:	f240 2132 	movw	r1, #562	; 0x232
 801c66c:	4839      	ldr	r0, [pc, #228]	; (801c754 <__mdiff+0x110>)
 801c66e:	f000 fc51 	bl	801cf14 <__assert_func>
 801c672:	2301      	movs	r3, #1
 801c674:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c67c:	bfa4      	itt	ge
 801c67e:	4643      	movge	r3, r8
 801c680:	46a0      	movge	r8, r4
 801c682:	4630      	mov	r0, r6
 801c684:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c688:	bfa6      	itte	ge
 801c68a:	461c      	movge	r4, r3
 801c68c:	2500      	movge	r5, #0
 801c68e:	2501      	movlt	r5, #1
 801c690:	f7ff fcf0 	bl	801c074 <_Balloc>
 801c694:	b920      	cbnz	r0, 801c6a0 <__mdiff+0x5c>
 801c696:	4b2e      	ldr	r3, [pc, #184]	; (801c750 <__mdiff+0x10c>)
 801c698:	4602      	mov	r2, r0
 801c69a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c69e:	e7e5      	b.n	801c66c <__mdiff+0x28>
 801c6a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801c6a4:	6926      	ldr	r6, [r4, #16]
 801c6a6:	60c5      	str	r5, [r0, #12]
 801c6a8:	f104 0914 	add.w	r9, r4, #20
 801c6ac:	f108 0514 	add.w	r5, r8, #20
 801c6b0:	f100 0e14 	add.w	lr, r0, #20
 801c6b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801c6b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801c6bc:	f108 0210 	add.w	r2, r8, #16
 801c6c0:	46f2      	mov	sl, lr
 801c6c2:	2100      	movs	r1, #0
 801c6c4:	f859 3b04 	ldr.w	r3, [r9], #4
 801c6c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c6cc:	fa1f f883 	uxth.w	r8, r3
 801c6d0:	fa11 f18b 	uxtah	r1, r1, fp
 801c6d4:	0c1b      	lsrs	r3, r3, #16
 801c6d6:	eba1 0808 	sub.w	r8, r1, r8
 801c6da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c6de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c6e2:	fa1f f888 	uxth.w	r8, r8
 801c6e6:	1419      	asrs	r1, r3, #16
 801c6e8:	454e      	cmp	r6, r9
 801c6ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c6ee:	f84a 3b04 	str.w	r3, [sl], #4
 801c6f2:	d8e7      	bhi.n	801c6c4 <__mdiff+0x80>
 801c6f4:	1b33      	subs	r3, r6, r4
 801c6f6:	3b15      	subs	r3, #21
 801c6f8:	f023 0303 	bic.w	r3, r3, #3
 801c6fc:	3304      	adds	r3, #4
 801c6fe:	3415      	adds	r4, #21
 801c700:	42a6      	cmp	r6, r4
 801c702:	bf38      	it	cc
 801c704:	2304      	movcc	r3, #4
 801c706:	441d      	add	r5, r3
 801c708:	4473      	add	r3, lr
 801c70a:	469e      	mov	lr, r3
 801c70c:	462e      	mov	r6, r5
 801c70e:	4566      	cmp	r6, ip
 801c710:	d30e      	bcc.n	801c730 <__mdiff+0xec>
 801c712:	f10c 0203 	add.w	r2, ip, #3
 801c716:	1b52      	subs	r2, r2, r5
 801c718:	f022 0203 	bic.w	r2, r2, #3
 801c71c:	3d03      	subs	r5, #3
 801c71e:	45ac      	cmp	ip, r5
 801c720:	bf38      	it	cc
 801c722:	2200      	movcc	r2, #0
 801c724:	441a      	add	r2, r3
 801c726:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c72a:	b17b      	cbz	r3, 801c74c <__mdiff+0x108>
 801c72c:	6107      	str	r7, [r0, #16]
 801c72e:	e7a3      	b.n	801c678 <__mdiff+0x34>
 801c730:	f856 8b04 	ldr.w	r8, [r6], #4
 801c734:	fa11 f288 	uxtah	r2, r1, r8
 801c738:	1414      	asrs	r4, r2, #16
 801c73a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801c73e:	b292      	uxth	r2, r2
 801c740:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801c744:	f84e 2b04 	str.w	r2, [lr], #4
 801c748:	1421      	asrs	r1, r4, #16
 801c74a:	e7e0      	b.n	801c70e <__mdiff+0xca>
 801c74c:	3f01      	subs	r7, #1
 801c74e:	e7ea      	b.n	801c726 <__mdiff+0xe2>
 801c750:	08051b10 	.word	0x08051b10
 801c754:	08051b9c 	.word	0x08051b9c

0801c758 <__ulp>:
 801c758:	b082      	sub	sp, #8
 801c75a:	ed8d 0b00 	vstr	d0, [sp]
 801c75e:	9b01      	ldr	r3, [sp, #4]
 801c760:	4912      	ldr	r1, [pc, #72]	; (801c7ac <__ulp+0x54>)
 801c762:	4019      	ands	r1, r3
 801c764:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801c768:	2900      	cmp	r1, #0
 801c76a:	dd05      	ble.n	801c778 <__ulp+0x20>
 801c76c:	2200      	movs	r2, #0
 801c76e:	460b      	mov	r3, r1
 801c770:	ec43 2b10 	vmov	d0, r2, r3
 801c774:	b002      	add	sp, #8
 801c776:	4770      	bx	lr
 801c778:	4249      	negs	r1, r1
 801c77a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801c77e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801c782:	f04f 0200 	mov.w	r2, #0
 801c786:	f04f 0300 	mov.w	r3, #0
 801c78a:	da04      	bge.n	801c796 <__ulp+0x3e>
 801c78c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801c790:	fa41 f300 	asr.w	r3, r1, r0
 801c794:	e7ec      	b.n	801c770 <__ulp+0x18>
 801c796:	f1a0 0114 	sub.w	r1, r0, #20
 801c79a:	291e      	cmp	r1, #30
 801c79c:	bfda      	itte	le
 801c79e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801c7a2:	fa20 f101 	lsrle.w	r1, r0, r1
 801c7a6:	2101      	movgt	r1, #1
 801c7a8:	460a      	mov	r2, r1
 801c7aa:	e7e1      	b.n	801c770 <__ulp+0x18>
 801c7ac:	7ff00000 	.word	0x7ff00000

0801c7b0 <__b2d>:
 801c7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7b2:	6905      	ldr	r5, [r0, #16]
 801c7b4:	f100 0714 	add.w	r7, r0, #20
 801c7b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801c7bc:	1f2e      	subs	r6, r5, #4
 801c7be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801c7c2:	4620      	mov	r0, r4
 801c7c4:	f7ff fd48 	bl	801c258 <__hi0bits>
 801c7c8:	f1c0 0320 	rsb	r3, r0, #32
 801c7cc:	280a      	cmp	r0, #10
 801c7ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801c84c <__b2d+0x9c>
 801c7d2:	600b      	str	r3, [r1, #0]
 801c7d4:	dc14      	bgt.n	801c800 <__b2d+0x50>
 801c7d6:	f1c0 0e0b 	rsb	lr, r0, #11
 801c7da:	fa24 f10e 	lsr.w	r1, r4, lr
 801c7de:	42b7      	cmp	r7, r6
 801c7e0:	ea41 030c 	orr.w	r3, r1, ip
 801c7e4:	bf34      	ite	cc
 801c7e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c7ea:	2100      	movcs	r1, #0
 801c7ec:	3015      	adds	r0, #21
 801c7ee:	fa04 f000 	lsl.w	r0, r4, r0
 801c7f2:	fa21 f10e 	lsr.w	r1, r1, lr
 801c7f6:	ea40 0201 	orr.w	r2, r0, r1
 801c7fa:	ec43 2b10 	vmov	d0, r2, r3
 801c7fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c800:	42b7      	cmp	r7, r6
 801c802:	bf3a      	itte	cc
 801c804:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801c808:	f1a5 0608 	subcc.w	r6, r5, #8
 801c80c:	2100      	movcs	r1, #0
 801c80e:	380b      	subs	r0, #11
 801c810:	d017      	beq.n	801c842 <__b2d+0x92>
 801c812:	f1c0 0c20 	rsb	ip, r0, #32
 801c816:	fa04 f500 	lsl.w	r5, r4, r0
 801c81a:	42be      	cmp	r6, r7
 801c81c:	fa21 f40c 	lsr.w	r4, r1, ip
 801c820:	ea45 0504 	orr.w	r5, r5, r4
 801c824:	bf8c      	ite	hi
 801c826:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801c82a:	2400      	movls	r4, #0
 801c82c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801c830:	fa01 f000 	lsl.w	r0, r1, r0
 801c834:	fa24 f40c 	lsr.w	r4, r4, ip
 801c838:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c83c:	ea40 0204 	orr.w	r2, r0, r4
 801c840:	e7db      	b.n	801c7fa <__b2d+0x4a>
 801c842:	ea44 030c 	orr.w	r3, r4, ip
 801c846:	460a      	mov	r2, r1
 801c848:	e7d7      	b.n	801c7fa <__b2d+0x4a>
 801c84a:	bf00      	nop
 801c84c:	3ff00000 	.word	0x3ff00000

0801c850 <__d2b>:
 801c850:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c854:	4689      	mov	r9, r1
 801c856:	2101      	movs	r1, #1
 801c858:	ec57 6b10 	vmov	r6, r7, d0
 801c85c:	4690      	mov	r8, r2
 801c85e:	f7ff fc09 	bl	801c074 <_Balloc>
 801c862:	4604      	mov	r4, r0
 801c864:	b930      	cbnz	r0, 801c874 <__d2b+0x24>
 801c866:	4602      	mov	r2, r0
 801c868:	4b25      	ldr	r3, [pc, #148]	; (801c900 <__d2b+0xb0>)
 801c86a:	4826      	ldr	r0, [pc, #152]	; (801c904 <__d2b+0xb4>)
 801c86c:	f240 310a 	movw	r1, #778	; 0x30a
 801c870:	f000 fb50 	bl	801cf14 <__assert_func>
 801c874:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c878:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c87c:	bb35      	cbnz	r5, 801c8cc <__d2b+0x7c>
 801c87e:	2e00      	cmp	r6, #0
 801c880:	9301      	str	r3, [sp, #4]
 801c882:	d028      	beq.n	801c8d6 <__d2b+0x86>
 801c884:	4668      	mov	r0, sp
 801c886:	9600      	str	r6, [sp, #0]
 801c888:	f7ff fd06 	bl	801c298 <__lo0bits>
 801c88c:	9900      	ldr	r1, [sp, #0]
 801c88e:	b300      	cbz	r0, 801c8d2 <__d2b+0x82>
 801c890:	9a01      	ldr	r2, [sp, #4]
 801c892:	f1c0 0320 	rsb	r3, r0, #32
 801c896:	fa02 f303 	lsl.w	r3, r2, r3
 801c89a:	430b      	orrs	r3, r1
 801c89c:	40c2      	lsrs	r2, r0
 801c89e:	6163      	str	r3, [r4, #20]
 801c8a0:	9201      	str	r2, [sp, #4]
 801c8a2:	9b01      	ldr	r3, [sp, #4]
 801c8a4:	61a3      	str	r3, [r4, #24]
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	bf14      	ite	ne
 801c8aa:	2202      	movne	r2, #2
 801c8ac:	2201      	moveq	r2, #1
 801c8ae:	6122      	str	r2, [r4, #16]
 801c8b0:	b1d5      	cbz	r5, 801c8e8 <__d2b+0x98>
 801c8b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c8b6:	4405      	add	r5, r0
 801c8b8:	f8c9 5000 	str.w	r5, [r9]
 801c8bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c8c0:	f8c8 0000 	str.w	r0, [r8]
 801c8c4:	4620      	mov	r0, r4
 801c8c6:	b003      	add	sp, #12
 801c8c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c8cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c8d0:	e7d5      	b.n	801c87e <__d2b+0x2e>
 801c8d2:	6161      	str	r1, [r4, #20]
 801c8d4:	e7e5      	b.n	801c8a2 <__d2b+0x52>
 801c8d6:	a801      	add	r0, sp, #4
 801c8d8:	f7ff fcde 	bl	801c298 <__lo0bits>
 801c8dc:	9b01      	ldr	r3, [sp, #4]
 801c8de:	6163      	str	r3, [r4, #20]
 801c8e0:	2201      	movs	r2, #1
 801c8e2:	6122      	str	r2, [r4, #16]
 801c8e4:	3020      	adds	r0, #32
 801c8e6:	e7e3      	b.n	801c8b0 <__d2b+0x60>
 801c8e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c8ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c8f0:	f8c9 0000 	str.w	r0, [r9]
 801c8f4:	6918      	ldr	r0, [r3, #16]
 801c8f6:	f7ff fcaf 	bl	801c258 <__hi0bits>
 801c8fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c8fe:	e7df      	b.n	801c8c0 <__d2b+0x70>
 801c900:	08051b10 	.word	0x08051b10
 801c904:	08051b9c 	.word	0x08051b9c

0801c908 <__ratio>:
 801c908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c90c:	4688      	mov	r8, r1
 801c90e:	4669      	mov	r1, sp
 801c910:	4681      	mov	r9, r0
 801c912:	f7ff ff4d 	bl	801c7b0 <__b2d>
 801c916:	a901      	add	r1, sp, #4
 801c918:	4640      	mov	r0, r8
 801c91a:	ec55 4b10 	vmov	r4, r5, d0
 801c91e:	f7ff ff47 	bl	801c7b0 <__b2d>
 801c922:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c926:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801c92a:	eba3 0c02 	sub.w	ip, r3, r2
 801c92e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801c932:	1a9b      	subs	r3, r3, r2
 801c934:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801c938:	ec51 0b10 	vmov	r0, r1, d0
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	bfd6      	itet	le
 801c940:	460a      	movle	r2, r1
 801c942:	462a      	movgt	r2, r5
 801c944:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c948:	468b      	mov	fp, r1
 801c94a:	462f      	mov	r7, r5
 801c94c:	bfd4      	ite	le
 801c94e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801c952:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c956:	4620      	mov	r0, r4
 801c958:	ee10 2a10 	vmov	r2, s0
 801c95c:	465b      	mov	r3, fp
 801c95e:	4639      	mov	r1, r7
 801c960:	f7fb ffe4 	bl	801892c <__aeabi_ddiv>
 801c964:	ec41 0b10 	vmov	d0, r0, r1
 801c968:	b003      	add	sp, #12
 801c96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c96e <__copybits>:
 801c96e:	3901      	subs	r1, #1
 801c970:	b570      	push	{r4, r5, r6, lr}
 801c972:	1149      	asrs	r1, r1, #5
 801c974:	6914      	ldr	r4, [r2, #16]
 801c976:	3101      	adds	r1, #1
 801c978:	f102 0314 	add.w	r3, r2, #20
 801c97c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c980:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c984:	1f05      	subs	r5, r0, #4
 801c986:	42a3      	cmp	r3, r4
 801c988:	d30c      	bcc.n	801c9a4 <__copybits+0x36>
 801c98a:	1aa3      	subs	r3, r4, r2
 801c98c:	3b11      	subs	r3, #17
 801c98e:	f023 0303 	bic.w	r3, r3, #3
 801c992:	3211      	adds	r2, #17
 801c994:	42a2      	cmp	r2, r4
 801c996:	bf88      	it	hi
 801c998:	2300      	movhi	r3, #0
 801c99a:	4418      	add	r0, r3
 801c99c:	2300      	movs	r3, #0
 801c99e:	4288      	cmp	r0, r1
 801c9a0:	d305      	bcc.n	801c9ae <__copybits+0x40>
 801c9a2:	bd70      	pop	{r4, r5, r6, pc}
 801c9a4:	f853 6b04 	ldr.w	r6, [r3], #4
 801c9a8:	f845 6f04 	str.w	r6, [r5, #4]!
 801c9ac:	e7eb      	b.n	801c986 <__copybits+0x18>
 801c9ae:	f840 3b04 	str.w	r3, [r0], #4
 801c9b2:	e7f4      	b.n	801c99e <__copybits+0x30>

0801c9b4 <__any_on>:
 801c9b4:	f100 0214 	add.w	r2, r0, #20
 801c9b8:	6900      	ldr	r0, [r0, #16]
 801c9ba:	114b      	asrs	r3, r1, #5
 801c9bc:	4298      	cmp	r0, r3
 801c9be:	b510      	push	{r4, lr}
 801c9c0:	db11      	blt.n	801c9e6 <__any_on+0x32>
 801c9c2:	dd0a      	ble.n	801c9da <__any_on+0x26>
 801c9c4:	f011 011f 	ands.w	r1, r1, #31
 801c9c8:	d007      	beq.n	801c9da <__any_on+0x26>
 801c9ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c9ce:	fa24 f001 	lsr.w	r0, r4, r1
 801c9d2:	fa00 f101 	lsl.w	r1, r0, r1
 801c9d6:	428c      	cmp	r4, r1
 801c9d8:	d10b      	bne.n	801c9f2 <__any_on+0x3e>
 801c9da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c9de:	4293      	cmp	r3, r2
 801c9e0:	d803      	bhi.n	801c9ea <__any_on+0x36>
 801c9e2:	2000      	movs	r0, #0
 801c9e4:	bd10      	pop	{r4, pc}
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	e7f7      	b.n	801c9da <__any_on+0x26>
 801c9ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c9ee:	2900      	cmp	r1, #0
 801c9f0:	d0f5      	beq.n	801c9de <__any_on+0x2a>
 801c9f2:	2001      	movs	r0, #1
 801c9f4:	e7f6      	b.n	801c9e4 <__any_on+0x30>

0801c9f6 <_calloc_r>:
 801c9f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c9f8:	fba1 2402 	umull	r2, r4, r1, r2
 801c9fc:	b94c      	cbnz	r4, 801ca12 <_calloc_r+0x1c>
 801c9fe:	4611      	mov	r1, r2
 801ca00:	9201      	str	r2, [sp, #4]
 801ca02:	f000 f87b 	bl	801cafc <_malloc_r>
 801ca06:	9a01      	ldr	r2, [sp, #4]
 801ca08:	4605      	mov	r5, r0
 801ca0a:	b930      	cbnz	r0, 801ca1a <_calloc_r+0x24>
 801ca0c:	4628      	mov	r0, r5
 801ca0e:	b003      	add	sp, #12
 801ca10:	bd30      	pop	{r4, r5, pc}
 801ca12:	220c      	movs	r2, #12
 801ca14:	6002      	str	r2, [r0, #0]
 801ca16:	2500      	movs	r5, #0
 801ca18:	e7f8      	b.n	801ca0c <_calloc_r+0x16>
 801ca1a:	4621      	mov	r1, r4
 801ca1c:	f7fc fbb4 	bl	8019188 <memset>
 801ca20:	e7f4      	b.n	801ca0c <_calloc_r+0x16>
	...

0801ca24 <_free_r>:
 801ca24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca26:	2900      	cmp	r1, #0
 801ca28:	d044      	beq.n	801cab4 <_free_r+0x90>
 801ca2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca2e:	9001      	str	r0, [sp, #4]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	f1a1 0404 	sub.w	r4, r1, #4
 801ca36:	bfb8      	it	lt
 801ca38:	18e4      	addlt	r4, r4, r3
 801ca3a:	f000 fab5 	bl	801cfa8 <__malloc_lock>
 801ca3e:	4a1e      	ldr	r2, [pc, #120]	; (801cab8 <_free_r+0x94>)
 801ca40:	9801      	ldr	r0, [sp, #4]
 801ca42:	6813      	ldr	r3, [r2, #0]
 801ca44:	b933      	cbnz	r3, 801ca54 <_free_r+0x30>
 801ca46:	6063      	str	r3, [r4, #4]
 801ca48:	6014      	str	r4, [r2, #0]
 801ca4a:	b003      	add	sp, #12
 801ca4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca50:	f000 bab0 	b.w	801cfb4 <__malloc_unlock>
 801ca54:	42a3      	cmp	r3, r4
 801ca56:	d908      	bls.n	801ca6a <_free_r+0x46>
 801ca58:	6825      	ldr	r5, [r4, #0]
 801ca5a:	1961      	adds	r1, r4, r5
 801ca5c:	428b      	cmp	r3, r1
 801ca5e:	bf01      	itttt	eq
 801ca60:	6819      	ldreq	r1, [r3, #0]
 801ca62:	685b      	ldreq	r3, [r3, #4]
 801ca64:	1949      	addeq	r1, r1, r5
 801ca66:	6021      	streq	r1, [r4, #0]
 801ca68:	e7ed      	b.n	801ca46 <_free_r+0x22>
 801ca6a:	461a      	mov	r2, r3
 801ca6c:	685b      	ldr	r3, [r3, #4]
 801ca6e:	b10b      	cbz	r3, 801ca74 <_free_r+0x50>
 801ca70:	42a3      	cmp	r3, r4
 801ca72:	d9fa      	bls.n	801ca6a <_free_r+0x46>
 801ca74:	6811      	ldr	r1, [r2, #0]
 801ca76:	1855      	adds	r5, r2, r1
 801ca78:	42a5      	cmp	r5, r4
 801ca7a:	d10b      	bne.n	801ca94 <_free_r+0x70>
 801ca7c:	6824      	ldr	r4, [r4, #0]
 801ca7e:	4421      	add	r1, r4
 801ca80:	1854      	adds	r4, r2, r1
 801ca82:	42a3      	cmp	r3, r4
 801ca84:	6011      	str	r1, [r2, #0]
 801ca86:	d1e0      	bne.n	801ca4a <_free_r+0x26>
 801ca88:	681c      	ldr	r4, [r3, #0]
 801ca8a:	685b      	ldr	r3, [r3, #4]
 801ca8c:	6053      	str	r3, [r2, #4]
 801ca8e:	4421      	add	r1, r4
 801ca90:	6011      	str	r1, [r2, #0]
 801ca92:	e7da      	b.n	801ca4a <_free_r+0x26>
 801ca94:	d902      	bls.n	801ca9c <_free_r+0x78>
 801ca96:	230c      	movs	r3, #12
 801ca98:	6003      	str	r3, [r0, #0]
 801ca9a:	e7d6      	b.n	801ca4a <_free_r+0x26>
 801ca9c:	6825      	ldr	r5, [r4, #0]
 801ca9e:	1961      	adds	r1, r4, r5
 801caa0:	428b      	cmp	r3, r1
 801caa2:	bf04      	itt	eq
 801caa4:	6819      	ldreq	r1, [r3, #0]
 801caa6:	685b      	ldreq	r3, [r3, #4]
 801caa8:	6063      	str	r3, [r4, #4]
 801caaa:	bf04      	itt	eq
 801caac:	1949      	addeq	r1, r1, r5
 801caae:	6021      	streq	r1, [r4, #0]
 801cab0:	6054      	str	r4, [r2, #4]
 801cab2:	e7ca      	b.n	801ca4a <_free_r+0x26>
 801cab4:	b003      	add	sp, #12
 801cab6:	bd30      	pop	{r4, r5, pc}
 801cab8:	20000894 	.word	0x20000894

0801cabc <sbrk_aligned>:
 801cabc:	b570      	push	{r4, r5, r6, lr}
 801cabe:	4e0e      	ldr	r6, [pc, #56]	; (801caf8 <sbrk_aligned+0x3c>)
 801cac0:	460c      	mov	r4, r1
 801cac2:	6831      	ldr	r1, [r6, #0]
 801cac4:	4605      	mov	r5, r0
 801cac6:	b911      	cbnz	r1, 801cace <sbrk_aligned+0x12>
 801cac8:	f000 f9f2 	bl	801ceb0 <_sbrk_r>
 801cacc:	6030      	str	r0, [r6, #0]
 801cace:	4621      	mov	r1, r4
 801cad0:	4628      	mov	r0, r5
 801cad2:	f000 f9ed 	bl	801ceb0 <_sbrk_r>
 801cad6:	1c43      	adds	r3, r0, #1
 801cad8:	d00a      	beq.n	801caf0 <sbrk_aligned+0x34>
 801cada:	1cc4      	adds	r4, r0, #3
 801cadc:	f024 0403 	bic.w	r4, r4, #3
 801cae0:	42a0      	cmp	r0, r4
 801cae2:	d007      	beq.n	801caf4 <sbrk_aligned+0x38>
 801cae4:	1a21      	subs	r1, r4, r0
 801cae6:	4628      	mov	r0, r5
 801cae8:	f000 f9e2 	bl	801ceb0 <_sbrk_r>
 801caec:	3001      	adds	r0, #1
 801caee:	d101      	bne.n	801caf4 <sbrk_aligned+0x38>
 801caf0:	f04f 34ff 	mov.w	r4, #4294967295
 801caf4:	4620      	mov	r0, r4
 801caf6:	bd70      	pop	{r4, r5, r6, pc}
 801caf8:	20000898 	.word	0x20000898

0801cafc <_malloc_r>:
 801cafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb00:	1ccd      	adds	r5, r1, #3
 801cb02:	f025 0503 	bic.w	r5, r5, #3
 801cb06:	3508      	adds	r5, #8
 801cb08:	2d0c      	cmp	r5, #12
 801cb0a:	bf38      	it	cc
 801cb0c:	250c      	movcc	r5, #12
 801cb0e:	2d00      	cmp	r5, #0
 801cb10:	4607      	mov	r7, r0
 801cb12:	db01      	blt.n	801cb18 <_malloc_r+0x1c>
 801cb14:	42a9      	cmp	r1, r5
 801cb16:	d905      	bls.n	801cb24 <_malloc_r+0x28>
 801cb18:	230c      	movs	r3, #12
 801cb1a:	603b      	str	r3, [r7, #0]
 801cb1c:	2600      	movs	r6, #0
 801cb1e:	4630      	mov	r0, r6
 801cb20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cb24:	4e2e      	ldr	r6, [pc, #184]	; (801cbe0 <_malloc_r+0xe4>)
 801cb26:	f000 fa3f 	bl	801cfa8 <__malloc_lock>
 801cb2a:	6833      	ldr	r3, [r6, #0]
 801cb2c:	461c      	mov	r4, r3
 801cb2e:	bb34      	cbnz	r4, 801cb7e <_malloc_r+0x82>
 801cb30:	4629      	mov	r1, r5
 801cb32:	4638      	mov	r0, r7
 801cb34:	f7ff ffc2 	bl	801cabc <sbrk_aligned>
 801cb38:	1c43      	adds	r3, r0, #1
 801cb3a:	4604      	mov	r4, r0
 801cb3c:	d14d      	bne.n	801cbda <_malloc_r+0xde>
 801cb3e:	6834      	ldr	r4, [r6, #0]
 801cb40:	4626      	mov	r6, r4
 801cb42:	2e00      	cmp	r6, #0
 801cb44:	d140      	bne.n	801cbc8 <_malloc_r+0xcc>
 801cb46:	6823      	ldr	r3, [r4, #0]
 801cb48:	4631      	mov	r1, r6
 801cb4a:	4638      	mov	r0, r7
 801cb4c:	eb04 0803 	add.w	r8, r4, r3
 801cb50:	f000 f9ae 	bl	801ceb0 <_sbrk_r>
 801cb54:	4580      	cmp	r8, r0
 801cb56:	d13a      	bne.n	801cbce <_malloc_r+0xd2>
 801cb58:	6821      	ldr	r1, [r4, #0]
 801cb5a:	3503      	adds	r5, #3
 801cb5c:	1a6d      	subs	r5, r5, r1
 801cb5e:	f025 0503 	bic.w	r5, r5, #3
 801cb62:	3508      	adds	r5, #8
 801cb64:	2d0c      	cmp	r5, #12
 801cb66:	bf38      	it	cc
 801cb68:	250c      	movcc	r5, #12
 801cb6a:	4629      	mov	r1, r5
 801cb6c:	4638      	mov	r0, r7
 801cb6e:	f7ff ffa5 	bl	801cabc <sbrk_aligned>
 801cb72:	3001      	adds	r0, #1
 801cb74:	d02b      	beq.n	801cbce <_malloc_r+0xd2>
 801cb76:	6823      	ldr	r3, [r4, #0]
 801cb78:	442b      	add	r3, r5
 801cb7a:	6023      	str	r3, [r4, #0]
 801cb7c:	e00e      	b.n	801cb9c <_malloc_r+0xa0>
 801cb7e:	6822      	ldr	r2, [r4, #0]
 801cb80:	1b52      	subs	r2, r2, r5
 801cb82:	d41e      	bmi.n	801cbc2 <_malloc_r+0xc6>
 801cb84:	2a0b      	cmp	r2, #11
 801cb86:	d916      	bls.n	801cbb6 <_malloc_r+0xba>
 801cb88:	1961      	adds	r1, r4, r5
 801cb8a:	42a3      	cmp	r3, r4
 801cb8c:	6025      	str	r5, [r4, #0]
 801cb8e:	bf18      	it	ne
 801cb90:	6059      	strne	r1, [r3, #4]
 801cb92:	6863      	ldr	r3, [r4, #4]
 801cb94:	bf08      	it	eq
 801cb96:	6031      	streq	r1, [r6, #0]
 801cb98:	5162      	str	r2, [r4, r5]
 801cb9a:	604b      	str	r3, [r1, #4]
 801cb9c:	4638      	mov	r0, r7
 801cb9e:	f104 060b 	add.w	r6, r4, #11
 801cba2:	f000 fa07 	bl	801cfb4 <__malloc_unlock>
 801cba6:	f026 0607 	bic.w	r6, r6, #7
 801cbaa:	1d23      	adds	r3, r4, #4
 801cbac:	1af2      	subs	r2, r6, r3
 801cbae:	d0b6      	beq.n	801cb1e <_malloc_r+0x22>
 801cbb0:	1b9b      	subs	r3, r3, r6
 801cbb2:	50a3      	str	r3, [r4, r2]
 801cbb4:	e7b3      	b.n	801cb1e <_malloc_r+0x22>
 801cbb6:	6862      	ldr	r2, [r4, #4]
 801cbb8:	42a3      	cmp	r3, r4
 801cbba:	bf0c      	ite	eq
 801cbbc:	6032      	streq	r2, [r6, #0]
 801cbbe:	605a      	strne	r2, [r3, #4]
 801cbc0:	e7ec      	b.n	801cb9c <_malloc_r+0xa0>
 801cbc2:	4623      	mov	r3, r4
 801cbc4:	6864      	ldr	r4, [r4, #4]
 801cbc6:	e7b2      	b.n	801cb2e <_malloc_r+0x32>
 801cbc8:	4634      	mov	r4, r6
 801cbca:	6876      	ldr	r6, [r6, #4]
 801cbcc:	e7b9      	b.n	801cb42 <_malloc_r+0x46>
 801cbce:	230c      	movs	r3, #12
 801cbd0:	603b      	str	r3, [r7, #0]
 801cbd2:	4638      	mov	r0, r7
 801cbd4:	f000 f9ee 	bl	801cfb4 <__malloc_unlock>
 801cbd8:	e7a1      	b.n	801cb1e <_malloc_r+0x22>
 801cbda:	6025      	str	r5, [r4, #0]
 801cbdc:	e7de      	b.n	801cb9c <_malloc_r+0xa0>
 801cbde:	bf00      	nop
 801cbe0:	20000894 	.word	0x20000894

0801cbe4 <__ssputs_r>:
 801cbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbe8:	688e      	ldr	r6, [r1, #8]
 801cbea:	429e      	cmp	r6, r3
 801cbec:	4682      	mov	sl, r0
 801cbee:	460c      	mov	r4, r1
 801cbf0:	4690      	mov	r8, r2
 801cbf2:	461f      	mov	r7, r3
 801cbf4:	d838      	bhi.n	801cc68 <__ssputs_r+0x84>
 801cbf6:	898a      	ldrh	r2, [r1, #12]
 801cbf8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cbfc:	d032      	beq.n	801cc64 <__ssputs_r+0x80>
 801cbfe:	6825      	ldr	r5, [r4, #0]
 801cc00:	6909      	ldr	r1, [r1, #16]
 801cc02:	eba5 0901 	sub.w	r9, r5, r1
 801cc06:	6965      	ldr	r5, [r4, #20]
 801cc08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc10:	3301      	adds	r3, #1
 801cc12:	444b      	add	r3, r9
 801cc14:	106d      	asrs	r5, r5, #1
 801cc16:	429d      	cmp	r5, r3
 801cc18:	bf38      	it	cc
 801cc1a:	461d      	movcc	r5, r3
 801cc1c:	0553      	lsls	r3, r2, #21
 801cc1e:	d531      	bpl.n	801cc84 <__ssputs_r+0xa0>
 801cc20:	4629      	mov	r1, r5
 801cc22:	f7ff ff6b 	bl	801cafc <_malloc_r>
 801cc26:	4606      	mov	r6, r0
 801cc28:	b950      	cbnz	r0, 801cc40 <__ssputs_r+0x5c>
 801cc2a:	230c      	movs	r3, #12
 801cc2c:	f8ca 3000 	str.w	r3, [sl]
 801cc30:	89a3      	ldrh	r3, [r4, #12]
 801cc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cc36:	81a3      	strh	r3, [r4, #12]
 801cc38:	f04f 30ff 	mov.w	r0, #4294967295
 801cc3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc40:	6921      	ldr	r1, [r4, #16]
 801cc42:	464a      	mov	r2, r9
 801cc44:	f7ff fa08 	bl	801c058 <memcpy>
 801cc48:	89a3      	ldrh	r3, [r4, #12]
 801cc4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc52:	81a3      	strh	r3, [r4, #12]
 801cc54:	6126      	str	r6, [r4, #16]
 801cc56:	6165      	str	r5, [r4, #20]
 801cc58:	444e      	add	r6, r9
 801cc5a:	eba5 0509 	sub.w	r5, r5, r9
 801cc5e:	6026      	str	r6, [r4, #0]
 801cc60:	60a5      	str	r5, [r4, #8]
 801cc62:	463e      	mov	r6, r7
 801cc64:	42be      	cmp	r6, r7
 801cc66:	d900      	bls.n	801cc6a <__ssputs_r+0x86>
 801cc68:	463e      	mov	r6, r7
 801cc6a:	6820      	ldr	r0, [r4, #0]
 801cc6c:	4632      	mov	r2, r6
 801cc6e:	4641      	mov	r1, r8
 801cc70:	f000 f980 	bl	801cf74 <memmove>
 801cc74:	68a3      	ldr	r3, [r4, #8]
 801cc76:	1b9b      	subs	r3, r3, r6
 801cc78:	60a3      	str	r3, [r4, #8]
 801cc7a:	6823      	ldr	r3, [r4, #0]
 801cc7c:	4433      	add	r3, r6
 801cc7e:	6023      	str	r3, [r4, #0]
 801cc80:	2000      	movs	r0, #0
 801cc82:	e7db      	b.n	801cc3c <__ssputs_r+0x58>
 801cc84:	462a      	mov	r2, r5
 801cc86:	f000 f99b 	bl	801cfc0 <_realloc_r>
 801cc8a:	4606      	mov	r6, r0
 801cc8c:	2800      	cmp	r0, #0
 801cc8e:	d1e1      	bne.n	801cc54 <__ssputs_r+0x70>
 801cc90:	6921      	ldr	r1, [r4, #16]
 801cc92:	4650      	mov	r0, sl
 801cc94:	f7ff fec6 	bl	801ca24 <_free_r>
 801cc98:	e7c7      	b.n	801cc2a <__ssputs_r+0x46>
	...

0801cc9c <_svfiprintf_r>:
 801cc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca0:	4698      	mov	r8, r3
 801cca2:	898b      	ldrh	r3, [r1, #12]
 801cca4:	061b      	lsls	r3, r3, #24
 801cca6:	b09d      	sub	sp, #116	; 0x74
 801cca8:	4607      	mov	r7, r0
 801ccaa:	460d      	mov	r5, r1
 801ccac:	4614      	mov	r4, r2
 801ccae:	d50e      	bpl.n	801ccce <_svfiprintf_r+0x32>
 801ccb0:	690b      	ldr	r3, [r1, #16]
 801ccb2:	b963      	cbnz	r3, 801ccce <_svfiprintf_r+0x32>
 801ccb4:	2140      	movs	r1, #64	; 0x40
 801ccb6:	f7ff ff21 	bl	801cafc <_malloc_r>
 801ccba:	6028      	str	r0, [r5, #0]
 801ccbc:	6128      	str	r0, [r5, #16]
 801ccbe:	b920      	cbnz	r0, 801ccca <_svfiprintf_r+0x2e>
 801ccc0:	230c      	movs	r3, #12
 801ccc2:	603b      	str	r3, [r7, #0]
 801ccc4:	f04f 30ff 	mov.w	r0, #4294967295
 801ccc8:	e0d1      	b.n	801ce6e <_svfiprintf_r+0x1d2>
 801ccca:	2340      	movs	r3, #64	; 0x40
 801cccc:	616b      	str	r3, [r5, #20]
 801ccce:	2300      	movs	r3, #0
 801ccd0:	9309      	str	r3, [sp, #36]	; 0x24
 801ccd2:	2320      	movs	r3, #32
 801ccd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ccd8:	f8cd 800c 	str.w	r8, [sp, #12]
 801ccdc:	2330      	movs	r3, #48	; 0x30
 801ccde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ce88 <_svfiprintf_r+0x1ec>
 801cce2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cce6:	f04f 0901 	mov.w	r9, #1
 801ccea:	4623      	mov	r3, r4
 801ccec:	469a      	mov	sl, r3
 801ccee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccf2:	b10a      	cbz	r2, 801ccf8 <_svfiprintf_r+0x5c>
 801ccf4:	2a25      	cmp	r2, #37	; 0x25
 801ccf6:	d1f9      	bne.n	801ccec <_svfiprintf_r+0x50>
 801ccf8:	ebba 0b04 	subs.w	fp, sl, r4
 801ccfc:	d00b      	beq.n	801cd16 <_svfiprintf_r+0x7a>
 801ccfe:	465b      	mov	r3, fp
 801cd00:	4622      	mov	r2, r4
 801cd02:	4629      	mov	r1, r5
 801cd04:	4638      	mov	r0, r7
 801cd06:	f7ff ff6d 	bl	801cbe4 <__ssputs_r>
 801cd0a:	3001      	adds	r0, #1
 801cd0c:	f000 80aa 	beq.w	801ce64 <_svfiprintf_r+0x1c8>
 801cd10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd12:	445a      	add	r2, fp
 801cd14:	9209      	str	r2, [sp, #36]	; 0x24
 801cd16:	f89a 3000 	ldrb.w	r3, [sl]
 801cd1a:	2b00      	cmp	r3, #0
 801cd1c:	f000 80a2 	beq.w	801ce64 <_svfiprintf_r+0x1c8>
 801cd20:	2300      	movs	r3, #0
 801cd22:	f04f 32ff 	mov.w	r2, #4294967295
 801cd26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd2a:	f10a 0a01 	add.w	sl, sl, #1
 801cd2e:	9304      	str	r3, [sp, #16]
 801cd30:	9307      	str	r3, [sp, #28]
 801cd32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd36:	931a      	str	r3, [sp, #104]	; 0x68
 801cd38:	4654      	mov	r4, sl
 801cd3a:	2205      	movs	r2, #5
 801cd3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd40:	4851      	ldr	r0, [pc, #324]	; (801ce88 <_svfiprintf_r+0x1ec>)
 801cd42:	f7fb fabd 	bl	80182c0 <memchr>
 801cd46:	9a04      	ldr	r2, [sp, #16]
 801cd48:	b9d8      	cbnz	r0, 801cd82 <_svfiprintf_r+0xe6>
 801cd4a:	06d0      	lsls	r0, r2, #27
 801cd4c:	bf44      	itt	mi
 801cd4e:	2320      	movmi	r3, #32
 801cd50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd54:	0711      	lsls	r1, r2, #28
 801cd56:	bf44      	itt	mi
 801cd58:	232b      	movmi	r3, #43	; 0x2b
 801cd5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd5e:	f89a 3000 	ldrb.w	r3, [sl]
 801cd62:	2b2a      	cmp	r3, #42	; 0x2a
 801cd64:	d015      	beq.n	801cd92 <_svfiprintf_r+0xf6>
 801cd66:	9a07      	ldr	r2, [sp, #28]
 801cd68:	4654      	mov	r4, sl
 801cd6a:	2000      	movs	r0, #0
 801cd6c:	f04f 0c0a 	mov.w	ip, #10
 801cd70:	4621      	mov	r1, r4
 801cd72:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cd76:	3b30      	subs	r3, #48	; 0x30
 801cd78:	2b09      	cmp	r3, #9
 801cd7a:	d94e      	bls.n	801ce1a <_svfiprintf_r+0x17e>
 801cd7c:	b1b0      	cbz	r0, 801cdac <_svfiprintf_r+0x110>
 801cd7e:	9207      	str	r2, [sp, #28]
 801cd80:	e014      	b.n	801cdac <_svfiprintf_r+0x110>
 801cd82:	eba0 0308 	sub.w	r3, r0, r8
 801cd86:	fa09 f303 	lsl.w	r3, r9, r3
 801cd8a:	4313      	orrs	r3, r2
 801cd8c:	9304      	str	r3, [sp, #16]
 801cd8e:	46a2      	mov	sl, r4
 801cd90:	e7d2      	b.n	801cd38 <_svfiprintf_r+0x9c>
 801cd92:	9b03      	ldr	r3, [sp, #12]
 801cd94:	1d19      	adds	r1, r3, #4
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	9103      	str	r1, [sp, #12]
 801cd9a:	2b00      	cmp	r3, #0
 801cd9c:	bfbb      	ittet	lt
 801cd9e:	425b      	neglt	r3, r3
 801cda0:	f042 0202 	orrlt.w	r2, r2, #2
 801cda4:	9307      	strge	r3, [sp, #28]
 801cda6:	9307      	strlt	r3, [sp, #28]
 801cda8:	bfb8      	it	lt
 801cdaa:	9204      	strlt	r2, [sp, #16]
 801cdac:	7823      	ldrb	r3, [r4, #0]
 801cdae:	2b2e      	cmp	r3, #46	; 0x2e
 801cdb0:	d10c      	bne.n	801cdcc <_svfiprintf_r+0x130>
 801cdb2:	7863      	ldrb	r3, [r4, #1]
 801cdb4:	2b2a      	cmp	r3, #42	; 0x2a
 801cdb6:	d135      	bne.n	801ce24 <_svfiprintf_r+0x188>
 801cdb8:	9b03      	ldr	r3, [sp, #12]
 801cdba:	1d1a      	adds	r2, r3, #4
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	9203      	str	r2, [sp, #12]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	bfb8      	it	lt
 801cdc4:	f04f 33ff 	movlt.w	r3, #4294967295
 801cdc8:	3402      	adds	r4, #2
 801cdca:	9305      	str	r3, [sp, #20]
 801cdcc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ce98 <_svfiprintf_r+0x1fc>
 801cdd0:	7821      	ldrb	r1, [r4, #0]
 801cdd2:	2203      	movs	r2, #3
 801cdd4:	4650      	mov	r0, sl
 801cdd6:	f7fb fa73 	bl	80182c0 <memchr>
 801cdda:	b140      	cbz	r0, 801cdee <_svfiprintf_r+0x152>
 801cddc:	2340      	movs	r3, #64	; 0x40
 801cdde:	eba0 000a 	sub.w	r0, r0, sl
 801cde2:	fa03 f000 	lsl.w	r0, r3, r0
 801cde6:	9b04      	ldr	r3, [sp, #16]
 801cde8:	4303      	orrs	r3, r0
 801cdea:	3401      	adds	r4, #1
 801cdec:	9304      	str	r3, [sp, #16]
 801cdee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cdf2:	4826      	ldr	r0, [pc, #152]	; (801ce8c <_svfiprintf_r+0x1f0>)
 801cdf4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cdf8:	2206      	movs	r2, #6
 801cdfa:	f7fb fa61 	bl	80182c0 <memchr>
 801cdfe:	2800      	cmp	r0, #0
 801ce00:	d038      	beq.n	801ce74 <_svfiprintf_r+0x1d8>
 801ce02:	4b23      	ldr	r3, [pc, #140]	; (801ce90 <_svfiprintf_r+0x1f4>)
 801ce04:	bb1b      	cbnz	r3, 801ce4e <_svfiprintf_r+0x1b2>
 801ce06:	9b03      	ldr	r3, [sp, #12]
 801ce08:	3307      	adds	r3, #7
 801ce0a:	f023 0307 	bic.w	r3, r3, #7
 801ce0e:	3308      	adds	r3, #8
 801ce10:	9303      	str	r3, [sp, #12]
 801ce12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce14:	4433      	add	r3, r6
 801ce16:	9309      	str	r3, [sp, #36]	; 0x24
 801ce18:	e767      	b.n	801ccea <_svfiprintf_r+0x4e>
 801ce1a:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce1e:	460c      	mov	r4, r1
 801ce20:	2001      	movs	r0, #1
 801ce22:	e7a5      	b.n	801cd70 <_svfiprintf_r+0xd4>
 801ce24:	2300      	movs	r3, #0
 801ce26:	3401      	adds	r4, #1
 801ce28:	9305      	str	r3, [sp, #20]
 801ce2a:	4619      	mov	r1, r3
 801ce2c:	f04f 0c0a 	mov.w	ip, #10
 801ce30:	4620      	mov	r0, r4
 801ce32:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce36:	3a30      	subs	r2, #48	; 0x30
 801ce38:	2a09      	cmp	r2, #9
 801ce3a:	d903      	bls.n	801ce44 <_svfiprintf_r+0x1a8>
 801ce3c:	2b00      	cmp	r3, #0
 801ce3e:	d0c5      	beq.n	801cdcc <_svfiprintf_r+0x130>
 801ce40:	9105      	str	r1, [sp, #20]
 801ce42:	e7c3      	b.n	801cdcc <_svfiprintf_r+0x130>
 801ce44:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce48:	4604      	mov	r4, r0
 801ce4a:	2301      	movs	r3, #1
 801ce4c:	e7f0      	b.n	801ce30 <_svfiprintf_r+0x194>
 801ce4e:	ab03      	add	r3, sp, #12
 801ce50:	9300      	str	r3, [sp, #0]
 801ce52:	462a      	mov	r2, r5
 801ce54:	4b0f      	ldr	r3, [pc, #60]	; (801ce94 <_svfiprintf_r+0x1f8>)
 801ce56:	a904      	add	r1, sp, #16
 801ce58:	4638      	mov	r0, r7
 801ce5a:	f7fc fa3d 	bl	80192d8 <_printf_float>
 801ce5e:	1c42      	adds	r2, r0, #1
 801ce60:	4606      	mov	r6, r0
 801ce62:	d1d6      	bne.n	801ce12 <_svfiprintf_r+0x176>
 801ce64:	89ab      	ldrh	r3, [r5, #12]
 801ce66:	065b      	lsls	r3, r3, #25
 801ce68:	f53f af2c 	bmi.w	801ccc4 <_svfiprintf_r+0x28>
 801ce6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ce6e:	b01d      	add	sp, #116	; 0x74
 801ce70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce74:	ab03      	add	r3, sp, #12
 801ce76:	9300      	str	r3, [sp, #0]
 801ce78:	462a      	mov	r2, r5
 801ce7a:	4b06      	ldr	r3, [pc, #24]	; (801ce94 <_svfiprintf_r+0x1f8>)
 801ce7c:	a904      	add	r1, sp, #16
 801ce7e:	4638      	mov	r0, r7
 801ce80:	f7fc fcce 	bl	8019820 <_printf_i>
 801ce84:	e7eb      	b.n	801ce5e <_svfiprintf_r+0x1c2>
 801ce86:	bf00      	nop
 801ce88:	08051cf4 	.word	0x08051cf4
 801ce8c:	08051cfe 	.word	0x08051cfe
 801ce90:	080192d9 	.word	0x080192d9
 801ce94:	0801cbe5 	.word	0x0801cbe5
 801ce98:	08051cfa 	.word	0x08051cfa
 801ce9c:	00000000 	.word	0x00000000

0801cea0 <nan>:
 801cea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801cea8 <nan+0x8>
 801cea4:	4770      	bx	lr
 801cea6:	bf00      	nop
 801cea8:	00000000 	.word	0x00000000
 801ceac:	7ff80000 	.word	0x7ff80000

0801ceb0 <_sbrk_r>:
 801ceb0:	b538      	push	{r3, r4, r5, lr}
 801ceb2:	4d06      	ldr	r5, [pc, #24]	; (801cecc <_sbrk_r+0x1c>)
 801ceb4:	2300      	movs	r3, #0
 801ceb6:	4604      	mov	r4, r0
 801ceb8:	4608      	mov	r0, r1
 801ceba:	602b      	str	r3, [r5, #0]
 801cebc:	f7e8 fe94 	bl	8005be8 <_sbrk>
 801cec0:	1c43      	adds	r3, r0, #1
 801cec2:	d102      	bne.n	801ceca <_sbrk_r+0x1a>
 801cec4:	682b      	ldr	r3, [r5, #0]
 801cec6:	b103      	cbz	r3, 801ceca <_sbrk_r+0x1a>
 801cec8:	6023      	str	r3, [r4, #0]
 801ceca:	bd38      	pop	{r3, r4, r5, pc}
 801cecc:	2000089c 	.word	0x2000089c

0801ced0 <strncmp>:
 801ced0:	b510      	push	{r4, lr}
 801ced2:	b17a      	cbz	r2, 801cef4 <strncmp+0x24>
 801ced4:	4603      	mov	r3, r0
 801ced6:	3901      	subs	r1, #1
 801ced8:	1884      	adds	r4, r0, r2
 801ceda:	f813 0b01 	ldrb.w	r0, [r3], #1
 801cede:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801cee2:	4290      	cmp	r0, r2
 801cee4:	d101      	bne.n	801ceea <strncmp+0x1a>
 801cee6:	42a3      	cmp	r3, r4
 801cee8:	d101      	bne.n	801ceee <strncmp+0x1e>
 801ceea:	1a80      	subs	r0, r0, r2
 801ceec:	bd10      	pop	{r4, pc}
 801ceee:	2800      	cmp	r0, #0
 801cef0:	d1f3      	bne.n	801ceda <strncmp+0xa>
 801cef2:	e7fa      	b.n	801ceea <strncmp+0x1a>
 801cef4:	4610      	mov	r0, r2
 801cef6:	e7f9      	b.n	801ceec <strncmp+0x1c>

0801cef8 <__ascii_wctomb>:
 801cef8:	b149      	cbz	r1, 801cf0e <__ascii_wctomb+0x16>
 801cefa:	2aff      	cmp	r2, #255	; 0xff
 801cefc:	bf85      	ittet	hi
 801cefe:	238a      	movhi	r3, #138	; 0x8a
 801cf00:	6003      	strhi	r3, [r0, #0]
 801cf02:	700a      	strbls	r2, [r1, #0]
 801cf04:	f04f 30ff 	movhi.w	r0, #4294967295
 801cf08:	bf98      	it	ls
 801cf0a:	2001      	movls	r0, #1
 801cf0c:	4770      	bx	lr
 801cf0e:	4608      	mov	r0, r1
 801cf10:	4770      	bx	lr
	...

0801cf14 <__assert_func>:
 801cf14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cf16:	4614      	mov	r4, r2
 801cf18:	461a      	mov	r2, r3
 801cf1a:	4b09      	ldr	r3, [pc, #36]	; (801cf40 <__assert_func+0x2c>)
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	4605      	mov	r5, r0
 801cf20:	68d8      	ldr	r0, [r3, #12]
 801cf22:	b14c      	cbz	r4, 801cf38 <__assert_func+0x24>
 801cf24:	4b07      	ldr	r3, [pc, #28]	; (801cf44 <__assert_func+0x30>)
 801cf26:	9100      	str	r1, [sp, #0]
 801cf28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cf2c:	4906      	ldr	r1, [pc, #24]	; (801cf48 <__assert_func+0x34>)
 801cf2e:	462b      	mov	r3, r5
 801cf30:	f000 f80e 	bl	801cf50 <fiprintf>
 801cf34:	f000 fa8c 	bl	801d450 <abort>
 801cf38:	4b04      	ldr	r3, [pc, #16]	; (801cf4c <__assert_func+0x38>)
 801cf3a:	461c      	mov	r4, r3
 801cf3c:	e7f3      	b.n	801cf26 <__assert_func+0x12>
 801cf3e:	bf00      	nop
 801cf40:	20000064 	.word	0x20000064
 801cf44:	08051d05 	.word	0x08051d05
 801cf48:	08051d12 	.word	0x08051d12
 801cf4c:	08051d40 	.word	0x08051d40

0801cf50 <fiprintf>:
 801cf50:	b40e      	push	{r1, r2, r3}
 801cf52:	b503      	push	{r0, r1, lr}
 801cf54:	4601      	mov	r1, r0
 801cf56:	ab03      	add	r3, sp, #12
 801cf58:	4805      	ldr	r0, [pc, #20]	; (801cf70 <fiprintf+0x20>)
 801cf5a:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf5e:	6800      	ldr	r0, [r0, #0]
 801cf60:	9301      	str	r3, [sp, #4]
 801cf62:	f000 f885 	bl	801d070 <_vfiprintf_r>
 801cf66:	b002      	add	sp, #8
 801cf68:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf6c:	b003      	add	sp, #12
 801cf6e:	4770      	bx	lr
 801cf70:	20000064 	.word	0x20000064

0801cf74 <memmove>:
 801cf74:	4288      	cmp	r0, r1
 801cf76:	b510      	push	{r4, lr}
 801cf78:	eb01 0402 	add.w	r4, r1, r2
 801cf7c:	d902      	bls.n	801cf84 <memmove+0x10>
 801cf7e:	4284      	cmp	r4, r0
 801cf80:	4623      	mov	r3, r4
 801cf82:	d807      	bhi.n	801cf94 <memmove+0x20>
 801cf84:	1e43      	subs	r3, r0, #1
 801cf86:	42a1      	cmp	r1, r4
 801cf88:	d008      	beq.n	801cf9c <memmove+0x28>
 801cf8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cf8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cf92:	e7f8      	b.n	801cf86 <memmove+0x12>
 801cf94:	4402      	add	r2, r0
 801cf96:	4601      	mov	r1, r0
 801cf98:	428a      	cmp	r2, r1
 801cf9a:	d100      	bne.n	801cf9e <memmove+0x2a>
 801cf9c:	bd10      	pop	{r4, pc}
 801cf9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cfa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cfa6:	e7f7      	b.n	801cf98 <memmove+0x24>

0801cfa8 <__malloc_lock>:
 801cfa8:	4801      	ldr	r0, [pc, #4]	; (801cfb0 <__malloc_lock+0x8>)
 801cfaa:	f000 bc11 	b.w	801d7d0 <__retarget_lock_acquire_recursive>
 801cfae:	bf00      	nop
 801cfb0:	200008a0 	.word	0x200008a0

0801cfb4 <__malloc_unlock>:
 801cfb4:	4801      	ldr	r0, [pc, #4]	; (801cfbc <__malloc_unlock+0x8>)
 801cfb6:	f000 bc0c 	b.w	801d7d2 <__retarget_lock_release_recursive>
 801cfba:	bf00      	nop
 801cfbc:	200008a0 	.word	0x200008a0

0801cfc0 <_realloc_r>:
 801cfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfc4:	4680      	mov	r8, r0
 801cfc6:	4614      	mov	r4, r2
 801cfc8:	460e      	mov	r6, r1
 801cfca:	b921      	cbnz	r1, 801cfd6 <_realloc_r+0x16>
 801cfcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cfd0:	4611      	mov	r1, r2
 801cfd2:	f7ff bd93 	b.w	801cafc <_malloc_r>
 801cfd6:	b92a      	cbnz	r2, 801cfe4 <_realloc_r+0x24>
 801cfd8:	f7ff fd24 	bl	801ca24 <_free_r>
 801cfdc:	4625      	mov	r5, r4
 801cfde:	4628      	mov	r0, r5
 801cfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cfe4:	f000 fc5c 	bl	801d8a0 <_malloc_usable_size_r>
 801cfe8:	4284      	cmp	r4, r0
 801cfea:	4607      	mov	r7, r0
 801cfec:	d802      	bhi.n	801cff4 <_realloc_r+0x34>
 801cfee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cff2:	d812      	bhi.n	801d01a <_realloc_r+0x5a>
 801cff4:	4621      	mov	r1, r4
 801cff6:	4640      	mov	r0, r8
 801cff8:	f7ff fd80 	bl	801cafc <_malloc_r>
 801cffc:	4605      	mov	r5, r0
 801cffe:	2800      	cmp	r0, #0
 801d000:	d0ed      	beq.n	801cfde <_realloc_r+0x1e>
 801d002:	42bc      	cmp	r4, r7
 801d004:	4622      	mov	r2, r4
 801d006:	4631      	mov	r1, r6
 801d008:	bf28      	it	cs
 801d00a:	463a      	movcs	r2, r7
 801d00c:	f7ff f824 	bl	801c058 <memcpy>
 801d010:	4631      	mov	r1, r6
 801d012:	4640      	mov	r0, r8
 801d014:	f7ff fd06 	bl	801ca24 <_free_r>
 801d018:	e7e1      	b.n	801cfde <_realloc_r+0x1e>
 801d01a:	4635      	mov	r5, r6
 801d01c:	e7df      	b.n	801cfde <_realloc_r+0x1e>

0801d01e <__sfputc_r>:
 801d01e:	6893      	ldr	r3, [r2, #8]
 801d020:	3b01      	subs	r3, #1
 801d022:	2b00      	cmp	r3, #0
 801d024:	b410      	push	{r4}
 801d026:	6093      	str	r3, [r2, #8]
 801d028:	da08      	bge.n	801d03c <__sfputc_r+0x1e>
 801d02a:	6994      	ldr	r4, [r2, #24]
 801d02c:	42a3      	cmp	r3, r4
 801d02e:	db01      	blt.n	801d034 <__sfputc_r+0x16>
 801d030:	290a      	cmp	r1, #10
 801d032:	d103      	bne.n	801d03c <__sfputc_r+0x1e>
 801d034:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d038:	f000 b94a 	b.w	801d2d0 <__swbuf_r>
 801d03c:	6813      	ldr	r3, [r2, #0]
 801d03e:	1c58      	adds	r0, r3, #1
 801d040:	6010      	str	r0, [r2, #0]
 801d042:	7019      	strb	r1, [r3, #0]
 801d044:	4608      	mov	r0, r1
 801d046:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d04a:	4770      	bx	lr

0801d04c <__sfputs_r>:
 801d04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d04e:	4606      	mov	r6, r0
 801d050:	460f      	mov	r7, r1
 801d052:	4614      	mov	r4, r2
 801d054:	18d5      	adds	r5, r2, r3
 801d056:	42ac      	cmp	r4, r5
 801d058:	d101      	bne.n	801d05e <__sfputs_r+0x12>
 801d05a:	2000      	movs	r0, #0
 801d05c:	e007      	b.n	801d06e <__sfputs_r+0x22>
 801d05e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d062:	463a      	mov	r2, r7
 801d064:	4630      	mov	r0, r6
 801d066:	f7ff ffda 	bl	801d01e <__sfputc_r>
 801d06a:	1c43      	adds	r3, r0, #1
 801d06c:	d1f3      	bne.n	801d056 <__sfputs_r+0xa>
 801d06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d070 <_vfiprintf_r>:
 801d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d074:	460d      	mov	r5, r1
 801d076:	b09d      	sub	sp, #116	; 0x74
 801d078:	4614      	mov	r4, r2
 801d07a:	4698      	mov	r8, r3
 801d07c:	4606      	mov	r6, r0
 801d07e:	b118      	cbz	r0, 801d088 <_vfiprintf_r+0x18>
 801d080:	6983      	ldr	r3, [r0, #24]
 801d082:	b90b      	cbnz	r3, 801d088 <_vfiprintf_r+0x18>
 801d084:	f000 fb06 	bl	801d694 <__sinit>
 801d088:	4b89      	ldr	r3, [pc, #548]	; (801d2b0 <_vfiprintf_r+0x240>)
 801d08a:	429d      	cmp	r5, r3
 801d08c:	d11b      	bne.n	801d0c6 <_vfiprintf_r+0x56>
 801d08e:	6875      	ldr	r5, [r6, #4]
 801d090:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d092:	07d9      	lsls	r1, r3, #31
 801d094:	d405      	bmi.n	801d0a2 <_vfiprintf_r+0x32>
 801d096:	89ab      	ldrh	r3, [r5, #12]
 801d098:	059a      	lsls	r2, r3, #22
 801d09a:	d402      	bmi.n	801d0a2 <_vfiprintf_r+0x32>
 801d09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d09e:	f000 fb97 	bl	801d7d0 <__retarget_lock_acquire_recursive>
 801d0a2:	89ab      	ldrh	r3, [r5, #12]
 801d0a4:	071b      	lsls	r3, r3, #28
 801d0a6:	d501      	bpl.n	801d0ac <_vfiprintf_r+0x3c>
 801d0a8:	692b      	ldr	r3, [r5, #16]
 801d0aa:	b9eb      	cbnz	r3, 801d0e8 <_vfiprintf_r+0x78>
 801d0ac:	4629      	mov	r1, r5
 801d0ae:	4630      	mov	r0, r6
 801d0b0:	f000 f960 	bl	801d374 <__swsetup_r>
 801d0b4:	b1c0      	cbz	r0, 801d0e8 <_vfiprintf_r+0x78>
 801d0b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d0b8:	07dc      	lsls	r4, r3, #31
 801d0ba:	d50e      	bpl.n	801d0da <_vfiprintf_r+0x6a>
 801d0bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d0c0:	b01d      	add	sp, #116	; 0x74
 801d0c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0c6:	4b7b      	ldr	r3, [pc, #492]	; (801d2b4 <_vfiprintf_r+0x244>)
 801d0c8:	429d      	cmp	r5, r3
 801d0ca:	d101      	bne.n	801d0d0 <_vfiprintf_r+0x60>
 801d0cc:	68b5      	ldr	r5, [r6, #8]
 801d0ce:	e7df      	b.n	801d090 <_vfiprintf_r+0x20>
 801d0d0:	4b79      	ldr	r3, [pc, #484]	; (801d2b8 <_vfiprintf_r+0x248>)
 801d0d2:	429d      	cmp	r5, r3
 801d0d4:	bf08      	it	eq
 801d0d6:	68f5      	ldreq	r5, [r6, #12]
 801d0d8:	e7da      	b.n	801d090 <_vfiprintf_r+0x20>
 801d0da:	89ab      	ldrh	r3, [r5, #12]
 801d0dc:	0598      	lsls	r0, r3, #22
 801d0de:	d4ed      	bmi.n	801d0bc <_vfiprintf_r+0x4c>
 801d0e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d0e2:	f000 fb76 	bl	801d7d2 <__retarget_lock_release_recursive>
 801d0e6:	e7e9      	b.n	801d0bc <_vfiprintf_r+0x4c>
 801d0e8:	2300      	movs	r3, #0
 801d0ea:	9309      	str	r3, [sp, #36]	; 0x24
 801d0ec:	2320      	movs	r3, #32
 801d0ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d0f2:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0f6:	2330      	movs	r3, #48	; 0x30
 801d0f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d2bc <_vfiprintf_r+0x24c>
 801d0fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d100:	f04f 0901 	mov.w	r9, #1
 801d104:	4623      	mov	r3, r4
 801d106:	469a      	mov	sl, r3
 801d108:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d10c:	b10a      	cbz	r2, 801d112 <_vfiprintf_r+0xa2>
 801d10e:	2a25      	cmp	r2, #37	; 0x25
 801d110:	d1f9      	bne.n	801d106 <_vfiprintf_r+0x96>
 801d112:	ebba 0b04 	subs.w	fp, sl, r4
 801d116:	d00b      	beq.n	801d130 <_vfiprintf_r+0xc0>
 801d118:	465b      	mov	r3, fp
 801d11a:	4622      	mov	r2, r4
 801d11c:	4629      	mov	r1, r5
 801d11e:	4630      	mov	r0, r6
 801d120:	f7ff ff94 	bl	801d04c <__sfputs_r>
 801d124:	3001      	adds	r0, #1
 801d126:	f000 80aa 	beq.w	801d27e <_vfiprintf_r+0x20e>
 801d12a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d12c:	445a      	add	r2, fp
 801d12e:	9209      	str	r2, [sp, #36]	; 0x24
 801d130:	f89a 3000 	ldrb.w	r3, [sl]
 801d134:	2b00      	cmp	r3, #0
 801d136:	f000 80a2 	beq.w	801d27e <_vfiprintf_r+0x20e>
 801d13a:	2300      	movs	r3, #0
 801d13c:	f04f 32ff 	mov.w	r2, #4294967295
 801d140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d144:	f10a 0a01 	add.w	sl, sl, #1
 801d148:	9304      	str	r3, [sp, #16]
 801d14a:	9307      	str	r3, [sp, #28]
 801d14c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d150:	931a      	str	r3, [sp, #104]	; 0x68
 801d152:	4654      	mov	r4, sl
 801d154:	2205      	movs	r2, #5
 801d156:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d15a:	4858      	ldr	r0, [pc, #352]	; (801d2bc <_vfiprintf_r+0x24c>)
 801d15c:	f7fb f8b0 	bl	80182c0 <memchr>
 801d160:	9a04      	ldr	r2, [sp, #16]
 801d162:	b9d8      	cbnz	r0, 801d19c <_vfiprintf_r+0x12c>
 801d164:	06d1      	lsls	r1, r2, #27
 801d166:	bf44      	itt	mi
 801d168:	2320      	movmi	r3, #32
 801d16a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d16e:	0713      	lsls	r3, r2, #28
 801d170:	bf44      	itt	mi
 801d172:	232b      	movmi	r3, #43	; 0x2b
 801d174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d178:	f89a 3000 	ldrb.w	r3, [sl]
 801d17c:	2b2a      	cmp	r3, #42	; 0x2a
 801d17e:	d015      	beq.n	801d1ac <_vfiprintf_r+0x13c>
 801d180:	9a07      	ldr	r2, [sp, #28]
 801d182:	4654      	mov	r4, sl
 801d184:	2000      	movs	r0, #0
 801d186:	f04f 0c0a 	mov.w	ip, #10
 801d18a:	4621      	mov	r1, r4
 801d18c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d190:	3b30      	subs	r3, #48	; 0x30
 801d192:	2b09      	cmp	r3, #9
 801d194:	d94e      	bls.n	801d234 <_vfiprintf_r+0x1c4>
 801d196:	b1b0      	cbz	r0, 801d1c6 <_vfiprintf_r+0x156>
 801d198:	9207      	str	r2, [sp, #28]
 801d19a:	e014      	b.n	801d1c6 <_vfiprintf_r+0x156>
 801d19c:	eba0 0308 	sub.w	r3, r0, r8
 801d1a0:	fa09 f303 	lsl.w	r3, r9, r3
 801d1a4:	4313      	orrs	r3, r2
 801d1a6:	9304      	str	r3, [sp, #16]
 801d1a8:	46a2      	mov	sl, r4
 801d1aa:	e7d2      	b.n	801d152 <_vfiprintf_r+0xe2>
 801d1ac:	9b03      	ldr	r3, [sp, #12]
 801d1ae:	1d19      	adds	r1, r3, #4
 801d1b0:	681b      	ldr	r3, [r3, #0]
 801d1b2:	9103      	str	r1, [sp, #12]
 801d1b4:	2b00      	cmp	r3, #0
 801d1b6:	bfbb      	ittet	lt
 801d1b8:	425b      	neglt	r3, r3
 801d1ba:	f042 0202 	orrlt.w	r2, r2, #2
 801d1be:	9307      	strge	r3, [sp, #28]
 801d1c0:	9307      	strlt	r3, [sp, #28]
 801d1c2:	bfb8      	it	lt
 801d1c4:	9204      	strlt	r2, [sp, #16]
 801d1c6:	7823      	ldrb	r3, [r4, #0]
 801d1c8:	2b2e      	cmp	r3, #46	; 0x2e
 801d1ca:	d10c      	bne.n	801d1e6 <_vfiprintf_r+0x176>
 801d1cc:	7863      	ldrb	r3, [r4, #1]
 801d1ce:	2b2a      	cmp	r3, #42	; 0x2a
 801d1d0:	d135      	bne.n	801d23e <_vfiprintf_r+0x1ce>
 801d1d2:	9b03      	ldr	r3, [sp, #12]
 801d1d4:	1d1a      	adds	r2, r3, #4
 801d1d6:	681b      	ldr	r3, [r3, #0]
 801d1d8:	9203      	str	r2, [sp, #12]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	bfb8      	it	lt
 801d1de:	f04f 33ff 	movlt.w	r3, #4294967295
 801d1e2:	3402      	adds	r4, #2
 801d1e4:	9305      	str	r3, [sp, #20]
 801d1e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d2cc <_vfiprintf_r+0x25c>
 801d1ea:	7821      	ldrb	r1, [r4, #0]
 801d1ec:	2203      	movs	r2, #3
 801d1ee:	4650      	mov	r0, sl
 801d1f0:	f7fb f866 	bl	80182c0 <memchr>
 801d1f4:	b140      	cbz	r0, 801d208 <_vfiprintf_r+0x198>
 801d1f6:	2340      	movs	r3, #64	; 0x40
 801d1f8:	eba0 000a 	sub.w	r0, r0, sl
 801d1fc:	fa03 f000 	lsl.w	r0, r3, r0
 801d200:	9b04      	ldr	r3, [sp, #16]
 801d202:	4303      	orrs	r3, r0
 801d204:	3401      	adds	r4, #1
 801d206:	9304      	str	r3, [sp, #16]
 801d208:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d20c:	482c      	ldr	r0, [pc, #176]	; (801d2c0 <_vfiprintf_r+0x250>)
 801d20e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d212:	2206      	movs	r2, #6
 801d214:	f7fb f854 	bl	80182c0 <memchr>
 801d218:	2800      	cmp	r0, #0
 801d21a:	d03f      	beq.n	801d29c <_vfiprintf_r+0x22c>
 801d21c:	4b29      	ldr	r3, [pc, #164]	; (801d2c4 <_vfiprintf_r+0x254>)
 801d21e:	bb1b      	cbnz	r3, 801d268 <_vfiprintf_r+0x1f8>
 801d220:	9b03      	ldr	r3, [sp, #12]
 801d222:	3307      	adds	r3, #7
 801d224:	f023 0307 	bic.w	r3, r3, #7
 801d228:	3308      	adds	r3, #8
 801d22a:	9303      	str	r3, [sp, #12]
 801d22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d22e:	443b      	add	r3, r7
 801d230:	9309      	str	r3, [sp, #36]	; 0x24
 801d232:	e767      	b.n	801d104 <_vfiprintf_r+0x94>
 801d234:	fb0c 3202 	mla	r2, ip, r2, r3
 801d238:	460c      	mov	r4, r1
 801d23a:	2001      	movs	r0, #1
 801d23c:	e7a5      	b.n	801d18a <_vfiprintf_r+0x11a>
 801d23e:	2300      	movs	r3, #0
 801d240:	3401      	adds	r4, #1
 801d242:	9305      	str	r3, [sp, #20]
 801d244:	4619      	mov	r1, r3
 801d246:	f04f 0c0a 	mov.w	ip, #10
 801d24a:	4620      	mov	r0, r4
 801d24c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d250:	3a30      	subs	r2, #48	; 0x30
 801d252:	2a09      	cmp	r2, #9
 801d254:	d903      	bls.n	801d25e <_vfiprintf_r+0x1ee>
 801d256:	2b00      	cmp	r3, #0
 801d258:	d0c5      	beq.n	801d1e6 <_vfiprintf_r+0x176>
 801d25a:	9105      	str	r1, [sp, #20]
 801d25c:	e7c3      	b.n	801d1e6 <_vfiprintf_r+0x176>
 801d25e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d262:	4604      	mov	r4, r0
 801d264:	2301      	movs	r3, #1
 801d266:	e7f0      	b.n	801d24a <_vfiprintf_r+0x1da>
 801d268:	ab03      	add	r3, sp, #12
 801d26a:	9300      	str	r3, [sp, #0]
 801d26c:	462a      	mov	r2, r5
 801d26e:	4b16      	ldr	r3, [pc, #88]	; (801d2c8 <_vfiprintf_r+0x258>)
 801d270:	a904      	add	r1, sp, #16
 801d272:	4630      	mov	r0, r6
 801d274:	f7fc f830 	bl	80192d8 <_printf_float>
 801d278:	4607      	mov	r7, r0
 801d27a:	1c78      	adds	r0, r7, #1
 801d27c:	d1d6      	bne.n	801d22c <_vfiprintf_r+0x1bc>
 801d27e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d280:	07d9      	lsls	r1, r3, #31
 801d282:	d405      	bmi.n	801d290 <_vfiprintf_r+0x220>
 801d284:	89ab      	ldrh	r3, [r5, #12]
 801d286:	059a      	lsls	r2, r3, #22
 801d288:	d402      	bmi.n	801d290 <_vfiprintf_r+0x220>
 801d28a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d28c:	f000 faa1 	bl	801d7d2 <__retarget_lock_release_recursive>
 801d290:	89ab      	ldrh	r3, [r5, #12]
 801d292:	065b      	lsls	r3, r3, #25
 801d294:	f53f af12 	bmi.w	801d0bc <_vfiprintf_r+0x4c>
 801d298:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d29a:	e711      	b.n	801d0c0 <_vfiprintf_r+0x50>
 801d29c:	ab03      	add	r3, sp, #12
 801d29e:	9300      	str	r3, [sp, #0]
 801d2a0:	462a      	mov	r2, r5
 801d2a2:	4b09      	ldr	r3, [pc, #36]	; (801d2c8 <_vfiprintf_r+0x258>)
 801d2a4:	a904      	add	r1, sp, #16
 801d2a6:	4630      	mov	r0, r6
 801d2a8:	f7fc faba 	bl	8019820 <_printf_i>
 801d2ac:	e7e4      	b.n	801d278 <_vfiprintf_r+0x208>
 801d2ae:	bf00      	nop
 801d2b0:	08051d64 	.word	0x08051d64
 801d2b4:	08051d84 	.word	0x08051d84
 801d2b8:	08051d44 	.word	0x08051d44
 801d2bc:	08051cf4 	.word	0x08051cf4
 801d2c0:	08051cfe 	.word	0x08051cfe
 801d2c4:	080192d9 	.word	0x080192d9
 801d2c8:	0801d04d 	.word	0x0801d04d
 801d2cc:	08051cfa 	.word	0x08051cfa

0801d2d0 <__swbuf_r>:
 801d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2d2:	460e      	mov	r6, r1
 801d2d4:	4614      	mov	r4, r2
 801d2d6:	4605      	mov	r5, r0
 801d2d8:	b118      	cbz	r0, 801d2e2 <__swbuf_r+0x12>
 801d2da:	6983      	ldr	r3, [r0, #24]
 801d2dc:	b90b      	cbnz	r3, 801d2e2 <__swbuf_r+0x12>
 801d2de:	f000 f9d9 	bl	801d694 <__sinit>
 801d2e2:	4b21      	ldr	r3, [pc, #132]	; (801d368 <__swbuf_r+0x98>)
 801d2e4:	429c      	cmp	r4, r3
 801d2e6:	d12b      	bne.n	801d340 <__swbuf_r+0x70>
 801d2e8:	686c      	ldr	r4, [r5, #4]
 801d2ea:	69a3      	ldr	r3, [r4, #24]
 801d2ec:	60a3      	str	r3, [r4, #8]
 801d2ee:	89a3      	ldrh	r3, [r4, #12]
 801d2f0:	071a      	lsls	r2, r3, #28
 801d2f2:	d52f      	bpl.n	801d354 <__swbuf_r+0x84>
 801d2f4:	6923      	ldr	r3, [r4, #16]
 801d2f6:	b36b      	cbz	r3, 801d354 <__swbuf_r+0x84>
 801d2f8:	6923      	ldr	r3, [r4, #16]
 801d2fa:	6820      	ldr	r0, [r4, #0]
 801d2fc:	1ac0      	subs	r0, r0, r3
 801d2fe:	6963      	ldr	r3, [r4, #20]
 801d300:	b2f6      	uxtb	r6, r6
 801d302:	4283      	cmp	r3, r0
 801d304:	4637      	mov	r7, r6
 801d306:	dc04      	bgt.n	801d312 <__swbuf_r+0x42>
 801d308:	4621      	mov	r1, r4
 801d30a:	4628      	mov	r0, r5
 801d30c:	f000 f92e 	bl	801d56c <_fflush_r>
 801d310:	bb30      	cbnz	r0, 801d360 <__swbuf_r+0x90>
 801d312:	68a3      	ldr	r3, [r4, #8]
 801d314:	3b01      	subs	r3, #1
 801d316:	60a3      	str	r3, [r4, #8]
 801d318:	6823      	ldr	r3, [r4, #0]
 801d31a:	1c5a      	adds	r2, r3, #1
 801d31c:	6022      	str	r2, [r4, #0]
 801d31e:	701e      	strb	r6, [r3, #0]
 801d320:	6963      	ldr	r3, [r4, #20]
 801d322:	3001      	adds	r0, #1
 801d324:	4283      	cmp	r3, r0
 801d326:	d004      	beq.n	801d332 <__swbuf_r+0x62>
 801d328:	89a3      	ldrh	r3, [r4, #12]
 801d32a:	07db      	lsls	r3, r3, #31
 801d32c:	d506      	bpl.n	801d33c <__swbuf_r+0x6c>
 801d32e:	2e0a      	cmp	r6, #10
 801d330:	d104      	bne.n	801d33c <__swbuf_r+0x6c>
 801d332:	4621      	mov	r1, r4
 801d334:	4628      	mov	r0, r5
 801d336:	f000 f919 	bl	801d56c <_fflush_r>
 801d33a:	b988      	cbnz	r0, 801d360 <__swbuf_r+0x90>
 801d33c:	4638      	mov	r0, r7
 801d33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d340:	4b0a      	ldr	r3, [pc, #40]	; (801d36c <__swbuf_r+0x9c>)
 801d342:	429c      	cmp	r4, r3
 801d344:	d101      	bne.n	801d34a <__swbuf_r+0x7a>
 801d346:	68ac      	ldr	r4, [r5, #8]
 801d348:	e7cf      	b.n	801d2ea <__swbuf_r+0x1a>
 801d34a:	4b09      	ldr	r3, [pc, #36]	; (801d370 <__swbuf_r+0xa0>)
 801d34c:	429c      	cmp	r4, r3
 801d34e:	bf08      	it	eq
 801d350:	68ec      	ldreq	r4, [r5, #12]
 801d352:	e7ca      	b.n	801d2ea <__swbuf_r+0x1a>
 801d354:	4621      	mov	r1, r4
 801d356:	4628      	mov	r0, r5
 801d358:	f000 f80c 	bl	801d374 <__swsetup_r>
 801d35c:	2800      	cmp	r0, #0
 801d35e:	d0cb      	beq.n	801d2f8 <__swbuf_r+0x28>
 801d360:	f04f 37ff 	mov.w	r7, #4294967295
 801d364:	e7ea      	b.n	801d33c <__swbuf_r+0x6c>
 801d366:	bf00      	nop
 801d368:	08051d64 	.word	0x08051d64
 801d36c:	08051d84 	.word	0x08051d84
 801d370:	08051d44 	.word	0x08051d44

0801d374 <__swsetup_r>:
 801d374:	4b32      	ldr	r3, [pc, #200]	; (801d440 <__swsetup_r+0xcc>)
 801d376:	b570      	push	{r4, r5, r6, lr}
 801d378:	681d      	ldr	r5, [r3, #0]
 801d37a:	4606      	mov	r6, r0
 801d37c:	460c      	mov	r4, r1
 801d37e:	b125      	cbz	r5, 801d38a <__swsetup_r+0x16>
 801d380:	69ab      	ldr	r3, [r5, #24]
 801d382:	b913      	cbnz	r3, 801d38a <__swsetup_r+0x16>
 801d384:	4628      	mov	r0, r5
 801d386:	f000 f985 	bl	801d694 <__sinit>
 801d38a:	4b2e      	ldr	r3, [pc, #184]	; (801d444 <__swsetup_r+0xd0>)
 801d38c:	429c      	cmp	r4, r3
 801d38e:	d10f      	bne.n	801d3b0 <__swsetup_r+0x3c>
 801d390:	686c      	ldr	r4, [r5, #4]
 801d392:	89a3      	ldrh	r3, [r4, #12]
 801d394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d398:	0719      	lsls	r1, r3, #28
 801d39a:	d42c      	bmi.n	801d3f6 <__swsetup_r+0x82>
 801d39c:	06dd      	lsls	r5, r3, #27
 801d39e:	d411      	bmi.n	801d3c4 <__swsetup_r+0x50>
 801d3a0:	2309      	movs	r3, #9
 801d3a2:	6033      	str	r3, [r6, #0]
 801d3a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d3a8:	81a3      	strh	r3, [r4, #12]
 801d3aa:	f04f 30ff 	mov.w	r0, #4294967295
 801d3ae:	e03e      	b.n	801d42e <__swsetup_r+0xba>
 801d3b0:	4b25      	ldr	r3, [pc, #148]	; (801d448 <__swsetup_r+0xd4>)
 801d3b2:	429c      	cmp	r4, r3
 801d3b4:	d101      	bne.n	801d3ba <__swsetup_r+0x46>
 801d3b6:	68ac      	ldr	r4, [r5, #8]
 801d3b8:	e7eb      	b.n	801d392 <__swsetup_r+0x1e>
 801d3ba:	4b24      	ldr	r3, [pc, #144]	; (801d44c <__swsetup_r+0xd8>)
 801d3bc:	429c      	cmp	r4, r3
 801d3be:	bf08      	it	eq
 801d3c0:	68ec      	ldreq	r4, [r5, #12]
 801d3c2:	e7e6      	b.n	801d392 <__swsetup_r+0x1e>
 801d3c4:	0758      	lsls	r0, r3, #29
 801d3c6:	d512      	bpl.n	801d3ee <__swsetup_r+0x7a>
 801d3c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d3ca:	b141      	cbz	r1, 801d3de <__swsetup_r+0x6a>
 801d3cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d3d0:	4299      	cmp	r1, r3
 801d3d2:	d002      	beq.n	801d3da <__swsetup_r+0x66>
 801d3d4:	4630      	mov	r0, r6
 801d3d6:	f7ff fb25 	bl	801ca24 <_free_r>
 801d3da:	2300      	movs	r3, #0
 801d3dc:	6363      	str	r3, [r4, #52]	; 0x34
 801d3de:	89a3      	ldrh	r3, [r4, #12]
 801d3e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d3e4:	81a3      	strh	r3, [r4, #12]
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	6063      	str	r3, [r4, #4]
 801d3ea:	6923      	ldr	r3, [r4, #16]
 801d3ec:	6023      	str	r3, [r4, #0]
 801d3ee:	89a3      	ldrh	r3, [r4, #12]
 801d3f0:	f043 0308 	orr.w	r3, r3, #8
 801d3f4:	81a3      	strh	r3, [r4, #12]
 801d3f6:	6923      	ldr	r3, [r4, #16]
 801d3f8:	b94b      	cbnz	r3, 801d40e <__swsetup_r+0x9a>
 801d3fa:	89a3      	ldrh	r3, [r4, #12]
 801d3fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d404:	d003      	beq.n	801d40e <__swsetup_r+0x9a>
 801d406:	4621      	mov	r1, r4
 801d408:	4630      	mov	r0, r6
 801d40a:	f000 fa09 	bl	801d820 <__smakebuf_r>
 801d40e:	89a0      	ldrh	r0, [r4, #12]
 801d410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d414:	f010 0301 	ands.w	r3, r0, #1
 801d418:	d00a      	beq.n	801d430 <__swsetup_r+0xbc>
 801d41a:	2300      	movs	r3, #0
 801d41c:	60a3      	str	r3, [r4, #8]
 801d41e:	6963      	ldr	r3, [r4, #20]
 801d420:	425b      	negs	r3, r3
 801d422:	61a3      	str	r3, [r4, #24]
 801d424:	6923      	ldr	r3, [r4, #16]
 801d426:	b943      	cbnz	r3, 801d43a <__swsetup_r+0xc6>
 801d428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d42c:	d1ba      	bne.n	801d3a4 <__swsetup_r+0x30>
 801d42e:	bd70      	pop	{r4, r5, r6, pc}
 801d430:	0781      	lsls	r1, r0, #30
 801d432:	bf58      	it	pl
 801d434:	6963      	ldrpl	r3, [r4, #20]
 801d436:	60a3      	str	r3, [r4, #8]
 801d438:	e7f4      	b.n	801d424 <__swsetup_r+0xb0>
 801d43a:	2000      	movs	r0, #0
 801d43c:	e7f7      	b.n	801d42e <__swsetup_r+0xba>
 801d43e:	bf00      	nop
 801d440:	20000064 	.word	0x20000064
 801d444:	08051d64 	.word	0x08051d64
 801d448:	08051d84 	.word	0x08051d84
 801d44c:	08051d44 	.word	0x08051d44

0801d450 <abort>:
 801d450:	b508      	push	{r3, lr}
 801d452:	2006      	movs	r0, #6
 801d454:	f000 fa54 	bl	801d900 <raise>
 801d458:	2001      	movs	r0, #1
 801d45a:	f7e8 fada 	bl	8005a12 <_exit>
	...

0801d460 <__sflush_r>:
 801d460:	898a      	ldrh	r2, [r1, #12]
 801d462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d466:	4605      	mov	r5, r0
 801d468:	0710      	lsls	r0, r2, #28
 801d46a:	460c      	mov	r4, r1
 801d46c:	d458      	bmi.n	801d520 <__sflush_r+0xc0>
 801d46e:	684b      	ldr	r3, [r1, #4]
 801d470:	2b00      	cmp	r3, #0
 801d472:	dc05      	bgt.n	801d480 <__sflush_r+0x20>
 801d474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d476:	2b00      	cmp	r3, #0
 801d478:	dc02      	bgt.n	801d480 <__sflush_r+0x20>
 801d47a:	2000      	movs	r0, #0
 801d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d482:	2e00      	cmp	r6, #0
 801d484:	d0f9      	beq.n	801d47a <__sflush_r+0x1a>
 801d486:	2300      	movs	r3, #0
 801d488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d48c:	682f      	ldr	r7, [r5, #0]
 801d48e:	602b      	str	r3, [r5, #0]
 801d490:	d032      	beq.n	801d4f8 <__sflush_r+0x98>
 801d492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d494:	89a3      	ldrh	r3, [r4, #12]
 801d496:	075a      	lsls	r2, r3, #29
 801d498:	d505      	bpl.n	801d4a6 <__sflush_r+0x46>
 801d49a:	6863      	ldr	r3, [r4, #4]
 801d49c:	1ac0      	subs	r0, r0, r3
 801d49e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4a0:	b10b      	cbz	r3, 801d4a6 <__sflush_r+0x46>
 801d4a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4a4:	1ac0      	subs	r0, r0, r3
 801d4a6:	2300      	movs	r3, #0
 801d4a8:	4602      	mov	r2, r0
 801d4aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4ac:	6a21      	ldr	r1, [r4, #32]
 801d4ae:	4628      	mov	r0, r5
 801d4b0:	47b0      	blx	r6
 801d4b2:	1c43      	adds	r3, r0, #1
 801d4b4:	89a3      	ldrh	r3, [r4, #12]
 801d4b6:	d106      	bne.n	801d4c6 <__sflush_r+0x66>
 801d4b8:	6829      	ldr	r1, [r5, #0]
 801d4ba:	291d      	cmp	r1, #29
 801d4bc:	d82c      	bhi.n	801d518 <__sflush_r+0xb8>
 801d4be:	4a2a      	ldr	r2, [pc, #168]	; (801d568 <__sflush_r+0x108>)
 801d4c0:	40ca      	lsrs	r2, r1
 801d4c2:	07d6      	lsls	r6, r2, #31
 801d4c4:	d528      	bpl.n	801d518 <__sflush_r+0xb8>
 801d4c6:	2200      	movs	r2, #0
 801d4c8:	6062      	str	r2, [r4, #4]
 801d4ca:	04d9      	lsls	r1, r3, #19
 801d4cc:	6922      	ldr	r2, [r4, #16]
 801d4ce:	6022      	str	r2, [r4, #0]
 801d4d0:	d504      	bpl.n	801d4dc <__sflush_r+0x7c>
 801d4d2:	1c42      	adds	r2, r0, #1
 801d4d4:	d101      	bne.n	801d4da <__sflush_r+0x7a>
 801d4d6:	682b      	ldr	r3, [r5, #0]
 801d4d8:	b903      	cbnz	r3, 801d4dc <__sflush_r+0x7c>
 801d4da:	6560      	str	r0, [r4, #84]	; 0x54
 801d4dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4de:	602f      	str	r7, [r5, #0]
 801d4e0:	2900      	cmp	r1, #0
 801d4e2:	d0ca      	beq.n	801d47a <__sflush_r+0x1a>
 801d4e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4e8:	4299      	cmp	r1, r3
 801d4ea:	d002      	beq.n	801d4f2 <__sflush_r+0x92>
 801d4ec:	4628      	mov	r0, r5
 801d4ee:	f7ff fa99 	bl	801ca24 <_free_r>
 801d4f2:	2000      	movs	r0, #0
 801d4f4:	6360      	str	r0, [r4, #52]	; 0x34
 801d4f6:	e7c1      	b.n	801d47c <__sflush_r+0x1c>
 801d4f8:	6a21      	ldr	r1, [r4, #32]
 801d4fa:	2301      	movs	r3, #1
 801d4fc:	4628      	mov	r0, r5
 801d4fe:	47b0      	blx	r6
 801d500:	1c41      	adds	r1, r0, #1
 801d502:	d1c7      	bne.n	801d494 <__sflush_r+0x34>
 801d504:	682b      	ldr	r3, [r5, #0]
 801d506:	2b00      	cmp	r3, #0
 801d508:	d0c4      	beq.n	801d494 <__sflush_r+0x34>
 801d50a:	2b1d      	cmp	r3, #29
 801d50c:	d001      	beq.n	801d512 <__sflush_r+0xb2>
 801d50e:	2b16      	cmp	r3, #22
 801d510:	d101      	bne.n	801d516 <__sflush_r+0xb6>
 801d512:	602f      	str	r7, [r5, #0]
 801d514:	e7b1      	b.n	801d47a <__sflush_r+0x1a>
 801d516:	89a3      	ldrh	r3, [r4, #12]
 801d518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d51c:	81a3      	strh	r3, [r4, #12]
 801d51e:	e7ad      	b.n	801d47c <__sflush_r+0x1c>
 801d520:	690f      	ldr	r7, [r1, #16]
 801d522:	2f00      	cmp	r7, #0
 801d524:	d0a9      	beq.n	801d47a <__sflush_r+0x1a>
 801d526:	0793      	lsls	r3, r2, #30
 801d528:	680e      	ldr	r6, [r1, #0]
 801d52a:	bf08      	it	eq
 801d52c:	694b      	ldreq	r3, [r1, #20]
 801d52e:	600f      	str	r7, [r1, #0]
 801d530:	bf18      	it	ne
 801d532:	2300      	movne	r3, #0
 801d534:	eba6 0807 	sub.w	r8, r6, r7
 801d538:	608b      	str	r3, [r1, #8]
 801d53a:	f1b8 0f00 	cmp.w	r8, #0
 801d53e:	dd9c      	ble.n	801d47a <__sflush_r+0x1a>
 801d540:	6a21      	ldr	r1, [r4, #32]
 801d542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d544:	4643      	mov	r3, r8
 801d546:	463a      	mov	r2, r7
 801d548:	4628      	mov	r0, r5
 801d54a:	47b0      	blx	r6
 801d54c:	2800      	cmp	r0, #0
 801d54e:	dc06      	bgt.n	801d55e <__sflush_r+0xfe>
 801d550:	89a3      	ldrh	r3, [r4, #12]
 801d552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d556:	81a3      	strh	r3, [r4, #12]
 801d558:	f04f 30ff 	mov.w	r0, #4294967295
 801d55c:	e78e      	b.n	801d47c <__sflush_r+0x1c>
 801d55e:	4407      	add	r7, r0
 801d560:	eba8 0800 	sub.w	r8, r8, r0
 801d564:	e7e9      	b.n	801d53a <__sflush_r+0xda>
 801d566:	bf00      	nop
 801d568:	20400001 	.word	0x20400001

0801d56c <_fflush_r>:
 801d56c:	b538      	push	{r3, r4, r5, lr}
 801d56e:	690b      	ldr	r3, [r1, #16]
 801d570:	4605      	mov	r5, r0
 801d572:	460c      	mov	r4, r1
 801d574:	b913      	cbnz	r3, 801d57c <_fflush_r+0x10>
 801d576:	2500      	movs	r5, #0
 801d578:	4628      	mov	r0, r5
 801d57a:	bd38      	pop	{r3, r4, r5, pc}
 801d57c:	b118      	cbz	r0, 801d586 <_fflush_r+0x1a>
 801d57e:	6983      	ldr	r3, [r0, #24]
 801d580:	b90b      	cbnz	r3, 801d586 <_fflush_r+0x1a>
 801d582:	f000 f887 	bl	801d694 <__sinit>
 801d586:	4b14      	ldr	r3, [pc, #80]	; (801d5d8 <_fflush_r+0x6c>)
 801d588:	429c      	cmp	r4, r3
 801d58a:	d11b      	bne.n	801d5c4 <_fflush_r+0x58>
 801d58c:	686c      	ldr	r4, [r5, #4]
 801d58e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d592:	2b00      	cmp	r3, #0
 801d594:	d0ef      	beq.n	801d576 <_fflush_r+0xa>
 801d596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d598:	07d0      	lsls	r0, r2, #31
 801d59a:	d404      	bmi.n	801d5a6 <_fflush_r+0x3a>
 801d59c:	0599      	lsls	r1, r3, #22
 801d59e:	d402      	bmi.n	801d5a6 <_fflush_r+0x3a>
 801d5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5a2:	f000 f915 	bl	801d7d0 <__retarget_lock_acquire_recursive>
 801d5a6:	4628      	mov	r0, r5
 801d5a8:	4621      	mov	r1, r4
 801d5aa:	f7ff ff59 	bl	801d460 <__sflush_r>
 801d5ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d5b0:	07da      	lsls	r2, r3, #31
 801d5b2:	4605      	mov	r5, r0
 801d5b4:	d4e0      	bmi.n	801d578 <_fflush_r+0xc>
 801d5b6:	89a3      	ldrh	r3, [r4, #12]
 801d5b8:	059b      	lsls	r3, r3, #22
 801d5ba:	d4dd      	bmi.n	801d578 <_fflush_r+0xc>
 801d5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5be:	f000 f908 	bl	801d7d2 <__retarget_lock_release_recursive>
 801d5c2:	e7d9      	b.n	801d578 <_fflush_r+0xc>
 801d5c4:	4b05      	ldr	r3, [pc, #20]	; (801d5dc <_fflush_r+0x70>)
 801d5c6:	429c      	cmp	r4, r3
 801d5c8:	d101      	bne.n	801d5ce <_fflush_r+0x62>
 801d5ca:	68ac      	ldr	r4, [r5, #8]
 801d5cc:	e7df      	b.n	801d58e <_fflush_r+0x22>
 801d5ce:	4b04      	ldr	r3, [pc, #16]	; (801d5e0 <_fflush_r+0x74>)
 801d5d0:	429c      	cmp	r4, r3
 801d5d2:	bf08      	it	eq
 801d5d4:	68ec      	ldreq	r4, [r5, #12]
 801d5d6:	e7da      	b.n	801d58e <_fflush_r+0x22>
 801d5d8:	08051d64 	.word	0x08051d64
 801d5dc:	08051d84 	.word	0x08051d84
 801d5e0:	08051d44 	.word	0x08051d44

0801d5e4 <std>:
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	b510      	push	{r4, lr}
 801d5e8:	4604      	mov	r4, r0
 801d5ea:	e9c0 3300 	strd	r3, r3, [r0]
 801d5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d5f2:	6083      	str	r3, [r0, #8]
 801d5f4:	8181      	strh	r1, [r0, #12]
 801d5f6:	6643      	str	r3, [r0, #100]	; 0x64
 801d5f8:	81c2      	strh	r2, [r0, #14]
 801d5fa:	6183      	str	r3, [r0, #24]
 801d5fc:	4619      	mov	r1, r3
 801d5fe:	2208      	movs	r2, #8
 801d600:	305c      	adds	r0, #92	; 0x5c
 801d602:	f7fb fdc1 	bl	8019188 <memset>
 801d606:	4b05      	ldr	r3, [pc, #20]	; (801d61c <std+0x38>)
 801d608:	6263      	str	r3, [r4, #36]	; 0x24
 801d60a:	4b05      	ldr	r3, [pc, #20]	; (801d620 <std+0x3c>)
 801d60c:	62a3      	str	r3, [r4, #40]	; 0x28
 801d60e:	4b05      	ldr	r3, [pc, #20]	; (801d624 <std+0x40>)
 801d610:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d612:	4b05      	ldr	r3, [pc, #20]	; (801d628 <std+0x44>)
 801d614:	6224      	str	r4, [r4, #32]
 801d616:	6323      	str	r3, [r4, #48]	; 0x30
 801d618:	bd10      	pop	{r4, pc}
 801d61a:	bf00      	nop
 801d61c:	0801d939 	.word	0x0801d939
 801d620:	0801d95b 	.word	0x0801d95b
 801d624:	0801d993 	.word	0x0801d993
 801d628:	0801d9b7 	.word	0x0801d9b7

0801d62c <_cleanup_r>:
 801d62c:	4901      	ldr	r1, [pc, #4]	; (801d634 <_cleanup_r+0x8>)
 801d62e:	f000 b8af 	b.w	801d790 <_fwalk_reent>
 801d632:	bf00      	nop
 801d634:	0801d56d 	.word	0x0801d56d

0801d638 <__sfmoreglue>:
 801d638:	b570      	push	{r4, r5, r6, lr}
 801d63a:	2268      	movs	r2, #104	; 0x68
 801d63c:	1e4d      	subs	r5, r1, #1
 801d63e:	4355      	muls	r5, r2
 801d640:	460e      	mov	r6, r1
 801d642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d646:	f7ff fa59 	bl	801cafc <_malloc_r>
 801d64a:	4604      	mov	r4, r0
 801d64c:	b140      	cbz	r0, 801d660 <__sfmoreglue+0x28>
 801d64e:	2100      	movs	r1, #0
 801d650:	e9c0 1600 	strd	r1, r6, [r0]
 801d654:	300c      	adds	r0, #12
 801d656:	60a0      	str	r0, [r4, #8]
 801d658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d65c:	f7fb fd94 	bl	8019188 <memset>
 801d660:	4620      	mov	r0, r4
 801d662:	bd70      	pop	{r4, r5, r6, pc}

0801d664 <__sfp_lock_acquire>:
 801d664:	4801      	ldr	r0, [pc, #4]	; (801d66c <__sfp_lock_acquire+0x8>)
 801d666:	f000 b8b3 	b.w	801d7d0 <__retarget_lock_acquire_recursive>
 801d66a:	bf00      	nop
 801d66c:	200008a1 	.word	0x200008a1

0801d670 <__sfp_lock_release>:
 801d670:	4801      	ldr	r0, [pc, #4]	; (801d678 <__sfp_lock_release+0x8>)
 801d672:	f000 b8ae 	b.w	801d7d2 <__retarget_lock_release_recursive>
 801d676:	bf00      	nop
 801d678:	200008a1 	.word	0x200008a1

0801d67c <__sinit_lock_acquire>:
 801d67c:	4801      	ldr	r0, [pc, #4]	; (801d684 <__sinit_lock_acquire+0x8>)
 801d67e:	f000 b8a7 	b.w	801d7d0 <__retarget_lock_acquire_recursive>
 801d682:	bf00      	nop
 801d684:	200008a2 	.word	0x200008a2

0801d688 <__sinit_lock_release>:
 801d688:	4801      	ldr	r0, [pc, #4]	; (801d690 <__sinit_lock_release+0x8>)
 801d68a:	f000 b8a2 	b.w	801d7d2 <__retarget_lock_release_recursive>
 801d68e:	bf00      	nop
 801d690:	200008a2 	.word	0x200008a2

0801d694 <__sinit>:
 801d694:	b510      	push	{r4, lr}
 801d696:	4604      	mov	r4, r0
 801d698:	f7ff fff0 	bl	801d67c <__sinit_lock_acquire>
 801d69c:	69a3      	ldr	r3, [r4, #24]
 801d69e:	b11b      	cbz	r3, 801d6a8 <__sinit+0x14>
 801d6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6a4:	f7ff bff0 	b.w	801d688 <__sinit_lock_release>
 801d6a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d6ac:	6523      	str	r3, [r4, #80]	; 0x50
 801d6ae:	4b13      	ldr	r3, [pc, #76]	; (801d6fc <__sinit+0x68>)
 801d6b0:	4a13      	ldr	r2, [pc, #76]	; (801d700 <__sinit+0x6c>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	62a2      	str	r2, [r4, #40]	; 0x28
 801d6b6:	42a3      	cmp	r3, r4
 801d6b8:	bf04      	itt	eq
 801d6ba:	2301      	moveq	r3, #1
 801d6bc:	61a3      	streq	r3, [r4, #24]
 801d6be:	4620      	mov	r0, r4
 801d6c0:	f000 f820 	bl	801d704 <__sfp>
 801d6c4:	6060      	str	r0, [r4, #4]
 801d6c6:	4620      	mov	r0, r4
 801d6c8:	f000 f81c 	bl	801d704 <__sfp>
 801d6cc:	60a0      	str	r0, [r4, #8]
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f000 f818 	bl	801d704 <__sfp>
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	60e0      	str	r0, [r4, #12]
 801d6d8:	2104      	movs	r1, #4
 801d6da:	6860      	ldr	r0, [r4, #4]
 801d6dc:	f7ff ff82 	bl	801d5e4 <std>
 801d6e0:	68a0      	ldr	r0, [r4, #8]
 801d6e2:	2201      	movs	r2, #1
 801d6e4:	2109      	movs	r1, #9
 801d6e6:	f7ff ff7d 	bl	801d5e4 <std>
 801d6ea:	68e0      	ldr	r0, [r4, #12]
 801d6ec:	2202      	movs	r2, #2
 801d6ee:	2112      	movs	r1, #18
 801d6f0:	f7ff ff78 	bl	801d5e4 <std>
 801d6f4:	2301      	movs	r3, #1
 801d6f6:	61a3      	str	r3, [r4, #24]
 801d6f8:	e7d2      	b.n	801d6a0 <__sinit+0xc>
 801d6fa:	bf00      	nop
 801d6fc:	080518fc 	.word	0x080518fc
 801d700:	0801d62d 	.word	0x0801d62d

0801d704 <__sfp>:
 801d704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d706:	4607      	mov	r7, r0
 801d708:	f7ff ffac 	bl	801d664 <__sfp_lock_acquire>
 801d70c:	4b1e      	ldr	r3, [pc, #120]	; (801d788 <__sfp+0x84>)
 801d70e:	681e      	ldr	r6, [r3, #0]
 801d710:	69b3      	ldr	r3, [r6, #24]
 801d712:	b913      	cbnz	r3, 801d71a <__sfp+0x16>
 801d714:	4630      	mov	r0, r6
 801d716:	f7ff ffbd 	bl	801d694 <__sinit>
 801d71a:	3648      	adds	r6, #72	; 0x48
 801d71c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d720:	3b01      	subs	r3, #1
 801d722:	d503      	bpl.n	801d72c <__sfp+0x28>
 801d724:	6833      	ldr	r3, [r6, #0]
 801d726:	b30b      	cbz	r3, 801d76c <__sfp+0x68>
 801d728:	6836      	ldr	r6, [r6, #0]
 801d72a:	e7f7      	b.n	801d71c <__sfp+0x18>
 801d72c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d730:	b9d5      	cbnz	r5, 801d768 <__sfp+0x64>
 801d732:	4b16      	ldr	r3, [pc, #88]	; (801d78c <__sfp+0x88>)
 801d734:	60e3      	str	r3, [r4, #12]
 801d736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d73a:	6665      	str	r5, [r4, #100]	; 0x64
 801d73c:	f000 f847 	bl	801d7ce <__retarget_lock_init_recursive>
 801d740:	f7ff ff96 	bl	801d670 <__sfp_lock_release>
 801d744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d74c:	6025      	str	r5, [r4, #0]
 801d74e:	61a5      	str	r5, [r4, #24]
 801d750:	2208      	movs	r2, #8
 801d752:	4629      	mov	r1, r5
 801d754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d758:	f7fb fd16 	bl	8019188 <memset>
 801d75c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d764:	4620      	mov	r0, r4
 801d766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d768:	3468      	adds	r4, #104	; 0x68
 801d76a:	e7d9      	b.n	801d720 <__sfp+0x1c>
 801d76c:	2104      	movs	r1, #4
 801d76e:	4638      	mov	r0, r7
 801d770:	f7ff ff62 	bl	801d638 <__sfmoreglue>
 801d774:	4604      	mov	r4, r0
 801d776:	6030      	str	r0, [r6, #0]
 801d778:	2800      	cmp	r0, #0
 801d77a:	d1d5      	bne.n	801d728 <__sfp+0x24>
 801d77c:	f7ff ff78 	bl	801d670 <__sfp_lock_release>
 801d780:	230c      	movs	r3, #12
 801d782:	603b      	str	r3, [r7, #0]
 801d784:	e7ee      	b.n	801d764 <__sfp+0x60>
 801d786:	bf00      	nop
 801d788:	080518fc 	.word	0x080518fc
 801d78c:	ffff0001 	.word	0xffff0001

0801d790 <_fwalk_reent>:
 801d790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d794:	4606      	mov	r6, r0
 801d796:	4688      	mov	r8, r1
 801d798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d79c:	2700      	movs	r7, #0
 801d79e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d7a2:	f1b9 0901 	subs.w	r9, r9, #1
 801d7a6:	d505      	bpl.n	801d7b4 <_fwalk_reent+0x24>
 801d7a8:	6824      	ldr	r4, [r4, #0]
 801d7aa:	2c00      	cmp	r4, #0
 801d7ac:	d1f7      	bne.n	801d79e <_fwalk_reent+0xe>
 801d7ae:	4638      	mov	r0, r7
 801d7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7b4:	89ab      	ldrh	r3, [r5, #12]
 801d7b6:	2b01      	cmp	r3, #1
 801d7b8:	d907      	bls.n	801d7ca <_fwalk_reent+0x3a>
 801d7ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d7be:	3301      	adds	r3, #1
 801d7c0:	d003      	beq.n	801d7ca <_fwalk_reent+0x3a>
 801d7c2:	4629      	mov	r1, r5
 801d7c4:	4630      	mov	r0, r6
 801d7c6:	47c0      	blx	r8
 801d7c8:	4307      	orrs	r7, r0
 801d7ca:	3568      	adds	r5, #104	; 0x68
 801d7cc:	e7e9      	b.n	801d7a2 <_fwalk_reent+0x12>

0801d7ce <__retarget_lock_init_recursive>:
 801d7ce:	4770      	bx	lr

0801d7d0 <__retarget_lock_acquire_recursive>:
 801d7d0:	4770      	bx	lr

0801d7d2 <__retarget_lock_release_recursive>:
 801d7d2:	4770      	bx	lr

0801d7d4 <__swhatbuf_r>:
 801d7d4:	b570      	push	{r4, r5, r6, lr}
 801d7d6:	460e      	mov	r6, r1
 801d7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d7dc:	2900      	cmp	r1, #0
 801d7de:	b096      	sub	sp, #88	; 0x58
 801d7e0:	4614      	mov	r4, r2
 801d7e2:	461d      	mov	r5, r3
 801d7e4:	da08      	bge.n	801d7f8 <__swhatbuf_r+0x24>
 801d7e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	602a      	str	r2, [r5, #0]
 801d7ee:	061a      	lsls	r2, r3, #24
 801d7f0:	d410      	bmi.n	801d814 <__swhatbuf_r+0x40>
 801d7f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d7f6:	e00e      	b.n	801d816 <__swhatbuf_r+0x42>
 801d7f8:	466a      	mov	r2, sp
 801d7fa:	f000 f903 	bl	801da04 <_fstat_r>
 801d7fe:	2800      	cmp	r0, #0
 801d800:	dbf1      	blt.n	801d7e6 <__swhatbuf_r+0x12>
 801d802:	9a01      	ldr	r2, [sp, #4]
 801d804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d80c:	425a      	negs	r2, r3
 801d80e:	415a      	adcs	r2, r3
 801d810:	602a      	str	r2, [r5, #0]
 801d812:	e7ee      	b.n	801d7f2 <__swhatbuf_r+0x1e>
 801d814:	2340      	movs	r3, #64	; 0x40
 801d816:	2000      	movs	r0, #0
 801d818:	6023      	str	r3, [r4, #0]
 801d81a:	b016      	add	sp, #88	; 0x58
 801d81c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d820 <__smakebuf_r>:
 801d820:	898b      	ldrh	r3, [r1, #12]
 801d822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d824:	079d      	lsls	r5, r3, #30
 801d826:	4606      	mov	r6, r0
 801d828:	460c      	mov	r4, r1
 801d82a:	d507      	bpl.n	801d83c <__smakebuf_r+0x1c>
 801d82c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d830:	6023      	str	r3, [r4, #0]
 801d832:	6123      	str	r3, [r4, #16]
 801d834:	2301      	movs	r3, #1
 801d836:	6163      	str	r3, [r4, #20]
 801d838:	b002      	add	sp, #8
 801d83a:	bd70      	pop	{r4, r5, r6, pc}
 801d83c:	ab01      	add	r3, sp, #4
 801d83e:	466a      	mov	r2, sp
 801d840:	f7ff ffc8 	bl	801d7d4 <__swhatbuf_r>
 801d844:	9900      	ldr	r1, [sp, #0]
 801d846:	4605      	mov	r5, r0
 801d848:	4630      	mov	r0, r6
 801d84a:	f7ff f957 	bl	801cafc <_malloc_r>
 801d84e:	b948      	cbnz	r0, 801d864 <__smakebuf_r+0x44>
 801d850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d854:	059a      	lsls	r2, r3, #22
 801d856:	d4ef      	bmi.n	801d838 <__smakebuf_r+0x18>
 801d858:	f023 0303 	bic.w	r3, r3, #3
 801d85c:	f043 0302 	orr.w	r3, r3, #2
 801d860:	81a3      	strh	r3, [r4, #12]
 801d862:	e7e3      	b.n	801d82c <__smakebuf_r+0xc>
 801d864:	4b0d      	ldr	r3, [pc, #52]	; (801d89c <__smakebuf_r+0x7c>)
 801d866:	62b3      	str	r3, [r6, #40]	; 0x28
 801d868:	89a3      	ldrh	r3, [r4, #12]
 801d86a:	6020      	str	r0, [r4, #0]
 801d86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d870:	81a3      	strh	r3, [r4, #12]
 801d872:	9b00      	ldr	r3, [sp, #0]
 801d874:	6163      	str	r3, [r4, #20]
 801d876:	9b01      	ldr	r3, [sp, #4]
 801d878:	6120      	str	r0, [r4, #16]
 801d87a:	b15b      	cbz	r3, 801d894 <__smakebuf_r+0x74>
 801d87c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d880:	4630      	mov	r0, r6
 801d882:	f000 f8d1 	bl	801da28 <_isatty_r>
 801d886:	b128      	cbz	r0, 801d894 <__smakebuf_r+0x74>
 801d888:	89a3      	ldrh	r3, [r4, #12]
 801d88a:	f023 0303 	bic.w	r3, r3, #3
 801d88e:	f043 0301 	orr.w	r3, r3, #1
 801d892:	81a3      	strh	r3, [r4, #12]
 801d894:	89a0      	ldrh	r0, [r4, #12]
 801d896:	4305      	orrs	r5, r0
 801d898:	81a5      	strh	r5, [r4, #12]
 801d89a:	e7cd      	b.n	801d838 <__smakebuf_r+0x18>
 801d89c:	0801d62d 	.word	0x0801d62d

0801d8a0 <_malloc_usable_size_r>:
 801d8a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d8a4:	1f18      	subs	r0, r3, #4
 801d8a6:	2b00      	cmp	r3, #0
 801d8a8:	bfbc      	itt	lt
 801d8aa:	580b      	ldrlt	r3, [r1, r0]
 801d8ac:	18c0      	addlt	r0, r0, r3
 801d8ae:	4770      	bx	lr

0801d8b0 <_raise_r>:
 801d8b0:	291f      	cmp	r1, #31
 801d8b2:	b538      	push	{r3, r4, r5, lr}
 801d8b4:	4604      	mov	r4, r0
 801d8b6:	460d      	mov	r5, r1
 801d8b8:	d904      	bls.n	801d8c4 <_raise_r+0x14>
 801d8ba:	2316      	movs	r3, #22
 801d8bc:	6003      	str	r3, [r0, #0]
 801d8be:	f04f 30ff 	mov.w	r0, #4294967295
 801d8c2:	bd38      	pop	{r3, r4, r5, pc}
 801d8c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801d8c6:	b112      	cbz	r2, 801d8ce <_raise_r+0x1e>
 801d8c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d8cc:	b94b      	cbnz	r3, 801d8e2 <_raise_r+0x32>
 801d8ce:	4620      	mov	r0, r4
 801d8d0:	f000 f830 	bl	801d934 <_getpid_r>
 801d8d4:	462a      	mov	r2, r5
 801d8d6:	4601      	mov	r1, r0
 801d8d8:	4620      	mov	r0, r4
 801d8da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d8de:	f000 b817 	b.w	801d910 <_kill_r>
 801d8e2:	2b01      	cmp	r3, #1
 801d8e4:	d00a      	beq.n	801d8fc <_raise_r+0x4c>
 801d8e6:	1c59      	adds	r1, r3, #1
 801d8e8:	d103      	bne.n	801d8f2 <_raise_r+0x42>
 801d8ea:	2316      	movs	r3, #22
 801d8ec:	6003      	str	r3, [r0, #0]
 801d8ee:	2001      	movs	r0, #1
 801d8f0:	e7e7      	b.n	801d8c2 <_raise_r+0x12>
 801d8f2:	2400      	movs	r4, #0
 801d8f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d8f8:	4628      	mov	r0, r5
 801d8fa:	4798      	blx	r3
 801d8fc:	2000      	movs	r0, #0
 801d8fe:	e7e0      	b.n	801d8c2 <_raise_r+0x12>

0801d900 <raise>:
 801d900:	4b02      	ldr	r3, [pc, #8]	; (801d90c <raise+0xc>)
 801d902:	4601      	mov	r1, r0
 801d904:	6818      	ldr	r0, [r3, #0]
 801d906:	f7ff bfd3 	b.w	801d8b0 <_raise_r>
 801d90a:	bf00      	nop
 801d90c:	20000064 	.word	0x20000064

0801d910 <_kill_r>:
 801d910:	b538      	push	{r3, r4, r5, lr}
 801d912:	4d07      	ldr	r5, [pc, #28]	; (801d930 <_kill_r+0x20>)
 801d914:	2300      	movs	r3, #0
 801d916:	4604      	mov	r4, r0
 801d918:	4608      	mov	r0, r1
 801d91a:	4611      	mov	r1, r2
 801d91c:	602b      	str	r3, [r5, #0]
 801d91e:	f7e8 f868 	bl	80059f2 <_kill>
 801d922:	1c43      	adds	r3, r0, #1
 801d924:	d102      	bne.n	801d92c <_kill_r+0x1c>
 801d926:	682b      	ldr	r3, [r5, #0]
 801d928:	b103      	cbz	r3, 801d92c <_kill_r+0x1c>
 801d92a:	6023      	str	r3, [r4, #0]
 801d92c:	bd38      	pop	{r3, r4, r5, pc}
 801d92e:	bf00      	nop
 801d930:	2000089c 	.word	0x2000089c

0801d934 <_getpid_r>:
 801d934:	f7e8 b855 	b.w	80059e2 <_getpid>

0801d938 <__sread>:
 801d938:	b510      	push	{r4, lr}
 801d93a:	460c      	mov	r4, r1
 801d93c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d940:	f000 f894 	bl	801da6c <_read_r>
 801d944:	2800      	cmp	r0, #0
 801d946:	bfab      	itete	ge
 801d948:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d94a:	89a3      	ldrhlt	r3, [r4, #12]
 801d94c:	181b      	addge	r3, r3, r0
 801d94e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d952:	bfac      	ite	ge
 801d954:	6563      	strge	r3, [r4, #84]	; 0x54
 801d956:	81a3      	strhlt	r3, [r4, #12]
 801d958:	bd10      	pop	{r4, pc}

0801d95a <__swrite>:
 801d95a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d95e:	461f      	mov	r7, r3
 801d960:	898b      	ldrh	r3, [r1, #12]
 801d962:	05db      	lsls	r3, r3, #23
 801d964:	4605      	mov	r5, r0
 801d966:	460c      	mov	r4, r1
 801d968:	4616      	mov	r6, r2
 801d96a:	d505      	bpl.n	801d978 <__swrite+0x1e>
 801d96c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d970:	2302      	movs	r3, #2
 801d972:	2200      	movs	r2, #0
 801d974:	f000 f868 	bl	801da48 <_lseek_r>
 801d978:	89a3      	ldrh	r3, [r4, #12]
 801d97a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d97e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d982:	81a3      	strh	r3, [r4, #12]
 801d984:	4632      	mov	r2, r6
 801d986:	463b      	mov	r3, r7
 801d988:	4628      	mov	r0, r5
 801d98a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d98e:	f000 b817 	b.w	801d9c0 <_write_r>

0801d992 <__sseek>:
 801d992:	b510      	push	{r4, lr}
 801d994:	460c      	mov	r4, r1
 801d996:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d99a:	f000 f855 	bl	801da48 <_lseek_r>
 801d99e:	1c43      	adds	r3, r0, #1
 801d9a0:	89a3      	ldrh	r3, [r4, #12]
 801d9a2:	bf15      	itete	ne
 801d9a4:	6560      	strne	r0, [r4, #84]	; 0x54
 801d9a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d9aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d9ae:	81a3      	strheq	r3, [r4, #12]
 801d9b0:	bf18      	it	ne
 801d9b2:	81a3      	strhne	r3, [r4, #12]
 801d9b4:	bd10      	pop	{r4, pc}

0801d9b6 <__sclose>:
 801d9b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9ba:	f000 b813 	b.w	801d9e4 <_close_r>
	...

0801d9c0 <_write_r>:
 801d9c0:	b538      	push	{r3, r4, r5, lr}
 801d9c2:	4d07      	ldr	r5, [pc, #28]	; (801d9e0 <_write_r+0x20>)
 801d9c4:	4604      	mov	r4, r0
 801d9c6:	4608      	mov	r0, r1
 801d9c8:	4611      	mov	r1, r2
 801d9ca:	2200      	movs	r2, #0
 801d9cc:	602a      	str	r2, [r5, #0]
 801d9ce:	461a      	mov	r2, r3
 801d9d0:	f7e8 f846 	bl	8005a60 <_write>
 801d9d4:	1c43      	adds	r3, r0, #1
 801d9d6:	d102      	bne.n	801d9de <_write_r+0x1e>
 801d9d8:	682b      	ldr	r3, [r5, #0]
 801d9da:	b103      	cbz	r3, 801d9de <_write_r+0x1e>
 801d9dc:	6023      	str	r3, [r4, #0]
 801d9de:	bd38      	pop	{r3, r4, r5, pc}
 801d9e0:	2000089c 	.word	0x2000089c

0801d9e4 <_close_r>:
 801d9e4:	b538      	push	{r3, r4, r5, lr}
 801d9e6:	4d06      	ldr	r5, [pc, #24]	; (801da00 <_close_r+0x1c>)
 801d9e8:	2300      	movs	r3, #0
 801d9ea:	4604      	mov	r4, r0
 801d9ec:	4608      	mov	r0, r1
 801d9ee:	602b      	str	r3, [r5, #0]
 801d9f0:	f7e8 f852 	bl	8005a98 <_close>
 801d9f4:	1c43      	adds	r3, r0, #1
 801d9f6:	d102      	bne.n	801d9fe <_close_r+0x1a>
 801d9f8:	682b      	ldr	r3, [r5, #0]
 801d9fa:	b103      	cbz	r3, 801d9fe <_close_r+0x1a>
 801d9fc:	6023      	str	r3, [r4, #0]
 801d9fe:	bd38      	pop	{r3, r4, r5, pc}
 801da00:	2000089c 	.word	0x2000089c

0801da04 <_fstat_r>:
 801da04:	b538      	push	{r3, r4, r5, lr}
 801da06:	4d07      	ldr	r5, [pc, #28]	; (801da24 <_fstat_r+0x20>)
 801da08:	2300      	movs	r3, #0
 801da0a:	4604      	mov	r4, r0
 801da0c:	4608      	mov	r0, r1
 801da0e:	4611      	mov	r1, r2
 801da10:	602b      	str	r3, [r5, #0]
 801da12:	f7e8 f84d 	bl	8005ab0 <_fstat>
 801da16:	1c43      	adds	r3, r0, #1
 801da18:	d102      	bne.n	801da20 <_fstat_r+0x1c>
 801da1a:	682b      	ldr	r3, [r5, #0]
 801da1c:	b103      	cbz	r3, 801da20 <_fstat_r+0x1c>
 801da1e:	6023      	str	r3, [r4, #0]
 801da20:	bd38      	pop	{r3, r4, r5, pc}
 801da22:	bf00      	nop
 801da24:	2000089c 	.word	0x2000089c

0801da28 <_isatty_r>:
 801da28:	b538      	push	{r3, r4, r5, lr}
 801da2a:	4d06      	ldr	r5, [pc, #24]	; (801da44 <_isatty_r+0x1c>)
 801da2c:	2300      	movs	r3, #0
 801da2e:	4604      	mov	r4, r0
 801da30:	4608      	mov	r0, r1
 801da32:	602b      	str	r3, [r5, #0]
 801da34:	f7e8 f84c 	bl	8005ad0 <_isatty>
 801da38:	1c43      	adds	r3, r0, #1
 801da3a:	d102      	bne.n	801da42 <_isatty_r+0x1a>
 801da3c:	682b      	ldr	r3, [r5, #0]
 801da3e:	b103      	cbz	r3, 801da42 <_isatty_r+0x1a>
 801da40:	6023      	str	r3, [r4, #0]
 801da42:	bd38      	pop	{r3, r4, r5, pc}
 801da44:	2000089c 	.word	0x2000089c

0801da48 <_lseek_r>:
 801da48:	b538      	push	{r3, r4, r5, lr}
 801da4a:	4d07      	ldr	r5, [pc, #28]	; (801da68 <_lseek_r+0x20>)
 801da4c:	4604      	mov	r4, r0
 801da4e:	4608      	mov	r0, r1
 801da50:	4611      	mov	r1, r2
 801da52:	2200      	movs	r2, #0
 801da54:	602a      	str	r2, [r5, #0]
 801da56:	461a      	mov	r2, r3
 801da58:	f7e8 f845 	bl	8005ae6 <_lseek>
 801da5c:	1c43      	adds	r3, r0, #1
 801da5e:	d102      	bne.n	801da66 <_lseek_r+0x1e>
 801da60:	682b      	ldr	r3, [r5, #0]
 801da62:	b103      	cbz	r3, 801da66 <_lseek_r+0x1e>
 801da64:	6023      	str	r3, [r4, #0]
 801da66:	bd38      	pop	{r3, r4, r5, pc}
 801da68:	2000089c 	.word	0x2000089c

0801da6c <_read_r>:
 801da6c:	b538      	push	{r3, r4, r5, lr}
 801da6e:	4d07      	ldr	r5, [pc, #28]	; (801da8c <_read_r+0x20>)
 801da70:	4604      	mov	r4, r0
 801da72:	4608      	mov	r0, r1
 801da74:	4611      	mov	r1, r2
 801da76:	2200      	movs	r2, #0
 801da78:	602a      	str	r2, [r5, #0]
 801da7a:	461a      	mov	r2, r3
 801da7c:	f7e7 ffd3 	bl	8005a26 <_read>
 801da80:	1c43      	adds	r3, r0, #1
 801da82:	d102      	bne.n	801da8a <_read_r+0x1e>
 801da84:	682b      	ldr	r3, [r5, #0]
 801da86:	b103      	cbz	r3, 801da8a <_read_r+0x1e>
 801da88:	6023      	str	r3, [r4, #0]
 801da8a:	bd38      	pop	{r3, r4, r5, pc}
 801da8c:	2000089c 	.word	0x2000089c

0801da90 <memcmp>:
 801da90:	b510      	push	{r4, lr}
 801da92:	3901      	subs	r1, #1
 801da94:	4402      	add	r2, r0
 801da96:	4290      	cmp	r0, r2
 801da98:	d101      	bne.n	801da9e <memcmp+0xe>
 801da9a:	2000      	movs	r0, #0
 801da9c:	e005      	b.n	801daaa <memcmp+0x1a>
 801da9e:	7803      	ldrb	r3, [r0, #0]
 801daa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801daa4:	42a3      	cmp	r3, r4
 801daa6:	d001      	beq.n	801daac <memcmp+0x1c>
 801daa8:	1b18      	subs	r0, r3, r4
 801daaa:	bd10      	pop	{r4, pc}
 801daac:	3001      	adds	r0, #1
 801daae:	e7f2      	b.n	801da96 <memcmp+0x6>

0801dab0 <floor>:
 801dab0:	ec51 0b10 	vmov	r0, r1, d0
 801dab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dab8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801dabc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801dac0:	2e13      	cmp	r6, #19
 801dac2:	ee10 5a10 	vmov	r5, s0
 801dac6:	ee10 8a10 	vmov	r8, s0
 801daca:	460c      	mov	r4, r1
 801dacc:	dc32      	bgt.n	801db34 <floor+0x84>
 801dace:	2e00      	cmp	r6, #0
 801dad0:	da14      	bge.n	801dafc <floor+0x4c>
 801dad2:	a333      	add	r3, pc, #204	; (adr r3, 801dba0 <floor+0xf0>)
 801dad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dad8:	f7fa fc48 	bl	801836c <__adddf3>
 801dadc:	2200      	movs	r2, #0
 801dade:	2300      	movs	r3, #0
 801dae0:	f7fb f88a 	bl	8018bf8 <__aeabi_dcmpgt>
 801dae4:	b138      	cbz	r0, 801daf6 <floor+0x46>
 801dae6:	2c00      	cmp	r4, #0
 801dae8:	da57      	bge.n	801db9a <floor+0xea>
 801daea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801daee:	431d      	orrs	r5, r3
 801daf0:	d001      	beq.n	801daf6 <floor+0x46>
 801daf2:	4c2d      	ldr	r4, [pc, #180]	; (801dba8 <floor+0xf8>)
 801daf4:	2500      	movs	r5, #0
 801daf6:	4621      	mov	r1, r4
 801daf8:	4628      	mov	r0, r5
 801dafa:	e025      	b.n	801db48 <floor+0x98>
 801dafc:	4f2b      	ldr	r7, [pc, #172]	; (801dbac <floor+0xfc>)
 801dafe:	4137      	asrs	r7, r6
 801db00:	ea01 0307 	and.w	r3, r1, r7
 801db04:	4303      	orrs	r3, r0
 801db06:	d01f      	beq.n	801db48 <floor+0x98>
 801db08:	a325      	add	r3, pc, #148	; (adr r3, 801dba0 <floor+0xf0>)
 801db0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db0e:	f7fa fc2d 	bl	801836c <__adddf3>
 801db12:	2200      	movs	r2, #0
 801db14:	2300      	movs	r3, #0
 801db16:	f7fb f86f 	bl	8018bf8 <__aeabi_dcmpgt>
 801db1a:	2800      	cmp	r0, #0
 801db1c:	d0eb      	beq.n	801daf6 <floor+0x46>
 801db1e:	2c00      	cmp	r4, #0
 801db20:	bfbe      	ittt	lt
 801db22:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801db26:	fa43 f606 	asrlt.w	r6, r3, r6
 801db2a:	19a4      	addlt	r4, r4, r6
 801db2c:	ea24 0407 	bic.w	r4, r4, r7
 801db30:	2500      	movs	r5, #0
 801db32:	e7e0      	b.n	801daf6 <floor+0x46>
 801db34:	2e33      	cmp	r6, #51	; 0x33
 801db36:	dd0b      	ble.n	801db50 <floor+0xa0>
 801db38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801db3c:	d104      	bne.n	801db48 <floor+0x98>
 801db3e:	ee10 2a10 	vmov	r2, s0
 801db42:	460b      	mov	r3, r1
 801db44:	f7fa fc12 	bl	801836c <__adddf3>
 801db48:	ec41 0b10 	vmov	d0, r0, r1
 801db4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db50:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801db54:	f04f 33ff 	mov.w	r3, #4294967295
 801db58:	fa23 f707 	lsr.w	r7, r3, r7
 801db5c:	4207      	tst	r7, r0
 801db5e:	d0f3      	beq.n	801db48 <floor+0x98>
 801db60:	a30f      	add	r3, pc, #60	; (adr r3, 801dba0 <floor+0xf0>)
 801db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db66:	f7fa fc01 	bl	801836c <__adddf3>
 801db6a:	2200      	movs	r2, #0
 801db6c:	2300      	movs	r3, #0
 801db6e:	f7fb f843 	bl	8018bf8 <__aeabi_dcmpgt>
 801db72:	2800      	cmp	r0, #0
 801db74:	d0bf      	beq.n	801daf6 <floor+0x46>
 801db76:	2c00      	cmp	r4, #0
 801db78:	da02      	bge.n	801db80 <floor+0xd0>
 801db7a:	2e14      	cmp	r6, #20
 801db7c:	d103      	bne.n	801db86 <floor+0xd6>
 801db7e:	3401      	adds	r4, #1
 801db80:	ea25 0507 	bic.w	r5, r5, r7
 801db84:	e7b7      	b.n	801daf6 <floor+0x46>
 801db86:	2301      	movs	r3, #1
 801db88:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801db8c:	fa03 f606 	lsl.w	r6, r3, r6
 801db90:	4435      	add	r5, r6
 801db92:	4545      	cmp	r5, r8
 801db94:	bf38      	it	cc
 801db96:	18e4      	addcc	r4, r4, r3
 801db98:	e7f2      	b.n	801db80 <floor+0xd0>
 801db9a:	2500      	movs	r5, #0
 801db9c:	462c      	mov	r4, r5
 801db9e:	e7aa      	b.n	801daf6 <floor+0x46>
 801dba0:	8800759c 	.word	0x8800759c
 801dba4:	7e37e43c 	.word	0x7e37e43c
 801dba8:	bff00000 	.word	0xbff00000
 801dbac:	000fffff 	.word	0x000fffff

0801dbb0 <pow>:
 801dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbb2:	ed2d 8b02 	vpush	{d8}
 801dbb6:	eeb0 8a40 	vmov.f32	s16, s0
 801dbba:	eef0 8a60 	vmov.f32	s17, s1
 801dbbe:	ec55 4b11 	vmov	r4, r5, d1
 801dbc2:	f000 f865 	bl	801dc90 <__ieee754_pow>
 801dbc6:	4622      	mov	r2, r4
 801dbc8:	462b      	mov	r3, r5
 801dbca:	4620      	mov	r0, r4
 801dbcc:	4629      	mov	r1, r5
 801dbce:	ec57 6b10 	vmov	r6, r7, d0
 801dbd2:	f7fb f81b 	bl	8018c0c <__aeabi_dcmpun>
 801dbd6:	2800      	cmp	r0, #0
 801dbd8:	d13b      	bne.n	801dc52 <pow+0xa2>
 801dbda:	ec51 0b18 	vmov	r0, r1, d8
 801dbde:	2200      	movs	r2, #0
 801dbe0:	2300      	movs	r3, #0
 801dbe2:	f7fa ffe1 	bl	8018ba8 <__aeabi_dcmpeq>
 801dbe6:	b1b8      	cbz	r0, 801dc18 <pow+0x68>
 801dbe8:	2200      	movs	r2, #0
 801dbea:	2300      	movs	r3, #0
 801dbec:	4620      	mov	r0, r4
 801dbee:	4629      	mov	r1, r5
 801dbf0:	f7fa ffda 	bl	8018ba8 <__aeabi_dcmpeq>
 801dbf4:	2800      	cmp	r0, #0
 801dbf6:	d146      	bne.n	801dc86 <pow+0xd6>
 801dbf8:	ec45 4b10 	vmov	d0, r4, r5
 801dbfc:	f000 fe61 	bl	801e8c2 <finite>
 801dc00:	b338      	cbz	r0, 801dc52 <pow+0xa2>
 801dc02:	2200      	movs	r2, #0
 801dc04:	2300      	movs	r3, #0
 801dc06:	4620      	mov	r0, r4
 801dc08:	4629      	mov	r1, r5
 801dc0a:	f7fa ffd7 	bl	8018bbc <__aeabi_dcmplt>
 801dc0e:	b300      	cbz	r0, 801dc52 <pow+0xa2>
 801dc10:	f7fb fa90 	bl	8019134 <__errno>
 801dc14:	2322      	movs	r3, #34	; 0x22
 801dc16:	e01b      	b.n	801dc50 <pow+0xa0>
 801dc18:	ec47 6b10 	vmov	d0, r6, r7
 801dc1c:	f000 fe51 	bl	801e8c2 <finite>
 801dc20:	b9e0      	cbnz	r0, 801dc5c <pow+0xac>
 801dc22:	eeb0 0a48 	vmov.f32	s0, s16
 801dc26:	eef0 0a68 	vmov.f32	s1, s17
 801dc2a:	f000 fe4a 	bl	801e8c2 <finite>
 801dc2e:	b1a8      	cbz	r0, 801dc5c <pow+0xac>
 801dc30:	ec45 4b10 	vmov	d0, r4, r5
 801dc34:	f000 fe45 	bl	801e8c2 <finite>
 801dc38:	b180      	cbz	r0, 801dc5c <pow+0xac>
 801dc3a:	4632      	mov	r2, r6
 801dc3c:	463b      	mov	r3, r7
 801dc3e:	4630      	mov	r0, r6
 801dc40:	4639      	mov	r1, r7
 801dc42:	f7fa ffe3 	bl	8018c0c <__aeabi_dcmpun>
 801dc46:	2800      	cmp	r0, #0
 801dc48:	d0e2      	beq.n	801dc10 <pow+0x60>
 801dc4a:	f7fb fa73 	bl	8019134 <__errno>
 801dc4e:	2321      	movs	r3, #33	; 0x21
 801dc50:	6003      	str	r3, [r0, #0]
 801dc52:	ecbd 8b02 	vpop	{d8}
 801dc56:	ec47 6b10 	vmov	d0, r6, r7
 801dc5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc5c:	2200      	movs	r2, #0
 801dc5e:	2300      	movs	r3, #0
 801dc60:	4630      	mov	r0, r6
 801dc62:	4639      	mov	r1, r7
 801dc64:	f7fa ffa0 	bl	8018ba8 <__aeabi_dcmpeq>
 801dc68:	2800      	cmp	r0, #0
 801dc6a:	d0f2      	beq.n	801dc52 <pow+0xa2>
 801dc6c:	eeb0 0a48 	vmov.f32	s0, s16
 801dc70:	eef0 0a68 	vmov.f32	s1, s17
 801dc74:	f000 fe25 	bl	801e8c2 <finite>
 801dc78:	2800      	cmp	r0, #0
 801dc7a:	d0ea      	beq.n	801dc52 <pow+0xa2>
 801dc7c:	ec45 4b10 	vmov	d0, r4, r5
 801dc80:	f000 fe1f 	bl	801e8c2 <finite>
 801dc84:	e7c3      	b.n	801dc0e <pow+0x5e>
 801dc86:	4f01      	ldr	r7, [pc, #4]	; (801dc8c <pow+0xdc>)
 801dc88:	2600      	movs	r6, #0
 801dc8a:	e7e2      	b.n	801dc52 <pow+0xa2>
 801dc8c:	3ff00000 	.word	0x3ff00000

0801dc90 <__ieee754_pow>:
 801dc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc94:	ed2d 8b06 	vpush	{d8-d10}
 801dc98:	b089      	sub	sp, #36	; 0x24
 801dc9a:	ed8d 1b00 	vstr	d1, [sp]
 801dc9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 801dca2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801dca6:	ea58 0102 	orrs.w	r1, r8, r2
 801dcaa:	ec57 6b10 	vmov	r6, r7, d0
 801dcae:	d115      	bne.n	801dcdc <__ieee754_pow+0x4c>
 801dcb0:	19b3      	adds	r3, r6, r6
 801dcb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801dcb6:	4152      	adcs	r2, r2
 801dcb8:	4299      	cmp	r1, r3
 801dcba:	4b89      	ldr	r3, [pc, #548]	; (801dee0 <__ieee754_pow+0x250>)
 801dcbc:	4193      	sbcs	r3, r2
 801dcbe:	f080 84d2 	bcs.w	801e666 <__ieee754_pow+0x9d6>
 801dcc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dcc6:	4630      	mov	r0, r6
 801dcc8:	4639      	mov	r1, r7
 801dcca:	f7fa fb4f 	bl	801836c <__adddf3>
 801dcce:	ec41 0b10 	vmov	d0, r0, r1
 801dcd2:	b009      	add	sp, #36	; 0x24
 801dcd4:	ecbd 8b06 	vpop	{d8-d10}
 801dcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dcdc:	4b81      	ldr	r3, [pc, #516]	; (801dee4 <__ieee754_pow+0x254>)
 801dcde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801dce2:	429c      	cmp	r4, r3
 801dce4:	ee10 aa10 	vmov	sl, s0
 801dce8:	463d      	mov	r5, r7
 801dcea:	dc06      	bgt.n	801dcfa <__ieee754_pow+0x6a>
 801dcec:	d101      	bne.n	801dcf2 <__ieee754_pow+0x62>
 801dcee:	2e00      	cmp	r6, #0
 801dcf0:	d1e7      	bne.n	801dcc2 <__ieee754_pow+0x32>
 801dcf2:	4598      	cmp	r8, r3
 801dcf4:	dc01      	bgt.n	801dcfa <__ieee754_pow+0x6a>
 801dcf6:	d10f      	bne.n	801dd18 <__ieee754_pow+0x88>
 801dcf8:	b172      	cbz	r2, 801dd18 <__ieee754_pow+0x88>
 801dcfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801dcfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801dd02:	ea55 050a 	orrs.w	r5, r5, sl
 801dd06:	d1dc      	bne.n	801dcc2 <__ieee754_pow+0x32>
 801dd08:	e9dd 3200 	ldrd	r3, r2, [sp]
 801dd0c:	18db      	adds	r3, r3, r3
 801dd0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801dd12:	4152      	adcs	r2, r2
 801dd14:	429d      	cmp	r5, r3
 801dd16:	e7d0      	b.n	801dcba <__ieee754_pow+0x2a>
 801dd18:	2d00      	cmp	r5, #0
 801dd1a:	da3b      	bge.n	801dd94 <__ieee754_pow+0x104>
 801dd1c:	4b72      	ldr	r3, [pc, #456]	; (801dee8 <__ieee754_pow+0x258>)
 801dd1e:	4598      	cmp	r8, r3
 801dd20:	dc51      	bgt.n	801ddc6 <__ieee754_pow+0x136>
 801dd22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801dd26:	4598      	cmp	r8, r3
 801dd28:	f340 84ac 	ble.w	801e684 <__ieee754_pow+0x9f4>
 801dd2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801dd30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801dd34:	2b14      	cmp	r3, #20
 801dd36:	dd0f      	ble.n	801dd58 <__ieee754_pow+0xc8>
 801dd38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801dd3c:	fa22 f103 	lsr.w	r1, r2, r3
 801dd40:	fa01 f303 	lsl.w	r3, r1, r3
 801dd44:	4293      	cmp	r3, r2
 801dd46:	f040 849d 	bne.w	801e684 <__ieee754_pow+0x9f4>
 801dd4a:	f001 0101 	and.w	r1, r1, #1
 801dd4e:	f1c1 0302 	rsb	r3, r1, #2
 801dd52:	9304      	str	r3, [sp, #16]
 801dd54:	b182      	cbz	r2, 801dd78 <__ieee754_pow+0xe8>
 801dd56:	e05f      	b.n	801de18 <__ieee754_pow+0x188>
 801dd58:	2a00      	cmp	r2, #0
 801dd5a:	d15b      	bne.n	801de14 <__ieee754_pow+0x184>
 801dd5c:	f1c3 0314 	rsb	r3, r3, #20
 801dd60:	fa48 f103 	asr.w	r1, r8, r3
 801dd64:	fa01 f303 	lsl.w	r3, r1, r3
 801dd68:	4543      	cmp	r3, r8
 801dd6a:	f040 8488 	bne.w	801e67e <__ieee754_pow+0x9ee>
 801dd6e:	f001 0101 	and.w	r1, r1, #1
 801dd72:	f1c1 0302 	rsb	r3, r1, #2
 801dd76:	9304      	str	r3, [sp, #16]
 801dd78:	4b5c      	ldr	r3, [pc, #368]	; (801deec <__ieee754_pow+0x25c>)
 801dd7a:	4598      	cmp	r8, r3
 801dd7c:	d132      	bne.n	801dde4 <__ieee754_pow+0x154>
 801dd7e:	f1b9 0f00 	cmp.w	r9, #0
 801dd82:	f280 8478 	bge.w	801e676 <__ieee754_pow+0x9e6>
 801dd86:	4959      	ldr	r1, [pc, #356]	; (801deec <__ieee754_pow+0x25c>)
 801dd88:	4632      	mov	r2, r6
 801dd8a:	463b      	mov	r3, r7
 801dd8c:	2000      	movs	r0, #0
 801dd8e:	f7fa fdcd 	bl	801892c <__aeabi_ddiv>
 801dd92:	e79c      	b.n	801dcce <__ieee754_pow+0x3e>
 801dd94:	2300      	movs	r3, #0
 801dd96:	9304      	str	r3, [sp, #16]
 801dd98:	2a00      	cmp	r2, #0
 801dd9a:	d13d      	bne.n	801de18 <__ieee754_pow+0x188>
 801dd9c:	4b51      	ldr	r3, [pc, #324]	; (801dee4 <__ieee754_pow+0x254>)
 801dd9e:	4598      	cmp	r8, r3
 801dda0:	d1ea      	bne.n	801dd78 <__ieee754_pow+0xe8>
 801dda2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801dda6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801ddaa:	ea53 030a 	orrs.w	r3, r3, sl
 801ddae:	f000 845a 	beq.w	801e666 <__ieee754_pow+0x9d6>
 801ddb2:	4b4f      	ldr	r3, [pc, #316]	; (801def0 <__ieee754_pow+0x260>)
 801ddb4:	429c      	cmp	r4, r3
 801ddb6:	dd08      	ble.n	801ddca <__ieee754_pow+0x13a>
 801ddb8:	f1b9 0f00 	cmp.w	r9, #0
 801ddbc:	f2c0 8457 	blt.w	801e66e <__ieee754_pow+0x9de>
 801ddc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ddc4:	e783      	b.n	801dcce <__ieee754_pow+0x3e>
 801ddc6:	2302      	movs	r3, #2
 801ddc8:	e7e5      	b.n	801dd96 <__ieee754_pow+0x106>
 801ddca:	f1b9 0f00 	cmp.w	r9, #0
 801ddce:	f04f 0000 	mov.w	r0, #0
 801ddd2:	f04f 0100 	mov.w	r1, #0
 801ddd6:	f6bf af7a 	bge.w	801dcce <__ieee754_pow+0x3e>
 801ddda:	e9dd 0300 	ldrd	r0, r3, [sp]
 801ddde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801dde2:	e774      	b.n	801dcce <__ieee754_pow+0x3e>
 801dde4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801dde8:	d106      	bne.n	801ddf8 <__ieee754_pow+0x168>
 801ddea:	4632      	mov	r2, r6
 801ddec:	463b      	mov	r3, r7
 801ddee:	4630      	mov	r0, r6
 801ddf0:	4639      	mov	r1, r7
 801ddf2:	f7fa fc71 	bl	80186d8 <__aeabi_dmul>
 801ddf6:	e76a      	b.n	801dcce <__ieee754_pow+0x3e>
 801ddf8:	4b3e      	ldr	r3, [pc, #248]	; (801def4 <__ieee754_pow+0x264>)
 801ddfa:	4599      	cmp	r9, r3
 801ddfc:	d10c      	bne.n	801de18 <__ieee754_pow+0x188>
 801ddfe:	2d00      	cmp	r5, #0
 801de00:	db0a      	blt.n	801de18 <__ieee754_pow+0x188>
 801de02:	ec47 6b10 	vmov	d0, r6, r7
 801de06:	b009      	add	sp, #36	; 0x24
 801de08:	ecbd 8b06 	vpop	{d8-d10}
 801de0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de10:	f000 bc6c 	b.w	801e6ec <__ieee754_sqrt>
 801de14:	2300      	movs	r3, #0
 801de16:	9304      	str	r3, [sp, #16]
 801de18:	ec47 6b10 	vmov	d0, r6, r7
 801de1c:	f000 fd48 	bl	801e8b0 <fabs>
 801de20:	ec51 0b10 	vmov	r0, r1, d0
 801de24:	f1ba 0f00 	cmp.w	sl, #0
 801de28:	d129      	bne.n	801de7e <__ieee754_pow+0x1ee>
 801de2a:	b124      	cbz	r4, 801de36 <__ieee754_pow+0x1a6>
 801de2c:	4b2f      	ldr	r3, [pc, #188]	; (801deec <__ieee754_pow+0x25c>)
 801de2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801de32:	429a      	cmp	r2, r3
 801de34:	d123      	bne.n	801de7e <__ieee754_pow+0x1ee>
 801de36:	f1b9 0f00 	cmp.w	r9, #0
 801de3a:	da05      	bge.n	801de48 <__ieee754_pow+0x1b8>
 801de3c:	4602      	mov	r2, r0
 801de3e:	460b      	mov	r3, r1
 801de40:	2000      	movs	r0, #0
 801de42:	492a      	ldr	r1, [pc, #168]	; (801deec <__ieee754_pow+0x25c>)
 801de44:	f7fa fd72 	bl	801892c <__aeabi_ddiv>
 801de48:	2d00      	cmp	r5, #0
 801de4a:	f6bf af40 	bge.w	801dcce <__ieee754_pow+0x3e>
 801de4e:	9b04      	ldr	r3, [sp, #16]
 801de50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801de54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801de58:	4323      	orrs	r3, r4
 801de5a:	d108      	bne.n	801de6e <__ieee754_pow+0x1de>
 801de5c:	4602      	mov	r2, r0
 801de5e:	460b      	mov	r3, r1
 801de60:	4610      	mov	r0, r2
 801de62:	4619      	mov	r1, r3
 801de64:	f7fa fa80 	bl	8018368 <__aeabi_dsub>
 801de68:	4602      	mov	r2, r0
 801de6a:	460b      	mov	r3, r1
 801de6c:	e78f      	b.n	801dd8e <__ieee754_pow+0xfe>
 801de6e:	9b04      	ldr	r3, [sp, #16]
 801de70:	2b01      	cmp	r3, #1
 801de72:	f47f af2c 	bne.w	801dcce <__ieee754_pow+0x3e>
 801de76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801de7a:	4619      	mov	r1, r3
 801de7c:	e727      	b.n	801dcce <__ieee754_pow+0x3e>
 801de7e:	0feb      	lsrs	r3, r5, #31
 801de80:	3b01      	subs	r3, #1
 801de82:	9306      	str	r3, [sp, #24]
 801de84:	9a06      	ldr	r2, [sp, #24]
 801de86:	9b04      	ldr	r3, [sp, #16]
 801de88:	4313      	orrs	r3, r2
 801de8a:	d102      	bne.n	801de92 <__ieee754_pow+0x202>
 801de8c:	4632      	mov	r2, r6
 801de8e:	463b      	mov	r3, r7
 801de90:	e7e6      	b.n	801de60 <__ieee754_pow+0x1d0>
 801de92:	4b19      	ldr	r3, [pc, #100]	; (801def8 <__ieee754_pow+0x268>)
 801de94:	4598      	cmp	r8, r3
 801de96:	f340 80fb 	ble.w	801e090 <__ieee754_pow+0x400>
 801de9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801de9e:	4598      	cmp	r8, r3
 801dea0:	4b13      	ldr	r3, [pc, #76]	; (801def0 <__ieee754_pow+0x260>)
 801dea2:	dd0c      	ble.n	801debe <__ieee754_pow+0x22e>
 801dea4:	429c      	cmp	r4, r3
 801dea6:	dc0f      	bgt.n	801dec8 <__ieee754_pow+0x238>
 801dea8:	f1b9 0f00 	cmp.w	r9, #0
 801deac:	da0f      	bge.n	801dece <__ieee754_pow+0x23e>
 801deae:	2000      	movs	r0, #0
 801deb0:	b009      	add	sp, #36	; 0x24
 801deb2:	ecbd 8b06 	vpop	{d8-d10}
 801deb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deba:	f000 bcf0 	b.w	801e89e <__math_oflow>
 801debe:	429c      	cmp	r4, r3
 801dec0:	dbf2      	blt.n	801dea8 <__ieee754_pow+0x218>
 801dec2:	4b0a      	ldr	r3, [pc, #40]	; (801deec <__ieee754_pow+0x25c>)
 801dec4:	429c      	cmp	r4, r3
 801dec6:	dd19      	ble.n	801defc <__ieee754_pow+0x26c>
 801dec8:	f1b9 0f00 	cmp.w	r9, #0
 801decc:	dcef      	bgt.n	801deae <__ieee754_pow+0x21e>
 801dece:	2000      	movs	r0, #0
 801ded0:	b009      	add	sp, #36	; 0x24
 801ded2:	ecbd 8b06 	vpop	{d8-d10}
 801ded6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deda:	f000 bcd7 	b.w	801e88c <__math_uflow>
 801dede:	bf00      	nop
 801dee0:	fff00000 	.word	0xfff00000
 801dee4:	7ff00000 	.word	0x7ff00000
 801dee8:	433fffff 	.word	0x433fffff
 801deec:	3ff00000 	.word	0x3ff00000
 801def0:	3fefffff 	.word	0x3fefffff
 801def4:	3fe00000 	.word	0x3fe00000
 801def8:	41e00000 	.word	0x41e00000
 801defc:	4b60      	ldr	r3, [pc, #384]	; (801e080 <__ieee754_pow+0x3f0>)
 801defe:	2200      	movs	r2, #0
 801df00:	f7fa fa32 	bl	8018368 <__aeabi_dsub>
 801df04:	a354      	add	r3, pc, #336	; (adr r3, 801e058 <__ieee754_pow+0x3c8>)
 801df06:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df0a:	4604      	mov	r4, r0
 801df0c:	460d      	mov	r5, r1
 801df0e:	f7fa fbe3 	bl	80186d8 <__aeabi_dmul>
 801df12:	a353      	add	r3, pc, #332	; (adr r3, 801e060 <__ieee754_pow+0x3d0>)
 801df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df18:	4606      	mov	r6, r0
 801df1a:	460f      	mov	r7, r1
 801df1c:	4620      	mov	r0, r4
 801df1e:	4629      	mov	r1, r5
 801df20:	f7fa fbda 	bl	80186d8 <__aeabi_dmul>
 801df24:	4b57      	ldr	r3, [pc, #348]	; (801e084 <__ieee754_pow+0x3f4>)
 801df26:	4682      	mov	sl, r0
 801df28:	468b      	mov	fp, r1
 801df2a:	2200      	movs	r2, #0
 801df2c:	4620      	mov	r0, r4
 801df2e:	4629      	mov	r1, r5
 801df30:	f7fa fbd2 	bl	80186d8 <__aeabi_dmul>
 801df34:	4602      	mov	r2, r0
 801df36:	460b      	mov	r3, r1
 801df38:	a14b      	add	r1, pc, #300	; (adr r1, 801e068 <__ieee754_pow+0x3d8>)
 801df3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801df3e:	f7fa fa13 	bl	8018368 <__aeabi_dsub>
 801df42:	4622      	mov	r2, r4
 801df44:	462b      	mov	r3, r5
 801df46:	f7fa fbc7 	bl	80186d8 <__aeabi_dmul>
 801df4a:	4602      	mov	r2, r0
 801df4c:	460b      	mov	r3, r1
 801df4e:	2000      	movs	r0, #0
 801df50:	494d      	ldr	r1, [pc, #308]	; (801e088 <__ieee754_pow+0x3f8>)
 801df52:	f7fa fa09 	bl	8018368 <__aeabi_dsub>
 801df56:	4622      	mov	r2, r4
 801df58:	4680      	mov	r8, r0
 801df5a:	4689      	mov	r9, r1
 801df5c:	462b      	mov	r3, r5
 801df5e:	4620      	mov	r0, r4
 801df60:	4629      	mov	r1, r5
 801df62:	f7fa fbb9 	bl	80186d8 <__aeabi_dmul>
 801df66:	4602      	mov	r2, r0
 801df68:	460b      	mov	r3, r1
 801df6a:	4640      	mov	r0, r8
 801df6c:	4649      	mov	r1, r9
 801df6e:	f7fa fbb3 	bl	80186d8 <__aeabi_dmul>
 801df72:	a33f      	add	r3, pc, #252	; (adr r3, 801e070 <__ieee754_pow+0x3e0>)
 801df74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df78:	f7fa fbae 	bl	80186d8 <__aeabi_dmul>
 801df7c:	4602      	mov	r2, r0
 801df7e:	460b      	mov	r3, r1
 801df80:	4650      	mov	r0, sl
 801df82:	4659      	mov	r1, fp
 801df84:	f7fa f9f0 	bl	8018368 <__aeabi_dsub>
 801df88:	4602      	mov	r2, r0
 801df8a:	460b      	mov	r3, r1
 801df8c:	4680      	mov	r8, r0
 801df8e:	4689      	mov	r9, r1
 801df90:	4630      	mov	r0, r6
 801df92:	4639      	mov	r1, r7
 801df94:	f7fa f9ea 	bl	801836c <__adddf3>
 801df98:	2000      	movs	r0, #0
 801df9a:	4632      	mov	r2, r6
 801df9c:	463b      	mov	r3, r7
 801df9e:	4604      	mov	r4, r0
 801dfa0:	460d      	mov	r5, r1
 801dfa2:	f7fa f9e1 	bl	8018368 <__aeabi_dsub>
 801dfa6:	4602      	mov	r2, r0
 801dfa8:	460b      	mov	r3, r1
 801dfaa:	4640      	mov	r0, r8
 801dfac:	4649      	mov	r1, r9
 801dfae:	f7fa f9db 	bl	8018368 <__aeabi_dsub>
 801dfb2:	9b04      	ldr	r3, [sp, #16]
 801dfb4:	9a06      	ldr	r2, [sp, #24]
 801dfb6:	3b01      	subs	r3, #1
 801dfb8:	4313      	orrs	r3, r2
 801dfba:	4682      	mov	sl, r0
 801dfbc:	468b      	mov	fp, r1
 801dfbe:	f040 81e7 	bne.w	801e390 <__ieee754_pow+0x700>
 801dfc2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e078 <__ieee754_pow+0x3e8>
 801dfc6:	eeb0 8a47 	vmov.f32	s16, s14
 801dfca:	eef0 8a67 	vmov.f32	s17, s15
 801dfce:	e9dd 6700 	ldrd	r6, r7, [sp]
 801dfd2:	2600      	movs	r6, #0
 801dfd4:	4632      	mov	r2, r6
 801dfd6:	463b      	mov	r3, r7
 801dfd8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801dfdc:	f7fa f9c4 	bl	8018368 <__aeabi_dsub>
 801dfe0:	4622      	mov	r2, r4
 801dfe2:	462b      	mov	r3, r5
 801dfe4:	f7fa fb78 	bl	80186d8 <__aeabi_dmul>
 801dfe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801dfec:	4680      	mov	r8, r0
 801dfee:	4689      	mov	r9, r1
 801dff0:	4650      	mov	r0, sl
 801dff2:	4659      	mov	r1, fp
 801dff4:	f7fa fb70 	bl	80186d8 <__aeabi_dmul>
 801dff8:	4602      	mov	r2, r0
 801dffa:	460b      	mov	r3, r1
 801dffc:	4640      	mov	r0, r8
 801dffe:	4649      	mov	r1, r9
 801e000:	f7fa f9b4 	bl	801836c <__adddf3>
 801e004:	4632      	mov	r2, r6
 801e006:	463b      	mov	r3, r7
 801e008:	4680      	mov	r8, r0
 801e00a:	4689      	mov	r9, r1
 801e00c:	4620      	mov	r0, r4
 801e00e:	4629      	mov	r1, r5
 801e010:	f7fa fb62 	bl	80186d8 <__aeabi_dmul>
 801e014:	460b      	mov	r3, r1
 801e016:	4604      	mov	r4, r0
 801e018:	460d      	mov	r5, r1
 801e01a:	4602      	mov	r2, r0
 801e01c:	4649      	mov	r1, r9
 801e01e:	4640      	mov	r0, r8
 801e020:	f7fa f9a4 	bl	801836c <__adddf3>
 801e024:	4b19      	ldr	r3, [pc, #100]	; (801e08c <__ieee754_pow+0x3fc>)
 801e026:	4299      	cmp	r1, r3
 801e028:	ec45 4b19 	vmov	d9, r4, r5
 801e02c:	4606      	mov	r6, r0
 801e02e:	460f      	mov	r7, r1
 801e030:	468b      	mov	fp, r1
 801e032:	f340 82f1 	ble.w	801e618 <__ieee754_pow+0x988>
 801e036:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e03a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e03e:	4303      	orrs	r3, r0
 801e040:	f000 81e4 	beq.w	801e40c <__ieee754_pow+0x77c>
 801e044:	ec51 0b18 	vmov	r0, r1, d8
 801e048:	2200      	movs	r2, #0
 801e04a:	2300      	movs	r3, #0
 801e04c:	f7fa fdb6 	bl	8018bbc <__aeabi_dcmplt>
 801e050:	3800      	subs	r0, #0
 801e052:	bf18      	it	ne
 801e054:	2001      	movne	r0, #1
 801e056:	e72b      	b.n	801deb0 <__ieee754_pow+0x220>
 801e058:	60000000 	.word	0x60000000
 801e05c:	3ff71547 	.word	0x3ff71547
 801e060:	f85ddf44 	.word	0xf85ddf44
 801e064:	3e54ae0b 	.word	0x3e54ae0b
 801e068:	55555555 	.word	0x55555555
 801e06c:	3fd55555 	.word	0x3fd55555
 801e070:	652b82fe 	.word	0x652b82fe
 801e074:	3ff71547 	.word	0x3ff71547
 801e078:	00000000 	.word	0x00000000
 801e07c:	bff00000 	.word	0xbff00000
 801e080:	3ff00000 	.word	0x3ff00000
 801e084:	3fd00000 	.word	0x3fd00000
 801e088:	3fe00000 	.word	0x3fe00000
 801e08c:	408fffff 	.word	0x408fffff
 801e090:	4bd5      	ldr	r3, [pc, #852]	; (801e3e8 <__ieee754_pow+0x758>)
 801e092:	402b      	ands	r3, r5
 801e094:	2200      	movs	r2, #0
 801e096:	b92b      	cbnz	r3, 801e0a4 <__ieee754_pow+0x414>
 801e098:	4bd4      	ldr	r3, [pc, #848]	; (801e3ec <__ieee754_pow+0x75c>)
 801e09a:	f7fa fb1d 	bl	80186d8 <__aeabi_dmul>
 801e09e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e0a2:	460c      	mov	r4, r1
 801e0a4:	1523      	asrs	r3, r4, #20
 801e0a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e0aa:	4413      	add	r3, r2
 801e0ac:	9305      	str	r3, [sp, #20]
 801e0ae:	4bd0      	ldr	r3, [pc, #832]	; (801e3f0 <__ieee754_pow+0x760>)
 801e0b0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e0b4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e0b8:	429c      	cmp	r4, r3
 801e0ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e0be:	dd08      	ble.n	801e0d2 <__ieee754_pow+0x442>
 801e0c0:	4bcc      	ldr	r3, [pc, #816]	; (801e3f4 <__ieee754_pow+0x764>)
 801e0c2:	429c      	cmp	r4, r3
 801e0c4:	f340 8162 	ble.w	801e38c <__ieee754_pow+0x6fc>
 801e0c8:	9b05      	ldr	r3, [sp, #20]
 801e0ca:	3301      	adds	r3, #1
 801e0cc:	9305      	str	r3, [sp, #20]
 801e0ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e0d2:	2400      	movs	r4, #0
 801e0d4:	00e3      	lsls	r3, r4, #3
 801e0d6:	9307      	str	r3, [sp, #28]
 801e0d8:	4bc7      	ldr	r3, [pc, #796]	; (801e3f8 <__ieee754_pow+0x768>)
 801e0da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e0de:	ed93 7b00 	vldr	d7, [r3]
 801e0e2:	4629      	mov	r1, r5
 801e0e4:	ec53 2b17 	vmov	r2, r3, d7
 801e0e8:	eeb0 9a47 	vmov.f32	s18, s14
 801e0ec:	eef0 9a67 	vmov.f32	s19, s15
 801e0f0:	4682      	mov	sl, r0
 801e0f2:	f7fa f939 	bl	8018368 <__aeabi_dsub>
 801e0f6:	4652      	mov	r2, sl
 801e0f8:	4606      	mov	r6, r0
 801e0fa:	460f      	mov	r7, r1
 801e0fc:	462b      	mov	r3, r5
 801e0fe:	ec51 0b19 	vmov	r0, r1, d9
 801e102:	f7fa f933 	bl	801836c <__adddf3>
 801e106:	4602      	mov	r2, r0
 801e108:	460b      	mov	r3, r1
 801e10a:	2000      	movs	r0, #0
 801e10c:	49bb      	ldr	r1, [pc, #748]	; (801e3fc <__ieee754_pow+0x76c>)
 801e10e:	f7fa fc0d 	bl	801892c <__aeabi_ddiv>
 801e112:	ec41 0b1a 	vmov	d10, r0, r1
 801e116:	4602      	mov	r2, r0
 801e118:	460b      	mov	r3, r1
 801e11a:	4630      	mov	r0, r6
 801e11c:	4639      	mov	r1, r7
 801e11e:	f7fa fadb 	bl	80186d8 <__aeabi_dmul>
 801e122:	2300      	movs	r3, #0
 801e124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e128:	9302      	str	r3, [sp, #8]
 801e12a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e12e:	46ab      	mov	fp, r5
 801e130:	106d      	asrs	r5, r5, #1
 801e132:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e136:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e13a:	ec41 0b18 	vmov	d8, r0, r1
 801e13e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e142:	2200      	movs	r2, #0
 801e144:	4640      	mov	r0, r8
 801e146:	4649      	mov	r1, r9
 801e148:	4614      	mov	r4, r2
 801e14a:	461d      	mov	r5, r3
 801e14c:	f7fa fac4 	bl	80186d8 <__aeabi_dmul>
 801e150:	4602      	mov	r2, r0
 801e152:	460b      	mov	r3, r1
 801e154:	4630      	mov	r0, r6
 801e156:	4639      	mov	r1, r7
 801e158:	f7fa f906 	bl	8018368 <__aeabi_dsub>
 801e15c:	ec53 2b19 	vmov	r2, r3, d9
 801e160:	4606      	mov	r6, r0
 801e162:	460f      	mov	r7, r1
 801e164:	4620      	mov	r0, r4
 801e166:	4629      	mov	r1, r5
 801e168:	f7fa f8fe 	bl	8018368 <__aeabi_dsub>
 801e16c:	4602      	mov	r2, r0
 801e16e:	460b      	mov	r3, r1
 801e170:	4650      	mov	r0, sl
 801e172:	4659      	mov	r1, fp
 801e174:	f7fa f8f8 	bl	8018368 <__aeabi_dsub>
 801e178:	4642      	mov	r2, r8
 801e17a:	464b      	mov	r3, r9
 801e17c:	f7fa faac 	bl	80186d8 <__aeabi_dmul>
 801e180:	4602      	mov	r2, r0
 801e182:	460b      	mov	r3, r1
 801e184:	4630      	mov	r0, r6
 801e186:	4639      	mov	r1, r7
 801e188:	f7fa f8ee 	bl	8018368 <__aeabi_dsub>
 801e18c:	ec53 2b1a 	vmov	r2, r3, d10
 801e190:	f7fa faa2 	bl	80186d8 <__aeabi_dmul>
 801e194:	ec53 2b18 	vmov	r2, r3, d8
 801e198:	ec41 0b19 	vmov	d9, r0, r1
 801e19c:	ec51 0b18 	vmov	r0, r1, d8
 801e1a0:	f7fa fa9a 	bl	80186d8 <__aeabi_dmul>
 801e1a4:	a37c      	add	r3, pc, #496	; (adr r3, 801e398 <__ieee754_pow+0x708>)
 801e1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1aa:	4604      	mov	r4, r0
 801e1ac:	460d      	mov	r5, r1
 801e1ae:	f7fa fa93 	bl	80186d8 <__aeabi_dmul>
 801e1b2:	a37b      	add	r3, pc, #492	; (adr r3, 801e3a0 <__ieee754_pow+0x710>)
 801e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1b8:	f7fa f8d8 	bl	801836c <__adddf3>
 801e1bc:	4622      	mov	r2, r4
 801e1be:	462b      	mov	r3, r5
 801e1c0:	f7fa fa8a 	bl	80186d8 <__aeabi_dmul>
 801e1c4:	a378      	add	r3, pc, #480	; (adr r3, 801e3a8 <__ieee754_pow+0x718>)
 801e1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1ca:	f7fa f8cf 	bl	801836c <__adddf3>
 801e1ce:	4622      	mov	r2, r4
 801e1d0:	462b      	mov	r3, r5
 801e1d2:	f7fa fa81 	bl	80186d8 <__aeabi_dmul>
 801e1d6:	a376      	add	r3, pc, #472	; (adr r3, 801e3b0 <__ieee754_pow+0x720>)
 801e1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1dc:	f7fa f8c6 	bl	801836c <__adddf3>
 801e1e0:	4622      	mov	r2, r4
 801e1e2:	462b      	mov	r3, r5
 801e1e4:	f7fa fa78 	bl	80186d8 <__aeabi_dmul>
 801e1e8:	a373      	add	r3, pc, #460	; (adr r3, 801e3b8 <__ieee754_pow+0x728>)
 801e1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1ee:	f7fa f8bd 	bl	801836c <__adddf3>
 801e1f2:	4622      	mov	r2, r4
 801e1f4:	462b      	mov	r3, r5
 801e1f6:	f7fa fa6f 	bl	80186d8 <__aeabi_dmul>
 801e1fa:	a371      	add	r3, pc, #452	; (adr r3, 801e3c0 <__ieee754_pow+0x730>)
 801e1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e200:	f7fa f8b4 	bl	801836c <__adddf3>
 801e204:	4622      	mov	r2, r4
 801e206:	4606      	mov	r6, r0
 801e208:	460f      	mov	r7, r1
 801e20a:	462b      	mov	r3, r5
 801e20c:	4620      	mov	r0, r4
 801e20e:	4629      	mov	r1, r5
 801e210:	f7fa fa62 	bl	80186d8 <__aeabi_dmul>
 801e214:	4602      	mov	r2, r0
 801e216:	460b      	mov	r3, r1
 801e218:	4630      	mov	r0, r6
 801e21a:	4639      	mov	r1, r7
 801e21c:	f7fa fa5c 	bl	80186d8 <__aeabi_dmul>
 801e220:	4642      	mov	r2, r8
 801e222:	4604      	mov	r4, r0
 801e224:	460d      	mov	r5, r1
 801e226:	464b      	mov	r3, r9
 801e228:	ec51 0b18 	vmov	r0, r1, d8
 801e22c:	f7fa f89e 	bl	801836c <__adddf3>
 801e230:	ec53 2b19 	vmov	r2, r3, d9
 801e234:	f7fa fa50 	bl	80186d8 <__aeabi_dmul>
 801e238:	4622      	mov	r2, r4
 801e23a:	462b      	mov	r3, r5
 801e23c:	f7fa f896 	bl	801836c <__adddf3>
 801e240:	4642      	mov	r2, r8
 801e242:	4682      	mov	sl, r0
 801e244:	468b      	mov	fp, r1
 801e246:	464b      	mov	r3, r9
 801e248:	4640      	mov	r0, r8
 801e24a:	4649      	mov	r1, r9
 801e24c:	f7fa fa44 	bl	80186d8 <__aeabi_dmul>
 801e250:	4b6b      	ldr	r3, [pc, #428]	; (801e400 <__ieee754_pow+0x770>)
 801e252:	2200      	movs	r2, #0
 801e254:	4606      	mov	r6, r0
 801e256:	460f      	mov	r7, r1
 801e258:	f7fa f888 	bl	801836c <__adddf3>
 801e25c:	4652      	mov	r2, sl
 801e25e:	465b      	mov	r3, fp
 801e260:	f7fa f884 	bl	801836c <__adddf3>
 801e264:	2000      	movs	r0, #0
 801e266:	4604      	mov	r4, r0
 801e268:	460d      	mov	r5, r1
 801e26a:	4602      	mov	r2, r0
 801e26c:	460b      	mov	r3, r1
 801e26e:	4640      	mov	r0, r8
 801e270:	4649      	mov	r1, r9
 801e272:	f7fa fa31 	bl	80186d8 <__aeabi_dmul>
 801e276:	4b62      	ldr	r3, [pc, #392]	; (801e400 <__ieee754_pow+0x770>)
 801e278:	4680      	mov	r8, r0
 801e27a:	4689      	mov	r9, r1
 801e27c:	2200      	movs	r2, #0
 801e27e:	4620      	mov	r0, r4
 801e280:	4629      	mov	r1, r5
 801e282:	f7fa f871 	bl	8018368 <__aeabi_dsub>
 801e286:	4632      	mov	r2, r6
 801e288:	463b      	mov	r3, r7
 801e28a:	f7fa f86d 	bl	8018368 <__aeabi_dsub>
 801e28e:	4602      	mov	r2, r0
 801e290:	460b      	mov	r3, r1
 801e292:	4650      	mov	r0, sl
 801e294:	4659      	mov	r1, fp
 801e296:	f7fa f867 	bl	8018368 <__aeabi_dsub>
 801e29a:	ec53 2b18 	vmov	r2, r3, d8
 801e29e:	f7fa fa1b 	bl	80186d8 <__aeabi_dmul>
 801e2a2:	4622      	mov	r2, r4
 801e2a4:	4606      	mov	r6, r0
 801e2a6:	460f      	mov	r7, r1
 801e2a8:	462b      	mov	r3, r5
 801e2aa:	ec51 0b19 	vmov	r0, r1, d9
 801e2ae:	f7fa fa13 	bl	80186d8 <__aeabi_dmul>
 801e2b2:	4602      	mov	r2, r0
 801e2b4:	460b      	mov	r3, r1
 801e2b6:	4630      	mov	r0, r6
 801e2b8:	4639      	mov	r1, r7
 801e2ba:	f7fa f857 	bl	801836c <__adddf3>
 801e2be:	4606      	mov	r6, r0
 801e2c0:	460f      	mov	r7, r1
 801e2c2:	4602      	mov	r2, r0
 801e2c4:	460b      	mov	r3, r1
 801e2c6:	4640      	mov	r0, r8
 801e2c8:	4649      	mov	r1, r9
 801e2ca:	f7fa f84f 	bl	801836c <__adddf3>
 801e2ce:	a33e      	add	r3, pc, #248	; (adr r3, 801e3c8 <__ieee754_pow+0x738>)
 801e2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2d4:	2000      	movs	r0, #0
 801e2d6:	4604      	mov	r4, r0
 801e2d8:	460d      	mov	r5, r1
 801e2da:	f7fa f9fd 	bl	80186d8 <__aeabi_dmul>
 801e2de:	4642      	mov	r2, r8
 801e2e0:	ec41 0b18 	vmov	d8, r0, r1
 801e2e4:	464b      	mov	r3, r9
 801e2e6:	4620      	mov	r0, r4
 801e2e8:	4629      	mov	r1, r5
 801e2ea:	f7fa f83d 	bl	8018368 <__aeabi_dsub>
 801e2ee:	4602      	mov	r2, r0
 801e2f0:	460b      	mov	r3, r1
 801e2f2:	4630      	mov	r0, r6
 801e2f4:	4639      	mov	r1, r7
 801e2f6:	f7fa f837 	bl	8018368 <__aeabi_dsub>
 801e2fa:	a335      	add	r3, pc, #212	; (adr r3, 801e3d0 <__ieee754_pow+0x740>)
 801e2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e300:	f7fa f9ea 	bl	80186d8 <__aeabi_dmul>
 801e304:	a334      	add	r3, pc, #208	; (adr r3, 801e3d8 <__ieee754_pow+0x748>)
 801e306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e30a:	4606      	mov	r6, r0
 801e30c:	460f      	mov	r7, r1
 801e30e:	4620      	mov	r0, r4
 801e310:	4629      	mov	r1, r5
 801e312:	f7fa f9e1 	bl	80186d8 <__aeabi_dmul>
 801e316:	4602      	mov	r2, r0
 801e318:	460b      	mov	r3, r1
 801e31a:	4630      	mov	r0, r6
 801e31c:	4639      	mov	r1, r7
 801e31e:	f7fa f825 	bl	801836c <__adddf3>
 801e322:	9a07      	ldr	r2, [sp, #28]
 801e324:	4b37      	ldr	r3, [pc, #220]	; (801e404 <__ieee754_pow+0x774>)
 801e326:	4413      	add	r3, r2
 801e328:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32c:	f7fa f81e 	bl	801836c <__adddf3>
 801e330:	4682      	mov	sl, r0
 801e332:	9805      	ldr	r0, [sp, #20]
 801e334:	468b      	mov	fp, r1
 801e336:	f7fa f965 	bl	8018604 <__aeabi_i2d>
 801e33a:	9a07      	ldr	r2, [sp, #28]
 801e33c:	4b32      	ldr	r3, [pc, #200]	; (801e408 <__ieee754_pow+0x778>)
 801e33e:	4413      	add	r3, r2
 801e340:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e344:	4606      	mov	r6, r0
 801e346:	460f      	mov	r7, r1
 801e348:	4652      	mov	r2, sl
 801e34a:	465b      	mov	r3, fp
 801e34c:	ec51 0b18 	vmov	r0, r1, d8
 801e350:	f7fa f80c 	bl	801836c <__adddf3>
 801e354:	4642      	mov	r2, r8
 801e356:	464b      	mov	r3, r9
 801e358:	f7fa f808 	bl	801836c <__adddf3>
 801e35c:	4632      	mov	r2, r6
 801e35e:	463b      	mov	r3, r7
 801e360:	f7fa f804 	bl	801836c <__adddf3>
 801e364:	2000      	movs	r0, #0
 801e366:	4632      	mov	r2, r6
 801e368:	463b      	mov	r3, r7
 801e36a:	4604      	mov	r4, r0
 801e36c:	460d      	mov	r5, r1
 801e36e:	f7f9 fffb 	bl	8018368 <__aeabi_dsub>
 801e372:	4642      	mov	r2, r8
 801e374:	464b      	mov	r3, r9
 801e376:	f7f9 fff7 	bl	8018368 <__aeabi_dsub>
 801e37a:	ec53 2b18 	vmov	r2, r3, d8
 801e37e:	f7f9 fff3 	bl	8018368 <__aeabi_dsub>
 801e382:	4602      	mov	r2, r0
 801e384:	460b      	mov	r3, r1
 801e386:	4650      	mov	r0, sl
 801e388:	4659      	mov	r1, fp
 801e38a:	e610      	b.n	801dfae <__ieee754_pow+0x31e>
 801e38c:	2401      	movs	r4, #1
 801e38e:	e6a1      	b.n	801e0d4 <__ieee754_pow+0x444>
 801e390:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801e3e0 <__ieee754_pow+0x750>
 801e394:	e617      	b.n	801dfc6 <__ieee754_pow+0x336>
 801e396:	bf00      	nop
 801e398:	4a454eef 	.word	0x4a454eef
 801e39c:	3fca7e28 	.word	0x3fca7e28
 801e3a0:	93c9db65 	.word	0x93c9db65
 801e3a4:	3fcd864a 	.word	0x3fcd864a
 801e3a8:	a91d4101 	.word	0xa91d4101
 801e3ac:	3fd17460 	.word	0x3fd17460
 801e3b0:	518f264d 	.word	0x518f264d
 801e3b4:	3fd55555 	.word	0x3fd55555
 801e3b8:	db6fabff 	.word	0xdb6fabff
 801e3bc:	3fdb6db6 	.word	0x3fdb6db6
 801e3c0:	33333303 	.word	0x33333303
 801e3c4:	3fe33333 	.word	0x3fe33333
 801e3c8:	e0000000 	.word	0xe0000000
 801e3cc:	3feec709 	.word	0x3feec709
 801e3d0:	dc3a03fd 	.word	0xdc3a03fd
 801e3d4:	3feec709 	.word	0x3feec709
 801e3d8:	145b01f5 	.word	0x145b01f5
 801e3dc:	be3e2fe0 	.word	0xbe3e2fe0
 801e3e0:	00000000 	.word	0x00000000
 801e3e4:	3ff00000 	.word	0x3ff00000
 801e3e8:	7ff00000 	.word	0x7ff00000
 801e3ec:	43400000 	.word	0x43400000
 801e3f0:	0003988e 	.word	0x0003988e
 801e3f4:	000bb679 	.word	0x000bb679
 801e3f8:	08051da8 	.word	0x08051da8
 801e3fc:	3ff00000 	.word	0x3ff00000
 801e400:	40080000 	.word	0x40080000
 801e404:	08051dc8 	.word	0x08051dc8
 801e408:	08051db8 	.word	0x08051db8
 801e40c:	a3b5      	add	r3, pc, #724	; (adr r3, 801e6e4 <__ieee754_pow+0xa54>)
 801e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e412:	4640      	mov	r0, r8
 801e414:	4649      	mov	r1, r9
 801e416:	f7f9 ffa9 	bl	801836c <__adddf3>
 801e41a:	4622      	mov	r2, r4
 801e41c:	ec41 0b1a 	vmov	d10, r0, r1
 801e420:	462b      	mov	r3, r5
 801e422:	4630      	mov	r0, r6
 801e424:	4639      	mov	r1, r7
 801e426:	f7f9 ff9f 	bl	8018368 <__aeabi_dsub>
 801e42a:	4602      	mov	r2, r0
 801e42c:	460b      	mov	r3, r1
 801e42e:	ec51 0b1a 	vmov	r0, r1, d10
 801e432:	f7fa fbe1 	bl	8018bf8 <__aeabi_dcmpgt>
 801e436:	2800      	cmp	r0, #0
 801e438:	f47f ae04 	bne.w	801e044 <__ieee754_pow+0x3b4>
 801e43c:	4aa4      	ldr	r2, [pc, #656]	; (801e6d0 <__ieee754_pow+0xa40>)
 801e43e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e442:	4293      	cmp	r3, r2
 801e444:	f340 8108 	ble.w	801e658 <__ieee754_pow+0x9c8>
 801e448:	151b      	asrs	r3, r3, #20
 801e44a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e44e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e452:	fa4a f303 	asr.w	r3, sl, r3
 801e456:	445b      	add	r3, fp
 801e458:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801e45c:	4e9d      	ldr	r6, [pc, #628]	; (801e6d4 <__ieee754_pow+0xa44>)
 801e45e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e462:	4116      	asrs	r6, r2
 801e464:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801e468:	2000      	movs	r0, #0
 801e46a:	ea23 0106 	bic.w	r1, r3, r6
 801e46e:	f1c2 0214 	rsb	r2, r2, #20
 801e472:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e476:	fa4a fa02 	asr.w	sl, sl, r2
 801e47a:	f1bb 0f00 	cmp.w	fp, #0
 801e47e:	4602      	mov	r2, r0
 801e480:	460b      	mov	r3, r1
 801e482:	4620      	mov	r0, r4
 801e484:	4629      	mov	r1, r5
 801e486:	bfb8      	it	lt
 801e488:	f1ca 0a00 	rsblt	sl, sl, #0
 801e48c:	f7f9 ff6c 	bl	8018368 <__aeabi_dsub>
 801e490:	ec41 0b19 	vmov	d9, r0, r1
 801e494:	4642      	mov	r2, r8
 801e496:	464b      	mov	r3, r9
 801e498:	ec51 0b19 	vmov	r0, r1, d9
 801e49c:	f7f9 ff66 	bl	801836c <__adddf3>
 801e4a0:	a37b      	add	r3, pc, #492	; (adr r3, 801e690 <__ieee754_pow+0xa00>)
 801e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a6:	2000      	movs	r0, #0
 801e4a8:	4604      	mov	r4, r0
 801e4aa:	460d      	mov	r5, r1
 801e4ac:	f7fa f914 	bl	80186d8 <__aeabi_dmul>
 801e4b0:	ec53 2b19 	vmov	r2, r3, d9
 801e4b4:	4606      	mov	r6, r0
 801e4b6:	460f      	mov	r7, r1
 801e4b8:	4620      	mov	r0, r4
 801e4ba:	4629      	mov	r1, r5
 801e4bc:	f7f9 ff54 	bl	8018368 <__aeabi_dsub>
 801e4c0:	4602      	mov	r2, r0
 801e4c2:	460b      	mov	r3, r1
 801e4c4:	4640      	mov	r0, r8
 801e4c6:	4649      	mov	r1, r9
 801e4c8:	f7f9 ff4e 	bl	8018368 <__aeabi_dsub>
 801e4cc:	a372      	add	r3, pc, #456	; (adr r3, 801e698 <__ieee754_pow+0xa08>)
 801e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4d2:	f7fa f901 	bl	80186d8 <__aeabi_dmul>
 801e4d6:	a372      	add	r3, pc, #456	; (adr r3, 801e6a0 <__ieee754_pow+0xa10>)
 801e4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4dc:	4680      	mov	r8, r0
 801e4de:	4689      	mov	r9, r1
 801e4e0:	4620      	mov	r0, r4
 801e4e2:	4629      	mov	r1, r5
 801e4e4:	f7fa f8f8 	bl	80186d8 <__aeabi_dmul>
 801e4e8:	4602      	mov	r2, r0
 801e4ea:	460b      	mov	r3, r1
 801e4ec:	4640      	mov	r0, r8
 801e4ee:	4649      	mov	r1, r9
 801e4f0:	f7f9 ff3c 	bl	801836c <__adddf3>
 801e4f4:	4604      	mov	r4, r0
 801e4f6:	460d      	mov	r5, r1
 801e4f8:	4602      	mov	r2, r0
 801e4fa:	460b      	mov	r3, r1
 801e4fc:	4630      	mov	r0, r6
 801e4fe:	4639      	mov	r1, r7
 801e500:	f7f9 ff34 	bl	801836c <__adddf3>
 801e504:	4632      	mov	r2, r6
 801e506:	463b      	mov	r3, r7
 801e508:	4680      	mov	r8, r0
 801e50a:	4689      	mov	r9, r1
 801e50c:	f7f9 ff2c 	bl	8018368 <__aeabi_dsub>
 801e510:	4602      	mov	r2, r0
 801e512:	460b      	mov	r3, r1
 801e514:	4620      	mov	r0, r4
 801e516:	4629      	mov	r1, r5
 801e518:	f7f9 ff26 	bl	8018368 <__aeabi_dsub>
 801e51c:	4642      	mov	r2, r8
 801e51e:	4606      	mov	r6, r0
 801e520:	460f      	mov	r7, r1
 801e522:	464b      	mov	r3, r9
 801e524:	4640      	mov	r0, r8
 801e526:	4649      	mov	r1, r9
 801e528:	f7fa f8d6 	bl	80186d8 <__aeabi_dmul>
 801e52c:	a35e      	add	r3, pc, #376	; (adr r3, 801e6a8 <__ieee754_pow+0xa18>)
 801e52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e532:	4604      	mov	r4, r0
 801e534:	460d      	mov	r5, r1
 801e536:	f7fa f8cf 	bl	80186d8 <__aeabi_dmul>
 801e53a:	a35d      	add	r3, pc, #372	; (adr r3, 801e6b0 <__ieee754_pow+0xa20>)
 801e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e540:	f7f9 ff12 	bl	8018368 <__aeabi_dsub>
 801e544:	4622      	mov	r2, r4
 801e546:	462b      	mov	r3, r5
 801e548:	f7fa f8c6 	bl	80186d8 <__aeabi_dmul>
 801e54c:	a35a      	add	r3, pc, #360	; (adr r3, 801e6b8 <__ieee754_pow+0xa28>)
 801e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e552:	f7f9 ff0b 	bl	801836c <__adddf3>
 801e556:	4622      	mov	r2, r4
 801e558:	462b      	mov	r3, r5
 801e55a:	f7fa f8bd 	bl	80186d8 <__aeabi_dmul>
 801e55e:	a358      	add	r3, pc, #352	; (adr r3, 801e6c0 <__ieee754_pow+0xa30>)
 801e560:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e564:	f7f9 ff00 	bl	8018368 <__aeabi_dsub>
 801e568:	4622      	mov	r2, r4
 801e56a:	462b      	mov	r3, r5
 801e56c:	f7fa f8b4 	bl	80186d8 <__aeabi_dmul>
 801e570:	a355      	add	r3, pc, #340	; (adr r3, 801e6c8 <__ieee754_pow+0xa38>)
 801e572:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e576:	f7f9 fef9 	bl	801836c <__adddf3>
 801e57a:	4622      	mov	r2, r4
 801e57c:	462b      	mov	r3, r5
 801e57e:	f7fa f8ab 	bl	80186d8 <__aeabi_dmul>
 801e582:	4602      	mov	r2, r0
 801e584:	460b      	mov	r3, r1
 801e586:	4640      	mov	r0, r8
 801e588:	4649      	mov	r1, r9
 801e58a:	f7f9 feed 	bl	8018368 <__aeabi_dsub>
 801e58e:	4604      	mov	r4, r0
 801e590:	460d      	mov	r5, r1
 801e592:	4602      	mov	r2, r0
 801e594:	460b      	mov	r3, r1
 801e596:	4640      	mov	r0, r8
 801e598:	4649      	mov	r1, r9
 801e59a:	f7fa f89d 	bl	80186d8 <__aeabi_dmul>
 801e59e:	2200      	movs	r2, #0
 801e5a0:	ec41 0b19 	vmov	d9, r0, r1
 801e5a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	4629      	mov	r1, r5
 801e5ac:	f7f9 fedc 	bl	8018368 <__aeabi_dsub>
 801e5b0:	4602      	mov	r2, r0
 801e5b2:	460b      	mov	r3, r1
 801e5b4:	ec51 0b19 	vmov	r0, r1, d9
 801e5b8:	f7fa f9b8 	bl	801892c <__aeabi_ddiv>
 801e5bc:	4632      	mov	r2, r6
 801e5be:	4604      	mov	r4, r0
 801e5c0:	460d      	mov	r5, r1
 801e5c2:	463b      	mov	r3, r7
 801e5c4:	4640      	mov	r0, r8
 801e5c6:	4649      	mov	r1, r9
 801e5c8:	f7fa f886 	bl	80186d8 <__aeabi_dmul>
 801e5cc:	4632      	mov	r2, r6
 801e5ce:	463b      	mov	r3, r7
 801e5d0:	f7f9 fecc 	bl	801836c <__adddf3>
 801e5d4:	4602      	mov	r2, r0
 801e5d6:	460b      	mov	r3, r1
 801e5d8:	4620      	mov	r0, r4
 801e5da:	4629      	mov	r1, r5
 801e5dc:	f7f9 fec4 	bl	8018368 <__aeabi_dsub>
 801e5e0:	4642      	mov	r2, r8
 801e5e2:	464b      	mov	r3, r9
 801e5e4:	f7f9 fec0 	bl	8018368 <__aeabi_dsub>
 801e5e8:	460b      	mov	r3, r1
 801e5ea:	4602      	mov	r2, r0
 801e5ec:	493a      	ldr	r1, [pc, #232]	; (801e6d8 <__ieee754_pow+0xa48>)
 801e5ee:	2000      	movs	r0, #0
 801e5f0:	f7f9 feba 	bl	8018368 <__aeabi_dsub>
 801e5f4:	ec41 0b10 	vmov	d0, r0, r1
 801e5f8:	ee10 3a90 	vmov	r3, s1
 801e5fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801e600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e604:	da2b      	bge.n	801e65e <__ieee754_pow+0x9ce>
 801e606:	4650      	mov	r0, sl
 801e608:	f000 f966 	bl	801e8d8 <scalbn>
 801e60c:	ec51 0b10 	vmov	r0, r1, d0
 801e610:	ec53 2b18 	vmov	r2, r3, d8
 801e614:	f7ff bbed 	b.w	801ddf2 <__ieee754_pow+0x162>
 801e618:	4b30      	ldr	r3, [pc, #192]	; (801e6dc <__ieee754_pow+0xa4c>)
 801e61a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801e61e:	429e      	cmp	r6, r3
 801e620:	f77f af0c 	ble.w	801e43c <__ieee754_pow+0x7ac>
 801e624:	4b2e      	ldr	r3, [pc, #184]	; (801e6e0 <__ieee754_pow+0xa50>)
 801e626:	440b      	add	r3, r1
 801e628:	4303      	orrs	r3, r0
 801e62a:	d009      	beq.n	801e640 <__ieee754_pow+0x9b0>
 801e62c:	ec51 0b18 	vmov	r0, r1, d8
 801e630:	2200      	movs	r2, #0
 801e632:	2300      	movs	r3, #0
 801e634:	f7fa fac2 	bl	8018bbc <__aeabi_dcmplt>
 801e638:	3800      	subs	r0, #0
 801e63a:	bf18      	it	ne
 801e63c:	2001      	movne	r0, #1
 801e63e:	e447      	b.n	801ded0 <__ieee754_pow+0x240>
 801e640:	4622      	mov	r2, r4
 801e642:	462b      	mov	r3, r5
 801e644:	f7f9 fe90 	bl	8018368 <__aeabi_dsub>
 801e648:	4642      	mov	r2, r8
 801e64a:	464b      	mov	r3, r9
 801e64c:	f7fa faca 	bl	8018be4 <__aeabi_dcmpge>
 801e650:	2800      	cmp	r0, #0
 801e652:	f43f aef3 	beq.w	801e43c <__ieee754_pow+0x7ac>
 801e656:	e7e9      	b.n	801e62c <__ieee754_pow+0x99c>
 801e658:	f04f 0a00 	mov.w	sl, #0
 801e65c:	e71a      	b.n	801e494 <__ieee754_pow+0x804>
 801e65e:	ec51 0b10 	vmov	r0, r1, d0
 801e662:	4619      	mov	r1, r3
 801e664:	e7d4      	b.n	801e610 <__ieee754_pow+0x980>
 801e666:	491c      	ldr	r1, [pc, #112]	; (801e6d8 <__ieee754_pow+0xa48>)
 801e668:	2000      	movs	r0, #0
 801e66a:	f7ff bb30 	b.w	801dcce <__ieee754_pow+0x3e>
 801e66e:	2000      	movs	r0, #0
 801e670:	2100      	movs	r1, #0
 801e672:	f7ff bb2c 	b.w	801dcce <__ieee754_pow+0x3e>
 801e676:	4630      	mov	r0, r6
 801e678:	4639      	mov	r1, r7
 801e67a:	f7ff bb28 	b.w	801dcce <__ieee754_pow+0x3e>
 801e67e:	9204      	str	r2, [sp, #16]
 801e680:	f7ff bb7a 	b.w	801dd78 <__ieee754_pow+0xe8>
 801e684:	2300      	movs	r3, #0
 801e686:	f7ff bb64 	b.w	801dd52 <__ieee754_pow+0xc2>
 801e68a:	bf00      	nop
 801e68c:	f3af 8000 	nop.w
 801e690:	00000000 	.word	0x00000000
 801e694:	3fe62e43 	.word	0x3fe62e43
 801e698:	fefa39ef 	.word	0xfefa39ef
 801e69c:	3fe62e42 	.word	0x3fe62e42
 801e6a0:	0ca86c39 	.word	0x0ca86c39
 801e6a4:	be205c61 	.word	0xbe205c61
 801e6a8:	72bea4d0 	.word	0x72bea4d0
 801e6ac:	3e663769 	.word	0x3e663769
 801e6b0:	c5d26bf1 	.word	0xc5d26bf1
 801e6b4:	3ebbbd41 	.word	0x3ebbbd41
 801e6b8:	af25de2c 	.word	0xaf25de2c
 801e6bc:	3f11566a 	.word	0x3f11566a
 801e6c0:	16bebd93 	.word	0x16bebd93
 801e6c4:	3f66c16c 	.word	0x3f66c16c
 801e6c8:	5555553e 	.word	0x5555553e
 801e6cc:	3fc55555 	.word	0x3fc55555
 801e6d0:	3fe00000 	.word	0x3fe00000
 801e6d4:	000fffff 	.word	0x000fffff
 801e6d8:	3ff00000 	.word	0x3ff00000
 801e6dc:	4090cbff 	.word	0x4090cbff
 801e6e0:	3f6f3400 	.word	0x3f6f3400
 801e6e4:	652b82fe 	.word	0x652b82fe
 801e6e8:	3c971547 	.word	0x3c971547

0801e6ec <__ieee754_sqrt>:
 801e6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f0:	ec55 4b10 	vmov	r4, r5, d0
 801e6f4:	4e55      	ldr	r6, [pc, #340]	; (801e84c <__ieee754_sqrt+0x160>)
 801e6f6:	43ae      	bics	r6, r5
 801e6f8:	ee10 0a10 	vmov	r0, s0
 801e6fc:	ee10 3a10 	vmov	r3, s0
 801e700:	462a      	mov	r2, r5
 801e702:	4629      	mov	r1, r5
 801e704:	d110      	bne.n	801e728 <__ieee754_sqrt+0x3c>
 801e706:	ee10 2a10 	vmov	r2, s0
 801e70a:	462b      	mov	r3, r5
 801e70c:	f7f9 ffe4 	bl	80186d8 <__aeabi_dmul>
 801e710:	4602      	mov	r2, r0
 801e712:	460b      	mov	r3, r1
 801e714:	4620      	mov	r0, r4
 801e716:	4629      	mov	r1, r5
 801e718:	f7f9 fe28 	bl	801836c <__adddf3>
 801e71c:	4604      	mov	r4, r0
 801e71e:	460d      	mov	r5, r1
 801e720:	ec45 4b10 	vmov	d0, r4, r5
 801e724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e728:	2d00      	cmp	r5, #0
 801e72a:	dc10      	bgt.n	801e74e <__ieee754_sqrt+0x62>
 801e72c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e730:	4330      	orrs	r0, r6
 801e732:	d0f5      	beq.n	801e720 <__ieee754_sqrt+0x34>
 801e734:	b15d      	cbz	r5, 801e74e <__ieee754_sqrt+0x62>
 801e736:	ee10 2a10 	vmov	r2, s0
 801e73a:	462b      	mov	r3, r5
 801e73c:	ee10 0a10 	vmov	r0, s0
 801e740:	f7f9 fe12 	bl	8018368 <__aeabi_dsub>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	f7fa f8f0 	bl	801892c <__aeabi_ddiv>
 801e74c:	e7e6      	b.n	801e71c <__ieee754_sqrt+0x30>
 801e74e:	1512      	asrs	r2, r2, #20
 801e750:	d074      	beq.n	801e83c <__ieee754_sqrt+0x150>
 801e752:	07d4      	lsls	r4, r2, #31
 801e754:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e758:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801e75c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801e760:	bf5e      	ittt	pl
 801e762:	0fda      	lsrpl	r2, r3, #31
 801e764:	005b      	lslpl	r3, r3, #1
 801e766:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801e76a:	2400      	movs	r4, #0
 801e76c:	0fda      	lsrs	r2, r3, #31
 801e76e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801e772:	107f      	asrs	r7, r7, #1
 801e774:	005b      	lsls	r3, r3, #1
 801e776:	2516      	movs	r5, #22
 801e778:	4620      	mov	r0, r4
 801e77a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801e77e:	1886      	adds	r6, r0, r2
 801e780:	428e      	cmp	r6, r1
 801e782:	bfde      	ittt	le
 801e784:	1b89      	suble	r1, r1, r6
 801e786:	18b0      	addle	r0, r6, r2
 801e788:	18a4      	addle	r4, r4, r2
 801e78a:	0049      	lsls	r1, r1, #1
 801e78c:	3d01      	subs	r5, #1
 801e78e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801e792:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801e796:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e79a:	d1f0      	bne.n	801e77e <__ieee754_sqrt+0x92>
 801e79c:	462a      	mov	r2, r5
 801e79e:	f04f 0e20 	mov.w	lr, #32
 801e7a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801e7a6:	4281      	cmp	r1, r0
 801e7a8:	eb06 0c05 	add.w	ip, r6, r5
 801e7ac:	dc02      	bgt.n	801e7b4 <__ieee754_sqrt+0xc8>
 801e7ae:	d113      	bne.n	801e7d8 <__ieee754_sqrt+0xec>
 801e7b0:	459c      	cmp	ip, r3
 801e7b2:	d811      	bhi.n	801e7d8 <__ieee754_sqrt+0xec>
 801e7b4:	f1bc 0f00 	cmp.w	ip, #0
 801e7b8:	eb0c 0506 	add.w	r5, ip, r6
 801e7bc:	da43      	bge.n	801e846 <__ieee754_sqrt+0x15a>
 801e7be:	2d00      	cmp	r5, #0
 801e7c0:	db41      	blt.n	801e846 <__ieee754_sqrt+0x15a>
 801e7c2:	f100 0801 	add.w	r8, r0, #1
 801e7c6:	1a09      	subs	r1, r1, r0
 801e7c8:	459c      	cmp	ip, r3
 801e7ca:	bf88      	it	hi
 801e7cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801e7d0:	eba3 030c 	sub.w	r3, r3, ip
 801e7d4:	4432      	add	r2, r6
 801e7d6:	4640      	mov	r0, r8
 801e7d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801e7dc:	f1be 0e01 	subs.w	lr, lr, #1
 801e7e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801e7e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801e7e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801e7ec:	d1db      	bne.n	801e7a6 <__ieee754_sqrt+0xba>
 801e7ee:	430b      	orrs	r3, r1
 801e7f0:	d006      	beq.n	801e800 <__ieee754_sqrt+0x114>
 801e7f2:	1c50      	adds	r0, r2, #1
 801e7f4:	bf13      	iteet	ne
 801e7f6:	3201      	addne	r2, #1
 801e7f8:	3401      	addeq	r4, #1
 801e7fa:	4672      	moveq	r2, lr
 801e7fc:	f022 0201 	bicne.w	r2, r2, #1
 801e800:	1063      	asrs	r3, r4, #1
 801e802:	0852      	lsrs	r2, r2, #1
 801e804:	07e1      	lsls	r1, r4, #31
 801e806:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801e80a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801e80e:	bf48      	it	mi
 801e810:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801e814:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801e818:	4614      	mov	r4, r2
 801e81a:	e781      	b.n	801e720 <__ieee754_sqrt+0x34>
 801e81c:	0ad9      	lsrs	r1, r3, #11
 801e81e:	3815      	subs	r0, #21
 801e820:	055b      	lsls	r3, r3, #21
 801e822:	2900      	cmp	r1, #0
 801e824:	d0fa      	beq.n	801e81c <__ieee754_sqrt+0x130>
 801e826:	02cd      	lsls	r5, r1, #11
 801e828:	d50a      	bpl.n	801e840 <__ieee754_sqrt+0x154>
 801e82a:	f1c2 0420 	rsb	r4, r2, #32
 801e82e:	fa23 f404 	lsr.w	r4, r3, r4
 801e832:	1e55      	subs	r5, r2, #1
 801e834:	4093      	lsls	r3, r2
 801e836:	4321      	orrs	r1, r4
 801e838:	1b42      	subs	r2, r0, r5
 801e83a:	e78a      	b.n	801e752 <__ieee754_sqrt+0x66>
 801e83c:	4610      	mov	r0, r2
 801e83e:	e7f0      	b.n	801e822 <__ieee754_sqrt+0x136>
 801e840:	0049      	lsls	r1, r1, #1
 801e842:	3201      	adds	r2, #1
 801e844:	e7ef      	b.n	801e826 <__ieee754_sqrt+0x13a>
 801e846:	4680      	mov	r8, r0
 801e848:	e7bd      	b.n	801e7c6 <__ieee754_sqrt+0xda>
 801e84a:	bf00      	nop
 801e84c:	7ff00000 	.word	0x7ff00000

0801e850 <with_errno>:
 801e850:	b570      	push	{r4, r5, r6, lr}
 801e852:	4604      	mov	r4, r0
 801e854:	460d      	mov	r5, r1
 801e856:	4616      	mov	r6, r2
 801e858:	f7fa fc6c 	bl	8019134 <__errno>
 801e85c:	4629      	mov	r1, r5
 801e85e:	6006      	str	r6, [r0, #0]
 801e860:	4620      	mov	r0, r4
 801e862:	bd70      	pop	{r4, r5, r6, pc}

0801e864 <xflow>:
 801e864:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e866:	4614      	mov	r4, r2
 801e868:	461d      	mov	r5, r3
 801e86a:	b108      	cbz	r0, 801e870 <xflow+0xc>
 801e86c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801e870:	e9cd 2300 	strd	r2, r3, [sp]
 801e874:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e878:	4620      	mov	r0, r4
 801e87a:	4629      	mov	r1, r5
 801e87c:	f7f9 ff2c 	bl	80186d8 <__aeabi_dmul>
 801e880:	2222      	movs	r2, #34	; 0x22
 801e882:	b003      	add	sp, #12
 801e884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e888:	f7ff bfe2 	b.w	801e850 <with_errno>

0801e88c <__math_uflow>:
 801e88c:	b508      	push	{r3, lr}
 801e88e:	2200      	movs	r2, #0
 801e890:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801e894:	f7ff ffe6 	bl	801e864 <xflow>
 801e898:	ec41 0b10 	vmov	d0, r0, r1
 801e89c:	bd08      	pop	{r3, pc}

0801e89e <__math_oflow>:
 801e89e:	b508      	push	{r3, lr}
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801e8a6:	f7ff ffdd 	bl	801e864 <xflow>
 801e8aa:	ec41 0b10 	vmov	d0, r0, r1
 801e8ae:	bd08      	pop	{r3, pc}

0801e8b0 <fabs>:
 801e8b0:	ec51 0b10 	vmov	r0, r1, d0
 801e8b4:	ee10 2a10 	vmov	r2, s0
 801e8b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e8bc:	ec43 2b10 	vmov	d0, r2, r3
 801e8c0:	4770      	bx	lr

0801e8c2 <finite>:
 801e8c2:	b082      	sub	sp, #8
 801e8c4:	ed8d 0b00 	vstr	d0, [sp]
 801e8c8:	9801      	ldr	r0, [sp, #4]
 801e8ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801e8ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801e8d2:	0fc0      	lsrs	r0, r0, #31
 801e8d4:	b002      	add	sp, #8
 801e8d6:	4770      	bx	lr

0801e8d8 <scalbn>:
 801e8d8:	b570      	push	{r4, r5, r6, lr}
 801e8da:	ec55 4b10 	vmov	r4, r5, d0
 801e8de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801e8e2:	4606      	mov	r6, r0
 801e8e4:	462b      	mov	r3, r5
 801e8e6:	b99a      	cbnz	r2, 801e910 <scalbn+0x38>
 801e8e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801e8ec:	4323      	orrs	r3, r4
 801e8ee:	d036      	beq.n	801e95e <scalbn+0x86>
 801e8f0:	4b39      	ldr	r3, [pc, #228]	; (801e9d8 <scalbn+0x100>)
 801e8f2:	4629      	mov	r1, r5
 801e8f4:	ee10 0a10 	vmov	r0, s0
 801e8f8:	2200      	movs	r2, #0
 801e8fa:	f7f9 feed 	bl	80186d8 <__aeabi_dmul>
 801e8fe:	4b37      	ldr	r3, [pc, #220]	; (801e9dc <scalbn+0x104>)
 801e900:	429e      	cmp	r6, r3
 801e902:	4604      	mov	r4, r0
 801e904:	460d      	mov	r5, r1
 801e906:	da10      	bge.n	801e92a <scalbn+0x52>
 801e908:	a32b      	add	r3, pc, #172	; (adr r3, 801e9b8 <scalbn+0xe0>)
 801e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90e:	e03a      	b.n	801e986 <scalbn+0xae>
 801e910:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801e914:	428a      	cmp	r2, r1
 801e916:	d10c      	bne.n	801e932 <scalbn+0x5a>
 801e918:	ee10 2a10 	vmov	r2, s0
 801e91c:	4620      	mov	r0, r4
 801e91e:	4629      	mov	r1, r5
 801e920:	f7f9 fd24 	bl	801836c <__adddf3>
 801e924:	4604      	mov	r4, r0
 801e926:	460d      	mov	r5, r1
 801e928:	e019      	b.n	801e95e <scalbn+0x86>
 801e92a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801e92e:	460b      	mov	r3, r1
 801e930:	3a36      	subs	r2, #54	; 0x36
 801e932:	4432      	add	r2, r6
 801e934:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801e938:	428a      	cmp	r2, r1
 801e93a:	dd08      	ble.n	801e94e <scalbn+0x76>
 801e93c:	2d00      	cmp	r5, #0
 801e93e:	a120      	add	r1, pc, #128	; (adr r1, 801e9c0 <scalbn+0xe8>)
 801e940:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e944:	da1c      	bge.n	801e980 <scalbn+0xa8>
 801e946:	a120      	add	r1, pc, #128	; (adr r1, 801e9c8 <scalbn+0xf0>)
 801e948:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e94c:	e018      	b.n	801e980 <scalbn+0xa8>
 801e94e:	2a00      	cmp	r2, #0
 801e950:	dd08      	ble.n	801e964 <scalbn+0x8c>
 801e952:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e956:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e95a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801e95e:	ec45 4b10 	vmov	d0, r4, r5
 801e962:	bd70      	pop	{r4, r5, r6, pc}
 801e964:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801e968:	da19      	bge.n	801e99e <scalbn+0xc6>
 801e96a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801e96e:	429e      	cmp	r6, r3
 801e970:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801e974:	dd0a      	ble.n	801e98c <scalbn+0xb4>
 801e976:	a112      	add	r1, pc, #72	; (adr r1, 801e9c0 <scalbn+0xe8>)
 801e978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d1e2      	bne.n	801e946 <scalbn+0x6e>
 801e980:	a30f      	add	r3, pc, #60	; (adr r3, 801e9c0 <scalbn+0xe8>)
 801e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e986:	f7f9 fea7 	bl	80186d8 <__aeabi_dmul>
 801e98a:	e7cb      	b.n	801e924 <scalbn+0x4c>
 801e98c:	a10a      	add	r1, pc, #40	; (adr r1, 801e9b8 <scalbn+0xe0>)
 801e98e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e992:	2b00      	cmp	r3, #0
 801e994:	d0b8      	beq.n	801e908 <scalbn+0x30>
 801e996:	a10e      	add	r1, pc, #56	; (adr r1, 801e9d0 <scalbn+0xf8>)
 801e998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e99c:	e7b4      	b.n	801e908 <scalbn+0x30>
 801e99e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801e9a2:	3236      	adds	r2, #54	; 0x36
 801e9a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801e9a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801e9ac:	4620      	mov	r0, r4
 801e9ae:	4b0c      	ldr	r3, [pc, #48]	; (801e9e0 <scalbn+0x108>)
 801e9b0:	2200      	movs	r2, #0
 801e9b2:	e7e8      	b.n	801e986 <scalbn+0xae>
 801e9b4:	f3af 8000 	nop.w
 801e9b8:	c2f8f359 	.word	0xc2f8f359
 801e9bc:	01a56e1f 	.word	0x01a56e1f
 801e9c0:	8800759c 	.word	0x8800759c
 801e9c4:	7e37e43c 	.word	0x7e37e43c
 801e9c8:	8800759c 	.word	0x8800759c
 801e9cc:	fe37e43c 	.word	0xfe37e43c
 801e9d0:	c2f8f359 	.word	0xc2f8f359
 801e9d4:	81a56e1f 	.word	0x81a56e1f
 801e9d8:	43500000 	.word	0x43500000
 801e9dc:	ffff3cb0 	.word	0xffff3cb0
 801e9e0:	3c900000 	.word	0x3c900000

0801e9e4 <_init>:
 801e9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9e6:	bf00      	nop
 801e9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9ea:	bc08      	pop	{r3}
 801e9ec:	469e      	mov	lr, r3
 801e9ee:	4770      	bx	lr

0801e9f0 <_fini>:
 801e9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e9f2:	bf00      	nop
 801e9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e9f6:	bc08      	pop	{r3}
 801e9f8:	469e      	mov	lr, r3
 801e9fa:	4770      	bx	lr
