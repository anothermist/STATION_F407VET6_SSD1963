
STATION_F407VE_SSD1963.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ed9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000334d0  0801ef30  0801ef30  0002ef30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052400  08052400  00070238  2**0
                  CONTENTS
  4 .ARM          00000008  08052400  08052400  00062400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052408  08052408  00070238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052408  08052408  00062408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805240c  0805240c  0006240c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08052410  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00070238  2**0
                  CONTENTS
 10 .bss          00000bd4  20000238  20000238  00070238  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000e0c  20000e0c  00070238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00070238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c927  00000000  00000000  00070268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003488  00000000  00000000  0008cb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000048  00000000  00000000  00090018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000078  00000000  00000000  00090060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a155  00000000  00000000  000900d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb90  00000000  00000000  000aa22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179dbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb8  00000000  00000000  00179e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00024f39  00000000  00000000  00180ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ef14 	.word	0x0801ef14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0801ef14 	.word	0x0801ef14

080001d0 <AT24XX_IsConnected>:
#include "at24xx.h"

extern I2C_HandleTypeDef AT24XX_I2C;

bool AT24XX_IsConnected(void) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	if (HAL_I2C_IsDeviceReady(&AT24XX_I2C, AT24XX_ADDRESS << 1, 1, AT24XX_I2C_TIMEOUT) == HAL_OK)
 80001d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d8:	2201      	movs	r2, #1
 80001da:	21ae      	movs	r1, #174	; 0xae
 80001dc:	4805      	ldr	r0, [pc, #20]	; (80001f4 <AT24XX_IsConnected+0x24>)
 80001de:	f00d fb2f 	bl	800d840 <HAL_I2C_IsDeviceReady>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d101      	bne.n	80001ec <AT24XX_IsConnected+0x1c>
		return 1;
 80001e8:	2301      	movs	r3, #1
 80001ea:	e001      	b.n	80001f0 <AT24XX_IsConnected+0x20>
	else
		return 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	bf00      	nop
}
 80001f0:	4618      	mov	r0, r3
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	2000070c 	.word	0x2000070c

080001f8 <AT24XX_Save>:

bool AT24XX_Save(uint16_t address, void *data, size_t size_of_data) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b088      	sub	sp, #32
 80001fc:	af04      	add	r7, sp, #16
 80001fe:	4603      	mov	r3, r0
 8000200:	60b9      	str	r1, [r7, #8]
 8000202:	607a      	str	r2, [r7, #4]
 8000204:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 4) || (AT24XX_SIZE_KBIT == 8) || (AT24XX_SIZE_KBIT == 16))
	if(size_of_data > 16)
		return 0;
#endif
#if ((AT24XX_SIZE_KBIT == 32) || (AT24XX_SIZE_KBIT == 64) || (AT24XX_SIZE_KBIT == 128))
	if(size_of_data > 32)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	2b20      	cmp	r3, #32
 800020a:	d901      	bls.n	8000210 <AT24XX_Save+0x18>
		return 0;
 800020c:	2300      	movs	r3, #0
 800020e:	e017      	b.n	8000240 <AT24XX_Save+0x48>
#endif

#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Write(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Write(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	b29b      	uxth	r3, r3
 8000214:	89fa      	ldrh	r2, [r7, #14]
 8000216:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800021a:	9102      	str	r1, [sp, #8]
 800021c:	9301      	str	r3, [sp, #4]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	2310      	movs	r3, #16
 8000224:	21ae      	movs	r1, #174	; 0xae
 8000226:	4808      	ldr	r0, [pc, #32]	; (8000248 <AT24XX_Save+0x50>)
 8000228:	f00c fb84 	bl	800c934 <HAL_I2C_Mem_Write>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d104      	bne.n	800023c <AT24XX_Save+0x44>
#endif
{

			HAL_Delay(5);
 8000232:	2005      	movs	r0, #5
 8000234:	f006 fa46 	bl	80066c4 <HAL_Delay>
			return 1;
 8000238:	2301      	movs	r3, #1
 800023a:	e001      	b.n	8000240 <AT24XX_Save+0x48>
} else
	return 0;
 800023c:	2300      	movs	r3, #0
 800023e:	bf00      	nop
}
 8000240:	4618      	mov	r0, r3
 8000242:	3710      	adds	r7, #16
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	2000070c 	.word	0x2000070c

0800024c <AT24XX_Load>:

bool AT24XX_Load(uint16_t address, void *data, size_t size_of_data) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b088      	sub	sp, #32
 8000250:	af04      	add	r7, sp, #16
 8000252:	4603      	mov	r3, r0
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	81fb      	strh	r3, [r7, #14]
#if ((AT24XX_SIZE_KBIT == 1) || (AT24XX_SIZE_KBIT == 2))
	if(HAL_I2C_Mem_Read(&EEPROM24XX_I2C, AT24XX_ADDRESS<<1, Address, I2C_MEMADD_SIZE_8BIT, (uint8_t*)data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
#else
		if (HAL_I2C_Mem_Read(&AT24XX_I2C, AT24XX_ADDRESS << 1, address, I2C_MEMADD_SIZE_16BIT, (uint8_t *) data, size_of_data, AT24XX_I2C_TIMEOUT) == HAL_OK)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	89fa      	ldrh	r2, [r7, #14]
 8000260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000264:	9102      	str	r1, [sp, #8]
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2310      	movs	r3, #16
 800026e:	21ae      	movs	r1, #174	; 0xae
 8000270:	4806      	ldr	r0, [pc, #24]	; (800028c <AT24XX_Load+0x40>)
 8000272:	f00c fc59 	bl	800cb28 <HAL_I2C_Mem_Read>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d101      	bne.n	8000280 <AT24XX_Load+0x34>
#endif
{
	return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e001      	b.n	8000284 <AT24XX_Load+0x38>
} else
	return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	bf00      	nop
}
 8000284:	4618      	mov	r0, r3
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	2000070c 	.word	0x2000070c

08000290 <AT24XX_Read>:

uint8_t AT24XX_Read(uint16_t address) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	80fb      	strh	r3, [r7, #6]
	uint16_t dt[1] = {0};
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
	AT24XX_Load(address, dt, 1);
 800029e:	f107 010c 	add.w	r1, r7, #12
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	2201      	movs	r2, #1
 80002a6:	4618      	mov	r0, r3
 80002a8:	f7ff ffd0 	bl	800024c <AT24XX_Load>
	return dt[0];
 80002ac:	89bb      	ldrh	r3, [r7, #12]
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	bf00      	nop
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <AT24XX_Write>:

void AT24XX_Write(uint16_t address, uint8_t val) {
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b084      	sub	sp, #16
 80002be:	af00      	add	r7, sp, #0
 80002c0:	4603      	mov	r3, r0
 80002c2:	460a      	mov	r2, r1
 80002c4:	80fb      	strh	r3, [r7, #6]
 80002c6:	4613      	mov	r3, r2
 80002c8:	717b      	strb	r3, [r7, #5]
	uint8_t save[] = {val};
 80002ca:	797b      	ldrb	r3, [r7, #5]
 80002cc:	733b      	strb	r3, [r7, #12]
	AT24XX_Save(address, save, 1);
 80002ce:	f107 010c 	add.w	r1, r7, #12
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f7ff ff8e 	bl	80001f8 <AT24XX_Save>
}
 80002dc:	bf00      	nop
 80002de:	3710      	adds	r7, #16
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}

080002e4 <AT24XX_Update>:

void AT24XX_Update(uint16_t address, uint8_t val) {
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	460a      	mov	r2, r1
 80002ee:	80fb      	strh	r3, [r7, #6]
 80002f0:	4613      	mov	r3, r2
 80002f2:	717b      	strb	r3, [r7, #5]
	if (AT24XX_Read(address) != val) AT24XX_Write(address, val);
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	4618      	mov	r0, r3
 80002f8:	f7ff ffca 	bl	8000290 <AT24XX_Read>
 80002fc:	4603      	mov	r3, r0
 80002fe:	461a      	mov	r2, r3
 8000300:	797b      	ldrb	r3, [r7, #5]
 8000302:	4293      	cmp	r3, r2
 8000304:	d005      	beq.n	8000312 <AT24XX_Update+0x2e>
 8000306:	797a      	ldrb	r2, [r7, #5]
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	4611      	mov	r1, r2
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ffd4 	bl	80002ba <AT24XX_Write>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <round_eps>:
uint16_t dig_H1, dig_H3;
int16_t dig_H2, dig_H4, dig_H5, dig_H6;
int32_t t_fine;

float round_eps(double v,
                double eps) {                                                                                        // round_eps(1.234, 0.05) = 1.25
 800031a:	b580      	push	{r7, lr}
 800031c:	b084      	sub	sp, #16
 800031e:	af00      	add	r7, sp, #0
 8000320:	ed87 0b02 	vstr	d0, [r7, #8]
 8000324:	ed87 1b00 	vstr	d1, [r7]
    return floor(v / eps + 0.5) * eps;                        // round_eps(1.234, 0.01) = 1.23
 8000328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800032c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000330:	f018 fd94 	bl	8018e5c <__aeabi_ddiv>
 8000334:	4602      	mov	r2, r0
 8000336:	460b      	mov	r3, r1
 8000338:	4610      	mov	r0, r2
 800033a:	4619      	mov	r1, r3
 800033c:	f04f 0200 	mov.w	r2, #0
 8000340:	4b10      	ldr	r3, [pc, #64]	; (8000384 <round_eps+0x6a>)
 8000342:	f018 faab 	bl	801889c <__adddf3>
 8000346:	4602      	mov	r2, r0
 8000348:	460b      	mov	r3, r1
 800034a:	ec43 2b17 	vmov	d7, r2, r3
 800034e:	eeb0 0a47 	vmov.f32	s0, s14
 8000352:	eef0 0a67 	vmov.f32	s1, s15
 8000356:	f01d fe43 	bl	801dfe0 <floor>
 800035a:	ec51 0b10 	vmov	r0, r1, d0
 800035e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000362:	f018 fc51 	bl	8018c08 <__aeabi_dmul>
 8000366:	4602      	mov	r2, r0
 8000368:	460b      	mov	r3, r1
 800036a:	4610      	mov	r0, r2
 800036c:	4619      	mov	r1, r3
 800036e:	f018 ff43 	bl	80191f8 <__aeabi_d2f>
 8000372:	4603      	mov	r3, r0
 8000374:	ee07 3a90 	vmov	s15, r3
}                                                                                        // round_eps(1.235, 0.01) = 1.24
 8000378:	eeb0 0a67 	vmov.f32	s0, s15
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	3fe00000 	.word	0x3fe00000

08000388 <round_nth>:

float round_nth(float v, int8_t n)                    // round_nth(1.235, 1) = 0.
{                                                                                        // round_nth(1.235, 0) = 1.
 8000388:	b5b0      	push	{r4, r5, r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000392:	4603      	mov	r3, r0
 8000394:	70fb      	strb	r3, [r7, #3]
    return round_eps(v, pow(10., n));                    // round_nth(1.235, -1) = 1.2
 8000396:	6878      	ldr	r0, [r7, #4]
 8000398:	f018 fbde 	bl	8018b58 <__aeabi_f2d>
 800039c:	4604      	mov	r4, r0
 800039e:	460d      	mov	r5, r1
 80003a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80003a4:	4618      	mov	r0, r3
 80003a6:	f018 fbc5 	bl	8018b34 <__aeabi_i2d>
 80003aa:	4602      	mov	r2, r0
 80003ac:	460b      	mov	r3, r1
 80003ae:	ec43 2b11 	vmov	d1, r2, r3
 80003b2:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80003e0 <round_nth+0x58>
 80003b6:	f01d fe93 	bl	801e0e0 <pow>
 80003ba:	eeb0 7a40 	vmov.f32	s14, s0
 80003be:	eef0 7a60 	vmov.f32	s15, s1
 80003c2:	eeb0 1a47 	vmov.f32	s2, s14
 80003c6:	eef0 1a67 	vmov.f32	s3, s15
 80003ca:	ec45 4b10 	vmov	d0, r4, r5
 80003ce:	f7ff ffa4 	bl	800031a <round_eps>
 80003d2:	eef0 7a40 	vmov.f32	s15, s0
}                                                                                        // round_nth(1.235, -2) = 1.24
 80003d6:	eeb0 0a67 	vmov.f32	s0, s15
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bdb0      	pop	{r4, r5, r7, pc}
 80003e0:	00000000 	.word	0x00000000
 80003e4:	40240000 	.word	0x40240000

080003e8 <BME280_getTemperature>:

float BME280_getTemperature(int8_t n) {
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af02      	add	r7, sp, #8
 80003ee:	4603      	mov	r3, r0
 80003f0:	71fb      	strb	r3, [r7, #7]
    uint32_t temp_raw;
    float tempf;
    uint8_t cmd[4];

    cmd[0] = 0xFA; // temp_msb
 80003f2:	23fa      	movs	r3, #250	; 0xfa
 80003f4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2301      	movs	r3, #1
 8000400:	21ec      	movs	r1, #236	; 0xec
 8000402:	482f      	ldr	r0, [pc, #188]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000404:	f00a ff1b 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	1c5a      	adds	r2, r3, #1
 800040e:	2364      	movs	r3, #100	; 0x64
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2303      	movs	r3, #3
 8000414:	21ec      	movs	r1, #236	; 0xec
 8000416:	482a      	ldr	r0, [pc, #168]	; (80004c0 <BME280_getTemperature+0xd8>)
 8000418:	f00b f80e 	bl	800b438 <HAL_I2C_Master_Receive>

    temp_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 800041c:	7a7b      	ldrb	r3, [r7, #9]
 800041e:	031a      	lsls	r2, r3, #12
 8000420:	7abb      	ldrb	r3, [r7, #10]
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4313      	orrs	r3, r2
 8000426:	7afa      	ldrb	r2, [r7, #11]
 8000428:	0912      	lsrs	r2, r2, #4
 800042a:	b2d2      	uxtb	r2, r2
 800042c:	4313      	orrs	r3, r2
 800042e:	617b      	str	r3, [r7, #20]

    int32_t temp;

    temp =
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	08db      	lsrs	r3, r3, #3
 8000434:	4a23      	ldr	r2, [pc, #140]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000436:	8812      	ldrh	r2, [r2, #0]
 8000438:	0052      	lsls	r2, r2, #1
 800043a:	1a9b      	subs	r3, r3, r2
 800043c:	4a22      	ldr	r2, [pc, #136]	; (80004c8 <BME280_getTemperature+0xe0>)
 800043e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000442:	fb02 f303 	mul.w	r3, r2, r3
 8000446:	0ada      	lsrs	r2, r3, #11
            ((((((temp_raw >> 4) - dig_T1) * ((temp_raw >> 4) - dig_T1)) >> 12) * dig_T3) >> 14);
 8000448:	697b      	ldr	r3, [r7, #20]
 800044a:	091b      	lsrs	r3, r3, #4
 800044c:	491d      	ldr	r1, [pc, #116]	; (80004c4 <BME280_getTemperature+0xdc>)
 800044e:	8809      	ldrh	r1, [r1, #0]
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	6979      	ldr	r1, [r7, #20]
 8000454:	0909      	lsrs	r1, r1, #4
 8000456:	481b      	ldr	r0, [pc, #108]	; (80004c4 <BME280_getTemperature+0xdc>)
 8000458:	8800      	ldrh	r0, [r0, #0]
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	fb01 f303 	mul.w	r3, r1, r3
 8000460:	0b1b      	lsrs	r3, r3, #12
 8000462:	491a      	ldr	r1, [pc, #104]	; (80004cc <BME280_getTemperature+0xe4>)
 8000464:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000468:	fb01 f303 	mul.w	r3, r1, r3
 800046c:	0b9b      	lsrs	r3, r3, #14
            (((((temp_raw >> 3) - (dig_T1 << 1))) * dig_T2) >> 11) +
 800046e:	4413      	add	r3, r2
    temp =
 8000470:	613b      	str	r3, [r7, #16]

    t_fine = temp;
 8000472:	4a17      	ldr	r2, [pc, #92]	; (80004d0 <BME280_getTemperature+0xe8>)
 8000474:	693b      	ldr	r3, [r7, #16]
 8000476:	6013      	str	r3, [r2, #0]
    temp = (temp * 5 + 128) >> 8;
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4613      	mov	r3, r2
 800047c:	009b      	lsls	r3, r3, #2
 800047e:	4413      	add	r3, r2
 8000480:	3380      	adds	r3, #128	; 0x80
 8000482:	121b      	asrs	r3, r3, #8
 8000484:	613b      	str	r3, [r7, #16]
    tempf = (float) temp;
 8000486:	693b      	ldr	r3, [r7, #16]
 8000488:	ee07 3a90 	vmov	s15, r3
 800048c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000490:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((tempf / 100.0f), n);
 8000494:	edd7 7a03 	vldr	s15, [r7, #12]
 8000498:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80004d4 <BME280_getTemperature+0xec>
 800049c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	4618      	mov	r0, r3
 80004a6:	eeb0 0a47 	vmov.f32	s0, s14
 80004aa:	f7ff ff6d 	bl	8000388 <round_nth>
 80004ae:	eef0 7a40 	vmov.f32	s15, s0
 80004b2:	bf00      	nop
}
 80004b4:	eeb0 0a67 	vmov.f32	s0, s15
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	2000070c 	.word	0x2000070c
 80004c4:	20000258 	.word	0x20000258
 80004c8:	2000025a 	.word	0x2000025a
 80004cc:	2000025c 	.word	0x2000025c
 80004d0:	2000027c 	.word	0x2000027c
 80004d4:	42c80000 	.word	0x42c80000

080004d8 <BME280_getHumidity>:

float BME280_getHumidity(int8_t n) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
    uint32_t hum_raw;
    float humf;
    uint8_t cmd[4];

    cmd[0] = 0xFD; // hum_msb
 80004e2:	23fd      	movs	r3, #253	; 0xfd
 80004e4:	723b      	strb	r3, [r7, #8]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 80004e6:	f107 0208 	add.w	r2, r7, #8
 80004ea:	2364      	movs	r3, #100	; 0x64
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	21ec      	movs	r1, #236	; 0xec
 80004f2:	4840      	ldr	r0, [pc, #256]	; (80005f4 <BME280_getHumidity+0x11c>)
 80004f4:	f00a fea3 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 2, BME280_I2C_TIMEOUT);
 80004f8:	f107 0308 	add.w	r3, r7, #8
 80004fc:	1c5a      	adds	r2, r3, #1
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2302      	movs	r3, #2
 8000504:	21ec      	movs	r1, #236	; 0xec
 8000506:	483b      	ldr	r0, [pc, #236]	; (80005f4 <BME280_getHumidity+0x11c>)
 8000508:	f00a ff96 	bl	800b438 <HAL_I2C_Master_Receive>

    hum_raw = (cmd[1] << 8) | cmd[2];
 800050c:	7a7b      	ldrb	r3, [r7, #9]
 800050e:	021b      	lsls	r3, r3, #8
 8000510:	7aba      	ldrb	r2, [r7, #10]
 8000512:	4313      	orrs	r3, r2
 8000514:	617b      	str	r3, [r7, #20]

    int32_t v_x1;

    v_x1 = t_fine - 76800;
 8000516:	4b38      	ldr	r3, [pc, #224]	; (80005f8 <BME280_getHumidity+0x120>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800051e:	613b      	str	r3, [r7, #16]
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	039b      	lsls	r3, r3, #14
 8000524:	4a35      	ldr	r2, [pc, #212]	; (80005fc <BME280_getHumidity+0x124>)
 8000526:	f9b2 2000 	ldrsh.w	r2, [r2]
 800052a:	0512      	lsls	r2, r2, #20
 800052c:	1a9b      	subs	r3, r3, r2
 800052e:	4a34      	ldr	r2, [pc, #208]	; (8000600 <BME280_getHumidity+0x128>)
 8000530:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000534:	4611      	mov	r1, r2
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	fb01 f202 	mul.w	r2, r1, r2
 800053c:	1a9b      	subs	r3, r3, r2
 800053e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000542:	0bdb      	lsrs	r3, r3, #15
 8000544:	4a2f      	ldr	r2, [pc, #188]	; (8000604 <BME280_getHumidity+0x12c>)
 8000546:	f9b2 2000 	ldrsh.w	r2, [r2]
 800054a:	4611      	mov	r1, r2
 800054c:	693a      	ldr	r2, [r7, #16]
 800054e:	fb01 f202 	mul.w	r2, r1, r2
 8000552:	1292      	asrs	r2, r2, #10
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000554:	492c      	ldr	r1, [pc, #176]	; (8000608 <BME280_getHumidity+0x130>)
 8000556:	8809      	ldrh	r1, [r1, #0]
 8000558:	4608      	mov	r0, r1
 800055a:	6939      	ldr	r1, [r7, #16]
 800055c:	fb00 f101 	mul.w	r1, r0, r1
 8000560:	12c9      	asrs	r1, r1, #11
 8000562:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000566:	fb01 f202 	mul.w	r2, r1, r2
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 800056a:	1292      	asrs	r2, r2, #10
 800056c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
                                            (int32_t) dig_H2 + 8192) >> 14));
 8000570:	4926      	ldr	r1, [pc, #152]	; (800060c <BME280_getHumidity+0x134>)
 8000572:	f9b1 1000 	ldrsh.w	r1, [r1]
                                               (((v_x1 * ((int32_t) dig_H3)) >> 11) + 32768)) >> 10) + 2097152) *
 8000576:	fb01 f202 	mul.w	r2, r1, r2
                                            (int32_t) dig_H2 + 8192) >> 14));
 800057a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800057e:	1392      	asrs	r2, r2, #14
              ((int32_t) 16384)) >> 15) * (((((((v_x1 * (int32_t) dig_H6) >> 10) *
 8000580:	fb02 f303 	mul.w	r3, r2, r3
    v_x1 = (((((hum_raw << 14) - (((int32_t) dig_H4) << 20) - (((int32_t) dig_H5) * v_x1)) +
 8000584:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 - (((((v_x1 >> 15) * (v_x1 >> 15)) >> 7) * (int32_t) dig_H1) >> 4));
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	13db      	asrs	r3, r3, #15
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	13d2      	asrs	r2, r2, #15
 800058e:	fb02 f303 	mul.w	r3, r2, r3
 8000592:	11db      	asrs	r3, r3, #7
 8000594:	4a1e      	ldr	r2, [pc, #120]	; (8000610 <BME280_getHumidity+0x138>)
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	fb02 f303 	mul.w	r3, r2, r3
 800059c:	111b      	asrs	r3, r3, #4
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 < 0 ? 0 : v_x1);
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80005aa:	613b      	str	r3, [r7, #16]
    v_x1 = (v_x1 > 419430400 ? 419430400 : v_x1);
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80005b2:	bfa8      	it	ge
 80005b4:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80005b8:	613b      	str	r3, [r7, #16]

    humf = (float) (v_x1 >> 12);
 80005ba:	693b      	ldr	r3, [r7, #16]
 80005bc:	131b      	asrs	r3, r3, #12
 80005be:	ee07 3a90 	vmov	s15, r3
 80005c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005c6:	edc7 7a03 	vstr	s15, [r7, #12]

    return round_nth((humf / 1024.0f), n);
 80005ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ce:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000614 <BME280_getHumidity+0x13c>
 80005d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005da:	4618      	mov	r0, r3
 80005dc:	eeb0 0a47 	vmov.f32	s0, s14
 80005e0:	f7ff fed2 	bl	8000388 <round_nth>
 80005e4:	eef0 7a40 	vmov.f32	s15, s0
 80005e8:	bf00      	nop
}
 80005ea:	eeb0 0a67 	vmov.f32	s0, s15
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000070c 	.word	0x2000070c
 80005f8:	2000027c 	.word	0x2000027c
 80005fc:	20000276 	.word	0x20000276
 8000600:	20000278 	.word	0x20000278
 8000604:	2000027a 	.word	0x2000027a
 8000608:	20000272 	.word	0x20000272
 800060c:	20000274 	.word	0x20000274
 8000610:	20000270 	.word	0x20000270
 8000614:	44800000 	.word	0x44800000

08000618 <BME280_getPressure>:

float BME280_getPressure(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af02      	add	r7, sp, #8
    uint32_t press_raw;
    float pressf;
    uint8_t cmd[4];

    cmd[0] = 0xF7; // press_msb
 800061e:	23f7      	movs	r3, #247	; 0xf7
 8000620:	703b      	strb	r3, [r7, #0]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000622:	463a      	mov	r2, r7
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2301      	movs	r3, #1
 800062a:	21ec      	movs	r1, #236	; 0xec
 800062c:	485d      	ldr	r0, [pc, #372]	; (80007a4 <BME280_getPressure+0x18c>)
 800062e:	f00a fe06 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 3, BME280_I2C_TIMEOUT);
 8000632:	463b      	mov	r3, r7
 8000634:	1c5a      	adds	r2, r3, #1
 8000636:	2364      	movs	r3, #100	; 0x64
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2303      	movs	r3, #3
 800063c:	21ec      	movs	r1, #236	; 0xec
 800063e:	4859      	ldr	r0, [pc, #356]	; (80007a4 <BME280_getPressure+0x18c>)
 8000640:	f00a fefa 	bl	800b438 <HAL_I2C_Master_Receive>

    press_raw = (cmd[1] << 12) | (cmd[2] << 4) | (cmd[3] >> 4);
 8000644:	787b      	ldrb	r3, [r7, #1]
 8000646:	031a      	lsls	r2, r3, #12
 8000648:	78bb      	ldrb	r3, [r7, #2]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	4313      	orrs	r3, r2
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	0912      	lsrs	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	4313      	orrs	r3, r2
 8000656:	613b      	str	r3, [r7, #16]

    int32_t var1, var2;
    uint32_t press;

    var1 = (t_fine >> 1) - 64000;
 8000658:	4b53      	ldr	r3, [pc, #332]	; (80007a8 <BME280_getPressure+0x190>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	105b      	asrs	r3, r3, #1
 800065e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000662:	60fb      	str	r3, [r7, #12]
    var2 = (((var1 >> 2) * (var1 >> 2)) >> 11) * dig_P6;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	109b      	asrs	r3, r3, #2
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	fb02 f303 	mul.w	r3, r2, r3
 8000670:	12db      	asrs	r3, r3, #11
 8000672:	4a4e      	ldr	r2, [pc, #312]	; (80007ac <BME280_getPressure+0x194>)
 8000674:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000678:	fb02 f303 	mul.w	r3, r2, r3
 800067c:	60bb      	str	r3, [r7, #8]
    var2 = var2 + ((var1 * dig_P5) << 1);
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <BME280_getPressure+0x198>)
 8000680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fb02 f303 	mul.w	r3, r2, r3
 800068c:	005b      	lsls	r3, r3, #1
 800068e:	68ba      	ldr	r2, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
    var2 = (var2 >> 2) + (dig_P4 << 16);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	109a      	asrs	r2, r3, #2
 8000698:	4b46      	ldr	r3, [pc, #280]	; (80007b4 <BME280_getPressure+0x19c>)
 800069a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800069e:	041b      	lsls	r3, r3, #16
 80006a0:	4413      	add	r3, r2
 80006a2:	60bb      	str	r3, [r7, #8]
    var1 = (((dig_P3 * (((var1 >> 2) * (var1 >> 2)) >> 13)) >> 3) + ((dig_P2 * var1) >> 1)) >> 18;
 80006a4:	4b44      	ldr	r3, [pc, #272]	; (80007b8 <BME280_getPressure+0x1a0>)
 80006a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006aa:	4619      	mov	r1, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	109b      	asrs	r3, r3, #2
 80006b0:	68fa      	ldr	r2, [r7, #12]
 80006b2:	1092      	asrs	r2, r2, #2
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	135b      	asrs	r3, r3, #13
 80006ba:	fb01 f303 	mul.w	r3, r1, r3
 80006be:	10da      	asrs	r2, r3, #3
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <BME280_getPressure+0x1a4>)
 80006c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c6:	4619      	mov	r1, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	fb01 f303 	mul.w	r3, r1, r3
 80006ce:	105b      	asrs	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	149b      	asrs	r3, r3, #18
 80006d4:	60fb      	str	r3, [r7, #12]
    var1 = ((32768 + var1) * dig_P1) >> 15;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006dc:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <BME280_getPressure+0x1a8>)
 80006de:	8812      	ldrh	r2, [r2, #0]
 80006e0:	fb02 f303 	mul.w	r3, r2, r3
 80006e4:	13db      	asrs	r3, r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
    if (var1 == 0) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d102      	bne.n	80006f4 <BME280_getPressure+0xdc>
        return 0;
 80006ee:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80007c4 <BME280_getPressure+0x1ac>
 80006f2:	e04f      	b.n	8000794 <BME280_getPressure+0x17c>
    }
    press = (((1048576 - press_raw) - (var2 >> 12))) * 3125;
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	131b      	asrs	r3, r3, #12
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4413      	add	r3, r2
 80006fe:	4a32      	ldr	r2, [pc, #200]	; (80007c8 <BME280_getPressure+0x1b0>)
 8000700:	fb02 f303 	mul.w	r3, r2, r3
 8000704:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000708:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 800070c:	617b      	str	r3, [r7, #20]
    if (press < 0x80000000) {
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db06      	blt.n	8000722 <BME280_getPressure+0x10a>
        press = (press << 1) / var1;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	005a      	lsls	r2, r3, #1
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	fbb2 f3f3 	udiv	r3, r2, r3
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	e005      	b.n	800072e <BME280_getPressure+0x116>
    } else {
        press = (press / var1) * 2;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	697a      	ldr	r2, [r7, #20]
 8000726:	fbb2 f3f3 	udiv	r3, r2, r3
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	617b      	str	r3, [r7, #20]
    }
    var1 = ((int32_t) dig_P9 * ((int32_t)(((press >> 3) * (press >> 3)) >> 13))) >> 12;
 800072e:	4b27      	ldr	r3, [pc, #156]	; (80007cc <BME280_getPressure+0x1b4>)
 8000730:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000734:	4619      	mov	r1, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	08db      	lsrs	r3, r3, #3
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	08d2      	lsrs	r2, r2, #3
 800073e:	fb02 f303 	mul.w	r3, r2, r3
 8000742:	0b5b      	lsrs	r3, r3, #13
 8000744:	fb01 f303 	mul.w	r3, r1, r3
 8000748:	131b      	asrs	r3, r3, #12
 800074a:	60fb      	str	r3, [r7, #12]
    var2 = (((int32_t)(press >> 2)) * (int32_t) dig_P8) >> 13;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	089b      	lsrs	r3, r3, #2
 8000750:	461a      	mov	r2, r3
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <BME280_getPressure+0x1b8>)
 8000754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000758:	fb02 f303 	mul.w	r3, r2, r3
 800075c:	135b      	asrs	r3, r3, #13
 800075e:	60bb      	str	r3, [r7, #8]
    press = (press + ((var1 + var2 + dig_P7) >> 4));
 8000760:	68fa      	ldr	r2, [r7, #12]
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	4413      	add	r3, r2
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <BME280_getPressure+0x1bc>)
 8000768:	f9b2 2000 	ldrsh.w	r2, [r2]
 800076c:	4413      	add	r3, r2
 800076e:	111b      	asrs	r3, r3, #4
 8000770:	461a      	mov	r2, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	4413      	add	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

    pressf = (float) press;
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000782:	edc7 7a01 	vstr	s15, [r7, #4]
    return (pressf / 100.0f);
 8000786:	edd7 7a01 	vldr	s15, [r7, #4]
 800078a:	eddf 6a13 	vldr	s13, [pc, #76]	; 80007d8 <BME280_getPressure+0x1c0>
 800078e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000792:	bf00      	nop
}
 8000794:	eef0 7a47 	vmov.f32	s15, s14
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	2000070c 	.word	0x2000070c
 80007a8:	2000027c 	.word	0x2000027c
 80007ac:	20000268 	.word	0x20000268
 80007b0:	20000266 	.word	0x20000266
 80007b4:	20000264 	.word	0x20000264
 80007b8:	20000262 	.word	0x20000262
 80007bc:	20000260 	.word	0x20000260
 80007c0:	2000025e 	.word	0x2000025e
 80007c4:	00000000 	.word	0x00000000
 80007c8:	fffff3cb 	.word	0xfffff3cb
 80007cc:	2000026e 	.word	0x2000026e
 80007d0:	2000026c 	.word	0x2000026c
 80007d4:	2000026a 	.word	0x2000026a
 80007d8:	42c80000 	.word	0x42c80000

080007dc <BME280_Init>:

void BME280_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af02      	add	r7, sp, #8
    uint8_t cmd[18];

    cmd[0] = 0xF2; // ctrl_hum
 80007e2:	23f2      	movs	r3, #242	; 0xf2
 80007e4:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0x05; // Humidity oversampling x16
 80007e6:	2305      	movs	r3, #5
 80007e8:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	2364      	movs	r3, #100	; 0x64
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2302      	movs	r3, #2
 80007f2:	21ec      	movs	r1, #236	; 0xec
 80007f4:	4882      	ldr	r0, [pc, #520]	; (8000a00 <BME280_Init+0x224>)
 80007f6:	f00a fd22 	bl	800b23e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF4; // ctrl_meas
 80007fa:	23f4      	movs	r3, #244	; 0xf4
 80007fc:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xB7; // Temparature oversampling x16, Pressure oversampling x16, Normal mode
 80007fe:	23b7      	movs	r3, #183	; 0xb7
 8000800:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	9300      	str	r3, [sp, #0]
 8000808:	2302      	movs	r3, #2
 800080a:	21ec      	movs	r1, #236	; 0xec
 800080c:	487c      	ldr	r0, [pc, #496]	; (8000a00 <BME280_Init+0x224>)
 800080e:	f00a fd16 	bl	800b23e <HAL_I2C_Master_Transmit>

    cmd[0] = 0xF5; // config
 8000812:	23f5      	movs	r3, #245	; 0xf5
 8000814:	713b      	strb	r3, [r7, #4]
    cmd[1] = 0xa0; // Standby BME280_I2C_TIMEOUTms, Filter off
 8000816:	23a0      	movs	r3, #160	; 0xa0
 8000818:	717b      	strb	r3, [r7, #5]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 2, BME280_I2C_TIMEOUT);
 800081a:	1d3a      	adds	r2, r7, #4
 800081c:	2364      	movs	r3, #100	; 0x64
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2302      	movs	r3, #2
 8000822:	21ec      	movs	r1, #236	; 0xec
 8000824:	4876      	ldr	r0, [pc, #472]	; (8000a00 <BME280_Init+0x224>)
 8000826:	f00a fd0a 	bl	800b23e <HAL_I2C_Master_Transmit>

    cmd[0] = 0x88; // read dig_T regs
 800082a:	2388      	movs	r3, #136	; 0x88
 800082c:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	2364      	movs	r3, #100	; 0x64
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2301      	movs	r3, #1
 8000836:	21ec      	movs	r1, #236	; 0xec
 8000838:	4871      	ldr	r0, [pc, #452]	; (8000a00 <BME280_Init+0x224>)
 800083a:	f00a fd00 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 6, BME280_I2C_TIMEOUT);
 800083e:	1d3a      	adds	r2, r7, #4
 8000840:	2364      	movs	r3, #100	; 0x64
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2306      	movs	r3, #6
 8000846:	21ec      	movs	r1, #236	; 0xec
 8000848:	486d      	ldr	r0, [pc, #436]	; (8000a00 <BME280_Init+0x224>)
 800084a:	f00a fdf5 	bl	800b438 <HAL_I2C_Master_Receive>

    dig_T1 = (cmd[1] << 8) | cmd[0];
 800084e:	797b      	ldrb	r3, [r7, #5]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	793b      	ldrb	r3, [r7, #4]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	b21b      	sxth	r3, r3
 800085c:	b29a      	uxth	r2, r3
 800085e:	4b69      	ldr	r3, [pc, #420]	; (8000a04 <BME280_Init+0x228>)
 8000860:	801a      	strh	r2, [r3, #0]
    dig_T2 = (cmd[3] << 8) | cmd[2];
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21a      	sxth	r2, r3
 8000868:	79bb      	ldrb	r3, [r7, #6]
 800086a:	b21b      	sxth	r3, r3
 800086c:	4313      	orrs	r3, r2
 800086e:	b21a      	sxth	r2, r3
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <BME280_Init+0x22c>)
 8000872:	801a      	strh	r2, [r3, #0]
    dig_T3 = (cmd[5] << 8) | cmd[4];
 8000874:	7a7b      	ldrb	r3, [r7, #9]
 8000876:	021b      	lsls	r3, r3, #8
 8000878:	b21a      	sxth	r2, r3
 800087a:	7a3b      	ldrb	r3, [r7, #8]
 800087c:	b21b      	sxth	r3, r3
 800087e:	4313      	orrs	r3, r2
 8000880:	b21a      	sxth	r2, r3
 8000882:	4b62      	ldr	r3, [pc, #392]	; (8000a0c <BME280_Init+0x230>)
 8000884:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0x8E; // read dig_P regs
 8000886:	238e      	movs	r3, #142	; 0x8e
 8000888:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 800088a:	1d3a      	adds	r2, r7, #4
 800088c:	2364      	movs	r3, #100	; 0x64
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21ec      	movs	r1, #236	; 0xec
 8000894:	485a      	ldr	r0, [pc, #360]	; (8000a00 <BME280_Init+0x224>)
 8000896:	f00a fcd2 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 18, BME280_I2C_TIMEOUT);
 800089a:	1d3a      	adds	r2, r7, #4
 800089c:	2364      	movs	r3, #100	; 0x64
 800089e:	9300      	str	r3, [sp, #0]
 80008a0:	2312      	movs	r3, #18
 80008a2:	21ec      	movs	r1, #236	; 0xec
 80008a4:	4856      	ldr	r0, [pc, #344]	; (8000a00 <BME280_Init+0x224>)
 80008a6:	f00a fdc7 	bl	800b438 <HAL_I2C_Master_Receive>

    dig_P1 = (cmd[1] << 8) | cmd[0];
 80008aa:	797b      	ldrb	r3, [r7, #5]
 80008ac:	021b      	lsls	r3, r3, #8
 80008ae:	b21a      	sxth	r2, r3
 80008b0:	793b      	ldrb	r3, [r7, #4]
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b21b      	sxth	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <BME280_Init+0x234>)
 80008bc:	801a      	strh	r2, [r3, #0]
    dig_P2 = (cmd[3] << 8) | cmd[2];
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	021b      	lsls	r3, r3, #8
 80008c2:	b21a      	sxth	r2, r3
 80008c4:	79bb      	ldrb	r3, [r7, #6]
 80008c6:	b21b      	sxth	r3, r3
 80008c8:	4313      	orrs	r3, r2
 80008ca:	b21a      	sxth	r2, r3
 80008cc:	4b51      	ldr	r3, [pc, #324]	; (8000a14 <BME280_Init+0x238>)
 80008ce:	801a      	strh	r2, [r3, #0]
    dig_P3 = (cmd[5] << 8) | cmd[4];
 80008d0:	7a7b      	ldrb	r3, [r7, #9]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a3b      	ldrb	r3, [r7, #8]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	4b4e      	ldr	r3, [pc, #312]	; (8000a18 <BME280_Init+0x23c>)
 80008e0:	801a      	strh	r2, [r3, #0]
    dig_P4 = (cmd[7] << 8) | cmd[6];
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	b21b      	sxth	r3, r3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b21a      	sxth	r2, r3
 80008f0:	4b4a      	ldr	r3, [pc, #296]	; (8000a1c <BME280_Init+0x240>)
 80008f2:	801a      	strh	r2, [r3, #0]
    dig_P5 = (cmd[9] << 8) | cmd[8];
 80008f4:	7b7b      	ldrb	r3, [r7, #13]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	7b3b      	ldrb	r3, [r7, #12]
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	4313      	orrs	r3, r2
 8000900:	b21a      	sxth	r2, r3
 8000902:	4b47      	ldr	r3, [pc, #284]	; (8000a20 <BME280_Init+0x244>)
 8000904:	801a      	strh	r2, [r3, #0]
    dig_P6 = (cmd[11] << 8) | cmd[10];
 8000906:	7bfb      	ldrb	r3, [r7, #15]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7bbb      	ldrb	r3, [r7, #14]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <BME280_Init+0x248>)
 8000916:	801a      	strh	r2, [r3, #0]
    dig_P7 = (cmd[13] << 8) | cmd[12];
 8000918:	7c7b      	ldrb	r3, [r7, #17]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	b21b      	sxth	r3, r3
 8000922:	4313      	orrs	r3, r2
 8000924:	b21a      	sxth	r2, r3
 8000926:	4b40      	ldr	r3, [pc, #256]	; (8000a28 <BME280_Init+0x24c>)
 8000928:	801a      	strh	r2, [r3, #0]
    dig_P8 = (cmd[15] << 8) | cmd[14];
 800092a:	7cfb      	ldrb	r3, [r7, #19]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	7cbb      	ldrb	r3, [r7, #18]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <BME280_Init+0x250>)
 800093a:	801a      	strh	r2, [r3, #0]
    dig_P9 = (cmd[17] << 8) | cmd[16];
 800093c:	7d7b      	ldrb	r3, [r7, #21]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7d3b      	ldrb	r3, [r7, #20]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <BME280_Init+0x254>)
 800094c:	801a      	strh	r2, [r3, #0]

    cmd[0] = 0xA1; // read dig_H regs
 800094e:	23a1      	movs	r3, #161	; 0xa1
 8000950:	713b      	strb	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000952:	1d3a      	adds	r2, r7, #4
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	21ec      	movs	r1, #236	; 0xec
 800095c:	4828      	ldr	r0, [pc, #160]	; (8000a00 <BME280_Init+0x224>)
 800095e:	f00a fc6e 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, cmd, 1, BME280_I2C_TIMEOUT);
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	2364      	movs	r3, #100	; 0x64
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	2301      	movs	r3, #1
 800096a:	21ec      	movs	r1, #236	; 0xec
 800096c:	4824      	ldr	r0, [pc, #144]	; (8000a00 <BME280_Init+0x224>)
 800096e:	f00a fd63 	bl	800b438 <HAL_I2C_Master_Receive>

    cmd[1] = 0xE1; // read dig_H regs
 8000972:	23e1      	movs	r3, #225	; 0xe1
 8000974:	717b      	strb	r3, [r7, #5]

    HAL_I2C_Master_Transmit(&BME280_I2C, BME280_ADDR, &cmd[1], 1, BME280_I2C_TIMEOUT);
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2301      	movs	r3, #1
 8000980:	21ec      	movs	r1, #236	; 0xec
 8000982:	481f      	ldr	r0, [pc, #124]	; (8000a00 <BME280_Init+0x224>)
 8000984:	f00a fc5b 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&BME280_I2C, BME280_ADDR, &cmd[1], 7, BME280_I2C_TIMEOUT);
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2307      	movs	r3, #7
 8000992:	21ec      	movs	r1, #236	; 0xec
 8000994:	481a      	ldr	r0, [pc, #104]	; (8000a00 <BME280_Init+0x224>)
 8000996:	f00a fd4f 	bl	800b438 <HAL_I2C_Master_Receive>

    dig_H1 = cmd[0];
 800099a:	793b      	ldrb	r3, [r7, #4]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <BME280_Init+0x258>)
 80009a0:	801a      	strh	r2, [r3, #0]
    dig_H2 = (cmd[2] << 8) | cmd[1];
 80009a2:	79bb      	ldrb	r3, [r7, #6]
 80009a4:	021b      	lsls	r3, r3, #8
 80009a6:	b21a      	sxth	r2, r3
 80009a8:	797b      	ldrb	r3, [r7, #5]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <BME280_Init+0x25c>)
 80009b2:	801a      	strh	r2, [r3, #0]
    dig_H3 = cmd[3];
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <BME280_Init+0x260>)
 80009ba:	801a      	strh	r2, [r3, #0]
    dig_H4 = (cmd[4] << 4) | (cmd[5] & 0x0f);
 80009bc:	7a3b      	ldrb	r3, [r7, #8]
 80009be:	011b      	lsls	r3, r3, #4
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	7a7b      	ldrb	r3, [r7, #9]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	f003 030f 	and.w	r3, r3, #15
 80009ca:	b21b      	sxth	r3, r3
 80009cc:	4313      	orrs	r3, r2
 80009ce:	b21a      	sxth	r2, r3
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <BME280_Init+0x264>)
 80009d2:	801a      	strh	r2, [r3, #0]
    dig_H5 = (cmd[6] << 4) | ((cmd[5] >> 4) & 0x0f);
 80009d4:	7abb      	ldrb	r3, [r7, #10]
 80009d6:	011b      	lsls	r3, r3, #4
 80009d8:	b21a      	sxth	r2, r3
 80009da:	7a7b      	ldrb	r3, [r7, #9]
 80009dc:	091b      	lsrs	r3, r3, #4
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <BME280_Init+0x268>)
 80009ee:	801a      	strh	r2, [r3, #0]
    dig_H6 = cmd[7];
 80009f0:	7afb      	ldrb	r3, [r7, #11]
 80009f2:	b21a      	sxth	r2, r3
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <BME280_Init+0x26c>)
 80009f6:	801a      	strh	r2, [r3, #0]
}
 80009f8:	bf00      	nop
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000070c 	.word	0x2000070c
 8000a04:	20000258 	.word	0x20000258
 8000a08:	2000025a 	.word	0x2000025a
 8000a0c:	2000025c 	.word	0x2000025c
 8000a10:	2000025e 	.word	0x2000025e
 8000a14:	20000260 	.word	0x20000260
 8000a18:	20000262 	.word	0x20000262
 8000a1c:	20000264 	.word	0x20000264
 8000a20:	20000266 	.word	0x20000266
 8000a24:	20000268 	.word	0x20000268
 8000a28:	2000026a 	.word	0x2000026a
 8000a2c:	2000026c 	.word	0x2000026c
 8000a30:	2000026e 	.word	0x2000026e
 8000a34:	20000270 	.word	0x20000270
 8000a38:	20000274 	.word	0x20000274
 8000a3c:	20000272 	.word	0x20000272
 8000a40:	20000276 	.word	0x20000276
 8000a44:	20000278 	.word	0x20000278
 8000a48:	2000027a 	.word	0x2000027a

08000a4c <fahrenheit>:

float fahrenheit(float celsius) {
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	ed87 0a01 	vstr	s0, [r7, #4]
    return celsius * 9 / 5 + 32;
 8000a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a5a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8000a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000a62:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8000a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000a80 <fahrenheit+0x34>
 8000a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a72:	eeb0 0a67 	vmov.f32	s0, s15
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr
 8000a80:	42000000 	.word	0x42000000

08000a84 <calculate_humidex>:

double calculate_humidex(double temperature, double humidity) {
 8000a84:	b5b0      	push	{r4, r5, r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8000a8e:	ed87 1b00 	vstr	d1, [r7]
    double e;
    e = (6.112 * pow(10, (7.5 * temperature / (237.7 + temperature))) * humidity / 100);
 8000a92:	f04f 0200 	mov.w	r2, #0
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <calculate_humidex+0xfc>)
 8000a98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a9c:	f018 f8b4 	bl	8018c08 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4614      	mov	r4, r2
 8000aa6:	461d      	mov	r5, r3
 8000aa8:	a32d      	add	r3, pc, #180	; (adr r3, 8000b60 <calculate_humidex+0xdc>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ab2:	f017 fef3 	bl	801889c <__adddf3>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	460b      	mov	r3, r1
 8000aba:	4620      	mov	r0, r4
 8000abc:	4629      	mov	r1, r5
 8000abe:	f018 f9cd 	bl	8018e5c <__aeabi_ddiv>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	ec43 2b17 	vmov	d7, r2, r3
 8000aca:	eeb0 1a47 	vmov.f32	s2, s14
 8000ace:	eef0 1a67 	vmov.f32	s3, s15
 8000ad2:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8000b68 <calculate_humidex+0xe4>
 8000ad6:	f01d fb03 	bl	801e0e0 <pow>
 8000ada:	ec51 0b10 	vmov	r0, r1, d0
 8000ade:	a324      	add	r3, pc, #144	; (adr r3, 8000b70 <calculate_humidex+0xec>)
 8000ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae4:	f018 f890 	bl	8018c08 <__aeabi_dmul>
 8000ae8:	4602      	mov	r2, r0
 8000aea:	460b      	mov	r3, r1
 8000aec:	4610      	mov	r0, r2
 8000aee:	4619      	mov	r1, r3
 8000af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000af4:	f018 f888 	bl	8018c08 <__aeabi_dmul>
 8000af8:	4602      	mov	r2, r0
 8000afa:	460b      	mov	r3, r1
 8000afc:	4610      	mov	r0, r2
 8000afe:	4619      	mov	r1, r3
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <calculate_humidex+0x100>)
 8000b06:	f018 f9a9 	bl	8018e5c <__aeabi_ddiv>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double humidex = temperature + 0.55555555 * (e - 10.0);
 8000b12:	f04f 0200 	mov.w	r2, #0
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <calculate_humidex+0x104>)
 8000b18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b1c:	f017 febc 	bl	8018898 <__aeabi_dsub>
 8000b20:	4602      	mov	r2, r0
 8000b22:	460b      	mov	r3, r1
 8000b24:	4610      	mov	r0, r2
 8000b26:	4619      	mov	r1, r3
 8000b28:	a313      	add	r3, pc, #76	; (adr r3, 8000b78 <calculate_humidex+0xf4>)
 8000b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b2e:	f018 f86b 	bl	8018c08 <__aeabi_dmul>
 8000b32:	4602      	mov	r2, r0
 8000b34:	460b      	mov	r3, r1
 8000b36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000b3a:	f017 feaf 	bl	801889c <__adddf3>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	460b      	mov	r3, r1
 8000b42:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return humidex;
 8000b46:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000b4a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000b4e:	eeb0 0a47 	vmov.f32	s0, s14
 8000b52:	eef0 0a67 	vmov.f32	s1, s15
 8000b56:	3720      	adds	r7, #32
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8000b5c:	f3af 8000 	nop.w
 8000b60:	66666666 	.word	0x66666666
 8000b64:	406db666 	.word	0x406db666
 8000b68:	00000000 	.word	0x00000000
 8000b6c:	40240000 	.word	0x40240000
 8000b70:	20c49ba6 	.word	0x20c49ba6
 8000b74:	401872b0 	.word	0x401872b0
 8000b78:	6ecb8fb6 	.word	0x6ecb8fb6
 8000b7c:	3fe1c71c 	.word	0x3fe1c71c
 8000b80:	401e0000 	.word	0x401e0000
 8000b84:	40590000 	.word	0x40590000
 8000b88:	40240000 	.word	0x40240000

08000b8c <calculate_humidityAbsolute>:

double calculate_humidityAbsolute(double temperature, double humidityRelative) {
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	ed87 0b02 	vstr	d0, [r7, #8]
 8000b96:	ed87 1b00 	vstr	d1, [r7]
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000b9a:	a32f      	add	r3, pc, #188	; (adr r3, 8000c58 <calculate_humidityAbsolute+0xcc>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ba4:	f018 f830 	bl	8018c08 <__aeabi_dmul>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	460b      	mov	r3, r1
 8000bac:	4614      	mov	r4, r2
 8000bae:	461d      	mov	r5, r3
 8000bb0:	a32b      	add	r3, pc, #172	; (adr r3, 8000c60 <calculate_humidityAbsolute+0xd4>)
 8000bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000bba:	f017 fe6f 	bl	801889c <__adddf3>
 8000bbe:	4602      	mov	r2, r0
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	4629      	mov	r1, r5
 8000bc6:	f018 f949 	bl	8018e5c <__aeabi_ddiv>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	460b      	mov	r3, r1
 8000bce:	4610      	mov	r0, r2
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bd6:	f018 f817 	bl	8018c08 <__aeabi_dmul>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	460b      	mov	r3, r1
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	a321      	add	r3, pc, #132	; (adr r3, 8000c68 <calculate_humidityAbsolute+0xdc>)
 8000be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be8:	f018 f80e 	bl	8018c08 <__aeabi_dmul>
 8000bec:	4602      	mov	r2, r0
 8000bee:	460b      	mov	r3, r1
 8000bf0:	ec43 2b17 	vmov	d7, r2, r3
 8000bf4:	eeb0 1a47 	vmov.f32	s2, s14
 8000bf8:	eef0 1a67 	vmov.f32	s3, s15
 8000bfc:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8000c50 <calculate_humidityAbsolute+0xc4>
 8000c00:	f01d fa6e 	bl	801e0e0 <pow>
 8000c04:	ec51 0b10 	vmov	r0, r1, d0
 8000c08:	a319      	add	r3, pc, #100	; (adr r3, 8000c70 <calculate_humidityAbsolute+0xe4>)
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	f017 fffb 	bl	8018c08 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	4614      	mov	r4, r2
 8000c18:	461d      	mov	r5, r3
           (273.15 + temperature);
 8000c1a:	a317      	add	r3, pc, #92	; (adr r3, 8000c78 <calculate_humidityAbsolute+0xec>)
 8000c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c24:	f017 fe3a 	bl	801889c <__adddf3>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	460b      	mov	r3, r1
    return 6.112 * pow(2.71828, ((17.67 * temperature) / (temperature + 243.5)) * humidityRelative * 2.1674) /
 8000c2c:	4620      	mov	r0, r4
 8000c2e:	4629      	mov	r1, r5
 8000c30:	f018 f914 	bl	8018e5c <__aeabi_ddiv>
 8000c34:	4602      	mov	r2, r0
 8000c36:	460b      	mov	r3, r1
 8000c38:	ec43 2b17 	vmov	d7, r2, r3
}
 8000c3c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c40:	eef0 0a67 	vmov.f32	s1, s15
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
 8000c50:	95aaf790 	.word	0x95aaf790
 8000c54:	4005bf09 	.word	0x4005bf09
 8000c58:	1eb851ec 	.word	0x1eb851ec
 8000c5c:	4031ab85 	.word	0x4031ab85
 8000c60:	00000000 	.word	0x00000000
 8000c64:	406e7000 	.word	0x406e7000
 8000c68:	cfaacd9f 	.word	0xcfaacd9f
 8000c6c:	400156d5 	.word	0x400156d5
 8000c70:	20c49ba6 	.word	0x20c49ba6
 8000c74:	401872b0 	.word	0x401872b0
 8000c78:	66666666 	.word	0x66666666
 8000c7c:	40711266 	.word	0x40711266

08000c80 <decToBcd>:

extern I2C_HandleTypeDef DS3231_I2C;

uint8_t rtcBuffer[19], rtcBufferSet[17];

uint8_t decToBcd(uint8_t val) {
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    return ((val / 10 * 16) + (val % 10));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <decToBcd+0x40>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	b2d8      	uxtb	r0, r3
 8000c9a:	79fa      	ldrb	r2, [r7, #7]
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <decToBcd+0x40>)
 8000c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ca2:	08d9      	lsrs	r1, r3, #3
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4403      	add	r3, r0
 8000cb2:	b2db      	uxtb	r3, r3
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	cccccccd 	.word	0xcccccccd

08000cc4 <bcdToDec>:

uint8_t bcdToDec(uint8_t val) {
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
    return ((val / 16 * 10) + (val % 16));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	0092      	lsls	r2, r2, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	b2db      	uxtb	r3, r3
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DS3231_Update>:

void DS3231_Update(void) {
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af02      	add	r7, sp, #8
    uint8_t cmd = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, &cmd, 1, DS3231_I2C_TIMEOUT);
 8000d00:	1dfa      	adds	r2, r7, #7
 8000d02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	4827      	ldr	r0, [pc, #156]	; (8000dac <DS3231_Update+0xb6>)
 8000d0e:	f00a fa96 	bl	800b23e <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&DS3231_I2C, DS3231_ADDRESS, rtcBuffer, 19, DS3231_I2C_TIMEOUT);
 8000d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2313      	movs	r3, #19
 8000d1a:	4a25      	ldr	r2, [pc, #148]	; (8000db0 <DS3231_Update+0xba>)
 8000d1c:	21d0      	movs	r1, #208	; 0xd0
 8000d1e:	4823      	ldr	r0, [pc, #140]	; (8000dac <DS3231_Update+0xb6>)
 8000d20:	f00a fb8a 	bl	800b438 <HAL_I2C_Master_Receive>
    rtcBufferSet[1] = rtcBuffer[0];
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <DS3231_Update+0xba>)
 8000d26:	781a      	ldrb	r2, [r3, #0]
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <DS3231_Update+0xbe>)
 8000d2a:	705a      	strb	r2, [r3, #1]
    rtcBufferSet[2] = rtcBuffer[1];
 8000d2c:	4b20      	ldr	r3, [pc, #128]	; (8000db0 <DS3231_Update+0xba>)
 8000d2e:	785a      	ldrb	r2, [r3, #1]
 8000d30:	4b20      	ldr	r3, [pc, #128]	; (8000db4 <DS3231_Update+0xbe>)
 8000d32:	709a      	strb	r2, [r3, #2]
    rtcBufferSet[3] = rtcBuffer[2];
 8000d34:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <DS3231_Update+0xba>)
 8000d36:	789a      	ldrb	r2, [r3, #2]
 8000d38:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <DS3231_Update+0xbe>)
 8000d3a:	70da      	strb	r2, [r3, #3]
    rtcBufferSet[4] = rtcBuffer[3];
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <DS3231_Update+0xba>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <DS3231_Update+0xbe>)
 8000d42:	711a      	strb	r2, [r3, #4]
    rtcBufferSet[5] = rtcBuffer[4];
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <DS3231_Update+0xba>)
 8000d46:	791a      	ldrb	r2, [r3, #4]
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <DS3231_Update+0xbe>)
 8000d4a:	715a      	strb	r2, [r3, #5]
    rtcBufferSet[6] = rtcBuffer[5];
 8000d4c:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <DS3231_Update+0xba>)
 8000d4e:	795a      	ldrb	r2, [r3, #5]
 8000d50:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <DS3231_Update+0xbe>)
 8000d52:	719a      	strb	r2, [r3, #6]
    rtcBufferSet[7] = rtcBuffer[6];
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <DS3231_Update+0xba>)
 8000d56:	799a      	ldrb	r2, [r3, #6]
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <DS3231_Update+0xbe>)
 8000d5a:	71da      	strb	r2, [r3, #7]
    rtcBufferSet[8] = rtcBuffer[7];
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <DS3231_Update+0xba>)
 8000d5e:	79da      	ldrb	r2, [r3, #7]
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <DS3231_Update+0xbe>)
 8000d62:	721a      	strb	r2, [r3, #8]
    rtcBufferSet[9] = rtcBuffer[8];
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <DS3231_Update+0xba>)
 8000d66:	7a1a      	ldrb	r2, [r3, #8]
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <DS3231_Update+0xbe>)
 8000d6a:	725a      	strb	r2, [r3, #9]
    rtcBufferSet[10] = rtcBuffer[9];
 8000d6c:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <DS3231_Update+0xba>)
 8000d6e:	7a5a      	ldrb	r2, [r3, #9]
 8000d70:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <DS3231_Update+0xbe>)
 8000d72:	729a      	strb	r2, [r3, #10]
    rtcBufferSet[11] = rtcBuffer[10];
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <DS3231_Update+0xba>)
 8000d76:	7a9a      	ldrb	r2, [r3, #10]
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <DS3231_Update+0xbe>)
 8000d7a:	72da      	strb	r2, [r3, #11]
    rtcBufferSet[12] = rtcBuffer[11];
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <DS3231_Update+0xba>)
 8000d7e:	7ada      	ldrb	r2, [r3, #11]
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <DS3231_Update+0xbe>)
 8000d82:	731a      	strb	r2, [r3, #12]
    rtcBufferSet[13] = rtcBuffer[12];
 8000d84:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <DS3231_Update+0xba>)
 8000d86:	7b1a      	ldrb	r2, [r3, #12]
 8000d88:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <DS3231_Update+0xbe>)
 8000d8a:	735a      	strb	r2, [r3, #13]
    rtcBufferSet[14] = rtcBuffer[13];
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <DS3231_Update+0xba>)
 8000d8e:	7b5a      	ldrb	r2, [r3, #13]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <DS3231_Update+0xbe>)
 8000d92:	739a      	strb	r2, [r3, #14]
    rtcBufferSet[15] = rtcBuffer[14];
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <DS3231_Update+0xba>)
 8000d96:	7b9a      	ldrb	r2, [r3, #14]
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <DS3231_Update+0xbe>)
 8000d9a:	73da      	strb	r2, [r3, #15]
    rtcBufferSet[16] = rtcBuffer[15];
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <DS3231_Update+0xba>)
 8000d9e:	7bda      	ldrb	r2, [r3, #15]
 8000da0:	4b04      	ldr	r3, [pc, #16]	; (8000db4 <DS3231_Update+0xbe>)
 8000da2:	741a      	strb	r2, [r3, #16]
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000070c 	.word	0x2000070c
 8000db0:	20000280 	.word	0x20000280
 8000db4:	20000294 	.word	0x20000294

08000db8 <DS3231_getSec>:

uint8_t DS3231_getSec(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dbc:	f7ff ff9b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[0]);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <DS3231_getSec+0x18>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff7d 	bl	8000cc4 <bcdToDec>
 8000dca:	4603      	mov	r3, r0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000280 	.word	0x20000280

08000dd4 <DS3231_getMin>:

uint8_t DS3231_getMin(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000dd8:	f7ff ff8d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[1]);
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <DS3231_getMin+0x18>)
 8000dde:	785b      	ldrb	r3, [r3, #1]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff6f 	bl	8000cc4 <bcdToDec>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000280 	.word	0x20000280

08000df0 <DS3231_getHrs>:

uint8_t DS3231_getHrs(void) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000df4:	f7ff ff7f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[2]);
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <DS3231_getHrs+0x18>)
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff ff61 	bl	8000cc4 <bcdToDec>
 8000e02:	4603      	mov	r3, r0
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000280 	.word	0x20000280

08000e0c <DS3231_getDay>:

uint8_t DS3231_getDay(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e10:	f7ff ff71 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[3]);
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <DS3231_getDay+0x18>)
 8000e16:	78db      	ldrb	r3, [r3, #3]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ff53 	bl	8000cc4 <bcdToDec>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000280 	.word	0x20000280

08000e28 <DS3231_getDate>:

uint8_t DS3231_getDate(void) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e2c:	f7ff ff63 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[4]);
 8000e30:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <DS3231_getDate+0x18>)
 8000e32:	791b      	ldrb	r3, [r3, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff45 	bl	8000cc4 <bcdToDec>
 8000e3a:	4603      	mov	r3, r0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000280 	.word	0x20000280

08000e44 <DS3231_getMonth>:

uint8_t DS3231_getMonth(void) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e48:	f7ff ff55 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[5]);
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <DS3231_getMonth+0x18>)
 8000e4e:	795b      	ldrb	r3, [r3, #5]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff37 	bl	8000cc4 <bcdToDec>
 8000e56:	4603      	mov	r3, r0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000280 	.word	0x20000280

08000e60 <DS3231_getYear>:

uint8_t DS3231_getYear(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e64:	f7ff ff47 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[6]);
 8000e68:	4b03      	ldr	r3, [pc, #12]	; (8000e78 <DS3231_getYear+0x18>)
 8000e6a:	799b      	ldrb	r3, [r3, #6]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff29 	bl	8000cc4 <bcdToDec>
 8000e72:	4603      	mov	r3, r0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000280 	.word	0x20000280

08000e7c <DS3231_getAlarm1Sec>:

uint8_t DS3231_getAlarm1Sec(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e80:	f7ff ff39 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[7]);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <DS3231_getAlarm1Sec+0x18>)
 8000e86:	79db      	ldrb	r3, [r3, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff1b 	bl	8000cc4 <bcdToDec>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000280 	.word	0x20000280

08000e98 <DS3231_getAlarm1Min>:

uint8_t DS3231_getAlarm1Min(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000e9c:	f7ff ff2b 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[8]);
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <DS3231_getAlarm1Min+0x18>)
 8000ea2:	7a1b      	ldrb	r3, [r3, #8]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff ff0d 	bl	8000cc4 <bcdToDec>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <DS3231_getAlarm1Hour>:

uint8_t DS3231_getAlarm1Hour(void) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000eb8:	f7ff ff1d 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[9]);
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <DS3231_getAlarm1Hour+0x18>)
 8000ebe:	7a5b      	ldrb	r3, [r3, #9]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feff 	bl	8000cc4 <bcdToDec>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000280 	.word	0x20000280

08000ed0 <DS3231_getAlarm1Day>:

uint8_t DS3231_getAlarm1Day(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ed4:	f7ff ff0f 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[10]);
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <DS3231_getAlarm1Day+0x18>)
 8000eda:	7a9b      	ldrb	r3, [r3, #10]
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fef1 	bl	8000cc4 <bcdToDec>
 8000ee2:	4603      	mov	r3, r0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000280 	.word	0x20000280

08000eec <DS3231_getAlarm1Date>:

uint8_t DS3231_getAlarm1Date(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000ef0:	f7ff ff01 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[11]);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <DS3231_getAlarm1Date+0x18>)
 8000ef6:	7adb      	ldrb	r3, [r3, #11]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fee3 	bl	8000cc4 <bcdToDec>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000280 	.word	0x20000280

08000f08 <DS3231_getAlarm2Min>:

uint8_t DS3231_getAlarm2Min(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f0c:	f7ff fef3 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[12]);
 8000f10:	4b03      	ldr	r3, [pc, #12]	; (8000f20 <DS3231_getAlarm2Min+0x18>)
 8000f12:	7b1b      	ldrb	r3, [r3, #12]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fed5 	bl	8000cc4 <bcdToDec>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000280 	.word	0x20000280

08000f24 <DS3231_getAlarm2Hour>:

uint8_t DS3231_getAlarm2Hour(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f28:	f7ff fee5 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[13]);
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <DS3231_getAlarm2Hour+0x18>)
 8000f2e:	7b5b      	ldrb	r3, [r3, #13]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fec7 	bl	8000cc4 <bcdToDec>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000280 	.word	0x20000280

08000f40 <DS3231_getAlarm2Day>:

uint8_t DS3231_getAlarm2Day(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f44:	f7ff fed7 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[14]);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <DS3231_getAlarm2Day+0x18>)
 8000f4a:	7b9b      	ldrb	r3, [r3, #14]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff feb9 	bl	8000cc4 <bcdToDec>
 8000f52:	4603      	mov	r3, r0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000280 	.word	0x20000280

08000f5c <DS3231_getAlarm2Date>:

uint8_t DS3231_getAlarm2Date(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f60:	f7ff fec9 	bl	8000cf6 <DS3231_Update>
    return bcdToDec(rtcBuffer[15]);
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <DS3231_getAlarm2Date+0x18>)
 8000f66:	7bdb      	ldrb	r3, [r3, #15]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff feab 	bl	8000cc4 <bcdToDec>
 8000f6e:	4603      	mov	r3, r0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000280 	.word	0x20000280

08000f78 <DS3231_getTemp>:

double DS3231_getTemp(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
	DS3231_Update();
 8000f7e:	f7ff feba 	bl	8000cf6 <DS3231_Update>
    uint8_t tempMSB = rtcBuffer[17];
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <DS3231_getTemp+0x88>)
 8000f84:	7c5b      	ldrb	r3, [r3, #17]
 8000f86:	73fb      	strb	r3, [r7, #15]
    uint8_t tempLSB = rtcBuffer[18];
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <DS3231_getTemp+0x88>)
 8000f8a:	7c9b      	ldrb	r3, [r3, #18]
 8000f8c:	73bb      	strb	r3, [r7, #14]
    double t = 0.0;
 8000f8e:	f04f 0200 	mov.w	r2, #0
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c7 2300 	strd	r2, r3, [r7]
    tempLSB >>= 6;
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	73bb      	strb	r3, [r7, #14]
    tempLSB &= 0x03;
 8000fa0:	7bbb      	ldrb	r3, [r7, #14]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	73bb      	strb	r3, [r7, #14]
    t = ((double) tempLSB);
 8000fa8:	7bbb      	ldrb	r3, [r7, #14]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f017 fdb2 	bl	8018b14 <__aeabi_ui2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	e9c7 2300 	strd	r2, r3, [r7]
    t *= 0.25;
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <DS3231_getTemp+0x8c>)
 8000fbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fc2:	f017 fe21 	bl	8018c08 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	e9c7 2300 	strd	r2, r3, [r7]
    t += tempMSB;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f017 fdaf 	bl	8018b34 <__aeabi_i2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000fde:	f017 fc5d 	bl	801889c <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	e9c7 2300 	strd	r2, r3, [r7]
    return t;
 8000fea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8000ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff6:	eef0 0a67 	vmov.f32	s1, s15
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000280 	.word	0x20000280
 8001004:	3fd00000 	.word	0x3fd00000

08001008 <DS3231_setSec>:

void DS3231_setSec(uint8_t value) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af02      	add	r7, sp, #8
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001012:	f7ff fe70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[1] = decToBcd(value);
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fe31 	bl	8000c80 <decToBcd>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <DS3231_setSec+0x38>)
 8001024:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2311      	movs	r3, #17
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <DS3231_setSec+0x38>)
 8001030:	21d0      	movs	r1, #208	; 0xd0
 8001032:	4804      	ldr	r0, [pc, #16]	; (8001044 <DS3231_setSec+0x3c>)
 8001034:	f00a f903 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000294 	.word	0x20000294
 8001044:	2000070c 	.word	0x2000070c

08001048 <DS3231_setMin>:

void DS3231_setMin(uint8_t value) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af02      	add	r7, sp, #8
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001052:	f7ff fe50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[2] = decToBcd(value);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe11 	bl	8000c80 <decToBcd>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <DS3231_setMin+0x38>)
 8001064:	709a      	strb	r2, [r3, #2]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2311      	movs	r3, #17
 800106e:	4a04      	ldr	r2, [pc, #16]	; (8001080 <DS3231_setMin+0x38>)
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <DS3231_setMin+0x3c>)
 8001074:	f00a f8e3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000294 	.word	0x20000294
 8001084:	2000070c 	.word	0x2000070c

08001088 <DS3231_setHrs>:

void DS3231_setHrs(uint8_t value) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af02      	add	r7, sp, #8
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001092:	f7ff fe30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[3] = decToBcd(value);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fdf1 	bl	8000c80 <decToBcd>
 800109e:	4603      	mov	r3, r0
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <DS3231_setHrs+0x38>)
 80010a4:	70da      	strb	r2, [r3, #3]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2311      	movs	r3, #17
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <DS3231_setHrs+0x38>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	4804      	ldr	r0, [pc, #16]	; (80010c4 <DS3231_setHrs+0x3c>)
 80010b4:	f00a f8c3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000294 	.word	0x20000294
 80010c4:	2000070c 	.word	0x2000070c

080010c8 <DS3231_setDay>:

void DS3231_setDay(uint8_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80010d2:	f7ff fe10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[4] = decToBcd(value);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fdd1 	bl	8000c80 <decToBcd>
 80010de:	4603      	mov	r3, r0
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <DS3231_setDay+0x38>)
 80010e4:	711a      	strb	r2, [r3, #4]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2311      	movs	r3, #17
 80010ee:	4a04      	ldr	r2, [pc, #16]	; (8001100 <DS3231_setDay+0x38>)
 80010f0:	21d0      	movs	r1, #208	; 0xd0
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <DS3231_setDay+0x3c>)
 80010f4:	f00a f8a3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000294 	.word	0x20000294
 8001104:	2000070c 	.word	0x2000070c

08001108 <DS3231_setDate>:

void DS3231_setDate(uint8_t value) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001112:	f7ff fdf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[5] = decToBcd(value);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fdb1 	bl	8000c80 <decToBcd>
 800111e:	4603      	mov	r3, r0
 8001120:	461a      	mov	r2, r3
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <DS3231_setDate+0x38>)
 8001124:	715a      	strb	r2, [r3, #5]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2311      	movs	r3, #17
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <DS3231_setDate+0x38>)
 8001130:	21d0      	movs	r1, #208	; 0xd0
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <DS3231_setDate+0x3c>)
 8001134:	f00a f883 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000294 	.word	0x20000294
 8001144:	2000070c 	.word	0x2000070c

08001148 <DS3231_setMonth>:

void DS3231_setMonth(uint8_t value) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af02      	add	r7, sp, #8
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001152:	f7ff fdd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[6] = decToBcd(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fd91 	bl	8000c80 <decToBcd>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <DS3231_setMonth+0x38>)
 8001164:	719a      	strb	r2, [r3, #6]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2311      	movs	r3, #17
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <DS3231_setMonth+0x38>)
 8001170:	21d0      	movs	r1, #208	; 0xd0
 8001172:	4804      	ldr	r0, [pc, #16]	; (8001184 <DS3231_setMonth+0x3c>)
 8001174:	f00a f863 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001178:	bf00      	nop
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000294 	.word	0x20000294
 8001184:	2000070c 	.word	0x2000070c

08001188 <DS3231_setYear>:

void DS3231_setYear(uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001192:	f7ff fdb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[7] = decToBcd(value);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff fd71 	bl	8000c80 <decToBcd>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <DS3231_setYear+0x38>)
 80011a4:	71da      	strb	r2, [r3, #7]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2311      	movs	r3, #17
 80011ae:	4a04      	ldr	r2, [pc, #16]	; (80011c0 <DS3231_setYear+0x38>)
 80011b0:	21d0      	movs	r1, #208	; 0xd0
 80011b2:	4804      	ldr	r0, [pc, #16]	; (80011c4 <DS3231_setYear+0x3c>)
 80011b4:	f00a f843 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000294 	.word	0x20000294
 80011c4:	2000070c 	.word	0x2000070c

080011c8 <DS3231_setAlarm1Sec>:

void DS3231_setAlarm1Sec(uint8_t value) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80011d2:	f7ff fd90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[8] = decToBcd(value);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd51 	bl	8000c80 <decToBcd>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011e4:	721a      	strb	r2, [r3, #8]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	2311      	movs	r3, #17
 80011ee:	4a04      	ldr	r2, [pc, #16]	; (8001200 <DS3231_setAlarm1Sec+0x38>)
 80011f0:	21d0      	movs	r1, #208	; 0xd0
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <DS3231_setAlarm1Sec+0x3c>)
 80011f4:	f00a f823 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000294 	.word	0x20000294
 8001204:	2000070c 	.word	0x2000070c

08001208 <DS3231_setAlarm1Min>:

void DS3231_setAlarm1Min(uint8_t value) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af02      	add	r7, sp, #8
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001212:	f7ff fd70 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[9] = decToBcd(value);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fd31 	bl	8000c80 <decToBcd>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001224:	725a      	strb	r2, [r3, #9]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2311      	movs	r3, #17
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <DS3231_setAlarm1Min+0x38>)
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <DS3231_setAlarm1Min+0x3c>)
 8001234:	f00a f803 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000294 	.word	0x20000294
 8001244:	2000070c 	.word	0x2000070c

08001248 <DS3231_setAlarm1Hour>:

void DS3231_setAlarm1Hour(uint8_t value) {
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af02      	add	r7, sp, #8
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001252:	f7ff fd50 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[10] = decToBcd(value);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd11 	bl	8000c80 <decToBcd>
 800125e:	4603      	mov	r3, r0
 8001260:	461a      	mov	r2, r3
 8001262:	4b07      	ldr	r3, [pc, #28]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001264:	729a      	strb	r2, [r3, #10]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	9300      	str	r3, [sp, #0]
 800126c:	2311      	movs	r3, #17
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <DS3231_setAlarm1Hour+0x38>)
 8001270:	21d0      	movs	r1, #208	; 0xd0
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <DS3231_setAlarm1Hour+0x3c>)
 8001274:	f009 ffe3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000294 	.word	0x20000294
 8001284:	2000070c 	.word	0x2000070c

08001288 <DS3231_setAlarm1Day>:

void DS3231_setAlarm1Day(uint8_t value) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001292:	f7ff fd30 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[11] = decToBcd(value);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fcf1 	bl	8000c80 <decToBcd>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012a4:	72da      	strb	r2, [r3, #11]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2311      	movs	r3, #17
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <DS3231_setAlarm1Day+0x38>)
 80012b0:	21d0      	movs	r1, #208	; 0xd0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <DS3231_setAlarm1Day+0x3c>)
 80012b4:	f009 ffc3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000294 	.word	0x20000294
 80012c4:	2000070c 	.word	0x2000070c

080012c8 <DS3231_setAlarm1Date>:

void DS3231_setAlarm1Date(uint8_t value) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80012d2:	f7ff fd10 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[12] = decToBcd(value);
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fcd1 	bl	8000c80 <decToBcd>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b07      	ldr	r3, [pc, #28]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012e4:	731a      	strb	r2, [r3, #12]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2311      	movs	r3, #17
 80012ee:	4a04      	ldr	r2, [pc, #16]	; (8001300 <DS3231_setAlarm1Date+0x38>)
 80012f0:	21d0      	movs	r1, #208	; 0xd0
 80012f2:	4804      	ldr	r0, [pc, #16]	; (8001304 <DS3231_setAlarm1Date+0x3c>)
 80012f4:	f009 ffa3 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000294 	.word	0x20000294
 8001304:	2000070c 	.word	0x2000070c

08001308 <DS3231_setAlarm2Min>:

void DS3231_setAlarm2Min(uint8_t value) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af02      	add	r7, sp, #8
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001312:	f7ff fcf0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[13] = decToBcd(value);
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb1 	bl	8000c80 <decToBcd>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001324:	735a      	strb	r2, [r3, #13]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2311      	movs	r3, #17
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <DS3231_setAlarm2Min+0x38>)
 8001330:	21d0      	movs	r1, #208	; 0xd0
 8001332:	4804      	ldr	r0, [pc, #16]	; (8001344 <DS3231_setAlarm2Min+0x3c>)
 8001334:	f009 ff83 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000294 	.word	0x20000294
 8001344:	2000070c 	.word	0x2000070c

08001348 <DS3231_setAlarm2Hour>:

void DS3231_setAlarm2Hour(uint8_t value) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af02      	add	r7, sp, #8
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001352:	f7ff fcd0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[14] = decToBcd(value);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc91 	bl	8000c80 <decToBcd>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001364:	739a      	strb	r2, [r3, #14]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2311      	movs	r3, #17
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <DS3231_setAlarm2Hour+0x38>)
 8001370:	21d0      	movs	r1, #208	; 0xd0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <DS3231_setAlarm2Hour+0x3c>)
 8001374:	f009 ff63 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000294 	.word	0x20000294
 8001384:	2000070c 	.word	0x2000070c

08001388 <DS3231_setAlarm2Day>:

void DS3231_setAlarm2Day(uint8_t value) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	4603      	mov	r3, r0
 8001390:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 8001392:	f7ff fcb0 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[15] = decToBcd(value);
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fc71 	bl	8000c80 <decToBcd>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013a4:	73da      	strb	r2, [r3, #15]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2311      	movs	r3, #17
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <DS3231_setAlarm2Day+0x38>)
 80013b0:	21d0      	movs	r1, #208	; 0xd0
 80013b2:	4804      	ldr	r0, [pc, #16]	; (80013c4 <DS3231_setAlarm2Day+0x3c>)
 80013b4:	f009 ff43 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80013b8:	bf00      	nop
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000294 	.word	0x20000294
 80013c4:	2000070c 	.word	0x2000070c

080013c8 <DS3231_setAlarm2Date>:

void DS3231_setAlarm2Date(uint8_t value) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
    DS3231_Update();
 80013d2:	f7ff fc90 	bl	8000cf6 <DS3231_Update>
    rtcBufferSet[16] = decToBcd(value);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fc51 	bl	8000c80 <decToBcd>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013e4:	741a      	strb	r2, [r3, #16]
    HAL_I2C_Master_Transmit(&DS3231_I2C, DS3231_ADDRESS, rtcBufferSet, 17, DS3231_I2C_TIMEOUT);
 80013e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2311      	movs	r3, #17
 80013ee:	4a04      	ldr	r2, [pc, #16]	; (8001400 <DS3231_setAlarm2Date+0x38>)
 80013f0:	21d0      	movs	r1, #208	; 0xd0
 80013f2:	4804      	ldr	r0, [pc, #16]	; (8001404 <DS3231_setAlarm2Date+0x3c>)
 80013f4:	f009 ff23 	bl	800b23e <HAL_I2C_Master_Transmit>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	2000070c 	.word	0x2000070c

08001408 <DS3231_getUnix>:

uint64_t DS3231_getUnix(uint64_t zoneCorrection) {
 8001408:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800140c:	b088      	sub	sp, #32
 800140e:	af00      	add	r7, sp, #0
 8001410:	e9c7 0100 	strd	r0, r1, [r7]
    uint8_t timeYear = DS3231_getYear();
 8001414:	f7ff fd24 	bl	8000e60 <DS3231_getYear>
 8001418:	4603      	mov	r3, r0
 800141a:	773b      	strb	r3, [r7, #28]
    uint8_t timeMonth = DS3231_getMonth();
 800141c:	f7ff fd12 	bl	8000e44 <DS3231_getMonth>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
    uint8_t timeDate = DS3231_getDate();
 8001424:	f7ff fd00 	bl	8000e28 <DS3231_getDate>
 8001428:	4603      	mov	r3, r0
 800142a:	76bb      	strb	r3, [r7, #26]
    uint8_t timeHour = DS3231_getHrs();
 800142c:	f7ff fce0 	bl	8000df0 <DS3231_getHrs>
 8001430:	4603      	mov	r3, r0
 8001432:	767b      	strb	r3, [r7, #25]
    uint8_t timeMin = DS3231_getMin();
 8001434:	f7ff fcce 	bl	8000dd4 <DS3231_getMin>
 8001438:	4603      	mov	r3, r0
 800143a:	763b      	strb	r3, [r7, #24]
    uint8_t timeSec = DS3231_getSec();
 800143c:	f7ff fcbc 	bl	8000db8 <DS3231_getSec>
 8001440:	4603      	mov	r3, r0
 8001442:	75fb      	strb	r3, [r7, #23]

    const uint8_t dim[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8001444:	4a35      	ldr	r2, [pc, #212]	; (800151c <DS3231_getUnix+0x114>)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	ca07      	ldmia	r2, {r0, r1, r2}
 800144c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t dc;
    dc = timeDate;
 8001450:	7ebb      	ldrb	r3, [r7, #26]
 8001452:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 8001454:	2300      	movs	r3, #0
 8001456:	777b      	strb	r3, [r7, #29]
 8001458:	e00b      	b.n	8001472 <DS3231_getUnix+0x6a>
        dc += dim[i];
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	3320      	adds	r3, #32
 800145e:	443b      	add	r3, r7
 8001460:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001464:	b29a      	uxth	r2, r3
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	4413      	add	r3, r2
 800146a:	83fb      	strh	r3, [r7, #30]
    for (uint8_t i = 0; i < (timeMonth - 1); i++)
 800146c:	7f7b      	ldrb	r3, [r7, #29]
 800146e:	3301      	adds	r3, #1
 8001470:	777b      	strb	r3, [r7, #29]
 8001472:	7f7a      	ldrb	r2, [r7, #29]
 8001474:	7efb      	ldrb	r3, [r7, #27]
 8001476:	3b01      	subs	r3, #1
 8001478:	429a      	cmp	r2, r3
 800147a:	dbee      	blt.n	800145a <DS3231_getUnix+0x52>
    if ((timeMonth > 2) && (((timeYear) % 4) == 0))
 800147c:	7efb      	ldrb	r3, [r7, #27]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d908      	bls.n	8001494 <DS3231_getUnix+0x8c>
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <DS3231_getUnix+0x8c>
        ++dc;
 800148e:	8bfb      	ldrh	r3, [r7, #30]
 8001490:	3301      	adds	r3, #1
 8001492:	83fb      	strh	r3, [r7, #30]
    dc = dc + (365 * (timeYear)) + (((timeYear) + 3) / 4) - 1;
 8001494:	7f3b      	ldrb	r3, [r7, #28]
 8001496:	b29b      	uxth	r3, r3
 8001498:	461a      	mov	r2, r3
 800149a:	00d2      	lsls	r2, r2, #3
 800149c:	441a      	add	r2, r3
 800149e:	00d2      	lsls	r2, r2, #3
 80014a0:	4413      	add	r3, r2
 80014a2:	461a      	mov	r2, r3
 80014a4:	0091      	lsls	r1, r2, #2
 80014a6:	461a      	mov	r2, r3
 80014a8:	460b      	mov	r3, r1
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	8bfb      	ldrh	r3, [r7, #30]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	7f3b      	ldrb	r3, [r7, #28]
 80014b6:	3303      	adds	r3, #3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da00      	bge.n	80014be <DS3231_getUnix+0xb6>
 80014bc:	3303      	adds	r3, #3
 80014be:	109b      	asrs	r3, r3, #2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b01      	subs	r3, #1
 80014c8:	83fb      	strh	r3, [r7, #30]
    return ((((((dc * 24L) + timeHour) * 60) + timeMin) * 60) + timeSec) + 946684800 + zoneCorrection;
 80014ca:	8bfa      	ldrh	r2, [r7, #30]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	461a      	mov	r2, r3
 80014d6:	7e7b      	ldrb	r3, [r7, #25]
 80014d8:	441a      	add	r2, r3
 80014da:	4613      	mov	r3, r2
 80014dc:	011b      	lsls	r3, r3, #4
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	461a      	mov	r2, r3
 80014e4:	7e3b      	ldrb	r3, [r7, #24]
 80014e6:	441a      	add	r2, r3
 80014e8:	4613      	mov	r3, r2
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	1a9b      	subs	r3, r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	461a      	mov	r2, r3
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	441a      	add	r2, r3
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <DS3231_getUnix+0x118>)
 80014f8:	4413      	add	r3, r2
 80014fa:	17da      	asrs	r2, r3, #31
 80014fc:	461c      	mov	r4, r3
 80014fe:	4615      	mov	r5, r2
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	eb14 0802 	adds.w	r8, r4, r2
 8001508:	eb45 0903 	adc.w	r9, r5, r3
 800150c:	4642      	mov	r2, r8
 800150e:	464b      	mov	r3, r9
}
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151c:	08051d2c 	.word	0x08051d2c
 8001520:	386d4380 	.word	0x386d4380

08001524 <normalize>:

double normalize(double v) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	ed87 0b00 	vstr	d0, [r7]
    v = v - floor(v);
 800152e:	ed97 0b00 	vldr	d0, [r7]
 8001532:	f01c fd55 	bl	801dfe0 <floor>
 8001536:	ec53 2b10 	vmov	r2, r3, d0
 800153a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800153e:	f017 f9ab 	bl	8018898 <__aeabi_dsub>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	e9c7 2300 	strd	r2, r3, [r7]
    if (v < 0)
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	f04f 0300 	mov.w	r3, #0
 8001552:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001556:	f017 fdc9 	bl	80190ec <__aeabi_dcmplt>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00a      	beq.n	8001576 <normalize+0x52>
        v = v + 1;
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <normalize+0x68>)
 8001566:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156a:	f017 f997 	bl	801889c <__adddf3>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
    return v;
 8001576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800157a:	ec43 2b17 	vmov	d7, r2, r3
}
 800157e:	eeb0 0a47 	vmov.f32	s0, s14
 8001582:	eef0 0a67 	vmov.f32	s1, s15
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	3ff00000 	.word	0x3ff00000

08001590 <DS3231_getMoonDay>:

float DS3231_getMoonDay(void) {
 8001590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001594:	b0a0      	sub	sp, #128	; 0x80
 8001596:	af00      	add	r7, sp, #0
    uint16_t Y = DS3231_getYear() + 2000;
 8001598:	f7ff fc62 	bl	8000e60 <DS3231_getYear>
 800159c:	4603      	mov	r3, r0
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80015a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
    uint8_t M = DS3231_getMonth();
 80015a8:	f7ff fc4c 	bl	8000e44 <DS3231_getMonth>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
    uint8_t D = DS3231_getDate();
 80015b2:	f7ff fc39 	bl	8000e28 <DS3231_getDate>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
    float moonDay;
    double I;
    uint64_t YY, MM, K1, K2, K3, JD;
    YY = Y - floor((12 - M) / 10);
 80015bc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80015c0:	4618      	mov	r0, r3
 80015c2:	f017 fab7 	bl	8018b34 <__aeabi_i2d>
 80015c6:	4604      	mov	r4, r0
 80015c8:	460d      	mov	r5, r1
 80015ca:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80015ce:	f1c3 010c 	rsb	r1, r3, #12
 80015d2:	4b99      	ldr	r3, [pc, #612]	; (8001838 <DS3231_getMoonDay+0x2a8>)
 80015d4:	fb83 2301 	smull	r2, r3, r3, r1
 80015d8:	109a      	asrs	r2, r3, #2
 80015da:	17cb      	asrs	r3, r1, #31
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f017 faa8 	bl	8018b34 <__aeabi_i2d>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f017 f954 	bl	8018898 <__aeabi_dsub>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f017 fe66 	bl	80192c8 <__aeabi_d2ulz>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
    MM = M + 9;
 8001604:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001608:	3309      	adds	r3, #9
 800160a:	17da      	asrs	r2, r3, #31
 800160c:	61bb      	str	r3, [r7, #24]
 800160e:	61fa      	str	r2, [r7, #28]
 8001610:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001614:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    if (MM >= 12) {
 8001618:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800161c:	2a0c      	cmp	r2, #12
 800161e:	f173 0300 	sbcs.w	r3, r3, #0
 8001622:	d30b      	bcc.n	800163c <DS3231_getMoonDay+0xac>
        MM = MM - 12;
 8001624:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8001628:	f1b2 010c 	subs.w	r1, r2, #12
 800162c:	6139      	str	r1, [r7, #16]
 800162e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001638:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    }
    K1 = floor(365.25 * (YY + 4712));
 800163c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001640:	f241 2168 	movw	r1, #4712	; 0x1268
 8001644:	1851      	adds	r1, r2, r1
 8001646:	6339      	str	r1, [r7, #48]	; 0x30
 8001648:	f143 0300 	adc.w	r3, r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
 800164e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001652:	f017 faa3 	bl	8018b9c <__aeabi_ul2d>
 8001656:	a36e      	add	r3, pc, #440	; (adr r3, 8001810 <DS3231_getMoonDay+0x280>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f017 fad4 	bl	8018c08 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	ec43 2b17 	vmov	d7, r2, r3
 8001668:	eeb0 0a47 	vmov.f32	s0, s14
 800166c:	eef0 0a67 	vmov.f32	s1, s15
 8001670:	f01c fcb6 	bl	801dfe0 <floor>
 8001674:	ec53 2b10 	vmov	r2, r3, d0
 8001678:	4610      	mov	r0, r2
 800167a:	4619      	mov	r1, r3
 800167c:	f017 fe24 	bl	80192c8 <__aeabi_d2ulz>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
    K2 = floor(30.6 * MM + 0.5);
 8001688:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800168c:	f017 fa86 	bl	8018b9c <__aeabi_ul2d>
 8001690:	a361      	add	r3, pc, #388	; (adr r3, 8001818 <DS3231_getMoonDay+0x288>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f017 fab7 	bl	8018c08 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <DS3231_getMoonDay+0x2ac>)
 80016a8:	f017 f8f8 	bl	801889c <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	ec43 2b17 	vmov	d7, r2, r3
 80016b4:	eeb0 0a47 	vmov.f32	s0, s14
 80016b8:	eef0 0a67 	vmov.f32	s1, s15
 80016bc:	f01c fc90 	bl	801dfe0 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f017 fdfe 	bl	80192c8 <__aeabi_d2ulz>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    K3 = floor(floor((YY / 100) + 49) * 0.75) - 38;
 80016d4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80016d8:	f04f 0264 	mov.w	r2, #100	; 0x64
 80016dc:	f04f 0300 	mov.w	r3, #0
 80016e0:	f017 fe10 	bl	8019304 <__aeabi_uldivmod>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	f112 0131 	adds.w	r1, r2, #49	; 0x31
 80016ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80016ee:	f143 0300 	adc.w	r3, r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016f8:	f017 fa50 	bl	8018b9c <__aeabi_ul2d>
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b4f      	ldr	r3, [pc, #316]	; (8001840 <DS3231_getMoonDay+0x2b0>)
 8001702:	f017 fa81 	bl	8018c08 <__aeabi_dmul>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	ec43 2b17 	vmov	d7, r2, r3
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	f01c fc63 	bl	801dfe0 <floor>
 800171a:	ec51 0b10 	vmov	r0, r1, d0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	4b48      	ldr	r3, [pc, #288]	; (8001844 <DS3231_getMoonDay+0x2b4>)
 8001724:	f017 f8b8 	bl	8018898 <__aeabi_dsub>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	f017 fdca 	bl	80192c8 <__aeabi_d2ulz>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    JD = K1 + K2 + D + 59;
 800173c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001744:	eb10 0a02 	adds.w	sl, r0, r2
 8001748:	eb41 0b03 	adc.w	fp, r1, r3
 800174c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8001750:	2200      	movs	r2, #0
 8001752:	623b      	str	r3, [r7, #32]
 8001754:	627a      	str	r2, [r7, #36]	; 0x24
 8001756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800175a:	460b      	mov	r3, r1
 800175c:	eb1a 0803 	adds.w	r8, sl, r3
 8001760:	4613      	mov	r3, r2
 8001762:	eb4b 0903 	adc.w	r9, fp, r3
 8001766:	f118 033b 	adds.w	r3, r8, #59	; 0x3b
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	f149 0300 	adc.w	r3, r9, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001776:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    if (JD > 2299160) {
 800177a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800177e:	4932      	ldr	r1, [pc, #200]	; (8001848 <DS3231_getMoonDay+0x2b8>)
 8001780:	428a      	cmp	r2, r1
 8001782:	f173 0300 	sbcs.w	r3, r3, #0
 8001786:	d30c      	bcc.n	80017a2 <DS3231_getMoonDay+0x212>
        JD = JD - K3;
 8001788:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800178c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001790:	1a84      	subs	r4, r0, r2
 8001792:	603c      	str	r4, [r7, #0]
 8001794:	eb61 0303 	sbc.w	r3, r1, r3
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800179e:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    }
    I = normalize((JD - 2451550.1) / 29.530588853);
 80017a2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017a6:	f017 f9f9 	bl	8018b9c <__aeabi_ul2d>
 80017aa:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <DS3231_getMoonDay+0x290>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	f017 f872 	bl	8018898 <__aeabi_dsub>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4610      	mov	r0, r2
 80017ba:	4619      	mov	r1, r3
 80017bc:	a31a      	add	r3, pc, #104	; (adr r3, 8001828 <DS3231_getMoonDay+0x298>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f017 fb4b 	bl	8018e5c <__aeabi_ddiv>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	ec43 2b17 	vmov	d7, r2, r3
 80017ce:	eeb0 0a47 	vmov.f32	s0, s14
 80017d2:	eef0 0a67 	vmov.f32	s1, s15
 80017d6:	f7ff fea5 	bl	8001524 <normalize>
 80017da:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    moonDay = I * 29.53;
 80017de:	a314      	add	r3, pc, #80	; (adr r3, 8001830 <DS3231_getMoonDay+0x2a0>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80017e8:	f017 fa0e 	bl	8018c08 <__aeabi_dmul>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4610      	mov	r0, r2
 80017f2:	4619      	mov	r1, r3
 80017f4:	f017 fd00 	bl	80191f8 <__aeabi_d2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    return moonDay;
 80017fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017fe:	ee07 3a90 	vmov	s15, r3
}
 8001802:	eeb0 0a67 	vmov.f32	s0, s15
 8001806:	3780      	adds	r7, #128	; 0x80
 8001808:	46bd      	mov	sp, r7
 800180a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180e:	bf00      	nop
 8001810:	00000000 	.word	0x00000000
 8001814:	4076d400 	.word	0x4076d400
 8001818:	9999999a 	.word	0x9999999a
 800181c:	403e9999 	.word	0x403e9999
 8001820:	0ccccccd 	.word	0x0ccccccd
 8001824:	4142b42f 	.word	0x4142b42f
 8001828:	abcb41d5 	.word	0xabcb41d5
 800182c:	403d87d4 	.word	0x403d87d4
 8001830:	147ae148 	.word	0x147ae148
 8001834:	403d87ae 	.word	0x403d87ae
 8001838:	66666667 	.word	0x66666667
 800183c:	3fe00000 	.word	0x3fe00000
 8001840:	3fe80000 	.word	0x3fe80000
 8001844:	40430000 	.word	0x40430000
 8001848:	00231519 	.word	0x00231519

0800184c <SPI1_Send>:
char str1[30];
uint8_t rx_buf[1025];
uint8_t tx_buf[10];

void SPI1_Send (uint8_t *dt, uint16_t cnt)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit (&FLASH25Q_SPI, dt, cnt, 5000);
 8001858:	887a      	ldrh	r2, [r7, #2]
 800185a:	f241 3388 	movw	r3, #5000	; 0x1388
 800185e:	6879      	ldr	r1, [r7, #4]
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <SPI1_Send+0x24>)
 8001862:	f011 f898 	bl	8012996 <HAL_SPI_Transmit>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000760 	.word	0x20000760

08001874 <SPI1_Recv>:

void SPI1_Recv (uint8_t *dt, uint16_t cnt)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	460b      	mov	r3, r1
 800187e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive (&FLASH25Q_SPI, dt, cnt, 5000);
 8001880:	887a      	ldrh	r2, [r7, #2]
 8001882:	f241 3388 	movw	r3, #5000	; 0x1388
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	4803      	ldr	r0, [pc, #12]	; (8001898 <SPI1_Recv+0x24>)
 800188a:	f011 f9c0 	bl	8012c0e <HAL_SPI_Receive>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000760 	.word	0x20000760

0800189c <W25_Reset>:

void W25_Reset (void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	cs_set();
 80018a0:	2200      	movs	r2, #0
 80018a2:	2101      	movs	r1, #1
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <W25_Reset+0x30>)
 80018a6:	f009 fad9 	bl	800ae5c <HAL_GPIO_WritePin>
	tx_buf[0] = W25_ENABLE_RESET;
 80018aa:	4b09      	ldr	r3, [pc, #36]	; (80018d0 <W25_Reset+0x34>)
 80018ac:	2266      	movs	r2, #102	; 0x66
 80018ae:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = W25_RESET;
 80018b0:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <W25_Reset+0x34>)
 80018b2:	2299      	movs	r2, #153	; 0x99
 80018b4:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 80018b6:	2102      	movs	r1, #2
 80018b8:	4805      	ldr	r0, [pc, #20]	; (80018d0 <W25_Reset+0x34>)
 80018ba:	f7ff ffc7 	bl	800184c <SPI1_Send>
	cs_reset();
 80018be:	2201      	movs	r2, #1
 80018c0:	2101      	movs	r1, #1
 80018c2:	4802      	ldr	r0, [pc, #8]	; (80018cc <W25_Reset+0x30>)
 80018c4:	f009 faca 	bl	800ae5c <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40020400 	.word	0x40020400
 80018d0:	200006ec 	.word	0x200006ec

080018d4 <W25_Read_Data>:

void W25_Read_Data(uint32_t addr, uint8_t* data, uint32_t sz)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
	cs_set();
 80018e0:	2200      	movs	r2, #0
 80018e2:	2101      	movs	r1, #1
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <W25_Read_Data+0x60>)
 80018e6:	f009 fab9 	bl	800ae5c <HAL_GPIO_WritePin>
	tx_buf[0] = W25_READ;
 80018ea:	4b13      	ldr	r3, [pc, #76]	; (8001938 <W25_Read_Data+0x64>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = (addr >> 16) & 0xFF;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	0c1b      	lsrs	r3, r3, #16
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <W25_Read_Data+0x64>)
 80018f8:	705a      	strb	r2, [r3, #1]
	tx_buf[2] = (addr >> 8) & 0xFF;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	0a1b      	lsrs	r3, r3, #8
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <W25_Read_Data+0x64>)
 8001902:	709a      	strb	r2, [r3, #2]
	tx_buf[3] = addr & 0xFF;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <W25_Read_Data+0x64>)
 800190a:	70da      	strb	r2, [r3, #3]
	SPI1_Send(tx_buf, 4);
 800190c:	2104      	movs	r1, #4
 800190e:	480a      	ldr	r0, [pc, #40]	; (8001938 <W25_Read_Data+0x64>)
 8001910:	f7ff ff9c 	bl	800184c <SPI1_Send>
	SPI1_Recv(data, sz);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff ffaa 	bl	8001874 <SPI1_Recv>
	cs_reset();
 8001920:	2201      	movs	r2, #1
 8001922:	2101      	movs	r1, #1
 8001924:	4803      	ldr	r0, [pc, #12]	; (8001934 <W25_Read_Data+0x60>)
 8001926:	f009 fa99 	bl	800ae5c <HAL_GPIO_WritePin>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40020400 	.word	0x40020400
 8001938:	200006ec 	.word	0x200006ec

0800193c <W25_Read_ID>:

uint32_t W25_Read_ID(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = W25_GET_JEDEC_ID;
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <W25_Read_ID+0x4c>)
 8001944:	229f      	movs	r2, #159	; 0x9f
 8001946:	701a      	strb	r2, [r3, #0]
	cs_set();
 8001948:	2200      	movs	r2, #0
 800194a:	2101      	movs	r1, #1
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <W25_Read_ID+0x50>)
 800194e:	f009 fa85 	bl	800ae5c <HAL_GPIO_WritePin>
	SPI1_Send(tx_buf, 1);
 8001952:	2101      	movs	r1, #1
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <W25_Read_ID+0x4c>)
 8001956:	f7ff ff79 	bl	800184c <SPI1_Send>
	SPI1_Recv(dt,3);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2103      	movs	r1, #3
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff88 	bl	8001874 <SPI1_Recv>
	cs_reset();
 8001964:	2201      	movs	r2, #1
 8001966:	2101      	movs	r1, #1
 8001968:	4808      	ldr	r0, [pc, #32]	; (800198c <W25_Read_ID+0x50>)
 800196a:	f009 fa77 	bl	800ae5c <HAL_GPIO_WritePin>
	return (dt[0] << 16) | (dt[1] << 8) | dt[2];
 800196e:	793b      	ldrb	r3, [r7, #4]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	797b      	ldrb	r3, [r7, #5]
 8001974:	021b      	lsls	r3, r3, #8
 8001976:	4313      	orrs	r3, r2
 8001978:	79ba      	ldrb	r2, [r7, #6]
 800197a:	4313      	orrs	r3, r2
 800197c:	bf00      	nop
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200006ec 	.word	0x200006ec
 800198c:	40020400 	.word	0x40020400

08001990 <W25_Init>:

void W25_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
//	HAL_Delay(100);
	W25_Reset();
 8001996:	f7ff ff81 	bl	800189c <W25_Reset>
	HAL_Delay(100);
 800199a:	2064      	movs	r0, #100	; 0x64
 800199c:	f004 fe92 	bl	80066c4 <HAL_Delay>
	unsigned int id = W25_Read_ID();
 80019a0:	f7ff ffcc 	bl	800193c <W25_Read_ID>
 80019a4:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
	sprintf(str1,"ID:0x%X\r\n",id);
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	493f      	ldr	r1, [pc, #252]	; (8001aa8 <W25_Init+0x118>)
 80019aa:	4840      	ldr	r0, [pc, #256]	; (8001aac <W25_Init+0x11c>)
 80019ac:	f018 fd0c 	bl	801a3c8 <siprintf>
//	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
	id &= 0x0000ffff;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	607b      	str	r3, [r7, #4]
	switch(id)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80019bc:	3b11      	subs	r3, #17
 80019be:	2b09      	cmp	r3, #9
 80019c0:	d869      	bhi.n	8001a96 <W25_Init+0x106>
 80019c2:	a201      	add	r2, pc, #4	; (adr r2, 80019c8 <W25_Init+0x38>)
 80019c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c8:	08001a87 	.word	0x08001a87
 80019cc:	08001a77 	.word	0x08001a77
 80019d0:	08001a67 	.word	0x08001a67
 80019d4:	08001a57 	.word	0x08001a57
 80019d8:	08001a47 	.word	0x08001a47
 80019dc:	08001a37 	.word	0x08001a37
 80019e0:	08001a27 	.word	0x08001a27
 80019e4:	08001a15 	.word	0x08001a15
 80019e8:	08001a03 	.word	0x08001a03
 80019ec:	080019f1 	.word	0x080019f1
	{
	case 0x401A:
		w25_info.BlockCount=1024;
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <W25_Init+0x120>)
 80019f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f6:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q512\r\n");
 80019f8:	492e      	ldr	r1, [pc, #184]	; (8001ab4 <W25_Init+0x124>)
 80019fa:	482c      	ldr	r0, [pc, #176]	; (8001aac <W25_Init+0x11c>)
 80019fc:	f018 fce4 	bl	801a3c8 <siprintf>
		break;
 8001a00:	e04e      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4019:
		w25_info.BlockCount=512;
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <W25_Init+0x120>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q256\r\n");
 8001a0a:	492b      	ldr	r1, [pc, #172]	; (8001ab8 <W25_Init+0x128>)
 8001a0c:	4827      	ldr	r0, [pc, #156]	; (8001aac <W25_Init+0x11c>)
 8001a0e:	f018 fcdb 	bl	801a3c8 <siprintf>
		break;
 8001a12:	e045      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4018:
		w25_info.BlockCount=256;
 8001a14:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <W25_Init+0x120>)
 8001a16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a1a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q128\r\n");
 8001a1c:	4927      	ldr	r1, [pc, #156]	; (8001abc <W25_Init+0x12c>)
 8001a1e:	4823      	ldr	r0, [pc, #140]	; (8001aac <W25_Init+0x11c>)
 8001a20:	f018 fcd2 	bl	801a3c8 <siprintf>
		break;
 8001a24:	e03c      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4017:
		w25_info.BlockCount=128;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <W25_Init+0x120>)
 8001a28:	2280      	movs	r2, #128	; 0x80
 8001a2a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q64\r\n");
 8001a2c:	4924      	ldr	r1, [pc, #144]	; (8001ac0 <W25_Init+0x130>)
 8001a2e:	481f      	ldr	r0, [pc, #124]	; (8001aac <W25_Init+0x11c>)
 8001a30:	f018 fcca 	bl	801a3c8 <siprintf>
		break;
 8001a34:	e034      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4016:
		w25_info.BlockCount=64;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <W25_Init+0x120>)
 8001a38:	2240      	movs	r2, #64	; 0x40
 8001a3a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q32\r\n");
 8001a3c:	4921      	ldr	r1, [pc, #132]	; (8001ac4 <W25_Init+0x134>)
 8001a3e:	481b      	ldr	r0, [pc, #108]	; (8001aac <W25_Init+0x11c>)
 8001a40:	f018 fcc2 	bl	801a3c8 <siprintf>
		break;
 8001a44:	e02c      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4015:
		w25_info.BlockCount=32;
 8001a46:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <W25_Init+0x120>)
 8001a48:	2220      	movs	r2, #32
 8001a4a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q16\r\n");
 8001a4c:	491e      	ldr	r1, [pc, #120]	; (8001ac8 <W25_Init+0x138>)
 8001a4e:	4817      	ldr	r0, [pc, #92]	; (8001aac <W25_Init+0x11c>)
 8001a50:	f018 fcba 	bl	801a3c8 <siprintf>
		break;
 8001a54:	e024      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4014:
		w25_info.BlockCount=16;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <W25_Init+0x120>)
 8001a58:	2210      	movs	r2, #16
 8001a5a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q80\r\n");
 8001a5c:	491b      	ldr	r1, [pc, #108]	; (8001acc <W25_Init+0x13c>)
 8001a5e:	4813      	ldr	r0, [pc, #76]	; (8001aac <W25_Init+0x11c>)
 8001a60:	f018 fcb2 	bl	801a3c8 <siprintf>
		break;
 8001a64:	e01c      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4013:
		w25_info.BlockCount=8;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <W25_Init+0x120>)
 8001a68:	2208      	movs	r2, #8
 8001a6a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q40\r\n");
 8001a6c:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <W25_Init+0x140>)
 8001a6e:	480f      	ldr	r0, [pc, #60]	; (8001aac <W25_Init+0x11c>)
 8001a70:	f018 fcaa 	bl	801a3c8 <siprintf>
		break;
 8001a74:	e014      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4012:
		w25_info.BlockCount=4;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <W25_Init+0x120>)
 8001a78:	2204      	movs	r2, #4
 8001a7a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q20\r\n");
 8001a7c:	4915      	ldr	r1, [pc, #84]	; (8001ad4 <W25_Init+0x144>)
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <W25_Init+0x11c>)
 8001a80:	f018 fca2 	bl	801a3c8 <siprintf>
		break;
 8001a84:	e00c      	b.n	8001aa0 <W25_Init+0x110>
	case 0x4011:
		w25_info.BlockCount=2;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <W25_Init+0x120>)
 8001a88:	2202      	movs	r2, #2
 8001a8a:	615a      	str	r2, [r3, #20]
		sprintf(str1,"w25qxx Chip: w25q10\r\n");
 8001a8c:	4912      	ldr	r1, [pc, #72]	; (8001ad8 <W25_Init+0x148>)
 8001a8e:	4807      	ldr	r0, [pc, #28]	; (8001aac <W25_Init+0x11c>)
 8001a90:	f018 fc9a 	bl	801a3c8 <siprintf>
		break;
 8001a94:	e004      	b.n	8001aa0 <W25_Init+0x110>
	default:
		sprintf(str1,"w25qxx Unknown ID\r\n");
 8001a96:	4911      	ldr	r1, [pc, #68]	; (8001adc <W25_Init+0x14c>)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <W25_Init+0x11c>)
 8001a9a:	f018 fc95 	bl	801a3c8 <siprintf>
//		HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
		return;
 8001a9e:	bf00      	nop
//	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
//	sprintf(str1,"Block Count: %u\r\n",(unsigned int)w25_info.BlockCount);
//	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
//	sprintf(str1,"Capacity: %u KB\r\n",(unsigned int)w25_info.NumKB);
//	HAL_UART_Transmit(&huart1,(uint8_t*)str1,strlen(str1),0x1000);
}
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	08051d3c 	.word	0x08051d3c
 8001aac:	200002c8 	.word	0x200002c8
 8001ab0:	200002a8 	.word	0x200002a8
 8001ab4:	08051d48 	.word	0x08051d48
 8001ab8:	08051d60 	.word	0x08051d60
 8001abc:	08051d78 	.word	0x08051d78
 8001ac0:	08051d90 	.word	0x08051d90
 8001ac4:	08051da8 	.word	0x08051da8
 8001ac8:	08051dc0 	.word	0x08051dc0
 8001acc:	08051dd8 	.word	0x08051dd8
 8001ad0:	08051df0 	.word	0x08051df0
 8001ad4:	08051e08 	.word	0x08051e08
 8001ad8:	08051e20 	.word	0x08051e20
 8001adc:	08051e38 	.word	0x08051e38

08001ae0 <map>:
#define WAIT_REMOTE_SENSOR_SEC 100
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
double map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min, uint16_t out_max) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	4608      	mov	r0, r1
 8001aea:	4611      	mov	r1, r2
 8001aec:	461a      	mov	r2, r3
 8001aee:	4623      	mov	r3, r4
 8001af0:	80fb      	strh	r3, [r7, #6]
 8001af2:	4603      	mov	r3, r0
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	807b      	strh	r3, [r7, #2]
 8001afa:	4613      	mov	r3, r2
 8001afc:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	88bb      	ldrh	r3, [r7, #4]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	8b39      	ldrh	r1, [r7, #24]
 8001b06:	883a      	ldrh	r2, [r7, #0]
 8001b08:	1a8a      	subs	r2, r1, r2
 8001b0a:	fb03 f202 	mul.w	r2, r3, r2
 8001b0e:	8879      	ldrh	r1, [r7, #2]
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	1acb      	subs	r3, r1, r3
 8001b14:	fb92 f2f3 	sdiv	r2, r2, r3
 8001b18:	883b      	ldrh	r3, [r7, #0]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f017 f809 	bl	8018b34 <__aeabi_i2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	ec43 2b17 	vmov	d7, r2, r3
}
 8001b2a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b2e:	eef0 0a67 	vmov.f32	s1, s15
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd90      	pop	{r4, r7, pc}

08001b38 <byteL>:

uint8_t byteL(uint16_t val) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
	return (val & 0xFF);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	b2db      	uxtb	r3, r3
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <byteH>:

uint8_t byteH(uint16_t val) {
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	80fb      	strh	r3, [r7, #6]
	return ((val >> 8) & 0xFF);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <byteS>:

uint16_t byteS(uint8_t byteL, uint8_t byteH) {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	71fb      	strb	r3, [r7, #7]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	71bb      	strb	r3, [r7, #6]
	return (byteH << 8) | byteL;
 8001b80:	79bb      	ldrb	r3, [r7, #6]
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	b21b      	sxth	r3, r3
 8001b8e:	b29b      	uxth	r3, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_UART_RxCpltCallback>:

uint8_t rx_buffer[UART_RX_BUFFER_SIZE];
uint8_t rx_index = 0;
uint8_t rx_data;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a0b      	ldr	r2, [pc, #44]	; (8001bd8 <HAL_UART_RxCpltCallback+0x3c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10f      	bne.n	8001bce <HAL_UART_RxCpltCallback+0x32>
		rx_buffer[rx_index++] = rx_data;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <HAL_UART_RxCpltCallback+0x40>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	b2d1      	uxtb	r1, r2
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <HAL_UART_RxCpltCallback+0x40>)
 8001bb8:	7011      	strb	r1, [r2, #0]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <HAL_UART_RxCpltCallback+0x44>)
 8001bbe:	7819      	ldrb	r1, [r3, #0]
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <HAL_UART_RxCpltCallback+0x48>)
 8001bc2:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4906      	ldr	r1, [pc, #24]	; (8001be0 <HAL_UART_RxCpltCallback+0x44>)
 8001bc8:	4807      	ldr	r0, [pc, #28]	; (8001be8 <HAL_UART_RxCpltCallback+0x4c>)
 8001bca:	f013 feb9 	bl	8015940 <HAL_UART_Receive_IT>
//		HAL_UART_Receive_DMA(&huart1, &rx_data, 1);
	}
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40011000 	.word	0x40011000
 8001bdc:	20000dc4 	.word	0x20000dc4
 8001be0:	20000dc5 	.word	0x20000dc5
 8001be4:	20000db4 	.word	0x20000db4
 8001be8:	20000928 	.word	0x20000928

08001bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b0b1      	sub	sp, #196	; 0xc4
 8001bf0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf2:	f004 fc81 	bl	80064f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f001 ff2f 	bl	8003a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bfa:	f002 f8ed 	bl	8003dd8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001bfe:	f002 f9c5 	bl	8003f8c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001c02:	f001 ffc7 	bl	8003b94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c06:	f002 f895 	bl	8003d34 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8001c0a:	f002 f85d 	bl	8003cc8 <MX_SPI3_Init>
  MX_SPI2_Init();
 8001c0e:	f002 f825 	bl	8003c5c <MX_SPI2_Init>
  MX_DMA_Init();
 8001c12:	f002 f8b9 	bl	8003d88 <MX_DMA_Init>
  MX_DAC_Init();
 8001c16:	f001 ff89 	bl	8003b2c <MX_DAC_Init>
  MX_SPI1_Init();
 8001c1a:	f001 ffe9 	bl	8003bf0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	LCD_Init();
 8001c1e:	f003 fcd1 	bl	80055c4 <LCD_Init>
	XPT2046_Init();
 8001c22:	f004 fb73 	bl	800630c <XPT2046_Init>
	BME280_Init();
 8001c26:	f7fe fdd9 	bl	80007dc <BME280_Init>

//	temperature = BME280_getTemperature(-1);
//	humidity = BME280_getHumidity(-1);
//	pressure = (uint16_t)BME280_getPressure();

	LCD_Rect_Fill(0, 0, 800, 480, BLUE);
 8001c2a:	23ff      	movs	r3, #255	; 0xff
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001c32:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001c36:	2100      	movs	r1, #0
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f002 faef 	bl	800421c <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 798, 478, BLACK);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f44f 73ef 	mov.w	r3, #478	; 0x1de
 8001c46:	f240 321e 	movw	r2, #798	; 0x31e
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f002 fae5 	bl	800421c <LCD_Rect_Fill>

	for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8001c58:	e027      	b.n	8001caa <main+0xbe>
 8001c5a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001c5e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fb11 	bl	8000290 <AT24XX_Read>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	461c      	mov	r4, r3
 8001c72:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fb05 	bl	8000290 <AT24XX_Read>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	f7ff ff70 	bl	8001b70 <byteS>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001c98:	b211      	sxth	r1, r2
 8001c9a:	4a87      	ldr	r2, [pc, #540]	; (8001eb8 <main+0x2cc>)
 8001c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001ca0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8001caa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8001cae:	2b9a      	cmp	r3, #154	; 0x9a
 8001cb0:	d9d3      	bls.n	8001c5a <main+0x6e>
	for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8001cb8:	e027      	b.n	8001d0a <main+0x11e>
 8001cba:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001cbe:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fae1 	bl	8000290 <AT24XX_Read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461c      	mov	r4, r3
 8001cd2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fad5 	bl	8000290 <AT24XX_Read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7ff ff40 	bl	8001b70 <byteS>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001cf8:	b211      	sxth	r1, r2
 8001cfa:	4a70      	ldr	r2, [pc, #448]	; (8001ebc <main+0x2d0>)
 8001cfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d00:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001d04:	3301      	adds	r3, #1
 8001d06:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8001d0a:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8001d0e:	2b9a      	cmp	r3, #154	; 0x9a
 8001d10:	d9d3      	bls.n	8001cba <main+0xce>
	for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8001d12:	2300      	movs	r3, #0
 8001d14:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8001d18:	e027      	b.n	8001d6a <main+0x17e>
 8001d1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001d1e:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fab1 	bl	8000290 <AT24XX_Read>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
 8001d32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe faa5 	bl	8000290 <AT24XX_Read>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	f7ff ff10 	bl	8001b70 <byteS>
 8001d50:	4603      	mov	r3, r0
 8001d52:	461a      	mov	r2, r3
 8001d54:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001d58:	b211      	sxth	r1, r2
 8001d5a:	4a59      	ldr	r2, [pc, #356]	; (8001ec0 <main+0x2d4>)
 8001d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001d60:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001d64:	3301      	adds	r3, #1
 8001d66:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8001d6a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001d6e:	2b9a      	cmp	r3, #154	; 0x9a
 8001d70:	d9d3      	bls.n	8001d1a <main+0x12e>


//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

	uint8_t uartTransmit[] = "UART OK\r\n";
 8001d72:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <main+0x2d8>)
 8001d74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d7a:	c303      	stmia	r3!, {r0, r1}
 8001d7c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 8001d7e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8001d82:	2364      	movs	r3, #100	; 0x64
 8001d84:	220a      	movs	r2, #10
 8001d86:	4850      	ldr	r0, [pc, #320]	; (8001ec8 <main+0x2dc>)
 8001d88:	f013 fc61 	bl	801564e <HAL_UART_Transmit>

	uint8_t uartTransmit_IT[] = "UART INTERRUPT OK\r\n";
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <main+0x2e0>)
 8001d8e:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8001d92:	461d      	mov	r5, r3
 8001d94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d98:	682b      	ldr	r3, [r5, #0]
 8001d9a:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart1, uartTransmit_IT, sizeof(uartTransmit_IT));
 8001d9c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001da0:	2214      	movs	r2, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4848      	ldr	r0, [pc, #288]	; (8001ec8 <main+0x2dc>)
 8001da6:	f013 fd86 	bl	80158b6 <HAL_UART_Transmit_IT>

//	uint8_t uartTransmit_DMA[] = "UART DMA OK\r\n";
//	HAL_UART_Transmit_DMA(&huart1, uartTransmit_DMA, sizeof(uartTransmit_DMA));

	HAL_UART_Receive_IT(&huart1, &rx_data, UART_RX_BUFFER_SIZE);
 8001daa:	2210      	movs	r2, #16
 8001dac:	4948      	ldr	r1, [pc, #288]	; (8001ed0 <main+0x2e4>)
 8001dae:	4846      	ldr	r0, [pc, #280]	; (8001ec8 <main+0x2dc>)
 8001db0:	f013 fdc6 	bl	8015940 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5) == GPIO_PIN_SET) {
 8001db4:	2120      	movs	r1, #32
 8001db6:	4847      	ldr	r0, [pc, #284]	; (8001ed4 <main+0x2e8>)
 8001db8:	f009 f838 	bl	800ae2c <HAL_GPIO_ReadPin>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d12c      	bne.n	8001e1c <main+0x230>

			uint16_t touchX = getX();
 8001dc2:	f004 fb65 	bl	8006490 <getX>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			uint16_t touchY = getY();
 8001dcc:	f004 fb7a 	bl	80064c4 <getY>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
			if (touchX && touchY && touchX != 0x0DB)
 8001dd6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d012      	beq.n	8001e04 <main+0x218>
 8001dde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <main+0x218>
 8001de6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001dea:	2bdb      	cmp	r3, #219	; 0xdb
 8001dec:	d00a      	beq.n	8001e04 <main+0x218>
			{
				LCD_Rect_Fill(touchX, touchY, 1, 1, WHITE);
 8001dee:	f8b7 1086 	ldrh.w	r1, [r7, #134]	; 0x86
 8001df2:	f8b7 0088 	ldrh.w	r0, [r7, #136]	; 0x88
 8001df6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f002 fa0c 	bl	800421c <LCD_Rect_Fill>
			}
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2180      	movs	r1, #128	; 0x80
 8001e08:	4833      	ldr	r0, [pc, #204]	; (8001ed8 <main+0x2ec>)
 8001e0a:	f009 f827 	bl	800ae5c <HAL_GPIO_WritePin>
			touchX = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
			touchY = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8001e1a:	e004      	b.n	8001e26 <main+0x23a>
		} else
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	482d      	ldr	r0, [pc, #180]	; (8001ed8 <main+0x2ec>)
 8001e22:	f009 f81b 	bl	800ae5c <HAL_GPIO_WritePin>


		//		if (millis / 1000 % 2 == 0)
		////		else
		//			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
		rtcSec = DS3231_getSec();
 8001e26:	f7fe ffc7 	bl	8000db8 <DS3231_getSec>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b2b      	ldr	r3, [pc, #172]	; (8001edc <main+0x2f0>)
 8001e30:	701a      	strb	r2, [r3, #0]

		char clockPrint[13];

		if (rtcSecLast != rtcSec) {
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <main+0x2f4>)
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <main+0x2f0>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d0ba      	beq.n	8001db4 <main+0x1c8>

			rtcMin = DS3231_getMin();
 8001e3e:	f7fe ffc9 	bl	8000dd4 <DS3231_getMin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <main+0x2f8>)
 8001e48:	701a      	strb	r2, [r3, #0]

			LCD_Circle(170, 35, 8, 0, 1, ORANGE);
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <main+0x2fc>)
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2301      	movs	r3, #1
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2208      	movs	r2, #8
 8001e56:	2123      	movs	r1, #35	; 0x23
 8001e58:	20aa      	movs	r0, #170	; 0xaa
 8001e5a:	f002 fe23 	bl	8004aa4 <LCD_Circle>
			LCD_Circle(170, 75, 8, 0, 1, ORANGE);
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <main+0x2fc>)
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	2301      	movs	r3, #1
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	2208      	movs	r2, #8
 8001e6a:	214b      	movs	r1, #75	; 0x4b
 8001e6c:	20aa      	movs	r0, #170	; 0xaa
 8001e6e:	f002 fe19 	bl	8004aa4 <LCD_Circle>

			if (rtcSec % 2 != 0) {
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <main+0x2f0>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d035      	beq.n	8001eec <main+0x300>
				LCD_Circle(170, 35, 7, 1, 1, ORANGE);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <main+0x2fc>)
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2301      	movs	r3, #1
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2301      	movs	r3, #1
 8001e8a:	2207      	movs	r2, #7
 8001e8c:	2123      	movs	r1, #35	; 0x23
 8001e8e:	20aa      	movs	r0, #170	; 0xaa
 8001e90:	f002 fe08 	bl	8004aa4 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, ORANGE);
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <main+0x2fc>)
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	214b      	movs	r1, #75	; 0x4b
 8001ea2:	20aa      	movs	r0, #170	; 0xaa
 8001ea4:	f002 fdfe 	bl	8004aa4 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eae:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <main+0x2e8>)
 8001eb0:	f008 ffd4 	bl	800ae5c <HAL_GPIO_WritePin>
 8001eb4:	e034      	b.n	8001f20 <main+0x334>
 8001eb6:	bf00      	nop
 8001eb8:	20000a0c 	.word	0x20000a0c
 8001ebc:	20000b44 	.word	0x20000b44
 8001ec0:	20000c7c 	.word	0x20000c7c
 8001ec4:	08051ea8 	.word	0x08051ea8
 8001ec8:	20000928 	.word	0x20000928
 8001ecc:	08051eb4 	.word	0x08051eb4
 8001ed0:	20000dc5 	.word	0x20000dc5
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	200009bd 	.word	0x200009bd
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	200009be 	.word	0x200009be
 8001ee8:	00ffa500 	.word	0x00ffa500
			}
			else {
				LCD_Circle(170, 35, 7, 1, 1, BLACK);
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2207      	movs	r2, #7
 8001ef8:	2123      	movs	r1, #35	; 0x23
 8001efa:	20aa      	movs	r0, #170	; 0xaa
 8001efc:	f002 fdd2 	bl	8004aa4 <LCD_Circle>
				LCD_Circle(170, 75, 7, 1, 1, BLACK);
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2301      	movs	r3, #1
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	214b      	movs	r1, #75	; 0x4b
 8001f0e:	20aa      	movs	r0, #170	; 0xaa
 8001f10:	f002 fdc8 	bl	8004aa4 <LCD_Circle>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f1a:	48bb      	ldr	r0, [pc, #748]	; (8002208 <main+0x61c>)
 8001f1c:	f008 ff9e 	bl	800ae5c <HAL_GPIO_WritePin>
			}

			if (rtcMinLast != rtcMin) {
 8001f20:	4bba      	ldr	r3, [pc, #744]	; (800220c <main+0x620>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4bba      	ldr	r3, [pc, #744]	; (8002210 <main+0x624>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	f001 8098 	beq.w	800305e <main+0x1472>

				rtcHrs = DS3231_getHrs();
 8001f2e:	f7fe ff5f 	bl	8000df0 <DS3231_getHrs>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	4bb7      	ldr	r3, [pc, #732]	; (8002214 <main+0x628>)
 8001f38:	701a      	strb	r2, [r3, #0]

				sprintf(clockPrint, "%02d", rtcMinLast);
 8001f3a:	4bb4      	ldr	r3, [pc, #720]	; (800220c <main+0x620>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f44:	49b4      	ldr	r1, [pc, #720]	; (8002218 <main+0x62c>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f018 fa3e 	bl	801a3c8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001f4c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f50:	2300      	movs	r3, #0
 8001f52:	9301      	str	r3, [sp, #4]
 8001f54:	2301      	movs	r3, #1
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	4bb0      	ldr	r3, [pc, #704]	; (800221c <main+0x630>)
 8001f5a:	2164      	movs	r1, #100	; 0x64
 8001f5c:	20b2      	movs	r0, #178	; 0xb2
 8001f5e:	f003 fab7 	bl	80054d0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcMin);
 8001f62:	4bab      	ldr	r3, [pc, #684]	; (8002210 <main+0x624>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f6c:	49aa      	ldr	r1, [pc, #680]	; (8002218 <main+0x62c>)
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f018 fa2a 	bl	801a3c8 <siprintf>
				LCD_Font(178, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8001f74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f78:	4ba9      	ldr	r3, [pc, #676]	; (8002220 <main+0x634>)
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	4ba6      	ldr	r3, [pc, #664]	; (800221c <main+0x630>)
 8001f82:	2164      	movs	r1, #100	; 0x64
 8001f84:	20b2      	movs	r0, #178	; 0xb2
 8001f86:	f003 faa3 	bl	80054d0 <LCD_Font>

				if (rtcHrsLast != rtcHrs) {
 8001f8a:	4ba6      	ldr	r3, [pc, #664]	; (8002224 <main+0x638>)
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	4ba1      	ldr	r3, [pc, #644]	; (8002214 <main+0x628>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	f000 80fb 	beq.w	800218e <main+0x5a2>

					rtcDay = DS3231_getDay();
 8001f98:	f7fe ff38 	bl	8000e0c <DS3231_getDay>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4ba1      	ldr	r3, [pc, #644]	; (8002228 <main+0x63c>)
 8001fa2:	701a      	strb	r2, [r3, #0]
					rtcDate = DS3231_getDate();
 8001fa4:	f7fe ff40 	bl	8000e28 <DS3231_getDate>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b9f      	ldr	r3, [pc, #636]	; (800222c <main+0x640>)
 8001fae:	701a      	strb	r2, [r3, #0]
					rtcMonth = DS3231_getMonth();
 8001fb0:	f7fe ff48 	bl	8000e44 <DS3231_getMonth>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b9d      	ldr	r3, [pc, #628]	; (8002230 <main+0x644>)
 8001fba:	701a      	strb	r2, [r3, #0]
					rtcYear = DS3231_getYear();
 8001fbc:	f7fe ff50 	bl	8000e60 <DS3231_getYear>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b9b      	ldr	r3, [pc, #620]	; (8002234 <main+0x648>)
 8001fc6:	701a      	strb	r2, [r3, #0]

					sprintf(clockPrint, "%02d", rtcHrsLast);
 8001fc8:	4b96      	ldr	r3, [pc, #600]	; (8002224 <main+0x638>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fd2:	4991      	ldr	r1, [pc, #580]	; (8002218 <main+0x62c>)
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f018 f9f7 	bl	801a3c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, BLACK);
 8001fda:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001fde:	2300      	movs	r3, #0
 8001fe0:	9301      	str	r3, [sp, #4]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	4b8d      	ldr	r3, [pc, #564]	; (800221c <main+0x630>)
 8001fe8:	2164      	movs	r1, #100	; 0x64
 8001fea:	2000      	movs	r0, #0
 8001fec:	f003 fa70 	bl	80054d0 <LCD_Font>
					sprintf(clockPrint, "%02d", rtcHrs);
 8001ff0:	4b88      	ldr	r3, [pc, #544]	; (8002214 <main+0x628>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ffa:	4987      	ldr	r1, [pc, #540]	; (8002218 <main+0x62c>)
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f018 f9e3 	bl	801a3c8 <siprintf>
					LCD_Font(0, 100, clockPrint, &DejaVu_Sans_128, 1, ORANGE);
 8002002:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002006:	4b86      	ldr	r3, [pc, #536]	; (8002220 <main+0x634>)
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2301      	movs	r3, #1
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <main+0x630>)
 8002010:	2164      	movs	r1, #100	; 0x64
 8002012:	2000      	movs	r0, #0
 8002014:	f003 fa5c 	bl	80054d0 <LCD_Font>

					if (rtcDayLast != rtcDay) {
 8002018:	4b87      	ldr	r3, [pc, #540]	; (8002238 <main+0x64c>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b82      	ldr	r3, [pc, #520]	; (8002228 <main+0x63c>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	f000 80a8 	beq.w	8002176 <main+0x58a>

						static const char* days[7] = { "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" };
						LCD_Font(5, 140, days[(7 + rtcDay - 2) % 7], &DejaVu_Sans_48, 1, BLACK);
 8002026:	4b80      	ldr	r3, [pc, #512]	; (8002228 <main+0x63c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	1d5a      	adds	r2, r3, #5
 800202c:	4b83      	ldr	r3, [pc, #524]	; (800223c <main+0x650>)
 800202e:	fb83 1302 	smull	r1, r3, r3, r2
 8002032:	4413      	add	r3, r2
 8002034:	1099      	asrs	r1, r3, #2
 8002036:	17d3      	asrs	r3, r2, #31
 8002038:	1ac9      	subs	r1, r1, r3
 800203a:	460b      	mov	r3, r1
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	1a5b      	subs	r3, r3, r1
 8002040:	1ad1      	subs	r1, r2, r3
 8002042:	4b7f      	ldr	r3, [pc, #508]	; (8002240 <main+0x654>)
 8002044:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2301      	movs	r3, #1
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4b7c      	ldr	r3, [pc, #496]	; (8002244 <main+0x658>)
 8002052:	218c      	movs	r1, #140	; 0x8c
 8002054:	2005      	movs	r0, #5
 8002056:	f003 fa3b 	bl	80054d0 <LCD_Font>
						LCD_Font(5, 140, days[(7 + rtcDay - 1) % 7], &DejaVu_Sans_48, 1, BLUE);
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <main+0x63c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	1d9a      	adds	r2, r3, #6
 8002060:	4b76      	ldr	r3, [pc, #472]	; (800223c <main+0x650>)
 8002062:	fb83 1302 	smull	r1, r3, r3, r2
 8002066:	4413      	add	r3, r2
 8002068:	1099      	asrs	r1, r3, #2
 800206a:	17d3      	asrs	r3, r2, #31
 800206c:	1ac9      	subs	r1, r1, r3
 800206e:	460b      	mov	r3, r1
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	1ad1      	subs	r1, r2, r3
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <main+0x654>)
 8002078:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 800207c:	23ff      	movs	r3, #255	; 0xff
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2301      	movs	r3, #1
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4b6f      	ldr	r3, [pc, #444]	; (8002244 <main+0x658>)
 8002086:	218c      	movs	r1, #140	; 0x8c
 8002088:	2005      	movs	r0, #5
 800208a:	f003 fa21 	bl	80054d0 <LCD_Font>

						static const char* months[12] = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };

						LCD_Font(150, 140, months[(12 + rtcMonth - 2) % 12], &DejaVu_Sans_48, 1, BLACK);
 800208e:	4b68      	ldr	r3, [pc, #416]	; (8002230 <main+0x644>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f103 010a 	add.w	r1, r3, #10
 8002096:	4b6c      	ldr	r3, [pc, #432]	; (8002248 <main+0x65c>)
 8002098:	fb83 2301 	smull	r2, r3, r3, r1
 800209c:	105a      	asrs	r2, r3, #1
 800209e:	17cb      	asrs	r3, r1, #31
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	4613      	mov	r3, r2
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	1aca      	subs	r2, r1, r3
 80020ac:	4b67      	ldr	r3, [pc, #412]	; (800224c <main+0x660>)
 80020ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2301      	movs	r3, #1
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <main+0x658>)
 80020bc:	218c      	movs	r1, #140	; 0x8c
 80020be:	2096      	movs	r0, #150	; 0x96
 80020c0:	f003 fa06 	bl	80054d0 <LCD_Font>
						LCD_Font(150, 140, months[(12 + rtcMonth - 1) % 12], &DejaVu_Sans_48, 1, CYAN);
 80020c4:	4b5a      	ldr	r3, [pc, #360]	; (8002230 <main+0x644>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f103 010b 	add.w	r1, r3, #11
 80020cc:	4b5e      	ldr	r3, [pc, #376]	; (8002248 <main+0x65c>)
 80020ce:	fb83 2301 	smull	r2, r3, r3, r1
 80020d2:	105a      	asrs	r2, r3, #1
 80020d4:	17cb      	asrs	r3, r1, #31
 80020d6:	1ad2      	subs	r2, r2, r3
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	1aca      	subs	r2, r1, r3
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <main+0x660>)
 80020e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ec:	9301      	str	r3, [sp, #4]
 80020ee:	2301      	movs	r3, #1
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4b54      	ldr	r3, [pc, #336]	; (8002244 <main+0x658>)
 80020f4:	218c      	movs	r1, #140	; 0x8c
 80020f6:	2096      	movs	r0, #150	; 0x96
 80020f8:	f003 f9ea 	bl	80054d0 <LCD_Font>

						sprintf(clockPrint, "%02d-%02d-%02d", rtcDateLast, rtcMonthLast, rtcYearLast);
 80020fc:	4b54      	ldr	r3, [pc, #336]	; (8002250 <main+0x664>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <main+0x668>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <main+0x66c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	460b      	mov	r3, r1
 8002114:	4951      	ldr	r1, [pc, #324]	; (800225c <main+0x670>)
 8002116:	f018 f957 	bl	801a3c8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 800211a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800211e:	2300      	movs	r3, #0
 8002120:	9301      	str	r3, [sp, #4]
 8002122:	2301      	movs	r3, #1
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4b47      	ldr	r3, [pc, #284]	; (8002244 <main+0x658>)
 8002128:	218c      	movs	r1, #140	; 0x8c
 800212a:	20fa      	movs	r0, #250	; 0xfa
 800212c:	f003 f9d0 	bl	80054d0 <LCD_Font>
						sprintf(clockPrint, "%02d-%02d-%02d", rtcDate, rtcMonth, rtcYear);
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <main+0x640>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <main+0x644>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	4619      	mov	r1, r3
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <main+0x648>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	460b      	mov	r3, r1
 8002148:	4944      	ldr	r1, [pc, #272]	; (800225c <main+0x670>)
 800214a:	f018 f93d 	bl	801a3c8 <siprintf>
						LCD_Font(250, 140, clockPrint, &DejaVu_Sans_48, 1, CYAN);
 800214e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2301      	movs	r3, #1
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4b39      	ldr	r3, [pc, #228]	; (8002244 <main+0x658>)
 800215e:	218c      	movs	r1, #140	; 0x8c
 8002160:	20fa      	movs	r0, #250	; 0xfa
 8002162:	f003 f9b5 	bl	80054d0 <LCD_Font>

						rtcDayLast = rtcDay;
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <main+0x63c>)
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <main+0x64c>)
 800216c:	701a      	strb	r2, [r3, #0]
						rtcDateLast = rtcDate;
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <main+0x640>)
 8002170:	781a      	ldrb	r2, [r3, #0]
 8002172:	4b37      	ldr	r3, [pc, #220]	; (8002250 <main+0x664>)
 8002174:	701a      	strb	r2, [r3, #0]
					}
					rtcMonthLast = rtcMonth;
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <main+0x644>)
 8002178:	781a      	ldrb	r2, [r3, #0]
 800217a:	4b36      	ldr	r3, [pc, #216]	; (8002254 <main+0x668>)
 800217c:	701a      	strb	r2, [r3, #0]
					rtcYearLast = rtcYear;
 800217e:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <main+0x648>)
 8002180:	781a      	ldrb	r2, [r3, #0]
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <main+0x66c>)
 8002184:	701a      	strb	r2, [r3, #0]
					rtcHrsLast = rtcHrs;
 8002186:	4b23      	ldr	r3, [pc, #140]	; (8002214 <main+0x628>)
 8002188:	781a      	ldrb	r2, [r3, #0]
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <main+0x638>)
 800218c:	701a      	strb	r2, [r3, #0]
				}
				rtcMinLast = rtcMin;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <main+0x624>)
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <main+0x620>)
 8002194:	701a      	strb	r2, [r3, #0]
				temperature = BME280_getTemperature(-1);
 8002196:	f04f 30ff 	mov.w	r0, #4294967295
 800219a:	f7fe f925 	bl	80003e8 <BME280_getTemperature>
 800219e:	ee10 3a10 	vmov	r3, s0
 80021a2:	4618      	mov	r0, r3
 80021a4:	f016 fcd8 	bl	8018b58 <__aeabi_f2d>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	492c      	ldr	r1, [pc, #176]	; (8002260 <main+0x674>)
 80021ae:	e9c1 2300 	strd	r2, r3, [r1]
				humidity = BME280_getHumidity(-1);
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295
 80021b6:	f7fe f98f 	bl	80004d8 <BME280_getHumidity>
 80021ba:	ee10 3a10 	vmov	r3, s0
 80021be:	4618      	mov	r0, r3
 80021c0:	f016 fcca 	bl	8018b58 <__aeabi_f2d>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4926      	ldr	r1, [pc, #152]	; (8002264 <main+0x678>)
 80021ca:	e9c1 2300 	strd	r2, r3, [r1]
				pressure = (uint16_t)BME280_getPressure();
 80021ce:	f7fe fa23 	bl	8000618 <BME280_getPressure>
 80021d2:	eef0 7a40 	vmov.f32	s15, s0
 80021d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021da:	ee17 3a90 	vmov	r3, s15
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <main+0x67c>)
 80021e2:	801a      	strh	r2, [r3, #0]

				if (pressure > 900 && pressure < 1100 && temperature < 85 && temperature > -40 && humidity > 0 && humidity < 100) {
 80021e4:	4b20      	ldr	r3, [pc, #128]	; (8002268 <main+0x67c>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80021ec:	f240 8737 	bls.w	800305e <main+0x1472>
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <main+0x67c>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	f240 424b 	movw	r2, #1099	; 0x44b
 80021f8:	4293      	cmp	r3, r2
 80021fa:	f200 8730 	bhi.w	800305e <main+0x1472>
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <main+0x674>)
 8002200:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002204:	e032      	b.n	800226c <main+0x680>
 8002206:	bf00      	nop
 8002208:	40020800 	.word	0x40020800
 800220c:	20000001 	.word	0x20000001
 8002210:	200009be 	.word	0x200009be
 8002214:	200009bf 	.word	0x200009bf
 8002218:	08051e4c 	.word	0x08051e4c
 800221c:	08051cf8 	.word	0x08051cf8
 8002220:	00ffa500 	.word	0x00ffa500
 8002224:	20000002 	.word	0x20000002
 8002228:	200009c0 	.word	0x200009c0
 800222c:	200009c1 	.word	0x200009c1
 8002230:	200009c2 	.word	0x200009c2
 8002234:	200009c3 	.word	0x200009c3
 8002238:	200009c4 	.word	0x200009c4
 800223c:	92492493 	.word	0x92492493
 8002240:	20000008 	.word	0x20000008
 8002244:	08029660 	.word	0x08029660
 8002248:	2aaaaaab 	.word	0x2aaaaaab
 800224c:	20000024 	.word	0x20000024
 8002250:	200009c5 	.word	0x200009c5
 8002254:	200009c6 	.word	0x200009c6
 8002258:	200009c7 	.word	0x200009c7
 800225c:	08051e54 	.word	0x08051e54
 8002260:	200009c8 	.word	0x200009c8
 8002264:	200009d8 	.word	0x200009d8
 8002268:	20000a08 	.word	0x20000a08
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	4b8a      	ldr	r3, [pc, #552]	; (800249c <main+0x8b0>)
 8002272:	f016 ff3b 	bl	80190ec <__aeabi_dcmplt>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 86f0 	beq.w	800305e <main+0x1472>
 800227e:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <main+0x8b4>)
 8002280:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <main+0x8b8>)
 800228a:	f016 ff4d 	bl	8019128 <__aeabi_dcmpgt>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 86e4 	beq.w	800305e <main+0x1472>
 8002296:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <main+0x8bc>)
 8002298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	f016 ff40 	bl	8019128 <__aeabi_dcmpgt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 86d7 	beq.w	800305e <main+0x1472>
 80022b0:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <main+0x8bc>)
 80022b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	4b7c      	ldr	r3, [pc, #496]	; (80024ac <main+0x8c0>)
 80022bc:	f016 ff16 	bl	80190ec <__aeabi_dcmplt>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 86cb 	beq.w	800305e <main+0x1472>

					if (temperature != temperatureLast) {
 80022c8:	4b75      	ldr	r3, [pc, #468]	; (80024a0 <main+0x8b4>)
 80022ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ce:	4b78      	ldr	r3, [pc, #480]	; (80024b0 <main+0x8c4>)
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f016 ff00 	bl	80190d8 <__aeabi_dcmpeq>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f040 8120 	bne.w	8002520 <main+0x934>

						char weatherPrintT[8];

						if (temperatureLast >= 10 || (temperatureLast < 0 && temperatureLast > -10)) {
 80022e0:	4b73      	ldr	r3, [pc, #460]	; (80024b0 <main+0x8c4>)
 80022e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	4b72      	ldr	r3, [pc, #456]	; (80024b4 <main+0x8c8>)
 80022ec:	f016 ff12 	bl	8019114 <__aeabi_dcmpge>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <main+0x738>
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <main+0x8c4>)
 80022f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	f016 fef2 	bl	80190ec <__aeabi_dcmplt>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d01c      	beq.n	8002348 <main+0x75c>
 800230e:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <main+0x8c4>)
 8002310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	4b67      	ldr	r3, [pc, #412]	; (80024b8 <main+0x8cc>)
 800231a:	f016 ff05 	bl	8019128 <__aeabi_dcmpgt>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d011      	beq.n	8002348 <main+0x75c>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002324:	4b62      	ldr	r3, [pc, #392]	; (80024b0 <main+0x8c4>)
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	1d38      	adds	r0, r7, #4
 800232c:	4963      	ldr	r1, [pc, #396]	; (80024bc <main+0x8d0>)
 800232e:	f018 f84b 	bl	801a3c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002332:	1d3a      	adds	r2, r7, #4
 8002334:	2300      	movs	r3, #0
 8002336:	9301      	str	r3, [sp, #4]
 8002338:	2301      	movs	r3, #1
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	4b60      	ldr	r3, [pc, #384]	; (80024c0 <main+0x8d4>)
 800233e:	21bb      	movs	r1, #187	; 0xbb
 8002340:	2001      	movs	r0, #1
 8002342:	f003 f8c5 	bl	80054d0 <LCD_Font>
 8002346:	e04c      	b.n	80023e2 <main+0x7f6>
						}
						else if (temperatureLast < 10 && temperatureLast > 0) {
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <main+0x8c4>)
 800234a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <main+0x8c8>)
 8002354:	f016 feca 	bl	80190ec <__aeabi_dcmplt>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d01d      	beq.n	800239a <main+0x7ae>
 800235e:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <main+0x8c4>)
 8002360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	f016 fedc 	bl	8019128 <__aeabi_dcmpgt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d011      	beq.n	800239a <main+0x7ae>
							sprintf(weatherPrintT, "%.1f'C", temperatureLast);
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <main+0x8c4>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	1d38      	adds	r0, r7, #4
 800237e:	494f      	ldr	r1, [pc, #316]	; (80024bc <main+0x8d0>)
 8002380:	f018 f822 	bl	801a3c8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 8002384:	1d3a      	adds	r2, r7, #4
 8002386:	2300      	movs	r3, #0
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2301      	movs	r3, #1
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b4c      	ldr	r3, [pc, #304]	; (80024c0 <main+0x8d4>)
 8002390:	21bb      	movs	r1, #187	; 0xbb
 8002392:	201b      	movs	r0, #27
 8002394:	f003 f89c 	bl	80054d0 <LCD_Font>
 8002398:	e023      	b.n	80023e2 <main+0x7f6>
						}
						else if (temperatureLast <= -10) {
 800239a:	4b45      	ldr	r3, [pc, #276]	; (80024b0 <main+0x8c4>)
 800239c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <main+0x8cc>)
 80023a6:	f016 feab 	bl	8019100 <__aeabi_dcmple>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d018      	beq.n	80023e2 <main+0x7f6>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperatureLast);
 80023b0:	4b3f      	ldr	r3, [pc, #252]	; (80024b0 <main+0x8c4>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	4610      	mov	r0, r2
 80023b8:	4619      	mov	r1, r3
 80023ba:	f016 fed5 	bl	8019168 <__aeabi_d2iz>
 80023be:	4603      	mov	r3, r0
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	493f      	ldr	r1, [pc, #252]	; (80024c4 <main+0x8d8>)
 80023c8:	4618      	mov	r0, r3
 80023ca:	f017 fffd 	bl	801a3c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, BLACK);
 80023ce:	1d3a      	adds	r2, r7, #4
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2301      	movs	r3, #1
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <main+0x8d4>)
 80023da:	21bb      	movs	r1, #187	; 0xbb
 80023dc:	2001      	movs	r0, #1
 80023de:	f003 f877 	bl	80054d0 <LCD_Font>
						}

						if (temperature >= 10 || (temperature < 0 && temperature > -10)) {
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <main+0x8b4>)
 80023e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <main+0x8c8>)
 80023ee:	f016 fe91 	bl	8019114 <__aeabi_dcmpge>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <main+0x83a>
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <main+0x8b4>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	f016 fe71 	bl	80190ec <__aeabi_dcmplt>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01c      	beq.n	800244a <main+0x85e>
 8002410:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <main+0x8b4>)
 8002412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <main+0x8cc>)
 800241c:	f016 fe84 	bl	8019128 <__aeabi_dcmpgt>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <main+0x85e>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002426:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <main+0x8b4>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	1d38      	adds	r0, r7, #4
 800242e:	4923      	ldr	r1, [pc, #140]	; (80024bc <main+0x8d0>)
 8002430:	f017 ffca 	bl	801a3c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002434:	1d3a      	adds	r2, r7, #4
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <main+0x8dc>)
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	2301      	movs	r3, #1
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <main+0x8d4>)
 8002440:	21bb      	movs	r1, #187	; 0xbb
 8002442:	2001      	movs	r0, #1
 8002444:	f003 f844 	bl	80054d0 <LCD_Font>
 8002448:	e064      	b.n	8002514 <main+0x928>
						}
						else if (temperature < 10 && temperature > 0) {
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <main+0x8b4>)
 800244c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	4b17      	ldr	r3, [pc, #92]	; (80024b4 <main+0x8c8>)
 8002456:	f016 fe49 	bl	80190ec <__aeabi_dcmplt>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d035      	beq.n	80024cc <main+0x8e0>
 8002460:	4b0f      	ldr	r3, [pc, #60]	; (80024a0 <main+0x8b4>)
 8002462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	f016 fe5b 	bl	8019128 <__aeabi_dcmpgt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d029      	beq.n	80024cc <main+0x8e0>
							sprintf(weatherPrintT, "%.1f'C", temperature);
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <main+0x8b4>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	1d38      	adds	r0, r7, #4
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <main+0x8d0>)
 8002482:	f017 ffa1 	bl	801a3c8 <siprintf>
							LCD_Font(27, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002486:	1d3a      	adds	r2, r7, #4
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <main+0x8dc>)
 800248a:	9301      	str	r3, [sp, #4]
 800248c:	2301      	movs	r3, #1
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <main+0x8d4>)
 8002492:	21bb      	movs	r1, #187	; 0xbb
 8002494:	201b      	movs	r0, #27
 8002496:	f003 f81b 	bl	80054d0 <LCD_Font>
 800249a:	e03b      	b.n	8002514 <main+0x928>
 800249c:	40554000 	.word	0x40554000
 80024a0:	200009c8 	.word	0x200009c8
 80024a4:	c0440000 	.word	0xc0440000
 80024a8:	200009d8 	.word	0x200009d8
 80024ac:	40590000 	.word	0x40590000
 80024b0:	200009d0 	.word	0x200009d0
 80024b4:	40240000 	.word	0x40240000
 80024b8:	c0240000 	.word	0xc0240000
 80024bc:	08051e64 	.word	0x08051e64
 80024c0:	08029660 	.word	0x08029660
 80024c4:	08051e6c 	.word	0x08051e6c
 80024c8:	00ffa500 	.word	0x00ffa500
						}
						else if (temperature <= -10) {
 80024cc:	4ba4      	ldr	r3, [pc, #656]	; (8002760 <main+0xb74>)
 80024ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	4ba3      	ldr	r3, [pc, #652]	; (8002764 <main+0xb78>)
 80024d8:	f016 fe12 	bl	8019100 <__aeabi_dcmple>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d018      	beq.n	8002514 <main+0x928>
							sprintf(weatherPrintT, "%2d'C", (int8_t)temperature);
 80024e2:	4b9f      	ldr	r3, [pc, #636]	; (8002760 <main+0xb74>)
 80024e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f016 fe3c 	bl	8019168 <__aeabi_d2iz>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b25b      	sxtb	r3, r3
 80024f4:	461a      	mov	r2, r3
 80024f6:	1d3b      	adds	r3, r7, #4
 80024f8:	499b      	ldr	r1, [pc, #620]	; (8002768 <main+0xb7c>)
 80024fa:	4618      	mov	r0, r3
 80024fc:	f017 ff64 	bl	801a3c8 <siprintf>
							LCD_Font(1, 187, weatherPrintT, &DejaVu_Sans_48, 1, ORANGE);
 8002500:	1d3a      	adds	r2, r7, #4
 8002502:	4b9a      	ldr	r3, [pc, #616]	; (800276c <main+0xb80>)
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	2301      	movs	r3, #1
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4b99      	ldr	r3, [pc, #612]	; (8002770 <main+0xb84>)
 800250c:	21bb      	movs	r1, #187	; 0xbb
 800250e:	2001      	movs	r0, #1
 8002510:	f002 ffde 	bl	80054d0 <LCD_Font>
						}

						temperatureLast = temperature;
 8002514:	4b92      	ldr	r3, [pc, #584]	; (8002760 <main+0xb74>)
 8002516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251a:	4996      	ldr	r1, [pc, #600]	; (8002774 <main+0xb88>)
 800251c:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (humidity != humidityLast) {
 8002520:	4b95      	ldr	r3, [pc, #596]	; (8002778 <main+0xb8c>)
 8002522:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002526:	4b95      	ldr	r3, [pc, #596]	; (800277c <main+0xb90>)
 8002528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252c:	f016 fdd4 	bl	80190d8 <__aeabi_dcmpeq>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d15b      	bne.n	80025ee <main+0xa02>

						char weatherPrintH[7];

						sprintf(weatherPrintH, "%.1f'H", humidityLast);
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <main+0xb90>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f107 000c 	add.w	r0, r7, #12
 8002540:	498f      	ldr	r1, [pc, #572]	; (8002780 <main+0xb94>)
 8002542:	f017 ff41 	bl	801a3c8 <siprintf>
						if (humidityLast >= 10)
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <main+0xb90>)
 8002548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <main+0xb98>)
 8002552:	f016 fddf 	bl	8019114 <__aeabi_dcmpge>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <main+0x988>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 800255c:	f107 020c 	add.w	r2, r7, #12
 8002560:	2300      	movs	r3, #0
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2301      	movs	r3, #1
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4b81      	ldr	r3, [pc, #516]	; (8002770 <main+0xb84>)
 800256a:	21bb      	movs	r1, #187	; 0xbb
 800256c:	20a0      	movs	r0, #160	; 0xa0
 800256e:	f002 ffaf 	bl	80054d0 <LCD_Font>
 8002572:	e00a      	b.n	800258a <main+0x99e>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, BLACK);
 8002574:	f107 020c 	add.w	r2, r7, #12
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2301      	movs	r3, #1
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <main+0xb84>)
 8002582:	21bb      	movs	r1, #187	; 0xbb
 8002584:	20ba      	movs	r0, #186	; 0xba
 8002586:	f002 ffa3 	bl	80054d0 <LCD_Font>

						sprintf(weatherPrintH, "%.1f'H", humidity);
 800258a:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <main+0xb8c>)
 800258c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002590:	f107 000c 	add.w	r0, r7, #12
 8002594:	497a      	ldr	r1, [pc, #488]	; (8002780 <main+0xb94>)
 8002596:	f017 ff17 	bl	801a3c8 <siprintf>
						if (humidity >= 10)
 800259a:	4b77      	ldr	r3, [pc, #476]	; (8002778 <main+0xb8c>)
 800259c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a0:	f04f 0200 	mov.w	r2, #0
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <main+0xb98>)
 80025a6:	f016 fdb5 	bl	8019114 <__aeabi_dcmpge>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00c      	beq.n	80025ca <main+0x9de>
							LCD_Font(160, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	2301      	movs	r3, #1
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <main+0xb84>)
 80025c0:	21bb      	movs	r1, #187	; 0xbb
 80025c2:	20a0      	movs	r0, #160	; 0xa0
 80025c4:	f002 ff84 	bl	80054d0 <LCD_Font>
 80025c8:	e00b      	b.n	80025e2 <main+0x9f6>
						else LCD_Font(186, 187, weatherPrintH, &DejaVu_Sans_48, 1, CYAN);
 80025ca:	f107 020c 	add.w	r2, r7, #12
 80025ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	2301      	movs	r3, #1
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4b65      	ldr	r3, [pc, #404]	; (8002770 <main+0xb84>)
 80025da:	21bb      	movs	r1, #187	; 0xbb
 80025dc:	20ba      	movs	r0, #186	; 0xba
 80025de:	f002 ff77 	bl	80054d0 <LCD_Font>

						humidityLast = humidity;
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <main+0xb8c>)
 80025e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e8:	4964      	ldr	r1, [pc, #400]	; (800277c <main+0xb90>)
 80025ea:	e9c1 2300 	strd	r2, r3, [r1]
					}

					if (pressureLast != pressure) {
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <main+0xb9c>)
 80025f0:	881a      	ldrh	r2, [r3, #0]
 80025f2:	4b66      	ldr	r3, [pc, #408]	; (800278c <main+0xba0>)
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d06d      	beq.n	80026d6 <main+0xaea>

						char weatherPrintP[11];

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 80025fa:	4b63      	ldr	r3, [pc, #396]	; (8002788 <main+0xb9c>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002602:	d308      	bcc.n	8002616 <main+0xa2a>
 8002604:	4b60      	ldr	r3, [pc, #384]	; (8002788 <main+0xb9c>)
 8002606:	881b      	ldrh	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4960      	ldr	r1, [pc, #384]	; (8002790 <main+0xba4>)
 8002610:	4618      	mov	r0, r3
 8002612:	f017 fed9 	bl	801a3c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 8002616:	f107 0214 	add.w	r2, r7, #20
 800261a:	2300      	movs	r3, #0
 800261c:	9301      	str	r3, [sp, #4]
 800261e:	2301      	movs	r3, #1
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4b53      	ldr	r3, [pc, #332]	; (8002770 <main+0xb84>)
 8002624:	21bb      	movs	r1, #187	; 0xbb
 8002626:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800262a:	f002 ff51 	bl	80054d0 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 800262e:	4b56      	ldr	r3, [pc, #344]	; (8002788 <main+0xb9c>)
 8002630:	881b      	ldrh	r3, [r3, #0]
 8002632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002636:	d208      	bcs.n	800264a <main+0xa5e>
 8002638:	4b53      	ldr	r3, [pc, #332]	; (8002788 <main+0xb9c>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	f107 0314 	add.w	r3, r7, #20
 8002642:	4954      	ldr	r1, [pc, #336]	; (8002794 <main+0xba8>)
 8002644:	4618      	mov	r0, r3
 8002646:	f017 febf 	bl	801a3c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, BLACK);
 800264a:	f107 0214 	add.w	r2, r7, #20
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2301      	movs	r3, #1
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	4b46      	ldr	r3, [pc, #280]	; (8002770 <main+0xb84>)
 8002658:	21bb      	movs	r1, #187	; 0xbb
 800265a:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800265e:	f002 ff37 	bl	80054d0 <LCD_Font>

						pressureLast = pressure;
 8002662:	4b4a      	ldr	r3, [pc, #296]	; (800278c <main+0xba0>)
 8002664:	881a      	ldrh	r2, [r3, #0]
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <main+0xb9c>)
 8002668:	801a      	strh	r2, [r3, #0]

						if (pressureLast >= 1000) sprintf(weatherPrintP, "%02dP", pressureLast);
 800266a:	4b47      	ldr	r3, [pc, #284]	; (8002788 <main+0xb9c>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002672:	d308      	bcc.n	8002686 <main+0xa9a>
 8002674:	4b44      	ldr	r3, [pc, #272]	; (8002788 <main+0xb9c>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4944      	ldr	r1, [pc, #272]	; (8002790 <main+0xba4>)
 8002680:	4618      	mov	r0, r3
 8002682:	f017 fea1 	bl	801a3c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 8002686:	f107 0214 	add.w	r2, r7, #20
 800268a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800268e:	9301      	str	r3, [sp, #4]
 8002690:	2301      	movs	r3, #1
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4b36      	ldr	r3, [pc, #216]	; (8002770 <main+0xb84>)
 8002696:	21bb      	movs	r1, #187	; 0xbb
 8002698:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800269c:	f002 ff18 	bl	80054d0 <LCD_Font>

						if (pressureLast < 1000) sprintf(weatherPrintP, " %02dP", pressureLast);
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <main+0xb9c>)
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a8:	d208      	bcs.n	80026bc <main+0xad0>
 80026aa:	4b37      	ldr	r3, [pc, #220]	; (8002788 <main+0xb9c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <main+0xba8>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	f017 fe86 	bl	801a3c8 <siprintf>
						LCD_Font(320, 187, weatherPrintP, &DejaVu_Sans_48, 1, GREEN);
 80026bc:	f107 0214 	add.w	r2, r7, #20
 80026c0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	2301      	movs	r3, #1
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <main+0xb84>)
 80026cc:	21bb      	movs	r1, #187	; 0xbb
 80026ce:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80026d2:	f002 fefd 	bl	80054d0 <LCD_Font>
					}

					if (AT24XX_Read(0) != rtcHrs) {
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fd fdda 	bl	8000290 <AT24XX_Read>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <main+0xbac>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f000 81e1 	beq.w	8002aac <main+0xec0>

						AT24XX_Update(0, rtcHrs);
 80026ea:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <main+0xbac>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fd fdf7 	bl	80002e4 <AT24XX_Update>

						for (uint16_t i = 0; i < 155; i++) hT[i] = byteS(AT24XX_Read(i * 2 + 1000), AT24XX_Read(i * 2 + 1 + 1000));
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80026fc:	e027      	b.n	800274e <main+0xb62>
 80026fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002702:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002706:	b29b      	uxth	r3, r3
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd fdbf 	bl	8000290 <AT24XX_Read>
 8002712:	4603      	mov	r3, r0
 8002714:	461c      	mov	r4, r3
 8002716:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	b29b      	uxth	r3, r3
 800271e:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 8002722:	b29b      	uxth	r3, r3
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd fdb3 	bl	8000290 <AT24XX_Read>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fa1e 	bl	8001b70 <byteS>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800273c:	b211      	sxth	r1, r2
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <main+0xbb0>)
 8002740:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002744:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002748:	3301      	adds	r3, #1
 800274a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800274e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8002752:	2b9a      	cmp	r3, #154	; 0x9a
 8002754:	d9d3      	bls.n	80026fe <main+0xb12>
						for (uint16_t i = 154; i > 0; i--) hT[i] = hT[i - 1];
 8002756:	239a      	movs	r3, #154	; 0x9a
 8002758:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800275c:	e030      	b.n	80027c0 <main+0xbd4>
 800275e:	bf00      	nop
 8002760:	200009c8 	.word	0x200009c8
 8002764:	c0240000 	.word	0xc0240000
 8002768:	08051e6c 	.word	0x08051e6c
 800276c:	00ffa500 	.word	0x00ffa500
 8002770:	08029660 	.word	0x08029660
 8002774:	200009d0 	.word	0x200009d0
 8002778:	200009d8 	.word	0x200009d8
 800277c:	200009e0 	.word	0x200009e0
 8002780:	08051e74 	.word	0x08051e74
 8002784:	40240000 	.word	0x40240000
 8002788:	20000a0a 	.word	0x20000a0a
 800278c:	20000a08 	.word	0x20000a08
 8002790:	08051e7c 	.word	0x08051e7c
 8002794:	08051e84 	.word	0x08051e84
 8002798:	200009bf 	.word	0x200009bf
 800279c:	20000a0c 	.word	0x20000a0c
 80027a0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80027aa:	499e      	ldr	r1, [pc, #632]	; (8002a24 <main+0xe38>)
 80027ac:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80027b0:	4a9c      	ldr	r2, [pc, #624]	; (8002a24 <main+0xe38>)
 80027b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80027b6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80027ba:	3b01      	subs	r3, #1
 80027bc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80027c0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1eb      	bne.n	80027a0 <main+0xbb4>
						hT[0] = (uint16_t) (temperature * 10);
 80027c8:	4b97      	ldr	r3, [pc, #604]	; (8002a28 <main+0xe3c>)
 80027ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	4b96      	ldr	r3, [pc, #600]	; (8002a2c <main+0xe40>)
 80027d4:	f016 fa18 	bl	8018c08 <__aeabi_dmul>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4610      	mov	r0, r2
 80027de:	4619      	mov	r1, r3
 80027e0:	f016 fcea 	bl	80191b8 <__aeabi_d2uiz>
 80027e4:	4603      	mov	r3, r0
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	4b8e      	ldr	r3, [pc, #568]	; (8002a24 <main+0xe38>)
 80027ec:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80027f4:	e02e      	b.n	8002854 <main+0xc68>
							AT24XX_Update(i * 2 + 1000, byteL(hT[i]));
 80027f6:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 80027fa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80027fe:	b29b      	uxth	r3, r3
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	b29c      	uxth	r4, r3
 8002804:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002808:	4a86      	ldr	r2, [pc, #536]	; (8002a24 <main+0xe38>)
 800280a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800280e:	b29b      	uxth	r3, r3
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff f991 	bl	8001b38 <byteL>
 8002816:	4603      	mov	r3, r0
 8002818:	4619      	mov	r1, r3
 800281a:	4620      	mov	r0, r4
 800281c:	f7fd fd62 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 1000, byteH(hT[i]));
 8002820:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	b29b      	uxth	r3, r3
 8002828:	f203 33e9 	addw	r3, r3, #1001	; 0x3e9
 800282c:	b29c      	uxth	r4, r3
 800282e:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002832:	4a7c      	ldr	r2, [pc, #496]	; (8002a24 <main+0xe38>)
 8002834:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002838:	b29b      	uxth	r3, r3
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff f989 	bl	8001b52 <byteH>
 8002840:	4603      	mov	r3, r0
 8002842:	4619      	mov	r1, r3
 8002844:	4620      	mov	r0, r4
 8002846:	f7fd fd4d 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800284a:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 800284e:	3301      	adds	r3, #1
 8002850:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8002854:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	; 0xac
 8002858:	2b9a      	cmp	r3, #154	; 0x9a
 800285a:	d9cc      	bls.n	80027f6 <main+0xc0a>
						}

						for (uint16_t i = 0; i < 155; i++) hH[i] = byteS(AT24XX_Read(i * 2 + 2000), AT24XX_Read(i * 2 + 1 + 2000));
 800285c:	2300      	movs	r3, #0
 800285e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8002862:	e027      	b.n	80028b4 <main+0xcc8>
 8002864:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002868:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800286c:	b29b      	uxth	r3, r3
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fd0c 	bl	8000290 <AT24XX_Read>
 8002878:	4603      	mov	r3, r0
 800287a:	461c      	mov	r4, r3
 800287c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	b29b      	uxth	r3, r3
 8002884:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	f7fd fd00 	bl	8000290 <AT24XX_Read>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4620      	mov	r0, r4
 8002896:	f7ff f96b 	bl	8001b70 <byteS>
 800289a:	4603      	mov	r3, r0
 800289c:	461a      	mov	r2, r3
 800289e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80028a2:	b211      	sxth	r1, r2
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <main+0xe44>)
 80028a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80028aa:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80028ae:	3301      	adds	r3, #1
 80028b0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80028b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80028b8:	2b9a      	cmp	r3, #154	; 0x9a
 80028ba:	d9d3      	bls.n	8002864 <main+0xc78>
						for (uint16_t i = 154; i > 0; i--) hH[i] = hH[i - 1];
 80028bc:	239a      	movs	r3, #154	; 0x9a
 80028be:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80028c2:	e00f      	b.n	80028e4 <main+0xcf8>
 80028c4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028ce:	4958      	ldr	r1, [pc, #352]	; (8002a30 <main+0xe44>)
 80028d0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80028d4:	4a56      	ldr	r2, [pc, #344]	; (8002a30 <main+0xe44>)
 80028d6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80028da:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028de:	3b01      	subs	r3, #1
 80028e0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80028e4:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1eb      	bne.n	80028c4 <main+0xcd8>
						hH[0] = (uint16_t) (humidity * 10);
 80028ec:	4b51      	ldr	r3, [pc, #324]	; (8002a34 <main+0xe48>)
 80028ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	4b4d      	ldr	r3, [pc, #308]	; (8002a2c <main+0xe40>)
 80028f8:	f016 f986 	bl	8018c08 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f016 fc58 	bl	80191b8 <__aeabi_d2uiz>
 8002908:	4603      	mov	r3, r0
 800290a:	b29b      	uxth	r3, r3
 800290c:	b21a      	sxth	r2, r3
 800290e:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <main+0xe44>)
 8002910:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002912:	2300      	movs	r3, #0
 8002914:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002918:	e02e      	b.n	8002978 <main+0xd8c>
							AT24XX_Update(i * 2 + 2000, byteL(hH[i]));
 800291a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800291e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002922:	b29b      	uxth	r3, r3
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	b29c      	uxth	r4, r3
 8002928:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800292c:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <main+0xe44>)
 800292e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002932:	b29b      	uxth	r3, r3
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff f8ff 	bl	8001b38 <byteL>
 800293a:	4603      	mov	r3, r0
 800293c:	4619      	mov	r1, r3
 800293e:	4620      	mov	r0, r4
 8002940:	f7fd fcd0 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 2000, byteH(hH[i]));
 8002944:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	b29b      	uxth	r3, r3
 800294c:	f203 73d1 	addw	r3, r3, #2001	; 0x7d1
 8002950:	b29c      	uxth	r4, r3
 8002952:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002956:	4a36      	ldr	r2, [pc, #216]	; (8002a30 <main+0xe44>)
 8002958:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800295c:	b29b      	uxth	r3, r3
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff f8f7 	bl	8001b52 <byteH>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	4620      	mov	r0, r4
 800296a:	f7fd fcbb 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 800296e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8002972:	3301      	adds	r3, #1
 8002974:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8002978:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800297c:	2b9a      	cmp	r3, #154	; 0x9a
 800297e:	d9cc      	bls.n	800291a <main+0xd2e>
						}

						for (uint16_t i = 0; i < 155; i++) hP[i] = byteS(AT24XX_Read(i * 2 + 3000), AT24XX_Read(i * 2 + 1 + 3000));
 8002980:	2300      	movs	r3, #0
 8002982:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8002986:	e027      	b.n	80029d8 <main+0xdec>
 8002988:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800298c:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002990:	b29b      	uxth	r3, r3
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	f7fd fc7a 	bl	8000290 <AT24XX_Read>
 800299c:	4603      	mov	r3, r0
 800299e:	461c      	mov	r4, r3
 80029a0:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fc6e 	bl	8000290 <AT24XX_Read>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4619      	mov	r1, r3
 80029b8:	4620      	mov	r0, r4
 80029ba:	f7ff f8d9 	bl	8001b70 <byteS>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029c6:	b211      	sxth	r1, r2
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <main+0xe4c>)
 80029ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029ce:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029d2:	3301      	adds	r3, #1
 80029d4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80029d8:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80029dc:	2b9a      	cmp	r3, #154	; 0x9a
 80029de:	d9d3      	bls.n	8002988 <main+0xd9c>
						for (uint16_t i = 154; i > 0; i--) hP[i] = hP[i - 1];
 80029e0:	239a      	movs	r3, #154	; 0x9a
 80029e2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80029e6:	e00f      	b.n	8002a08 <main+0xe1c>
 80029e8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80029ec:	1e5a      	subs	r2, r3, #1
 80029ee:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80029f2:	4911      	ldr	r1, [pc, #68]	; (8002a38 <main+0xe4c>)
 80029f4:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <main+0xe4c>)
 80029fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80029fe:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a02:	3b01      	subs	r3, #1
 8002a04:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8002a08:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1eb      	bne.n	80029e8 <main+0xdfc>
						hP[0] = (uint16_t)pressure;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <main+0xe50>)
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	b21a      	sxth	r2, r3
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <main+0xe4c>)
 8002a18:	801a      	strh	r2, [r3, #0]

						for (uint16_t i = 0; i < 155; i++) {
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002a20:	e03d      	b.n	8002a9e <main+0xeb2>
 8002a22:	bf00      	nop
 8002a24:	20000a0c 	.word	0x20000a0c
 8002a28:	200009c8 	.word	0x200009c8
 8002a2c:	40240000 	.word	0x40240000
 8002a30:	20000b44 	.word	0x20000b44
 8002a34:	200009d8 	.word	0x200009d8
 8002a38:	20000c7c 	.word	0x20000c7c
 8002a3c:	20000a08 	.word	0x20000a08
							AT24XX_Update(i * 2 + 3000, byteL(hP[i]));
 8002a40:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a44:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	b29c      	uxth	r4, r3
 8002a4e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a52:	4abc      	ldr	r2, [pc, #752]	; (8002d44 <main+0x1158>)
 8002a54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7ff f86c 	bl	8001b38 <byteL>
 8002a60:	4603      	mov	r3, r0
 8002a62:	4619      	mov	r1, r3
 8002a64:	4620      	mov	r0, r4
 8002a66:	f7fd fc3d 	bl	80002e4 <AT24XX_Update>
							AT24XX_Update(i * 2 + 1 + 3000, byteH(hP[i]));
 8002a6a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f603 33b9 	addw	r3, r3, #3001	; 0xbb9
 8002a76:	b29c      	uxth	r4, r3
 8002a78:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a7c:	4ab1      	ldr	r2, [pc, #708]	; (8002d44 <main+0x1158>)
 8002a7e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff f864 	bl	8001b52 <byteH>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fd fc28 	bl	80002e4 <AT24XX_Update>
						for (uint16_t i = 0; i < 155; i++) {
 8002a94:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002a98:	3301      	adds	r3, #1
 8002a9a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8002a9e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002aa2:	2b9a      	cmp	r3, #154	; 0x9a
 8002aa4:	d9cc      	bls.n	8002a40 <main+0xe54>
						}

						viewGraphs = 0;
 8002aa6:	4ba8      	ldr	r3, [pc, #672]	; (8002d48 <main+0x115c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
					}

					LCD_Rect(2, 189, 157, 129, 1, BLUE);
 8002aac:	23ff      	movs	r3, #255	; 0xff
 8002aae:	9301      	str	r3, [sp, #4]
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	2381      	movs	r3, #129	; 0x81
 8002ab6:	229d      	movs	r2, #157	; 0x9d
 8002ab8:	21bd      	movs	r1, #189	; 0xbd
 8002aba:	2002      	movs	r0, #2
 8002abc:	f001 fd54 	bl	8004568 <LCD_Rect>
					int16_t valMap = map(((int16_t)(temperature * 10)), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002ac0:	4ba2      	ldr	r3, [pc, #648]	; (8002d4c <main+0x1160>)
 8002ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac6:	f04f 0200 	mov.w	r2, #0
 8002aca:	4ba1      	ldr	r3, [pc, #644]	; (8002d50 <main+0x1164>)
 8002acc:	f016 f89c 	bl	8018c08 <__aeabi_dmul>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f016 fb46 	bl	8019168 <__aeabi_d2iz>
 8002adc:	4603      	mov	r3, r0
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	b298      	uxth	r0, r3
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002aec:	21e2      	movs	r1, #226	; 0xe2
 8002aee:	f7fe fff7 	bl	8001ae0 <map>
 8002af2:	ec53 2b10 	vmov	r2, r3, d0
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f016 fb35 	bl	8019168 <__aeabi_d2iz>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap < 0) valMap = 0;
 8002b04:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	da02      	bge.n	8002b12 <main+0xf26>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap > 127) valMap = 127;
 8002b12:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002b16:	2b7f      	cmp	r3, #127	; 0x7f
 8002b18:	dd02      	ble.n	8002b20 <main+0xf34>
 8002b1a:	237f      	movs	r3, #127	; 0x7f
 8002b1c:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					LCD_Line(3 + 155, 191, 3 + 155, 317, 1, BLACK);
 8002b20:	2300      	movs	r3, #0
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2301      	movs	r3, #1
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	f240 133d 	movw	r3, #317	; 0x13d
 8002b2c:	229e      	movs	r2, #158	; 0x9e
 8002b2e:	21bf      	movs	r1, #191	; 0xbf
 8002b30:	209e      	movs	r0, #158	; 0x9e
 8002b32:	f001 fbb1 	bl	8004298 <LCD_Line>
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002b36:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d023      	beq.n	8002b86 <main+0xf9a>
 8002b3e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002b42:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002b46:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b48:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002b4c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002b5a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002b5e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(3 + 155, 191 + (127 - valMap), 3 + 155, 317,
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	f001 fa73 	bl	8004056 <RGB>
 8002b70:	4603      	mov	r3, r0
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	2301      	movs	r3, #1
 8002b76:	9300      	str	r3, [sp, #0]
 8002b78:	f240 133d 	movw	r3, #317	; 0x13d
 8002b7c:	229e      	movs	r2, #158	; 0x9e
 8002b7e:	4621      	mov	r1, r4
 8002b80:	209e      	movs	r0, #158	; 0x9e
 8002b82:	f001 fb89 	bl	8004298 <LCD_Line>

					LCD_Rect(161, 189, 157, 129, 1, BLUE);
 8002b86:	23ff      	movs	r3, #255	; 0xff
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	9300      	str	r3, [sp, #0]
 8002b8e:	2381      	movs	r3, #129	; 0x81
 8002b90:	229d      	movs	r2, #157	; 0x9d
 8002b92:	21bd      	movs	r1, #189	; 0xbd
 8002b94:	20a1      	movs	r0, #161	; 0xa1
 8002b96:	f001 fce7 	bl	8004568 <LCD_Rect>
					valMap = map(((int16_t)(humidity * 10)), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002b9a:	4b6e      	ldr	r3, [pc, #440]	; (8002d54 <main+0x1168>)
 8002b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba0:	f04f 0200 	mov.w	r2, #0
 8002ba4:	4b6a      	ldr	r3, [pc, #424]	; (8002d50 <main+0x1164>)
 8002ba6:	f016 f82f 	bl	8018c08 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f016 fad9 	bl	8019168 <__aeabi_d2iz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	b298      	uxth	r0, r3
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002bc6:	2150      	movs	r1, #80	; 0x50
 8002bc8:	f7fe ff8a 	bl	8001ae0 <map>
 8002bcc:	ec53 2b10 	vmov	r2, r3, d0
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f016 fac8 	bl	8019168 <__aeabi_d2iz>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap < 0) valMap = 0;
 8002bde:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da02      	bge.n	8002bec <main+0x1000>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap > 127) valMap = 127;
 8002bec:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002bf0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bf2:	dd02      	ble.n	8002bfa <main+0x100e>
 8002bf4:	237f      	movs	r3, #127	; 0x7f
 8002bf6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					LCD_Line(162 + 155, 191, 162 + 155, 317, 1, BLACK);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	2301      	movs	r3, #1
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	f240 133d 	movw	r3, #317	; 0x13d
 8002c06:	f240 123d 	movw	r2, #317	; 0x13d
 8002c0a:	21bf      	movs	r1, #191	; 0xbf
 8002c0c:	f240 103d 	movw	r0, #317	; 0x13d
 8002c10:	f001 fb42 	bl	8004298 <LCD_Line>
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002c14:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d025      	beq.n	8002c68 <main+0x107c>
 8002c1c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002c20:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002c24:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c26:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002c2a:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002c38:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002c3c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(162 + 155, 191 + (127 - valMap), 162 + 155, 317,
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	2100      	movs	r1, #0
 8002c4a:	f001 fa04 	bl	8004056 <RGB>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	f240 133d 	movw	r3, #317	; 0x13d
 8002c5a:	f240 123d 	movw	r2, #317	; 0x13d
 8002c5e:	4621      	mov	r1, r4
 8002c60:	f240 103d 	movw	r0, #317	; 0x13d
 8002c64:	f001 fb18 	bl	8004298 <LCD_Line>

					LCD_Rect(320, 189, 157, 129, 1, BLUE);
 8002c68:	23ff      	movs	r3, #255	; 0xff
 8002c6a:	9301      	str	r3, [sp, #4]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	9300      	str	r3, [sp, #0]
 8002c70:	2381      	movs	r3, #129	; 0x81
 8002c72:	229d      	movs	r2, #157	; 0x9d
 8002c74:	21bd      	movs	r1, #189	; 0xbd
 8002c76:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8002c7a:	f001 fc75 	bl	8004568 <LCD_Rect>
					valMap = map(((int16_t)(pressure)), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002c7e:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <main+0x116c>)
 8002c80:	8818      	ldrh	r0, [r3, #0]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	2300      	movs	r3, #0
 8002c88:	f240 4229 	movw	r2, #1065	; 0x429
 8002c8c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002c90:	f7fe ff26 	bl	8001ae0 <map>
 8002c94:	ec53 2b10 	vmov	r2, r3, d0
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f016 fa64 	bl	8019168 <__aeabi_d2iz>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap < 0) valMap = 0;
 8002ca6:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da02      	bge.n	8002cb4 <main+0x10c8>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					if (valMap > 127) valMap = 127;
 8002cb4:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cba:	dd02      	ble.n	8002cc2 <main+0x10d6>
 8002cbc:	237f      	movs	r3, #127	; 0x7f
 8002cbe:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
					LCD_Line(321 + 155, 191, 321 + 155, 317, 1, BLACK);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f240 133d 	movw	r3, #317	; 0x13d
 8002cce:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002cd2:	21bf      	movs	r1, #191	; 0xbf
 8002cd4:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002cd8:	f001 fade 	bl	8004298 <LCD_Line>
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002cdc:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d025      	beq.n	8002d30 <main+0x1144>
 8002ce4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ce8:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002cec:	b29c      	uxth	r4, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002cee:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002cf2:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	b2d8      	uxtb	r0, r3
							1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002d00:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002d04:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
					if (valMap) LCD_Line(321 + 155, 191 + (127 - valMap), 321 + 155, 317,
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	461a      	mov	r2, r3
 8002d10:	2100      	movs	r1, #0
 8002d12:	f001 f9a0 	bl	8004056 <RGB>
 8002d16:	4603      	mov	r3, r0
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f240 133d 	movw	r3, #317	; 0x13d
 8002d22:	f44f 72ee 	mov.w	r2, #476	; 0x1dc
 8002d26:	4621      	mov	r1, r4
 8002d28:	f44f 70ee 	mov.w	r0, #476	; 0x1dc
 8002d2c:	f001 fab4 	bl	8004298 <LCD_Line>

					if (!viewGraphs) {
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <main+0x115c>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 8192 	bne.w	800305e <main+0x1472>

						for (uint16_t i = 0; i < 155 ; i++) {
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002d40:	e07b      	b.n	8002e3a <main+0x124e>
 8002d42:	bf00      	nop
 8002d44:	20000c7c 	.word	0x20000c7c
 8002d48:	200009bc 	.word	0x200009bc
 8002d4c:	200009c8 	.word	0x200009c8
 8002d50:	40240000 	.word	0x40240000
 8002d54:	200009d8 	.word	0x200009d8
 8002d58:	20000a08 	.word	0x20000a08
							valMap = map(((int16_t)hT[i]), MIN_TEMPERATURE_X10, MAX_TEMPERATURE_X10, 0, 128);
 8002d5c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002d60:	4ab3      	ldr	r2, [pc, #716]	; (8003030 <main+0x1444>)
 8002d62:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d66:	b298      	uxth	r0, r3
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f44f 7291 	mov.w	r2, #290	; 0x122
 8002d72:	21e2      	movs	r1, #226	; 0xe2
 8002d74:	f7fe feb4 	bl	8001ae0 <map>
 8002d78:	ec53 2b10 	vmov	r2, r3, d0
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f016 f9f2 	bl	8019168 <__aeabi_d2iz>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap < 0) valMap = 0;
 8002d8a:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	da02      	bge.n	8002d98 <main+0x11ac>
 8002d92:	2300      	movs	r3, #0
 8002d94:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap > 127) valMap = 127;
 8002d98:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d9e:	dd02      	ble.n	8002da6 <main+0x11ba>
 8002da0:	237f      	movs	r3, #127	; 0x7f
 8002da2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							LCD_Line(3 + (154-i), 191, 3 + (154-i), 317, 1, BLACK);
 8002da6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002daa:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002dae:	b298      	uxth	r0, r3
 8002db0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002db4:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	f240 133d 	movw	r3, #317	; 0x13d
 8002dc6:	21bf      	movs	r1, #191	; 0xbf
 8002dc8:	f001 fa66 	bl	8004298 <LCD_Line>
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002dcc:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d02d      	beq.n	8002e30 <main+0x1244>
 8002dd4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002dd8:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002ddc:	b29c      	uxth	r4, r3
 8002dde:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002de2:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002de6:	b29d      	uxth	r5, r3
 8002de8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002dec:	f1c3 039d 	rsb	r3, r3, #157	; 0x9d
 8002df0:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002df2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002df6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002e04:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002e08:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(3 + (154-i), 191 + (127 - valMap), 3 + (154-i), 317,
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	461a      	mov	r2, r3
 8002e14:	2100      	movs	r1, #0
 8002e16:	f001 f91e 	bl	8004056 <RGB>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	2301      	movs	r3, #1
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	f240 133d 	movw	r3, #317	; 0x13d
 8002e26:	4632      	mov	r2, r6
 8002e28:	4629      	mov	r1, r5
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	f001 fa34 	bl	8004298 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002e30:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e34:	3301      	adds	r3, #1
 8002e36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002e3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002e3e:	2b9a      	cmp	r3, #154	; 0x9a
 8002e40:	d98c      	bls.n	8002d5c <main+0x1170>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002e48:	e06e      	b.n	8002f28 <main+0x133c>
							valMap = map(((int16_t)hH[i]), MIN_HUMIDITY_X10, MAX_HUMIDITY_X10, 0, 128);
 8002e4a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002e4e:	4a79      	ldr	r2, [pc, #484]	; (8003034 <main+0x1448>)
 8002e50:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002e54:	b298      	uxth	r0, r3
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8002e60:	2150      	movs	r1, #80	; 0x50
 8002e62:	f7fe fe3d 	bl	8001ae0 <map>
 8002e66:	ec53 2b10 	vmov	r2, r3, d0
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f016 f97b 	bl	8019168 <__aeabi_d2iz>
 8002e72:	4603      	mov	r3, r0
 8002e74:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap < 0) valMap = 0;
 8002e78:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da02      	bge.n	8002e86 <main+0x129a>
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap > 127) valMap = 127;
 8002e86:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002e8c:	dd02      	ble.n	8002e94 <main+0x12a8>
 8002e8e:	237f      	movs	r3, #127	; 0x7f
 8002e90:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							LCD_Line(162 + (154-i), 191, 162 + (154-i), 317, 1, BLACK);
 8002e94:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002e98:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002e9c:	b298      	uxth	r0, r3
 8002e9e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002ea2:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2301      	movs	r3, #1
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	f240 133d 	movw	r3, #317	; 0x13d
 8002eb4:	21bf      	movs	r1, #191	; 0xbf
 8002eb6:	f001 f9ef 	bl	8004298 <LCD_Line>
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002eba:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02d      	beq.n	8002f1e <main+0x1332>
 8002ec2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002ec6:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002eca:	b29c      	uxth	r4, r3
 8002ecc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002ed0:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002ed4:	b29d      	uxth	r5, r3
 8002ed6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002eda:	f5c3 739e 	rsb	r3, r3, #316	; 0x13c
 8002ede:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ee0:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002ee4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002ef2:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002ef6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(162 + (154-i), 191 + (127 - valMap), 162 + (154-i), 317,
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f001 f8a7 	bl	8004056 <RGB>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	f240 133d 	movw	r3, #317	; 0x13d
 8002f14:	4632      	mov	r2, r6
 8002f16:	4629      	mov	r1, r5
 8002f18:	4620      	mov	r0, r4
 8002f1a:	f001 f9bd 	bl	8004298 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8002f1e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002f22:	3301      	adds	r3, #1
 8002f24:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8002f28:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8002f2c:	2b9a      	cmp	r3, #154	; 0x9a
 8002f2e:	d98c      	bls.n	8002e4a <main+0x125e>
						}

						for (uint16_t i = 0; i < 155 ; i++) {
 8002f30:	2300      	movs	r3, #0
 8002f32:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8002f36:	e073      	b.n	8003020 <main+0x1434>
							valMap = map(((int16_t)hP[i]), MIN_PRESSURE, MAX_PRESSURE, 0, 128);
 8002f38:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f3c:	4a3e      	ldr	r2, [pc, #248]	; (8003038 <main+0x144c>)
 8002f3e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002f42:	b298      	uxth	r0, r3
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f240 4229 	movw	r2, #1065	; 0x429
 8002f4e:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002f52:	f7fe fdc5 	bl	8001ae0 <map>
 8002f56:	ec53 2b10 	vmov	r2, r3, d0
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f016 f903 	bl	8019168 <__aeabi_d2iz>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap < 0) valMap = 0;
 8002f68:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da02      	bge.n	8002f76 <main+0x138a>
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							if (valMap > 127) valMap = 127;
 8002f76:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8002f7c:	dd02      	ble.n	8002f84 <main+0x1398>
 8002f7e:	237f      	movs	r3, #127	; 0x7f
 8002f80:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
							LCD_Line(321 + (154-i), 191, 321 + (154-i), 317, 1, BLACK);
 8002f84:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f88:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	b298      	uxth	r0, r3
 8002f90:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002f94:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002f98:	3301      	adds	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9301      	str	r3, [sp, #4]
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	f240 133d 	movw	r3, #317	; 0x13d
 8002fa8:	21bf      	movs	r1, #191	; 0xbf
 8002faa:	f001 f975 	bl	8004298 <LCD_Line>
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002fae:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d02f      	beq.n	8003016 <main+0x142a>
 8002fb6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002fba:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	b29c      	uxth	r4, r3
 8002fc2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002fc6:	f5c3 739f 	rsb	r3, r3, #318	; 0x13e
 8002fca:	b29d      	uxth	r5, r3
 8002fcc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002fd0:	f5c3 73ed 	rsb	r3, r3, #474	; 0x1da
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b29e      	uxth	r6, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fd8:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002fdc:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	b2d8      	uxtb	r0, r3
									1, RGB(255 - ((127 - valMap) * 2), 0, 255 - (255 - ((127 - valMap) * 2))));
 8002fea:	f9b7 309e 	ldrsh.w	r3, [r7, #158]	; 0x9e
 8002fee:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
							if (valMap) LCD_Line(321 + (154-i), 191 + (127 - valMap), 321 + (154-i), 317,
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	005b      	lsls	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	f001 f82b 	bl	8004056 <RGB>
 8003000:	4603      	mov	r3, r0
 8003002:	9301      	str	r3, [sp, #4]
 8003004:	2301      	movs	r3, #1
 8003006:	9300      	str	r3, [sp, #0]
 8003008:	f240 133d 	movw	r3, #317	; 0x13d
 800300c:	4632      	mov	r2, r6
 800300e:	4629      	mov	r1, r5
 8003010:	4620      	mov	r0, r4
 8003012:	f001 f941 	bl	8004298 <LCD_Line>
						for (uint16_t i = 0; i < 155 ; i++) {
 8003016:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800301a:	3301      	adds	r3, #1
 800301c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8003020:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003024:	2b9a      	cmp	r3, #154	; 0x9a
 8003026:	d987      	bls.n	8002f38 <main+0x134c>
						}
						for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800302e:	e00e      	b.n	800304e <main+0x1462>
 8003030:	20000a0c 	.word	0x20000a0c
 8003034:	20000b44 	.word	0x20000b44
 8003038:	20000c7c 	.word	0x20000c7c
 800303c:	4a8e      	ldr	r2, [pc, #568]	; (8003278 <main+0x168c>)
 800303e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003042:	6353      	str	r3, [r2, #52]	; 0x34
 8003044:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003048:	3301      	adds	r3, #1
 800304a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800304e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003056:	d9f1      	bls.n	800303c <main+0x1450>
						viewGraphs = 1;
 8003058:	4b88      	ldr	r3, [pc, #544]	; (800327c <main+0x1690>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
					}
				}
			}

			if (rx_index != 0) {
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <main+0x1694>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8393 	beq.w	800378e <main+0x1ba2>
				if (memcmp(rx_buffer, "TS", 2) == 0) {
 8003068:	2202      	movs	r2, #2
 800306a:	4986      	ldr	r1, [pc, #536]	; (8003284 <main+0x1698>)
 800306c:	4886      	ldr	r0, [pc, #536]	; (8003288 <main+0x169c>)
 800306e:	f01a ffa7 	bl	801dfc0 <memcmp>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f040 808a 	bne.w	800318e <main+0x15a2>

					char val[2];

					val[0] = rx_buffer[2];
 800307a:	4b83      	ldr	r3, [pc, #524]	; (8003288 <main+0x169c>)
 800307c:	789b      	ldrb	r3, [r3, #2]
 800307e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[3];
 8003082:	4b81      	ldr	r3, [pc, #516]	; (8003288 <main+0x169c>)
 8003084:	78db      	ldrb	r3, [r3, #3]
 8003086:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setHrs(atoi(val));
 800308a:	f107 0320 	add.w	r3, r7, #32
 800308e:	4618      	mov	r0, r3
 8003090:	f016 fae3 	bl	801965a <atoi>
 8003094:	4603      	mov	r3, r0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fff5 	bl	8001088 <DS3231_setHrs>

					val[0] = rx_buffer[4];
 800309e:	4b7a      	ldr	r3, [pc, #488]	; (8003288 <main+0x169c>)
 80030a0:	791b      	ldrb	r3, [r3, #4]
 80030a2:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[5];
 80030a6:	4b78      	ldr	r3, [pc, #480]	; (8003288 <main+0x169c>)
 80030a8:	795b      	ldrb	r3, [r3, #5]
 80030aa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMin(atoi(val));
 80030ae:	f107 0320 	add.w	r3, r7, #32
 80030b2:	4618      	mov	r0, r3
 80030b4:	f016 fad1 	bl	801965a <atoi>
 80030b8:	4603      	mov	r3, r0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd ffc3 	bl	8001048 <DS3231_setMin>

					val[0] = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setSec(atoi(val));
 80030ce:	f107 0320 	add.w	r3, r7, #32
 80030d2:	4618      	mov	r0, r3
 80030d4:	f016 fac1 	bl	801965a <atoi>
 80030d8:	4603      	mov	r3, r0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd ff93 	bl	8001008 <DS3231_setSec>

					val[0] = rx_buffer[6];
 80030e2:	4b69      	ldr	r3, [pc, #420]	; (8003288 <main+0x169c>)
 80030e4:	799b      	ldrb	r3, [r3, #6]
 80030e6:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[7];
 80030ea:	4b67      	ldr	r3, [pc, #412]	; (8003288 <main+0x169c>)
 80030ec:	79db      	ldrb	r3, [r3, #7]
 80030ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDate(atoi(val));
 80030f2:	f107 0320 	add.w	r3, r7, #32
 80030f6:	4618      	mov	r0, r3
 80030f8:	f016 faaf 	bl	801965a <atoi>
 80030fc:	4603      	mov	r3, r0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	4618      	mov	r0, r3
 8003102:	f7fe f801 	bl	8001108 <DS3231_setDate>

					val[0] = rx_buffer[8];
 8003106:	4b60      	ldr	r3, [pc, #384]	; (8003288 <main+0x169c>)
 8003108:	7a1b      	ldrb	r3, [r3, #8]
 800310a:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[9];
 800310e:	4b5e      	ldr	r3, [pc, #376]	; (8003288 <main+0x169c>)
 8003110:	7a5b      	ldrb	r3, [r3, #9]
 8003112:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setMonth(atoi(val));
 8003116:	f107 0320 	add.w	r3, r7, #32
 800311a:	4618      	mov	r0, r3
 800311c:	f016 fa9d 	bl	801965a <atoi>
 8003120:	4603      	mov	r3, r0
 8003122:	b2db      	uxtb	r3, r3
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe f80f 	bl	8001148 <DS3231_setMonth>

					val[0] = rx_buffer[10];
 800312a:	4b57      	ldr	r3, [pc, #348]	; (8003288 <main+0x169c>)
 800312c:	7a9b      	ldrb	r3, [r3, #10]
 800312e:	f887 3020 	strb.w	r3, [r7, #32]
					val[1] = rx_buffer[11];
 8003132:	4b55      	ldr	r3, [pc, #340]	; (8003288 <main+0x169c>)
 8003134:	7adb      	ldrb	r3, [r3, #11]
 8003136:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setYear(atoi(val));
 800313a:	f107 0320 	add.w	r3, r7, #32
 800313e:	4618      	mov	r0, r3
 8003140:	f016 fa8b 	bl	801965a <atoi>
 8003144:	4603      	mov	r3, r0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe f81d 	bl	8001188 <DS3231_setYear>

					val[1] = rx_buffer[12];
 800314e:	4b4e      	ldr	r3, [pc, #312]	; (8003288 <main+0x169c>)
 8003150:	7b1b      	ldrb	r3, [r3, #12]
 8003152:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
					DS3231_setDay(atoi(val));
 8003156:	f107 0320 	add.w	r3, r7, #32
 800315a:	4618      	mov	r0, r3
 800315c:	f016 fa7d 	bl	801965a <atoi>
 8003160:	4603      	mov	r3, r0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd ffaf 	bl	80010c8 <DS3231_setDay>

					for (uint32_t i = 0; i <= 65536; i++) TIM1->CCR1 = i;
 800316a:	2300      	movs	r3, #0
 800316c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003170:	e008      	b.n	8003184 <main+0x1598>
 8003172:	4a41      	ldr	r2, [pc, #260]	; (8003278 <main+0x168c>)
 8003174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003178:	6353      	str	r3, [r2, #52]	; 0x34
 800317a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800317e:	3301      	adds	r3, #1
 8003180:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003184:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d9f1      	bls.n	8003172 <main+0x1586>
				}

				if (memcmp(rx_buffer, "CE", 2) == 0) {
 800318e:	2202      	movs	r2, #2
 8003190:	493e      	ldr	r1, [pc, #248]	; (800328c <main+0x16a0>)
 8003192:	483d      	ldr	r0, [pc, #244]	; (8003288 <main+0x169c>)
 8003194:	f01a ff14 	bl	801dfc0 <memcmp>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d122      	bne.n	80031e4 <main+0x15f8>
					for (uint16_t i = 0; i < 4096; i++) AT24XX_Update(i, 0);
 800319e:	2300      	movs	r3, #0
 80031a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80031a4:	e00a      	b.n	80031bc <main+0x15d0>
 80031a6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f899 	bl	80002e4 <AT24XX_Update>
 80031b2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80031b6:	3301      	adds	r3, #1
 80031b8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80031bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d3ef      	bcc.n	80031a6 <main+0x15ba>
					uint8_t uartTransmit[] = "EEPROM IS CLEANED\r\n";
 80031c6:	4b32      	ldr	r3, [pc, #200]	; (8003290 <main+0x16a4>)
 80031c8:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80031cc:	461d      	mov	r5, r3
 80031ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031d2:	682b      	ldr	r3, [r5, #0]
 80031d4:	6023      	str	r3, [r4, #0]
					HAL_UART_Transmit(&huart1, uartTransmit, sizeof(uartTransmit), 100);
 80031d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80031da:	2364      	movs	r3, #100	; 0x64
 80031dc:	2214      	movs	r2, #20
 80031de:	482d      	ldr	r0, [pc, #180]	; (8003294 <main+0x16a8>)
 80031e0:	f012 fa35 	bl	801564e <HAL_UART_Transmit>
				}

				if (memcmp(rx_buffer, "RS", 2) == 0) {
 80031e4:	2202      	movs	r2, #2
 80031e6:	492c      	ldr	r1, [pc, #176]	; (8003298 <main+0x16ac>)
 80031e8:	4827      	ldr	r0, [pc, #156]	; (8003288 <main+0x169c>)
 80031ea:	f01a fee9 	bl	801dfc0 <memcmp>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 82b7 	bne.w	8003764 <main+0x1b78>

					char valT[4] = { 0 };
 80031f6:	2300      	movs	r3, #0
 80031f8:	64bb      	str	r3, [r7, #72]	; 0x48

					for (uint8_t i = 0; i < 4; i++) valT[i] = rx_buffer[2 + i];
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8003200:	e00f      	b.n	8003222 <main+0x1636>
 8003202:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003206:	1c9a      	adds	r2, r3, #2
 8003208:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800320c:	491e      	ldr	r1, [pc, #120]	; (8003288 <main+0x169c>)
 800320e:	5c8a      	ldrb	r2, [r1, r2]
 8003210:	33b8      	adds	r3, #184	; 0xb8
 8003212:	443b      	add	r3, r7
 8003214:	f803 2c70 	strb.w	r2, [r3, #-112]
 8003218:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800321c:	3301      	adds	r3, #1
 800321e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8003222:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003226:	2b03      	cmp	r3, #3
 8003228:	d9eb      	bls.n	8003202 <main+0x1616>

					temperatureRemote = atoi(valT);
 800322a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800322e:	4618      	mov	r0, r3
 8003230:	f016 fa13 	bl	801965a <atoi>
 8003234:	4603      	mov	r3, r0
 8003236:	4618      	mov	r0, r3
 8003238:	f015 fc7c 	bl	8018b34 <__aeabi_i2d>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4916      	ldr	r1, [pc, #88]	; (800329c <main+0x16b0>)
 8003242:	e9c1 2300 	strd	r2, r3, [r1]
					temperatureRemote = temperatureRemote / 10;
 8003246:	4b15      	ldr	r3, [pc, #84]	; (800329c <main+0x16b0>)
 8003248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <main+0x16b4>)
 8003252:	f015 fe03 	bl	8018e5c <__aeabi_ddiv>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4910      	ldr	r1, [pc, #64]	; (800329c <main+0x16b0>)
 800325c:	e9c1 2300 	strd	r2, r3, [r1]

					char valH[3] = { 0 };
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <main+0x16b8>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003268:	2300      	movs	r3, #0
 800326a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

					for (uint8_t i = 0; i < 3; i++) valH[i] = rx_buffer[6 + i];
 800326e:	2300      	movs	r3, #0
 8003270:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8003274:	e028      	b.n	80032c8 <main+0x16dc>
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	200009bc 	.word	0x200009bc
 8003280:	20000dc4 	.word	0x20000dc4
 8003284:	08051e8c 	.word	0x08051e8c
 8003288:	20000db4 	.word	0x20000db4
 800328c:	08051e90 	.word	0x08051e90
 8003290:	08051ec8 	.word	0x08051ec8
 8003294:	20000928 	.word	0x20000928
 8003298:	08051e94 	.word	0x08051e94
 800329c:	200009e8 	.word	0x200009e8
 80032a0:	40240000 	.word	0x40240000
 80032a4:	08051d04 	.word	0x08051d04
 80032a8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80032ac:	1d9a      	adds	r2, r3, #6
 80032ae:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80032b2:	499d      	ldr	r1, [pc, #628]	; (8003528 <main+0x193c>)
 80032b4:	5c8a      	ldrb	r2, [r1, r2]
 80032b6:	33b8      	adds	r3, #184	; 0xb8
 80032b8:	443b      	add	r3, r7
 80032ba:	f803 2c74 	strb.w	r2, [r3, #-116]
 80032be:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80032c2:	3301      	adds	r3, #1
 80032c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 80032c8:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d9eb      	bls.n	80032a8 <main+0x16bc>

					humidityRemote = atoi(valH);
 80032d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80032d4:	4618      	mov	r0, r3
 80032d6:	f016 f9c0 	bl	801965a <atoi>
 80032da:	4603      	mov	r3, r0
 80032dc:	4618      	mov	r0, r3
 80032de:	f015 fc29 	bl	8018b34 <__aeabi_i2d>
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	4991      	ldr	r1, [pc, #580]	; (800352c <main+0x1940>)
 80032e8:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemote = humidityRemote / 10;
 80032ec:	4b8f      	ldr	r3, [pc, #572]	; (800352c <main+0x1940>)
 80032ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	4b8e      	ldr	r3, [pc, #568]	; (8003530 <main+0x1944>)
 80032f8:	f015 fdb0 	bl	8018e5c <__aeabi_ddiv>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	498a      	ldr	r1, [pc, #552]	; (800352c <main+0x1940>)
 8003302:	e9c1 2300 	strd	r2, r3, [r1]

					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003306:	4b8b      	ldr	r3, [pc, #556]	; (8003534 <main+0x1948>)
 8003308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800330c:	4b8a      	ldr	r3, [pc, #552]	; (8003538 <main+0x194c>)
 800330e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003312:	f015 fee1 	bl	80190d8 <__aeabi_dcmpeq>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d115      	bne.n	8003348 <main+0x175c>
 800331c:	4b85      	ldr	r3, [pc, #532]	; (8003534 <main+0x1948>)
 800331e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	4b85      	ldr	r3, [pc, #532]	; (800353c <main+0x1950>)
 8003328:	f015 fee0 	bl	80190ec <__aeabi_dcmplt>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00a      	beq.n	8003348 <main+0x175c>
 8003332:	4b80      	ldr	r3, [pc, #512]	; (8003534 <main+0x1948>)
 8003334:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	4b80      	ldr	r3, [pc, #512]	; (8003540 <main+0x1954>)
 800333e:	f015 fef3 	bl	8019128 <__aeabi_dcmpgt>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d118      	bne.n	800337a <main+0x178e>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003348:	4b78      	ldr	r3, [pc, #480]	; (800352c <main+0x1940>)
 800334a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800334e:	4b7d      	ldr	r3, [pc, #500]	; (8003544 <main+0x1958>)
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
					if ((temperatureRemote != temperatureRemoteLast && temperatureRemote < 85 && temperatureRemote > -40) ||
 8003354:	f015 fec0 	bl	80190d8 <__aeabi_dcmpeq>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8202 	bne.w	8003764 <main+0x1b78>
							(humidityRemote != humidityRemoteLast && humidityRemote > 0)) {
 8003360:	4b72      	ldr	r3, [pc, #456]	; (800352c <main+0x1940>)
 8003362:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f015 fedb 	bl	8019128 <__aeabi_dcmpgt>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 81f5 	beq.w	8003764 <main+0x1b78>

						remoteSensorLastUpdate = 0;
 800337a:	4b73      	ldr	r3, [pc, #460]	; (8003548 <main+0x195c>)
 800337c:	2200      	movs	r2, #0
 800337e:	801a      	strh	r2, [r3, #0]

						sprintf(clockPrint, "%02d", rtcSecLast);
 8003380:	4b72      	ldr	r3, [pc, #456]	; (800354c <main+0x1960>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800338a:	4971      	ldr	r1, [pc, #452]	; (8003550 <main+0x1964>)
 800338c:	4618      	mov	r0, r3
 800338e:	f017 f81b 	bl	801a3c8 <siprintf>
						LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 8003392:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003396:	2300      	movs	r3, #0
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	2301      	movs	r3, #1
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	4b6d      	ldr	r3, [pc, #436]	; (8003554 <main+0x1968>)
 80033a0:	2128      	movs	r1, #40	; 0x28
 80033a2:	f240 1077 	movw	r0, #375	; 0x177
 80033a6:	f002 f893 	bl	80054d0 <LCD_Font>

						char weatherPrintRemoteT[5];
						if (temperatureRemoteLast <= -10) {
 80033aa:	4b63      	ldr	r3, [pc, #396]	; (8003538 <main+0x194c>)
 80033ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <main+0x196c>)
 80033b6:	f015 fea3 	bl	8019100 <__aeabi_dcmple>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d014      	beq.n	80033ea <main+0x17fe>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80033c0:	4b5d      	ldr	r3, [pc, #372]	; (8003538 <main+0x194c>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80033ca:	4964      	ldr	r1, [pc, #400]	; (800355c <main+0x1970>)
 80033cc:	f016 fffc 	bl	801a3c8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80033d0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80033d4:	2300      	movs	r3, #0
 80033d6:	9301      	str	r3, [sp, #4]
 80033d8:	2301      	movs	r3, #1
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <main+0x1968>)
 80033de:	215a      	movs	r1, #90	; 0x5a
 80033e0:	f240 1061 	movw	r0, #353	; 0x161
 80033e4:	f002 f874 	bl	80054d0 <LCD_Font>
 80033e8:	e076      	b.n	80034d8 <main+0x18ec>
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 80033ea:	4b53      	ldr	r3, [pc, #332]	; (8003538 <main+0x194c>)
 80033ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	f015 fe78 	bl	80190ec <__aeabi_dcmplt>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d01f      	beq.n	8003442 <main+0x1856>
 8003402:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <main+0x194c>)
 8003404:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	4b52      	ldr	r3, [pc, #328]	; (8003558 <main+0x196c>)
 800340e:	f015 fe8b 	bl	8019128 <__aeabi_dcmpgt>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d014      	beq.n	8003442 <main+0x1856>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003418:	4b47      	ldr	r3, [pc, #284]	; (8003538 <main+0x194c>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003422:	494e      	ldr	r1, [pc, #312]	; (800355c <main+0x1970>)
 8003424:	f016 ffd0 	bl	801a3c8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003428:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800342c:	2300      	movs	r3, #0
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2301      	movs	r3, #1
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4b47      	ldr	r3, [pc, #284]	; (8003554 <main+0x1968>)
 8003436:	215a      	movs	r1, #90	; 0x5a
 8003438:	f240 1081 	movw	r0, #385	; 0x181
 800343c:	f002 f848 	bl	80054d0 <LCD_Font>
 8003440:	e04a      	b.n	80034d8 <main+0x18ec>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <main+0x194c>)
 8003444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	f015 fe6a 	bl	8019128 <__aeabi_dcmpgt>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01f      	beq.n	800349a <main+0x18ae>
 800345a:	4b37      	ldr	r3, [pc, #220]	; (8003538 <main+0x194c>)
 800345c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <main+0x1944>)
 8003466:	f015 fe41 	bl	80190ec <__aeabi_dcmplt>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d014      	beq.n	800349a <main+0x18ae>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 8003470:	4b31      	ldr	r3, [pc, #196]	; (8003538 <main+0x194c>)
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800347a:	4939      	ldr	r1, [pc, #228]	; (8003560 <main+0x1974>)
 800347c:	f016 ffa4 	bl	801a3c8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003480:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003484:	2300      	movs	r3, #0
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	2301      	movs	r3, #1
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4b31      	ldr	r3, [pc, #196]	; (8003554 <main+0x1968>)
 800348e:	215a      	movs	r1, #90	; 0x5a
 8003490:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003494:	f002 f81c 	bl	80054d0 <LCD_Font>
 8003498:	e01e      	b.n	80034d8 <main+0x18ec>
						}
						else if (temperatureRemoteLast >= 10) {
 800349a:	4b27      	ldr	r3, [pc, #156]	; (8003538 <main+0x194c>)
 800349c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	4b22      	ldr	r3, [pc, #136]	; (8003530 <main+0x1944>)
 80034a6:	f015 fe35 	bl	8019114 <__aeabi_dcmpge>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <main+0x18ec>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80034b0:	4b21      	ldr	r3, [pc, #132]	; (8003538 <main+0x194c>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80034ba:	4929      	ldr	r1, [pc, #164]	; (8003560 <main+0x1974>)
 80034bc:	f016 ff84 	bl	801a3c8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80034c0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80034c4:	2300      	movs	r3, #0
 80034c6:	9301      	str	r3, [sp, #4]
 80034c8:	2301      	movs	r3, #1
 80034ca:	9300      	str	r3, [sp, #0]
 80034cc:	4b21      	ldr	r3, [pc, #132]	; (8003554 <main+0x1968>)
 80034ce:	215a      	movs	r1, #90	; 0x5a
 80034d0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 80034d4:	f001 fffc 	bl	80054d0 <LCD_Font>
						}
						temperatureRemoteLast = temperatureRemote;
 80034d8:	4b16      	ldr	r3, [pc, #88]	; (8003534 <main+0x1948>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	4916      	ldr	r1, [pc, #88]	; (8003538 <main+0x194c>)
 80034e0:	e9c1 2300 	strd	r2, r3, [r1]
						if (temperatureRemoteLast <= -10) {
 80034e4:	4b14      	ldr	r3, [pc, #80]	; (8003538 <main+0x194c>)
 80034e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	4b1a      	ldr	r3, [pc, #104]	; (8003558 <main+0x196c>)
 80034f0:	f015 fe06 	bl	8019100 <__aeabi_dcmple>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d034      	beq.n	8003564 <main+0x1978>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <main+0x194c>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003504:	4915      	ldr	r1, [pc, #84]	; (800355c <main+0x1970>)
 8003506:	f016 ff5f 	bl	801a3c8 <siprintf>
							LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800350a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800350e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	2301      	movs	r3, #1
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <main+0x1968>)
 800351a:	215a      	movs	r1, #90	; 0x5a
 800351c:	f240 1061 	movw	r0, #353	; 0x161
 8003520:	f001 ffd6 	bl	80054d0 <LCD_Font>
 8003524:	e098      	b.n	8003658 <main+0x1a6c>
 8003526:	bf00      	nop
 8003528:	20000db4 	.word	0x20000db4
 800352c:	200009f8 	.word	0x200009f8
 8003530:	40240000 	.word	0x40240000
 8003534:	200009e8 	.word	0x200009e8
 8003538:	200009f0 	.word	0x200009f0
 800353c:	40554000 	.word	0x40554000
 8003540:	c0440000 	.word	0xc0440000
 8003544:	20000a00 	.word	0x20000a00
 8003548:	20000004 	.word	0x20000004
 800354c:	20000000 	.word	0x20000000
 8003550:	08051e4c 	.word	0x08051e4c
 8003554:	08029660 	.word	0x08029660
 8003558:	c0240000 	.word	0xc0240000
 800355c:	08051e98 	.word	0x08051e98
 8003560:	08051ea0 	.word	0x08051ea0
						}
						else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003564:	4bac      	ldr	r3, [pc, #688]	; (8003818 <main+0x1c2c>)
 8003566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	f015 fdbb 	bl	80190ec <__aeabi_dcmplt>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d020      	beq.n	80035be <main+0x19d2>
 800357c:	4ba6      	ldr	r3, [pc, #664]	; (8003818 <main+0x1c2c>)
 800357e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	4ba5      	ldr	r3, [pc, #660]	; (800381c <main+0x1c30>)
 8003588:	f015 fdce 	bl	8019128 <__aeabi_dcmpgt>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d015      	beq.n	80035be <main+0x19d2>
							sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003592:	4ba1      	ldr	r3, [pc, #644]	; (8003818 <main+0x1c2c>)
 8003594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003598:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800359c:	49a0      	ldr	r1, [pc, #640]	; (8003820 <main+0x1c34>)
 800359e:	f016 ff13 	bl	801a3c8 <siprintf>
							LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035a2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80035a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	2301      	movs	r3, #1
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4b9c      	ldr	r3, [pc, #624]	; (8003824 <main+0x1c38>)
 80035b2:	215a      	movs	r1, #90	; 0x5a
 80035b4:	f240 1081 	movw	r0, #385	; 0x181
 80035b8:	f001 ff8a 	bl	80054d0 <LCD_Font>
 80035bc:	e04c      	b.n	8003658 <main+0x1a6c>
						}
						else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 80035be:	4b96      	ldr	r3, [pc, #600]	; (8003818 <main+0x1c2c>)
 80035c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	f015 fdac 	bl	8019128 <__aeabi_dcmpgt>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d020      	beq.n	8003618 <main+0x1a2c>
 80035d6:	4b90      	ldr	r3, [pc, #576]	; (8003818 <main+0x1c2c>)
 80035d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	4b91      	ldr	r3, [pc, #580]	; (8003828 <main+0x1c3c>)
 80035e2:	f015 fd83 	bl	80190ec <__aeabi_dcmplt>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d015      	beq.n	8003618 <main+0x1a2c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80035ec:	4b8a      	ldr	r3, [pc, #552]	; (8003818 <main+0x1c2c>)
 80035ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80035f6:	498d      	ldr	r1, [pc, #564]	; (800382c <main+0x1c40>)
 80035f8:	f016 fee6 	bl	801a3c8 <siprintf>
							LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 80035fc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2301      	movs	r3, #1
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4b86      	ldr	r3, [pc, #536]	; (8003824 <main+0x1c38>)
 800360c:	215a      	movs	r1, #90	; 0x5a
 800360e:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8003612:	f001 ff5d 	bl	80054d0 <LCD_Font>
 8003616:	e01f      	b.n	8003658 <main+0x1a6c>
						}
						else if (temperatureRemoteLast >= 10) {
 8003618:	4b7f      	ldr	r3, [pc, #508]	; (8003818 <main+0x1c2c>)
 800361a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	4b81      	ldr	r3, [pc, #516]	; (8003828 <main+0x1c3c>)
 8003624:	f015 fd76 	bl	8019114 <__aeabi_dcmpge>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <main+0x1a6c>
							sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800362e:	4b7a      	ldr	r3, [pc, #488]	; (8003818 <main+0x1c2c>)
 8003630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003634:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8003638:	497c      	ldr	r1, [pc, #496]	; (800382c <main+0x1c40>)
 800363a:	f016 fec5 	bl	801a3c8 <siprintf>
							LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, CYAN);
 800363e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003642:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003646:	9301      	str	r3, [sp, #4]
 8003648:	2301      	movs	r3, #1
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	4b75      	ldr	r3, [pc, #468]	; (8003824 <main+0x1c38>)
 800364e:	215a      	movs	r1, #90	; 0x5a
 8003650:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8003654:	f001 ff3c 	bl	80054d0 <LCD_Font>
						}


						char weatherPrintRemoteH[4];

						if (humidityRemoteLast >= 10) {
 8003658:	4b75      	ldr	r3, [pc, #468]	; (8003830 <main+0x1c44>)
 800365a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	4b71      	ldr	r3, [pc, #452]	; (8003828 <main+0x1c3c>)
 8003664:	f015 fd56 	bl	8019114 <__aeabi_dcmpge>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d014      	beq.n	8003698 <main+0x1aac>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800366e:	4b70      	ldr	r3, [pc, #448]	; (8003830 <main+0x1c44>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003678:	4969      	ldr	r1, [pc, #420]	; (8003820 <main+0x1c34>)
 800367a:	f016 fea5 	bl	801a3c8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 800367e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003682:	2300      	movs	r3, #0
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	2301      	movs	r3, #1
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	4b66      	ldr	r3, [pc, #408]	; (8003824 <main+0x1c38>)
 800368c:	2128      	movs	r1, #40	; 0x28
 800368e:	f240 1073 	movw	r0, #371	; 0x173
 8003692:	f001 ff1d 	bl	80054d0 <LCD_Font>
 8003696:	e01e      	b.n	80036d6 <main+0x1aea>
						}
						else if (humidityRemoteLast < 10) {
 8003698:	4b65      	ldr	r3, [pc, #404]	; (8003830 <main+0x1c44>)
 800369a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	4b61      	ldr	r3, [pc, #388]	; (8003828 <main+0x1c3c>)
 80036a4:	f015 fd22 	bl	80190ec <__aeabi_dcmplt>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d013      	beq.n	80036d6 <main+0x1aea>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036ae:	4b60      	ldr	r3, [pc, #384]	; (8003830 <main+0x1c44>)
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80036b8:	4959      	ldr	r1, [pc, #356]	; (8003820 <main+0x1c34>)
 80036ba:	f016 fe85 	bl	801a3c8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 80036be:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036c2:	2300      	movs	r3, #0
 80036c4:	9301      	str	r3, [sp, #4]
 80036c6:	2301      	movs	r3, #1
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	4b56      	ldr	r3, [pc, #344]	; (8003824 <main+0x1c38>)
 80036cc:	2128      	movs	r1, #40	; 0x28
 80036ce:	f240 1093 	movw	r0, #403	; 0x193
 80036d2:	f001 fefd 	bl	80054d0 <LCD_Font>
						}

						humidityRemoteLast = humidityRemote;
 80036d6:	4b57      	ldr	r3, [pc, #348]	; (8003834 <main+0x1c48>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	4954      	ldr	r1, [pc, #336]	; (8003830 <main+0x1c44>)
 80036de:	e9c1 2300 	strd	r2, r3, [r1]

						if (humidityRemoteLast >= 10) {
 80036e2:	4b53      	ldr	r3, [pc, #332]	; (8003830 <main+0x1c44>)
 80036e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	4b4e      	ldr	r3, [pc, #312]	; (8003828 <main+0x1c3c>)
 80036ee:	f015 fd11 	bl	8019114 <__aeabi_dcmpge>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <main+0x1b38>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 80036f8:	4b4d      	ldr	r3, [pc, #308]	; (8003830 <main+0x1c44>)
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003702:	4947      	ldr	r1, [pc, #284]	; (8003820 <main+0x1c34>)
 8003704:	f016 fe60 	bl	801a3c8 <siprintf>
							LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 8003708:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800370c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	2301      	movs	r3, #1
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <main+0x1c38>)
 8003718:	2128      	movs	r1, #40	; 0x28
 800371a:	f240 1073 	movw	r0, #371	; 0x173
 800371e:	f001 fed7 	bl	80054d0 <LCD_Font>
 8003722:	e01f      	b.n	8003764 <main+0x1b78>
						}
						else if (humidityRemoteLast < 10) {
 8003724:	4b42      	ldr	r3, [pc, #264]	; (8003830 <main+0x1c44>)
 8003726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	4b3e      	ldr	r3, [pc, #248]	; (8003828 <main+0x1c3c>)
 8003730:	f015 fcdc 	bl	80190ec <__aeabi_dcmplt>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <main+0x1b78>
							sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <main+0x1c44>)
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003744:	4936      	ldr	r1, [pc, #216]	; (8003820 <main+0x1c34>)
 8003746:	f016 fe3f 	bl	801a3c8 <siprintf>
							LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, CYAN);
 800374a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800374e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	2301      	movs	r3, #1
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	4b32      	ldr	r3, [pc, #200]	; (8003824 <main+0x1c38>)
 800375a:	2128      	movs	r1, #40	; 0x28
 800375c:	f240 1093 	movw	r0, #403	; 0x193
 8003760:	f001 feb6 	bl	80054d0 <LCD_Font>
						}
					}
				}
				rx_index = 0;
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <main+0x1c4c>)
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
				for (uint8_t i = 0; i < UART_RX_BUFFER_SIZE; i++) rx_buffer[i] = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8003770:	e009      	b.n	8003786 <main+0x1b9a>
 8003772:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003776:	4a31      	ldr	r2, [pc, #196]	; (800383c <main+0x1c50>)
 8003778:	2100      	movs	r1, #0
 800377a:	54d1      	strb	r1, [r2, r3]
 800377c:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003780:	3301      	adds	r3, #1
 8003782:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
 8003786:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800378a:	2b0f      	cmp	r3, #15
 800378c:	d9f1      	bls.n	8003772 <main+0x1b86>
			}

			remoteSensorLastUpdate++;
 800378e:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <main+0x1c54>)
 8003790:	881b      	ldrh	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	4b2a      	ldr	r3, [pc, #168]	; (8003840 <main+0x1c54>)
 8003798:	801a      	strh	r2, [r3, #0]

			if (remoteSensorLastUpdate > WAIT_REMOTE_SENSOR_SEC) {
 800379a:	4b29      	ldr	r3, [pc, #164]	; (8003840 <main+0x1c54>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	2b64      	cmp	r3, #100	; 0x64
 80037a0:	f240 813e 	bls.w	8003a20 <main+0x1e34>

				if (temperatureRemoteLast && humidityRemoteLast) {
 80037a4:	4b1c      	ldr	r3, [pc, #112]	; (8003818 <main+0x1c2c>)
 80037a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	f04f 0300 	mov.w	r3, #0
 80037b2:	f015 fc91 	bl	80190d8 <__aeabi_dcmpeq>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 8107 	bne.w	80039cc <main+0x1de0>
 80037be:	4b1c      	ldr	r3, [pc, #112]	; (8003830 <main+0x1c44>)
 80037c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	f015 fc84 	bl	80190d8 <__aeabi_dcmpeq>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f040 80fa 	bne.w	80039cc <main+0x1de0>

					char weatherPrintRemoteT[5];
					if (temperatureRemoteLast <= -10) {
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <main+0x1c2c>)
 80037da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	4b0e      	ldr	r3, [pc, #56]	; (800381c <main+0x1c30>)
 80037e4:	f015 fc8c 	bl	8019100 <__aeabi_dcmple>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02a      	beq.n	8003844 <main+0x1c58>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 80037ee:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <main+0x1c2c>)
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80037f8:	4909      	ldr	r1, [pc, #36]	; (8003820 <main+0x1c34>)
 80037fa:	f016 fde5 	bl	801a3c8 <siprintf>
						LCD_Font(353, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80037fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003802:	2300      	movs	r3, #0
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	2301      	movs	r3, #1
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <main+0x1c38>)
 800380c:	215a      	movs	r1, #90	; 0x5a
 800380e:	f240 1061 	movw	r0, #353	; 0x161
 8003812:	f001 fe5d 	bl	80054d0 <LCD_Font>
 8003816:	e08c      	b.n	8003932 <main+0x1d46>
 8003818:	200009f0 	.word	0x200009f0
 800381c:	c0240000 	.word	0xc0240000
 8003820:	08051e98 	.word	0x08051e98
 8003824:	08029660 	.word	0x08029660
 8003828:	40240000 	.word	0x40240000
 800382c:	08051ea0 	.word	0x08051ea0
 8003830:	20000a00 	.word	0x20000a00
 8003834:	200009f8 	.word	0x200009f8
 8003838:	20000dc4 	.word	0x20000dc4
 800383c:	20000db4 	.word	0x20000db4
 8003840:	20000004 	.word	0x20000004
					}
					else if (temperatureRemoteLast < 0 && temperatureRemoteLast > -10) {
 8003844:	4b79      	ldr	r3, [pc, #484]	; (8003a2c <main+0x1e40>)
 8003846:	e9d3 0100 	ldrd	r0, r1, [r3]
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	f015 fc4b 	bl	80190ec <__aeabi_dcmplt>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <main+0x1cb0>
 800385c:	4b73      	ldr	r3, [pc, #460]	; (8003a2c <main+0x1e40>)
 800385e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	4b72      	ldr	r3, [pc, #456]	; (8003a30 <main+0x1e44>)
 8003868:	f015 fc5e 	bl	8019128 <__aeabi_dcmpgt>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d014      	beq.n	800389c <main+0x1cb0>
						sprintf(weatherPrintRemoteT, "%.1f", temperatureRemoteLast);
 8003872:	4b6e      	ldr	r3, [pc, #440]	; (8003a2c <main+0x1e40>)
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800387c:	496d      	ldr	r1, [pc, #436]	; (8003a34 <main+0x1e48>)
 800387e:	f016 fda3 	bl	801a3c8 <siprintf>
						LCD_Font(385, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 8003882:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003886:	2300      	movs	r3, #0
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	2301      	movs	r3, #1
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <main+0x1e4c>)
 8003890:	215a      	movs	r1, #90	; 0x5a
 8003892:	f240 1081 	movw	r0, #385	; 0x181
 8003896:	f001 fe1b 	bl	80054d0 <LCD_Font>
 800389a:	e04a      	b.n	8003932 <main+0x1d46>
					}
					else if (temperatureRemoteLast > 0 && temperatureRemoteLast < 10) {
 800389c:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <main+0x1e40>)
 800389e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	f015 fc3d 	bl	8019128 <__aeabi_dcmpgt>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01f      	beq.n	80038f4 <main+0x1d08>
 80038b4:	4b5d      	ldr	r3, [pc, #372]	; (8003a2c <main+0x1e40>)
 80038b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <main+0x1e50>)
 80038c0:	f015 fc14 	bl	80190ec <__aeabi_dcmplt>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d014      	beq.n	80038f4 <main+0x1d08>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 80038ca:	4b58      	ldr	r3, [pc, #352]	; (8003a2c <main+0x1e40>)
 80038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d0:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80038d4:	495a      	ldr	r1, [pc, #360]	; (8003a40 <main+0x1e54>)
 80038d6:	f016 fd77 	bl	801a3c8 <siprintf>
						LCD_Font(362, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 80038da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80038de:	2300      	movs	r3, #0
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	2301      	movs	r3, #1
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <main+0x1e4c>)
 80038e8:	215a      	movs	r1, #90	; 0x5a
 80038ea:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80038ee:	f001 fdef 	bl	80054d0 <LCD_Font>
 80038f2:	e01e      	b.n	8003932 <main+0x1d46>
					}
					else if (temperatureRemoteLast >= 10) {
 80038f4:	4b4d      	ldr	r3, [pc, #308]	; (8003a2c <main+0x1e40>)
 80038f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	4b4f      	ldr	r3, [pc, #316]	; (8003a3c <main+0x1e50>)
 8003900:	f015 fc08 	bl	8019114 <__aeabi_dcmpge>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d013      	beq.n	8003932 <main+0x1d46>
						sprintf(weatherPrintRemoteT, "+%.1f", temperatureRemoteLast);
 800390a:	4b48      	ldr	r3, [pc, #288]	; (8003a2c <main+0x1e40>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8003914:	494a      	ldr	r1, [pc, #296]	; (8003a40 <main+0x1e54>)
 8003916:	f016 fd57 	bl	801a3c8 <siprintf>
						LCD_Font(330, 90, weatherPrintRemoteT, &DejaVu_Sans_48, 1, BLACK);
 800391a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2301      	movs	r3, #1
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <main+0x1e4c>)
 8003928:	215a      	movs	r1, #90	; 0x5a
 800392a:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 800392e:	f001 fdcf 	bl	80054d0 <LCD_Font>
					}

					char weatherPrintRemoteH[4];

					if (humidityRemoteLast >= 10) {
 8003932:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <main+0x1e58>)
 8003934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	4b3f      	ldr	r3, [pc, #252]	; (8003a3c <main+0x1e50>)
 800393e:	f015 fbe9 	bl	8019114 <__aeabi_dcmpge>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d014      	beq.n	8003972 <main+0x1d86>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003948:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <main+0x1e58>)
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003952:	4938      	ldr	r1, [pc, #224]	; (8003a34 <main+0x1e48>)
 8003954:	f016 fd38 	bl	801a3c8 <siprintf>
						LCD_Font(371, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003958:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800395c:	2300      	movs	r3, #0
 800395e:	9301      	str	r3, [sp, #4]
 8003960:	2301      	movs	r3, #1
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <main+0x1e4c>)
 8003966:	2128      	movs	r1, #40	; 0x28
 8003968:	f240 1073 	movw	r0, #371	; 0x173
 800396c:	f001 fdb0 	bl	80054d0 <LCD_Font>
 8003970:	e01e      	b.n	80039b0 <main+0x1dc4>
					}
					else if (humidityRemoteLast < 10) {
 8003972:	4b34      	ldr	r3, [pc, #208]	; (8003a44 <main+0x1e58>)
 8003974:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <main+0x1e50>)
 800397e:	f015 fbb5 	bl	80190ec <__aeabi_dcmplt>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d013      	beq.n	80039b0 <main+0x1dc4>
						sprintf(weatherPrintRemoteH, "%.1f", humidityRemoteLast);
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <main+0x1e58>)
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8003992:	4928      	ldr	r1, [pc, #160]	; (8003a34 <main+0x1e48>)
 8003994:	f016 fd18 	bl	801a3c8 <siprintf>
						LCD_Font(403, 40, weatherPrintRemoteH, &DejaVu_Sans_48, 1, BLACK);
 8003998:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800399c:	2300      	movs	r3, #0
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2301      	movs	r3, #1
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <main+0x1e4c>)
 80039a6:	2128      	movs	r1, #40	; 0x28
 80039a8:	f240 1093 	movw	r0, #403	; 0x193
 80039ac:	f001 fd90 	bl	80054d0 <LCD_Font>
					}

					temperatureRemoteLast = 0;
 80039b0:	491e      	ldr	r1, [pc, #120]	; (8003a2c <main+0x1e40>)
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9c1 2300 	strd	r2, r3, [r1]
					humidityRemoteLast = 0;
 80039be:	4921      	ldr	r1, [pc, #132]	; (8003a44 <main+0x1e58>)
 80039c0:	f04f 0200 	mov.w	r2, #0
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9c1 2300 	strd	r2, r3, [r1]
				}

				sprintf(clockPrint, "%02d", rtcSecLast);
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <main+0x1e5c>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039d6:	491d      	ldr	r1, [pc, #116]	; (8003a4c <main+0x1e60>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f016 fcf5 	bl	801a3c8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, BLACK);
 80039de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80039e2:	2300      	movs	r3, #0
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2301      	movs	r3, #1
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	4b13      	ldr	r3, [pc, #76]	; (8003a38 <main+0x1e4c>)
 80039ec:	2128      	movs	r1, #40	; 0x28
 80039ee:	f240 1077 	movw	r0, #375	; 0x177
 80039f2:	f001 fd6d 	bl	80054d0 <LCD_Font>
				sprintf(clockPrint, "%02d", rtcSec);
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <main+0x1e64>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a00:	4912      	ldr	r1, [pc, #72]	; (8003a4c <main+0x1e60>)
 8003a02:	4618      	mov	r0, r3
 8003a04:	f016 fce0 	bl	801a3c8 <siprintf>
				LCD_Font(375, 40, clockPrint, &DejaVu_Sans_48, 1, ORANGE);
 8003a08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <main+0x1e68>)
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2301      	movs	r3, #1
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4b08      	ldr	r3, [pc, #32]	; (8003a38 <main+0x1e4c>)
 8003a16:	2128      	movs	r1, #40	; 0x28
 8003a18:	f240 1077 	movw	r0, #375	; 0x177
 8003a1c:	f001 fd58 	bl	80054d0 <LCD_Font>
			}
			rtcSecLast = rtcSec;
 8003a20:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <main+0x1e64>)
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <main+0x1e5c>)
 8003a26:	701a      	strb	r2, [r3, #0]
	{
 8003a28:	f7fe b9c4 	b.w	8001db4 <main+0x1c8>
 8003a2c:	200009f0 	.word	0x200009f0
 8003a30:	c0240000 	.word	0xc0240000
 8003a34:	08051e98 	.word	0x08051e98
 8003a38:	08029660 	.word	0x08029660
 8003a3c:	40240000 	.word	0x40240000
 8003a40:	08051ea0 	.word	0x08051ea0
 8003a44:	20000a00 	.word	0x20000a00
 8003a48:	20000000 	.word	0x20000000
 8003a4c:	08051e4c 	.word	0x08051e4c
 8003a50:	200009bd 	.word	0x200009bd
 8003a54:	00ffa500 	.word	0x00ffa500

08003a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b094      	sub	sp, #80	; 0x50
 8003a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a5e:	f107 0320 	add.w	r3, r7, #32
 8003a62:	2230      	movs	r2, #48	; 0x30
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f015 fe26 	bl	80196b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	605a      	str	r2, [r3, #4]
 8003a76:	609a      	str	r2, [r3, #8]
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	607b      	str	r3, [r7, #4]
 8003a80:	4b28      	ldr	r3, [pc, #160]	; (8003b24 <SystemClock_Config+0xcc>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	4a27      	ldr	r2, [pc, #156]	; (8003b24 <SystemClock_Config+0xcc>)
 8003a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8c:	4b25      	ldr	r3, [pc, #148]	; (8003b24 <SystemClock_Config+0xcc>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <SystemClock_Config+0xd0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <SystemClock_Config+0xd0>)
 8003aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <SystemClock_Config+0xd0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003ac8:	2304      	movs	r3, #4
 8003aca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003acc:	23a8      	movs	r3, #168	; 0xa8
 8003ace:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003ad4:	2307      	movs	r3, #7
 8003ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad8:	f107 0320 	add.w	r3, r7, #32
 8003adc:	4618      	mov	r0, r3
 8003ade:	f00d fe11 	bl	8011704 <HAL_RCC_OscConfig>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003ae8:	f000 fab0 	bl	800404c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003aec:	230f      	movs	r3, #15
 8003aee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af0:	2302      	movs	r3, #2
 8003af2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003af8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003afc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	2105      	movs	r1, #5
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f00e f872 	bl	8011bf4 <HAL_RCC_ClockConfig>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003b16:	f000 fa99 	bl	800404c <Error_Handler>
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3750      	adds	r7, #80	; 0x50
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40023800 	.word	0x40023800
 8003b28:	40007000 	.word	0x40007000

08003b2c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003b32:	463b      	mov	r3, r7
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <MX_DAC_Init+0x60>)
 8003b3c:	4a14      	ldr	r2, [pc, #80]	; (8003b90 <MX_DAC_Init+0x64>)
 8003b3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003b40:	4812      	ldr	r0, [pc, #72]	; (8003b8c <MX_DAC_Init+0x60>)
 8003b42:	f003 f9fa 	bl	8006f3a <HAL_DAC_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8003b4c:	f000 fa7e 	bl	800404c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b58:	463b      	mov	r3, r7
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	480b      	ldr	r0, [pc, #44]	; (8003b8c <MX_DAC_Init+0x60>)
 8003b60:	f003 fc6f 	bl	8007442 <HAL_DAC_ConfigChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8003b6a:	f000 fa6f 	bl	800404c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003b6e:	463b      	mov	r3, r7
 8003b70:	2210      	movs	r2, #16
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <MX_DAC_Init+0x60>)
 8003b76:	f003 fc64 	bl	8007442 <HAL_DAC_ConfigChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003b80:	f000 fa64 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200006f8 	.word	0x200006f8
 8003b90:	40007400 	.word	0x40007400

08003b94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b98:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003b9a:	4a13      	ldr	r2, [pc, #76]	; (8003be8 <MX_I2C1_Init+0x54>)
 8003b9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003b9e:	4b11      	ldr	r3, [pc, #68]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003ba0:	4a12      	ldr	r2, [pc, #72]	; (8003bec <MX_I2C1_Init+0x58>)
 8003ba2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bd0:	4804      	ldr	r0, [pc, #16]	; (8003be4 <MX_I2C1_Init+0x50>)
 8003bd2:	f007 f9c2 	bl	800af5a <HAL_I2C_Init>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003bdc:	f000 fa36 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003be0:	bf00      	nop
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	2000070c 	.word	0x2000070c
 8003be8:	40005400 	.word	0x40005400
 8003bec:	000186a0 	.word	0x000186a0

08003bf0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003bf6:	4a18      	ldr	r2, [pc, #96]	; (8003c58 <MX_SPI1_Init+0x68>)
 8003bf8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003bfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c08:	4b12      	ldr	r3, [pc, #72]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c14:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003c1a:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c22:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c28:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c34:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c3c:	220a      	movs	r2, #10
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c40:	4804      	ldr	r0, [pc, #16]	; (8003c54 <MX_SPI1_Init+0x64>)
 8003c42:	f00e fdf7 	bl	8012834 <HAL_SPI_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c4c:	f000 f9fe 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000760 	.word	0x20000760
 8003c58:	40013000 	.word	0x40013000

08003c5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003c60:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c62:	4a18      	ldr	r2, [pc, #96]	; (8003cc4 <MX_SPI2_Init+0x68>)
 8003c64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003c66:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003c6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003c80:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003c86:	4b0e      	ldr	r3, [pc, #56]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c88:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003c8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003c8e:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c90:	2238      	movs	r2, #56	; 0x38
 8003c92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ca6:	4b06      	ldr	r3, [pc, #24]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003ca8:	220a      	movs	r2, #10
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003cac:	4804      	ldr	r0, [pc, #16]	; (8003cc0 <MX_SPI2_Init+0x64>)
 8003cae:	f00e fdc1 	bl	8012834 <HAL_SPI_Init>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003cb8:	f000 f9c8 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	200007b8 	.word	0x200007b8
 8003cc4:	40003800 	.word	0x40003800

08003cc8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003ccc:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cce:	4a18      	ldr	r2, [pc, #96]	; (8003d30 <MX_SPI3_Init+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003cd8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003cf2:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cf4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003cf8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003cfc:	2238      	movs	r2, #56	; 0x38
 8003cfe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003d12:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003d14:	220a      	movs	r2, #10
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003d18:	4804      	ldr	r0, [pc, #16]	; (8003d2c <MX_SPI3_Init+0x64>)
 8003d1a:	f00e fd8b 	bl	8012834 <HAL_SPI_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003d24:	f000 f992 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20000810 	.word	0x20000810
 8003d30:	40003c00 	.word	0x40003c00

08003d34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d38:	4b11      	ldr	r3, [pc, #68]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d3a:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <MX_USART1_UART_Init+0x50>)
 8003d3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003d3e:	4b10      	ldr	r3, [pc, #64]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003d44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d46:	4b0e      	ldr	r3, [pc, #56]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d4c:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d5a:	220c      	movs	r2, #12
 8003d5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d5e:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d64:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d6a:	4805      	ldr	r0, [pc, #20]	; (8003d80 <MX_USART1_UART_Init+0x4c>)
 8003d6c:	f011 fac8 	bl	8015300 <HAL_UART_Init>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003d76:	f000 f969 	bl	800404c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000928 	.word	0x20000928
 8003d84:	40011000 	.word	0x40011000

08003d88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	607b      	str	r3, [r7, #4]
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <MX_DMA_Init+0x4c>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d96:	4a0f      	ldr	r2, [pc, #60]	; (8003dd4 <MX_DMA_Init+0x4c>)
 8003d98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9e:	4b0d      	ldr	r3, [pc, #52]	; (8003dd4 <MX_DMA_Init+0x4c>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003da6:	607b      	str	r3, [r7, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	200e      	movs	r0, #14
 8003db0:	f002 ff7f 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003db4:	200e      	movs	r0, #14
 8003db6:	f002 ff98 	bl	8006cea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	200f      	movs	r0, #15
 8003dc0:	f002 ff77 	bl	8006cb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003dc4:	200f      	movs	r0, #15
 8003dc6:	f002 ff90 	bl	8006cea <HAL_NVIC_EnableIRQ>

}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800

08003dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b08c      	sub	sp, #48	; 0x30
 8003ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	605a      	str	r2, [r3, #4]
 8003de8:	609a      	str	r2, [r3, #8]
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
 8003df2:	4b60      	ldr	r3, [pc, #384]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	4a5f      	ldr	r2, [pc, #380]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003df8:	f043 0310 	orr.w	r3, r3, #16
 8003dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfe:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	4b59      	ldr	r3, [pc, #356]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	4a58      	ldr	r2, [pc, #352]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1a:	4b56      	ldr	r3, [pc, #344]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	60bb      	str	r3, [r7, #8]
 8003e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	4b52      	ldr	r3, [pc, #328]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	4a51      	ldr	r2, [pc, #324]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	6313      	str	r3, [r2, #48]	; 0x30
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	613b      	str	r3, [r7, #16]
 8003e46:	4b4b      	ldr	r3, [pc, #300]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a4a      	ldr	r2, [pc, #296]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b48      	ldr	r3, [pc, #288]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	613b      	str	r3, [r7, #16]
 8003e5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	4b44      	ldr	r3, [pc, #272]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	4a43      	ldr	r2, [pc, #268]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e68:	f043 0302 	orr.w	r3, r3, #2
 8003e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6e:	4b41      	ldr	r3, [pc, #260]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	617b      	str	r3, [r7, #20]
 8003e78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	; (8003f74 <MX_GPIO_Init+0x19c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	69bb      	ldr	r3, [r7, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8003e96:	2201      	movs	r2, #1
 8003e98:	2140      	movs	r1, #64	; 0x40
 8003e9a:	4837      	ldr	r0, [pc, #220]	; (8003f78 <MX_GPIO_Init+0x1a0>)
 8003e9c:	f006 ffde 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	4834      	ldr	r0, [pc, #208]	; (8003f78 <MX_GPIO_Init+0x1a0>)
 8003ea6:	f006 ffd9 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH25Q_CS_GPIO_Port, FLASH25Q_CS_Pin, GPIO_PIN_RESET);
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2101      	movs	r1, #1
 8003eae:	4833      	ldr	r0, [pc, #204]	; (8003f7c <MX_GPIO_Init+0x1a4>)
 8003eb0:	f006 ffd4 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_D0_Pin|SD_D1_Pin, GPIO_PIN_RESET);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003eba:	4831      	ldr	r0, [pc, #196]	; (8003f80 <MX_GPIO_Init+0x1a8>)
 8003ebc:	f006 ffce 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CMD_GPIO_Port, SD_CMD_Pin, GPIO_PIN_RESET);
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	482f      	ldr	r0, [pc, #188]	; (8003f84 <MX_GPIO_Init+0x1ac>)
 8003ec6:	f006 ffc9 	bl	800ae5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_1_Pin KEY_0_Pin */
  GPIO_InitStruct.Pin = KEY_1_Pin|KEY_0_Pin;
 8003eca:	2318      	movs	r3, #24
 8003ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ed6:	f107 031c 	add.w	r3, r7, #28
 8003eda:	4619      	mov	r1, r3
 8003edc:	482a      	ldr	r0, [pc, #168]	; (8003f88 <MX_GPIO_Init+0x1b0>)
 8003ede:	f006 fd0d 	bl	800a8fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8003ee2:	23c0      	movs	r3, #192	; 0xc0
 8003ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	f107 031c 	add.w	r3, r7, #28
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	481f      	ldr	r0, [pc, #124]	; (8003f78 <MX_GPIO_Init+0x1a0>)
 8003efa:	f006 fcff 	bl	800a8fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_IRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_IRQ_Pin;
 8003efe:	2320      	movs	r3, #32
 8003f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f06:	2301      	movs	r3, #1
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TOUCH_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003f0a:	f107 031c 	add.w	r3, r7, #28
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481b      	ldr	r0, [pc, #108]	; (8003f80 <MX_GPIO_Init+0x1a8>)
 8003f12:	f006 fcf3 	bl	800a8fc <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH25Q_CS_Pin */
  GPIO_InitStruct.Pin = FLASH25Q_CS_Pin;
 8003f16:	2301      	movs	r3, #1
 8003f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f22:	2303      	movs	r3, #3
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FLASH25Q_CS_GPIO_Port, &GPIO_InitStruct);
 8003f26:	f107 031c 	add.w	r3, r7, #28
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4813      	ldr	r0, [pc, #76]	; (8003f7c <MX_GPIO_Init+0x1a4>)
 8003f2e:	f006 fce5 	bl	800a8fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_D0_Pin SD_D1_Pin */
  GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin;
 8003f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f44:	f107 031c 	add.w	r3, r7, #28
 8003f48:	4619      	mov	r1, r3
 8003f4a:	480d      	ldr	r0, [pc, #52]	; (8003f80 <MX_GPIO_Init+0x1a8>)
 8003f4c:	f006 fcd6 	bl	800a8fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CMD_Pin */
  GPIO_InitStruct.Pin = SD_CMD_Pin;
 8003f50:	2304      	movs	r3, #4
 8003f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f54:	2301      	movs	r3, #1
 8003f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8003f60:	f107 031c 	add.w	r3, r7, #28
 8003f64:	4619      	mov	r1, r3
 8003f66:	4807      	ldr	r0, [pc, #28]	; (8003f84 <MX_GPIO_Init+0x1ac>)
 8003f68:	f006 fcc8 	bl	800a8fc <HAL_GPIO_Init>

}
 8003f6c:	bf00      	nop
 8003f6e:	3730      	adds	r7, #48	; 0x30
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40020000 	.word	0x40020000
 8003f7c:	40020400 	.word	0x40020400
 8003f80:	40020800 	.word	0x40020800
 8003f84:	40020c00 	.word	0x40020c00
 8003f88:	40021000 	.word	0x40021000

08003f8c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8003f92:	1d3b      	adds	r3, r7, #4
 8003f94:	2200      	movs	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	605a      	str	r2, [r3, #4]
 8003f9a:	609a      	str	r2, [r3, #8]
 8003f9c:	60da      	str	r2, [r3, #12]
 8003f9e:	611a      	str	r2, [r3, #16]
 8003fa0:	615a      	str	r2, [r3, #20]
 8003fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8003fa4:	4b27      	ldr	r3, [pc, #156]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fa6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8003faa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fae:	4a26      	ldr	r2, [pc, #152]	; (8004048 <MX_FSMC_Init+0xbc>)
 8003fb0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8003fbe:	4b21      	ldr	r3, [pc, #132]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8003fc4:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fc6:	2210      	movs	r2, #16
 8003fc8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8003fd6:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8003fdc:	4b19      	ldr	r3, [pc, #100]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8003fe2:	4b18      	ldr	r3, [pc, #96]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fe8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8003fea:	4b16      	ldr	r3, [pc, #88]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8003ff0:	4b14      	ldr	r3, [pc, #80]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8003ff6:	4b13      	ldr	r3, [pc, #76]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <MX_FSMC_Init+0xb8>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <MX_FSMC_Init+0xb8>)
 8004004:	2200      	movs	r2, #0
 8004006:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 8004008:	2302      	movs	r3, #2
 800400a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800400c:	230f      	movs	r3, #15
 800400e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8004010:	2305      	movs	r3, #5
 8004012:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 2;
 8004014:	2302      	movs	r3, #2
 8004016:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8004018:	2310      	movs	r3, #16
 800401a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800401c:	2311      	movs	r3, #17
 800401e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8004024:	1d3b      	adds	r3, r7, #4
 8004026:	2200      	movs	r2, #0
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	; (8004044 <MX_FSMC_Init+0xb8>)
 800402c:	f010 febe 	bl	8014dac <HAL_SRAM_Init>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8004036:	f000 f809 	bl	800404c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800403a:	bf00      	nop
 800403c:	3720      	adds	r7, #32
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	2000096c 	.word	0x2000096c
 8004048:	a0000104 	.word	0xa0000104

0800404c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004050:	b672      	cpsid	i
}
 8004052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004054:	e7fe      	b.n	8004054 <Error_Handler+0x8>

08004056 <RGB>:
#include "ssd1963.h"

uint32_t RGB(uint8_t r, uint8_t g, uint8_t b)
{   
 8004056:	b480      	push	{r7}
 8004058:	b083      	sub	sp, #12
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	71fb      	strb	r3, [r7, #7]
 8004060:	460b      	mov	r3, r1
 8004062:	71bb      	strb	r3, [r7, #6]
 8004064:	4613      	mov	r3, r2
 8004066:	717b      	strb	r3, [r7, #5]
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	041a      	lsls	r2, r3, #16
 800406c:	79bb      	ldrb	r3, [r7, #6]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	441a      	add	r2, r3
 8004072:	797b      	ldrb	r3, [r7, #5]
 8004074:	4413      	add	r3, r2
}
 8004076:	4618      	mov	r0, r3
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <H24_RGB565>:

uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	4603      	mov	r3, r0
 800408a:	6039      	str	r1, [r7, #0]
 800408c:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	0a1b      	lsrs	r3, r3, #8
 8004098:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <H24_RGB565+0x4a>
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	08db      	lsrs	r3, r3, #3
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	02db      	lsls	r3, r3, #11
 80040ac:	b21a      	sxth	r2, r3
 80040ae:	7bbb      	ldrb	r3, [r7, #14]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	015b      	lsls	r3, r3, #5
 80040b6:	b21b      	sxth	r3, r3
 80040b8:	4313      	orrs	r3, r2
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	7b7b      	ldrb	r3, [r7, #13]
 80040be:	08db      	lsrs	r3, r3, #3
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	b21b      	sxth	r3, r3
 80040c4:	4313      	orrs	r3, r2
 80040c6:	b21b      	sxth	r3, r3
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	e012      	b.n	80040f2 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 80040cc:	7b7b      	ldrb	r3, [r7, #13]
 80040ce:	08db      	lsrs	r3, r3, #3
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	02db      	lsls	r3, r3, #11
 80040d4:	b21a      	sxth	r2, r3
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	089b      	lsrs	r3, r3, #2
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	015b      	lsls	r3, r3, #5
 80040de:	b21b      	sxth	r3, r3
 80040e0:	4313      	orrs	r3, r2
 80040e2:	b21a      	sxth	r2, r3
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	08db      	lsrs	r3, r3, #3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	b21b      	sxth	r3, r3
 80040ec:	4313      	orrs	r3, r2
 80040ee:	b21b      	sxth	r3, r3
 80040f0:	b29b      	uxth	r3, r3
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr

080040fe <LCD_Send_Cmd>:

void LCD_Send_Cmd(uint16_t cmd)
{
 80040fe:	b480      	push	{r7}
 8004100:	b083      	sub	sp, #12
 8004102:	af00      	add	r7, sp, #0
 8004104:	4603      	mov	r3, r0
 8004106:	80fb      	strh	r3, [r7, #6]
	CMD = cmd;
 8004108:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800410c:	88fb      	ldrh	r3, [r7, #6]
 800410e:	8013      	strh	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LCD_Send_Dat>:

void LCD_Send_Dat(uint16_t dat)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 1; i++)
 8004126:	2300      	movs	r3, #0
 8004128:	73fb      	strb	r3, [r7, #15]
 800412a:	e005      	b.n	8004138 <LCD_Send_Dat+0x1c>
	DAT = dat;
 800412c:	4a07      	ldr	r2, [pc, #28]	; (800414c <LCD_Send_Dat+0x30>)
 800412e:	88fb      	ldrh	r3, [r7, #6]
 8004130:	8013      	strh	r3, [r2, #0]
	for (uint8_t i = 0; i < 1; i++)
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	3301      	adds	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f6      	beq.n	800412c <LCD_Send_Dat+0x10>
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	60080000 	.word	0x60080000

08004150 <LCD_Window>:

void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	4604      	mov	r4, r0
 8004158:	4608      	mov	r0, r1
 800415a:	4611      	mov	r1, r2
 800415c:	461a      	mov	r2, r3
 800415e:	4623      	mov	r3, r4
 8004160:	80fb      	strh	r3, [r7, #6]
 8004162:	4603      	mov	r3, r0
 8004164:	80bb      	strh	r3, [r7, #4]
 8004166:	460b      	mov	r3, r1
 8004168:	807b      	strh	r3, [r7, #2]
 800416a:	4613      	mov	r3, r2
 800416c:	803b      	strh	r3, [r7, #0]
	LCD_Send_Cmd(LCD_COLUMN_ADDR);
 800416e:	202a      	movs	r0, #42	; 0x2a
 8004170:	f7ff ffc5 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(y1 >> 8);
 8004174:	88bb      	ldrh	r3, [r7, #4]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	b29b      	uxth	r3, r3
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ffce 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(y1 & 0x00FF);
 8004180:	88bb      	ldrh	r3, [r7, #4]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	b29b      	uxth	r3, r3
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ffc8 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(y2 >> 8);
 800418c:	883b      	ldrh	r3, [r7, #0]
 800418e:	0a1b      	lsrs	r3, r3, #8
 8004190:	b29b      	uxth	r3, r3
 8004192:	4618      	mov	r0, r3
 8004194:	f7ff ffc2 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(y2 & 0x00FF);
 8004198:	883b      	ldrh	r3, [r7, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	b29b      	uxth	r3, r3
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ffbc 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_PAGE_ADDR);
 80041a4:	202b      	movs	r0, #43	; 0x2b
 80041a6:	f7ff ffaa 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(x1 >> 8);
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	0a1b      	lsrs	r3, r3, #8
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff ffb3 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(x1 & 0x00FF);
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4618      	mov	r0, r3
 80041be:	f7ff ffad 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(x2 >> 8);
 80041c2:	887b      	ldrh	r3, [r7, #2]
 80041c4:	0a1b      	lsrs	r3, r3, #8
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7ff ffa7 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(x2 & 0x00FF);
 80041ce:	887b      	ldrh	r3, [r7, #2]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff ffa1 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Cmd(LCD_GRAM);
 80041da:	202c      	movs	r0, #44	; 0x2c
 80041dc:	f7ff ff8f 	bl	80040fe <LCD_Send_Cmd>
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}

080041e8 <LCD_Pixel>:

void LCD_Pixel(uint16_t x, uint16_t y, uint32_t color24)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	603a      	str	r2, [r7, #0]
 80041f2:	80fb      	strh	r3, [r7, #6]
 80041f4:	460b      	mov	r3, r1
 80041f6:	80bb      	strh	r3, [r7, #4]
	LCD_Window(x, y, x, y);
 80041f8:	88bb      	ldrh	r3, [r7, #4]
 80041fa:	88fa      	ldrh	r2, [r7, #6]
 80041fc:	88b9      	ldrh	r1, [r7, #4]
 80041fe:	88f8      	ldrh	r0, [r7, #6]
 8004200:	f7ff ffa6 	bl	8004150 <LCD_Window>
	LCD_Send_Dat(H24_RGB565(1, color24));
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	2001      	movs	r0, #1
 8004208:	f7ff ff3b 	bl	8004082 <H24_RGB565>
 800420c:	4603      	mov	r3, r0
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff84 	bl	800411c <LCD_Send_Dat>
}
 8004214:	bf00      	nop
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <LCD_Rect_Fill>:

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 800421c:	b590      	push	{r4, r7, lr}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	4604      	mov	r4, r0
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4623      	mov	r3, r4
 800422c:	80fb      	strh	r3, [r7, #6]
 800422e:	4603      	mov	r3, r0
 8004230:	80bb      	strh	r3, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	807b      	strh	r3, [r7, #2]
 8004236:	4613      	mov	r3, r2
 8004238:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	883a      	ldrh	r2, [r7, #0]
 8004242:	fb02 f303 	mul.w	r3, r2, r3
 8004246:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8004248:	88ba      	ldrh	r2, [r7, #4]
 800424a:	883b      	ldrh	r3, [r7, #0]
 800424c:	4413      	add	r3, r2
 800424e:	b29b      	uxth	r3, r3
 8004250:	3b01      	subs	r3, #1
 8004252:	b29c      	uxth	r4, r3
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	4413      	add	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29b      	uxth	r3, r3
 8004260:	88f9      	ldrh	r1, [r7, #6]
 8004262:	88b8      	ldrh	r0, [r7, #4]
 8004264:	4622      	mov	r2, r4
 8004266:	f7ff ff73 	bl	8004150 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	e00a      	b.n	8004286 <LCD_Rect_Fill+0x6a>
 8004270:	6a39      	ldr	r1, [r7, #32]
 8004272:	2001      	movs	r0, #1
 8004274:	f7ff ff05 	bl	8004082 <H24_RGB565>
 8004278:	4603      	mov	r3, r0
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff ff4e 	bl	800411c <LCD_Send_Dat>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3301      	adds	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	429a      	cmp	r2, r3
 800428c:	d3f0      	bcc.n	8004270 <LCD_Rect_Fill+0x54>
}
 800428e:	bf00      	nop
 8004290:	bf00      	nop
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bd90      	pop	{r4, r7, pc}

08004298 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b08b      	sub	sp, #44	; 0x2c
 800429c:	af02      	add	r7, sp, #8
 800429e:	4604      	mov	r4, r0
 80042a0:	4608      	mov	r0, r1
 80042a2:	4611      	mov	r1, r2
 80042a4:	461a      	mov	r2, r3
 80042a6:	4623      	mov	r3, r4
 80042a8:	80fb      	strh	r3, [r7, #6]
 80042aa:	4603      	mov	r3, r0
 80042ac:	80bb      	strh	r3, [r7, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	807b      	strh	r3, [r7, #2]
 80042b2:	4613      	mov	r3, r2
 80042b4:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bfb8      	it	lt
 80042c0:	425b      	neglt	r3, r3
 80042c2:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80042c4:	883a      	ldrh	r2, [r7, #0]
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bfb8      	it	lt
 80042ce:	425b      	neglt	r3, r3
 80042d0:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	887b      	ldrh	r3, [r7, #2]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d201      	bcs.n	80042de <LCD_Line+0x46>
 80042da:	2301      	movs	r3, #1
 80042dc:	e001      	b.n	80042e2 <LCD_Line+0x4a>
 80042de:	f04f 33ff 	mov.w	r3, #4294967295
 80042e2:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 80042e4:	88ba      	ldrh	r2, [r7, #4]
 80042e6:	883b      	ldrh	r3, [r7, #0]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d201      	bcs.n	80042f0 <LCD_Line+0x58>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e001      	b.n	80042f4 <LCD_Line+0x5c>
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
 80042f4:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004302:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004306:	b29a      	uxth	r2, r3
 8004308:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800430c:	b29c      	uxth	r4, r3
 800430e:	88b9      	ldrh	r1, [r7, #4]
 8004310:	88f8      	ldrh	r0, [r7, #6]
 8004312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4623      	mov	r3, r4
 8004318:	f7ff ff80 	bl	800421c <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	887b      	ldrh	r3, [r7, #2]
 8004320:	429a      	cmp	r2, r3
 8004322:	d103      	bne.n	800432c <LCD_Line+0x94>
 8004324:	88ba      	ldrh	r2, [r7, #4]
 8004326:	883b      	ldrh	r3, [r7, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d01e      	beq.n	800436a <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	425b      	negs	r3, r3
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	dd08      	ble.n	800434e <LCD_Line+0xb6>
		{
			error -= deltaY;
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	b29a      	uxth	r2, r3
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	4413      	add	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	429a      	cmp	r2, r3
 8004354:	dad5      	bge.n	8004302 <LCD_Line+0x6a>
		{
			error += deltaX;
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b29a      	uxth	r2, r3
 8004362:	88bb      	ldrh	r3, [r7, #4]
 8004364:	4413      	add	r3, r2
 8004366:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8004368:	e7cb      	b.n	8004302 <LCD_Line+0x6a>
		break;
 800436a:	bf00      	nop
		}
	}
}
 800436c:	bf00      	nop
 800436e:	3724      	adds	r7, #36	; 0x24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}

08004374 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8004374:	b590      	push	{r4, r7, lr}
 8004376:	b085      	sub	sp, #20
 8004378:	af02      	add	r7, sp, #8
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	4611      	mov	r1, r2
 8004380:	461a      	mov	r2, r3
 8004382:	4623      	mov	r3, r4
 8004384:	80fb      	strh	r3, [r7, #6]
 8004386:	4603      	mov	r3, r0
 8004388:	80bb      	strh	r3, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	807b      	strh	r3, [r7, #2]
 800438e:	4613      	mov	r3, r2
 8004390:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8004392:	883c      	ldrh	r4, [r7, #0]
 8004394:	887a      	ldrh	r2, [r7, #2]
 8004396:	88b9      	ldrh	r1, [r7, #4]
 8004398:	88f8      	ldrh	r0, [r7, #6]
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	9301      	str	r3, [sp, #4]
 800439e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	4623      	mov	r3, r4
 80043a6:	f7ff ff77 	bl	8004298 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 80043aa:	8bbc      	ldrh	r4, [r7, #28]
 80043ac:	8b3a      	ldrh	r2, [r7, #24]
 80043ae:	8839      	ldrh	r1, [r7, #0]
 80043b0:	8878      	ldrh	r0, [r7, #2]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9301      	str	r3, [sp, #4]
 80043b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4623      	mov	r3, r4
 80043be:	f7ff ff6b 	bl	8004298 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 80043c2:	88bc      	ldrh	r4, [r7, #4]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	8bb9      	ldrh	r1, [r7, #28]
 80043c8:	8b38      	ldrh	r0, [r7, #24]
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	4623      	mov	r3, r4
 80043d6:	f7ff ff5f 	bl	8004298 <LCD_Line>
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}

080043e2 <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 80043e2:	b590      	push	{r4, r7, lr}
 80043e4:	b08d      	sub	sp, #52	; 0x34
 80043e6:	af02      	add	r7, sp, #8
 80043e8:	4604      	mov	r4, r0
 80043ea:	4608      	mov	r0, r1
 80043ec:	4611      	mov	r1, r2
 80043ee:	461a      	mov	r2, r3
 80043f0:	4623      	mov	r3, r4
 80043f2:	80fb      	strh	r3, [r7, #6]
 80043f4:	4603      	mov	r3, r0
 80043f6:	80bb      	strh	r3, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
 80043fc:	4613      	mov	r3, r2
 80043fe:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004400:	2300      	movs	r3, #0
 8004402:	823b      	strh	r3, [r7, #16]
 8004404:	2300      	movs	r3, #0
 8004406:	81fb      	strh	r3, [r7, #14]
 8004408:	2300      	movs	r3, #0
 800440a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800440c:	2300      	movs	r3, #0
 800440e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004410:	2300      	movs	r3, #0
 8004412:	847b      	strh	r3, [r7, #34]	; 0x22
 8004414:	2300      	movs	r3, #0
 8004416:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8004418:	2300      	movs	r3, #0
 800441a:	83fb      	strh	r3, [r7, #30]
 800441c:	2300      	movs	r3, #0
 800441e:	83bb      	strh	r3, [r7, #28]
 8004420:	2300      	movs	r3, #0
 8004422:	837b      	strh	r3, [r7, #26]
 8004424:	2300      	movs	r3, #0
 8004426:	833b      	strh	r3, [r7, #24]
 8004428:	2300      	movs	r3, #0
 800442a:	82fb      	strh	r3, [r7, #22]
 800442c:	2300      	movs	r3, #0
 800442e:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8004430:	2300      	movs	r3, #0
 8004432:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8004434:	887a      	ldrh	r2, [r7, #2]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	bfb8      	it	lt
 800443e:	425b      	neglt	r3, r3
 8004440:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8004442:	883a      	ldrh	r2, [r7, #0]
 8004444:	88bb      	ldrh	r3, [r7, #4]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bfb8      	it	lt
 800444c:	425b      	neglt	r3, r3
 800444e:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8004450:	88fb      	ldrh	r3, [r7, #6]
 8004452:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = y1;
 8004454:	88bb      	ldrh	r3, [r7, #4]
 8004456:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (x2 >= x1)
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	429a      	cmp	r2, r3
 800445e:	d304      	bcc.n	800446a <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8004460:	2301      	movs	r3, #1
 8004462:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 8004464:	2301      	movs	r3, #1
 8004466:	843b      	strh	r3, [r7, #32]
 8004468:	e005      	b.n	8004476 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 800446a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800446e:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 8004470:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004474:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8004476:	883a      	ldrh	r2, [r7, #0]
 8004478:	88bb      	ldrh	r3, [r7, #4]
 800447a:	429a      	cmp	r2, r3
 800447c:	d304      	bcc.n	8004488 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8004482:	2301      	movs	r3, #1
 8004484:	83bb      	strh	r3, [r7, #28]
 8004486:	e005      	b.n	8004494 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8004488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800448c:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 800448e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004492:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8004494:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004498:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800449c:	429a      	cmp	r2, r3
 800449e:	db10      	blt.n	80044c2 <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80044a8:	8a3b      	ldrh	r3, [r7, #16]
 80044aa:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80044ac:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80044b0:	0fda      	lsrs	r2, r3, #31
 80044b2:	4413      	add	r3, r2
 80044b4:	105b      	asrs	r3, r3, #1
 80044b6:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80044b8:	89fb      	ldrh	r3, [r7, #14]
 80044ba:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 80044bc:	8a3b      	ldrh	r3, [r7, #16]
 80044be:	82bb      	strh	r3, [r7, #20]
 80044c0:	e00f      	b.n	80044e2 <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 80044c6:	2300      	movs	r3, #0
 80044c8:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 80044ca:	89fb      	ldrh	r3, [r7, #14]
 80044cc:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 80044ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80044d2:	0fda      	lsrs	r2, r3, #31
 80044d4:	4413      	add	r3, r2
 80044d6:	105b      	asrs	r3, r3, #1
 80044d8:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 80044da:	8a3b      	ldrh	r3, [r7, #16]
 80044dc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 80044de:	89fb      	ldrh	r3, [r7, #14]
 80044e0:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	827b      	strh	r3, [r7, #18]
 80044e6:	e034      	b.n	8004552 <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 80044e8:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80044ea:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80044ec:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 80044ee:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80044f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	2301      	movs	r3, #1
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4623      	mov	r3, r4
 80044fa:	f7ff fecd 	bl	8004298 <LCD_Line>

		num += numadd;
 80044fe:	8b3a      	ldrh	r2, [r7, #24]
 8004500:	8afb      	ldrh	r3, [r7, #22]
 8004502:	4413      	add	r3, r2
 8004504:	b29b      	uxth	r3, r3
 8004506:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 8004508:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800450c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004510:	429a      	cmp	r2, r3
 8004512:	db0e      	blt.n	8004532 <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 8004514:	8b3a      	ldrh	r2, [r7, #24]
 8004516:	8b7b      	ldrh	r3, [r7, #26]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	b29b      	uxth	r3, r3
 800451c:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 800451e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004522:	4413      	add	r3, r2
 8004524:	b29b      	uxth	r3, r3
 8004526:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1;
 8004528:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800452a:	8bfb      	ldrh	r3, [r7, #30]
 800452c:	4413      	add	r3, r2
 800452e:	b29b      	uxth	r3, r3
 8004530:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2;
 8004532:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004534:	8c3b      	ldrh	r3, [r7, #32]
 8004536:	4413      	add	r3, r2
 8004538:	b29b      	uxth	r3, r3
 800453a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2;
 800453c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800453e:	8bbb      	ldrh	r3, [r7, #28]
 8004540:	4413      	add	r3, r2
 8004542:	b29b      	uxth	r3, r3
 8004544:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8004546:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800454a:	b29b      	uxth	r3, r3
 800454c:	3301      	adds	r3, #1
 800454e:	b29b      	uxth	r3, r3
 8004550:	827b      	strh	r3, [r7, #18]
 8004552:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004556:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800455a:	429a      	cmp	r2, r3
 800455c:	ddc4      	ble.n	80044e8 <LCD_Triangle_Fill+0x106>
	}
}
 800455e:	bf00      	nop
 8004560:	bf00      	nop
 8004562:	372c      	adds	r7, #44	; 0x2c
 8004564:	46bd      	mov	sp, r7
 8004566:	bd90      	pop	{r4, r7, pc}

08004568 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b085      	sub	sp, #20
 800456c:	af02      	add	r7, sp, #8
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4623      	mov	r3, r4
 8004578:	80fb      	strh	r3, [r7, #6]
 800457a:	4603      	mov	r3, r0
 800457c:	80bb      	strh	r3, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]
 8004582:	4613      	mov	r3, r2
 8004584:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	887b      	ldrh	r3, [r7, #2]
 800458a:	4413      	add	r3, r2
 800458c:	b29a      	uxth	r2, r3
 800458e:	88bc      	ldrh	r4, [r7, #4]
 8004590:	88b9      	ldrh	r1, [r7, #4]
 8004592:	88f8      	ldrh	r0, [r7, #6]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	9301      	str	r3, [sp, #4]
 8004598:	7e3b      	ldrb	r3, [r7, #24]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	4623      	mov	r3, r4
 800459e:	f7ff fe7b 	bl	8004298 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 80045a2:	88ba      	ldrh	r2, [r7, #4]
 80045a4:	883b      	ldrh	r3, [r7, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	b299      	uxth	r1, r3
 80045aa:	88fa      	ldrh	r2, [r7, #6]
 80045ac:	887b      	ldrh	r3, [r7, #2]
 80045ae:	4413      	add	r3, r2
 80045b0:	b29c      	uxth	r4, r3
 80045b2:	88ba      	ldrh	r2, [r7, #4]
 80045b4:	883b      	ldrh	r3, [r7, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	88f8      	ldrh	r0, [r7, #6]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	9301      	str	r3, [sp, #4]
 80045c0:	7e3b      	ldrb	r3, [r7, #24]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	4622      	mov	r2, r4
 80045c8:	f7ff fe66 	bl	8004298 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 80045cc:	88ba      	ldrh	r2, [r7, #4]
 80045ce:	883b      	ldrh	r3, [r7, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	88b9      	ldrh	r1, [r7, #4]
 80045d8:	88f8      	ldrh	r0, [r7, #6]
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	7e3b      	ldrb	r3, [r7, #24]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	4623      	mov	r3, r4
 80045e4:	f7ff fe58 	bl	8004298 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	887b      	ldrh	r3, [r7, #2]
 80045ec:	4413      	add	r3, r2
 80045ee:	b298      	uxth	r0, r3
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	887b      	ldrh	r3, [r7, #2]
 80045f4:	4413      	add	r3, r2
 80045f6:	b29c      	uxth	r4, r3
 80045f8:	88ba      	ldrh	r2, [r7, #4]
 80045fa:	883b      	ldrh	r3, [r7, #0]
 80045fc:	4413      	add	r3, r2
 80045fe:	b29a      	uxth	r2, r3
 8004600:	88b9      	ldrh	r1, [r7, #4]
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	7e3b      	ldrb	r3, [r7, #24]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4613      	mov	r3, r2
 800460c:	4622      	mov	r2, r4
 800460e:	f7ff fe43 	bl	8004298 <LCD_Line>
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	bd90      	pop	{r4, r7, pc}

0800461a <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 800461a:	b590      	push	{r4, r7, lr}
 800461c:	b08b      	sub	sp, #44	; 0x2c
 800461e:	af02      	add	r7, sp, #8
 8004620:	4604      	mov	r4, r0
 8004622:	4608      	mov	r0, r1
 8004624:	4611      	mov	r1, r2
 8004626:	461a      	mov	r2, r3
 8004628:	4623      	mov	r3, r4
 800462a:	80fb      	strh	r3, [r7, #6]
 800462c:	4603      	mov	r3, r0
 800462e:	80bb      	strh	r3, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 8004638:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800463c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 8004646:	f9b7 3000 	ldrsh.w	r3, [r7]
 800464a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800464e:	fb02 f303 	mul.w	r3, r2, r3
 8004652:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8004660:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8101 	beq.w	800486c <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800466a:	2300      	movs	r3, #0
 800466c:	83fb      	strh	r3, [r7, #30]
 800466e:	883b      	ldrh	r3, [r7, #0]
 8004670:	83bb      	strh	r3, [r7, #28]
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	005a      	lsls	r2, r3, #1
 8004676:	f9b7 3000 	ldrsh.w	r3, [r7]
 800467a:	005b      	lsls	r3, r3, #1
 800467c:	f1c3 0301 	rsb	r3, r3, #1
 8004680:	6979      	ldr	r1, [r7, #20]
 8004682:	fb01 f303 	mul.w	r3, r1, r3
 8004686:	4413      	add	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e062      	b.n	8004752 <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800468c:	88fa      	ldrh	r2, [r7, #6]
 800468e:	8bfb      	ldrh	r3, [r7, #30]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	b298      	uxth	r0, r3
 8004694:	88ba      	ldrh	r2, [r7, #4]
 8004696:	8bbb      	ldrh	r3, [r7, #28]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	b299      	uxth	r1, r3
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	8bfb      	ldrh	r3, [r7, #30]
 80046a0:	4413      	add	r3, r2
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	b29c      	uxth	r4, r3
 80046b2:	88ba      	ldrh	r2, [r7, #4]
 80046b4:	8bbb      	ldrh	r3, [r7, #28]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	4622      	mov	r2, r4
 80046c8:	f7ff fde6 	bl	8004298 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80046cc:	88fa      	ldrh	r2, [r7, #6]
 80046ce:	8bfb      	ldrh	r3, [r7, #30]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	b298      	uxth	r0, r3
 80046d4:	88ba      	ldrh	r2, [r7, #4]
 80046d6:	8bbb      	ldrh	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	b299      	uxth	r1, r3
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	8bfb      	ldrh	r3, [r7, #30]
 80046e0:	4413      	add	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	b29c      	uxth	r4, r3
 80046f2:	88ba      	ldrh	r2, [r7, #4]
 80046f4:	8bbb      	ldrh	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	4613      	mov	r3, r2
 8004706:	4622      	mov	r2, r4
 8004708:	f7ff fdc6 	bl	8004298 <LCD_Line>
			if (s >= 0)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	db0f      	blt.n	8004732 <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 8004712:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004716:	f1c3 0301 	rsb	r3, r3, #1
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4413      	add	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
				y--;
 8004726:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29b      	uxth	r3, r3
 8004730:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8004732:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	3306      	adds	r3, #6
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4413      	add	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004746:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800474a:	b29b      	uxth	r3, r3
 800474c:	3301      	adds	r3, #1
 800474e:	b29b      	uxth	r3, r3
 8004750:	83fb      	strh	r3, [r7, #30]
 8004752:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	fb03 f202 	mul.w	r2, r3, r2
 800475c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	fb01 f303 	mul.w	r3, r1, r3
 8004766:	429a      	cmp	r2, r3
 8004768:	dd90      	ble.n	800468c <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	83fb      	strh	r3, [r7, #30]
 800476e:	2300      	movs	r3, #0
 8004770:	83bb      	strh	r3, [r7, #28]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	005a      	lsls	r2, r3, #1
 8004776:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	f1c3 0301 	rsb	r3, r3, #1
 8004780:	6939      	ldr	r1, [r7, #16]
 8004782:	fb01 f303 	mul.w	r3, r1, r3
 8004786:	4413      	add	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
 800478a:	e062      	b.n	8004852 <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	8bfb      	ldrh	r3, [r7, #30]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	b298      	uxth	r0, r3
 8004794:	88ba      	ldrh	r2, [r7, #4]
 8004796:	8bbb      	ldrh	r3, [r7, #28]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	b299      	uxth	r1, r3
 800479c:	88fa      	ldrh	r2, [r7, #6]
 800479e:	8bfb      	ldrh	r3, [r7, #30]
 80047a0:	4413      	add	r3, r2
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3301      	adds	r3, #1
 80047b0:	b29c      	uxth	r4, r3
 80047b2:	88ba      	ldrh	r2, [r7, #4]
 80047b4:	8bbb      	ldrh	r3, [r7, #28]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047bc:	9301      	str	r3, [sp, #4]
 80047be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	4613      	mov	r3, r2
 80047c6:	4622      	mov	r2, r4
 80047c8:	f7ff fd66 	bl	8004298 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	8bfb      	ldrh	r3, [r7, #30]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	b298      	uxth	r0, r3
 80047d4:	88ba      	ldrh	r2, [r7, #4]
 80047d6:	8bbb      	ldrh	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	b299      	uxth	r1, r3
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	8bfb      	ldrh	r3, [r7, #30]
 80047e0:	4413      	add	r3, r2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3301      	adds	r3, #1
 80047f0:	b29c      	uxth	r4, r3
 80047f2:	88ba      	ldrh	r2, [r7, #4]
 80047f4:	8bbb      	ldrh	r3, [r7, #28]
 80047f6:	4413      	add	r3, r2
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	4622      	mov	r2, r4
 8004808:	f7ff fd46 	bl	8004298 <LCD_Line>
			if (s >= 0)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	db0f      	blt.n	8004832 <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 8004812:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004816:	f1c3 0301 	rsb	r3, r3, #1
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	fb02 f303 	mul.w	r3, r2, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	4413      	add	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
				x--;
 8004826:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29b      	uxth	r3, r3
 8004830:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8004832:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	3306      	adds	r3, #6
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	fb02 f303 	mul.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4413      	add	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8004846:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800484a:	b29b      	uxth	r3, r3
 800484c:	3301      	adds	r3, #1
 800484e:	b29b      	uxth	r3, r3
 8004850:	83bb      	strh	r3, [r7, #28]
 8004852:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	fb03 f202 	mul.w	r2, r3, r2
 800485c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	fb01 f303 	mul.w	r3, r1, r3
 8004866:	429a      	cmp	r2, r3
 8004868:	dd90      	ble.n	800478c <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 800486a:	e117      	b.n	8004a9c <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800486c:	2300      	movs	r3, #0
 800486e:	83fb      	strh	r3, [r7, #30]
 8004870:	883b      	ldrh	r3, [r7, #0]
 8004872:	83bb      	strh	r3, [r7, #28]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	005a      	lsls	r2, r3, #1
 8004878:	f9b7 3000 	ldrsh.w	r3, [r7]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	f1c3 0301 	rsb	r3, r3, #1
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e06e      	b.n	800496c <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 800488e:	88fa      	ldrh	r2, [r7, #6]
 8004890:	8bfb      	ldrh	r3, [r7, #30]
 8004892:	4413      	add	r3, r2
 8004894:	b298      	uxth	r0, r3
 8004896:	88ba      	ldrh	r2, [r7, #4]
 8004898:	8bbb      	ldrh	r3, [r7, #28]
 800489a:	4413      	add	r3, r2
 800489c:	b299      	uxth	r1, r3
 800489e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048a8:	b29c      	uxth	r4, r3
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	9300      	str	r3, [sp, #0]
 80048ae:	4623      	mov	r3, r4
 80048b0:	f7ff fcb4 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80048b4:	88fa      	ldrh	r2, [r7, #6]
 80048b6:	8bfb      	ldrh	r3, [r7, #30]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	b298      	uxth	r0, r3
 80048bc:	88ba      	ldrh	r2, [r7, #4]
 80048be:	8bbb      	ldrh	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	b299      	uxth	r1, r3
 80048c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ce:	b29c      	uxth	r4, r3
 80048d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	4623      	mov	r3, r4
 80048d6:	f7ff fca1 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80048da:	88fa      	ldrh	r2, [r7, #6]
 80048dc:	8bfb      	ldrh	r3, [r7, #30]
 80048de:	4413      	add	r3, r2
 80048e0:	b298      	uxth	r0, r3
 80048e2:	88ba      	ldrh	r2, [r7, #4]
 80048e4:	8bbb      	ldrh	r3, [r7, #28]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	b299      	uxth	r1, r3
 80048ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4623      	mov	r3, r4
 80048fc:	f7ff fc8e 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004900:	88fa      	ldrh	r2, [r7, #6]
 8004902:	8bfb      	ldrh	r3, [r7, #30]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	b298      	uxth	r0, r3
 8004908:	88ba      	ldrh	r2, [r7, #4]
 800490a:	8bbb      	ldrh	r3, [r7, #28]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	b299      	uxth	r1, r3
 8004910:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004914:	b29a      	uxth	r2, r3
 8004916:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800491a:	b29c      	uxth	r4, r3
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	9300      	str	r3, [sp, #0]
 8004920:	4623      	mov	r3, r4
 8004922:	f7ff fc7b 	bl	800421c <LCD_Rect_Fill>
			if (s >= 0)
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db0f      	blt.n	800494c <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 800492c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004930:	f1c3 0301 	rsb	r3, r3, #1
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	fb02 f303 	mul.w	r3, r2, r3
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4413      	add	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
				y--;
 8004940:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 800494c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	3306      	adds	r3, #6
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4413      	add	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8004960:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004964:	b29b      	uxth	r3, r3
 8004966:	3301      	adds	r3, #1
 8004968:	b29b      	uxth	r3, r3
 800496a:	83fb      	strh	r3, [r7, #30]
 800496c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	fb03 f202 	mul.w	r2, r3, r2
 8004976:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800497a:	6979      	ldr	r1, [r7, #20]
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	429a      	cmp	r2, r3
 8004982:	dd84      	ble.n	800488e <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	83fb      	strh	r3, [r7, #30]
 8004988:	2300      	movs	r3, #0
 800498a:	83bb      	strh	r3, [r7, #28]
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	005a      	lsls	r2, r3, #1
 8004990:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	f1c3 0301 	rsb	r3, r3, #1
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e06e      	b.n	8004a84 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	8bfb      	ldrh	r3, [r7, #30]
 80049aa:	4413      	add	r3, r2
 80049ac:	b298      	uxth	r0, r3
 80049ae:	88ba      	ldrh	r2, [r7, #4]
 80049b0:	8bbb      	ldrh	r3, [r7, #28]
 80049b2:	4413      	add	r3, r2
 80049b4:	b299      	uxth	r1, r3
 80049b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049c0:	b29c      	uxth	r4, r3
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	4623      	mov	r3, r4
 80049c8:	f7ff fc28 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80049cc:	88fa      	ldrh	r2, [r7, #6]
 80049ce:	8bfb      	ldrh	r3, [r7, #30]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	b298      	uxth	r0, r3
 80049d4:	88ba      	ldrh	r2, [r7, #4]
 80049d6:	8bbb      	ldrh	r3, [r7, #28]
 80049d8:	4413      	add	r3, r2
 80049da:	b299      	uxth	r1, r3
 80049dc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80049e6:	b29c      	uxth	r4, r3
 80049e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	4623      	mov	r3, r4
 80049ee:	f7ff fc15 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	8bfb      	ldrh	r3, [r7, #30]
 80049f6:	4413      	add	r3, r2
 80049f8:	b298      	uxth	r0, r3
 80049fa:	88ba      	ldrh	r2, [r7, #4]
 80049fc:	8bbb      	ldrh	r3, [r7, #28]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	b299      	uxth	r1, r3
 8004a02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a0c:	b29c      	uxth	r4, r3
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	4623      	mov	r3, r4
 8004a14:	f7ff fc02 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	8bfb      	ldrh	r3, [r7, #30]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	b298      	uxth	r0, r3
 8004a20:	88ba      	ldrh	r2, [r7, #4]
 8004a22:	8bbb      	ldrh	r3, [r7, #28]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	b299      	uxth	r1, r3
 8004a28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a32:	b29c      	uxth	r4, r3
 8004a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	4623      	mov	r3, r4
 8004a3a:	f7ff fbef 	bl	800421c <LCD_Rect_Fill>
			if (s >= 0)
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	db0f      	blt.n	8004a64 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8004a44:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a48:	f1c3 0301 	rsb	r3, r3, #1
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	fb02 f303 	mul.w	r3, r2, r3
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	4413      	add	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
				x--;
 8004a58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8004a64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	3306      	adds	r3, #6
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	4413      	add	r3, r2
 8004a76:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8004a78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	83bb      	strh	r3, [r7, #28]
 8004a84:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	fb03 f202 	mul.w	r2, r3, r2
 8004a8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004a92:	6939      	ldr	r1, [r7, #16]
 8004a94:	fb01 f303 	mul.w	r3, r1, r3
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	dd84      	ble.n	80049a6 <LCD_Ellipse+0x38c>
}
 8004a9c:	bf00      	nop
 8004a9e:	3724      	adds	r7, #36	; 0x24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd90      	pop	{r4, r7, pc}

08004aa4 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b089      	sub	sp, #36	; 0x24
 8004aa8:	af02      	add	r7, sp, #8
 8004aaa:	4604      	mov	r4, r0
 8004aac:	4608      	mov	r0, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4623      	mov	r3, r4
 8004ab4:	80fb      	strh	r3, [r7, #6]
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80bb      	strh	r3, [r7, #4]
 8004aba:	460b      	mov	r3, r1
 8004abc:	70fb      	strb	r3, [r7, #3]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f1c3 0301 	rsb	r3, r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 8004ad2:	e0fc      	b.n	8004cce <LCD_Circle+0x22a>
	{
		if (fill == 1)
 8004ad4:	78bb      	ldrb	r3, [r7, #2]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d136      	bne.n	8004b48 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	b298      	uxth	r0, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	88ba      	ldrh	r2, [r7, #4]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	b299      	uxth	r1, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	005b      	lsls	r3, r3, #1
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	b29c      	uxth	r4, r3
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	f7ff fb86 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	b298      	uxth	r0, r3
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	88ba      	ldrh	r2, [r7, #4]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	b299      	uxth	r1, r3
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3301      	adds	r3, #1
 8004b3a:	b29c      	uxth	r4, r3
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4623      	mov	r3, r4
 8004b42:	f7ff fb6b 	bl	800421c <LCD_Rect_Fill>
 8004b46:	e0a7      	b.n	8004c98 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	88fb      	ldrh	r3, [r7, #6]
 8004b4e:	4413      	add	r3, r2
 8004b50:	b298      	uxth	r0, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	88bb      	ldrh	r3, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	b299      	uxth	r1, r3
 8004b5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b66:	b29c      	uxth	r4, r3
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	9300      	str	r3, [sp, #0]
 8004b6c:	4623      	mov	r3, r4
 8004b6e:	f7ff fb55 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	4413      	add	r3, r2
 8004b7a:	b298      	uxth	r0, r3
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	88bb      	ldrh	r3, [r7, #4]
 8004b82:	4413      	add	r3, r2
 8004b84:	b299      	uxth	r1, r3
 8004b86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b90:	b29c      	uxth	r4, r3
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	4623      	mov	r3, r4
 8004b98:	f7ff fb40 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	88fa      	ldrh	r2, [r7, #6]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	b298      	uxth	r0, r3
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	88bb      	ldrh	r3, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	b299      	uxth	r1, r3
 8004bb0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bba:	b29c      	uxth	r4, r3
 8004bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	4623      	mov	r3, r4
 8004bc2:	f7ff fb2b 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	88fa      	ldrh	r2, [r7, #6]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	b298      	uxth	r0, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	88bb      	ldrh	r3, [r7, #4]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	b299      	uxth	r1, r3
 8004bda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004bde:	b29a      	uxth	r2, r3
 8004be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004be4:	b29c      	uxth	r4, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	4623      	mov	r3, r4
 8004bec:	f7ff fb16 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	88fb      	ldrh	r3, [r7, #6]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	b298      	uxth	r0, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	88ba      	ldrh	r2, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	b299      	uxth	r1, r3
 8004c04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c0e:	b29c      	uxth	r4, r3
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4623      	mov	r3, r4
 8004c16:	f7ff fb01 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	4413      	add	r3, r2
 8004c22:	b298      	uxth	r0, r3
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	88ba      	ldrh	r2, [r7, #4]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	b299      	uxth	r1, r3
 8004c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c38:	b29c      	uxth	r4, r3
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4623      	mov	r3, r4
 8004c40:	f7ff faec 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	b298      	uxth	r0, r3
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	88ba      	ldrh	r2, [r7, #4]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	b299      	uxth	r1, r3
 8004c58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c62:	b29c      	uxth	r4, r3
 8004c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	4623      	mov	r3, r4
 8004c6a:	f7ff fad7 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	88fa      	ldrh	r2, [r7, #6]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	b298      	uxth	r0, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	88ba      	ldrh	r2, [r7, #4]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	b299      	uxth	r1, r3
 8004c82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c8c:	b29c      	uxth	r4, r3
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4623      	mov	r3, r4
 8004c94:	f7ff fac2 	bl	800421c <LCD_Rect_Fill>
		}
		if (P < 0)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	da09      	bge.n	8004cb2 <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1cda      	adds	r2, r3, #3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	4413      	add	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]
			a_++;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	3301      	adds	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e00d      	b.n	8004cce <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1d5a      	adds	r2, r3, #5
 8004cb6:	6979      	ldr	r1, [r7, #20]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	4413      	add	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
			a_++;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
			b_--;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	f77f aefe 	ble.w	8004ad4 <LCD_Circle+0x30>
		}
	}
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd90      	pop	{r4, r7, pc}

08004ce2 <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 8004ce2:	b590      	push	{r4, r7, lr}
 8004ce4:	b089      	sub	sp, #36	; 0x24
 8004ce6:	af02      	add	r7, sp, #8
 8004ce8:	4604      	mov	r4, r0
 8004cea:	4608      	mov	r0, r1
 8004cec:	4611      	mov	r1, r2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	80fb      	strh	r3, [r7, #6]
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	80bb      	strh	r3, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	807b      	strh	r3, [r7, #2]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	f1c3 0301 	rsb	r3, r3, #1
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8004d0e:	887b      	ldrh	r3, [r7, #2]
 8004d10:	461a      	mov	r2, r3
 8004d12:	03d2      	lsls	r2, r2, #15
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8004d20:	887b      	ldrh	r3, [r7, #2]
 8004d22:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8004d24:	e0cd      	b.n	8004ec2 <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8004d26:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db0e      	blt.n	8004d4c <LCD_Circle_Helper+0x6a>
			y--;
 8004d2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8004d3a:	8a7b      	ldrh	r3, [r7, #18]
 8004d3c:	3302      	adds	r3, #2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8004d42:	8afa      	ldrh	r2, [r7, #22]
 8004d44:	8a7b      	ldrh	r3, [r7, #18]
 8004d46:	4413      	add	r3, r2
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8004d4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8004d58:	8abb      	ldrh	r3, [r7, #20]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8004d60:	8afa      	ldrh	r2, [r7, #22]
 8004d62:	8abb      	ldrh	r3, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8004d6a:	787b      	ldrb	r3, [r7, #1]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d025      	beq.n	8004dc0 <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	8a3b      	ldrh	r3, [r7, #16]
 8004d78:	4413      	add	r3, r2
 8004d7a:	b298      	uxth	r0, r3
 8004d7c:	88ba      	ldrh	r2, [r7, #4]
 8004d7e:	89fb      	ldrh	r3, [r7, #14]
 8004d80:	4413      	add	r3, r2
 8004d82:	b299      	uxth	r1, r3
 8004d84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d8e:	b29c      	uxth	r4, r3
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	4623      	mov	r3, r4
 8004d96:	f7ff fa41 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b298      	uxth	r0, r3
 8004da2:	88ba      	ldrh	r2, [r7, #4]
 8004da4:	8a3b      	ldrh	r3, [r7, #16]
 8004da6:	4413      	add	r3, r2
 8004da8:	b299      	uxth	r1, r3
 8004daa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004db4:	b29c      	uxth	r4, r3
 8004db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	4623      	mov	r3, r4
 8004dbc:	f7ff fa2e 	bl	800421c <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 8004dc0:	787b      	ldrb	r3, [r7, #1]
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d025      	beq.n	8004e16 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	8a3b      	ldrh	r3, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	b298      	uxth	r0, r3
 8004dd2:	88ba      	ldrh	r2, [r7, #4]
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	b299      	uxth	r1, r3
 8004dda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004de4:	b29c      	uxth	r4, r3
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7ff fa16 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 8004df0:	88fa      	ldrh	r2, [r7, #6]
 8004df2:	89fb      	ldrh	r3, [r7, #14]
 8004df4:	4413      	add	r3, r2
 8004df6:	b298      	uxth	r0, r3
 8004df8:	88ba      	ldrh	r2, [r7, #4]
 8004dfa:	8a3b      	ldrh	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	b299      	uxth	r1, r3
 8004e00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e0a:	b29c      	uxth	r4, r3
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4623      	mov	r3, r4
 8004e12:	f7ff fa03 	bl	800421c <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8004e16:	787b      	ldrb	r3, [r7, #1]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d025      	beq.n	8004e6c <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	89fb      	ldrh	r3, [r7, #14]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	b298      	uxth	r0, r3
 8004e28:	88ba      	ldrh	r2, [r7, #4]
 8004e2a:	8a3b      	ldrh	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e34:	b29a      	uxth	r2, r3
 8004e36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e3a:	b29c      	uxth	r4, r3
 8004e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	4623      	mov	r3, r4
 8004e42:	f7ff f9eb 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8004e46:	88fa      	ldrh	r2, [r7, #6]
 8004e48:	8a3b      	ldrh	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	b298      	uxth	r0, r3
 8004e4e:	88ba      	ldrh	r2, [r7, #4]
 8004e50:	89fb      	ldrh	r3, [r7, #14]
 8004e52:	4413      	add	r3, r2
 8004e54:	b299      	uxth	r1, r3
 8004e56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e60:	b29c      	uxth	r4, r3
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4623      	mov	r3, r4
 8004e68:	f7ff f9d8 	bl	800421c <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d025      	beq.n	8004ec2 <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8004e76:	88fa      	ldrh	r2, [r7, #6]
 8004e78:	89fb      	ldrh	r3, [r7, #14]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	b298      	uxth	r0, r3
 8004e7e:	88ba      	ldrh	r2, [r7, #4]
 8004e80:	8a3b      	ldrh	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	b299      	uxth	r1, r3
 8004e86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e90:	b29c      	uxth	r4, r3
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	4623      	mov	r3, r4
 8004e98:	f7ff f9c0 	bl	800421c <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	8a3b      	ldrh	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	b298      	uxth	r0, r3
 8004ea4:	88ba      	ldrh	r2, [r7, #4]
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	b299      	uxth	r1, r3
 8004eac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eb6:	b29c      	uxth	r4, r3
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	f7ff f9ad 	bl	800421c <LCD_Rect_Fill>
	while (x < y) {
 8004ec2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8004ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	f6ff af2b 	blt.w	8004d26 <LCD_Circle_Helper+0x44>
		}
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd90      	pop	{r4, r7, pc}

08004eda <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 8004eda:	b590      	push	{r4, r7, lr}
 8004edc:	b085      	sub	sp, #20
 8004ede:	af02      	add	r7, sp, #8
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	4608      	mov	r0, r1
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4623      	mov	r3, r4
 8004eea:	80fb      	strh	r3, [r7, #6]
 8004eec:	4603      	mov	r3, r0
 8004eee:	80bb      	strh	r3, [r7, #4]
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	807b      	strh	r3, [r7, #2]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8004ef8:	8b3a      	ldrh	r2, [r7, #24]
 8004efa:	88fb      	ldrh	r3, [r7, #6]
 8004efc:	4413      	add	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3302      	adds	r3, #2
 8004f02:	b298      	uxth	r0, r3
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	887b      	ldrh	r3, [r7, #2]
 8004f08:	4413      	add	r3, r2
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	7f3b      	ldrb	r3, [r7, #28]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	8b3b      	ldrh	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b02      	subs	r3, #2
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	88bc      	ldrh	r4, [r7, #4]
 8004f20:	88b9      	ldrh	r1, [r7, #4]
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	7f3b      	ldrb	r3, [r7, #28]
 8004f28:	9300      	str	r3, [sp, #0]
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	f7ff f9b4 	bl	8004298 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 8004f30:	8b3a      	ldrh	r2, [r7, #24]
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	4413      	add	r3, r2
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3302      	adds	r3, #2
 8004f3a:	b298      	uxth	r0, r3
 8004f3c:	88ba      	ldrh	r2, [r7, #4]
 8004f3e:	883b      	ldrh	r3, [r7, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b299      	uxth	r1, r3
 8004f48:	88fa      	ldrh	r2, [r7, #6]
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	7f3b      	ldrb	r3, [r7, #28]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	4413      	add	r3, r2
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	8b3b      	ldrh	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b02      	subs	r3, #2
 8004f60:	b29c      	uxth	r4, r3
 8004f62:	88ba      	ldrh	r2, [r7, #4]
 8004f64:	883b      	ldrh	r3, [r7, #0]
 8004f66:	4413      	add	r3, r2
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	7f3b      	ldrb	r3, [r7, #28]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	4613      	mov	r3, r2
 8004f78:	4622      	mov	r2, r4
 8004f7a:	f7ff f98d 	bl	8004298 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 8004f7e:	8b3a      	ldrh	r2, [r7, #24]
 8004f80:	88bb      	ldrh	r3, [r7, #4]
 8004f82:	4413      	add	r3, r2
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3302      	adds	r3, #2
 8004f88:	b299      	uxth	r1, r3
 8004f8a:	88ba      	ldrh	r2, [r7, #4]
 8004f8c:	883b      	ldrh	r3, [r7, #0]
 8004f8e:	4413      	add	r3, r2
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	7f3b      	ldrb	r3, [r7, #28]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	8b3b      	ldrh	r3, [r7, #24]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b02      	subs	r3, #2
 8004fa2:	b29c      	uxth	r4, r3
 8004fa4:	88fa      	ldrh	r2, [r7, #6]
 8004fa6:	88f8      	ldrh	r0, [r7, #6]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	7f3b      	ldrb	r3, [r7, #28]
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7ff f971 	bl	8004298 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	4413      	add	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b298      	uxth	r0, r3
 8004fc2:	8b3a      	ldrh	r2, [r7, #24]
 8004fc4:	88bb      	ldrh	r3, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	3302      	adds	r3, #2
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	887b      	ldrh	r3, [r7, #2]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29c      	uxth	r4, r3
 8004fda:	88ba      	ldrh	r2, [r7, #4]
 8004fdc:	883b      	ldrh	r3, [r7, #0]
 8004fde:	4413      	add	r3, r2
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	7f3b      	ldrb	r3, [r7, #28]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	8b3b      	ldrh	r3, [r7, #24]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b02      	subs	r3, #2
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	6a3b      	ldr	r3, [r7, #32]
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	7f3b      	ldrb	r3, [r7, #28]
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	4622      	mov	r2, r4
 8005000:	f7ff f94a 	bl	8004298 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8005004:	8b3a      	ldrh	r2, [r7, #24]
 8005006:	88fb      	ldrh	r3, [r7, #6]
 8005008:	4413      	add	r3, r2
 800500a:	b29b      	uxth	r3, r3
 800500c:	3302      	adds	r3, #2
 800500e:	b29b      	uxth	r3, r3
 8005010:	b218      	sxth	r0, r3
 8005012:	8b3a      	ldrh	r2, [r7, #24]
 8005014:	88bb      	ldrh	r3, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	b29b      	uxth	r3, r3
 800501a:	3302      	adds	r3, #2
 800501c:	b29b      	uxth	r3, r3
 800501e:	b219      	sxth	r1, r3
 8005020:	8b3b      	ldrh	r3, [r7, #24]
 8005022:	3302      	adds	r3, #2
 8005024:	b29b      	uxth	r3, r3
 8005026:	b21a      	sxth	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	7f3b      	ldrb	r3, [r7, #28]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2301      	movs	r3, #1
 8005032:	f7ff fe56 	bl	8004ce2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8005036:	88fa      	ldrh	r2, [r7, #6]
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	4413      	add	r3, r2
 800503c:	b29a      	uxth	r2, r3
 800503e:	8b3b      	ldrh	r3, [r7, #24]
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b03      	subs	r3, #3
 8005046:	b29b      	uxth	r3, r3
 8005048:	b218      	sxth	r0, r3
 800504a:	8b3a      	ldrh	r2, [r7, #24]
 800504c:	88bb      	ldrh	r3, [r7, #4]
 800504e:	4413      	add	r3, r2
 8005050:	b29b      	uxth	r3, r3
 8005052:	3302      	adds	r3, #2
 8005054:	b29b      	uxth	r3, r3
 8005056:	b219      	sxth	r1, r3
 8005058:	8b3b      	ldrh	r3, [r7, #24]
 800505a:	3302      	adds	r3, #2
 800505c:	b29b      	uxth	r3, r3
 800505e:	b21a      	sxth	r2, r3
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	9301      	str	r3, [sp, #4]
 8005064:	7f3b      	ldrb	r3, [r7, #28]
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	2302      	movs	r3, #2
 800506a:	f7ff fe3a 	bl	8004ce2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	887b      	ldrh	r3, [r7, #2]
 8005072:	4413      	add	r3, r2
 8005074:	b29a      	uxth	r2, r3
 8005076:	8b3b      	ldrh	r3, [r7, #24]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b03      	subs	r3, #3
 800507e:	b29b      	uxth	r3, r3
 8005080:	b218      	sxth	r0, r3
 8005082:	88ba      	ldrh	r2, [r7, #4]
 8005084:	883b      	ldrh	r3, [r7, #0]
 8005086:	4413      	add	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	8b3b      	ldrh	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b03      	subs	r3, #3
 8005092:	b29b      	uxth	r3, r3
 8005094:	b219      	sxth	r1, r3
 8005096:	8b3b      	ldrh	r3, [r7, #24]
 8005098:	3302      	adds	r3, #2
 800509a:	b29b      	uxth	r3, r3
 800509c:	b21a      	sxth	r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	9301      	str	r3, [sp, #4]
 80050a2:	7f3b      	ldrb	r3, [r7, #28]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	2304      	movs	r3, #4
 80050a8:	f7ff fe1b 	bl	8004ce2 <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 80050ac:	8b3a      	ldrh	r2, [r7, #24]
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	4413      	add	r3, r2
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3302      	adds	r3, #2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	b218      	sxth	r0, r3
 80050ba:	88ba      	ldrh	r2, [r7, #4]
 80050bc:	883b      	ldrh	r3, [r7, #0]
 80050be:	4413      	add	r3, r2
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	8b3b      	ldrh	r3, [r7, #24]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b03      	subs	r3, #3
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	b219      	sxth	r1, r3
 80050ce:	8b3b      	ldrh	r3, [r7, #24]
 80050d0:	3302      	adds	r3, #2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	b21a      	sxth	r2, r3
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	9301      	str	r3, [sp, #4]
 80050da:	7f3b      	ldrb	r3, [r7, #28]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	2308      	movs	r3, #8
 80050e0:	f7ff fdff 	bl	8004ce2 <LCD_Circle_Helper>
}
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd90      	pop	{r4, r7, pc}

080050ec <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b089      	sub	sp, #36	; 0x24
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	4604      	mov	r4, r0
 80050f4:	4608      	mov	r0, r1
 80050f6:	4611      	mov	r1, r2
 80050f8:	461a      	mov	r2, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	80fb      	strh	r3, [r7, #6]
 80050fe:	4603      	mov	r3, r0
 8005100:	80bb      	strh	r3, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	807b      	strh	r3, [r7, #2]
 8005106:	4613      	mov	r3, r2
 8005108:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800510a:	887b      	ldrh	r3, [r7, #2]
 800510c:	f1c3 0301 	rsb	r3, r3, #1
 8005110:	b29b      	uxth	r3, r3
 8005112:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8005114:	2301      	movs	r3, #1
 8005116:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8005118:	887b      	ldrh	r3, [r7, #2]
 800511a:	461a      	mov	r2, r3
 800511c:	03d2      	lsls	r2, r2, #15
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	b29b      	uxth	r3, r3
 8005124:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800512a:	887b      	ldrh	r3, [r7, #2]
 800512c:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800512e:	e0ab      	b.n	8005288 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 8005130:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005134:	2b00      	cmp	r3, #0
 8005136:	db0e      	blt.n	8005156 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8005138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29b      	uxth	r3, r3
 8005142:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8005144:	8a7b      	ldrh	r3, [r7, #18]
 8005146:	3302      	adds	r3, #2
 8005148:	b29b      	uxth	r3, r3
 800514a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800514c:	8afa      	ldrh	r2, [r7, #22]
 800514e:	8a7b      	ldrh	r3, [r7, #18]
 8005150:	4413      	add	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8005156:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800515a:	b29b      	uxth	r3, r3
 800515c:	3301      	adds	r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8005162:	8abb      	ldrh	r3, [r7, #20]
 8005164:	3302      	adds	r3, #2
 8005166:	b29b      	uxth	r3, r3
 8005168:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800516a:	8afa      	ldrh	r2, [r7, #22]
 800516c:	8abb      	ldrh	r3, [r7, #20]
 800516e:	4413      	add	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d03f      	beq.n	80051fe <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	8a3b      	ldrh	r3, [r7, #16]
 8005182:	4413      	add	r3, r2
 8005184:	b298      	uxth	r0, r3
 8005186:	88ba      	ldrh	r2, [r7, #4]
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	b299      	uxth	r1, r3
 800518e:	88fa      	ldrh	r2, [r7, #6]
 8005190:	8a3b      	ldrh	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	b29c      	uxth	r4, r3
 8005196:	88ba      	ldrh	r2, [r7, #4]
 8005198:	89fb      	ldrh	r3, [r7, #14]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	b29a      	uxth	r2, r3
 800519e:	89fb      	ldrh	r3, [r7, #14]
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	4413      	add	r3, r2
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051aa:	4413      	add	r3, r2
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	2301      	movs	r3, #1
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	4622      	mov	r2, r4
 80051ba:	f7ff f86d 	bl	8004298 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	89fb      	ldrh	r3, [r7, #14]
 80051c2:	4413      	add	r3, r2
 80051c4:	b298      	uxth	r0, r3
 80051c6:	88ba      	ldrh	r2, [r7, #4]
 80051c8:	8a3b      	ldrh	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	b299      	uxth	r1, r3
 80051ce:	88fa      	ldrh	r2, [r7, #6]
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	4413      	add	r3, r2
 80051d4:	b29c      	uxth	r4, r3
 80051d6:	88ba      	ldrh	r2, [r7, #4]
 80051d8:	8a3b      	ldrh	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	b29a      	uxth	r2, r3
 80051de:	8a3b      	ldrh	r3, [r7, #16]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80051ea:	4413      	add	r3, r2
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	2301      	movs	r3, #1
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4613      	mov	r3, r2
 80051f8:	4622      	mov	r2, r4
 80051fa:	f7ff f84d 	bl	8004298 <LCD_Line>
		}
		if (cornername & 0x2) {
 80051fe:	787b      	ldrb	r3, [r7, #1]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d03f      	beq.n	8005288 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8005208:	88fa      	ldrh	r2, [r7, #6]
 800520a:	8a3b      	ldrh	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	b298      	uxth	r0, r3
 8005210:	88ba      	ldrh	r2, [r7, #4]
 8005212:	89fb      	ldrh	r3, [r7, #14]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	b299      	uxth	r1, r3
 8005218:	88fa      	ldrh	r2, [r7, #6]
 800521a:	8a3b      	ldrh	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	b29c      	uxth	r4, r3
 8005220:	88ba      	ldrh	r2, [r7, #4]
 8005222:	89fb      	ldrh	r3, [r7, #14]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	b29a      	uxth	r2, r3
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	b29b      	uxth	r3, r3
 800522e:	4413      	add	r3, r2
 8005230:	b29a      	uxth	r2, r3
 8005232:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005234:	4413      	add	r3, r2
 8005236:	b29a      	uxth	r2, r3
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	2301      	movs	r3, #1
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	4622      	mov	r2, r4
 8005244:	f7ff f828 	bl	8004298 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	89fb      	ldrh	r3, [r7, #14]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	b298      	uxth	r0, r3
 8005250:	88ba      	ldrh	r2, [r7, #4]
 8005252:	8a3b      	ldrh	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	b299      	uxth	r1, r3
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	89fb      	ldrh	r3, [r7, #14]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	b29c      	uxth	r4, r3
 8005260:	88ba      	ldrh	r2, [r7, #4]
 8005262:	8a3b      	ldrh	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	b29a      	uxth	r2, r3
 8005268:	8a3b      	ldrh	r3, [r7, #16]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	b29b      	uxth	r3, r3
 800526e:	4413      	add	r3, r2
 8005270:	b29a      	uxth	r2, r3
 8005272:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005274:	4413      	add	r3, r2
 8005276:	b29a      	uxth	r2, r3
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	2301      	movs	r3, #1
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	4613      	mov	r3, r2
 8005282:	4622      	mov	r2, r4
 8005284:	f7ff f808 	bl	8004298 <LCD_Line>
	while (x < y) {
 8005288:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800528c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005290:	429a      	cmp	r2, r3
 8005292:	f6ff af4d 	blt.w	8005130 <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd90      	pop	{r4, r7, pc}

080052a0 <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 80052a0:	b590      	push	{r4, r7, lr}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	4604      	mov	r4, r0
 80052a8:	4608      	mov	r0, r1
 80052aa:	4611      	mov	r1, r2
 80052ac:	461a      	mov	r2, r3
 80052ae:	4623      	mov	r3, r4
 80052b0:	80fb      	strh	r3, [r7, #6]
 80052b2:	4603      	mov	r3, r0
 80052b4:	80bb      	strh	r3, [r7, #4]
 80052b6:	460b      	mov	r3, r1
 80052b8:	807b      	strh	r3, [r7, #2]
 80052ba:	4613      	mov	r3, r2
 80052bc:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 80052be:	88fa      	ldrh	r2, [r7, #6]
 80052c0:	8b3b      	ldrh	r3, [r7, #24]
 80052c2:	4413      	add	r3, r2
 80052c4:	b298      	uxth	r0, r3
 80052c6:	8b3b      	ldrh	r3, [r7, #24]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	887a      	ldrh	r2, [r7, #2]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	883c      	ldrh	r4, [r7, #0]
 80052d4:	88b9      	ldrh	r1, [r7, #4]
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	4623      	mov	r3, r4
 80052dc:	f7fe ff9e 	bl	800421c <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	887b      	ldrh	r3, [r7, #2]
 80052e4:	4413      	add	r3, r2
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	8b3b      	ldrh	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	b218      	sxth	r0, r3
 80052f4:	88ba      	ldrh	r2, [r7, #4]
 80052f6:	8b3b      	ldrh	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	b219      	sxth	r1, r3
 80052fe:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8005302:	8b3b      	ldrh	r3, [r7, #24]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	b29b      	uxth	r3, r3
 8005308:	883a      	ldrh	r2, [r7, #0]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29b      	uxth	r3, r3
 8005312:	b21b      	sxth	r3, r3
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	9201      	str	r2, [sp, #4]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	2301      	movs	r3, #1
 800531c:	4622      	mov	r2, r4
 800531e:	f7ff fee5 	bl	80050ec <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	8b3b      	ldrh	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	b29b      	uxth	r3, r3
 800532a:	b218      	sxth	r0, r3
 800532c:	88ba      	ldrh	r2, [r7, #4]
 800532e:	8b3b      	ldrh	r3, [r7, #24]
 8005330:	4413      	add	r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	b219      	sxth	r1, r3
 8005336:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 800533a:	8b3b      	ldrh	r3, [r7, #24]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	883a      	ldrh	r2, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29b      	uxth	r3, r3
 800534a:	b21b      	sxth	r3, r3
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	2302      	movs	r3, #2
 8005354:	4622      	mov	r2, r4
 8005356:	f7ff fec9 	bl	80050ec <LCD_Circle_Fill_Helper>
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8005362:	b590      	push	{r4, r7, lr}
 8005364:	b08b      	sub	sp, #44	; 0x2c
 8005366:	af02      	add	r7, sp, #8
 8005368:	60ba      	str	r2, [r7, #8]
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	4603      	mov	r3, r0
 800536e:	81fb      	strh	r3, [r7, #14]
 8005370:	460b      	mov	r3, r1
 8005372:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	777b      	strb	r3, [r7, #29]
 8005384:	2300      	movs	r3, #0
 8005386:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800538c:	2300      	movs	r3, #0
 800538e:	763b      	strb	r3, [r7, #24]
 8005390:	e093      	b.n	80054ba <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005392:	2300      	movs	r3, #0
 8005394:	767b      	strb	r3, [r7, #25]
 8005396:	e052      	b.n	800543e <LCD_Char+0xdc>
		{
			if(bit == 0)
 8005398:	7f3b      	ldrb	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d109      	bne.n	80053b2 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800539e:	8bfb      	ldrh	r3, [r7, #30]
 80053a0:	1c5a      	adds	r2, r3, #1
 80053a2:	83fa      	strh	r2, [r7, #30]
 80053a4:	461a      	mov	r2, r3
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	4413      	add	r3, r2
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80053ae:	2380      	movs	r3, #128	; 0x80
 80053b0:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 80053b2:	7f7a      	ldrb	r2, [r7, #29]
 80053b4:	7f3b      	ldrb	r3, [r7, #28]
 80053b6:	4013      	ands	r3, r2
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d003      	beq.n	80053c6 <LCD_Char+0x64>
			{
				set_pixels++;
 80053be:	8b7b      	ldrh	r3, [r7, #26]
 80053c0:	3301      	adds	r3, #1
 80053c2:	837b      	strh	r3, [r7, #26]
 80053c4:	e035      	b.n	8005432 <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 80053c6:	8b7b      	ldrh	r3, [r7, #26]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d032      	beq.n	8005432 <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80053d2:	461a      	mov	r2, r3
 80053d4:	7e7b      	ldrb	r3, [r7, #25]
 80053d6:	441a      	add	r2, r3
 80053d8:	8b7b      	ldrh	r3, [r7, #26]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	b29a      	uxth	r2, r3
 80053de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	fb12 f303 	smulbb	r3, r2, r3
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	89fb      	ldrh	r3, [r7, #14]
 80053ec:	4413      	add	r3, r2
 80053ee:	b298      	uxth	r0, r3
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80053f6:	461a      	mov	r2, r3
 80053f8:	7e3b      	ldrb	r3, [r7, #24]
 80053fa:	4413      	add	r3, r2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005402:	b29b      	uxth	r3, r3
 8005404:	fb12 f303 	smulbb	r3, r2, r3
 8005408:	b29a      	uxth	r2, r3
 800540a:	89bb      	ldrh	r3, [r7, #12]
 800540c:	4413      	add	r3, r2
 800540e:	b299      	uxth	r1, r3
 8005410:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005414:	b29b      	uxth	r3, r3
 8005416:	8b7a      	ldrh	r2, [r7, #26]
 8005418:	fb12 f303 	smulbb	r3, r2, r3
 800541c:	b29a      	uxth	r2, r3
 800541e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005422:	b29c      	uxth	r4, r3
 8005424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4623      	mov	r3, r4
 800542a:	f7fe fef7 	bl	800421c <LCD_Rect_Fill>
				set_pixels = 0;
 800542e:	2300      	movs	r3, #0
 8005430:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8005432:	7f3b      	ldrb	r3, [r7, #28]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8005438:	7e7b      	ldrb	r3, [r7, #25]
 800543a:	3301      	adds	r3, #1
 800543c:	767b      	strb	r3, [r7, #25]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	789b      	ldrb	r3, [r3, #2]
 8005442:	7e7a      	ldrb	r2, [r7, #25]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3a7      	bcc.n	8005398 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8005448:	8b7b      	ldrh	r3, [r7, #26]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d032      	beq.n	80054b4 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005454:	461a      	mov	r2, r3
 8005456:	7e7b      	ldrb	r3, [r7, #25]
 8005458:	441a      	add	r2, r3
 800545a:	8b7b      	ldrh	r3, [r7, #26]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	b29a      	uxth	r2, r3
 8005460:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005464:	b29b      	uxth	r3, r3
 8005466:	fb12 f303 	smulbb	r3, r2, r3
 800546a:	b29a      	uxth	r2, r3
 800546c:	89fb      	ldrh	r3, [r7, #14]
 800546e:	4413      	add	r3, r2
 8005470:	b298      	uxth	r0, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005478:	461a      	mov	r2, r3
 800547a:	7e3b      	ldrb	r3, [r7, #24]
 800547c:	4413      	add	r3, r2
 800547e:	b29a      	uxth	r2, r3
 8005480:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005484:	b29b      	uxth	r3, r3
 8005486:	fb12 f303 	smulbb	r3, r2, r3
 800548a:	b29a      	uxth	r2, r3
 800548c:	89bb      	ldrh	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	b299      	uxth	r1, r3
 8005492:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8005496:	b29b      	uxth	r3, r3
 8005498:	8b7a      	ldrh	r2, [r7, #26]
 800549a:	fb12 f303 	smulbb	r3, r2, r3
 800549e:	b29a      	uxth	r2, r3
 80054a0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80054a4:	b29c      	uxth	r4, r3
 80054a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	4623      	mov	r3, r4
 80054ac:	f7fe feb6 	bl	800421c <LCD_Rect_Fill>
			set_pixels = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80054b4:	7e3b      	ldrb	r3, [r7, #24]
 80054b6:	3301      	adds	r3, #1
 80054b8:	763b      	strb	r3, [r7, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	7e3a      	ldrb	r2, [r7, #24]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	f4ff af66 	bcc.w	8005392 <LCD_Char+0x30>
		}
	}
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	3724      	adds	r7, #36	; 0x24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd90      	pop	{r4, r7, pc}

080054d0 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80054d0:	b590      	push	{r4, r7, lr}
 80054d2:	b08f      	sub	sp, #60	; 0x3c
 80054d4:	af02      	add	r7, sp, #8
 80054d6:	60ba      	str	r2, [r7, #8]
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	4603      	mov	r3, r0
 80054dc:	81fb      	strh	r3, [r7, #14]
 80054de:	460b      	mov	r3, r1
 80054e0:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80054e2:	89fb      	ldrh	r3, [r7, #14]
 80054e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80054e6:	89bb      	ldrh	r3, [r7, #12]
 80054e8:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	220c      	movs	r2, #12
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f017 f848 	bl	801c588 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80054f8:	2300      	movs	r3, #0
 80054fa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80054fc:	e056      	b.n	80055ac <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80054fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	4413      	add	r3, r2
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 800550a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800550e:	2b0a      	cmp	r3, #10
 8005510:	d10f      	bne.n	8005532 <LCD_Font+0x62>
		{
			cursor_x = x;
 8005512:	89fb      	ldrh	r3, [r7, #14]
 8005514:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8005516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800551a:	b29a      	uxth	r2, r3
 800551c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005520:	b29b      	uxth	r3, r3
 8005522:	fb12 f303 	smulbb	r3, r2, r3
 8005526:	b29a      	uxth	r2, r3
 8005528:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800552a:	4413      	add	r3, r2
 800552c:	b29b      	uxth	r3, r3
 800552e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005530:	e039      	b.n	80055a6 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8005532:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005536:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800553a:	429a      	cmp	r2, r3
 800553c:	d333      	bcc.n	80055a6 <LCD_Font+0xd6>
 800553e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005542:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005546:	429a      	cmp	r2, r3
 8005548:	d82d      	bhi.n	80055a6 <LCD_Font+0xd6>
 800554a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800554e:	2b0d      	cmp	r3, #13
 8005550:	d029      	beq.n	80055a6 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8005552:	6a3a      	ldr	r2, [r7, #32]
 8005554:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005558:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800555c:	1a5b      	subs	r3, r3, r1
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	18d1      	adds	r1, r2, r3
 8005562:	f107 0314 	add.w	r3, r7, #20
 8005566:	2208      	movs	r2, #8
 8005568:	4618      	mov	r0, r3
 800556a:	f017 f80d 	bl	801c588 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800556e:	f107 041c 	add.w	r4, r7, #28
 8005572:	f107 0214 	add.w	r2, r7, #20
 8005576:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 800557a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800557e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005580:	9301      	str	r3, [sp, #4]
 8005582:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	4623      	mov	r3, r4
 800558a:	f7ff feea 	bl	8005362 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800558e:	7e3b      	ldrb	r3, [r7, #24]
 8005590:	b29a      	uxth	r2, r3
 8005592:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005596:	b29b      	uxth	r3, r3
 8005598:	fb12 f303 	smulbb	r3, r2, r3
 800559c:	b29a      	uxth	r2, r3
 800559e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80055a0:	4413      	add	r3, r2
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80055a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80055a8:	3301      	adds	r3, #1
 80055aa:	857b      	strh	r3, [r7, #42]	; 0x2a
 80055ac:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80055ae:	68b8      	ldr	r0, [r7, #8]
 80055b0:	f013 f914 	bl	80187dc <strlen>
 80055b4:	4603      	mov	r3, r0
 80055b6:	429c      	cmp	r4, r3
 80055b8:	d3a1      	bcc.n	80054fe <LCD_Font+0x2e>
		}
	}
}
 80055ba:	bf00      	nop
 80055bc:	bf00      	nop
 80055be:	3734      	adds	r7, #52	; 0x34
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd90      	pop	{r4, r7, pc}

080055c4 <LCD_Init>:

void LCD_Init(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
	//		LCD_RST_SET
	//    HAL_Delay (100);
	//    LCD_RST_RESET
	//    HAL_Delay (120);
	//    LCD_RST_SET
	HAL_Delay(150);
 80055c8:	2096      	movs	r0, #150	; 0x96
 80055ca:	f001 f87b 	bl	80066c4 <HAL_Delay>
	3.  Before PLL is locked, SSD1961/2/3 is operating at input clock frequency (e.g. 10MHz), registers
	programming cannot be set faster than half of the input clock frequency (5M words/s in this example).
	Example to program SSD1961 with M = 29, N = 2, VCO = 10M x 30 = 300 MHz, PLL frequency = 300M / 3 = 100
	MHz
	******************************/
	LCD_Send_Cmd(LCD_RESET);
 80055ce:	2001      	movs	r0, #1
 80055d0:	f7fe fd95 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Cmd(LCD_DISPLAY_ON); 		
 80055d4:	2029      	movs	r0, #41	; 0x29
 80055d6:	f7fe fd92 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Cmd(0xE2);//set frequency
 80055da:	20e2      	movs	r0, #226	; 0xe2
 80055dc:	f7fe fd8f 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x1D);  // presceller(M=29) 
 80055e0:	201d      	movs	r0, #29
 80055e2:	f7fe fd9b 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x02);  //multiplier(N=2) 
 80055e6:	2002      	movs	r0, #2
 80055e8:	f7fe fd98 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);  //on-off multiplier and presceller
 80055ec:	20ff      	movs	r0, #255	; 0xff
 80055ee:	f7fe fd95 	bl	800411c <LCD_Send_Dat>
	//3. Turn on the PLL 
	LCD_Send_Cmd(0xE0);
 80055f2:	20e0      	movs	r0, #224	; 0xe0
 80055f4:	f7fe fd83 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x01);
 80055f8:	2001      	movs	r0, #1
 80055fa:	f7fe fd8f 	bl	800411c <LCD_Send_Dat>
	HAL_Delay(120); // Wait for 100us to let the PLL stable and read the PLL lock status bit. 
 80055fe:	2078      	movs	r0, #120	; 0x78
 8005600:	f001 f860 	bl	80066c4 <HAL_Delay>
	LCD_Send_Cmd(0xE0);
 8005604:	20e0      	movs	r0, #224	; 0xe0
 8005606:	f7fe fd7a 	bl	80040fe <LCD_Send_Cmd>
	//READ COMMAND “0xE4);   (Bit 2 = 1 if PLL locked) 
	LCD_Send_Dat(0x03); // 5. Switch the clock source to PLL 
 800560a:	2003      	movs	r0, #3
 800560c:	f7fe fd86 	bl	800411c <LCD_Send_Dat>
	HAL_Delay(120);
 8005610:	2078      	movs	r0, #120	; 0x78
 8005612:	f001 f857 	bl	80066c4 <HAL_Delay>
	LCD_Send_Cmd(0x01); //6. Software Reset
 8005616:	2001      	movs	r0, #1
 8005618:	f7fe fd71 	bl	80040fe <LCD_Send_Cmd>
	HAL_Delay(120);
 800561c:	2078      	movs	r0, #120	; 0x78
 800561e:	f001 f851 	bl	80066c4 <HAL_Delay>
	/*************
	Dot clock Freq = PLL Freq x (LCDC_FPR + 1) / 2^20
	For example,  22MHz = 100MHz * (LCDC_FPR+1) / 2^20
	LCDC_FPR = 230685 = 0x3851D
	********************/
	LCD_Send_Cmd(0xE6);  // 7. Configure the dot clock frequency
 8005622:	20e6      	movs	r0, #230	; 0xe6
 8005624:	f7fe fd6b 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);
 8005628:	2003      	movs	r0, #3
 800562a:	f7fe fd77 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x85);
 800562e:	2085      	movs	r0, #133	; 0x85
 8005630:	f7fe fd74 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x1D);
 8005634:	201d      	movs	r0, #29
 8005636:	f7fe fd71 	bl	800411c <LCD_Send_Dat>
	//8. Configure the LCD panel  
	//a. Set the panel size to 480 x 800 and polarity of LSHIFT, LLINE and LFRAME to active low 
	LCD_Send_Cmd(0xB0);
 800563a:	20b0      	movs	r0, #176	; 0xb0
 800563c:	f7fe fd5f 	bl	80040fe <LCD_Send_Cmd>
	if (LSHIFT) LCD_Send_Dat(0x0C); /* 0x08 0x0C 0xAE(5') */else LCD_Send_Dat(0xAE); //18bit panel, disable dithering, LSHIFT: Data latch in rising edge, LLINE and LFRAME: active low 
 8005640:	20ae      	movs	r0, #174	; 0xae
 8005642:	f7fe fd6b 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x20);  /* 0x00 0x80 0x20(5') */    // TFT type 
 8005646:	2020      	movs	r0, #32
 8005648:	f7fe fd68 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x03);     // Horizontal Width:  480 - 1 = 0x031F 
 800564c:	2003      	movs	r0, #3
 800564e:	f7fe fd65 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x1F);
 8005652:	201f      	movs	r0, #31
 8005654:	f7fe fd62 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // Vertical Width :  800 -1 = 0x01DF
 8005658:	2001      	movs	r0, #1
 800565a:	f7fe fd5f 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0xDF);
 800565e:	20df      	movs	r0, #223	; 0xdf
 8005660:	f7fe fd5c 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x2D);  /* 0x00 0x2d */   // 000 = режим RGB
 8005664:	202d      	movs	r0, #45	; 0x2d
 8005666:	f7fe fd59 	bl	800411c <LCD_Send_Dat>
											 //b. Set the horizontal period 
	LCD_Send_Cmd(0xB4); // Horizontal Display Period  
 800566a:	20b4      	movs	r0, #180	; 0xb4
 800566c:	f7fe fd47 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);    // HT: horizontal total period (display + non-display) – 1 = 520-1 =  519 =0x0207
 8005670:	2003      	movs	r0, #3
 8005672:	f7fe fd53 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0xA0);
 8005676:	20a0      	movs	r0, #160	; 0xa0
 8005678:	f7fe fd50 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // HPS: Horizontal Sync Pulse Start Position = Horizontal Pulse Width + Horizontal Back Porch = 16 = 0x10 
 800567c:	2000      	movs	r0, #0
 800567e:	f7fe fd4d 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x2E);
 8005682:	202e      	movs	r0, #46	; 0x2e
 8005684:	f7fe fd4a 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x30);     // HPW: Horizontal Sync Pulse Width - 1=8-1=7 
 8005688:	2030      	movs	r0, #48	; 0x30
 800568a:	f7fe fd47 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPS: Horizontal Display Period Start Position = 0x0000 
 800568e:	2000      	movs	r0, #0
 8005690:	f7fe fd44 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x0F);
 8005694:	200f      	movs	r0, #15
 8005696:	f7fe fd41 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x00);    // LPSPP: Horizontal Sync Pulse Subpixel Start Position(for serial TFT interface).  Dummy value for TFT interface. 
 800569a:	2000      	movs	r0, #0
 800569c:	f7fe fd3e 	bl	800411c <LCD_Send_Dat>
							 //c. Set the vertical period 
	LCD_Send_Cmd(0xB6);    // Vertical Display Period  
 80056a0:	20b6      	movs	r0, #182	; 0xb6
 80056a2:	f7fe fd2c 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x02);     // VT: Vertical Total (display + non-display) Period – 1  =647=0x287 
 80056a6:	2002      	movs	r0, #2
 80056a8:	f7fe fd38 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x0D);
 80056ac:	200d      	movs	r0, #13
 80056ae:	f7fe fd35 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x00);     // VPS: Vertical Sync Pulse Start Position  =     Vertical Pulse Width + Vertical Back Porch = 2+2=4  
 80056b2:	2000      	movs	r0, #0
 80056b4:	f7fe fd32 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x10);
 80056b8:	2010      	movs	r0, #16
 80056ba:	f7fe fd2f 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x10);     //VPW: Vertical Sync Pulse Width – 1 =1 
 80056be:	2010      	movs	r0, #16
 80056c0:	f7fe fd2c 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x08);     //FPS: Vertical Display Period Start Position = 0 
 80056c4:	2008      	movs	r0, #8
 80056c6:	f7fe fd29 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x00);
 80056ca:	2000      	movs	r0, #0
 80056cc:	f7fe fd26 	bl	800411c <LCD_Send_Dat>
	//9. Set the back light control PWM clock frequency
	//PWM signal frequency = PLL clock / (256 * (PWMF[7:0] + 1)) / 256
	LCD_Send_Cmd(0xBE);    // PWM configuration 
 80056d0:	20be      	movs	r0, #190	; 0xbe
 80056d2:	f7fe fd14 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 80056d6:	2008      	movs	r0, #8
 80056d8:	f7fe fd20 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0xFF);     // PWM duty cycle  (50%) 
 80056dc:	20ff      	movs	r0, #255	; 0xff
 80056de:	f7fe fd1d 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x01);     // 0x09 = enable DBC, 0x01 = disable DBC  //on
 80056e2:	2001      	movs	r0, #1
 80056e4:	f7fe fd1a 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Cmd(0x36);     // set address_mode
 80056e8:	2036      	movs	r0, #54	; 0x36
 80056ea:	f7fe fd08 	bl	80040fe <LCD_Send_Cmd>
	if (MIRROR_H) LCD_Send_Dat(0x02); else if (MIRROR_V) LCD_Send_Dat(0x03);
 80056ee:	2003      	movs	r0, #3
 80056f0:	f7fe fd14 	bl	800411c <LCD_Send_Dat>
	//13. Setup the MCU interface for 16-bit data write (565 RGB)
	LCD_Send_Cmd(0xF0);     // mcu interface config 
 80056f4:	20f0      	movs	r0, #240	; 0xf0
 80056f6:	f7fe fd02 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x03);     // 16 bit interface (565)
 80056fa:	2003      	movs	r0, #3
 80056fc:	f7fe fd0e 	bl	800411c <LCD_Send_Dat>
							//10. Turn on the display 						
	LCD_Send_Cmd(LCD_DISPLAY_ON);     // display on 
 8005700:	2029      	movs	r0, #41	; 0x29
 8005702:	f7fe fcfc 	bl	80040fe <LCD_Send_Cmd>
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}

0800570a <LCD_Bright>:

void LCD_Bright(uint8_t bright)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(0xBE);  // PWM configuration 
 8005714:	20be      	movs	r0, #190	; 0xbe
 8005716:	f7fe fcf2 	bl	80040fe <LCD_Send_Cmd>
	LCD_Send_Dat(0x08);     // set PWM signal frequency to 170Hz when PLL frequency is 100MHz 
 800571a:	2008      	movs	r0, #8
 800571c:	f7fe fcfe 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(bright);   // PWM duty cycle  
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	b29b      	uxth	r3, r3
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fcf9 	bl	800411c <LCD_Send_Dat>
	LCD_Send_Dat(0x01);
 800572a:	2001      	movs	r0, #1
 800572c:	f7fe fcf6 	bl	800411c <LCD_Send_Dat>
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800573e:	2300      	movs	r3, #0
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4b10      	ldr	r3, [pc, #64]	; (8005784 <HAL_MspInit+0x4c>)
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	4a0f      	ldr	r2, [pc, #60]	; (8005784 <HAL_MspInit+0x4c>)
 8005748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800574c:	6453      	str	r3, [r2, #68]	; 0x44
 800574e:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <HAL_MspInit+0x4c>)
 8005750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800575a:	2300      	movs	r3, #0
 800575c:	607b      	str	r3, [r7, #4]
 800575e:	4b09      	ldr	r3, [pc, #36]	; (8005784 <HAL_MspInit+0x4c>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	4a08      	ldr	r2, [pc, #32]	; (8005784 <HAL_MspInit+0x4c>)
 8005764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005768:	6413      	str	r3, [r2, #64]	; 0x40
 800576a:	4b06      	ldr	r3, [pc, #24]	; (8005784 <HAL_MspInit+0x4c>)
 800576c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005772:	607b      	str	r3, [r7, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005776:	bf00      	nop
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800

08005788 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	; 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005790:	f107 0314 	add.w	r3, r7, #20
 8005794:	2200      	movs	r2, #0
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	60da      	str	r2, [r3, #12]
 800579e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <HAL_DAC_MspInit+0x7c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d127      	bne.n	80057fa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	4b16      	ldr	r3, [pc, #88]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b8:	6413      	str	r3, [r2, #64]	; 0x40
 80057ba:	4b13      	ldr	r3, [pc, #76]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c6:	2300      	movs	r3, #0
 80057c8:	613b      	str	r3, [r7, #16]
 80057ca:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	4a0e      	ldr	r2, [pc, #56]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6313      	str	r3, [r2, #48]	; 0x30
 80057d6:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <HAL_DAC_MspInit+0x80>)
 80057d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	693b      	ldr	r3, [r7, #16]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80057e2:	2330      	movs	r3, #48	; 0x30
 80057e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057e6:	2303      	movs	r3, #3
 80057e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ee:	f107 0314 	add.w	r3, r7, #20
 80057f2:	4619      	mov	r1, r3
 80057f4:	4805      	ldr	r0, [pc, #20]	; (800580c <HAL_DAC_MspInit+0x84>)
 80057f6:	f005 f881 	bl	800a8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80057fa:	bf00      	nop
 80057fc:	3728      	adds	r7, #40	; 0x28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40007400 	.word	0x40007400
 8005808:	40023800 	.word	0x40023800
 800580c:	40020000 	.word	0x40020000

08005810 <HAL_DAC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspDeInit(DAC_HandleTypeDef* hdac)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if(hdac->Instance==DAC)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a08      	ldr	r2, [pc, #32]	; (8005840 <HAL_DAC_MspDeInit+0x30>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d109      	bne.n	8005836 <HAL_DAC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN DAC_MspDeInit 0 */

  /* USER CODE END DAC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DAC_CLK_DISABLE();
 8005822:	4b08      	ldr	r3, [pc, #32]	; (8005844 <HAL_DAC_MspDeInit+0x34>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a07      	ldr	r2, [pc, #28]	; (8005844 <HAL_DAC_MspDeInit+0x34>)
 8005828:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40

    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4|GPIO_PIN_5);
 800582e:	2130      	movs	r1, #48	; 0x30
 8005830:	4805      	ldr	r0, [pc, #20]	; (8005848 <HAL_DAC_MspDeInit+0x38>)
 8005832:	f005 f9ff 	bl	800ac34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN DAC_MspDeInit 1 */

  /* USER CODE END DAC_MspDeInit 1 */
  }

}
 8005836:	bf00      	nop
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40007400 	.word	0x40007400
 8005844:	40023800 	.word	0x40023800
 8005848:	40020000 	.word	0x40020000

0800584c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	609a      	str	r2, [r3, #8]
 8005860:	60da      	str	r2, [r3, #12]
 8005862:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_I2C_MspInit+0xa4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d13b      	bne.n	80058e6 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	4a1f      	ldr	r2, [pc, #124]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	6313      	str	r3, [r2, #48]	; 0x30
 800587e:	4b1d      	ldr	r3, [pc, #116]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800588a:	23c0      	movs	r3, #192	; 0xc0
 800588c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800588e:	2312      	movs	r3, #18
 8005890:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005896:	2303      	movs	r3, #3
 8005898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800589a:	2304      	movs	r3, #4
 800589c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	4619      	mov	r1, r3
 80058a4:	4814      	ldr	r0, [pc, #80]	; (80058f8 <HAL_I2C_MspInit+0xac>)
 80058a6:	f005 f829 	bl	800a8fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	4b11      	ldr	r3, [pc, #68]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b2:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 80058b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <HAL_I2C_MspInit+0xa8>)
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80058c6:	2200      	movs	r2, #0
 80058c8:	2100      	movs	r1, #0
 80058ca:	201f      	movs	r0, #31
 80058cc:	f001 f9f1 	bl	8006cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80058d0:	201f      	movs	r0, #31
 80058d2:	f001 fa0a 	bl	8006cea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80058d6:	2200      	movs	r2, #0
 80058d8:	2100      	movs	r1, #0
 80058da:	2020      	movs	r0, #32
 80058dc:	f001 f9e9 	bl	8006cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80058e0:	2020      	movs	r0, #32
 80058e2:	f001 fa02 	bl	8006cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80058e6:	bf00      	nop
 80058e8:	3728      	adds	r7, #40	; 0x28
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	40005400 	.word	0x40005400
 80058f4:	40023800 	.word	0x40023800
 80058f8:	40020400 	.word	0x40020400

080058fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <HAL_I2C_MspDeInit+0x44>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d113      	bne.n	8005936 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800590e:	4b0d      	ldr	r3, [pc, #52]	; (8005944 <HAL_I2C_MspDeInit+0x48>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	4a0c      	ldr	r2, [pc, #48]	; (8005944 <HAL_I2C_MspDeInit+0x48>)
 8005914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005918:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800591a:	2140      	movs	r1, #64	; 0x40
 800591c:	480a      	ldr	r0, [pc, #40]	; (8005948 <HAL_I2C_MspDeInit+0x4c>)
 800591e:	f005 f989 	bl	800ac34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8005922:	2180      	movs	r1, #128	; 0x80
 8005924:	4808      	ldr	r0, [pc, #32]	; (8005948 <HAL_I2C_MspDeInit+0x4c>)
 8005926:	f005 f985 	bl	800ac34 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800592a:	201f      	movs	r0, #31
 800592c:	f001 f9eb 	bl	8006d06 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8005930:	2020      	movs	r0, #32
 8005932:	f001 f9e8 	bl	8006d06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40005400 	.word	0x40005400
 8005944:	40023800 	.word	0x40023800
 8005948:	40020400 	.word	0x40020400

0800594c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08e      	sub	sp, #56	; 0x38
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	605a      	str	r2, [r3, #4]
 800595e:	609a      	str	r2, [r3, #8]
 8005960:	60da      	str	r2, [r3, #12]
 8005962:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a89      	ldr	r2, [pc, #548]	; (8005b90 <HAL_SPI_MspInit+0x244>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d12c      	bne.n	80059c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	4b88      	ldr	r3, [pc, #544]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005976:	4a87      	ldr	r2, [pc, #540]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800597c:	6453      	str	r3, [r2, #68]	; 0x44
 800597e:	4b85      	ldr	r3, [pc, #532]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005986:	60bb      	str	r3, [r7, #8]
 8005988:	68bb      	ldr	r3, [r7, #8]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	4b81      	ldr	r3, [pc, #516]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	4a80      	ldr	r2, [pc, #512]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	6313      	str	r3, [r2, #48]	; 0x30
 800599a:	4b7e      	ldr	r3, [pc, #504]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 800599c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80059a6:	2338      	movs	r3, #56	; 0x38
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059aa:	2302      	movs	r3, #2
 80059ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059b2:	2303      	movs	r3, #3
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80059b6:	2305      	movs	r3, #5
 80059b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059be:	4619      	mov	r1, r3
 80059c0:	4875      	ldr	r0, [pc, #468]	; (8005b98 <HAL_SPI_MspInit+0x24c>)
 80059c2:	f004 ff9b 	bl	800a8fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80059c6:	e0de      	b.n	8005b86 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI2)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a73      	ldr	r2, [pc, #460]	; (8005b9c <HAL_SPI_MspInit+0x250>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	f040 8088 	bne.w	8005ae4 <HAL_SPI_MspInit+0x198>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80059d4:	2300      	movs	r3, #0
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	4b6e      	ldr	r3, [pc, #440]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	4a6d      	ldr	r2, [pc, #436]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 80059de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e2:	6413      	str	r3, [r2, #64]	; 0x40
 80059e4:	4b6b      	ldr	r3, [pc, #428]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ec:	613b      	str	r3, [r7, #16]
 80059ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f0:	2300      	movs	r3, #0
 80059f2:	617b      	str	r3, [r7, #20]
 80059f4:	4b67      	ldr	r3, [pc, #412]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 80059f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f8:	4a66      	ldr	r2, [pc, #408]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 80059fa:	f043 0302 	orr.w	r3, r3, #2
 80059fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005a00:	4b64      	ldr	r3, [pc, #400]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005a0c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a12:	2302      	movs	r3, #2
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005a1e:	2305      	movs	r3, #5
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a26:	4619      	mov	r1, r3
 8005a28:	485b      	ldr	r0, [pc, #364]	; (8005b98 <HAL_SPI_MspInit+0x24c>)
 8005a2a:	f004 ff67 	bl	800a8fc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005a2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a30:	4a5c      	ldr	r2, [pc, #368]	; (8005ba4 <HAL_SPI_MspInit+0x258>)
 8005a32:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005a34:	4b5a      	ldr	r3, [pc, #360]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a3a:	4b59      	ldr	r3, [pc, #356]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a3c:	2240      	movs	r2, #64	; 0x40
 8005a3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a40:	4b57      	ldr	r3, [pc, #348]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a46:	4b56      	ldr	r3, [pc, #344]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a4c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a4e:	4b54      	ldr	r3, [pc, #336]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a54:	4b52      	ldr	r3, [pc, #328]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8005a5a:	4b51      	ldr	r3, [pc, #324]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a60:	4b4f      	ldr	r3, [pc, #316]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a66:	4b4e      	ldr	r3, [pc, #312]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8005a6c:	484c      	ldr	r0, [pc, #304]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a6e:	f001 feff 	bl	8007870 <HAL_DMA_Init>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_SPI_MspInit+0x130>
      Error_Handler();
 8005a78:	f7fe fae8 	bl	800404c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a48      	ldr	r2, [pc, #288]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a80:	649a      	str	r2, [r3, #72]	; 0x48
 8005a82:	4a47      	ldr	r2, [pc, #284]	; (8005ba0 <HAL_SPI_MspInit+0x254>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005a88:	4b47      	ldr	r3, [pc, #284]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005a8a:	4a48      	ldr	r2, [pc, #288]	; (8005bac <HAL_SPI_MspInit+0x260>)
 8005a8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8005a8e:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a94:	4b44      	ldr	r3, [pc, #272]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a9a:	4b43      	ldr	r3, [pc, #268]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005aa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005aa8:	4b3f      	ldr	r3, [pc, #252]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005aae:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8005ab4:	4b3c      	ldr	r3, [pc, #240]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005aba:	4b3b      	ldr	r3, [pc, #236]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005ac6:	4838      	ldr	r0, [pc, #224]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ac8:	f001 fed2 	bl	8007870 <HAL_DMA_Init>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_SPI_MspInit+0x18a>
      Error_Handler();
 8005ad2:	f7fe fabb 	bl	800404c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ada:	64da      	str	r2, [r3, #76]	; 0x4c
 8005adc:	4a32      	ldr	r2, [pc, #200]	; (8005ba8 <HAL_SPI_MspInit+0x25c>)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ae2:	e050      	b.n	8005b86 <HAL_SPI_MspInit+0x23a>
  else if(hspi->Instance==SPI3)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a31      	ldr	r2, [pc, #196]	; (8005bb0 <HAL_SPI_MspInit+0x264>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d14b      	bne.n	8005b86 <HAL_SPI_MspInit+0x23a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af6:	4a27      	ldr	r2, [pc, #156]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afc:	6413      	str	r3, [r2, #64]	; 0x40
 8005afe:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b14:	f043 0301 	orr.w	r3, r3, #1
 8005b18:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1a:	4b1e      	ldr	r3, [pc, #120]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b26:	2300      	movs	r3, #0
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	4b1a      	ldr	r3, [pc, #104]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b30:	f043 0304 	orr.w	r3, r3, #4
 8005b34:	6313      	str	r3, [r2, #48]	; 0x30
 8005b36:	4b17      	ldr	r3, [pc, #92]	; (8005b94 <HAL_SPI_MspInit+0x248>)
 8005b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	623b      	str	r3, [r7, #32]
 8005b40:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b48:	2302      	movs	r3, #2
 8005b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b50:	2303      	movs	r3, #3
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b54:	2306      	movs	r3, #6
 8005b56:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4815      	ldr	r0, [pc, #84]	; (8005bb4 <HAL_SPI_MspInit+0x268>)
 8005b60:	f004 fecc 	bl	800a8fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005b64:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b72:	2303      	movs	r3, #3
 8005b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b76:	2306      	movs	r3, #6
 8005b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b7e:	4619      	mov	r1, r3
 8005b80:	480d      	ldr	r0, [pc, #52]	; (8005bb8 <HAL_SPI_MspInit+0x26c>)
 8005b82:	f004 febb 	bl	800a8fc <HAL_GPIO_Init>
}
 8005b86:	bf00      	nop
 8005b88:	3738      	adds	r7, #56	; 0x38
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40013000 	.word	0x40013000
 8005b94:	40023800 	.word	0x40023800
 8005b98:	40020400 	.word	0x40020400
 8005b9c:	40003800 	.word	0x40003800
 8005ba0:	20000868 	.word	0x20000868
 8005ba4:	40026070 	.word	0x40026070
 8005ba8:	200008c8 	.word	0x200008c8
 8005bac:	40026058 	.word	0x40026058
 8005bb0:	40003c00 	.word	0x40003c00
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	40020800 	.word	0x40020800

08005bbc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a20      	ldr	r2, [pc, #128]	; (8005c4c <HAL_SPI_MspDeInit+0x90>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10a      	bne.n	8005be4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8005bce:	4b20      	ldr	r3, [pc, #128]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd2:	4a1f      	ldr	r2, [pc, #124]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bd8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5);
 8005bda:	2138      	movs	r1, #56	; 0x38
 8005bdc:	481d      	ldr	r0, [pc, #116]	; (8005c54 <HAL_SPI_MspDeInit+0x98>)
 8005bde:	f005 f829 	bl	800ac34 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 8005be2:	e02f      	b.n	8005c44 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI2)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <HAL_SPI_MspDeInit+0x9c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d115      	bne.n	8005c1a <HAL_SPI_MspDeInit+0x5e>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005bee:	4b18      	ldr	r3, [pc, #96]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	4a17      	ldr	r2, [pc, #92]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005bf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8005bfa:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8005bfe:	4815      	ldr	r0, [pc, #84]	; (8005c54 <HAL_SPI_MspDeInit+0x98>)
 8005c00:	f005 f818 	bl	800ac34 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 fedf 	bl	80079cc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hspi->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 feda 	bl	80079cc <HAL_DMA_DeInit>
}
 8005c18:	e014      	b.n	8005c44 <HAL_SPI_MspDeInit+0x88>
  else if(hspi->Instance==SPI3)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a0f      	ldr	r2, [pc, #60]	; (8005c5c <HAL_SPI_MspDeInit+0xa0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10f      	bne.n	8005c44 <HAL_SPI_MspDeInit+0x88>
    __HAL_RCC_SPI3_CLK_DISABLE();
 8005c24:	4b0a      	ldr	r3, [pc, #40]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <HAL_SPI_MspDeInit+0x94>)
 8005c2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c2e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8005c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c34:	480a      	ldr	r0, [pc, #40]	; (8005c60 <HAL_SPI_MspDeInit+0xa4>)
 8005c36:	f004 fffd 	bl	800ac34 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8005c3a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8005c3e:	4809      	ldr	r0, [pc, #36]	; (8005c64 <HAL_SPI_MspDeInit+0xa8>)
 8005c40:	f004 fff8 	bl	800ac34 <HAL_GPIO_DeInit>
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40013000 	.word	0x40013000
 8005c50:	40023800 	.word	0x40023800
 8005c54:	40020400 	.word	0x40020400
 8005c58:	40003800 	.word	0x40003800
 8005c5c:	40003c00 	.word	0x40003c00
 8005c60:	40020000 	.word	0x40020000
 8005c64:	40020800 	.word	0x40020800

08005c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08a      	sub	sp, #40	; 0x28
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
 8005c78:	605a      	str	r2, [r3, #4]
 8005c7a:	609a      	str	r2, [r3, #8]
 8005c7c:	60da      	str	r2, [r3, #12]
 8005c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <HAL_UART_MspInit+0x94>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d134      	bne.n	8005cf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c92:	4a1b      	ldr	r2, [pc, #108]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005c94:	f043 0310 	orr.w	r3, r3, #16
 8005c98:	6453      	str	r3, [r2, #68]	; 0x44
 8005c9a:	4b19      	ldr	r3, [pc, #100]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	60fb      	str	r3, [r7, #12]
 8005ca4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	613b      	str	r3, [r7, #16]
 8005caa:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cae:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005cb0:	f043 0301 	orr.w	r3, r3, #1
 8005cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <HAL_UART_MspInit+0x98>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005cc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cc8:	2302      	movs	r3, #2
 8005cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005cd4:	2307      	movs	r3, #7
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cd8:	f107 0314 	add.w	r3, r7, #20
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4809      	ldr	r0, [pc, #36]	; (8005d04 <HAL_UART_MspInit+0x9c>)
 8005ce0:	f004 fe0c 	bl	800a8fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	2025      	movs	r0, #37	; 0x25
 8005cea:	f000 ffe2 	bl	8006cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005cee:	2025      	movs	r0, #37	; 0x25
 8005cf0:	f000 fffb 	bl	8006cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005cf4:	bf00      	nop
 8005cf6:	3728      	adds	r7, #40	; 0x28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	40011000 	.word	0x40011000
 8005d00:	40023800 	.word	0x40023800
 8005d04:	40020000 	.word	0x40020000

08005d08 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <HAL_UART_MspDeInit+0x38>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10d      	bne.n	8005d36 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8005d1a:	4b0a      	ldr	r3, [pc, #40]	; (8005d44 <HAL_UART_MspDeInit+0x3c>)
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1e:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <HAL_UART_MspDeInit+0x3c>)
 8005d20:	f023 0310 	bic.w	r3, r3, #16
 8005d24:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005d26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d2a:	4807      	ldr	r0, [pc, #28]	; (8005d48 <HAL_UART_MspDeInit+0x40>)
 8005d2c:	f004 ff82 	bl	800ac34 <HAL_GPIO_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8005d30:	2025      	movs	r0, #37	; 0x25
 8005d32:	f000 ffe8 	bl	8006d06 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40011000 	.word	0x40011000
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40020000 	.word	0x40020000

08005d4c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8005d60:	4b1c      	ldr	r3, [pc, #112]	; (8005dd4 <HAL_FSMC_MspInit+0x88>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d131      	bne.n	8005dcc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8005d68:	4b1a      	ldr	r3, [pc, #104]	; (8005dd4 <HAL_FSMC_MspInit+0x88>)
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8005d6e:	2300      	movs	r3, #0
 8005d70:	603b      	str	r3, [r7, #0]
 8005d72:	4b19      	ldr	r3, [pc, #100]	; (8005dd8 <HAL_FSMC_MspInit+0x8c>)
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <HAL_FSMC_MspInit+0x8c>)
 8005d78:	f043 0301 	orr.w	r3, r3, #1
 8005d7c:	6393      	str	r3, [r2, #56]	; 0x38
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <HAL_FSMC_MspInit+0x8c>)
 8005d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005d8a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8005d8e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d90:	2302      	movs	r3, #2
 8005d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005da0:	1d3b      	adds	r3, r7, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	480d      	ldr	r0, [pc, #52]	; (8005ddc <HAL_FSMC_MspInit+0x90>)
 8005da6:	f004 fda9 	bl	800a8fc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005daa:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8005dae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005db0:	2302      	movs	r3, #2
 8005db2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db8:	2303      	movs	r3, #3
 8005dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8005dbc:	230c      	movs	r3, #12
 8005dbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005dc0:	1d3b      	adds	r3, r7, #4
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4806      	ldr	r0, [pc, #24]	; (8005de0 <HAL_FSMC_MspInit+0x94>)
 8005dc6:	f004 fd99 	bl	800a8fc <HAL_GPIO_Init>
 8005dca:	e000      	b.n	8005dce <HAL_FSMC_MspInit+0x82>
    return;
 8005dcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8005dce:	3718      	adds	r7, #24
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000dc8 	.word	0x20000dc8
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40020c00 	.word	0x40020c00

08005de4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8005dec:	f7ff ffae 	bl	8005d4c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_FSMC_MspDeInit>:

static uint32_t FSMC_DeInitialized = 0;

static void HAL_FSMC_MspDeInit(void){
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspDeInit 0 */

  /* USER CODE END FSMC_MspDeInit 0 */
  if (FSMC_DeInitialized) {
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <HAL_FSMC_MspDeInit+0x38>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d113      	bne.n	8005e2c <HAL_FSMC_MspDeInit+0x34>
    return;
  }
  FSMC_DeInitialized = 1;
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_FSMC_MspDeInit+0x38>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_DISABLE();
 8005e0a:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <HAL_FSMC_MspDeInit+0x3c>)
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <HAL_FSMC_MspDeInit+0x3c>)
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	6393      	str	r3, [r2, #56]	; 0x38
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005e16:	f64f 7180 	movw	r1, #65408	; 0xff80
 8005e1a:	4807      	ldr	r0, [pc, #28]	; (8005e38 <HAL_FSMC_MspDeInit+0x40>)
 8005e1c:	f004 ff0a 	bl	800ac34 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8005e20:	f24e 71b3 	movw	r1, #59315	; 0xe7b3
 8005e24:	4805      	ldr	r0, [pc, #20]	; (8005e3c <HAL_FSMC_MspDeInit+0x44>)
 8005e26:	f004 ff05 	bl	800ac34 <HAL_GPIO_DeInit>
 8005e2a:	e000      	b.n	8005e2e <HAL_FSMC_MspDeInit+0x36>
    return;
 8005e2c:	bf00      	nop
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7);

  /* USER CODE BEGIN FSMC_MspDeInit 1 */

  /* USER CODE END FSMC_MspDeInit 1 */
}
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000dcc 	.word	0x20000dcc
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40021000 	.word	0x40021000
 8005e3c:	40020c00 	.word	0x40020c00

08005e40 <HAL_SRAM_MspDeInit>:

void HAL_SRAM_MspDeInit(SRAM_HandleTypeDef* hsram){
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspDeInit 0 */

  /* USER CODE END SRAM_MspDeInit 0 */
  HAL_FSMC_MspDeInit();
 8005e48:	f7ff ffd6 	bl	8005df8 <HAL_FSMC_MspDeInit>
  /* USER CODE BEGIN SRAM_MspDeInit 1 */

  /* USER CODE END SRAM_MspDeInit 1 */
}
 8005e4c:	bf00      	nop
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e58:	e7fe      	b.n	8005e58 <NMI_Handler+0x4>

08005e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e5a:	b480      	push	{r7}
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e5e:	e7fe      	b.n	8005e5e <HardFault_Handler+0x4>

08005e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e64:	e7fe      	b.n	8005e64 <MemManage_Handler+0x4>

08005e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e66:	b480      	push	{r7}
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e6a:	e7fe      	b.n	8005e6a <BusFault_Handler+0x4>

08005e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e70:	e7fe      	b.n	8005e70 <UsageFault_Handler+0x4>

08005e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e92:	bf00      	nop
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ea0:	f000 fbb0 	bl	8006604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ea4:	bf00      	nop
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005eac:	4802      	ldr	r0, [pc, #8]	; (8005eb8 <DMA1_Stream3_IRQHandler+0x10>)
 8005eae:	f001 ffef 	bl	8007e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005eb2:	bf00      	nop
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200008c8 	.word	0x200008c8

08005ebc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005ec0:	4802      	ldr	r0, [pc, #8]	; (8005ecc <DMA1_Stream4_IRQHandler+0x10>)
 8005ec2:	f001 ffe5 	bl	8007e90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005ec6:	bf00      	nop
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000868 	.word	0x20000868

08005ed0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005ed4:	4802      	ldr	r0, [pc, #8]	; (8005ee0 <I2C1_EV_IRQHandler+0x10>)
 8005ed6:	f008 fed9 	bl	800ec8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005eda:	bf00      	nop
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000070c 	.word	0x2000070c

08005ee4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005ee8:	4802      	ldr	r0, [pc, #8]	; (8005ef4 <I2C1_ER_IRQHandler+0x10>)
 8005eea:	f009 f840 	bl	800ef6e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	2000070c 	.word	0x2000070c

08005ef8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005efc:	4802      	ldr	r0, [pc, #8]	; (8005f08 <USART1_IRQHandler+0x10>)
 8005efe:	f010 fd99 	bl	8016a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005f02:	bf00      	nop
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000928 	.word	0x20000928

08005f0c <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <_getpid>:

int _getpid(void)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0
	return 1;
 8005f1e:	2301      	movs	r3, #1
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <_kill>:

int _kill(int pid, int sig)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005f34:	f013 fb96 	bl	8019664 <__errno>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2216      	movs	r2, #22
 8005f3c:	601a      	str	r2, [r3, #0]
	return -1;
 8005f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <_exit>:

void _exit (int status)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005f52:	f04f 31ff 	mov.w	r1, #4294967295
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff ffe7 	bl	8005f2a <_kill>
	while (1) {}		/* Make sure we hang here */
 8005f5c:	e7fe      	b.n	8005f5c <_exit+0x12>

08005f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e00a      	b.n	8005f86 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005f70:	f3af 8000 	nop.w
 8005f74:	4601      	mov	r1, r0
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	60ba      	str	r2, [r7, #8]
 8005f7c:	b2ca      	uxtb	r2, r1
 8005f7e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	3301      	adds	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	dbf0      	blt.n	8005f70 <_read+0x12>
	}

return len;
 8005f8e:	687b      	ldr	r3, [r7, #4]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e009      	b.n	8005fbe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	60ba      	str	r2, [r7, #8]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	dbf1      	blt.n	8005faa <_write+0x12>
	}
	return len;
 8005fc6:	687b      	ldr	r3, [r7, #4]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <_close>:

int _close(int file)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
	return -1;
 8005fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ff8:	605a      	str	r2, [r3, #4]
	return 0;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <_isatty>:

int _isatty(int file)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	return 1;
 8006010:	2301      	movs	r3, #1
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800601e:	b480      	push	{r7}
 8006020:	b085      	sub	sp, #20
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
	return 0;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <_open>:

int _open(char *path, int flags, ...)
{
 8006038:	b40e      	push	{r1, r2, r3}
 800603a:	b480      	push	{r7}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006046:	4618      	mov	r0, r3
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	b003      	add	sp, #12
 8006052:	4770      	bx	lr

08006054 <_wait>:

int _wait(int *status)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	errno = ECHILD;
 800605c:	f013 fb02 	bl	8019664 <__errno>
 8006060:	4603      	mov	r3, r0
 8006062:	220a      	movs	r2, #10
 8006064:	601a      	str	r2, [r3, #0]
	return -1;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800606a:	4618      	mov	r0, r3
 800606c:	3708      	adds	r7, #8
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <_unlink>:

int _unlink(char *name)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b082      	sub	sp, #8
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
	errno = ENOENT;
 800607a:	f013 faf3 	bl	8019664 <__errno>
 800607e:	4603      	mov	r3, r0
 8006080:	2202      	movs	r2, #2
 8006082:	601a      	str	r2, [r3, #0]
	return -1;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <_times>:

int _times(struct tms *buf)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	return -1;
 8006098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <_stat>:

int _stat(char *file, struct stat *st)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060b8:	605a      	str	r2, [r3, #4]
	return 0;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <_link>:

int _link(char *old, char *new)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
	errno = EMLINK;
 80060d2:	f013 fac7 	bl	8019664 <__errno>
 80060d6:	4603      	mov	r3, r0
 80060d8:	221f      	movs	r2, #31
 80060da:	601a      	str	r2, [r3, #0]
	return -1;
 80060dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <_fork>:

int _fork(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
	errno = EAGAIN;
 80060ec:	f013 faba 	bl	8019664 <__errno>
 80060f0:	4603      	mov	r3, r0
 80060f2:	220b      	movs	r2, #11
 80060f4:	601a      	str	r2, [r3, #0]
	return -1;
 80060f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	bd80      	pop	{r7, pc}

080060fe <_execve>:

int _execve(char *name, char **argv, char **env)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
	errno = ENOMEM;
 800610a:	f013 faab 	bl	8019664 <__errno>
 800610e:	4603      	mov	r3, r0
 8006110:	220c      	movs	r2, #12
 8006112:	601a      	str	r2, [r3, #0]
	return -1;
 8006114:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b086      	sub	sp, #24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006128:	4a14      	ldr	r2, [pc, #80]	; (800617c <_sbrk+0x5c>)
 800612a:	4b15      	ldr	r3, [pc, #84]	; (8006180 <_sbrk+0x60>)
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006134:	4b13      	ldr	r3, [pc, #76]	; (8006184 <_sbrk+0x64>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <_sbrk+0x64>)
 800613e:	4a12      	ldr	r2, [pc, #72]	; (8006188 <_sbrk+0x68>)
 8006140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006142:	4b10      	ldr	r3, [pc, #64]	; (8006184 <_sbrk+0x64>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	429a      	cmp	r2, r3
 800614e:	d207      	bcs.n	8006160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006150:	f013 fa88 	bl	8019664 <__errno>
 8006154:	4603      	mov	r3, r0
 8006156:	220c      	movs	r2, #12
 8006158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800615a:	f04f 33ff 	mov.w	r3, #4294967295
 800615e:	e009      	b.n	8006174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006160:	4b08      	ldr	r3, [pc, #32]	; (8006184 <_sbrk+0x64>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006166:	4b07      	ldr	r3, [pc, #28]	; (8006184 <_sbrk+0x64>)
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	4a05      	ldr	r2, [pc, #20]	; (8006184 <_sbrk+0x64>)
 8006170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006172:	68fb      	ldr	r3, [r7, #12]
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20020000 	.word	0x20020000
 8006180:	00000400 	.word	0x00000400
 8006184:	20000dd4 	.word	0x20000dd4
 8006188:	20000e10 	.word	0x20000e10

0800618c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006190:	4b06      	ldr	r3, [pc, #24]	; (80061ac <SystemInit+0x20>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	4a05      	ldr	r2, [pc, #20]	; (80061ac <SystemInit+0x20>)
 8006198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800619c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000ed00 	.word	0xe000ed00

080061b0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]
 80061be:	2302      	movs	r3, #2
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	2300      	movs	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	2302      	movs	r3, #2
 80061c8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80061ca:	4b34      	ldr	r3, [pc, #208]	; (800629c <SystemCoreClockUpdate+0xec>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 030c 	and.w	r3, r3, #12
 80061d2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d011      	beq.n	80061fe <SystemCoreClockUpdate+0x4e>
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d844      	bhi.n	800626a <SystemCoreClockUpdate+0xba>
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <SystemCoreClockUpdate+0x3e>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	2b04      	cmp	r3, #4
 80061ea:	d004      	beq.n	80061f6 <SystemCoreClockUpdate+0x46>
 80061ec:	e03d      	b.n	800626a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 80061f0:	4a2c      	ldr	r2, [pc, #176]	; (80062a4 <SystemCoreClockUpdate+0xf4>)
 80061f2:	601a      	str	r2, [r3, #0]
      break;
 80061f4:	e03d      	b.n	8006272 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80061f6:	4b2a      	ldr	r3, [pc, #168]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 80061f8:	4a2b      	ldr	r2, [pc, #172]	; (80062a8 <SystemCoreClockUpdate+0xf8>)
 80061fa:	601a      	str	r2, [r3, #0]
      break;
 80061fc:	e039      	b.n	8006272 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80061fe:	4b27      	ldr	r3, [pc, #156]	; (800629c <SystemCoreClockUpdate+0xec>)
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	0d9b      	lsrs	r3, r3, #22
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800620a:	4b24      	ldr	r3, [pc, #144]	; (800629c <SystemCoreClockUpdate+0xec>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006212:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <SystemCoreClockUpdate+0xf8>)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006222:	4a1e      	ldr	r2, [pc, #120]	; (800629c <SystemCoreClockUpdate+0xec>)
 8006224:	6852      	ldr	r2, [r2, #4]
 8006226:	0992      	lsrs	r2, r2, #6
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	fb02 f303 	mul.w	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e00b      	b.n	800624c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8006234:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <SystemCoreClockUpdate+0xf4>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	fbb2 f3f3 	udiv	r3, r2, r3
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <SystemCoreClockUpdate+0xec>)
 800623e:	6852      	ldr	r2, [r2, #4]
 8006240:	0992      	lsrs	r2, r2, #6
 8006242:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006246:	fb02 f303 	mul.w	r3, r2, r3
 800624a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <SystemCoreClockUpdate+0xec>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	0c1b      	lsrs	r3, r3, #16
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	3301      	adds	r3, #1
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	fbb2 f3f3 	udiv	r3, r2, r3
 8006264:	4a0e      	ldr	r2, [pc, #56]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 8006266:	6013      	str	r3, [r2, #0]
      break;
 8006268:	e003      	b.n	8006272 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800626a:	4b0d      	ldr	r3, [pc, #52]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 800626c:	4a0d      	ldr	r2, [pc, #52]	; (80062a4 <SystemCoreClockUpdate+0xf4>)
 800626e:	601a      	str	r2, [r3, #0]
      break;
 8006270:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006272:	4b0a      	ldr	r3, [pc, #40]	; (800629c <SystemCoreClockUpdate+0xec>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	091b      	lsrs	r3, r3, #4
 8006278:	f003 030f 	and.w	r3, r3, #15
 800627c:	4a0b      	ldr	r2, [pc, #44]	; (80062ac <SystemCoreClockUpdate+0xfc>)
 800627e:	5cd3      	ldrb	r3, [r2, r3]
 8006280:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8006282:	4b07      	ldr	r3, [pc, #28]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
 800628c:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <SystemCoreClockUpdate+0xf0>)
 800628e:	6013      	str	r3, [r2, #0]
}
 8006290:	bf00      	nop
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	40023800 	.word	0x40023800
 80062a0:	20000058 	.word	0x20000058
 80062a4:	00f42400 	.word	0x00f42400
 80062a8:	007a1200 	.word	0x007a1200
 80062ac:	08051d08 	.word	0x08051d08

080062b0 <remap>:
#include "xpt2046.h"

extern SPI_HandleTypeDef XPT2046_SPI;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80062ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80062be:	ed87 1a03 	vstr	s2, [r7, #12]
 80062c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80062c6:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80062ca:	ed97 7a05 	vldr	s14, [r7, #20]
 80062ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80062d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062d6:	edd7 6a01 	vldr	s13, [r7, #4]
 80062da:	edd7 7a02 	vldr	s15, [r7, #8]
 80062de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80062e2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80062e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80062ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80062ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80062fa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80062fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <XPT2046_Init>:

void XPT2046_Init(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&XPT2046_SPI, (uint8_t*)XPT2046_ADDR_I, 1, 1000);
 8006310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006314:	2201      	movs	r2, #1
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	4809      	ldr	r0, [pc, #36]	; (8006340 <XPT2046_Init+0x34>)
 800631a:	f00c fb3c 	bl	8012996 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800631e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006322:	2201      	movs	r2, #1
 8006324:	2100      	movs	r1, #0
 8006326:	4806      	ldr	r0, [pc, #24]	; (8006340 <XPT2046_Init+0x34>)
 8006328:	f00c fb35 	bl	8012996 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&XPT2046_SPI, 0x00, 1, 1000);
 800632c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006330:	2201      	movs	r2, #1
 8006332:	2100      	movs	r1, #0
 8006334:	4802      	ldr	r0, [pc, #8]	; (8006340 <XPT2046_Init+0x34>)
 8006336:	f00c fb2e 	bl	8012996 <HAL_SPI_Transmit>
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	200007b8 	.word	0x200007b8

08006344 <getRaw>:

uint16_t getRaw(uint8_t address)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af02      	add	r7, sp, #8
 800634a:	4603      	mov	r3, r0
 800634c:	71fb      	strb	r3, [r7, #7]
	uint8_t data;
	uint16_t LSB, MSB;
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_RESET);
	HAL_Delay(1);
 800634e:	2001      	movs	r0, #1
 8006350:	f000 f9b8 	bl	80066c4 <HAL_Delay>
	HAL_SPI_Transmit(&XPT2046_SPI, &address, 1, 1000);
 8006354:	1df9      	adds	r1, r7, #7
 8006356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800635a:	2201      	movs	r2, #1
 800635c:	4814      	ldr	r0, [pc, #80]	; (80063b0 <getRaw+0x6c>)
 800635e:	f00c fb1a 	bl	8012996 <HAL_SPI_Transmit>
	address = 0x00;
 8006362:	2300      	movs	r3, #0
 8006364:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006366:	f107 020b 	add.w	r2, r7, #11
 800636a:	1df9      	adds	r1, r7, #7
 800636c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2301      	movs	r3, #1
 8006374:	480e      	ldr	r0, [pc, #56]	; (80063b0 <getRaw+0x6c>)
 8006376:	f00c fd5b 	bl	8012e30 <HAL_SPI_TransmitReceive>
	MSB = data;   
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	81fb      	strh	r3, [r7, #14]
	address = 0x00;
 800637e:	2300      	movs	r3, #0
 8006380:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&XPT2046_SPI, &address, &data, sizeof(data), 1000);   
 8006382:	f107 020b 	add.w	r2, r7, #11
 8006386:	1df9      	adds	r1, r7, #7
 8006388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	2301      	movs	r3, #1
 8006390:	4807      	ldr	r0, [pc, #28]	; (80063b0 <getRaw+0x6c>)
 8006392:	f00c fd4d 	bl	8012e30 <HAL_SPI_TransmitReceive>
	LSB = data;
 8006396:	7afb      	ldrb	r3, [r7, #11]
 8006398:	81bb      	strh	r3, [r7, #12]
	if (XPT2046_NSS_SOFT)	HAL_GPIO_WritePin(XPT2046_NSS_PORT, XPT2046_NSS_PIN, GPIO_PIN_SET);
	return ((MSB << 8) | (LSB)) >> 3;
 800639a:	89fb      	ldrh	r3, [r7, #14]
 800639c:	021a      	lsls	r2, r3, #8
 800639e:	89bb      	ldrh	r3, [r7, #12]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	10db      	asrs	r3, r3, #3
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	bf00      	nop
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	200007b8 	.word	0x200007b8

080063b4 <X>:

inline static uint16_t X(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80063ba:	20d0      	movs	r0, #208	; 0xd0
 80063bc:	f7ff ffc2 	bl	8006344 <getRaw>
 80063c0:	4603      	mov	r3, r0
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	ed9f 2a13 	vldr	s4, [pc, #76]	; 8006418 <X+0x64>
 80063ce:	eddf 1a13 	vldr	s3, [pc, #76]	; 800641c <X+0x68>
 80063d2:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8006420 <X+0x6c>
 80063d6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8006424 <X+0x70>
 80063da:	eeb0 0a67 	vmov.f32	s0, s15
 80063de:	f7ff ff67 	bl	80062b0 <remap>
 80063e2:	eef0 7a40 	vmov.f32	s15, s0
 80063e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ea:	ee17 3a90 	vmov	r3, s15
 80063ee:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	f5c3 7347 	rsb	r3, r3, #796	; 0x31c
 80063f6:	3303      	adds	r3, #3
 80063f8:	80fb      	strh	r3, [r7, #6]
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80063fa:	88fb      	ldrh	r3, [r7, #6]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <X+0x5a>
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	f240 321e 	movw	r2, #798	; 0x31e
 8006406:	4293      	cmp	r3, r2
 8006408:	d801      	bhi.n	800640e <X+0x5a>
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	e000      	b.n	8006410 <X+0x5c>
	else return 0;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	4447c000 	.word	0x4447c000
 800641c:	00000000 	.word	0x00000000
 8006420:	457a0000 	.word	0x457a0000
 8006424:	43480000 	.word	0x43480000

08006428 <Y>:

inline static uint16_t Y(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800642e:	2090      	movs	r0, #144	; 0x90
 8006430:	f7ff ff88 	bl	8006344 <getRaw>
 8006434:	4603      	mov	r3, r0
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8006480 <Y+0x58>
 8006442:	eddf 1a10 	vldr	s3, [pc, #64]	; 8006484 <Y+0x5c>
 8006446:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8006488 <Y+0x60>
 800644a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800648c <Y+0x64>
 800644e:	eeb0 0a67 	vmov.f32	s0, s15
 8006452:	f7ff ff2d 	bl	80062b0 <remap>
 8006456:	eef0 7a40 	vmov.f32	s15, s0
 800645a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800645e:	ee17 3a90 	vmov	r3, s15
 8006462:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <Y+0x4e>
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	f5b3 7fef 	cmp.w	r3, #478	; 0x1de
 8006470:	d801      	bhi.n	8006476 <Y+0x4e>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	e000      	b.n	8006478 <Y+0x50>
	else return 0;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}
 8006480:	43ef8000 	.word	0x43ef8000
 8006484:	00000000 	.word	0x00000000
 8006488:	456d8000 	.word	0x456d8000
 800648c:	43480000 	.word	0x43480000

08006490 <getX>:

uint16_t getX(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8006496:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <getX+0x30>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 800649c:	e007      	b.n	80064ae <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 800649e:	f7ff ff89 	bl	80063b4 <X>
 80064a2:	4603      	mov	r3, r0
 80064a4:	80bb      	strh	r3, [r7, #4]
 80064a6:	f7ff ff85 	bl	80063b4 <X>
 80064aa:	4603      	mov	r3, r0
 80064ac:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 80064ae:	88ba      	ldrh	r2, [r7, #4]
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d1f3      	bne.n	800649e <getX+0xe>
		}
		return x[0];
 80064b6:	88bb      	ldrh	r3, [r7, #4]
	} 
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	08051d20 	.word	0x08051d20

080064c4 <getY>:

uint16_t getY(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <getY+0x30>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80064d0:	e007      	b.n	80064e2 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80064d2:	f7ff ffa9 	bl	8006428 <Y>
 80064d6:	4603      	mov	r3, r0
 80064d8:	80bb      	strh	r3, [r7, #4]
 80064da:	f7ff ffa5 	bl	8006428 <Y>
 80064de:	4603      	mov	r3, r0
 80064e0:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80064e2:	88ba      	ldrh	r2, [r7, #4]
 80064e4:	88fb      	ldrh	r3, [r7, #6]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d1f3      	bne.n	80064d2 <getY+0xe>
		}
		return y[0];
 80064ea:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	08051d20 	.word	0x08051d20

080064f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064fc:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_Init+0x40>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0d      	ldr	r2, [pc, #52]	; (8006538 <HAL_Init+0x40>)
 8006502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006508:	4b0b      	ldr	r3, [pc, #44]	; (8006538 <HAL_Init+0x40>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a0a      	ldr	r2, [pc, #40]	; (8006538 <HAL_Init+0x40>)
 800650e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006514:	4b08      	ldr	r3, [pc, #32]	; (8006538 <HAL_Init+0x40>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a07      	ldr	r2, [pc, #28]	; (8006538 <HAL_Init+0x40>)
 800651a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800651e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006520:	2003      	movs	r0, #3
 8006522:	f000 fbbb 	bl	8006c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006526:	2000      	movs	r0, #0
 8006528:	f000 f83b 	bl	80065a2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800652c:	f7ff f904 	bl	8005738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	40023c00 	.word	0x40023c00

0800653c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8006540:	4b13      	ldr	r3, [pc, #76]	; (8006590 <HAL_DeInit+0x54>)
 8006542:	f04f 32ff 	mov.w	r2, #4294967295
 8006546:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <HAL_DeInit+0x54>)
 800654a:	2200      	movs	r2, #0
 800654c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <HAL_DeInit+0x54>)
 8006550:	f04f 32ff 	mov.w	r2, #4294967295
 8006554:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <HAL_DeInit+0x54>)
 8006558:	2200      	movs	r2, #0
 800655a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <HAL_DeInit+0x54>)
 800655e:	f04f 32ff 	mov.w	r2, #4294967295
 8006562:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006564:	4b0a      	ldr	r3, [pc, #40]	; (8006590 <HAL_DeInit+0x54>)
 8006566:	2200      	movs	r2, #0
 8006568:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800656a:	4b09      	ldr	r3, [pc, #36]	; (8006590 <HAL_DeInit+0x54>)
 800656c:	f04f 32ff 	mov.w	r2, #4294967295
 8006570:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <HAL_DeInit+0x54>)
 8006574:	2200      	movs	r2, #0
 8006576:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_DeInit+0x54>)
 800657a:	f04f 32ff 	mov.w	r2, #4294967295
 800657e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006580:	4b03      	ldr	r3, [pc, #12]	; (8006590 <HAL_DeInit+0x54>)
 8006582:	2200      	movs	r2, #0
 8006584:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8006586:	f000 f805 	bl	8006594 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800

08006594 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8006598:	bf00      	nop
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065a2:	b580      	push	{r7, lr}
 80065a4:	b082      	sub	sp, #8
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <HAL_InitTick+0x56>)
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <HAL_InitTick+0x5a>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	4619      	mov	r1, r3
 80065b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80065bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fbb2 	bl	8006d2a <HAL_SYSTICK_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e00e      	b.n	80065ee <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d80a      	bhi.n	80065ec <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065d6:	2200      	movs	r2, #0
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	f04f 30ff 	mov.w	r0, #4294967295
 80065de:	f000 fb68 	bl	8006cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <HAL_InitTick+0x5e>)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e000      	b.n	80065ee <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000058 	.word	0x20000058
 80065fc:	20000060 	.word	0x20000060
 8006600:	2000005c 	.word	0x2000005c

08006604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006608:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_IncTick+0x20>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_IncTick+0x24>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4413      	add	r3, r2
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <HAL_IncTick+0x24>)
 8006616:	6013      	str	r3, [r2, #0]
}
 8006618:	bf00      	nop
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	20000060 	.word	0x20000060
 8006628:	20000dd8 	.word	0x20000dd8

0800662c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return uwTick;
 8006630:	4b03      	ldr	r3, [pc, #12]	; (8006640 <HAL_GetTick+0x14>)
 8006632:	681b      	ldr	r3, [r3, #0]
}
 8006634:	4618      	mov	r0, r3
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	20000dd8 	.word	0x20000dd8

08006644 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006648:	4b03      	ldr	r3, [pc, #12]	; (8006658 <HAL_GetTickPrio+0x14>)
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2000005c 	.word	0x2000005c

0800665c <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800666a:	4b0e      	ldr	r3, [pc, #56]	; (80066a4 <HAL_SetTickFreq+0x48>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	79fa      	ldrb	r2, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d012      	beq.n	800669a <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8006674:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <HAL_SetTickFreq+0x48>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800667a:	4a0a      	ldr	r2, [pc, #40]	; (80066a4 <HAL_SetTickFreq+0x48>)
 800667c:	79fb      	ldrb	r3, [r7, #7]
 800667e:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8006680:	4b09      	ldr	r3, [pc, #36]	; (80066a8 <HAL_SetTickFreq+0x4c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff ff8c 	bl	80065a2 <HAL_InitTick>
 800668a:	4603      	mov	r3, r0
 800668c:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d002      	beq.n	800669a <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8006694:	4a03      	ldr	r2, [pc, #12]	; (80066a4 <HAL_SetTickFreq+0x48>)
 8006696:	7bbb      	ldrb	r3, [r7, #14]
 8006698:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	20000060 	.word	0x20000060
 80066a8:	2000005c 	.word	0x2000005c

080066ac <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80066ac:	b480      	push	{r7}
 80066ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80066b0:	4b03      	ldr	r3, [pc, #12]	; (80066c0 <HAL_GetTickFreq+0x14>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20000060 	.word	0x20000060

080066c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80066cc:	f7ff ffae 	bl	800662c <HAL_GetTick>
 80066d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d005      	beq.n	80066ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_Delay+0x44>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4413      	add	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066ea:	bf00      	nop
 80066ec:	f7ff ff9e 	bl	800662c <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d8f7      	bhi.n	80066ec <HAL_Delay+0x28>
  {
  }
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20000060 	.word	0x20000060

0800670c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <HAL_SuspendTick+0x1c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a04      	ldr	r2, [pc, #16]	; (8006728 <HAL_SuspendTick+0x1c>)
 8006716:	f023 0302 	bic.w	r3, r3, #2
 800671a:	6013      	str	r3, [r2, #0]
}
 800671c:	bf00      	nop
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	e000e010 	.word	0xe000e010

0800672c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8006730:	4b05      	ldr	r3, [pc, #20]	; (8006748 <HAL_ResumeTick+0x1c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a04      	ldr	r2, [pc, #16]	; (8006748 <HAL_ResumeTick+0x1c>)
 8006736:	f043 0302 	orr.w	r3, r3, #2
 800673a:	6013      	str	r3, [r2, #0]
}
 800673c:	bf00      	nop
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	e000e010 	.word	0xe000e010

0800674c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800674c:	b480      	push	{r7}
 800674e:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8006750:	4b02      	ldr	r3, [pc, #8]	; (800675c <HAL_GetHalVersion+0x10>)
}
 8006752:	4618      	mov	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr
 800675c:	01070d00 	.word	0x01070d00

08006760 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006760:	b480      	push	{r7}
 8006762:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8006764:	4b03      	ldr	r3, [pc, #12]	; (8006774 <HAL_GetREVID+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	0c1b      	lsrs	r3, r3, #16
}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	e0042000 	.word	0xe0042000

08006778 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8006778:	b480      	push	{r7}
 800677a:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800677c:	4b04      	ldr	r3, [pc, #16]	; (8006790 <HAL_GetDEVID+0x18>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e0042000 	.word	0xe0042000

08006794 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8006794:	b480      	push	{r7}
 8006796:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4a04      	ldr	r2, [pc, #16]	; (80067b0 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800679e:	f043 0301 	orr.w	r3, r3, #1
 80067a2:	6053      	str	r3, [r2, #4]
}
 80067a4:	bf00      	nop
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	e0042000 	.word	0xe0042000

080067b4 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80067b4:	b480      	push	{r7}
 80067b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80067b8:	4b05      	ldr	r3, [pc, #20]	; (80067d0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	4a04      	ldr	r2, [pc, #16]	; (80067d0 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 80067be:	f023 0301 	bic.w	r3, r3, #1
 80067c2:	6053      	str	r3, [r2, #4]
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	e0042000 	.word	0xe0042000

080067d4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80067d8:	4b05      	ldr	r3, [pc, #20]	; (80067f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4a04      	ldr	r2, [pc, #16]	; (80067f0 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 80067de:	f043 0302 	orr.w	r3, r3, #2
 80067e2:	6053      	str	r3, [r2, #4]
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	e0042000 	.word	0xe0042000

080067f4 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80067f8:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4a04      	ldr	r2, [pc, #16]	; (8006810 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 80067fe:	f023 0302 	bic.w	r3, r3, #2
 8006802:	6053      	str	r3, [r2, #4]
}
 8006804:	bf00      	nop
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e0042000 	.word	0xe0042000

08006814 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006818:	4b05      	ldr	r3, [pc, #20]	; (8006830 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4a04      	ldr	r2, [pc, #16]	; (8006830 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 800681e:	f043 0304 	orr.w	r3, r3, #4
 8006822:	6053      	str	r3, [r2, #4]
}
 8006824:	bf00      	nop
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	e0042000 	.word	0xe0042000

08006834 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8006834:	b480      	push	{r7}
 8006836:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8006838:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	4a04      	ldr	r2, [pc, #16]	; (8006850 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 800683e:	f023 0304 	bic.w	r3, r3, #4
 8006842:	6053      	str	r3, [r2, #4]
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	e0042000 	.word	0xe0042000

08006854 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8006854:	b480      	push	{r7}
 8006856:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)ENABLE;
 8006858:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_EnableCompensationCell+0x14>)
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	42270400 	.word	0x42270400

0800686c <HAL_DisableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.  
  * @retval None
  */
void HAL_DisableCompensationCell(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *)CMPCR_CMP_PD_BB = (uint32_t)DISABLE;
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <HAL_DisableCompensationCell+0x14>)
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
}
 8006876:	bf00      	nop
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	42270400 	.word	0x42270400

08006884 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8006888:	4b03      	ldr	r3, [pc, #12]	; (8006898 <HAL_GetUIDw0+0x14>)
 800688a:	681b      	ldr	r3, [r3, #0]
}
 800688c:	4618      	mov	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	1fff7a10 	.word	0x1fff7a10

0800689c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80068a0:	4b03      	ldr	r3, [pc, #12]	; (80068b0 <HAL_GetUIDw1+0x14>)
 80068a2:	681b      	ldr	r3, [r3, #0]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	1fff7a14 	.word	0x1fff7a14

080068b4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80068b8:	4b03      	ldr	r3, [pc, #12]	; (80068c8 <HAL_GetUIDw2+0x14>)
 80068ba:	681b      	ldr	r3, [r3, #0]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	1fff7a18 	.word	0x1fff7a18

080068cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f003 0307 	and.w	r3, r3, #7
 80068da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068e8:	4013      	ands	r3, r2
 80068ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068fe:	4a04      	ldr	r2, [pc, #16]	; (8006910 <__NVIC_SetPriorityGrouping+0x44>)
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	60d3      	str	r3, [r2, #12]
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006918:	4b04      	ldr	r3, [pc, #16]	; (800692c <__NVIC_GetPriorityGrouping+0x18>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	0a1b      	lsrs	r3, r3, #8
 800691e:	f003 0307 	and.w	r3, r3, #7
}
 8006922:	4618      	mov	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	e000ed00 	.word	0xe000ed00

08006930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800693a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	db0b      	blt.n	800695a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006942:	79fb      	ldrb	r3, [r7, #7]
 8006944:	f003 021f 	and.w	r2, r3, #31
 8006948:	4907      	ldr	r1, [pc, #28]	; (8006968 <__NVIC_EnableIRQ+0x38>)
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	095b      	lsrs	r3, r3, #5
 8006950:	2001      	movs	r0, #1
 8006952:	fa00 f202 	lsl.w	r2, r0, r2
 8006956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800695a:	bf00      	nop
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	e000e100 	.word	0xe000e100

0800696c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697a:	2b00      	cmp	r3, #0
 800697c:	db12      	blt.n	80069a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800697e:	79fb      	ldrb	r3, [r7, #7]
 8006980:	f003 021f 	and.w	r2, r3, #31
 8006984:	490a      	ldr	r1, [pc, #40]	; (80069b0 <__NVIC_DisableIRQ+0x44>)
 8006986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2001      	movs	r0, #1
 800698e:	fa00 f202 	lsl.w	r2, r0, r2
 8006992:	3320      	adds	r3, #32
 8006994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006998:	f3bf 8f4f 	dsb	sy
}
 800699c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800699e:	f3bf 8f6f 	isb	sy
}
 80069a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	e000e100 	.word	0xe000e100

080069b4 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db0e      	blt.n	80069e4 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80069c6:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <__NVIC_GetPendingIRQ+0x40>)
 80069c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069cc:	095b      	lsrs	r3, r3, #5
 80069ce:	3340      	adds	r3, #64	; 0x40
 80069d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	fa22 f303 	lsr.w	r3, r2, r3
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	e000      	b.n	80069e6 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 80069e4:	2300      	movs	r3, #0
  }
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	e000e100 	.word	0xe000e100

080069f8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	db0c      	blt.n	8006a24 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a0a:	79fb      	ldrb	r3, [r7, #7]
 8006a0c:	f003 021f 	and.w	r2, r3, #31
 8006a10:	4907      	ldr	r1, [pc, #28]	; (8006a30 <__NVIC_SetPendingIRQ+0x38>)
 8006a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	2001      	movs	r0, #1
 8006a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8006a1e:	3340      	adds	r3, #64	; 0x40
 8006a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	e000e100 	.word	0xe000e100

08006a34 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	db0c      	blt.n	8006a60 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006a46:	79fb      	ldrb	r3, [r7, #7]
 8006a48:	f003 021f 	and.w	r2, r3, #31
 8006a4c:	4907      	ldr	r1, [pc, #28]	; (8006a6c <__NVIC_ClearPendingIRQ+0x38>)
 8006a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a52:	095b      	lsrs	r3, r3, #5
 8006a54:	2001      	movs	r0, #1
 8006a56:	fa00 f202 	lsl.w	r2, r0, r2
 8006a5a:	3360      	adds	r3, #96	; 0x60
 8006a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	e000e100 	.word	0xe000e100

08006a70 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	db0e      	blt.n	8006aa0 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8006a82:	4a0b      	ldr	r2, [pc, #44]	; (8006ab0 <__NVIC_GetActive+0x40>)
 8006a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	3380      	adds	r3, #128	; 0x80
 8006a8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	f003 031f 	and.w	r3, r3, #31
 8006a96:	fa22 f303 	lsr.w	r3, r2, r3
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	e000      	b.n	8006aa2 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8006aa0:	2300      	movs	r3, #0
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000e100 	.word	0xe000e100

08006ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	db0a      	blt.n	8006ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	490c      	ldr	r1, [pc, #48]	; (8006b00 <__NVIC_SetPriority+0x4c>)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	0112      	lsls	r2, r2, #4
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006adc:	e00a      	b.n	8006af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	4908      	ldr	r1, [pc, #32]	; (8006b04 <__NVIC_SetPriority+0x50>)
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	f003 030f 	and.w	r3, r3, #15
 8006aea:	3b04      	subs	r3, #4
 8006aec:	0112      	lsls	r2, r2, #4
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	440b      	add	r3, r1
 8006af2:	761a      	strb	r2, [r3, #24]
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	e000e100 	.word	0xe000e100
 8006b04:	e000ed00 	.word	0xe000ed00

08006b08 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8006b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	db09      	blt.n	8006b2e <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8006b1a:	4a0d      	ldr	r2, [pc, #52]	; (8006b50 <__NVIC_GetPriority+0x48>)
 8006b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b20:	4413      	add	r3, r2
 8006b22:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	e009      	b.n	8006b42 <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8006b2e:	4a09      	ldr	r2, [pc, #36]	; (8006b54 <__NVIC_GetPriority+0x4c>)
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	3b04      	subs	r3, #4
 8006b38:	4413      	add	r3, r2
 8006b3a:	7e1b      	ldrb	r3, [r3, #24]
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	091b      	lsrs	r3, r3, #4
 8006b40:	b2db      	uxtb	r3, r3
  }
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	e000e100 	.word	0xe000e100
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b089      	sub	sp, #36	; 0x24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f003 0307 	and.w	r3, r3, #7
 8006b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	f1c3 0307 	rsb	r3, r3, #7
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	bf28      	it	cs
 8006b76:	2304      	movcs	r3, #4
 8006b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	2b06      	cmp	r3, #6
 8006b80:	d902      	bls.n	8006b88 <NVIC_EncodePriority+0x30>
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	3b03      	subs	r3, #3
 8006b86:	e000      	b.n	8006b8a <NVIC_EncodePriority+0x32>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	fa02 f303 	lsl.w	r3, r2, r3
 8006b96:	43da      	mvns	r2, r3
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	43d9      	mvns	r1, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bb0:	4313      	orrs	r3, r2
         );
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3724      	adds	r7, #36	; 0x24
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b089      	sub	sp, #36	; 0x24
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	60f8      	str	r0, [r7, #12]
 8006bc6:	60b9      	str	r1, [r7, #8]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f1c3 0307 	rsb	r3, r3, #7
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	bf28      	it	cs
 8006bde:	2304      	movcs	r3, #4
 8006be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	3304      	adds	r3, #4
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d902      	bls.n	8006bf0 <NVIC_DecodePriority+0x32>
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3b03      	subs	r3, #3
 8006bee:	e000      	b.n	8006bf2 <NVIC_DecodePriority+0x34>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	40da      	lsrs	r2, r3
 8006bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	fa01 f303 	lsl.w	r3, r1, r3
 8006c04:	43db      	mvns	r3, r3
 8006c06:	401a      	ands	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43da      	mvns	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	601a      	str	r2, [r3, #0]
}
 8006c20:	bf00      	nop
 8006c22:	3724      	adds	r7, #36	; 0x24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8006c30:	f3bf 8f4f 	dsb	sy
}
 8006c34:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <__NVIC_SystemReset+0x24>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c3e:	4904      	ldr	r1, [pc, #16]	; (8006c50 <__NVIC_SystemReset+0x24>)
 8006c40:	4b04      	ldr	r3, [pc, #16]	; (8006c54 <__NVIC_SystemReset+0x28>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c46:	f3bf 8f4f 	dsb	sy
}
 8006c4a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <__NVIC_SystemReset+0x20>
 8006c50:	e000ed00 	.word	0xe000ed00
 8006c54:	05fa0004 	.word	0x05fa0004

08006c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c68:	d301      	bcc.n	8006c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e00f      	b.n	8006c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <SysTick_Config+0x40>)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c76:	210f      	movs	r1, #15
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	f7ff ff1a 	bl	8006ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c80:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <SysTick_Config+0x40>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c86:	4b04      	ldr	r3, [pc, #16]	; (8006c98 <SysTick_Config+0x40>)
 8006c88:	2207      	movs	r2, #7
 8006c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	e000e010 	.word	0xe000e010

08006c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7ff fe11 	bl	80068cc <__NVIC_SetPriorityGrouping>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b086      	sub	sp, #24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cc4:	f7ff fe26 	bl	8006914 <__NVIC_GetPriorityGrouping>
 8006cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	6978      	ldr	r0, [r7, #20]
 8006cd0:	f7ff ff42 	bl	8006b58 <NVIC_EncodePriority>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff fee9 	bl	8006ab4 <__NVIC_SetPriority>
}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff fe19 	bl	8006930 <__NVIC_EnableIRQ>
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fe29 	bl	800696c <__NVIC_DisableIRQ>
}
 8006d1a:	bf00      	nop
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006d26:	f7ff ff81 	bl	8006c2c <__NVIC_SystemReset>

08006d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f7ff ff90 	bl	8006c58 <SysTick_Config>
 8006d38:	4603      	mov	r3, r0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3708      	adds	r7, #8
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006d42:	b480      	push	{r7}
 8006d44:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8006d46:	f3bf 8f5f 	dmb	sy
}
 8006d4a:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006d4c:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_MPU_Disable+0x26>)
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	4a05      	ldr	r2, [pc, #20]	; (8006d68 <HAL_MPU_Disable+0x26>)
 8006d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d56:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0U;
 8006d58:	4b04      	ldr	r3, [pc, #16]	; (8006d6c <HAL_MPU_Disable+0x2a>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
}
 8006d5e:	bf00      	nop
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	e000ed00 	.word	0xe000ed00
 8006d6c:	e000ed90 	.word	0xe000ed90

08006d70 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006d78:	4a0b      	ldr	r2, [pc, #44]	; (8006da8 <HAL_MPU_Enable+0x38>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8006d82:	4b0a      	ldr	r3, [pc, #40]	; (8006dac <HAL_MPU_Enable+0x3c>)
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	4a09      	ldr	r2, [pc, #36]	; (8006dac <HAL_MPU_Enable+0x3c>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006d8e:	f3bf 8f4f 	dsb	sy
}
 8006d92:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006d94:	f3bf 8f6f 	isb	sy
}
 8006d98:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	e000ed90 	.word	0xe000ed90
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	785a      	ldrb	r2, [r3, #1]
 8006dbc:	4b1d      	ldr	r3, [pc, #116]	; (8006e34 <HAL_MPU_ConfigRegion+0x84>)
 8006dbe:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d029      	beq.n	8006e1c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8006dc8:	4a1a      	ldr	r2, [pc, #104]	; (8006e34 <HAL_MPU_ConfigRegion+0x84>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	7b1b      	ldrb	r3, [r3, #12]
 8006dd4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	7adb      	ldrb	r3, [r3, #11]
 8006dda:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006ddc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	7a9b      	ldrb	r3, [r3, #10]
 8006de2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006de4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	7b5b      	ldrb	r3, [r3, #13]
 8006dea:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006dec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7b9b      	ldrb	r3, [r3, #14]
 8006df2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006df4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7bdb      	ldrb	r3, [r3, #15]
 8006dfa:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006dfc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7a5b      	ldrb	r3, [r3, #9]
 8006e02:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006e04:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7a1b      	ldrb	r3, [r3, #8]
 8006e0a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006e0c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	7812      	ldrb	r2, [r2, #0]
 8006e12:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e14:	4a07      	ldr	r2, [pc, #28]	; (8006e34 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006e16:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006e18:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00U;
    MPU->RASR = 0x00U;
  }
}
 8006e1a:	e005      	b.n	8006e28 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00U;
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <HAL_MPU_ConfigRegion+0x84>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00U;
 8006e22:	4b04      	ldr	r3, [pc, #16]	; (8006e34 <HAL_MPU_ConfigRegion+0x84>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	611a      	str	r2, [r3, #16]
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	e000ed90 	.word	0xe000ed90

08006e38 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8006e3c:	f7ff fd6a 	bl	8006914 <__NVIC_GetPriorityGrouping>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fe54 	bl	8006b08 <__NVIC_GetPriority>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	f7ff feaa 	bl	8006bbe <NVIC_DecodePriority>
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b082      	sub	sp, #8
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	4603      	mov	r3, r0
 8006e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8006e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fdb9 	bl	80069f8 <__NVIC_SetPendingIRQ>
}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	4603      	mov	r3, r0
 8006e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8006e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fd89 	bl	80069b4 <__NVIC_GetPendingIRQ>
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fdba 	bl	8006a34 <__NVIC_ClearPendingIRQ>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8006ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fdca 	bl	8006a70 <__NVIC_GetActive>
 8006edc:	4603      	mov	r3, r0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b083      	sub	sp, #12
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d106      	bne.n	8006f02 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8006ef4:	4b09      	ldr	r3, [pc, #36]	; (8006f1c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a08      	ldr	r2, [pc, #32]	; (8006f1c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006efa:	f043 0304 	orr.w	r3, r3, #4
 8006efe:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8006f00:	e005      	b.n	8006f0e <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a05      	ldr	r2, [pc, #20]	; (8006f1c <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8006f08:	f023 0304 	bic.w	r3, r3, #4
 8006f0c:	6013      	str	r3, [r2, #0]
}
 8006f0e:	bf00      	nop
 8006f10:	370c      	adds	r7, #12
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	e000e010 	.word	0xe000e010

08006f20 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8006f24:	f000 f802 	bl	8006f2c <HAL_SYSTICK_Callback>
}
 8006f28:	bf00      	nop
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006f30:	bf00      	nop
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e014      	b.n	8006f76 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	791b      	ldrb	r3, [r3, #4]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d105      	bne.n	8006f62 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fe fc13 	bl	8005788 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2202      	movs	r2, #2
 8006f66:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_DAC_DeInit>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_DeInit(DAC_HandleTypeDef *hdac)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <HAL_DAC_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e00f      	b.n	8006fb0 <HAL_DAC_DeInit+0x32>

  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	711a      	strb	r2, [r3, #4]
  }
  /* DeInit the low level hardware */
  hdac->MspDeInitCallback(hdac);
#else
  /* DeInit the low level hardware */
  HAL_DAC_MspDeInit(hdac);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f7fe fc3a 	bl	8005810 <HAL_DAC_MspDeInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	611a      	str	r2, [r3, #16]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_RESET;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	711a      	strb	r2, [r3, #4]

  /* Release Lock */
  __HAL_UNLOCK(hdac);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	795b      	ldrb	r3, [r3, #5]
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_DAC_Start+0x16>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e040      	b.n	8007050 <HAL_DAC_Start+0x98>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6819      	ldr	r1, [r3, #0]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	409a      	lsls	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10f      	bne.n	8007018 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007002:	2b3c      	cmp	r3, #60	; 0x3c
 8007004:	d11d      	bne.n	8007042 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0201 	orr.w	r2, r2, #1
 8007014:	605a      	str	r2, [r3, #4]
 8007016:	e014      	b.n	8007042 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	213c      	movs	r1, #60	; 0x3c
 800702a:	fa01 f303 	lsl.w	r3, r1, r3
 800702e:	429a      	cmp	r2, r3
 8007030:	d107      	bne.n	8007042 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685a      	ldr	r2, [r3, #4]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f042 0202 	orr.w	r2, r2, #2
 8007040:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6819      	ldr	r1, [r3, #0]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	f003 0310 	and.w	r3, r3, #16
 8007072:	2201      	movs	r2, #1
 8007074:	fa02 f303 	lsl.w	r3, r2, r3
 8007078:	43da      	mvns	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	400a      	ands	r2, r1
 8007080:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	b086      	sub	sp, #24
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	60b9      	str	r1, [r7, #8]
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	795b      	ldrb	r3, [r3, #5]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_DAC_Start_DMA+0x22>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e0ab      	b.n	8007210 <HAL_DAC_Start_DMA+0x17a>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2202      	movs	r2, #2
 80070c2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d12f      	bne.n	800712a <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4a52      	ldr	r2, [pc, #328]	; (8007218 <HAL_DAC_Start_DMA+0x182>)
 80070d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	4a51      	ldr	r2, [pc, #324]	; (800721c <HAL_DAC_Start_DMA+0x186>)
 80070d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	4a50      	ldr	r2, [pc, #320]	; (8007220 <HAL_DAC_Start_DMA+0x18a>)
 80070e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80070f2:	6a3b      	ldr	r3, [r7, #32]
 80070f4:	2b08      	cmp	r3, #8
 80070f6:	d013      	beq.n	8007120 <HAL_DAC_Start_DMA+0x8a>
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	2b08      	cmp	r3, #8
 80070fc:	d845      	bhi.n	800718a <HAL_DAC_Start_DMA+0xf4>
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d003      	beq.n	800710c <HAL_DAC_Start_DMA+0x76>
 8007104:	6a3b      	ldr	r3, [r7, #32]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d005      	beq.n	8007116 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800710a:	e03e      	b.n	800718a <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	613b      	str	r3, [r7, #16]
        break;
 8007114:	e03c      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	613b      	str	r3, [r7, #16]
        break;
 800711e:	e037      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3310      	adds	r3, #16
 8007126:	613b      	str	r3, [r7, #16]
        break;
 8007128:	e032      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	4a3d      	ldr	r2, [pc, #244]	; (8007224 <HAL_DAC_Start_DMA+0x18e>)
 8007130:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	4a3c      	ldr	r2, [pc, #240]	; (8007228 <HAL_DAC_Start_DMA+0x192>)
 8007138:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	4a3b      	ldr	r2, [pc, #236]	; (800722c <HAL_DAC_Start_DMA+0x196>)
 8007140:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007150:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d013      	beq.n	8007180 <HAL_DAC_Start_DMA+0xea>
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	2b08      	cmp	r3, #8
 800715c:	d817      	bhi.n	800718e <HAL_DAC_Start_DMA+0xf8>
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_DAC_Start_DMA+0xd6>
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	2b04      	cmp	r3, #4
 8007168:	d005      	beq.n	8007176 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800716a:	e010      	b.n	800718e <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	613b      	str	r3, [r7, #16]
        break;
 8007174:	e00c      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3318      	adds	r3, #24
 800717c:	613b      	str	r3, [r7, #16]
        break;
 800717e:	e007      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	331c      	adds	r3, #28
 8007186:	613b      	str	r3, [r7, #16]
        break;
 8007188:	e002      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        break;
 800718a:	bf00      	nop
 800718c:	e000      	b.n	8007190 <HAL_DAC_Start_DMA+0xfa>
        break;
 800718e:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d111      	bne.n	80071ba <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6898      	ldr	r0, [r3, #8]
 80071aa:	6879      	ldr	r1, [r7, #4]
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	693a      	ldr	r2, [r7, #16]
 80071b0:	f000 fca5 	bl	8007afe <HAL_DMA_Start_IT>
 80071b4:	4603      	mov	r3, r0
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	e010      	b.n	80071dc <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80071c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68d8      	ldr	r0, [r3, #12]
 80071ce:	6879      	ldr	r1, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	f000 fc93 	bl	8007afe <HAL_DMA_Start_IT>
 80071d8:	4603      	mov	r3, r0
 80071da:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10c      	bne.n	8007202 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6819      	ldr	r1, [r3, #0]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	f003 0310 	and.w	r3, r3, #16
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e005      	b.n	800720e <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	f043 0204 	orr.w	r2, r3, #4
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	08007513 	.word	0x08007513
 800721c:	08007535 	.word	0x08007535
 8007220:	08007551 	.word	0x08007551
 8007224:	08007805 	.word	0x08007805
 8007228:	08007827 	.word	0x08007827
 800722c:	08007843 	.word	0x08007843

08007230 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6819      	ldr	r1, [r3, #0]
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800724a:	fa02 f303 	lsl.w	r3, r2, r3
 800724e:	43da      	mvns	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	400a      	ands	r2, r1
 8007256:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	f003 0310 	and.w	r3, r3, #16
 8007264:	2201      	movs	r2, #1
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	400a      	ands	r2, r1
 8007272:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10d      	bne.n	8007296 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fc95 	bl	8007bae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	e00c      	b.n	80072b0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fc87 	bl	8007bae <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80072ae:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d6:	d120      	bne.n	800731a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072e6:	d118      	bne.n	800731a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2204      	movs	r2, #4
 80072ec:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f043 0201 	orr.w	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007302:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007312:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f870 	bl	80073fa <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007328:	d120      	bne.n	800736c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007330:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007334:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007338:	d118      	bne.n	800736c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2204      	movs	r2, #4
 800733e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f043 0202 	orr.w	r2, r3, #2
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007354:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007364:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fa28 	bl	80077bc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007374:	b480      	push	{r7}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
 8007380:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d105      	bne.n	800739e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4413      	add	r3, r2
 8007398:	3308      	adds	r3, #8
 800739a:	617b      	str	r3, [r7, #20]
 800739c:	e004      	b.n	80073a8 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4413      	add	r3, r2
 80073a4:	3314      	adds	r3, #20
 80073a6:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	461a      	mov	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	371c      	adds	r7, #28
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80073c6:	bf00      	nop
 80073c8:	370c      	adds	r7, #12
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_DAC_GetValue>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  uint32_t result = 0;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  if (Channel == DAC_CHANNEL_1)
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <HAL_DAC_GetValue+0x1e>
  {
    result = hdac->Instance->DOR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	60fb      	str	r3, [r7, #12]
 800742a:	e003      	b.n	8007434 <HAL_DAC_GetValue+0x26>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    result = hdac->Instance->DOR2;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	60fb      	str	r3, [r7, #12]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  /* Returns the DAC channel data output register value */
  return result;
 8007434:	68fb      	ldr	r3, [r7, #12]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3714      	adds	r7, #20
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007442:	b480      	push	{r7}
 8007444:	b087      	sub	sp, #28
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d101      	bne.n	800745a <HAL_DAC_ConfigChannel+0x18>
 8007456:	2302      	movs	r3, #2
 8007458:	e03c      	b.n	80074d4 <HAL_DAC_ConfigChannel+0x92>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2202      	movs	r2, #2
 8007464:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007478:	fa02 f303 	lsl.w	r3, r2, r3
 800747c:	43db      	mvns	r3, r3
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4013      	ands	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	fa02 f303 	lsl.w	r3, r2, r3
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	4313      	orrs	r3, r2
 80074a0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6819      	ldr	r1, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f003 0310 	and.w	r3, r3, #16
 80074b6:	22c0      	movs	r2, #192	; 0xc0
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	43da      	mvns	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	400a      	ands	r2, r1
 80074c4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_DAC_GetState>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL state
  */
HAL_DAC_StateTypeDef HAL_DAC_GetState(DAC_HandleTypeDef *hdac)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Return DAC handle state */
  return hdac->State;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	791b      	ldrb	r3, [r3, #4]
 80074ec:	b2db      	uxtb	r3, r3
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_DAC_GetError>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  return hdac->ErrorCode;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	f7ff ff4c 	bl	80073be <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	711a      	strb	r2, [r3, #4]
}
 800752c:	bf00      	nop
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f7ff ff45 	bl	80073d2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	f043 0204 	orr.w	r2, r3, #4
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f7ff ff3b 	bl	80073e6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2201      	movs	r2, #1
 8007574:	711a      	strb	r2, [r3, #4]
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <HAL_DACEx_DualStart>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStart(DAC_HandleTypeDef *hdac)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint32_t tmp_swtrig = 0UL;
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]


  /* Process locked */
  __HAL_LOCK(hdac);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	795b      	ldrb	r3, [r3, #5]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d101      	bne.n	8007596 <HAL_DACEx_DualStart+0x18>
 8007592:	2302      	movs	r3, #2
 8007594:	e03b      	b.n	800760e <HAL_DACEx_DualStart+0x90>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_1);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0201 	orr.w	r2, r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
  __HAL_DAC_ENABLE(hdac, DAC_CHANNEL_2);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075c0:	601a      	str	r2, [r3, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80075cc:	2b3c      	cmp	r3, #60	; 0x3c
 80075ce:	d103      	bne.n	80075d8 <HAL_DACEx_DualStart+0x5a>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG1;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
  }
  if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (DAC_CHANNEL_2 & 0x10UL)))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80075e2:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 80075e6:	d103      	bne.n	80075f0 <HAL_DACEx_DualStart+0x72>
  {
    tmp_swtrig |= DAC_SWTRIGR_SWTRIG2;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f043 0302 	orr.w	r3, r3, #2
 80075ee:	60fb      	str	r3, [r7, #12]
  }
  /* Enable the selected DAC software conversion*/
  SET_BIT(hdac->Instance->SWTRIGR, tmp_swtrig);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6859      	ldr	r1, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	605a      	str	r2, [r3, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <HAL_DACEx_DualStop>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualStop(DAC_HandleTypeDef *hdac)
{
 800761a:	b480      	push	{r7}
 800761c:	b083      	sub	sp, #12
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_1);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, DAC_CHANNEL_2);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007640:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8007656:	b480      	push	{r7}
 8007658:	b085      	sub	sp, #20
 800765a:	af00      	add	r7, sp, #0
 800765c:	60f8      	str	r0, [r7, #12]
 800765e:	60b9      	str	r1, [r7, #8]
 8007660:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	795b      	ldrb	r3, [r3, #5]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d101      	bne.n	800766e <HAL_DACEx_TriangleWaveGenerate+0x18>
 800766a:	2302      	movs	r3, #2
 800766c:	e024      	b.n	80076b8 <HAL_DACEx_TriangleWaveGenerate+0x62>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2201      	movs	r2, #1
 8007672:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2202      	movs	r2, #2
 8007678:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681a      	ldr	r2, [r3, #0]
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	f003 0310 	and.w	r3, r3, #16
 8007686:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800768a:	fa01 f303 	lsl.w	r3, r1, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	ea02 0103 	and.w	r1, r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	409a      	lsls	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_DACEx_NoiseWaveGenerate>:
  *            @arg DAC_LFSRUNMASK_BITS10_0: Unmask DAC channel LFSR bit[10:0] for noise wave generation
  *            @arg DAC_LFSRUNMASK_BITS11_0: Unmask DAC channel LFSR bit[11:0] for noise wave generation
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_NoiseWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	795b      	ldrb	r3, [r3, #5]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d101      	bne.n	80076dc <HAL_DACEx_NoiseWaveGenerate+0x18>
 80076d8:	2302      	movs	r3, #2
 80076da:	e024      	b.n	8007726 <HAL_DACEx_NoiseWaveGenerate+0x62>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2201      	movs	r2, #1
 80076e0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2202      	movs	r2, #2
 80076e6:	711a      	strb	r2, [r3, #4]

  /* Enable the noise wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	f003 0310 	and.w	r3, r3, #16
 80076f4:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80076f8:	fa01 f303 	lsl.w	r3, r1, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	ea02 0103 	and.w	r1, r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 0310 	and.w	r3, r3, #16
 800770e:	409a      	lsls	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_0 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_DACEx_DualSetValue>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_DualSetValue(DAC_HandleTypeDef *hdac, uint32_t Alignment, uint32_t Data1, uint32_t Data2)
{
 8007732:	b480      	push	{r7}
 8007734:	b087      	sub	sp, #28
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));

  /* Calculate and set dual DAC data holding register value */
  if (Alignment == DAC_ALIGN_8B_R)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b08      	cmp	r3, #8
 8007744:	d105      	bne.n	8007752 <HAL_DACEx_DualSetValue+0x20>
  {
    data = ((uint32_t)Data2 << 8U) | Data1;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	e004      	b.n	800775c <HAL_DACEx_DualSetValue+0x2a>
  }
  else
  {
    data = ((uint32_t)Data2 << 16U) | Data1;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	041b      	lsls	r3, r3, #16
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	4313      	orrs	r3, r2
 800775a:	617b      	str	r3, [r7, #20]
  }

  tmp = (uint32_t)hdac->Instance;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	613b      	str	r3, [r7, #16]
  tmp += DAC_DHR12RD_ALIGNMENT(Alignment);
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	3320      	adds	r3, #32
 800776a:	613b      	str	r3, [r7, #16]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_DACEx_DualGetValue>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DACEx_DualGetValue(DAC_HandleTypeDef *hdac)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0UL;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR1;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]

  tmp |= hdac->Instance->DOR2 << 16UL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ee:	041b      	lsls	r3, r3, #16
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Returns the DAC channel data output register value */
  return tmp;
 80077f6:	68fb      	ldr	r3, [r7, #12]
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007810:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007812:	68f8      	ldr	r0, [r7, #12]
 8007814:	f7ff ffb4 	bl	8007780 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	711a      	strb	r2, [r3, #4]
}
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff ffad 	bl	8007794 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f043 0204 	orr.w	r2, r3, #4
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	f7ff ffa3 	bl	80077a8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	711a      	strb	r2, [r3, #4]
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b086      	sub	sp, #24
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800787c:	f7fe fed6 	bl	800662c <HAL_GetTick>
 8007880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e099      	b.n	80079c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2202      	movs	r2, #2
 8007890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0201 	bic.w	r2, r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ac:	e00f      	b.n	80078ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078ae:	f7fe febd 	bl	800662c <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	2b05      	cmp	r3, #5
 80078ba:	d908      	bls.n	80078ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2203      	movs	r2, #3
 80078c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e078      	b.n	80079c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f003 0301 	and.w	r3, r3, #1
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e8      	bne.n	80078ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	4b38      	ldr	r3, [pc, #224]	; (80079c8 <HAL_DMA_Init+0x158>)
 80078e8:	4013      	ands	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685a      	ldr	r2, [r3, #4]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80078fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	2b04      	cmp	r3, #4
 8007926:	d107      	bne.n	8007938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007930:	4313      	orrs	r3, r2
 8007932:	697a      	ldr	r2, [r7, #20]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f023 0307 	bic.w	r3, r3, #7
 800794e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	2b04      	cmp	r3, #4
 8007960:	d117      	bne.n	8007992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00e      	beq.n	8007992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fd4d 	bl	8008414 <DMA_CheckFifoParam>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d008      	beq.n	8007992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2240      	movs	r2, #64	; 0x40
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800798e:	2301      	movs	r3, #1
 8007990:	e016      	b.n	80079c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fd05 	bl	80083aa <DMA_CalcBaseAndBitshift>
 80079a0:	4603      	mov	r3, r0
 80079a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a8:	223f      	movs	r2, #63	; 0x3f
 80079aa:	409a      	lsls	r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2200      	movs	r2, #0
 80079b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	f010803f 	.word	0xf010803f

080079cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e050      	b.n	8007a80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b02      	cmp	r3, #2
 80079e8:	d101      	bne.n	80079ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80079ea:	2302      	movs	r3, #2
 80079ec:	e048      	b.n	8007a80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f022 0201 	bic.w	r2, r2, #1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2200      	movs	r2, #0
 8007a14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2221      	movs	r2, #33	; 0x21
 8007a2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fcbb 	bl	80083aa <DMA_CalcBaseAndBitshift>
 8007a34:	4603      	mov	r3, r0
 8007a36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	223f      	movs	r2, #63	; 0x3f
 8007a62:	409a      	lsls	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a96:	2300      	movs	r3, #0
 8007a98:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_DMA_Start+0x20>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e026      	b.n	8007af6 <HAL_DMA_Start+0x6e>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d115      	bne.n	8007ae8 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 fc3c 	bl	800834e <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f042 0201 	orr.w	r2, r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]
 8007ae6:	e005      	b.n	8007af4 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
 8007af2:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b086      	sub	sp, #24
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	60f8      	str	r0, [r7, #12]
 8007b06:	60b9      	str	r1, [r7, #8]
 8007b08:	607a      	str	r2, [r7, #4]
 8007b0a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d101      	bne.n	8007b24 <HAL_DMA_Start_IT+0x26>
 8007b20:	2302      	movs	r3, #2
 8007b22:	e040      	b.n	8007ba6 <HAL_DMA_Start_IT+0xa8>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d12f      	bne.n	8007b98 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	68b9      	ldr	r1, [r7, #8]
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f000 fbfe 	bl	800834e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b56:	223f      	movs	r2, #63	; 0x3f
 8007b58:	409a      	lsls	r2, r3
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0216 	orr.w	r2, r2, #22
 8007b6c:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0208 	orr.w	r2, r2, #8
 8007b84:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f042 0201 	orr.w	r2, r2, #1
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	e005      	b.n	8007ba4 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3718      	adds	r7, #24
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bba:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007bbc:	f7fe fd36 	bl	800662c <HAL_GetTick>
 8007bc0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d008      	beq.n	8007be0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2280      	movs	r2, #128	; 0x80
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e052      	b.n	8007c86 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681a      	ldr	r2, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f022 0216 	bic.w	r2, r2, #22
 8007bee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	695a      	ldr	r2, [r3, #20]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bfe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <HAL_DMA_Abort+0x62>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d007      	beq.n	8007c20 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0208 	bic.w	r2, r2, #8
 8007c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c30:	e013      	b.n	8007c5a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c32:	f7fe fcfb 	bl	800662c <HAL_GetTick>
 8007c36:	4602      	mov	r2, r0
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	1ad3      	subs	r3, r2, r3
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d90c      	bls.n	8007c5a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2220      	movs	r2, #32
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2203      	movs	r2, #3
 8007c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e015      	b.n	8007c86 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e4      	bne.n	8007c32 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	223f      	movs	r2, #63	; 0x3f
 8007c6e:	409a      	lsls	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d004      	beq.n	8007cac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2280      	movs	r2, #128	; 0x80
 8007ca6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e00c      	b.n	8007cc6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <HAL_DMA_PollForTransfer>:
  * @note   The HAL_DMA_PollForTransfer API cannot be used in circular and double buffering mode (automatic circular mode). 
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, HAL_DMA_LevelCompleteTypeDef CompleteLevel, uint32_t Timeout)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b08a      	sub	sp, #40	; 0x28
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	60f8      	str	r0, [r7, #12]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	607a      	str	r2, [r7, #4]
 8007cde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK; 
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	77fb      	strb	r3, [r7, #31]
  uint32_t mask_cpltlevel;
  uint32_t tickstart = HAL_GetTick(); 
 8007ce4:	f7fe fca2 	bl	800662c <HAL_GetTick>
 8007ce8:	61b8      	str	r0, [r7, #24]
  uint32_t tmpisr;
  
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d008      	beq.n	8007d08 <HAL_DMA_PollForTransfer+0x36>
  {
    /* No transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e0bf      	b.n	8007e88 <HAL_DMA_PollForTransfer+0x1b6>
  }

  /* Polling mode not supported in circular mode and double buffering mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != RESET)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <HAL_DMA_PollForTransfer+0x50>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e0b2      	b.n	8007e88 <HAL_DMA_PollForTransfer+0x1b6>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007d22:	7afb      	ldrb	r3, [r7, #11]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d106      	bne.n	8007d36 <HAL_DMA_PollForTransfer+0x64>
  {
    /* Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
 8007d34:	e005      	b.n	8007d42 <HAL_DMA_PollForTransfer+0x70>
  }
  else
  {
    /* Half Transfer Complete flag */
    mask_cpltlevel = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d46:	617b      	str	r3, [r7, #20]
  tmpisr = regs->ISR;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	623b      	str	r3, [r7, #32]
  
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007d4e:	e05a      	b.n	8007e06 <HAL_DMA_PollForTransfer+0x134>
  {
    /* Check for the Timeout (Not applicable in circular mode)*/
    if(Timeout != HAL_MAX_DELAY)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d017      	beq.n	8007d88 <HAL_DMA_PollForTransfer+0xb6>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <HAL_DMA_PollForTransfer+0x9c>
 8007d5e:	f7fe fc65 	bl	800662c <HAL_GetTick>
 8007d62:	4602      	mov	r2, r0
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d20c      	bcs.n	8007d88 <HAL_DMA_PollForTransfer+0xb6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e07f      	b.n	8007e88 <HAL_DMA_PollForTransfer+0x1b6>
      }
    }

    /* Get the ISR register value */
    tmpisr = regs->ISR;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	623b      	str	r3, [r7, #32]

    if((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d92:	2208      	movs	r2, #8
 8007d94:	409a      	lsls	r2, r3
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <HAL_DMA_PollForTransfer+0xe4>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f043 0201 	orr.w	r2, r3, #1
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dae:	2208      	movs	r2, #8
 8007db0:	409a      	lsls	r2, r3
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dba:	2201      	movs	r2, #1
 8007dbc:	409a      	lsls	r2, r3
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00b      	beq.n	8007dde <HAL_DMA_PollForTransfer+0x10c>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f043 0202 	orr.w	r2, r3, #2
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	609a      	str	r2, [r3, #8]
    }
    
    if((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	2204      	movs	r2, #4
 8007de4:	409a      	lsls	r2, r3
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00b      	beq.n	8007e06 <HAL_DMA_PollForTransfer+0x134>
    {
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df2:	f043 0204 	orr.w	r2, r3, #4
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Clear the Direct Mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfe:	2204      	movs	r2, #4
 8007e00:	409a      	lsls	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	609a      	str	r2, [r3, #8]
  while(((tmpisr & mask_cpltlevel) == RESET) && ((hdma->ErrorCode & HAL_DMA_ERROR_TE) == RESET))
 8007e06:	6a3a      	ldr	r2, [r7, #32]
 8007e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d105      	bne.n	8007e1c <HAL_DMA_PollForTransfer+0x14a>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d099      	beq.n	8007d50 <HAL_DMA_PollForTransfer+0x7e>
    }
  }
  
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d018      	beq.n	8007e56 <HAL_DMA_PollForTransfer+0x184>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d012      	beq.n	8007e56 <HAL_DMA_PollForTransfer+0x184>
    {
      HAL_DMA_Abort(hdma);
 8007e30:	68f8      	ldr	r0, [r7, #12]
 8007e32:	f7ff febc 	bl	8007bae <HAL_DMA_Abort>
    
      /* Clear the half transfer and transfer complete flags */
      regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3a:	2230      	movs	r2, #48	; 0x30
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	609a      	str	r2, [r3, #8]
    
      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e018      	b.n	8007e88 <HAL_DMA_PollForTransfer+0x1b6>
   }
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10e      	bne.n	8007e7a <HAL_DMA_PollForTransfer+0x1a8>
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << hdma->StreamIndex;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	2230      	movs	r2, #48	; 0x30
 8007e62:	409a      	lsls	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	609a      	str	r2, [r3, #8]
    
    hdma->State = HAL_DMA_STATE_READY;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8007e78:	e005      	b.n	8007e86 <HAL_DMA_PollForTransfer+0x1b4>
  }
  else
  {
    /* Clear the half transfer and transfer complete flags */
    regs->IFCR = (DMA_FLAG_HTIF0_4) << hdma->StreamIndex;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e7e:	2210      	movs	r2, #16
 8007e80:	409a      	lsls	r2, r3
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	609a      	str	r2, [r3, #8]
  }
  
  return status;
 8007e86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3728      	adds	r7, #40	; 0x28
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e9c:	4b8e      	ldr	r3, [pc, #568]	; (80080d8 <HAL_DMA_IRQHandler+0x248>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a8e      	ldr	r2, [pc, #568]	; (80080dc <HAL_DMA_IRQHandler+0x24c>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0a9b      	lsrs	r3, r3, #10
 8007ea8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eba:	2208      	movs	r2, #8
 8007ebc:	409a      	lsls	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d01a      	beq.n	8007efc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0304 	and.w	r3, r3, #4
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d013      	beq.n	8007efc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f022 0204 	bic.w	r2, r2, #4
 8007ee2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ee8:	2208      	movs	r2, #8
 8007eea:	409a      	lsls	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f00:	2201      	movs	r2, #1
 8007f02:	409a      	lsls	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4013      	ands	r3, r2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d012      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f1e:	2201      	movs	r2, #1
 8007f20:	409a      	lsls	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	f043 0202 	orr.w	r2, r3, #2
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f36:	2204      	movs	r2, #4
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d012      	beq.n	8007f68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00b      	beq.n	8007f68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f54:	2204      	movs	r2, #4
 8007f56:	409a      	lsls	r2, r3
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f60:	f043 0204 	orr.w	r2, r3, #4
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6c:	2210      	movs	r2, #16
 8007f6e:	409a      	lsls	r2, r3
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4013      	ands	r3, r2
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d043      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0308 	and.w	r3, r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d03c      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d018      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d108      	bne.n	8007fc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d024      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	e01f      	b.n	8008000 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d01b      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
 8007fd0:	e016      	b.n	8008000 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d107      	bne.n	8007ff0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0208 	bic.w	r2, r2, #8
 8007fee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d003      	beq.n	8008000 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008004:	2220      	movs	r2, #32
 8008006:	409a      	lsls	r2, r3
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 808f 	beq.w	8008130 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0310 	and.w	r3, r3, #16
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8087 	beq.w	8008130 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	2220      	movs	r2, #32
 8008028:	409a      	lsls	r2, r3
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008034:	b2db      	uxtb	r3, r3
 8008036:	2b05      	cmp	r3, #5
 8008038:	d136      	bne.n	80080a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f022 0216 	bic.w	r2, r2, #22
 8008048:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	695a      	ldr	r2, [r3, #20]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008058:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d103      	bne.n	800806a <HAL_DMA_IRQHandler+0x1da>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008066:	2b00      	cmp	r3, #0
 8008068:	d007      	beq.n	800807a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0208 	bic.w	r2, r2, #8
 8008078:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	223f      	movs	r2, #63	; 0x3f
 8008080:	409a      	lsls	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800809a:	2b00      	cmp	r3, #0
 800809c:	d07e      	beq.n	800819c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	4798      	blx	r3
        }
        return;
 80080a6:	e079      	b.n	800819c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d01d      	beq.n	80080f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10d      	bne.n	80080e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d031      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
 80080d4:	e02c      	b.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
 80080d6:	bf00      	nop
 80080d8:	20000058 	.word	0x20000058
 80080dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d023      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	4798      	blx	r3
 80080f0:	e01e      	b.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10f      	bne.n	8008120 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f022 0210 	bic.w	r2, r2, #16
 800810e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008134:	2b00      	cmp	r3, #0
 8008136:	d032      	beq.n	800819e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d022      	beq.n	800818a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2205      	movs	r2, #5
 8008148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0201 	bic.w	r2, r2, #1
 800815a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	3301      	adds	r3, #1
 8008160:	60bb      	str	r3, [r7, #8]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	429a      	cmp	r2, r3
 8008166:	d307      	bcc.n	8008178 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f003 0301 	and.w	r3, r3, #1
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1f2      	bne.n	800815c <HAL_DMA_IRQHandler+0x2cc>
 8008176:	e000      	b.n	800817a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008178:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d005      	beq.n	800819e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	4798      	blx	r3
 800819a:	e000      	b.n	800819e <HAL_DMA_IRQHandler+0x30e>
        return;
 800819c:	bf00      	nop
    }
  }
}
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	460b      	mov	r3, r1
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d101      	bne.n	80081c4 <HAL_DMA_RegisterCallback+0x20>
 80081c0:	2302      	movs	r3, #2
 80081c2:	e03c      	b.n	800823e <HAL_DMA_RegisterCallback+0x9a>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d129      	bne.n	800822c <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d829      	bhi.n	8008232 <HAL_DMA_RegisterCallback+0x8e>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <HAL_DMA_RegisterCallback+0x40>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	080081fd 	.word	0x080081fd
 80081e8:	08008205 	.word	0x08008205
 80081ec:	0800820d 	.word	0x0800820d
 80081f0:	08008215 	.word	0x08008215
 80081f4:	0800821d 	.word	0x0800821d
 80081f8:	08008225 	.word	0x08008225
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8008202:	e017      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800820a:	e013      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8008212:	e00f      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 800821a:	e00b      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8008222:	e007      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800822a:	e003      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	e000      	b.n	8008234 <HAL_DMA_RegisterCallback+0x90>
      break;
 8008232:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800823c:	7dfb      	ldrb	r3, [r7, #23]
}
 800823e:	4618      	mov	r0, r3
 8008240:	371c      	adds	r7, #28
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr

0800824a <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 800824a:	b480      	push	{r7}
 800824c:	b085      	sub	sp, #20
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8008256:	2300      	movs	r3, #0
 8008258:	73fb      	strb	r3, [r7, #15]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008260:	2b01      	cmp	r3, #1
 8008262:	d101      	bne.n	8008268 <HAL_DMA_UnRegisterCallback+0x1e>
 8008264:	2302      	movs	r3, #2
 8008266:	e052      	b.n	800830e <HAL_DMA_UnRegisterCallback+0xc4>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b01      	cmp	r3, #1
 800827a:	d141      	bne.n	8008300 <HAL_DMA_UnRegisterCallback+0xb6>
  {
    switch (CallbackID)
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	2b06      	cmp	r3, #6
 8008280:	d83b      	bhi.n	80082fa <HAL_DMA_UnRegisterCallback+0xb0>
 8008282:	a201      	add	r2, pc, #4	; (adr r2, 8008288 <HAL_DMA_UnRegisterCallback+0x3e>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082a5 	.word	0x080082a5
 800828c:	080082ad 	.word	0x080082ad
 8008290:	080082b5 	.word	0x080082b5
 8008294:	080082bd 	.word	0x080082bd
 8008298:	080082c5 	.word	0x080082c5
 800829c:	080082cd 	.word	0x080082cd
 80082a0:	080082d5 	.word	0x080082d5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80082aa:	e02b      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80082b2:	e027      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = NULL;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80082ba:	e023      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = NULL;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80082c2:	e01f      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80082ca:	e01b      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80082d2:	e017      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	63da      	str	r2, [r3, #60]	; 0x3c
      hdma->XferHalfCpltCallback = NULL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	641a      	str	r2, [r3, #64]	; 0x40
      hdma->XferM1CpltCallback = NULL;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	645a      	str	r2, [r3, #68]	; 0x44
      hdma->XferM1HalfCpltCallback = NULL;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	649a      	str	r2, [r3, #72]	; 0x48
      hdma->XferErrorCallback = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	64da      	str	r2, [r3, #76]	; 0x4c
      hdma->XferAbortCallback = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	651a      	str	r2, [r3, #80]	; 0x50
      break; 
 80082f8:	e004      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
      
    default:
      status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	73fb      	strb	r3, [r7, #15]
      break;
 80082fe:	e001      	b.n	8008304 <HAL_DMA_UnRegisterCallback+0xba>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008328:	b2db      	uxtb	r3, r3
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800836a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d108      	bne.n	800838e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68ba      	ldr	r2, [r7, #8]
 800838a:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800838c:	e007      	b.n	800839e <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	60da      	str	r2, [r3, #12]
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	3b10      	subs	r3, #16
 80083ba:	4a14      	ldr	r2, [pc, #80]	; (800840c <DMA_CalcBaseAndBitshift+0x62>)
 80083bc:	fba2 2303 	umull	r2, r3, r2, r3
 80083c0:	091b      	lsrs	r3, r3, #4
 80083c2:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083c4:	4a12      	ldr	r2, [pc, #72]	; (8008410 <DMA_CalcBaseAndBitshift+0x66>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	4413      	add	r3, r2
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d909      	bls.n	80083ec <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083e0:	f023 0303 	bic.w	r3, r3, #3
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	659a      	str	r2, [r3, #88]	; 0x58
 80083ea:	e007      	b.n	80083fc <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083f4:	f023 0303 	bic.w	r3, r3, #3
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	aaaaaaab 	.word	0xaaaaaaab
 8008410:	08051d24 	.word	0x08051d24

08008414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d11f      	bne.n	800846e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b03      	cmp	r3, #3
 8008432:	d856      	bhi.n	80084e2 <DMA_CheckFifoParam+0xce>
 8008434:	a201      	add	r2, pc, #4	; (adr r2, 800843c <DMA_CheckFifoParam+0x28>)
 8008436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843a:	bf00      	nop
 800843c:	0800844d 	.word	0x0800844d
 8008440:	0800845f 	.word	0x0800845f
 8008444:	0800844d 	.word	0x0800844d
 8008448:	080084e3 	.word	0x080084e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d046      	beq.n	80084e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800845c:	e043      	b.n	80084e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008466:	d140      	bne.n	80084ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800846c:	e03d      	b.n	80084ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699b      	ldr	r3, [r3, #24]
 8008472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008476:	d121      	bne.n	80084bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2b03      	cmp	r3, #3
 800847c:	d837      	bhi.n	80084ee <DMA_CheckFifoParam+0xda>
 800847e:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <DMA_CheckFifoParam+0x70>)
 8008480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008484:	08008495 	.word	0x08008495
 8008488:	0800849b 	.word	0x0800849b
 800848c:	08008495 	.word	0x08008495
 8008490:	080084ad 	.word	0x080084ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
      break;
 8008498:	e030      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d025      	beq.n	80084f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084aa:	e022      	b.n	80084f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084b4:	d11f      	bne.n	80084f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084ba:	e01c      	b.n	80084f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d903      	bls.n	80084ca <DMA_CheckFifoParam+0xb6>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	d003      	beq.n	80084d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084c8:	e018      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	e015      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00e      	beq.n	80084fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	73fb      	strb	r3, [r7, #15]
      break;
 80084e0:	e00b      	b.n	80084fa <DMA_CheckFifoParam+0xe6>
      break;
 80084e2:	bf00      	nop
 80084e4:	e00a      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;
 80084e6:	bf00      	nop
 80084e8:	e008      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;
 80084ea:	bf00      	nop
 80084ec:	e006      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;
 80084ee:	bf00      	nop
 80084f0:	e004      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;
 80084f2:	bf00      	nop
 80084f4:	e002      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;   
 80084f6:	bf00      	nop
 80084f8:	e000      	b.n	80084fc <DMA_CheckFifoParam+0xe8>
      break;
 80084fa:	bf00      	nop
    }
  } 
  
  return status; 
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_DMAEx_MultiBufferStart>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b086      	sub	sp, #24
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
 8008516:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008518:	2300      	movs	r3, #0
 800851a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	2b80      	cmp	r3, #128	; 0x80
 8008522:	d106      	bne.n	8008532 <HAL_DMAEx_MultiBufferStart+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f44f 7280 	mov.w	r2, #256	; 0x100
 800852a:	655a      	str	r2, [r3, #84]	; 0x54
    status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	e031      	b.n	8008596 <HAL_DMAEx_MultiBufferStart+0x8c>
  }
  else
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_DMAEx_MultiBufferStart+0x36>
 800853c:	2302      	movs	r3, #2
 800853e:	e02b      	b.n	8008598 <HAL_DMAEx_MultiBufferStart+0x8e>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    if(HAL_DMA_STATE_READY == hdma->State)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b01      	cmp	r3, #1
 8008552:	d11e      	bne.n	8008592 <HAL_DMAEx_MultiBufferStart+0x88>
    {
      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_BUSY; 
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      /* Enable the double buffer mode */
      hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800856a:	601a      	str	r2, [r3, #0]
      
      /* Configure DMA Stream destination address */
      hdma->Instance->M1AR = SecondMemAddress;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	683a      	ldr	r2, [r7, #0]
 8008572:	611a      	str	r2, [r3, #16]
      
      /* Configure the source, destination address and the data length */
      DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f001 f972 	bl	8009864 <DMA_MultiBufferSetConfig>
      
      /* Enable the peripheral */
      __HAL_DMA_ENABLE(hdma);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0201 	orr.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	e001      	b.n	8008596 <HAL_DMAEx_MultiBufferStart+0x8c>
    }
    else
    {
      /* Return error status */
      status = HAL_BUSY;
 8008592:	2302      	movs	r3, #2
 8008594:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8008596:	7dfb      	ldrb	r3, [r7, #23]
}
 8008598:	4618      	mov	r0, r3
 800859a:	3718      	adds	r7, #24
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d106      	bne.n	80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	f001 b911 	b.w	80097ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d007      	beq.n	80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d003      	beq.n	80085e0 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d105      	bne.n	80085ec <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2240      	movs	r2, #64	; 0x40
 80085e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f001 b8ff 	b.w	80097ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d102      	bne.n	80085fc <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80085f6:	2302      	movs	r3, #2
 80085f8:	f001 b8f7 	b.w	80097ea <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b01      	cmp	r3, #1
 800860e:	f041 80e5 	bne.w	80097dc <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800862e:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 f910 	bl	8009864 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	4b8d      	ldr	r3, [pc, #564]	; (8008880 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 800864c:	429a      	cmp	r2, r3
 800864e:	d960      	bls.n	8008712 <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a8b      	ldr	r2, [pc, #556]	; (8008884 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d057      	beq.n	800870a <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a8a      	ldr	r2, [pc, #552]	; (8008888 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d050      	beq.n	8008706 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a88      	ldr	r2, [pc, #544]	; (800888c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d049      	beq.n	8008702 <HAL_DMAEx_MultiBufferStart_IT+0x162>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a87      	ldr	r2, [pc, #540]	; (8008890 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d042      	beq.n	80086fe <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a85      	ldr	r2, [pc, #532]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d03a      	beq.n	80086f8 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a84      	ldr	r2, [pc, #528]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d032      	beq.n	80086f2 <HAL_DMAEx_MultiBufferStart_IT+0x152>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a82      	ldr	r2, [pc, #520]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d02a      	beq.n	80086ec <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a81      	ldr	r2, [pc, #516]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d022      	beq.n	80086e6 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a7f      	ldr	r2, [pc, #508]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01a      	beq.n	80086e0 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a7e      	ldr	r2, [pc, #504]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d012      	beq.n	80086da <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a7c      	ldr	r2, [pc, #496]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00a      	beq.n	80086d4 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a7b      	ldr	r2, [pc, #492]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d102      	bne.n	80086ce <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80086c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086cc:	e01e      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80086d2:	e01b      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086d8:	e018      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086de:	e015      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086e4:	e012      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086ea:	e00f      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086f0:	e00c      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086f6:	e009      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086fc:	e006      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80086fe:	2320      	movs	r3, #32
 8008700:	e004      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008702:	2320      	movs	r3, #32
 8008704:	e002      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8008706:	2320      	movs	r3, #32
 8008708:	e000      	b.n	800870c <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800870a:	2320      	movs	r3, #32
 800870c:	4a69      	ldr	r2, [pc, #420]	; (80088b4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800870e:	60d3      	str	r3, [r2, #12]
 8008710:	e14f      	b.n	80089b2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	4b67      	ldr	r3, [pc, #412]	; (80088b8 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 800871a:	429a      	cmp	r2, r3
 800871c:	d960      	bls.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a58      	ldr	r2, [pc, #352]	; (8008884 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d057      	beq.n	80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a56      	ldr	r2, [pc, #344]	; (8008888 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d050      	beq.n	80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a55      	ldr	r2, [pc, #340]	; (800888c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d049      	beq.n	80087d0 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a53      	ldr	r2, [pc, #332]	; (8008890 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d042      	beq.n	80087cc <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a52      	ldr	r2, [pc, #328]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d03a      	beq.n	80087c6 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a50      	ldr	r2, [pc, #320]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d032      	beq.n	80087c0 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a4f      	ldr	r2, [pc, #316]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d02a      	beq.n	80087ba <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a4d      	ldr	r2, [pc, #308]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d022      	beq.n	80087b4 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a4c      	ldr	r2, [pc, #304]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d01a      	beq.n	80087ae <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a4a      	ldr	r2, [pc, #296]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d012      	beq.n	80087a8 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a49      	ldr	r2, [pc, #292]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00a      	beq.n	80087a2 <HAL_DMAEx_MultiBufferStart_IT+0x202>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a47      	ldr	r2, [pc, #284]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d102      	bne.n	800879c <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8008796:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800879a:	e01e      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800879c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087a0:	e01b      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087a6:	e018      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087ac:	e015      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80087b2:	e012      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087b8:	e00f      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087be:	e00c      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087c4:	e009      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087ca:	e006      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087cc:	2320      	movs	r3, #32
 80087ce:	e004      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087d0:	2320      	movs	r3, #32
 80087d2:	e002      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087d4:	2320      	movs	r3, #32
 80087d6:	e000      	b.n	80087da <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80087d8:	2320      	movs	r3, #32
 80087da:	4a36      	ldr	r2, [pc, #216]	; (80088b4 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80087dc:	6093      	str	r3, [r2, #8]
 80087de:	e0e8      	b.n	80089b2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b35      	ldr	r3, [pc, #212]	; (80088bc <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80087e8:	429a      	cmp	r2, r3
 80087ea:	f240 8082 	bls.w	80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a24      	ldr	r2, [pc, #144]	; (8008884 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d078      	beq.n	80088ea <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a22      	ldr	r2, [pc, #136]	; (8008888 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d071      	beq.n	80088e6 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a21      	ldr	r2, [pc, #132]	; (800888c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d06a      	beq.n	80088e2 <HAL_DMAEx_MultiBufferStart_IT+0x342>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1f      	ldr	r2, [pc, #124]	; (8008890 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d063      	beq.n	80088de <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d05b      	beq.n	80088d8 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1c      	ldr	r2, [pc, #112]	; (8008898 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d053      	beq.n	80088d2 <HAL_DMAEx_MultiBufferStart_IT+0x332>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a1b      	ldr	r2, [pc, #108]	; (800889c <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d04b      	beq.n	80088cc <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d043      	beq.n	80088c6 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a18      	ldr	r2, [pc, #96]	; (80088a4 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d03b      	beq.n	80088c0 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a16      	ldr	r2, [pc, #88]	; (80088a8 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d012      	beq.n	8008878 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a15      	ldr	r2, [pc, #84]	; (80088ac <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00a      	beq.n	8008872 <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a13      	ldr	r2, [pc, #76]	; (80088b0 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d102      	bne.n	800886c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8008866:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800886a:	e03f      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800886c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008870:	e03c      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008872:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008876:	e039      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8008878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800887c:	e036      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800887e:	bf00      	nop
 8008880:	40026458 	.word	0x40026458
 8008884:	40026010 	.word	0x40026010
 8008888:	40026410 	.word	0x40026410
 800888c:	40026070 	.word	0x40026070
 8008890:	40026470 	.word	0x40026470
 8008894:	40026028 	.word	0x40026028
 8008898:	40026428 	.word	0x40026428
 800889c:	40026088 	.word	0x40026088
 80088a0:	40026488 	.word	0x40026488
 80088a4:	40026040 	.word	0x40026040
 80088a8:	40026440 	.word	0x40026440
 80088ac:	400260a0 	.word	0x400260a0
 80088b0:	400264a0 	.word	0x400264a0
 80088b4:	40026400 	.word	0x40026400
 80088b8:	400260b8 	.word	0x400260b8
 80088bc:	40026058 	.word	0x40026058
 80088c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80088c4:	e012      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ca:	e00f      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088d0:	e00c      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088d6:	e009      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088dc:	e006      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088de:	2320      	movs	r3, #32
 80088e0:	e004      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088e2:	2320      	movs	r3, #32
 80088e4:	e002      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088e6:	2320      	movs	r3, #32
 80088e8:	e000      	b.n	80088ec <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80088ea:	2320      	movs	r3, #32
 80088ec:	4a8c      	ldr	r2, [pc, #560]	; (8008b20 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80088ee:	60d3      	str	r3, [r2, #12]
 80088f0:	e05f      	b.n	80089b2 <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a8b      	ldr	r2, [pc, #556]	; (8008b24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d057      	beq.n	80089ac <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a89      	ldr	r2, [pc, #548]	; (8008b28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d050      	beq.n	80089a8 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a88      	ldr	r2, [pc, #544]	; (8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d049      	beq.n	80089a4 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a86      	ldr	r2, [pc, #536]	; (8008b30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d042      	beq.n	80089a0 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a85      	ldr	r2, [pc, #532]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d03a      	beq.n	800899a <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a83      	ldr	r2, [pc, #524]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d032      	beq.n	8008994 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a82      	ldr	r2, [pc, #520]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d02a      	beq.n	800898e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a80      	ldr	r2, [pc, #512]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d022      	beq.n	8008988 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a7f      	ldr	r2, [pc, #508]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d01a      	beq.n	8008982 <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a7d      	ldr	r2, [pc, #500]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d012      	beq.n	800897c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a7c      	ldr	r2, [pc, #496]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d00a      	beq.n	8008976 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a7a      	ldr	r2, [pc, #488]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d102      	bne.n	8008970 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 800896a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800896e:	e01e      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008974:	e01b      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008976:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800897a:	e018      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800897c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008980:	e015      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008986:	e012      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008988:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800898c:	e00f      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800898e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008992:	e00c      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8008994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008998:	e009      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800899a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800899e:	e006      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80089a0:	2320      	movs	r3, #32
 80089a2:	e004      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80089a4:	2320      	movs	r3, #32
 80089a6:	e002      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80089a8:	2320      	movs	r3, #32
 80089aa:	e000      	b.n	80089ae <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80089ac:	2320      	movs	r3, #32
 80089ae:	4a5c      	ldr	r2, [pc, #368]	; (8008b20 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80089b0:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	4b66      	ldr	r3, [pc, #408]	; (8008b54 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d960      	bls.n	8008a80 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a58      	ldr	r2, [pc, #352]	; (8008b24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d057      	beq.n	8008a78 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d050      	beq.n	8008a74 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a55      	ldr	r2, [pc, #340]	; (8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d049      	beq.n	8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a53      	ldr	r2, [pc, #332]	; (8008b30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d042      	beq.n	8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a52      	ldr	r2, [pc, #328]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d03a      	beq.n	8008a66 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a50      	ldr	r2, [pc, #320]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d032      	beq.n	8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a4f      	ldr	r2, [pc, #316]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d02a      	beq.n	8008a5a <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a4d      	ldr	r2, [pc, #308]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d022      	beq.n	8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a4c      	ldr	r2, [pc, #304]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d01a      	beq.n	8008a4e <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a4a      	ldr	r2, [pc, #296]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d012      	beq.n	8008a48 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a49      	ldr	r2, [pc, #292]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00a      	beq.n	8008a42 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a47      	ldr	r2, [pc, #284]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d102      	bne.n	8008a3c <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8008a36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a3a:	e01e      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008a40:	e01b      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a42:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a46:	e018      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a4c:	e015      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a52:	e012      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a58:	e00f      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	e00c      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a64:	e009      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a6a:	e006      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	e004      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a70:	2310      	movs	r3, #16
 8008a72:	e002      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a74:	2310      	movs	r3, #16
 8008a76:	e000      	b.n	8008a7a <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	4a37      	ldr	r2, [pc, #220]	; (8008b58 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8008a7c:	60d3      	str	r3, [r2, #12]
 8008a7e:	e14f      	b.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b35      	ldr	r3, [pc, #212]	; (8008b5c <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	f240 8082 	bls.w	8008b92 <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a24      	ldr	r2, [pc, #144]	; (8008b24 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d078      	beq.n	8008b8a <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a22      	ldr	r2, [pc, #136]	; (8008b28 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d071      	beq.n	8008b86 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a21      	ldr	r2, [pc, #132]	; (8008b2c <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d06a      	beq.n	8008b82 <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a1f      	ldr	r2, [pc, #124]	; (8008b30 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d063      	beq.n	8008b7e <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a1e      	ldr	r2, [pc, #120]	; (8008b34 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d05b      	beq.n	8008b78 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a1c      	ldr	r2, [pc, #112]	; (8008b38 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d053      	beq.n	8008b72 <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a1b      	ldr	r2, [pc, #108]	; (8008b3c <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d04b      	beq.n	8008b6c <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d043      	beq.n	8008b66 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a18      	ldr	r2, [pc, #96]	; (8008b44 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d03b      	beq.n	8008b60 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a16      	ldr	r2, [pc, #88]	; (8008b48 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d012      	beq.n	8008b18 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a15      	ldr	r2, [pc, #84]	; (8008b4c <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d00a      	beq.n	8008b12 <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d102      	bne.n	8008b0c <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8008b06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b0a:	e03f      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008b10:	e03c      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b12:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b16:	e039      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b1c:	e036      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b1e:	bf00      	nop
 8008b20:	40026000 	.word	0x40026000
 8008b24:	40026010 	.word	0x40026010
 8008b28:	40026410 	.word	0x40026410
 8008b2c:	40026070 	.word	0x40026070
 8008b30:	40026470 	.word	0x40026470
 8008b34:	40026028 	.word	0x40026028
 8008b38:	40026428 	.word	0x40026428
 8008b3c:	40026088 	.word	0x40026088
 8008b40:	40026488 	.word	0x40026488
 8008b44:	40026040 	.word	0x40026040
 8008b48:	40026440 	.word	0x40026440
 8008b4c:	400260a0 	.word	0x400260a0
 8008b50:	400264a0 	.word	0x400264a0
 8008b54:	40026458 	.word	0x40026458
 8008b58:	40026400 	.word	0x40026400
 8008b5c:	400260b8 	.word	0x400260b8
 8008b60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b64:	e012      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6a:	e00f      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b70:	e00c      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b76:	e009      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b7c:	e006      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b7e:	2310      	movs	r3, #16
 8008b80:	e004      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b82:	2310      	movs	r3, #16
 8008b84:	e002      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b86:	2310      	movs	r3, #16
 8008b88:	e000      	b.n	8008b8c <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8008b8a:	2310      	movs	r3, #16
 8008b8c:	4a8c      	ldr	r2, [pc, #560]	; (8008dc0 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8008b8e:	6093      	str	r3, [r2, #8]
 8008b90:	e0c6      	b.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	4b8a      	ldr	r3, [pc, #552]	; (8008dc4 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d960      	bls.n	8008c60 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a89      	ldr	r2, [pc, #548]	; (8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d057      	beq.n	8008c58 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a87      	ldr	r2, [pc, #540]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d050      	beq.n	8008c54 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a86      	ldr	r2, [pc, #536]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d049      	beq.n	8008c50 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a84      	ldr	r2, [pc, #528]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d042      	beq.n	8008c4c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a83      	ldr	r2, [pc, #524]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d03a      	beq.n	8008c46 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a81      	ldr	r2, [pc, #516]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d032      	beq.n	8008c40 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a80      	ldr	r2, [pc, #512]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d02a      	beq.n	8008c3a <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a7e      	ldr	r2, [pc, #504]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d022      	beq.n	8008c34 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a7d      	ldr	r2, [pc, #500]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d01a      	beq.n	8008c2e <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a7b      	ldr	r2, [pc, #492]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d012      	beq.n	8008c28 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a7a      	ldr	r2, [pc, #488]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00a      	beq.n	8008c22 <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a78      	ldr	r2, [pc, #480]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d102      	bne.n	8008c1c <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8008c16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c1a:	e01e      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c1c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c20:	e01b      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c26:	e018      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c2c:	e015      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c32:	e012      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c38:	e00f      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c3e:	e00c      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c44:	e009      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c4a:	e006      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c4c:	2310      	movs	r3, #16
 8008c4e:	e004      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c50:	2310      	movs	r3, #16
 8008c52:	e002      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c54:	2310      	movs	r3, #16
 8008c56:	e000      	b.n	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8008c58:	2310      	movs	r3, #16
 8008c5a:	4a67      	ldr	r2, [pc, #412]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008c5c:	60d3      	str	r3, [r2, #12]
 8008c5e:	e05f      	b.n	8008d20 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a58      	ldr	r2, [pc, #352]	; (8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d057      	beq.n	8008d1a <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a57      	ldr	r2, [pc, #348]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d050      	beq.n	8008d16 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a55      	ldr	r2, [pc, #340]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d049      	beq.n	8008d12 <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a54      	ldr	r2, [pc, #336]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d042      	beq.n	8008d0e <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a52      	ldr	r2, [pc, #328]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d03a      	beq.n	8008d08 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a51      	ldr	r2, [pc, #324]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d032      	beq.n	8008d02 <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a4f      	ldr	r2, [pc, #316]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d02a      	beq.n	8008cfc <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a4e      	ldr	r2, [pc, #312]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d022      	beq.n	8008cf6 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a4c      	ldr	r2, [pc, #304]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d01a      	beq.n	8008cf0 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4b      	ldr	r2, [pc, #300]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d012      	beq.n	8008cea <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a49      	ldr	r2, [pc, #292]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00a      	beq.n	8008ce4 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a48      	ldr	r2, [pc, #288]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d102      	bne.n	8008cde <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8008cd8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cdc:	e01e      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008cde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ce2:	e01b      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008ce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008ce8:	e018      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008cea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cee:	e015      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008cf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008cf4:	e012      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cfa:	e00f      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d00:	e00c      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d06:	e009      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d0c:	e006      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d0e:	2310      	movs	r3, #16
 8008d10:	e004      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d12:	2310      	movs	r3, #16
 8008d14:	e002      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d16:	2310      	movs	r3, #16
 8008d18:	e000      	b.n	8008d1c <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	4a36      	ldr	r2, [pc, #216]	; (8008df8 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8008d1e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	4b35      	ldr	r3, [pc, #212]	; (8008dfc <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	f240 8082 	bls.w	8008e32 <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a25      	ldr	r2, [pc, #148]	; (8008dc8 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d078      	beq.n	8008e2a <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a23      	ldr	r2, [pc, #140]	; (8008dcc <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d071      	beq.n	8008e26 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a22      	ldr	r2, [pc, #136]	; (8008dd0 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d06a      	beq.n	8008e22 <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d063      	beq.n	8008e1e <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a1f      	ldr	r2, [pc, #124]	; (8008dd8 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d05b      	beq.n	8008e18 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a1d      	ldr	r2, [pc, #116]	; (8008ddc <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d053      	beq.n	8008e12 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d04b      	beq.n	8008e0c <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a1a      	ldr	r2, [pc, #104]	; (8008de4 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d043      	beq.n	8008e06 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a19      	ldr	r2, [pc, #100]	; (8008de8 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d03b      	beq.n	8008e00 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a17      	ldr	r2, [pc, #92]	; (8008dec <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d012      	beq.n	8008db8 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a16      	ldr	r2, [pc, #88]	; (8008df0 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d00a      	beq.n	8008db2 <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a14      	ldr	r2, [pc, #80]	; (8008df4 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d102      	bne.n	8008dac <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8008da6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008daa:	e03f      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008db0:	e03c      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008db2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008db6:	e039      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008db8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008dbc:	e036      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008dbe:	bf00      	nop
 8008dc0:	40026400 	.word	0x40026400
 8008dc4:	40026058 	.word	0x40026058
 8008dc8:	40026010 	.word	0x40026010
 8008dcc:	40026410 	.word	0x40026410
 8008dd0:	40026070 	.word	0x40026070
 8008dd4:	40026470 	.word	0x40026470
 8008dd8:	40026028 	.word	0x40026028
 8008ddc:	40026428 	.word	0x40026428
 8008de0:	40026088 	.word	0x40026088
 8008de4:	40026488 	.word	0x40026488
 8008de8:	40026040 	.word	0x40026040
 8008dec:	40026440 	.word	0x40026440
 8008df0:	400260a0 	.word	0x400260a0
 8008df4:	400264a0 	.word	0x400264a0
 8008df8:	40026000 	.word	0x40026000
 8008dfc:	40026458 	.word	0x40026458
 8008e00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e04:	e012      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e0a:	e00f      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e10:	e00c      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e16:	e009      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e1c:	e006      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e1e:	2308      	movs	r3, #8
 8008e20:	e004      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e22:	2308      	movs	r3, #8
 8008e24:	e002      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e26:	2308      	movs	r3, #8
 8008e28:	e000      	b.n	8008e2c <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8008e2a:	2308      	movs	r3, #8
 8008e2c:	4a8c      	ldr	r2, [pc, #560]	; (8009060 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8008e2e:	60d3      	str	r3, [r2, #12]
 8008e30:	e14e      	b.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	4b8a      	ldr	r3, [pc, #552]	; (8009064 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d960      	bls.n	8008f00 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a89      	ldr	r2, [pc, #548]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d057      	beq.n	8008ef8 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a87      	ldr	r2, [pc, #540]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d050      	beq.n	8008ef4 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a86      	ldr	r2, [pc, #536]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d049      	beq.n	8008ef0 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a84      	ldr	r2, [pc, #528]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d042      	beq.n	8008eec <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a83      	ldr	r2, [pc, #524]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d03a      	beq.n	8008ee6 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a81      	ldr	r2, [pc, #516]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d032      	beq.n	8008ee0 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a80      	ldr	r2, [pc, #512]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d02a      	beq.n	8008eda <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a7e      	ldr	r2, [pc, #504]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d022      	beq.n	8008ed4 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a7d      	ldr	r2, [pc, #500]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d01a      	beq.n	8008ece <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a7b      	ldr	r2, [pc, #492]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d012      	beq.n	8008ec8 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a7a      	ldr	r2, [pc, #488]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00a      	beq.n	8008ec2 <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a78      	ldr	r2, [pc, #480]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d102      	bne.n	8008ebc <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8008eb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008eba:	e01e      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ebc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ec0:	e01b      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ec2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ec6:	e018      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ec8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ecc:	e015      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ece:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008ed2:	e012      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ed8:	e00f      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ede:	e00c      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ee4:	e009      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008eea:	e006      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008eec:	2308      	movs	r3, #8
 8008eee:	e004      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	e002      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	e000      	b.n	8008efa <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8008ef8:	2308      	movs	r3, #8
 8008efa:	4a59      	ldr	r2, [pc, #356]	; (8009060 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8008efc:	6093      	str	r3, [r2, #8]
 8008efe:	e0e7      	b.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	461a      	mov	r2, r3
 8008f06:	4b64      	ldr	r3, [pc, #400]	; (8009098 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	d960      	bls.n	8008fce <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a55      	ldr	r2, [pc, #340]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d057      	beq.n	8008fc6 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a54      	ldr	r2, [pc, #336]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d050      	beq.n	8008fc2 <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a52      	ldr	r2, [pc, #328]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d049      	beq.n	8008fbe <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a51      	ldr	r2, [pc, #324]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d042      	beq.n	8008fba <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a4f      	ldr	r2, [pc, #316]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d03a      	beq.n	8008fb4 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a4e      	ldr	r2, [pc, #312]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d032      	beq.n	8008fae <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a4c      	ldr	r2, [pc, #304]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d02a      	beq.n	8008fa8 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a4b      	ldr	r2, [pc, #300]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d022      	beq.n	8008fa2 <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a49      	ldr	r2, [pc, #292]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d01a      	beq.n	8008f9c <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a48      	ldr	r2, [pc, #288]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d012      	beq.n	8008f96 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a46      	ldr	r2, [pc, #280]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00a      	beq.n	8008f90 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a45      	ldr	r2, [pc, #276]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d102      	bne.n	8008f8a <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8008f84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f88:	e01e      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f8e:	e01b      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008f90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f94:	e018      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008f96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008f9a:	e015      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008f9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fa0:	e012      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fa6:	e00f      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fac:	e00c      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb2:	e009      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fb8:	e006      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fba:	2308      	movs	r3, #8
 8008fbc:	e004      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fbe:	2308      	movs	r3, #8
 8008fc0:	e002      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fc2:	2308      	movs	r3, #8
 8008fc4:	e000      	b.n	8008fc8 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8008fc6:	2308      	movs	r3, #8
 8008fc8:	4a34      	ldr	r2, [pc, #208]	; (800909c <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8008fca:	60d3      	str	r3, [r2, #12]
 8008fcc:	e080      	b.n	80090d0 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a25      	ldr	r2, [pc, #148]	; (8009068 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d078      	beq.n	80090ca <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a23      	ldr	r2, [pc, #140]	; (800906c <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d071      	beq.n	80090c6 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a22      	ldr	r2, [pc, #136]	; (8009070 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d06a      	beq.n	80090c2 <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a20      	ldr	r2, [pc, #128]	; (8009074 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d063      	beq.n	80090be <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a1f      	ldr	r2, [pc, #124]	; (8009078 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d05b      	beq.n	80090b8 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a1d      	ldr	r2, [pc, #116]	; (800907c <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d053      	beq.n	80090b2 <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d04b      	beq.n	80090ac <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a1a      	ldr	r2, [pc, #104]	; (8009084 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d043      	beq.n	80090a6 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a19      	ldr	r2, [pc, #100]	; (8009088 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d03b      	beq.n	80090a0 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a17      	ldr	r2, [pc, #92]	; (800908c <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d012      	beq.n	8009058 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a16      	ldr	r2, [pc, #88]	; (8009090 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d00a      	beq.n	8009052 <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a14      	ldr	r2, [pc, #80]	; (8009094 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d102      	bne.n	800904c <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8009046:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800904a:	e03f      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800904c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009050:	e03c      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009052:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009056:	e039      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8009058:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800905c:	e036      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800905e:	bf00      	nop
 8009060:	40026400 	.word	0x40026400
 8009064:	400260b8 	.word	0x400260b8
 8009068:	40026010 	.word	0x40026010
 800906c:	40026410 	.word	0x40026410
 8009070:	40026070 	.word	0x40026070
 8009074:	40026470 	.word	0x40026470
 8009078:	40026028 	.word	0x40026028
 800907c:	40026428 	.word	0x40026428
 8009080:	40026088 	.word	0x40026088
 8009084:	40026488 	.word	0x40026488
 8009088:	40026040 	.word	0x40026040
 800908c:	40026440 	.word	0x40026440
 8009090:	400260a0 	.word	0x400260a0
 8009094:	400264a0 	.word	0x400264a0
 8009098:	40026058 	.word	0x40026058
 800909c:	40026000 	.word	0x40026000
 80090a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80090a4:	e012      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090aa:	e00f      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b0:	e00c      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090b6:	e009      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090bc:	e006      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090be:	2308      	movs	r3, #8
 80090c0:	e004      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090c2:	2308      	movs	r3, #8
 80090c4:	e002      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090c6:	2308      	movs	r3, #8
 80090c8:	e000      	b.n	80090cc <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80090ca:	2308      	movs	r3, #8
 80090cc:	4a8a      	ldr	r2, [pc, #552]	; (80092f8 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80090ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	461a      	mov	r2, r3
 80090d6:	4b89      	ldr	r3, [pc, #548]	; (80092fc <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 80090d8:	429a      	cmp	r2, r3
 80090da:	d960      	bls.n	800919e <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a87      	ldr	r2, [pc, #540]	; (8009300 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d057      	beq.n	8009196 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a86      	ldr	r2, [pc, #536]	; (8009304 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d050      	beq.n	8009192 <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a84      	ldr	r2, [pc, #528]	; (8009308 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d049      	beq.n	800918e <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a83      	ldr	r2, [pc, #524]	; (800930c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d042      	beq.n	800918a <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a81      	ldr	r2, [pc, #516]	; (8009310 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d03a      	beq.n	8009184 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a80      	ldr	r2, [pc, #512]	; (8009314 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d032      	beq.n	800917e <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a7e      	ldr	r2, [pc, #504]	; (8009318 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d02a      	beq.n	8009178 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a7d      	ldr	r2, [pc, #500]	; (800931c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d022      	beq.n	8009172 <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a7b      	ldr	r2, [pc, #492]	; (8009320 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01a      	beq.n	800916c <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a7a      	ldr	r2, [pc, #488]	; (8009324 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d012      	beq.n	8009166 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a78      	ldr	r2, [pc, #480]	; (8009328 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d00a      	beq.n	8009160 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a77      	ldr	r2, [pc, #476]	; (800932c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d102      	bne.n	800915a <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8009154:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009158:	e01e      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800915a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800915e:	e01b      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009160:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009164:	e018      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009166:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800916a:	e015      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800916c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009170:	e012      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009172:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009176:	e00f      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009178:	f44f 7380 	mov.w	r3, #256	; 0x100
 800917c:	e00c      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800917e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009182:	e009      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009188:	e006      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800918a:	2304      	movs	r3, #4
 800918c:	e004      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800918e:	2304      	movs	r3, #4
 8009190:	e002      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009192:	2304      	movs	r3, #4
 8009194:	e000      	b.n	8009198 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8009196:	2304      	movs	r3, #4
 8009198:	4a65      	ldr	r2, [pc, #404]	; (8009330 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 800919a:	60d3      	str	r3, [r2, #12]
 800919c:	e150      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	4b63      	ldr	r3, [pc, #396]	; (8009334 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d960      	bls.n	800926c <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a54      	ldr	r2, [pc, #336]	; (8009300 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d057      	beq.n	8009264 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a52      	ldr	r2, [pc, #328]	; (8009304 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d050      	beq.n	8009260 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a51      	ldr	r2, [pc, #324]	; (8009308 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d049      	beq.n	800925c <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a4f      	ldr	r2, [pc, #316]	; (800930c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d042      	beq.n	8009258 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a4e      	ldr	r2, [pc, #312]	; (8009310 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d03a      	beq.n	8009252 <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a4c      	ldr	r2, [pc, #304]	; (8009314 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d032      	beq.n	800924c <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a4b      	ldr	r2, [pc, #300]	; (8009318 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d02a      	beq.n	8009246 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a49      	ldr	r2, [pc, #292]	; (800931c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d022      	beq.n	8009240 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a48      	ldr	r2, [pc, #288]	; (8009320 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d01a      	beq.n	800923a <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a46      	ldr	r2, [pc, #280]	; (8009324 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d012      	beq.n	8009234 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a45      	ldr	r2, [pc, #276]	; (8009328 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d00a      	beq.n	800922e <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a43      	ldr	r2, [pc, #268]	; (800932c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d102      	bne.n	8009228 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8009222:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009226:	e01e      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800922c:	e01b      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800922e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009232:	e018      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009238:	e015      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800923a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800923e:	e012      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009244:	e00f      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009246:	f44f 7380 	mov.w	r3, #256	; 0x100
 800924a:	e00c      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800924c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009250:	e009      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009256:	e006      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009258:	2304      	movs	r3, #4
 800925a:	e004      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 800925c:	2304      	movs	r3, #4
 800925e:	e002      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009260:	2304      	movs	r3, #4
 8009262:	e000      	b.n	8009266 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8009264:	2304      	movs	r3, #4
 8009266:	4a32      	ldr	r2, [pc, #200]	; (8009330 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8009268:	6093      	str	r3, [r2, #8]
 800926a:	e0e9      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	4b31      	ldr	r3, [pc, #196]	; (8009338 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8009274:	429a      	cmp	r2, r3
 8009276:	f240 8083 	bls.w	8009380 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a20      	ldr	r2, [pc, #128]	; (8009300 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d079      	beq.n	8009378 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a1e      	ldr	r2, [pc, #120]	; (8009304 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d072      	beq.n	8009374 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a1d      	ldr	r2, [pc, #116]	; (8009308 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d06b      	beq.n	8009370 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a1b      	ldr	r2, [pc, #108]	; (800930c <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d064      	beq.n	800936c <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a1a      	ldr	r2, [pc, #104]	; (8009310 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d05c      	beq.n	8009366 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a18      	ldr	r2, [pc, #96]	; (8009314 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d054      	beq.n	8009360 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a17      	ldr	r2, [pc, #92]	; (8009318 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d04c      	beq.n	800935a <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a15      	ldr	r2, [pc, #84]	; (800931c <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d044      	beq.n	8009354 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a14      	ldr	r2, [pc, #80]	; (8009320 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d03c      	beq.n	800934e <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a12      	ldr	r2, [pc, #72]	; (8009324 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d034      	beq.n	8009348 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a11      	ldr	r2, [pc, #68]	; (8009328 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d02c      	beq.n	8009342 <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a0f      	ldr	r2, [pc, #60]	; (800932c <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d124      	bne.n	800933c <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80092f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80092f6:	e040      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80092f8:	40026000 	.word	0x40026000
 80092fc:	40026458 	.word	0x40026458
 8009300:	40026010 	.word	0x40026010
 8009304:	40026410 	.word	0x40026410
 8009308:	40026070 	.word	0x40026070
 800930c:	40026470 	.word	0x40026470
 8009310:	40026028 	.word	0x40026028
 8009314:	40026428 	.word	0x40026428
 8009318:	40026088 	.word	0x40026088
 800931c:	40026488 	.word	0x40026488
 8009320:	40026040 	.word	0x40026040
 8009324:	40026440 	.word	0x40026440
 8009328:	400260a0 	.word	0x400260a0
 800932c:	400264a0 	.word	0x400264a0
 8009330:	40026400 	.word	0x40026400
 8009334:	400260b8 	.word	0x400260b8
 8009338:	40026058 	.word	0x40026058
 800933c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009340:	e01b      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009342:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009346:	e018      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009348:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800934c:	e015      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800934e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009352:	e012      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009358:	e00f      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800935a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800935e:	e00c      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009364:	e009      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800936a:	e006      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800936c:	2304      	movs	r3, #4
 800936e:	e004      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009370:	2304      	movs	r3, #4
 8009372:	e002      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009374:	2304      	movs	r3, #4
 8009376:	e000      	b.n	800937a <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8009378:	2304      	movs	r3, #4
 800937a:	4a8b      	ldr	r2, [pc, #556]	; (80095a8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800937c:	60d3      	str	r3, [r2, #12]
 800937e:	e05f      	b.n	8009440 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a89      	ldr	r2, [pc, #548]	; (80095ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d057      	beq.n	800943a <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a88      	ldr	r2, [pc, #544]	; (80095b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d050      	beq.n	8009436 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a86      	ldr	r2, [pc, #536]	; (80095b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d049      	beq.n	8009432 <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a85      	ldr	r2, [pc, #532]	; (80095b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d042      	beq.n	800942e <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a83      	ldr	r2, [pc, #524]	; (80095bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d03a      	beq.n	8009428 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a82      	ldr	r2, [pc, #520]	; (80095c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d032      	beq.n	8009422 <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a80      	ldr	r2, [pc, #512]	; (80095c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d02a      	beq.n	800941c <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a7f      	ldr	r2, [pc, #508]	; (80095c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d022      	beq.n	8009416 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a7d      	ldr	r2, [pc, #500]	; (80095cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d01a      	beq.n	8009410 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a7c      	ldr	r2, [pc, #496]	; (80095d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d012      	beq.n	800940a <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a7a      	ldr	r2, [pc, #488]	; (80095d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00a      	beq.n	8009404 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a79      	ldr	r2, [pc, #484]	; (80095d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d102      	bne.n	80093fe <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80093f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80093fc:	e01e      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80093fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009402:	e01b      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009408:	e018      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800940a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800940e:	e015      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009414:	e012      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800941a:	e00f      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800941c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009420:	e00c      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009426:	e009      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009428:	f44f 7380 	mov.w	r3, #256	; 0x100
 800942c:	e006      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800942e:	2304      	movs	r3, #4
 8009430:	e004      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009432:	2304      	movs	r3, #4
 8009434:	e002      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8009436:	2304      	movs	r3, #4
 8009438:	e000      	b.n	800943c <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800943a:	2304      	movs	r3, #4
 800943c:	4a5a      	ldr	r2, [pc, #360]	; (80095a8 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800943e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	4b65      	ldr	r3, [pc, #404]	; (80095dc <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8009448:	429a      	cmp	r2, r3
 800944a:	d95c      	bls.n	8009506 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a56      	ldr	r2, [pc, #344]	; (80095ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d053      	beq.n	80094fe <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a55      	ldr	r2, [pc, #340]	; (80095b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d04c      	beq.n	80094fa <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a53      	ldr	r2, [pc, #332]	; (80095b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d045      	beq.n	80094f6 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a52      	ldr	r2, [pc, #328]	; (80095b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d03e      	beq.n	80094f2 <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a50      	ldr	r2, [pc, #320]	; (80095bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d037      	beq.n	80094ee <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a4f      	ldr	r2, [pc, #316]	; (80095c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d030      	beq.n	80094ea <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a4d      	ldr	r2, [pc, #308]	; (80095c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d029      	beq.n	80094e6 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a4c      	ldr	r2, [pc, #304]	; (80095c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d022      	beq.n	80094e2 <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a4a      	ldr	r2, [pc, #296]	; (80095cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d01a      	beq.n	80094dc <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a49      	ldr	r2, [pc, #292]	; (80095d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d012      	beq.n	80094d6 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a47      	ldr	r2, [pc, #284]	; (80095d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d00a      	beq.n	80094d0 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a46      	ldr	r2, [pc, #280]	; (80095d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d102      	bne.n	80094ca <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80094c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094c8:	e01a      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80094ce:	e017      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094d4:	e014      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094da:	e011      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094e0:	e00e      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094e2:	2340      	movs	r3, #64	; 0x40
 80094e4:	e00c      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094e6:	2340      	movs	r3, #64	; 0x40
 80094e8:	e00a      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094ea:	2340      	movs	r3, #64	; 0x40
 80094ec:	e008      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094ee:	2340      	movs	r3, #64	; 0x40
 80094f0:	e006      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094f2:	2301      	movs	r3, #1
 80094f4:	e004      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e002      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80094fe:	2301      	movs	r3, #1
 8009500:	4a37      	ldr	r2, [pc, #220]	; (80095e0 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8009502:	60d3      	str	r3, [r2, #12]
 8009504:	e141      	b.n	800978a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	461a      	mov	r2, r3
 800950c:	4b35      	ldr	r3, [pc, #212]	; (80095e4 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800950e:	429a      	cmp	r2, r3
 8009510:	d97c      	bls.n	800960c <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a25      	ldr	r2, [pc, #148]	; (80095ac <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d073      	beq.n	8009604 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a23      	ldr	r2, [pc, #140]	; (80095b0 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d06c      	beq.n	8009600 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a22      	ldr	r2, [pc, #136]	; (80095b4 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d065      	beq.n	80095fc <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a20      	ldr	r2, [pc, #128]	; (80095b8 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d05e      	beq.n	80095f8 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a1f      	ldr	r2, [pc, #124]	; (80095bc <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d057      	beq.n	80095f4 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a1d      	ldr	r2, [pc, #116]	; (80095c0 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d050      	beq.n	80095f0 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d049      	beq.n	80095ec <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a1a      	ldr	r2, [pc, #104]	; (80095c8 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d042      	beq.n	80095e8 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a19      	ldr	r2, [pc, #100]	; (80095cc <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d01a      	beq.n	80095a2 <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d012      	beq.n	800959c <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a16      	ldr	r2, [pc, #88]	; (80095d4 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00a      	beq.n	8009596 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a14      	ldr	r2, [pc, #80]	; (80095d8 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d102      	bne.n	8009590 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 800958a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800958e:	e03a      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009594:	e037      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800959a:	e034      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800959c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095a0:	e031      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095a6:	e02e      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095a8:	40026000 	.word	0x40026000
 80095ac:	40026010 	.word	0x40026010
 80095b0:	40026410 	.word	0x40026410
 80095b4:	40026070 	.word	0x40026070
 80095b8:	40026470 	.word	0x40026470
 80095bc:	40026028 	.word	0x40026028
 80095c0:	40026428 	.word	0x40026428
 80095c4:	40026088 	.word	0x40026088
 80095c8:	40026488 	.word	0x40026488
 80095cc:	40026040 	.word	0x40026040
 80095d0:	40026440 	.word	0x40026440
 80095d4:	400260a0 	.word	0x400260a0
 80095d8:	400264a0 	.word	0x400264a0
 80095dc:	40026458 	.word	0x40026458
 80095e0:	40026400 	.word	0x40026400
 80095e4:	400260b8 	.word	0x400260b8
 80095e8:	2340      	movs	r3, #64	; 0x40
 80095ea:	e00c      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095ec:	2340      	movs	r3, #64	; 0x40
 80095ee:	e00a      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095f0:	2340      	movs	r3, #64	; 0x40
 80095f2:	e008      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	e006      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e004      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80095fc:	2301      	movs	r3, #1
 80095fe:	e002      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009600:	2301      	movs	r3, #1
 8009602:	e000      	b.n	8009606 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8009604:	2301      	movs	r3, #1
 8009606:	4a7b      	ldr	r2, [pc, #492]	; (80097f4 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8009608:	6093      	str	r3, [r2, #8]
 800960a:	e0be      	b.n	800978a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	461a      	mov	r2, r3
 8009612:	4b79      	ldr	r3, [pc, #484]	; (80097f8 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8009614:	429a      	cmp	r2, r3
 8009616:	d95c      	bls.n	80096d2 <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a77      	ldr	r2, [pc, #476]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d053      	beq.n	80096ca <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a76      	ldr	r2, [pc, #472]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d04c      	beq.n	80096c6 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a74      	ldr	r2, [pc, #464]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d045      	beq.n	80096c2 <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a73      	ldr	r2, [pc, #460]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d03e      	beq.n	80096be <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a71      	ldr	r2, [pc, #452]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d037      	beq.n	80096ba <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a70      	ldr	r2, [pc, #448]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d030      	beq.n	80096b6 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a6e      	ldr	r2, [pc, #440]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d029      	beq.n	80096b2 <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a6d      	ldr	r2, [pc, #436]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d022      	beq.n	80096ae <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a6b      	ldr	r2, [pc, #428]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d01a      	beq.n	80096a8 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a6a      	ldr	r2, [pc, #424]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d012      	beq.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a68      	ldr	r2, [pc, #416]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00a      	beq.n	800969c <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a67      	ldr	r2, [pc, #412]	; (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d102      	bne.n	8009696 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8009690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009694:	e01a      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8009696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800969a:	e017      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800969c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a0:	e014      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096a6:	e011      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80096ac:	e00e      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096ae:	2340      	movs	r3, #64	; 0x40
 80096b0:	e00c      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096b2:	2340      	movs	r3, #64	; 0x40
 80096b4:	e00a      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096b6:	2340      	movs	r3, #64	; 0x40
 80096b8:	e008      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096ba:	2340      	movs	r3, #64	; 0x40
 80096bc:	e006      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096be:	2301      	movs	r3, #1
 80096c0:	e004      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e002      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096c6:	2301      	movs	r3, #1
 80096c8:	e000      	b.n	80096cc <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80096ca:	2301      	movs	r3, #1
 80096cc:	4a57      	ldr	r2, [pc, #348]	; (800982c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80096ce:	60d3      	str	r3, [r2, #12]
 80096d0:	e05b      	b.n	800978a <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a49      	ldr	r2, [pc, #292]	; (80097fc <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d053      	beq.n	8009784 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a47      	ldr	r2, [pc, #284]	; (8009800 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d04c      	beq.n	8009780 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a46      	ldr	r2, [pc, #280]	; (8009804 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d045      	beq.n	800977c <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a44      	ldr	r2, [pc, #272]	; (8009808 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d03e      	beq.n	8009778 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a43      	ldr	r2, [pc, #268]	; (800980c <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d037      	beq.n	8009774 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a41      	ldr	r2, [pc, #260]	; (8009810 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d030      	beq.n	8009770 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a40      	ldr	r2, [pc, #256]	; (8009814 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d029      	beq.n	800976c <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a3e      	ldr	r2, [pc, #248]	; (8009818 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d022      	beq.n	8009768 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a3d      	ldr	r2, [pc, #244]	; (800981c <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d01a      	beq.n	8009762 <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a3b      	ldr	r2, [pc, #236]	; (8009820 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d012      	beq.n	800975c <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a3a      	ldr	r2, [pc, #232]	; (8009824 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d00a      	beq.n	8009756 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a38      	ldr	r2, [pc, #224]	; (8009828 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d102      	bne.n	8009750 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 800974a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800974e:	e01a      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009754:	e017      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800975a:	e014      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800975c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009760:	e011      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009762:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009766:	e00e      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009768:	2340      	movs	r3, #64	; 0x40
 800976a:	e00c      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	e00a      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009770:	2340      	movs	r3, #64	; 0x40
 8009772:	e008      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009774:	2340      	movs	r3, #64	; 0x40
 8009776:	e006      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009778:	2301      	movs	r3, #1
 800977a:	e004      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800977c:	2301      	movs	r3, #1
 800977e:	e002      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8009784:	2301      	movs	r3, #1
 8009786:	4a29      	ldr	r2, [pc, #164]	; (800982c <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8009788:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f042 0216 	orr.w	r2, r2, #22
 8009798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	695a      	ldr	r2, [r3, #20]
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d007      	beq.n	80097ca <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0208 	orr.w	r2, r2, #8
 80097c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f042 0201 	orr.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	e005      	b.n	80097e8 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
 80097e6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80097e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40026400 	.word	0x40026400
 80097f8:	40026058 	.word	0x40026058
 80097fc:	40026010 	.word	0x40026010
 8009800:	40026410 	.word	0x40026410
 8009804:	40026070 	.word	0x40026070
 8009808:	40026470 	.word	0x40026470
 800980c:	40026028 	.word	0x40026028
 8009810:	40026428 	.word	0x40026428
 8009814:	40026088 	.word	0x40026088
 8009818:	40026488 	.word	0x40026488
 800981c:	40026040 	.word	0x40026040
 8009820:	40026440 	.word	0x40026440
 8009824:	400260a0 	.word	0x400260a0
 8009828:	400264a0 	.word	0x400264a0
 800982c:	40026000 	.word	0x40026000

08009830 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	4613      	mov	r3, r2
 800983c:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	60da      	str	r2, [r3, #12]
 800984c:	e003      	b.n	8009856 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3714      	adds	r7, #20
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	683a      	ldr	r2, [r7, #0]
 8009878:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	2b40      	cmp	r3, #64	; 0x40
 8009880:	d108      	bne.n	8009894 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009892:	e007      	b.n	80098a4 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	60da      	str	r2, [r3, #12]
}
 80098a4:	bf00      	nop
 80098a6:	3714      	adds	r7, #20
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr

080098b0 <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b087      	sub	sp, #28
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_EXTI_SetConfigLine+0x16>
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_EXTI_SetConfigLine+0x1a>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e08f      	b.n	80099ea <HAL_EXTI_SetConfigLine+0x13a>
  /* Check parameters */
  assert_param(IS_EXTI_LINE(pExtiConfig->Line));
  assert_param(IS_EXTI_MODE(pExtiConfig->Mode));

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 031f 	and.w	r3, r3, #31
 80098da:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 80098dc:	2201      	movs	r2, #1
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	fa02 f303 	lsl.w	r3, r2, r3
 80098e4:	613b      	str	r3, [r7, #16]

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d052      	beq.n	8009998 <HAL_EXTI_SetConfigLine+0xe8>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d006      	beq.n	800990c <HAL_EXTI_SetConfigLine+0x5c>
    {
      EXTI->RTSR |= maskline;
 80098fe:	4b3e      	ldr	r3, [pc, #248]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 8009900:	689a      	ldr	r2, [r3, #8]
 8009902:	493d      	ldr	r1, [pc, #244]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4313      	orrs	r3, r2
 8009908:	608b      	str	r3, [r1, #8]
 800990a:	e006      	b.n	800991a <HAL_EXTI_SetConfigLine+0x6a>
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 800990c:	4b3a      	ldr	r3, [pc, #232]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	43db      	mvns	r3, r3
 8009914:	4938      	ldr	r1, [pc, #224]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 8009916:	4013      	ands	r3, r2
 8009918:	608b      	str	r3, [r1, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d006      	beq.n	8009934 <HAL_EXTI_SetConfigLine+0x84>
    {
      EXTI->FTSR |= maskline;
 8009926:	4b34      	ldr	r3, [pc, #208]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 8009928:	68da      	ldr	r2, [r3, #12]
 800992a:	4933      	ldr	r1, [pc, #204]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	4313      	orrs	r3, r2
 8009930:	60cb      	str	r3, [r1, #12]
 8009932:	e006      	b.n	8009942 <HAL_EXTI_SetConfigLine+0x92>
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8009934:	4b30      	ldr	r3, [pc, #192]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 8009936:	68da      	ldr	r2, [r3, #12]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	43db      	mvns	r3, r3
 800993c:	492e      	ldr	r1, [pc, #184]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 800993e:	4013      	ands	r3, r2
 8009940:	60cb      	str	r3, [r1, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800994a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800994e:	d123      	bne.n	8009998 <HAL_EXTI_SetConfigLine+0xe8>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009950:	4a2a      	ldr	r2, [pc, #168]	; (80099fc <HAL_EXTI_SetConfigLine+0x14c>)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	089b      	lsrs	r3, r3, #2
 8009956:	3302      	adds	r3, #2
 8009958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800995c:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f003 0303 	and.w	r3, r3, #3
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	220f      	movs	r2, #15
 8009968:	fa02 f303 	lsl.w	r3, r2, r3
 800996c:	43db      	mvns	r3, r3
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	4013      	ands	r3, r2
 8009972:	60fb      	str	r3, [r7, #12]
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	f003 0303 	and.w	r3, r3, #3
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	fa02 f303 	lsl.w	r3, r2, r3
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	4313      	orrs	r3, r2
 8009988:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 800998a:	491c      	ldr	r1, [pc, #112]	; (80099fc <HAL_EXTI_SetConfigLine+0x14c>)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	089b      	lsrs	r3, r3, #2
 8009990:	3302      	adds	r3, #2
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	f003 0301 	and.w	r3, r3, #1
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d006      	beq.n	80099b2 <HAL_EXTI_SetConfigLine+0x102>
  {
    EXTI->IMR |= maskline;
 80099a4:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	4913      	ldr	r1, [pc, #76]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	600b      	str	r3, [r1, #0]
 80099b0:	e006      	b.n	80099c0 <HAL_EXTI_SetConfigLine+0x110>
  }
  else
  {
    EXTI->IMR &= ~maskline;
 80099b2:	4b11      	ldr	r3, [pc, #68]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	43db      	mvns	r3, r3
 80099ba:	490f      	ldr	r1, [pc, #60]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099bc:	4013      	ands	r3, r2
 80099be:	600b      	str	r3, [r1, #0]
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d006      	beq.n	80099da <HAL_EXTI_SetConfigLine+0x12a>
  {
    EXTI->EMR |= maskline;
 80099cc:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4909      	ldr	r1, [pc, #36]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	604b      	str	r3, [r1, #4]
 80099d8:	e006      	b.n	80099e8 <HAL_EXTI_SetConfigLine+0x138>
  }
  else
  {
    EXTI->EMR &= ~maskline;
 80099da:	4b07      	ldr	r3, [pc, #28]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099dc:	685a      	ldr	r2, [r3, #4]
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	43db      	mvns	r3, r3
 80099e2:	4905      	ldr	r1, [pc, #20]	; (80099f8 <HAL_EXTI_SetConfigLine+0x148>)
 80099e4:	4013      	ands	r3, r2
 80099e6:	604b      	str	r3, [r1, #4]
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	40013c00 	.word	0x40013c00
 80099fc:	40013800 	.word	0x40013800

08009a00 <HAL_EXTI_GetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on structure to store Exti configuration.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <HAL_EXTI_GetConfigLine+0x16>
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_EXTI_GetConfigLine+0x1a>
  {
    return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e061      	b.n	8009ade <HAL_EXTI_GetConfigLine+0xde>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* Store handle line number to configuration structure */
  pExtiConfig->Line = hexti->Line;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	601a      	str	r2, [r3, #0]

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f003 031f 	and.w	r3, r3, #31
 8009a2a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	fa02 f303 	lsl.w	r3, r2, r3
 8009a34:	613b      	str	r3, [r7, #16]

  /* 1] Get core mode : interrupt */

  /* Check if selected line is enable */
  if ((EXTI->IMR & maskline) != 0x00u)
 8009a36:	4b2d      	ldr	r3, [pc, #180]	; (8009aec <HAL_EXTI_GetConfigLine+0xec>)
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <HAL_EXTI_GetConfigLine+0x4a>
  {
    pExtiConfig->Mode = EXTI_MODE_INTERRUPT;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2201      	movs	r2, #1
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	e002      	b.n	8009a50 <HAL_EXTI_GetConfigLine+0x50>
  }
  else
  {
    pExtiConfig->Mode = EXTI_MODE_NONE;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	605a      	str	r2, [r3, #4]
  }

  /* Get event mode */
  /* Check if selected line is enable */
  if ((EXTI->EMR & maskline) != 0x00u)
 8009a50:	4b26      	ldr	r3, [pc, #152]	; (8009aec <HAL_EXTI_GetConfigLine+0xec>)
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	4013      	ands	r3, r2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d005      	beq.n	8009a68 <HAL_EXTI_GetConfigLine+0x68>
  {
    pExtiConfig->Mode |= EXTI_MODE_EVENT;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	f043 0202 	orr.w	r2, r3, #2
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	605a      	str	r2, [r3, #4]
  }

  /* Get default Trigger and GPIOSel configuration */
  pExtiConfig->Trigger = EXTI_TRIGGER_NONE;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	609a      	str	r2, [r3, #8]
  pExtiConfig->GPIOSel = 0x00u;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	2200      	movs	r2, #0
 8009a72:	60da      	str	r2, [r3, #12]

  /* 2] Get trigger for configurable lines : rising */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02d      	beq.n	8009adc <HAL_EXTI_GetConfigLine+0xdc>
  {
    /* Check if configuration of selected line is enable */
    if ((EXTI->RTSR & maskline) != 0x00u)
 8009a80:	4b1a      	ldr	r3, [pc, #104]	; (8009aec <HAL_EXTI_GetConfigLine+0xec>)
 8009a82:	689a      	ldr	r2, [r3, #8]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	4013      	ands	r3, r2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <HAL_EXTI_GetConfigLine+0x92>
    {
      pExtiConfig->Trigger = EXTI_TRIGGER_RISING;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	609a      	str	r2, [r3, #8]
    }

    /* Get falling configuration */
    /* Check if configuration of selected line is enable */
    if ((EXTI->FTSR & maskline) != 0x00u)
 8009a92:	4b16      	ldr	r3, [pc, #88]	; (8009aec <HAL_EXTI_GetConfigLine+0xec>)
 8009a94:	68da      	ldr	r2, [r3, #12]
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d005      	beq.n	8009aaa <HAL_EXTI_GetConfigLine+0xaa>
    {
      pExtiConfig->Trigger |= EXTI_TRIGGER_FALLING;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	689b      	ldr	r3, [r3, #8]
 8009aa2:	f043 0202 	orr.w	r2, r3, #2
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	609a      	str	r2, [r3, #8]
    }

    /* Get Gpio port selection for gpio lines */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009ab2:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009ab6:	d111      	bne.n	8009adc <HAL_EXTI_GetConfigLine+0xdc>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009ab8:	4a0d      	ldr	r2, [pc, #52]	; (8009af0 <HAL_EXTI_GetConfigLine+0xf0>)
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	089b      	lsrs	r3, r3, #2
 8009abe:	3302      	adds	r3, #2
 8009ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac4:	60fb      	str	r3, [r7, #12]
      pExtiConfig->GPIOSel = ((regval << (SYSCFG_EXTICR1_EXTI1_Pos * (3uL - (linepos & 0x03u)))) >> 24);
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	f003 0303 	and.w	r3, r3, #3
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	0e1a      	lsrs	r2, r3, #24
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	60da      	str	r2, [r3, #12]
    }
  }

  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40013c00 	.word	0x40013c00
 8009af0:	40013800 	.word	0x40013800

08009af4 <HAL_EXTI_ClearConfigLine>:
  * @brief  Clear whole configuration of a dedicated Exti line.
  * @param  hexti Exti handle.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_ClearConfigLine(EXTI_HandleTypeDef *hexti)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t linepos;
  uint32_t maskline;

  /* Check null pointer */
  if (hexti == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_EXTI_ClearConfigLine+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e04c      	b.n	8009ba0 <HAL_EXTI_ClearConfigLine+0xac>

  /* Check the parameter */
  assert_param(IS_EXTI_LINE(hexti->Line));

  /* compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 031f 	and.w	r3, r3, #31
 8009b0e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009b10:	2201      	movs	r2, #1
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	fa02 f303 	lsl.w	r3, r2, r3
 8009b18:	613b      	str	r3, [r7, #16]

  /* 1] Clear interrupt mode */
  EXTI->IMR = (EXTI->IMR & ~maskline);
 8009b1a:	4b24      	ldr	r3, [pc, #144]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	43db      	mvns	r3, r3
 8009b22:	4922      	ldr	r1, [pc, #136]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b24:	4013      	ands	r3, r2
 8009b26:	600b      	str	r3, [r1, #0]

  /* 2] Clear event mode */
  EXTI->EMR = (EXTI->EMR & ~maskline);
 8009b28:	4b20      	ldr	r3, [pc, #128]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	43db      	mvns	r3, r3
 8009b30:	491e      	ldr	r1, [pc, #120]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	604b      	str	r3, [r1, #4]

  /* 3] Clear triggers in case of configurable lines */
  if ((hexti->Line & EXTI_CONFIG) != 0x00u)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d02d      	beq.n	8009b9e <HAL_EXTI_ClearConfigLine+0xaa>
  {
    EXTI->RTSR = (EXTI->RTSR & ~maskline);
 8009b42:	4b1a      	ldr	r3, [pc, #104]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b44:	689a      	ldr	r2, [r3, #8]
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	43db      	mvns	r3, r3
 8009b4a:	4918      	ldr	r1, [pc, #96]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b4c:	4013      	ands	r3, r2
 8009b4e:	608b      	str	r3, [r1, #8]
    EXTI->FTSR = (EXTI->FTSR & ~maskline);
 8009b50:	4b16      	ldr	r3, [pc, #88]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b52:	68da      	ldr	r2, [r3, #12]
 8009b54:	693b      	ldr	r3, [r7, #16]
 8009b56:	43db      	mvns	r3, r3
 8009b58:	4914      	ldr	r1, [pc, #80]	; (8009bac <HAL_EXTI_ClearConfigLine+0xb8>)
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	60cb      	str	r3, [r1, #12]

    /* Get Gpio port selection for gpio lines */
    if ((hexti->Line & EXTI_GPIO) == EXTI_GPIO)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8009b66:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8009b6a:	d118      	bne.n	8009b9e <HAL_EXTI_ClearConfigLine+0xaa>
    {
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
 8009b6c:	4a10      	ldr	r2, [pc, #64]	; (8009bb0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	089b      	lsrs	r3, r3, #2
 8009b72:	3302      	adds	r3, #2
 8009b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b78:	60fb      	str	r3, [r7, #12]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	220f      	movs	r2, #15
 8009b84:	fa02 f303 	lsl.w	r3, r2, r3
 8009b88:	43db      	mvns	r3, r3
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8009b90:	4907      	ldr	r1, [pc, #28]	; (8009bb0 <HAL_EXTI_ClearConfigLine+0xbc>)
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	089b      	lsrs	r3, r3, #2
 8009b96:	3302      	adds	r3, #2
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    }
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	371c      	adds	r7, #28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr
 8009bac:	40013c00 	.word	0x40013c00
 8009bb0:	40013800 	.word	0x40013800

08009bb4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b087      	sub	sp, #28
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	607a      	str	r2, [r7, #4]
 8009bc0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d103      	bne.n	8009bd4 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	605a      	str	r2, [r3, #4]
      break;
 8009bd2:	e002      	b.n	8009bda <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009bd8:	bf00      	nop
  }

  return status;
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	371c      	adds	r7, #28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e003      	b.n	8009c04 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8009c02:	2300      	movs	r3, #0
  }
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	2201      	movs	r2, #1
 8009c22:	fa02 f303 	lsl.w	r3, r2, r3
 8009c26:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <HAL_EXTI_IRQHandler+0x44>)
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8009c38:	4a06      	ldr	r2, [pc, #24]	; (8009c54 <HAL_EXTI_IRQHandler+0x44>)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d002      	beq.n	8009c4c <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	4798      	blx	r3
    }
  }
}
 8009c4c:	bf00      	nop
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	40013c00 	.word	0x40013c00

08009c58 <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b087      	sub	sp, #28
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 031f 	and.w	r3, r3, #31
 8009c6a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	fa02 f303 	lsl.w	r3, r2, r3
 8009c74:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 8009c76:	4b07      	ldr	r3, [pc, #28]	; (8009c94 <HAL_EXTI_GetPending+0x3c>)
 8009c78:	695a      	ldr	r2, [r3, #20]
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	401a      	ands	r2, r3
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	fa22 f303 	lsr.w	r3, r2, r3
 8009c84:	60fb      	str	r3, [r7, #12]
  return regval;
 8009c86:	68fb      	ldr	r3, [r7, #12]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr
 8009c94:	40013c00 	.word	0x40013c00

08009c98 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 031f 	and.w	r3, r3, #31
 8009caa:	2201      	movs	r2, #1
 8009cac:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8009cb2:	4a04      	ldr	r2, [pc, #16]	; (8009cc4 <HAL_EXTI_ClearPending+0x2c>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6153      	str	r3, [r2, #20]
}
 8009cb8:	bf00      	nop
 8009cba:	3714      	adds	r7, #20
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	40013c00 	.word	0x40013c00

08009cc8 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 031f 	and.w	r3, r3, #31
 8009cd8:	2201      	movs	r2, #1
 8009cda:	fa02 f303 	lsl.w	r3, r2, r3
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Generate Software interrupt */
  EXTI->SWIER = maskline;
 8009ce0:	4a04      	ldr	r2, [pc, #16]	; (8009cf4 <HAL_EXTI_GenerateSWI+0x2c>)
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6113      	str	r3, [r2, #16]
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	40013c00 	.word	0x40013c00

08009cf8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b086      	sub	sp, #24
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009d0a:	4b23      	ldr	r3, [pc, #140]	; (8009d98 <HAL_FLASH_Program+0xa0>)
 8009d0c:	7e1b      	ldrb	r3, [r3, #24]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d101      	bne.n	8009d16 <HAL_FLASH_Program+0x1e>
 8009d12:	2302      	movs	r3, #2
 8009d14:	e03b      	b.n	8009d8e <HAL_FLASH_Program+0x96>
 8009d16:	4b20      	ldr	r3, [pc, #128]	; (8009d98 <HAL_FLASH_Program+0xa0>)
 8009d18:	2201      	movs	r2, #1
 8009d1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d20:	f000 f9be 	bl	800a0a0 <FLASH_WaitForLastOperation>
 8009d24:	4603      	mov	r3, r0
 8009d26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d12b      	bne.n	8009d86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d105      	bne.n	8009d40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009d34:	783b      	ldrb	r3, [r7, #0]
 8009d36:	4619      	mov	r1, r3
 8009d38:	68b8      	ldr	r0, [r7, #8]
 8009d3a:	f000 fa69 	bl	800a210 <FLASH_Program_Byte>
 8009d3e:	e016      	b.n	8009d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d105      	bne.n	8009d52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009d46:	883b      	ldrh	r3, [r7, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	68b8      	ldr	r0, [r7, #8]
 8009d4c:	f000 fa3c 	bl	800a1c8 <FLASH_Program_HalfWord>
 8009d50:	e00d      	b.n	8009d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d105      	bne.n	8009d64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f000 fa11 	bl	800a184 <FLASH_Program_Word>
 8009d62:	e004      	b.n	8009d6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d68:	68b8      	ldr	r0, [r7, #8]
 8009d6a:	f000 f9d9 	bl	800a120 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d72:	f000 f995 	bl	800a0a0 <FLASH_WaitForLastOperation>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009d7a:	4b08      	ldr	r3, [pc, #32]	; (8009d9c <HAL_FLASH_Program+0xa4>)
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	4a07      	ldr	r2, [pc, #28]	; (8009d9c <HAL_FLASH_Program+0xa4>)
 8009d80:	f023 0301 	bic.w	r3, r3, #1
 8009d84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009d86:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <HAL_FLASH_Program+0xa0>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	20000ddc 	.word	0x20000ddc
 8009d9c:	40023c00 	.word	0x40023c00

08009da0 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8009dae:	2300      	movs	r3, #0
 8009db0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009db2:	4b20      	ldr	r3, [pc, #128]	; (8009e34 <HAL_FLASH_Program_IT+0x94>)
 8009db4:	7e1b      	ldrb	r3, [r3, #24]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d101      	bne.n	8009dbe <HAL_FLASH_Program_IT+0x1e>
 8009dba:	2302      	movs	r3, #2
 8009dbc:	e035      	b.n	8009e2a <HAL_FLASH_Program_IT+0x8a>
 8009dbe:	4b1d      	ldr	r3, [pc, #116]	; (8009e34 <HAL_FLASH_Program_IT+0x94>)
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8009dc4:	4b1c      	ldr	r3, [pc, #112]	; (8009e38 <HAL_FLASH_Program_IT+0x98>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	4a1b      	ldr	r2, [pc, #108]	; (8009e38 <HAL_FLASH_Program_IT+0x98>)
 8009dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dce:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8009dd0:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <HAL_FLASH_Program_IT+0x98>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	4a18      	ldr	r2, [pc, #96]	; (8009e38 <HAL_FLASH_Program_IT+0x98>)
 8009dd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009dda:	6113      	str	r3, [r2, #16]

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 8009ddc:	4b15      	ldr	r3, [pc, #84]	; (8009e34 <HAL_FLASH_Program_IT+0x94>)
 8009dde:	2203      	movs	r2, #3
 8009de0:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 8009de2:	4a14      	ldr	r2, [pc, #80]	; (8009e34 <HAL_FLASH_Program_IT+0x94>)
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	6153      	str	r3, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d105      	bne.n	8009dfa <HAL_FLASH_Program_IT+0x5a>
  {
    /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009dee:	783b      	ldrb	r3, [r7, #0]
 8009df0:	4619      	mov	r1, r3
 8009df2:	68b8      	ldr	r0, [r7, #8]
 8009df4:	f000 fa0c 	bl	800a210 <FLASH_Program_Byte>
 8009df8:	e016      	b.n	8009e28 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d105      	bne.n	8009e0c <HAL_FLASH_Program_IT+0x6c>
  {
    /*Program halfword (16-bit) at a specified address.*/
    FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009e00:	883b      	ldrh	r3, [r7, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	68b8      	ldr	r0, [r7, #8]
 8009e06:	f000 f9df 	bl	800a1c8 <FLASH_Program_HalfWord>
 8009e0a:	e00d      	b.n	8009e28 <HAL_FLASH_Program_IT+0x88>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d105      	bne.n	8009e1e <HAL_FLASH_Program_IT+0x7e>
  {
    /*Program word (32-bit) at a specified address.*/
    FLASH_Program_Word(Address, (uint32_t) Data);
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	4619      	mov	r1, r3
 8009e16:	68b8      	ldr	r0, [r7, #8]
 8009e18:	f000 f9b4 	bl	800a184 <FLASH_Program_Word>
 8009e1c:	e004      	b.n	8009e28 <HAL_FLASH_Program_IT+0x88>
  }
  else
  {
    /*Program double word (64-bit) at a specified address.*/
    FLASH_Program_DoubleWord(Address, Data);
 8009e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e22:	68b8      	ldr	r0, [r7, #8]
 8009e24:	f000 f97c 	bl	800a120 <FLASH_Program_DoubleWord>
  }

  return status;
 8009e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000ddc 	.word	0x20000ddc
 8009e38:	40023c00 	.word	0x40023c00

08009e3c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b082      	sub	sp, #8
 8009e40:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8009e42:	2300      	movs	r3, #0
 8009e44:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009e46:	4b4b      	ldr	r3, [pc, #300]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d020      	beq.n	8009e94 <HAL_FLASH_IRQHandler+0x58>
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009e52:	4b49      	ldr	r3, [pc, #292]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d107      	bne.n	8009e6c <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8009e5c:	4b46      	ldr	r3, [pc, #280]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8009e62:	4b45      	ldr	r3, [pc, #276]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	60da      	str	r2, [r3, #12]
 8009e6a:	e00b      	b.n	8009e84 <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8009e6c:	4b42      	ldr	r3, [pc, #264]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d103      	bne.n	8009e7e <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8009e76:	4b40      	ldr	r3, [pc, #256]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	607b      	str	r3, [r7, #4]
 8009e7c:	e002      	b.n	8009e84 <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8009e7e:	4b3e      	ldr	r3, [pc, #248]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e80:	695b      	ldr	r3, [r3, #20]
 8009e82:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8009e84:	f000 f9e6 	bl	800a254 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f881 	bl	8009f90 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009e8e:	4b3a      	ldr	r3, [pc, #232]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009e94:	4b37      	ldr	r3, [pc, #220]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d04a      	beq.n	8009f36 <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009ea0:	4b34      	ldr	r3, [pc, #208]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8009ea6:	4b34      	ldr	r3, [pc, #208]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d12d      	bne.n	8009f0c <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8009eb0:	4b31      	ldr	r3, [pc, #196]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	4a30      	ldr	r2, [pc, #192]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009eb8:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8009eba:	4b2f      	ldr	r3, [pc, #188]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d015      	beq.n	8009eee <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8009ec2:	4b2d      	ldr	r3, [pc, #180]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 f857 	bl	8009f7c <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8009ece:	4b2a      	ldr	r3, [pc, #168]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a28      	ldr	r2, [pc, #160]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ed6:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8009ed8:	4b27      	ldr	r3, [pc, #156]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8009ede:	4b26      	ldr	r3, [pc, #152]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ee0:	7a1b      	ldrb	r3, [r3, #8]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 fb84 	bl	800a5f4 <FLASH_Erase_Sector>
 8009eec:	e023      	b.n	8009f36 <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8009eee:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef2:	607b      	str	r3, [r7, #4]
 8009ef4:	4a20      	ldr	r2, [pc, #128]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009efa:	4b1f      	ldr	r3, [pc, #124]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009f00:	f000 fcb6 	bl	800a870 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f839 	bl	8009f7c <HAL_FLASH_EndOfOperationCallback>
 8009f0a:	e014      	b.n	8009f36 <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8009f0c:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d107      	bne.n	8009f26 <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8009f16:	f000 fcab 	bl	800a870 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8009f1a:	4b17      	ldr	r3, [pc, #92]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f1c:	691b      	ldr	r3, [r3, #16]
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 f82c 	bl	8009f7c <HAL_FLASH_EndOfOperationCallback>
 8009f24:	e004      	b.n	8009f30 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8009f26:	4b14      	ldr	r3, [pc, #80]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f826 	bl	8009f7c <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8009f36:	4b10      	ldr	r3, [pc, #64]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d114      	bne.n	8009f6a <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8009f40:	4b0c      	ldr	r3, [pc, #48]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f4a:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	4a08      	ldr	r2, [pc, #32]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f56:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	4a05      	ldr	r2, [pc, #20]	; (8009f74 <HAL_FLASH_IRQHandler+0x138>)
 8009f5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009f62:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8009f64:	4b04      	ldr	r3, [pc, #16]	; (8009f78 <HAL_FLASH_IRQHandler+0x13c>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	761a      	strb	r2, [r3, #24]
  }
}
 8009f6a:	bf00      	nop
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	40023c00 	.word	0x40023c00
 8009f78:	20000ddc 	.word	0x20000ddc

08009f7c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <HAL_FLASH_Unlock+0x38>)
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	da0b      	bge.n	8009fce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009fb6:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <HAL_FLASH_Unlock+0x38>)
 8009fb8:	4a09      	ldr	r2, [pc, #36]	; (8009fe0 <HAL_FLASH_Unlock+0x3c>)
 8009fba:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009fbc:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <HAL_FLASH_Unlock+0x38>)
 8009fbe:	4a09      	ldr	r2, [pc, #36]	; (8009fe4 <HAL_FLASH_Unlock+0x40>)
 8009fc0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009fc2:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <HAL_FLASH_Unlock+0x38>)
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	da01      	bge.n	8009fce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009fce:	79fb      	ldrb	r3, [r7, #7]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	40023c00 	.word	0x40023c00
 8009fe0:	45670123 	.word	0x45670123
 8009fe4:	cdef89ab 	.word	0xcdef89ab

08009fe8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009fec:	4b05      	ldr	r3, [pc, #20]	; (800a004 <HAL_FLASH_Lock+0x1c>)
 8009fee:	691b      	ldr	r3, [r3, #16]
 8009ff0:	4a04      	ldr	r2, [pc, #16]	; (800a004 <HAL_FLASH_Lock+0x1c>)
 8009ff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009ff6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr
 800a004:	40023c00 	.word	0x40023c00

0800a008 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800a008:	b480      	push	{r7}
 800a00a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800a00c:	4b09      	ldr	r3, [pc, #36]	; (800a034 <HAL_FLASH_OB_Unlock+0x2c>)
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d007      	beq.n	800a028 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800a018:	4b06      	ldr	r3, [pc, #24]	; (800a034 <HAL_FLASH_OB_Unlock+0x2c>)
 800a01a:	4a07      	ldr	r2, [pc, #28]	; (800a038 <HAL_FLASH_OB_Unlock+0x30>)
 800a01c:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <HAL_FLASH_OB_Unlock+0x2c>)
 800a020:	4a06      	ldr	r2, [pc, #24]	; (800a03c <HAL_FLASH_OB_Unlock+0x34>)
 800a022:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 800a024:	2300      	movs	r3, #0
 800a026:	e000      	b.n	800a02a <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	40023c00 	.word	0x40023c00
 800a038:	08192a3b 	.word	0x08192a3b
 800a03c:	4c5d6e7f 	.word	0x4c5d6e7f

0800a040 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800a044:	4b05      	ldr	r3, [pc, #20]	; (800a05c <HAL_FLASH_OB_Lock+0x1c>)
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	4a04      	ldr	r2, [pc, #16]	; (800a05c <HAL_FLASH_OB_Lock+0x1c>)
 800a04a:	f043 0301 	orr.w	r3, r3, #1
 800a04e:	6153      	str	r3, [r2, #20]
  
  return HAL_OK;  
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	40023c00 	.word	0x40023c00

0800a060 <HAL_FLASH_OB_Launch>:
/**
  * @brief  Launch the option byte loading.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800a064:	4b07      	ldr	r3, [pc, #28]	; (800a084 <HAL_FLASH_OB_Launch+0x24>)
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	4a06      	ldr	r2, [pc, #24]	; (800a084 <HAL_FLASH_OB_Launch+0x24>)
 800a06c:	f043 0302 	orr.w	r3, r3, #2
 800a070:	b2db      	uxtb	r3, r3
 800a072:	7013      	strb	r3, [r2, #0]

  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE)); 
 800a074:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a078:	f000 f812 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a07c:	4603      	mov	r3, r0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	40023c14 	.word	0x40023c14

0800a088 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800a088:	b480      	push	{r7}
 800a08a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a08c:	4b03      	ldr	r3, [pc, #12]	; (800a09c <HAL_FLASH_GetError+0x14>)
 800a08e:	69db      	ldr	r3, [r3, #28]
}  
 800a090:	4618      	mov	r0, r3
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	20000ddc 	.word	0x20000ddc

0800a0a0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a0ac:	4b1a      	ldr	r3, [pc, #104]	; (800a118 <FLASH_WaitForLastOperation+0x78>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a0b2:	f7fc fabb 	bl	800662c <HAL_GetTick>
 800a0b6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a0b8:	e010      	b.n	800a0dc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0c0:	d00c      	beq.n	800a0dc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d007      	beq.n	800a0d8 <FLASH_WaitForLastOperation+0x38>
 800a0c8:	f7fc fab0 	bl	800662c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d201      	bcs.n	800a0dc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e019      	b.n	800a110 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a0dc:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <FLASH_WaitForLastOperation+0x7c>)
 800a0de:	68db      	ldr	r3, [r3, #12]
 800a0e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d1e8      	bne.n	800a0ba <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a0e8:	4b0c      	ldr	r3, [pc, #48]	; (800a11c <FLASH_WaitForLastOperation+0x7c>)
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 0301 	and.w	r3, r3, #1
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a0f4:	4b09      	ldr	r3, [pc, #36]	; (800a11c <FLASH_WaitForLastOperation+0x7c>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a0fa:	4b08      	ldr	r3, [pc, #32]	; (800a11c <FLASH_WaitForLastOperation+0x7c>)
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a106:	f000 f8a5 	bl	800a254 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e000      	b.n	800a110 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a10e:	2300      	movs	r3, #0
  
}  
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000ddc 	.word	0x20000ddc
 800a11c:	40023c00 	.word	0x40023c00

0800a120 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a12c:	4b14      	ldr	r3, [pc, #80]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a12e:	691b      	ldr	r3, [r3, #16]
 800a130:	4a13      	ldr	r2, [pc, #76]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a136:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a138:	4b11      	ldr	r3, [pc, #68]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	4a10      	ldr	r2, [pc, #64]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a13e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a142:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a144:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	4a0d      	ldr	r2, [pc, #52]	; (800a180 <FLASH_Program_DoubleWord+0x60>)
 800a14a:	f043 0301 	orr.w	r3, r3, #1
 800a14e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	683a      	ldr	r2, [r7, #0]
 800a154:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800a156:	f3bf 8f6f 	isb	sy
}
 800a15a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a15c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a160:	f04f 0200 	mov.w	r2, #0
 800a164:	f04f 0300 	mov.w	r3, #0
 800a168:	000a      	movs	r2, r1
 800a16a:	2300      	movs	r3, #0
 800a16c:	68f9      	ldr	r1, [r7, #12]
 800a16e:	3104      	adds	r1, #4
 800a170:	4613      	mov	r3, r2
 800a172:	600b      	str	r3, [r1, #0]
}
 800a174:	bf00      	nop
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	40023c00 	.word	0x40023c00

0800a184 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a18e:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	4a0c      	ldr	r2, [pc, #48]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a198:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800a19a:	4b0a      	ldr	r3, [pc, #40]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a09      	ldr	r2, [pc, #36]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a1a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a1a6:	4b07      	ldr	r3, [pc, #28]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	4a06      	ldr	r2, [pc, #24]	; (800a1c4 <FLASH_Program_Word+0x40>)
 800a1ac:	f043 0301 	orr.w	r3, r3, #1
 800a1b0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	601a      	str	r2, [r3, #0]
}
 800a1b8:	bf00      	nop
 800a1ba:	370c      	adds	r7, #12
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	40023c00 	.word	0x40023c00

0800a1c8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a1d4:	4b0d      	ldr	r3, [pc, #52]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4a0c      	ldr	r2, [pc, #48]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	4a09      	ldr	r2, [pc, #36]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a1ec:	4b07      	ldr	r3, [pc, #28]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	4a06      	ldr	r2, [pc, #24]	; (800a20c <FLASH_Program_HalfWord+0x44>)
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	887a      	ldrh	r2, [r7, #2]
 800a1fc:	801a      	strh	r2, [r3, #0]
}
 800a1fe:	bf00      	nop
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
 800a20a:	bf00      	nop
 800a20c:	40023c00 	.word	0x40023c00

0800a210 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	460b      	mov	r3, r1
 800a21a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a21c:	4b0c      	ldr	r3, [pc, #48]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	4a0b      	ldr	r2, [pc, #44]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a226:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800a228:	4b09      	ldr	r3, [pc, #36]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a22a:	4a09      	ldr	r2, [pc, #36]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a232:	691b      	ldr	r3, [r3, #16]
 800a234:	4a06      	ldr	r2, [pc, #24]	; (800a250 <FLASH_Program_Byte+0x40>)
 800a236:	f043 0301 	orr.w	r3, r3, #1
 800a23a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	78fa      	ldrb	r2, [r7, #3]
 800a240:	701a      	strb	r2, [r3, #0]
}
 800a242:	bf00      	nop
 800a244:	370c      	adds	r7, #12
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	40023c00 	.word	0x40023c00

0800a254 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800a254:	b480      	push	{r7}
 800a256:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800a258:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	f003 0310 	and.w	r3, r3, #16
 800a260:	2b00      	cmp	r3, #0
 800a262:	d008      	beq.n	800a276 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a264:	4b25      	ldr	r3, [pc, #148]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a266:	69db      	ldr	r3, [r3, #28]
 800a268:	f043 0310 	orr.w	r3, r3, #16
 800a26c:	4a23      	ldr	r2, [pc, #140]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a26e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800a270:	4b21      	ldr	r3, [pc, #132]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a272:	2210      	movs	r2, #16
 800a274:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800a276:	4b20      	ldr	r3, [pc, #128]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d008      	beq.n	800a294 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800a282:	4b1e      	ldr	r3, [pc, #120]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	f043 0308 	orr.w	r3, r3, #8
 800a28a:	4a1c      	ldr	r2, [pc, #112]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a28c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800a28e:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a290:	2220      	movs	r2, #32
 800a292:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800a294:	4b18      	ldr	r3, [pc, #96]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d008      	beq.n	800a2b2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800a2a0:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2a2:	69db      	ldr	r3, [r3, #28]
 800a2a4:	f043 0304 	orr.w	r3, r3, #4
 800a2a8:	4a14      	ldr	r2, [pc, #80]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2aa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800a2ac:	4b12      	ldr	r3, [pc, #72]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a2ae:	2240      	movs	r2, #64	; 0x40
 800a2b0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800a2b2:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d008      	beq.n	800a2d0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f043 0302 	orr.w	r3, r3, #2
 800a2c6:	4a0d      	ldr	r2, [pc, #52]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2c8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a2ca:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a2cc:	2280      	movs	r2, #128	; 0x80
 800a2ce:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d008      	beq.n	800a2ee <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2de:	69db      	ldr	r3, [r3, #28]
 800a2e0:	f043 0320 	orr.w	r3, r3, #32
 800a2e4:	4a05      	ldr	r2, [pc, #20]	; (800a2fc <FLASH_SetErrorCode+0xa8>)
 800a2e6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a2e8:	4b03      	ldr	r3, [pc, #12]	; (800a2f8 <FLASH_SetErrorCode+0xa4>)
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	60da      	str	r2, [r3, #12]
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	40023c00 	.word	0x40023c00
 800a2fc:	20000ddc 	.word	0x20000ddc

0800a300 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a30a:	2301      	movs	r3, #1
 800a30c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800a30e:	2300      	movs	r3, #0
 800a310:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a312:	4b31      	ldr	r3, [pc, #196]	; (800a3d8 <HAL_FLASHEx_Erase+0xd8>)
 800a314:	7e1b      	ldrb	r3, [r3, #24]
 800a316:	2b01      	cmp	r3, #1
 800a318:	d101      	bne.n	800a31e <HAL_FLASHEx_Erase+0x1e>
 800a31a:	2302      	movs	r3, #2
 800a31c:	e058      	b.n	800a3d0 <HAL_FLASHEx_Erase+0xd0>
 800a31e:	4b2e      	ldr	r3, [pc, #184]	; (800a3d8 <HAL_FLASHEx_Erase+0xd8>)
 800a320:	2201      	movs	r2, #1
 800a322:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a324:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a328:	f7ff feba 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a32c:	4603      	mov	r3, r0
 800a32e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a330:	7bfb      	ldrb	r3, [r7, #15]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d148      	bne.n	800a3c8 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	f04f 32ff 	mov.w	r2, #4294967295
 800a33c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b01      	cmp	r3, #1
 800a344:	d115      	bne.n	800a372 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4619      	mov	r1, r3
 800a352:	4610      	mov	r0, r2
 800a354:	f000 f92b 	bl	800a5ae <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a358:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a35c:	f7ff fea0 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800a364:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <HAL_FLASHEx_Erase+0xdc>)
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4a1c      	ldr	r2, [pc, #112]	; (800a3dc <HAL_FLASHEx_Erase+0xdc>)
 800a36a:	f023 0304 	bic.w	r3, r3, #4
 800a36e:	6113      	str	r3, [r2, #16]
 800a370:	e028      	b.n	800a3c4 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	60bb      	str	r3, [r7, #8]
 800a378:	e01c      	b.n	800a3b4 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	4619      	mov	r1, r3
 800a382:	68b8      	ldr	r0, [r7, #8]
 800a384:	f000 f936 	bl	800a5f4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a388:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a38c:	f7ff fe88 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800a394:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <HAL_FLASHEx_Erase+0xdc>)
 800a396:	691b      	ldr	r3, [r3, #16]
 800a398:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <HAL_FLASHEx_Erase+0xdc>)
 800a39a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800a39e:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	601a      	str	r2, [r3, #0]
          break;
 800a3ac:	e00a      	b.n	800a3c4 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	3301      	adds	r3, #1
 800a3b2:	60bb      	str	r3, [r7, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d3da      	bcc.n	800a37a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a3c4:	f000 fa54 	bl	800a870 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a3c8:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <HAL_FLASHEx_Erase+0xd8>)
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	761a      	strb	r2, [r3, #24]

  return status;
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3710      	adds	r7, #16
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}
 800a3d8:	20000ddc 	.word	0x20000ddc
 800a3dc:	40023c00 	.word	0x40023c00

0800a3e0 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a3ec:	4b25      	ldr	r3, [pc, #148]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a3ee:	7e1b      	ldrb	r3, [r3, #24]
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_FLASHEx_Erase_IT+0x18>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e040      	b.n	800a47a <HAL_FLASHEx_Erase_IT+0x9a>
 800a3f8:	4b22      	ldr	r3, [pc, #136]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800a3fe:	4b22      	ldr	r3, [pc, #136]	; (800a488 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	4a21      	ldr	r2, [pc, #132]	; (800a488 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a408:	6113      	str	r3, [r2, #16]

  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800a40a:	4b1f      	ldr	r3, [pc, #124]	; (800a488 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	4a1e      	ldr	r2, [pc, #120]	; (800a488 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a414:	6113      	str	r3, [r2, #16]

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | \
 800a416:	4b1c      	ldr	r3, [pc, #112]	; (800a488 <HAL_FLASHEx_Erase_IT+0xa8>)
 800a418:	22f3      	movs	r2, #243	; 0xf3
 800a41a:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2b01      	cmp	r3, #1
 800a422:	d110      	bne.n	800a446 <HAL_FLASHEx_Erase_IT+0x66>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 800a424:	4b17      	ldr	r3, [pc, #92]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a426:	2202      	movs	r2, #2
 800a428:	701a      	strb	r2, [r3, #0]
    pFlash.Bank = pEraseInit->Banks;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	4a15      	ldr	r2, [pc, #84]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a430:	6113      	str	r3, [r2, #16]
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	b2da      	uxtb	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	4619      	mov	r1, r3
 800a43e:	4610      	mov	r0, r2
 800a440:	f000 f8b5 	bl	800a5ae <FLASH_MassErase>
 800a444:	e018      	b.n	800a478 <HAL_FLASHEx_Erase_IT+0x98>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 800a446:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a448:	2201      	movs	r2, #1
 800a44a:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	4a0c      	ldr	r2, [pc, #48]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a452:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a45a:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	b2da      	uxtb	r2, r3
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <HAL_FLASHEx_Erase_IT+0xa4>)
 800a464:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689a      	ldr	r2, [r3, #8]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	691b      	ldr	r3, [r3, #16]
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	4619      	mov	r1, r3
 800a472:	4610      	mov	r0, r2
 800a474:	f000 f8be 	bl	800a5f4 <FLASH_Erase_Sector>
  }

  return status;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	20000ddc 	.word	0x20000ddc
 800a488:	40023c00 	.word	0x40023c00

0800a48c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a498:	4b32      	ldr	r3, [pc, #200]	; (800a564 <HAL_FLASHEx_OBProgram+0xd8>)
 800a49a:	7e1b      	ldrb	r3, [r3, #24]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_FLASHEx_OBProgram+0x18>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e05b      	b.n	800a55c <HAL_FLASHEx_OBProgram+0xd0>
 800a4a4:	4b2f      	ldr	r3, [pc, #188]	; (800a564 <HAL_FLASHEx_OBProgram+0xd8>)
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d018      	beq.n	800a4e8 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d10a      	bne.n	800a4d4 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	f000 f8db 	bl	800a684 <FLASH_OB_EnableWRP>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	73fb      	strb	r3, [r7, #15]
 800a4d2:	e009      	b.n	800a4e8 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f000 f8f2 	bl	800a6c8 <FLASH_OB_DisableWRP>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	691b      	ldr	r3, [r3, #16]
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 f904 	bl	800a708 <FLASH_OB_RDP_LevelConfig>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d013      	beq.n	800a538 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	7e1b      	ldrb	r3, [r3, #24]
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	b2d8      	uxtb	r0, r3
                                 pOBInit->USERConfig & OB_STOP_NO_RST,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a522:	b2d9      	uxtb	r1, r3
                                 pOBInit->USERConfig & OB_STDBY_NO_RST);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW,
 800a528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a52c:	b2db      	uxtb	r3, r3
 800a52e:	461a      	mov	r2, r3
 800a530:	f000 f904 	bl	800a73c <FLASH_OB_UserConfig>
 800a534:	4603      	mov	r3, r0
 800a536:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if ((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 f926 	bl	800a79c <FLASH_OB_BOR_LevelConfig>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a554:	4b03      	ldr	r3, [pc, #12]	; (800a564 <HAL_FLASHEx_OBProgram+0xd8>)
 800a556:	2200      	movs	r2, #0
 800a558:	761a      	strb	r2, [r3, #24]

  return status;
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000ddc 	.word	0x20000ddc

0800a568 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	220f      	movs	r2, #15
 800a574:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 800a576:	f000 f93f 	bl	800a7f8 <FLASH_OB_GetWRP>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 800a582:	f000 f945 	bl	800a810 <FLASH_OB_GetRDP>
 800a586:	4603      	mov	r3, r0
 800a588:	461a      	mov	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800a58e:	f000 f923 	bl	800a7d8 <FLASH_OB_GetUser>
 800a592:	4603      	mov	r3, r0
 800a594:	461a      	mov	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800a59a:	f000 f959 	bl	800a850 <FLASH_OB_GetBOR>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	615a      	str	r2, [r3, #20]
}
 800a5a6:	bf00      	nop
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	6039      	str	r1, [r7, #0]
 800a5b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5c4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	4a09      	ldr	r2, [pc, #36]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5cc:	f043 0304 	orr.w	r3, r3, #4
 800a5d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5d4:	691a      	ldr	r2, [r3, #16]
 800a5d6:	79fb      	ldrb	r3, [r7, #7]
 800a5d8:	021b      	lsls	r3, r3, #8
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	4a04      	ldr	r2, [pc, #16]	; (800a5f0 <FLASH_MassErase+0x42>)
 800a5de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5e2:	6113      	str	r3, [r2, #16]
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	40023c00 	.word	0x40023c00

0800a5f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a604:	78fb      	ldrb	r3, [r7, #3]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d102      	bne.n	800a610 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e010      	b.n	800a632 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d103      	bne.n	800a61e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e009      	b.n	800a632 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	2b02      	cmp	r3, #2
 800a622:	d103      	bne.n	800a62c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a624:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e002      	b.n	800a632 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a62c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a630:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a632:	4b13      	ldr	r3, [pc, #76]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	4a12      	ldr	r2, [pc, #72]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a63c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a63e:	4b10      	ldr	r3, [pc, #64]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	490f      	ldr	r1, [pc, #60]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4313      	orrs	r3, r2
 800a648:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a64a:	4b0d      	ldr	r3, [pc, #52]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	4a0c      	ldr	r2, [pc, #48]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a650:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a654:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a656:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a658:	691a      	ldr	r2, [r3, #16]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	00db      	lsls	r3, r3, #3
 800a65e:	4313      	orrs	r3, r2
 800a660:	4a07      	ldr	r2, [pc, #28]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a662:	f043 0302 	orr.w	r3, r3, #2
 800a666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a668:	4b05      	ldr	r3, [pc, #20]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	4a04      	ldr	r2, [pc, #16]	; (800a680 <FLASH_Erase_Sector+0x8c>)
 800a66e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a672:	6113      	str	r3, [r2, #16]
}
 800a674:	bf00      	nop
 800a676:	3714      	adds	r7, #20
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	40023c00 	.word	0x40023c00

0800a684 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a692:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a696:	f7ff fd03 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <FLASH_OB_EnableWRP+0x36>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS &= (~WRPSector);
 800a6a4:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <FLASH_OB_EnableWRP+0x40>)
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	43db      	mvns	r3, r3
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4904      	ldr	r1, [pc, #16]	; (800a6c4 <FLASH_OB_EnableWRP+0x40>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a6ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}
 800a6c4:	40023c16 	.word	0x40023c16

0800a6c8 <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a6d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6da:	f7ff fce1 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a6e2:	7bfb      	ldrb	r3, [r7, #15]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d108      	bne.n	800a6fa <FLASH_OB_DisableWRP+0x32>
  {
    *(__IO uint16_t *)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector;
 800a6e8:	4b06      	ldr	r3, [pc, #24]	; (800a704 <FLASH_OB_DisableWRP+0x3c>)
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29a      	uxth	r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	4904      	ldr	r1, [pc, #16]	; (800a704 <FLASH_OB_DisableWRP+0x3c>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	800b      	strh	r3, [r1, #0]
  }

  return status;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	40023c16 	.word	0x40023c16

0800a708 <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	4603      	mov	r3, r0
 800a710:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a716:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a71a:	f7ff fcc1 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a722:	7bfb      	ldrb	r3, [r7, #15]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <FLASH_OB_RDP_LevelConfig+0x26>
  {
    *(__IO uint8_t *)OPTCR_BYTE1_ADDRESS = Level;
 800a728:	4a03      	ldr	r2, [pc, #12]	; (800a738 <FLASH_OB_RDP_LevelConfig+0x30>)
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	7013      	strb	r3, [r2, #0]
  }

  return status;
 800a72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3710      	adds	r7, #16
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	40023c15 	.word	0x40023c15

0800a73c <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	4603      	mov	r3, r0
 800a744:	71fb      	strb	r3, [r7, #7]
 800a746:	460b      	mov	r3, r1
 800a748:	71bb      	strb	r3, [r7, #6]
 800a74a:	4613      	mov	r3, r2
 800a74c:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800a74e:	23ff      	movs	r3, #255	; 0xff
 800a750:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 800a752:	2300      	movs	r3, #0
 800a754:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a756:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a75a:	f7ff fca1 	bl	800a0a0 <FLASH_WaitForLastOperation>
 800a75e:	4603      	mov	r3, r0
 800a760:	73bb      	strb	r3, [r7, #14]

  if (status == HAL_OK)
 800a762:	7bbb      	ldrb	r3, [r7, #14]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d111      	bne.n	800a78c <FLASH_OB_UserConfig+0x50>
  {
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp = (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 800a768:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <FLASH_OB_UserConfig+0x5c>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	f003 031f 	and.w	r3, r3, #31
 800a772:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp)));
 800a774:	79ba      	ldrb	r2, [r7, #6]
 800a776:	7bfb      	ldrb	r3, [r7, #15]
 800a778:	4313      	orrs	r3, r2
 800a77a:	b2da      	uxtb	r2, r3
 800a77c:	797b      	ldrb	r3, [r7, #5]
 800a77e:	4313      	orrs	r3, r2
 800a780:	b2da      	uxtb	r2, r3
 800a782:	4905      	ldr	r1, [pc, #20]	; (800a798 <FLASH_OB_UserConfig+0x5c>)
 800a784:	79fb      	ldrb	r3, [r7, #7]
 800a786:	4313      	orrs	r3, r2
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	700b      	strb	r3, [r1, #0]
  }

  return status;
 800a78c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	40023c14 	.word	0x40023c14

0800a79c <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b083      	sub	sp, #12
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800a7a6:	4b0b      	ldr	r3, [pc, #44]	; (800a7d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	4a09      	ldr	r2, [pc, #36]	; (800a7d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a7ae:	f023 030c 	bic.w	r3, r3, #12
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 800a7b6:	4b07      	ldr	r3, [pc, #28]	; (800a7d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	b2da      	uxtb	r2, r3
 800a7bc:	4905      	ldr	r1, [pc, #20]	; (800a7d4 <FLASH_OB_BOR_LevelConfig+0x38>)
 800a7be:	79fb      	ldrb	r3, [r7, #7]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	700b      	strb	r3, [r1, #0]

  return HAL_OK;
 800a7c6:	2300      	movs	r3, #0

}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr
 800a7d4:	40023c14 	.word	0x40023c14

0800a7d8 <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 800a7dc:	4b05      	ldr	r3, [pc, #20]	; (800a7f4 <FLASH_OB_GetUser+0x1c>)
 800a7de:	695b      	ldr	r3, [r3, #20]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	f023 031f 	bic.w	r3, r3, #31
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40023c00 	.word	0x40023c00

0800a7f8 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 800a7fc:	4b03      	ldr	r3, [pc, #12]	; (800a80c <FLASH_OB_GetWRP+0x14>)
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29b      	uxth	r3, r3
}
 800a802:	4618      	mov	r0, r3
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	40023c16 	.word	0x40023c16

0800a810 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 800a816:	23aa      	movs	r3, #170	; 0xaa
 800a818:	71fb      	strb	r3, [r7, #7]

  if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2)
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <FLASH_OB_GetRDP+0x3c>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2bcc      	cmp	r3, #204	; 0xcc
 800a822:	d102      	bne.n	800a82a <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 800a824:	23cc      	movs	r3, #204	; 0xcc
 800a826:	71fb      	strb	r3, [r7, #7]
 800a828:	e009      	b.n	800a83e <FLASH_OB_GetRDP+0x2e>
  }
  else if (*(__IO uint8_t *)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0)
 800a82a:	4b08      	ldr	r3, [pc, #32]	; (800a84c <FLASH_OB_GetRDP+0x3c>)
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	b2db      	uxtb	r3, r3
 800a830:	2baa      	cmp	r3, #170	; 0xaa
 800a832:	d102      	bne.n	800a83a <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 800a834:	23aa      	movs	r3, #170	; 0xaa
 800a836:	71fb      	strb	r3, [r7, #7]
 800a838:	e001      	b.n	800a83e <FLASH_OB_GetRDP+0x2e>
  }
  else
  {
    readstatus = OB_RDP_LEVEL_1;
 800a83a:	2355      	movs	r3, #85	; 0x55
 800a83c:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 800a83e:	79fb      	ldrb	r3, [r7, #7]
}
 800a840:	4618      	mov	r0, r3
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	40023c15 	.word	0x40023c15

0800a850 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 800a850:	b480      	push	{r7}
 800a852:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <FLASH_OB_GetBOR+0x1c>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	b2db      	uxtb	r3, r3
 800a85a:	f003 030c 	and.w	r3, r3, #12
 800a85e:	b2db      	uxtb	r3, r3
}
 800a860:	4618      	mov	r0, r3
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	40023c14 	.word	0x40023c14

0800a870 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a870:	b480      	push	{r7}
 800a872:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800a874:	4b20      	ldr	r3, [pc, #128]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d017      	beq.n	800a8b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a880:	4b1d      	ldr	r3, [pc, #116]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1c      	ldr	r2, [pc, #112]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a886:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a88a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a88c:	4b1a      	ldr	r3, [pc, #104]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a19      	ldr	r2, [pc, #100]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a896:	6013      	str	r3, [r2, #0]
 800a898:	4b17      	ldr	r3, [pc, #92]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a16      	ldr	r2, [pc, #88]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a89e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a13      	ldr	r2, [pc, #76]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a8ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d017      	beq.n	800a8ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0d      	ldr	r2, [pc, #52]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a8c8:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a8d2:	6013      	str	r3, [r2, #0]
 800a8d4:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a07      	ldr	r2, [pc, #28]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a8e0:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a04      	ldr	r2, [pc, #16]	; (800a8f8 <FLASH_FlushCaches+0x88>)
 800a8e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a8ea:	6013      	str	r3, [r2, #0]
  }
}
 800a8ec:	bf00      	nop
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	40023c00 	.word	0x40023c00

0800a8fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b089      	sub	sp, #36	; 0x24
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a906:	2300      	movs	r3, #0
 800a908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a90e:	2300      	movs	r3, #0
 800a910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
 800a916:	e16b      	b.n	800abf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a918:	2201      	movs	r2, #1
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	fa02 f303 	lsl.w	r3, r2, r3
 800a920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	4013      	ands	r3, r2
 800a92a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	429a      	cmp	r2, r3
 800a932:	f040 815a 	bne.w	800abea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f003 0303 	and.w	r3, r3, #3
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d005      	beq.n	800a94e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d130      	bne.n	800a9b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a954:	69fb      	ldr	r3, [r7, #28]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	2203      	movs	r2, #3
 800a95a:	fa02 f303 	lsl.w	r3, r2, r3
 800a95e:	43db      	mvns	r3, r3
 800a960:	69ba      	ldr	r2, [r7, #24]
 800a962:	4013      	ands	r3, r2
 800a964:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	68da      	ldr	r2, [r3, #12]
 800a96a:	69fb      	ldr	r3, [r7, #28]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	fa02 f303 	lsl.w	r3, r2, r3
 800a972:	69ba      	ldr	r2, [r7, #24]
 800a974:	4313      	orrs	r3, r2
 800a976:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a984:	2201      	movs	r2, #1
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	fa02 f303 	lsl.w	r3, r2, r3
 800a98c:	43db      	mvns	r3, r3
 800a98e:	69ba      	ldr	r2, [r7, #24]
 800a990:	4013      	ands	r3, r2
 800a992:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	091b      	lsrs	r3, r3, #4
 800a99a:	f003 0201 	and.w	r2, r3, #1
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69ba      	ldr	r2, [r7, #24]
 800a9ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	f003 0303 	and.w	r3, r3, #3
 800a9b8:	2b03      	cmp	r3, #3
 800a9ba:	d017      	beq.n	800a9ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	2203      	movs	r2, #3
 800a9c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9cc:	43db      	mvns	r3, r3
 800a9ce:	69ba      	ldr	r2, [r7, #24]
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e0:	69ba      	ldr	r2, [r7, #24]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d123      	bne.n	800aa40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	08da      	lsrs	r2, r3, #3
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	3208      	adds	r2, #8
 800aa00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	f003 0307 	and.w	r3, r3, #7
 800aa0c:	009b      	lsls	r3, r3, #2
 800aa0e:	220f      	movs	r2, #15
 800aa10:	fa02 f303 	lsl.w	r3, r2, r3
 800aa14:	43db      	mvns	r3, r3
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	4013      	ands	r3, r2
 800aa1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	691a      	ldr	r2, [r3, #16]
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	f003 0307 	and.w	r3, r3, #7
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	08da      	lsrs	r2, r3, #3
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3208      	adds	r2, #8
 800aa3a:	69b9      	ldr	r1, [r7, #24]
 800aa3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	43db      	mvns	r3, r3
 800aa52:	69ba      	ldr	r2, [r7, #24]
 800aa54:	4013      	ands	r3, r2
 800aa56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	f003 0203 	and.w	r2, r3, #3
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	fa02 f303 	lsl.w	r3, r2, r3
 800aa68:	69ba      	ldr	r2, [r7, #24]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 80b4 	beq.w	800abea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa82:	2300      	movs	r3, #0
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	4b60      	ldr	r3, [pc, #384]	; (800ac08 <HAL_GPIO_Init+0x30c>)
 800aa88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8a:	4a5f      	ldr	r2, [pc, #380]	; (800ac08 <HAL_GPIO_Init+0x30c>)
 800aa8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa90:	6453      	str	r3, [r2, #68]	; 0x44
 800aa92:	4b5d      	ldr	r3, [pc, #372]	; (800ac08 <HAL_GPIO_Init+0x30c>)
 800aa94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa9e:	4a5b      	ldr	r2, [pc, #364]	; (800ac0c <HAL_GPIO_Init+0x310>)
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	089b      	lsrs	r3, r3, #2
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aaaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	220f      	movs	r2, #15
 800aab6:	fa02 f303 	lsl.w	r3, r2, r3
 800aaba:	43db      	mvns	r3, r3
 800aabc:	69ba      	ldr	r2, [r7, #24]
 800aabe:	4013      	ands	r3, r2
 800aac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a52      	ldr	r2, [pc, #328]	; (800ac10 <HAL_GPIO_Init+0x314>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d02b      	beq.n	800ab22 <HAL_GPIO_Init+0x226>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a51      	ldr	r2, [pc, #324]	; (800ac14 <HAL_GPIO_Init+0x318>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d025      	beq.n	800ab1e <HAL_GPIO_Init+0x222>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a50      	ldr	r2, [pc, #320]	; (800ac18 <HAL_GPIO_Init+0x31c>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d01f      	beq.n	800ab1a <HAL_GPIO_Init+0x21e>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a4f      	ldr	r2, [pc, #316]	; (800ac1c <HAL_GPIO_Init+0x320>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d019      	beq.n	800ab16 <HAL_GPIO_Init+0x21a>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a4e      	ldr	r2, [pc, #312]	; (800ac20 <HAL_GPIO_Init+0x324>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d013      	beq.n	800ab12 <HAL_GPIO_Init+0x216>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a4d      	ldr	r2, [pc, #308]	; (800ac24 <HAL_GPIO_Init+0x328>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d00d      	beq.n	800ab0e <HAL_GPIO_Init+0x212>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	4a4c      	ldr	r2, [pc, #304]	; (800ac28 <HAL_GPIO_Init+0x32c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d007      	beq.n	800ab0a <HAL_GPIO_Init+0x20e>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a4b      	ldr	r2, [pc, #300]	; (800ac2c <HAL_GPIO_Init+0x330>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d101      	bne.n	800ab06 <HAL_GPIO_Init+0x20a>
 800ab02:	2307      	movs	r3, #7
 800ab04:	e00e      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab06:	2308      	movs	r3, #8
 800ab08:	e00c      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab0a:	2306      	movs	r3, #6
 800ab0c:	e00a      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab0e:	2305      	movs	r3, #5
 800ab10:	e008      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab12:	2304      	movs	r3, #4
 800ab14:	e006      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab16:	2303      	movs	r3, #3
 800ab18:	e004      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab1a:	2302      	movs	r3, #2
 800ab1c:	e002      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e000      	b.n	800ab24 <HAL_GPIO_Init+0x228>
 800ab22:	2300      	movs	r3, #0
 800ab24:	69fa      	ldr	r2, [r7, #28]
 800ab26:	f002 0203 	and.w	r2, r2, #3
 800ab2a:	0092      	lsls	r2, r2, #2
 800ab2c:	4093      	lsls	r3, r2
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab34:	4935      	ldr	r1, [pc, #212]	; (800ac0c <HAL_GPIO_Init+0x310>)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	089b      	lsrs	r3, r3, #2
 800ab3a:	3302      	adds	r3, #2
 800ab3c:	69ba      	ldr	r2, [r7, #24]
 800ab3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab42:	4b3b      	ldr	r3, [pc, #236]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	43db      	mvns	r3, r3
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ab5e:	69ba      	ldr	r2, [r7, #24]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ab66:	4a32      	ldr	r2, [pc, #200]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab6c:	4b30      	ldr	r3, [pc, #192]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	43db      	mvns	r3, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d003      	beq.n	800ab90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab90:	4a27      	ldr	r2, [pc, #156]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab96:	4b26      	ldr	r3, [pc, #152]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	43db      	mvns	r3, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4013      	ands	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	685b      	ldr	r3, [r3, #4]
 800abaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d003      	beq.n	800abba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800abba:	4a1d      	ldr	r2, [pc, #116]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800abc0:	4b1b      	ldr	r3, [pc, #108]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	43db      	mvns	r3, r3
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	4013      	ands	r3, r2
 800abce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d003      	beq.n	800abe4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	4313      	orrs	r3, r2
 800abe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800abe4:	4a12      	ldr	r2, [pc, #72]	; (800ac30 <HAL_GPIO_Init+0x334>)
 800abe6:	69bb      	ldr	r3, [r7, #24]
 800abe8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	3301      	adds	r3, #1
 800abee:	61fb      	str	r3, [r7, #28]
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	f67f ae90 	bls.w	800a918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	3724      	adds	r7, #36	; 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40023800 	.word	0x40023800
 800ac0c:	40013800 	.word	0x40013800
 800ac10:	40020000 	.word	0x40020000
 800ac14:	40020400 	.word	0x40020400
 800ac18:	40020800 	.word	0x40020800
 800ac1c:	40020c00 	.word	0x40020c00
 800ac20:	40021000 	.word	0x40021000
 800ac24:	40021400 	.word	0x40021400
 800ac28:	40021800 	.word	0x40021800
 800ac2c:	40021c00 	.word	0x40021c00
 800ac30:	40013c00 	.word	0x40013c00

0800ac34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b087      	sub	sp, #28
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
 800ac3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]
 800ac4e:	e0cd      	b.n	800adec <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ac50:	2201      	movs	r2, #1
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	fa02 f303 	lsl.w	r3, r2, r3
 800ac58:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	4013      	ands	r3, r2
 800ac60:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800ac62:	68fa      	ldr	r2, [r7, #12]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	f040 80bd 	bne.w	800ade6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ac6c:	4a65      	ldr	r2, [pc, #404]	; (800ae04 <HAL_GPIO_DeInit+0x1d0>)
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	089b      	lsrs	r3, r3, #2
 800ac72:	3302      	adds	r3, #2
 800ac74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac78:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f003 0303 	and.w	r3, r3, #3
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	220f      	movs	r2, #15
 800ac84:	fa02 f303 	lsl.w	r3, r2, r3
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a5d      	ldr	r2, [pc, #372]	; (800ae08 <HAL_GPIO_DeInit+0x1d4>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d02b      	beq.n	800acee <HAL_GPIO_DeInit+0xba>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a5c      	ldr	r2, [pc, #368]	; (800ae0c <HAL_GPIO_DeInit+0x1d8>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d025      	beq.n	800acea <HAL_GPIO_DeInit+0xb6>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a5b      	ldr	r2, [pc, #364]	; (800ae10 <HAL_GPIO_DeInit+0x1dc>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d01f      	beq.n	800ace6 <HAL_GPIO_DeInit+0xb2>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a5a      	ldr	r2, [pc, #360]	; (800ae14 <HAL_GPIO_DeInit+0x1e0>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d019      	beq.n	800ace2 <HAL_GPIO_DeInit+0xae>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a59      	ldr	r2, [pc, #356]	; (800ae18 <HAL_GPIO_DeInit+0x1e4>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d013      	beq.n	800acde <HAL_GPIO_DeInit+0xaa>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a58      	ldr	r2, [pc, #352]	; (800ae1c <HAL_GPIO_DeInit+0x1e8>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00d      	beq.n	800acda <HAL_GPIO_DeInit+0xa6>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a57      	ldr	r2, [pc, #348]	; (800ae20 <HAL_GPIO_DeInit+0x1ec>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d007      	beq.n	800acd6 <HAL_GPIO_DeInit+0xa2>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a56      	ldr	r2, [pc, #344]	; (800ae24 <HAL_GPIO_DeInit+0x1f0>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d101      	bne.n	800acd2 <HAL_GPIO_DeInit+0x9e>
 800acce:	2307      	movs	r3, #7
 800acd0:	e00e      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acd2:	2308      	movs	r3, #8
 800acd4:	e00c      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acd6:	2306      	movs	r3, #6
 800acd8:	e00a      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acda:	2305      	movs	r3, #5
 800acdc:	e008      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acde:	2304      	movs	r3, #4
 800ace0:	e006      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800ace2:	2303      	movs	r3, #3
 800ace4:	e004      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800ace6:	2302      	movs	r3, #2
 800ace8:	e002      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acea:	2301      	movs	r3, #1
 800acec:	e000      	b.n	800acf0 <HAL_GPIO_DeInit+0xbc>
 800acee:	2300      	movs	r3, #0
 800acf0:	697a      	ldr	r2, [r7, #20]
 800acf2:	f002 0203 	and.w	r2, r2, #3
 800acf6:	0092      	lsls	r2, r2, #2
 800acf8:	4093      	lsls	r3, r2
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d132      	bne.n	800ad66 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800ad00:	4b49      	ldr	r3, [pc, #292]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad02:	681a      	ldr	r2, [r3, #0]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	43db      	mvns	r3, r3
 800ad08:	4947      	ldr	r1, [pc, #284]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800ad0e:	4b46      	ldr	r3, [pc, #280]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad10:	685a      	ldr	r2, [r3, #4]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	43db      	mvns	r3, r3
 800ad16:	4944      	ldr	r1, [pc, #272]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800ad1c:	4b42      	ldr	r3, [pc, #264]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad1e:	689a      	ldr	r2, [r3, #8]
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	43db      	mvns	r3, r3
 800ad24:	4940      	ldr	r1, [pc, #256]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad26:	4013      	ands	r3, r2
 800ad28:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad2c:	68da      	ldr	r2, [r3, #12]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	43db      	mvns	r3, r3
 800ad32:	493d      	ldr	r1, [pc, #244]	; (800ae28 <HAL_GPIO_DeInit+0x1f4>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	f003 0303 	and.w	r3, r3, #3
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	220f      	movs	r2, #15
 800ad42:	fa02 f303 	lsl.w	r3, r2, r3
 800ad46:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ad48:	4a2e      	ldr	r2, [pc, #184]	; (800ae04 <HAL_GPIO_DeInit+0x1d0>)
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	089b      	lsrs	r3, r3, #2
 800ad4e:	3302      	adds	r3, #2
 800ad50:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	43da      	mvns	r2, r3
 800ad58:	482a      	ldr	r0, [pc, #168]	; (800ae04 <HAL_GPIO_DeInit+0x1d0>)
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	089b      	lsrs	r3, r3, #2
 800ad5e:	400a      	ands	r2, r1
 800ad60:	3302      	adds	r3, #2
 800ad62:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	005b      	lsls	r3, r3, #1
 800ad6e:	2103      	movs	r1, #3
 800ad70:	fa01 f303 	lsl.w	r3, r1, r3
 800ad74:	43db      	mvns	r3, r3
 800ad76:	401a      	ands	r2, r3
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	08da      	lsrs	r2, r3, #3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	3208      	adds	r2, #8
 800ad84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f003 0307 	and.w	r3, r3, #7
 800ad8e:	009b      	lsls	r3, r3, #2
 800ad90:	220f      	movs	r2, #15
 800ad92:	fa02 f303 	lsl.w	r3, r2, r3
 800ad96:	43db      	mvns	r3, r3
 800ad98:	697a      	ldr	r2, [r7, #20]
 800ad9a:	08d2      	lsrs	r2, r2, #3
 800ad9c:	4019      	ands	r1, r3
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3208      	adds	r2, #8
 800ada2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68da      	ldr	r2, [r3, #12]
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	005b      	lsls	r3, r3, #1
 800adae:	2103      	movs	r1, #3
 800adb0:	fa01 f303 	lsl.w	r3, r1, r3
 800adb4:	43db      	mvns	r3, r3
 800adb6:	401a      	ands	r2, r3
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	2101      	movs	r1, #1
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	fa01 f303 	lsl.w	r3, r1, r3
 800adc8:	43db      	mvns	r3, r3
 800adca:	401a      	ands	r2, r3
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	689a      	ldr	r2, [r3, #8]
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	005b      	lsls	r3, r3, #1
 800add8:	2103      	movs	r1, #3
 800adda:	fa01 f303 	lsl.w	r3, r1, r3
 800adde:	43db      	mvns	r3, r3
 800ade0:	401a      	ands	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	3301      	adds	r3, #1
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2b0f      	cmp	r3, #15
 800adf0:	f67f af2e 	bls.w	800ac50 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800adf4:	bf00      	nop
 800adf6:	bf00      	nop
 800adf8:	371c      	adds	r7, #28
 800adfa:	46bd      	mov	sp, r7
 800adfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae00:	4770      	bx	lr
 800ae02:	bf00      	nop
 800ae04:	40013800 	.word	0x40013800
 800ae08:	40020000 	.word	0x40020000
 800ae0c:	40020400 	.word	0x40020400
 800ae10:	40020800 	.word	0x40020800
 800ae14:	40020c00 	.word	0x40020c00
 800ae18:	40021000 	.word	0x40021000
 800ae1c:	40021400 	.word	0x40021400
 800ae20:	40021800 	.word	0x40021800
 800ae24:	40021c00 	.word	0x40021c00
 800ae28:	40013c00 	.word	0x40013c00

0800ae2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	460b      	mov	r3, r1
 800ae36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	691a      	ldr	r2, [r3, #16]
 800ae3c:	887b      	ldrh	r3, [r7, #2]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d002      	beq.n	800ae4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae44:	2301      	movs	r3, #1
 800ae46:	73fb      	strb	r3, [r7, #15]
 800ae48:	e001      	b.n	800ae4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	460b      	mov	r3, r1
 800ae66:	807b      	strh	r3, [r7, #2]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ae6c:	787b      	ldrb	r3, [r7, #1]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d003      	beq.n	800ae7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae72:	887a      	ldrh	r2, [r7, #2]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ae78:	e003      	b.n	800ae82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ae7a:	887b      	ldrh	r3, [r7, #2]
 800ae7c:	041a      	lsls	r2, r3, #16
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	619a      	str	r2, [r3, #24]
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b085      	sub	sp, #20
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	460b      	mov	r3, r1
 800ae98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	695b      	ldr	r3, [r3, #20]
 800ae9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aea0:	887a      	ldrh	r2, [r7, #2]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4013      	ands	r3, r2
 800aea6:	041a      	lsls	r2, r3, #16
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	43d9      	mvns	r1, r3
 800aeac:	887b      	ldrh	r3, [r7, #2]
 800aeae:	400b      	ands	r3, r1
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	619a      	str	r2, [r3, #24]
}
 800aeb6:	bf00      	nop
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr

0800aec2 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bit to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b085      	sub	sp, #20
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
 800aeca:	460b      	mov	r3, r1
 800aecc:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 800aece:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aed2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 800aed4:	887a      	ldrh	r2, [r7, #2]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800aee2:	887a      	ldrh	r2, [r7, #2]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	69db      	ldr	r3, [r3, #28]
 800aef2:	60fb      	str	r3, [r7, #12]

  /* Read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800af00:	2300      	movs	r3, #0
 800af02:	e000      	b.n	800af06 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800af04:	2301      	movs	r3, #1
  }
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	4603      	mov	r3, r0
 800af1a:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800af1c:	4b08      	ldr	r3, [pc, #32]	; (800af40 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800af1e:	695a      	ldr	r2, [r3, #20]
 800af20:	88fb      	ldrh	r3, [r7, #6]
 800af22:	4013      	ands	r3, r2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800af28:	4a05      	ldr	r2, [pc, #20]	; (800af40 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 800af2a:	88fb      	ldrh	r3, [r7, #6]
 800af2c:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f807 	bl	800af44 <HAL_GPIO_EXTI_Callback>
  }
}
 800af36:	bf00      	nop
 800af38:	3708      	adds	r7, #8
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	40013c00 	.word	0x40013c00

0800af44 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800af4e:	bf00      	nop
 800af50:	370c      	adds	r7, #12
 800af52:	46bd      	mov	sp, r7
 800af54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af58:	4770      	bx	lr

0800af5a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b084      	sub	sp, #16
 800af5e:	af00      	add	r7, sp, #0
 800af60:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e12b      	b.n	800b1c4 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d106      	bne.n	800af86 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7fa fc63 	bl	800584c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2224      	movs	r2, #36	; 0x24
 800af8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 0201 	bic.w	r2, r2, #1
 800af9c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afac:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800afbc:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800afbe:	f007 f891 	bl	80120e4 <HAL_RCC_GetPCLK1Freq>
 800afc2:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	4a80      	ldr	r2, [pc, #512]	; (800b1cc <HAL_I2C_Init+0x272>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d807      	bhi.n	800afde <HAL_I2C_Init+0x84>
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4a7f      	ldr	r2, [pc, #508]	; (800b1d0 <HAL_I2C_Init+0x276>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	bf94      	ite	ls
 800afd6:	2301      	movls	r3, #1
 800afd8:	2300      	movhi	r3, #0
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	e006      	b.n	800afec <HAL_I2C_Init+0x92>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	4a7c      	ldr	r2, [pc, #496]	; (800b1d4 <HAL_I2C_Init+0x27a>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	bf94      	ite	ls
 800afe6:	2301      	movls	r3, #1
 800afe8:	2300      	movhi	r3, #0
 800afea:	b2db      	uxtb	r3, r3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d001      	beq.n	800aff4 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	e0e7      	b.n	800b1c4 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	4a78      	ldr	r2, [pc, #480]	; (800b1d8 <HAL_I2C_Init+0x27e>)
 800aff8:	fba2 2303 	umull	r2, r3, r2, r3
 800affc:	0c9b      	lsrs	r3, r3, #18
 800affe:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	430a      	orrs	r2, r1
 800b012:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	6a1b      	ldr	r3, [r3, #32]
 800b01a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	4a6a      	ldr	r2, [pc, #424]	; (800b1cc <HAL_I2C_Init+0x272>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d802      	bhi.n	800b02e <HAL_I2C_Init+0xd4>
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	3301      	adds	r3, #1
 800b02c:	e009      	b.n	800b042 <HAL_I2C_Init+0xe8>
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b034:	fb02 f303 	mul.w	r3, r2, r3
 800b038:	4a68      	ldr	r2, [pc, #416]	; (800b1dc <HAL_I2C_Init+0x282>)
 800b03a:	fba2 2303 	umull	r2, r3, r2, r3
 800b03e:	099b      	lsrs	r3, r3, #6
 800b040:	3301      	adds	r3, #1
 800b042:	687a      	ldr	r2, [r7, #4]
 800b044:	6812      	ldr	r2, [r2, #0]
 800b046:	430b      	orrs	r3, r1
 800b048:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b054:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	495b      	ldr	r1, [pc, #364]	; (800b1cc <HAL_I2C_Init+0x272>)
 800b05e:	428b      	cmp	r3, r1
 800b060:	d819      	bhi.n	800b096 <HAL_I2C_Init+0x13c>
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1e59      	subs	r1, r3, #1
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	005b      	lsls	r3, r3, #1
 800b06c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b070:	1c59      	adds	r1, r3, #1
 800b072:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b076:	400b      	ands	r3, r1
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d00a      	beq.n	800b092 <HAL_I2C_Init+0x138>
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	1e59      	subs	r1, r3, #1
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	fbb1 f3f3 	udiv	r3, r1, r3
 800b08a:	3301      	adds	r3, #1
 800b08c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b090:	e051      	b.n	800b136 <HAL_I2C_Init+0x1dc>
 800b092:	2304      	movs	r3, #4
 800b094:	e04f      	b.n	800b136 <HAL_I2C_Init+0x1dc>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	689b      	ldr	r3, [r3, #8]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d111      	bne.n	800b0c2 <HAL_I2C_Init+0x168>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	1e58      	subs	r0, r3, #1
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6859      	ldr	r1, [r3, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	440b      	add	r3, r1
 800b0ac:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	bf0c      	ite	eq
 800b0ba:	2301      	moveq	r3, #1
 800b0bc:	2300      	movne	r3, #0
 800b0be:	b2db      	uxtb	r3, r3
 800b0c0:	e012      	b.n	800b0e8 <HAL_I2C_Init+0x18e>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	1e58      	subs	r0, r3, #1
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6859      	ldr	r1, [r3, #4]
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	0099      	lsls	r1, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b0d8:	3301      	adds	r3, #1
 800b0da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bf0c      	ite	eq
 800b0e2:	2301      	moveq	r3, #1
 800b0e4:	2300      	movne	r3, #0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <HAL_I2C_Init+0x196>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e022      	b.n	800b136 <HAL_I2C_Init+0x1dc>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10e      	bne.n	800b116 <HAL_I2C_Init+0x1bc>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	1e58      	subs	r0, r3, #1
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6859      	ldr	r1, [r3, #4]
 800b100:	460b      	mov	r3, r1
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	440b      	add	r3, r1
 800b106:	fbb0 f3f3 	udiv	r3, r0, r3
 800b10a:	3301      	adds	r3, #1
 800b10c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b110:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b114:	e00f      	b.n	800b136 <HAL_I2C_Init+0x1dc>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	1e58      	subs	r0, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6859      	ldr	r1, [r3, #4]
 800b11e:	460b      	mov	r3, r1
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	440b      	add	r3, r1
 800b124:	0099      	lsls	r1, r3, #2
 800b126:	440b      	add	r3, r1
 800b128:	fbb0 f3f3 	udiv	r3, r0, r3
 800b12c:	3301      	adds	r3, #1
 800b12e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b136:	6879      	ldr	r1, [r7, #4]
 800b138:	6809      	ldr	r1, [r1, #0]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	69da      	ldr	r2, [r3, #28]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a1b      	ldr	r3, [r3, #32]
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	430a      	orrs	r2, r1
 800b158:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b164:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	6911      	ldr	r1, [r2, #16]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	68d2      	ldr	r2, [r2, #12]
 800b170:	4311      	orrs	r1, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	6812      	ldr	r2, [r2, #0]
 800b176:	430b      	orrs	r3, r1
 800b178:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695a      	ldr	r2, [r3, #20]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	430a      	orrs	r2, r1
 800b194:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f042 0201 	orr.w	r2, r2, #1
 800b1a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2220      	movs	r2, #32
 800b1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	000186a0 	.word	0x000186a0
 800b1d0:	001e847f 	.word	0x001e847f
 800b1d4:	003d08ff 	.word	0x003d08ff
 800b1d8:	431bde83 	.word	0x431bde83
 800b1dc:	10624dd3 	.word	0x10624dd3

0800b1e0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e021      	b.n	800b236 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2224      	movs	r2, #36	; 0x24
 800b1f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f022 0201 	bic.w	r2, r2, #1
 800b208:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b20a:	6878      	ldr	r0, [r7, #4]
 800b20c:	f7fa fb76 	bl	80058fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2200      	movs	r2, #0
 800b228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b088      	sub	sp, #32
 800b242:	af02      	add	r7, sp, #8
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	607a      	str	r2, [r7, #4]
 800b248:	461a      	mov	r2, r3
 800b24a:	460b      	mov	r3, r1
 800b24c:	817b      	strh	r3, [r7, #10]
 800b24e:	4613      	mov	r3, r2
 800b250:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b252:	f7fb f9eb 	bl	800662c <HAL_GetTick>
 800b256:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b20      	cmp	r3, #32
 800b262:	f040 80e0 	bne.w	800b426 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	9300      	str	r3, [sp, #0]
 800b26a:	2319      	movs	r3, #25
 800b26c:	2201      	movs	r2, #1
 800b26e:	4970      	ldr	r1, [pc, #448]	; (800b430 <HAL_I2C_Master_Transmit+0x1f2>)
 800b270:	68f8      	ldr	r0, [r7, #12]
 800b272:	f005 fd97 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d001      	beq.n	800b280 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b27c:	2302      	movs	r3, #2
 800b27e:	e0d3      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b286:	2b01      	cmp	r3, #1
 800b288:	d101      	bne.n	800b28e <HAL_I2C_Master_Transmit+0x50>
 800b28a:	2302      	movs	r3, #2
 800b28c:	e0cc      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0301 	and.w	r3, r3, #1
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d007      	beq.n	800b2b4 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f042 0201 	orr.w	r2, r2, #1
 800b2b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2c2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2221      	movs	r2, #33	; 0x21
 800b2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2210      	movs	r2, #16
 800b2d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	687a      	ldr	r2, [r7, #4]
 800b2de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	893a      	ldrh	r2, [r7, #8]
 800b2e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2ea:	b29a      	uxth	r2, r3
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	4a50      	ldr	r2, [pc, #320]	; (800b434 <HAL_I2C_Master_Transmit+0x1f6>)
 800b2f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b2f6:	8979      	ldrh	r1, [r7, #10]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	6a3a      	ldr	r2, [r7, #32]
 800b2fc:	68f8      	ldr	r0, [r7, #12]
 800b2fe:	f005 f8c9 	bl	8010494 <I2C_MasterRequestWrite>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e08d      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b30c:	2300      	movs	r3, #0
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	695b      	ldr	r3, [r3, #20]
 800b316:	613b      	str	r3, [r7, #16]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	613b      	str	r3, [r7, #16]
 800b320:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b322:	e066      	b.n	800b3f2 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b324:	697a      	ldr	r2, [r7, #20]
 800b326:	6a39      	ldr	r1, [r7, #32]
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f005 fe11 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00d      	beq.n	800b350 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b338:	2b04      	cmp	r3, #4
 800b33a:	d107      	bne.n	800b34c <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b34a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e06b      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b354:	781a      	ldrb	r2, [r3, #0]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	3b01      	subs	r3, #1
 800b36e:	b29a      	uxth	r2, r3
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b378:	3b01      	subs	r3, #1
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f003 0304 	and.w	r3, r3, #4
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d11b      	bne.n	800b3c6 <HAL_I2C_Master_Transmit+0x188>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b392:	2b00      	cmp	r3, #0
 800b394:	d017      	beq.n	800b3c6 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	781a      	ldrb	r2, [r3, #0]
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	6a39      	ldr	r1, [r7, #32]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f005 fe01 	bl	8010fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00d      	beq.n	800b3f2 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3da:	2b04      	cmp	r3, #4
 800b3dc:	d107      	bne.n	800b3ee <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b3ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e01a      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d194      	bne.n	800b324 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	2220      	movs	r2, #32
 800b40e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	e000      	b.n	800b428 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b426:	2302      	movs	r3, #2
  }
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	00100002 	.word	0x00100002
 800b434:	ffff0000 	.word	0xffff0000

0800b438 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b08c      	sub	sp, #48	; 0x30
 800b43c:	af02      	add	r7, sp, #8
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	607a      	str	r2, [r7, #4]
 800b442:	461a      	mov	r2, r3
 800b444:	460b      	mov	r3, r1
 800b446:	817b      	strh	r3, [r7, #10]
 800b448:	4613      	mov	r3, r2
 800b44a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b44c:	f7fb f8ee 	bl	800662c <HAL_GetTick>
 800b450:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b20      	cmp	r3, #32
 800b45c:	f040 820b 	bne.w	800b876 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	2319      	movs	r3, #25
 800b466:	2201      	movs	r2, #1
 800b468:	497c      	ldr	r1, [pc, #496]	; (800b65c <HAL_I2C_Master_Receive+0x224>)
 800b46a:	68f8      	ldr	r0, [r7, #12]
 800b46c:	f005 fc9a 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b470:	4603      	mov	r3, r0
 800b472:	2b00      	cmp	r3, #0
 800b474:	d001      	beq.n	800b47a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b476:	2302      	movs	r3, #2
 800b478:	e1fe      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b480:	2b01      	cmp	r3, #1
 800b482:	d101      	bne.n	800b488 <HAL_I2C_Master_Receive+0x50>
 800b484:	2302      	movs	r3, #2
 800b486:	e1f7      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d007      	beq.n	800b4ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0201 	orr.w	r2, r2, #1
 800b4ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2222      	movs	r2, #34	; 0x22
 800b4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2210      	movs	r2, #16
 800b4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	893a      	ldrh	r2, [r7, #8]
 800b4de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4e4:	b29a      	uxth	r2, r3
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	4a5c      	ldr	r2, [pc, #368]	; (800b660 <HAL_I2C_Master_Receive+0x228>)
 800b4ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b4f0:	8979      	ldrh	r1, [r7, #10]
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f005 f84e 	bl	8010598 <I2C_MasterRequestRead>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d001      	beq.n	800b506 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e1b8      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d113      	bne.n	800b536 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b50e:	2300      	movs	r3, #0
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	695b      	ldr	r3, [r3, #20]
 800b518:	617b      	str	r3, [r7, #20]
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	617b      	str	r3, [r7, #20]
 800b522:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	681a      	ldr	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e18c      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d11b      	bne.n	800b576 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b54c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b54e:	2300      	movs	r3, #0
 800b550:	61bb      	str	r3, [r7, #24]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	61bb      	str	r3, [r7, #24]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	699b      	ldr	r3, [r3, #24]
 800b560:	61bb      	str	r3, [r7, #24]
 800b562:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e16c      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d11b      	bne.n	800b5b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b58c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b59c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b59e:	2300      	movs	r3, #0
 800b5a0:	61fb      	str	r3, [r7, #28]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	695b      	ldr	r3, [r3, #20]
 800b5a8:	61fb      	str	r3, [r7, #28]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	699b      	ldr	r3, [r3, #24]
 800b5b0:	61fb      	str	r3, [r7, #28]
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	e14c      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	623b      	str	r3, [r7, #32]
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	695b      	ldr	r3, [r3, #20]
 800b5d0:	623b      	str	r3, [r7, #32]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	699b      	ldr	r3, [r3, #24]
 800b5d8:	623b      	str	r3, [r7, #32]
 800b5da:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800b5dc:	e138      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e2:	2b03      	cmp	r3, #3
 800b5e4:	f200 80f1 	bhi.w	800b7ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d123      	bne.n	800b638 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b5f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f005 fd9d 	bl	8011134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d001      	beq.n	800b604 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e139      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	691a      	ldr	r2, [r3, #16]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	1c5a      	adds	r2, r3, #1
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b620:	3b01      	subs	r3, #1
 800b622:	b29a      	uxth	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	3b01      	subs	r3, #1
 800b630:	b29a      	uxth	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b636:	e10b      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d14e      	bne.n	800b6de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b646:	2200      	movs	r2, #0
 800b648:	4906      	ldr	r1, [pc, #24]	; (800b664 <HAL_I2C_Master_Receive+0x22c>)
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f005 fbaa 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e10e      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
 800b65a:	bf00      	nop
 800b65c:	00100002 	.word	0x00100002
 800b660:	ffff0000 	.word	0xffff0000
 800b664:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681a      	ldr	r2, [r3, #0]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b676:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	b2d2      	uxtb	r2, r2
 800b684:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b68a:	1c5a      	adds	r2, r3, #1
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b694:	3b01      	subs	r3, #1
 800b696:	b29a      	uxth	r2, r3
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	691a      	ldr	r2, [r3, #16]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b4:	b2d2      	uxtb	r2, r2
 800b6b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6c6:	3b01      	subs	r3, #1
 800b6c8:	b29a      	uxth	r2, r3
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b6dc:	e0b8      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4966      	ldr	r1, [pc, #408]	; (800b880 <HAL_I2C_Master_Receive+0x448>)
 800b6e8:	68f8      	ldr	r0, [r7, #12]
 800b6ea:	f005 fb5b 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e0bf      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681a      	ldr	r2, [r3, #0]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b712:	b2d2      	uxtb	r2, r2
 800b714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b724:	3b01      	subs	r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b730:	b29b      	uxth	r3, r3
 800b732:	3b01      	subs	r3, #1
 800b734:	b29a      	uxth	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	9300      	str	r3, [sp, #0]
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	2200      	movs	r2, #0
 800b742:	494f      	ldr	r1, [pc, #316]	; (800b880 <HAL_I2C_Master_Receive+0x448>)
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f005 fb2d 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e091      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b762:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	691a      	ldr	r2, [r3, #16]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b780:	3b01      	subs	r3, #1
 800b782:	b29a      	uxth	r2, r3
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	3b01      	subs	r3, #1
 800b790:	b29a      	uxth	r2, r3
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	691a      	ldr	r2, [r3, #16]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a0:	b2d2      	uxtb	r2, r2
 800b7a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a8:	1c5a      	adds	r2, r3, #1
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b2:	3b01      	subs	r3, #1
 800b7b4:	b29a      	uxth	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b01      	subs	r3, #1
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b7c8:	e042      	b.n	800b850 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f005 fcb0 	bl	8011134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e04c      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	b2d2      	uxtb	r2, r2
 800b7ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	1c5a      	adds	r2, r3, #1
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b806:	b29b      	uxth	r3, r3
 800b808:	3b01      	subs	r3, #1
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	d118      	bne.n	800b850 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	691a      	ldr	r2, [r3, #16]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b828:	b2d2      	uxtb	r2, r2
 800b82a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b83a:	3b01      	subs	r3, #1
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b846:	b29b      	uxth	r3, r3
 800b848:	3b01      	subs	r3, #1
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b854:	2b00      	cmp	r3, #0
 800b856:	f47f aec2 	bne.w	800b5de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	e000      	b.n	800b878 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b876:	2302      	movs	r3, #2
  }
}
 800b878:	4618      	mov	r0, r3
 800b87a:	3728      	adds	r7, #40	; 0x28
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}
 800b880:	00010004 	.word	0x00010004

0800b884 <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b08a      	sub	sp, #40	; 0x28
 800b888:	af02      	add	r7, sp, #8
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	603b      	str	r3, [r7, #0]
 800b890:	4613      	mov	r3, r2
 800b892:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b894:	f7fa feca 	bl	800662c <HAL_GetTick>
 800b898:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	f040 80fb 	bne.w	800ba9e <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <HAL_I2C_Slave_Transmit+0x30>
 800b8ae:	88fb      	ldrh	r3, [r7, #6]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	e0f3      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d101      	bne.n	800b8c6 <HAL_I2C_Slave_Transmit+0x42>
 800b8c2:	2302      	movs	r3, #2
 800b8c4:	e0ec      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 0301 	and.w	r3, r3, #1
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d007      	beq.n	800b8ec <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f042 0201 	orr.w	r2, r2, #1
 800b8ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b8fa:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2221      	movs	r2, #33	; 0x21
 800b900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	88fa      	ldrh	r2, [r7, #6]
 800b91c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b922:	b29a      	uxth	r2, r3
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	4a5f      	ldr	r2, [pc, #380]	; (800baa8 <HAL_I2C_Slave_Transmit+0x224>)
 800b92c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b93c:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	9300      	str	r3, [sp, #0]
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2200      	movs	r2, #0
 800b946:	4959      	ldr	r1, [pc, #356]	; (800baac <HAL_I2C_Slave_Transmit+0x228>)
 800b948:	68f8      	ldr	r0, [r7, #12]
 800b94a:	f005 fa2b 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b94e:	4603      	mov	r3, r0
 800b950:	2b00      	cmp	r3, #0
 800b952:	d001      	beq.n	800b958 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e0a3      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b958:	2300      	movs	r3, #0
 800b95a:	617b      	str	r3, [r7, #20]
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	695b      	ldr	r3, [r3, #20]
 800b962:	617b      	str	r3, [r7, #20]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	697b      	ldr	r3, [r7, #20]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b976:	d165      	bne.n	800ba44 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	2200      	movs	r2, #0
 800b980:	494a      	ldr	r1, [pc, #296]	; (800baac <HAL_I2C_Slave_Transmit+0x228>)
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f005 fa0e 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800b988:	4603      	mov	r3, r0
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d001      	beq.n	800b992 <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e086      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b992:	2300      	movs	r3, #0
 800b994:	61bb      	str	r3, [r7, #24]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	61bb      	str	r3, [r7, #24]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	61bb      	str	r3, [r7, #24]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
    }

    while (hi2c->XferSize > 0U)
 800b9a8:	e04c      	b.n	800ba44 <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9aa:	69fa      	ldr	r2, [r7, #28]
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	68f8      	ldr	r0, [r7, #12]
 800b9b0:	f005 face 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d009      	beq.n	800b9ce <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9c8:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e068      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d2:	781a      	ldrb	r2, [r3, #0]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	b29a      	uxth	r2, r3
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b04      	cmp	r3, #4
 800ba0a:	d11b      	bne.n	800ba44 <HAL_I2C_Slave_Transmit+0x1c0>
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d017      	beq.n	800ba44 <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba18:	781a      	ldrb	r2, [r3, #0]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba24:	1c5a      	adds	r2, r3, #1
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	3b01      	subs	r3, #1
 800ba32:	b29a      	uxth	r2, r3
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1ae      	bne.n	800b9aa <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 800ba4c:	69fb      	ldr	r3, [r7, #28]
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 800ba58:	68f8      	ldr	r0, [r7, #12]
 800ba5a:	f005 f9a3 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800ba5e:	4603      	mov	r3, r0
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e01b      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ba70:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	2200      	movs	r2, #0
 800ba96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	e000      	b.n	800baa0 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ba9e:	2302      	movs	r3, #2
  }
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	ffff0000 	.word	0xffff0000
 800baac:	00010002 	.word	0x00010002

0800bab0 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b08a      	sub	sp, #40	; 0x28
 800bab4:	af02      	add	r7, sp, #8
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	4613      	mov	r3, r2
 800babe:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800bac0:	f7fa fdb4 	bl	800662c <HAL_GetTick>
 800bac4:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b20      	cmp	r3, #32
 800bad0:	f040 80ee 	bne.w	800bcb0 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d002      	beq.n	800bae0 <HAL_I2C_Slave_Receive+0x30>
 800bada:	88fb      	ldrh	r3, [r7, #6]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d101      	bne.n	800bae4 <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e0e6      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baea:	2b01      	cmp	r3, #1
 800baec:	d101      	bne.n	800baf2 <HAL_I2C_Slave_Receive+0x42>
 800baee:	2302      	movs	r3, #2
 800baf0:	e0df      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	2201      	movs	r2, #1
 800baf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d007      	beq.n	800bb18 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f042 0201 	orr.w	r2, r2, #1
 800bb16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681a      	ldr	r2, [r3, #0]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bb26:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2222      	movs	r2, #34	; 0x22
 800bb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	88fa      	ldrh	r2, [r7, #6]
 800bb48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4a59      	ldr	r2, [pc, #356]	; (800bcbc <HAL_I2C_Slave_Receive+0x20c>)
 800bb58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bb68:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	2200      	movs	r2, #0
 800bb72:	4953      	ldr	r1, [pc, #332]	; (800bcc0 <HAL_I2C_Slave_Receive+0x210>)
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f005 f915 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d001      	beq.n	800bb84 <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e096      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb84:	2300      	movs	r3, #0
 800bb86:	617b      	str	r3, [r7, #20]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	617b      	str	r3, [r7, #20]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	617b      	str	r3, [r7, #20]
 800bb98:	697b      	ldr	r3, [r7, #20]

    while (hi2c->XferSize > 0U)
 800bb9a:	e04e      	b.n	800bc3a <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb9c:	69fa      	ldr	r2, [r7, #28]
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	68f8      	ldr	r0, [r7, #12]
 800bba2:	f005 fac7 	bl	8011134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d009      	beq.n	800bbc0 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbba:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e078      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691a      	ldr	r2, [r3, #16]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd2:	1c5a      	adds	r2, r3, #1
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	b29a      	uxth	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	3b01      	subs	r3, #1
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	f003 0304 	and.w	r3, r3, #4
 800bbfc:	2b04      	cmp	r3, #4
 800bbfe:	d11c      	bne.n	800bc3a <HAL_I2C_Slave_Receive+0x18a>
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d018      	beq.n	800bc3a <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	691a      	ldr	r2, [r3, #16]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc12:	b2d2      	uxtb	r2, r2
 800bc14:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1a:	1c5a      	adds	r2, r3, #1
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc24:	3b01      	subs	r3, #1
 800bc26:	b29a      	uxth	r2, r3
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	3b01      	subs	r3, #1
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1ac      	bne.n	800bb9c <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc42:	69fa      	ldr	r2, [r7, #28]
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	68f8      	ldr	r0, [r7, #12]
 800bc48:	f005 fa04 	bl	8011054 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d009      	beq.n	800bc66 <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc60:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e025      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bc66:	2300      	movs	r3, #0
 800bc68:	61bb      	str	r3, [r7, #24]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f042 0201 	orr.w	r2, r2, #1
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	69bb      	ldr	r3, [r7, #24]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bcac:	2300      	movs	r3, #0
 800bcae:	e000      	b.n	800bcb2 <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 800bcb0:	2302      	movs	r3, #2
  }
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3720      	adds	r7, #32
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	ffff0000 	.word	0xffff0000
 800bcc0:	00010002 	.word	0x00010002

0800bcc4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b087      	sub	sp, #28
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	607a      	str	r2, [r7, #4]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	817b      	strh	r3, [r7, #10]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b20      	cmp	r3, #32
 800bce6:	f040 8085 	bne.w	800bdf4 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800bcea:	4b46      	ldr	r3, [pc, #280]	; (800be04 <HAL_I2C_Master_Transmit_IT+0x140>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	08db      	lsrs	r3, r3, #3
 800bcf0:	4a45      	ldr	r2, [pc, #276]	; (800be08 <HAL_I2C_Master_Transmit_IT+0x144>)
 800bcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcf6:	0a1a      	lsrs	r2, r3, #8
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009a      	lsls	r2, r3, #2
 800bd00:	4413      	add	r3, r2
 800bd02:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d116      	bne.n	800bd3e <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2200      	movs	r2, #0
 800bd14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	f043 0220 	orr.w	r2, r3, #32
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	e05b      	b.n	800bdf6 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	f003 0302 	and.w	r3, r3, #2
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d0db      	beq.n	800bd04 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	d101      	bne.n	800bd5a <HAL_I2C_Master_Transmit_IT+0x96>
 800bd56:	2302      	movs	r3, #2
 800bd58:	e04d      	b.n	800bdf6 <HAL_I2C_Master_Transmit_IT+0x132>
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f003 0301 	and.w	r3, r3, #1
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d007      	beq.n	800bd80 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f042 0201 	orr.w	r2, r2, #1
 800bd7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bd8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2221      	movs	r2, #33	; 0x21
 800bd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2210      	movs	r2, #16
 800bd9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2200      	movs	r2, #0
 800bda4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	893a      	ldrh	r2, [r7, #8]
 800bdb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdb6:	b29a      	uxth	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4a13      	ldr	r2, [pc, #76]	; (800be0c <HAL_I2C_Master_Transmit_IT+0x148>)
 800bdc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bdc2:	897a      	ldrh	r2, [r7, #10]
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685a      	ldr	r2, [r3, #4]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bdde:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdee:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e000      	b.n	800bdf6 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 800bdf4:	2302      	movs	r3, #2
  }
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop
 800be04:	20000058 	.word	0x20000058
 800be08:	14f8b589 	.word	0x14f8b589
 800be0c:	ffff0000 	.word	0xffff0000

0800be10 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800be10:	b480      	push	{r7}
 800be12:	b087      	sub	sp, #28
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	607a      	str	r2, [r7, #4]
 800be1a:	461a      	mov	r2, r3
 800be1c:	460b      	mov	r3, r1
 800be1e:	817b      	strh	r3, [r7, #10]
 800be20:	4613      	mov	r3, r2
 800be22:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800be24:	2300      	movs	r3, #0
 800be26:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b20      	cmp	r3, #32
 800be32:	f040 808d 	bne.w	800bf50 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800be36:	4b4a      	ldr	r3, [pc, #296]	; (800bf60 <HAL_I2C_Master_Receive_IT+0x150>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	08db      	lsrs	r3, r3, #3
 800be3c:	4a49      	ldr	r2, [pc, #292]	; (800bf64 <HAL_I2C_Master_Receive_IT+0x154>)
 800be3e:	fba2 2303 	umull	r2, r3, r2, r3
 800be42:	0a1a      	lsrs	r2, r3, #8
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	009a      	lsls	r2, r3, #2
 800be4c:	4413      	add	r3, r2
 800be4e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	3b01      	subs	r3, #1
 800be54:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d116      	bne.n	800be8a <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2220      	movs	r2, #32
 800be66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be76:	f043 0220 	orr.w	r2, r3, #32
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2200      	movs	r2, #0
 800be82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	e063      	b.n	800bf52 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	699b      	ldr	r3, [r3, #24]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d0db      	beq.n	800be50 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be9e:	2b01      	cmp	r3, #1
 800bea0:	d101      	bne.n	800bea6 <HAL_I2C_Master_Receive_IT+0x96>
 800bea2:	2302      	movs	r3, #2
 800bea4:	e055      	b.n	800bf52 <HAL_I2C_Master_Receive_IT+0x142>
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d007      	beq.n	800becc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681a      	ldr	r2, [r3, #0]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f042 0201 	orr.w	r2, r2, #1
 800beca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800beda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2222      	movs	r2, #34	; 0x22
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	2210      	movs	r2, #16
 800bee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2200      	movs	r2, #0
 800bef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	893a      	ldrh	r2, [r7, #8]
 800befc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf02:	b29a      	uxth	r2, r3
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	4a17      	ldr	r2, [pc, #92]	; (800bf68 <HAL_I2C_Master_Receive_IT+0x158>)
 800bf0c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800bf0e:	897a      	ldrh	r2, [r7, #10]
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800bf2a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bf3a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	681a      	ldr	r2, [r3, #0]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf4a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	e000      	b.n	800bf52 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 800bf50:	2302      	movs	r3, #2
  }
}
 800bf52:	4618      	mov	r0, r3
 800bf54:	371c      	adds	r7, #28
 800bf56:	46bd      	mov	sp, r7
 800bf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5c:	4770      	bx	lr
 800bf5e:	bf00      	nop
 800bf60:	20000058 	.word	0x20000058
 800bf64:	14f8b589 	.word	0x14f8b589
 800bf68:	ffff0000 	.word	0xffff0000

0800bf6c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b085      	sub	sp, #20
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d158      	bne.n	800c038 <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <HAL_I2C_Slave_Transmit_IT+0x26>
 800bf8c:	88fb      	ldrh	r3, [r7, #6]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d101      	bne.n	800bf96 <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 800bf92:	2301      	movs	r3, #1
 800bf94:	e051      	b.n	800c03a <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d101      	bne.n	800bfa4 <HAL_I2C_Slave_Transmit_IT+0x38>
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	e04a      	b.n	800c03a <HAL_I2C_Slave_Transmit_IT+0xce>
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0301 	and.w	r3, r3, #1
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d007      	beq.n	800bfca <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681a      	ldr	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f042 0201 	orr.w	r2, r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bfd8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2221      	movs	r2, #33	; 0x21
 800bfde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2220      	movs	r2, #32
 800bfe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	68ba      	ldr	r2, [r7, #8]
 800bff4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	88fa      	ldrh	r2, [r7, #6]
 800bffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c000:	b29a      	uxth	r2, r3
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a0f      	ldr	r2, [pc, #60]	; (800c048 <HAL_I2C_Slave_Transmit_IT+0xdc>)
 800c00a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c01a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	685a      	ldr	r2, [r3, #4]
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c032:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c034:	2300      	movs	r3, #0
 800c036:	e000      	b.n	800c03a <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c038:	2302      	movs	r3, #2
  }
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3714      	adds	r7, #20
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	ffff0000 	.word	0xffff0000

0800c04c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	4613      	mov	r3, r2
 800c058:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b20      	cmp	r3, #32
 800c064:	d158      	bne.n	800c118 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <HAL_I2C_Slave_Receive_IT+0x26>
 800c06c:	88fb      	ldrh	r3, [r7, #6]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e051      	b.n	800c11a <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d101      	bne.n	800c084 <HAL_I2C_Slave_Receive_IT+0x38>
 800c080:	2302      	movs	r3, #2
 800c082:	e04a      	b.n	800c11a <HAL_I2C_Slave_Receive_IT+0xce>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b01      	cmp	r3, #1
 800c098:	d007      	beq.n	800c0aa <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f042 0201 	orr.w	r2, r2, #1
 800c0a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c0b8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	2222      	movs	r2, #34	; 0x22
 800c0be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	88fa      	ldrh	r2, [r7, #6]
 800c0da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	4a0f      	ldr	r2, [pc, #60]	; (800c128 <HAL_I2C_Slave_Receive_IT+0xdc>)
 800c0ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c0fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c112:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800c114:	2300      	movs	r3, #0
 800c116:	e000      	b.n	800c11a <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800c118:	2302      	movs	r3, #2
  }
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	ffff0000 	.word	0xffff0000

0800c12c <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b086      	sub	sp, #24
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	607a      	str	r2, [r7, #4]
 800c136:	461a      	mov	r2, r3
 800c138:	460b      	mov	r3, r1
 800c13a:	817b      	strh	r3, [r7, #10]
 800c13c:	4613      	mov	r3, r2
 800c13e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c140:	2300      	movs	r3, #0
 800c142:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b20      	cmp	r3, #32
 800c14e:	f040 810d 	bne.w	800c36c <HAL_I2C_Master_Transmit_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c152:	4b89      	ldr	r3, [pc, #548]	; (800c378 <HAL_I2C_Master_Transmit_DMA+0x24c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	08db      	lsrs	r3, r3, #3
 800c158:	4a88      	ldr	r2, [pc, #544]	; (800c37c <HAL_I2C_Master_Transmit_DMA+0x250>)
 800c15a:	fba2 2303 	umull	r2, r3, r2, r3
 800c15e:	0a1a      	lsrs	r2, r3, #8
 800c160:	4613      	mov	r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	4413      	add	r3, r2
 800c166:	009a      	lsls	r2, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	3b01      	subs	r3, #1
 800c170:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d116      	bne.n	800c1a6 <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2220      	movs	r2, #32
 800c182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c192:	f043 0220 	orr.w	r2, r3, #32
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e0e3      	b.n	800c36e <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	699b      	ldr	r3, [r3, #24]
 800c1ac:	f003 0302 	and.w	r3, r3, #2
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d0db      	beq.n	800c16c <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d101      	bne.n	800c1c2 <HAL_I2C_Master_Transmit_DMA+0x96>
 800c1be:	2302      	movs	r3, #2
 800c1c0:	e0d5      	b.n	800c36e <HAL_I2C_Master_Transmit_DMA+0x242>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0301 	and.w	r3, r3, #1
 800c1d4:	2b01      	cmp	r3, #1
 800c1d6:	d007      	beq.n	800c1e8 <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f042 0201 	orr.w	r2, r2, #1
 800c1e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	681a      	ldr	r2, [r3, #0]
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2221      	movs	r2, #33	; 0x21
 800c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2210      	movs	r2, #16
 800c204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	893a      	ldrh	r2, [r7, #8]
 800c218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c21e:	b29a      	uxth	r2, r3
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4a56      	ldr	r2, [pc, #344]	; (800c380 <HAL_I2C_Master_Transmit_DMA+0x254>)
 800c228:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c22a:	897a      	ldrh	r2, [r7, #10]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c234:	2b00      	cmp	r3, #0
 800c236:	d07b      	beq.n	800c330 <HAL_I2C_Master_Transmit_DMA+0x204>
    {
      if (hi2c->hdmatx != NULL)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d02a      	beq.n	800c296 <HAL_I2C_Master_Transmit_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c244:	4a4f      	ldr	r2, [pc, #316]	; (800c384 <HAL_I2C_Master_Transmit_DMA+0x258>)
 800c246:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24c:	4a4e      	ldr	r2, [pc, #312]	; (800c388 <HAL_I2C_Master_Transmit_DMA+0x25c>)
 800c24e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c254:	2200      	movs	r2, #0
 800c256:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c25c:	2200      	movs	r2, #0
 800c25e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c264:	2200      	movs	r2, #0
 800c266:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c26c:	2200      	movs	r2, #0
 800c26e:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c278:	4619      	mov	r1, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3310      	adds	r3, #16
 800c280:	461a      	mov	r2, r3
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c286:	f7fb fc3a 	bl	8007afe <HAL_DMA_Start_IT>
 800c28a:	4603      	mov	r3, r0
 800c28c:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c28e:	7dfb      	ldrb	r3, [r7, #23]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d139      	bne.n	800c308 <HAL_I2C_Master_Transmit_DMA+0x1dc>
 800c294:	e013      	b.n	800c2be <HAL_I2C_Master_Transmit_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2220      	movs	r2, #32
 800c29a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2aa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	e057      	b.n	800c36e <HAL_I2C_Master_Transmit_DMA+0x242>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	685a      	ldr	r2, [r3, #4]
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c2d4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	685a      	ldr	r2, [r3, #4]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2e4:	605a      	str	r2, [r3, #4]

        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c2f4:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c304:	601a      	str	r2, [r3, #0]
 800c306:	e02f      	b.n	800c368 <HAL_I2C_Master_Transmit_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2220      	movs	r2, #32
 800c30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c31c:	f043 0210 	orr.w	r2, r3, #16
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	e01e      	b.n	800c36e <HAL_I2C_Master_Transmit_DMA+0x242>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c33e:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c34e:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2200      	movs	r2, #0
 800c354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685a      	ldr	r2, [r3, #4]
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c366:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	e000      	b.n	800c36e <HAL_I2C_Master_Transmit_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c36c:	2302      	movs	r3, #2
  }
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3718      	adds	r7, #24
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	20000058 	.word	0x20000058
 800c37c:	14f8b589 	.word	0x14f8b589
 800c380:	ffff0000 	.word	0xffff0000
 800c384:	08010a31 	.word	0x08010a31
 800c388:	08010bdb 	.word	0x08010bdb

0800c38c <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	461a      	mov	r2, r3
 800c398:	460b      	mov	r3, r1
 800c39a:	817b      	strh	r3, [r7, #10]
 800c39c:	4613      	mov	r3, r2
 800c39e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b20      	cmp	r3, #32
 800c3ae:	f040 810d 	bne.w	800c5cc <HAL_I2C_Master_Receive_DMA+0x240>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800c3b2:	4b89      	ldr	r3, [pc, #548]	; (800c5d8 <HAL_I2C_Master_Receive_DMA+0x24c>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	08db      	lsrs	r3, r3, #3
 800c3b8:	4a88      	ldr	r2, [pc, #544]	; (800c5dc <HAL_I2C_Master_Receive_DMA+0x250>)
 800c3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c3be:	0a1a      	lsrs	r2, r3, #8
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	4413      	add	r3, r2
 800c3c6:	009a      	lsls	r2, r3, #2
 800c3c8:	4413      	add	r3, r2
 800c3ca:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	3b01      	subs	r3, #1
 800c3d0:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d116      	bne.n	800c406 <HAL_I2C_Master_Receive_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f2:	f043 0220 	orr.w	r2, r3, #32
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c402:	2301      	movs	r3, #1
 800c404:	e0e3      	b.n	800c5ce <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	699b      	ldr	r3, [r3, #24]
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b02      	cmp	r3, #2
 800c412:	d0db      	beq.n	800c3cc <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d101      	bne.n	800c422 <HAL_I2C_Master_Receive_DMA+0x96>
 800c41e:	2302      	movs	r3, #2
 800c420:	e0d5      	b.n	800c5ce <HAL_I2C_Master_Receive_DMA+0x242>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2201      	movs	r2, #1
 800c426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b01      	cmp	r3, #1
 800c436:	d007      	beq.n	800c448 <HAL_I2C_Master_Receive_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0201 	orr.w	r2, r2, #1
 800c446:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c456:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2222      	movs	r2, #34	; 0x22
 800c45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2210      	movs	r2, #16
 800c464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2200      	movs	r2, #0
 800c46c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	893a      	ldrh	r2, [r7, #8]
 800c478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c47e:	b29a      	uxth	r2, r3
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4a56      	ldr	r2, [pc, #344]	; (800c5e0 <HAL_I2C_Master_Receive_DMA+0x254>)
 800c488:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800c48a:	897a      	ldrh	r2, [r7, #10]
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c494:	2b00      	cmp	r3, #0
 800c496:	d07b      	beq.n	800c590 <HAL_I2C_Master_Receive_DMA+0x204>
    {
      if (hi2c->hdmarx != NULL)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d02a      	beq.n	800c4f6 <HAL_I2C_Master_Receive_DMA+0x16a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	4a4f      	ldr	r2, [pc, #316]	; (800c5e4 <HAL_I2C_Master_Receive_DMA+0x258>)
 800c4a6:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ac:	4a4e      	ldr	r2, [pc, #312]	; (800c5e8 <HAL_I2C_Master_Receive_DMA+0x25c>)
 800c4ae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4bc:	2200      	movs	r2, #0
 800c4be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	3310      	adds	r3, #16
 800c4da:	4619      	mov	r1, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4e6:	f7fb fb0a 	bl	8007afe <HAL_DMA_Start_IT>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d139      	bne.n	800c568 <HAL_I2C_Master_Receive_DMA+0x1dc>
 800c4f4:	e013      	b.n	800c51e <HAL_I2C_Master_Receive_DMA+0x192>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2220      	movs	r2, #32
 800c4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c50a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	e057      	b.n	800c5ce <HAL_I2C_Master_Receive_DMA+0x242>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c52c:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c53c:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c554:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c564:	605a      	str	r2, [r3, #4]
 800c566:	e02f      	b.n	800c5c8 <HAL_I2C_Master_Receive_DMA+0x23c>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2220      	movs	r2, #32
 800c56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	2200      	movs	r2, #0
 800c574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57c:	f043 0210 	orr.w	r2, r3, #16
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c58c:	2301      	movs	r3, #1
 800c58e:	e01e      	b.n	800c5ce <HAL_I2C_Master_Receive_DMA+0x242>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	685a      	ldr	r2, [r3, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800c5a6:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c5b6:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c5c6:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	e000      	b.n	800c5ce <HAL_I2C_Master_Receive_DMA+0x242>
  }
  else
  {
    return HAL_BUSY;
 800c5cc:	2302      	movs	r3, #2
  }
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3718      	adds	r7, #24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000058 	.word	0x20000058
 800c5dc:	14f8b589 	.word	0x14f8b589
 800c5e0:	ffff0000 	.word	0xffff0000
 800c5e4:	08010a31 	.word	0x08010a31
 800c5e8:	08010bdb 	.word	0x08010bdb

0800c5ec <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b086      	sub	sp, #24
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	60f8      	str	r0, [r7, #12]
 800c5f4:	60b9      	str	r1, [r7, #8]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b20      	cmp	r3, #32
 800c604:	f040 80b8 	bne.w	800c778 <HAL_I2C_Slave_Transmit_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800c60e:	88fb      	ldrh	r3, [r7, #6]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <HAL_I2C_Slave_Transmit_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e0b0      	b.n	800c77a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d101      	bne.n	800c626 <HAL_I2C_Slave_Transmit_DMA+0x3a>
 800c622:	2302      	movs	r3, #2
 800c624:	e0a9      	b.n	800c77a <HAL_I2C_Slave_Transmit_DMA+0x18e>
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 0301 	and.w	r3, r3, #1
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d007      	beq.n	800c64c <HAL_I2C_Slave_Transmit_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681a      	ldr	r2, [r3, #0]
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f042 0201 	orr.w	r2, r2, #1
 800c64a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c65a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2221      	movs	r2, #33	; 0x21
 800c660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2220      	movs	r2, #32
 800c668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2200      	movs	r2, #0
 800c670:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	88fa      	ldrh	r2, [r7, #6]
 800c67c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c682:	b29a      	uxth	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4a3e      	ldr	r2, [pc, #248]	; (800c784 <HAL_I2C_Slave_Transmit_DMA+0x198>)
 800c68c:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c692:	2b00      	cmp	r3, #0
 800c694:	d02a      	beq.n	800c6ec <HAL_I2C_Slave_Transmit_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69a:	4a3b      	ldr	r2, [pc, #236]	; (800c788 <HAL_I2C_Slave_Transmit_DMA+0x19c>)
 800c69c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a2:	4a3a      	ldr	r2, [pc, #232]	; (800c78c <HAL_I2C_Slave_Transmit_DMA+0x1a0>)
 800c6a4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferM1CpltCallback = NULL;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmatx->XferAbortCallback = NULL;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3310      	adds	r3, #16
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c6dc:	f7fb fa0f 	bl	8007afe <HAL_DMA_Start_IT>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c6e4:	7dfb      	ldrb	r3, [r7, #23]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d132      	bne.n	800c750 <HAL_I2C_Slave_Transmit_DMA+0x164>
 800c6ea:	e013      	b.n	800c714 <HAL_I2C_Slave_Transmit_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2228      	movs	r2, #40	; 0x28
 800c6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c700:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e032      	b.n	800c77a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c722:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	685a      	ldr	r2, [r3, #4]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c73a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c74a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	e014      	b.n	800c77a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2220      	movs	r2, #32
 800c754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c764:	f043 0210 	orr.w	r2, r3, #16
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
 800c776:	e000      	b.n	800c77a <HAL_I2C_Slave_Transmit_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c778:	2302      	movs	r3, #2
  }
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3718      	adds	r7, #24
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
 800c782:	bf00      	nop
 800c784:	ffff0000 	.word	0xffff0000
 800c788:	08010a31 	.word	0x08010a31
 800c78c:	08010bdb 	.word	0x08010bdb

0800c790 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	4613      	mov	r3, r2
 800c79c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	2b20      	cmp	r3, #32
 800c7a8:	f040 80b8 	bne.w	800c91c <HAL_I2C_Slave_Receive_DMA+0x18c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d002      	beq.n	800c7b8 <HAL_I2C_Slave_Receive_DMA+0x28>
 800c7b2:	88fb      	ldrh	r3, [r7, #6]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d101      	bne.n	800c7bc <HAL_I2C_Slave_Receive_DMA+0x2c>
    {
      return  HAL_ERROR;
 800c7b8:	2301      	movs	r3, #1
 800c7ba:	e0b0      	b.n	800c91e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d101      	bne.n	800c7ca <HAL_I2C_Slave_Receive_DMA+0x3a>
 800c7c6:	2302      	movs	r3, #2
 800c7c8:	e0a9      	b.n	800c91e <HAL_I2C_Slave_Receive_DMA+0x18e>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d007      	beq.n	800c7f0 <HAL_I2C_Slave_Receive_DMA+0x60>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0201 	orr.w	r2, r2, #1
 800c7ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2222      	movs	r2, #34	; 0x22
 800c804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2220      	movs	r2, #32
 800c80c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	88fa      	ldrh	r2, [r7, #6]
 800c820:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c826:	b29a      	uxth	r2, r3
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4a3e      	ldr	r2, [pc, #248]	; (800c928 <HAL_I2C_Slave_Receive_DMA+0x198>)
 800c830:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c836:	2b00      	cmp	r3, #0
 800c838:	d02a      	beq.n	800c890 <HAL_I2C_Slave_Receive_DMA+0x100>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83e:	4a3b      	ldr	r2, [pc, #236]	; (800c92c <HAL_I2C_Slave_Receive_DMA+0x19c>)
 800c840:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	4a3a      	ldr	r2, [pc, #232]	; (800c930 <HAL_I2C_Slave_Receive_DMA+0x1a0>)
 800c848:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c84e:	2200      	movs	r2, #0
 800c850:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c856:	2200      	movs	r2, #0
 800c858:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85e:	2200      	movs	r2, #0
 800c860:	649a      	str	r2, [r3, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c866:	2200      	movs	r2, #0
 800c868:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3310      	adds	r3, #16
 800c874:	4619      	mov	r1, r3
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c87a:	461a      	mov	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c880:	f7fb f93d 	bl	8007afe <HAL_DMA_Start_IT>
 800c884:	4603      	mov	r3, r0
 800c886:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800c888:	7dfb      	ldrb	r3, [r7, #23]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d132      	bne.n	800c8f4 <HAL_I2C_Slave_Receive_DMA+0x164>
 800c88e:	e013      	b.n	800c8b8 <HAL_I2C_Slave_Receive_DMA+0x128>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2228      	movs	r2, #40	; 0x28
 800c894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2200      	movs	r2, #0
 800c89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8a4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e032      	b.n	800c91e <HAL_I2C_Slave_Receive_DMA+0x18e>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	681a      	ldr	r2, [r3, #0]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c8c6:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800c8de:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ee:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e014      	b.n	800c91e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2200      	movs	r2, #0
 800c900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	f043 0210 	orr.w	r2, r3, #16
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c918:	2301      	movs	r3, #1
 800c91a:	e000      	b.n	800c91e <HAL_I2C_Slave_Receive_DMA+0x18e>
    }
  }
  else
  {
    return HAL_BUSY;
 800c91c:	2302      	movs	r3, #2
  }
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	ffff0000 	.word	0xffff0000
 800c92c:	08010a31 	.word	0x08010a31
 800c930:	08010bdb 	.word	0x08010bdb

0800c934 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af02      	add	r7, sp, #8
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	4608      	mov	r0, r1
 800c93e:	4611      	mov	r1, r2
 800c940:	461a      	mov	r2, r3
 800c942:	4603      	mov	r3, r0
 800c944:	817b      	strh	r3, [r7, #10]
 800c946:	460b      	mov	r3, r1
 800c948:	813b      	strh	r3, [r7, #8]
 800c94a:	4613      	mov	r3, r2
 800c94c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c94e:	f7f9 fe6d 	bl	800662c <HAL_GetTick>
 800c952:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	f040 80d9 	bne.w	800cb14 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2319      	movs	r3, #25
 800c968:	2201      	movs	r2, #1
 800c96a:	496d      	ldr	r1, [pc, #436]	; (800cb20 <HAL_I2C_Mem_Write+0x1ec>)
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f004 fa19 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d001      	beq.n	800c97c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c978:	2302      	movs	r3, #2
 800c97a:	e0cc      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c982:	2b01      	cmp	r3, #1
 800c984:	d101      	bne.n	800c98a <HAL_I2C_Mem_Write+0x56>
 800c986:	2302      	movs	r3, #2
 800c988:	e0c5      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2201      	movs	r2, #1
 800c98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0301 	and.w	r3, r3, #1
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d007      	beq.n	800c9b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f042 0201 	orr.w	r2, r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c9be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2221      	movs	r2, #33	; 0x21
 800c9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2240      	movs	r2, #64	; 0x40
 800c9cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6a3a      	ldr	r2, [r7, #32]
 800c9da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9e6:	b29a      	uxth	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	4a4d      	ldr	r2, [pc, #308]	; (800cb24 <HAL_I2C_Mem_Write+0x1f0>)
 800c9f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c9f2:	88f8      	ldrh	r0, [r7, #6]
 800c9f4:	893a      	ldrh	r2, [r7, #8]
 800c9f6:	8979      	ldrh	r1, [r7, #10]
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	9301      	str	r3, [sp, #4]
 800c9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	4603      	mov	r3, r0
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f003 fe96 	bl	8010734 <I2C_RequestMemoryWrite>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d052      	beq.n	800cab4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ca0e:	2301      	movs	r3, #1
 800ca10:	e081      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca12:	697a      	ldr	r2, [r7, #20]
 800ca14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f004 fa9a 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00d      	beq.n	800ca3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca26:	2b04      	cmp	r3, #4
 800ca28:	d107      	bne.n	800ca3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e06b      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca42:	781a      	ldrb	r2, [r3, #0]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	b29a      	uxth	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	3b01      	subs	r3, #1
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	695b      	ldr	r3, [r3, #20]
 800ca74:	f003 0304 	and.w	r3, r3, #4
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	d11b      	bne.n	800cab4 <HAL_I2C_Mem_Write+0x180>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d017      	beq.n	800cab4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca88:	781a      	ldrb	r2, [r3, #0]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca94:	1c5a      	adds	r2, r3, #1
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca9e:	3b01      	subs	r3, #1
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800caaa:	b29b      	uxth	r3, r3
 800caac:	3b01      	subs	r3, #1
 800caae:	b29a      	uxth	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1aa      	bne.n	800ca12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cabc:	697a      	ldr	r2, [r7, #20]
 800cabe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f004 fa86 	bl	8010fd2 <I2C_WaitOnBTFFlagUntilTimeout>
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d00d      	beq.n	800cae8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	d107      	bne.n	800cae4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	681a      	ldr	r2, [r3, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cae2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e016      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	681a      	ldr	r2, [r3, #0]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800caf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e000      	b.n	800cb16 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800cb14:	2302      	movs	r3, #2
  }
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	00100002 	.word	0x00100002
 800cb24:	ffff0000 	.word	0xffff0000

0800cb28 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b08c      	sub	sp, #48	; 0x30
 800cb2c:	af02      	add	r7, sp, #8
 800cb2e:	60f8      	str	r0, [r7, #12]
 800cb30:	4608      	mov	r0, r1
 800cb32:	4611      	mov	r1, r2
 800cb34:	461a      	mov	r2, r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	817b      	strh	r3, [r7, #10]
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	813b      	strh	r3, [r7, #8]
 800cb3e:	4613      	mov	r3, r2
 800cb40:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb42:	f7f9 fd73 	bl	800662c <HAL_GetTick>
 800cb46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	2b20      	cmp	r3, #32
 800cb52:	f040 8208 	bne.w	800cf66 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	2319      	movs	r3, #25
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	497b      	ldr	r1, [pc, #492]	; (800cd4c <HAL_I2C_Mem_Read+0x224>)
 800cb60:	68f8      	ldr	r0, [r7, #12]
 800cb62:	f004 f91f 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	e1fb      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d101      	bne.n	800cb7e <HAL_I2C_Mem_Read+0x56>
 800cb7a:	2302      	movs	r3, #2
 800cb7c:	e1f4      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2201      	movs	r2, #1
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0301 	and.w	r3, r3, #1
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d007      	beq.n	800cba4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0201 	orr.w	r2, r2, #1
 800cba2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbb2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2222      	movs	r2, #34	; 0x22
 800cbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	2240      	movs	r2, #64	; 0x40
 800cbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cbd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	4a5b      	ldr	r2, [pc, #364]	; (800cd50 <HAL_I2C_Mem_Read+0x228>)
 800cbe4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cbe6:	88f8      	ldrh	r0, [r7, #6]
 800cbe8:	893a      	ldrh	r2, [r7, #8]
 800cbea:	8979      	ldrh	r1, [r7, #10]
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	9301      	str	r3, [sp, #4]
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	9300      	str	r3, [sp, #0]
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f003 fe32 	bl	8010860 <I2C_RequestMemoryRead>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	e1b0      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d113      	bne.n	800cc36 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	695b      	ldr	r3, [r3, #20]
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	699b      	ldr	r3, [r3, #24]
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	e184      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d11b      	bne.n	800cc76 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc4e:	2300      	movs	r3, #0
 800cc50:	61bb      	str	r3, [r7, #24]
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	695b      	ldr	r3, [r3, #20]
 800cc58:	61bb      	str	r3, [r7, #24]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	699b      	ldr	r3, [r3, #24]
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	e164      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc7a:	2b02      	cmp	r3, #2
 800cc7c:	d11b      	bne.n	800ccb6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc9e:	2300      	movs	r3, #0
 800cca0:	61fb      	str	r3, [r7, #28]
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	695b      	ldr	r3, [r3, #20]
 800cca8:	61fb      	str	r3, [r7, #28]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	699b      	ldr	r3, [r3, #24]
 800ccb0:	61fb      	str	r3, [r7, #28]
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	e144      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	623b      	str	r3, [r7, #32]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	695b      	ldr	r3, [r3, #20]
 800ccc0:	623b      	str	r3, [r7, #32]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	699b      	ldr	r3, [r3, #24]
 800ccc8:	623b      	str	r3, [r7, #32]
 800ccca:	6a3b      	ldr	r3, [r7, #32]
    }

    while (hi2c->XferSize > 0U)
 800cccc:	e138      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	f200 80f1 	bhi.w	800ceba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d123      	bne.n	800cd28 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cce4:	68f8      	ldr	r0, [r7, #12]
 800cce6:	f004 fa25 	bl	8011134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d001      	beq.n	800ccf4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e139      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	691a      	ldr	r2, [r3, #16]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd06:	1c5a      	adds	r2, r3, #1
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd10:	3b01      	subs	r3, #1
 800cd12:	b29a      	uxth	r2, r3
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3b01      	subs	r3, #1
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd26:	e10b      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d14e      	bne.n	800cdce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	9300      	str	r3, [sp, #0]
 800cd34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd36:	2200      	movs	r2, #0
 800cd38:	4906      	ldr	r1, [pc, #24]	; (800cd54 <HAL_I2C_Mem_Read+0x22c>)
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f004 f832 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800cd40:	4603      	mov	r3, r0
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d008      	beq.n	800cd58 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e10e      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
 800cd4a:	bf00      	nop
 800cd4c:	00100002 	.word	0x00100002
 800cd50:	ffff0000 	.word	0xffff0000
 800cd54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	691a      	ldr	r2, [r3, #16]
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd72:	b2d2      	uxtb	r2, r2
 800cd74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd84:	3b01      	subs	r3, #1
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	691a      	ldr	r2, [r3, #16]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda4:	b2d2      	uxtb	r2, r2
 800cda6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	1c5a      	adds	r2, r3, #1
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	3b01      	subs	r3, #1
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdcc:	e0b8      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4966      	ldr	r1, [pc, #408]	; (800cf70 <HAL_I2C_Mem_Read+0x448>)
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f003 ffe3 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d001      	beq.n	800cde8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e0bf      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	691a      	ldr	r2, [r3, #16]
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce14:	3b01      	subs	r3, #1
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce20:	b29b      	uxth	r3, r3
 800ce22:	3b01      	subs	r3, #1
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2c:	9300      	str	r3, [sp, #0]
 800ce2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce30:	2200      	movs	r2, #0
 800ce32:	494f      	ldr	r1, [pc, #316]	; (800cf70 <HAL_I2C_Mem_Read+0x448>)
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	f003 ffb5 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d001      	beq.n	800ce44 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e091      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	681a      	ldr	r2, [r3, #0]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	691a      	ldr	r2, [r3, #16]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce5e:	b2d2      	uxtb	r2, r2
 800ce60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce66:	1c5a      	adds	r2, r3, #1
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce70:	3b01      	subs	r3, #1
 800ce72:	b29a      	uxth	r2, r3
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce7c:	b29b      	uxth	r3, r3
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	691a      	ldr	r2, [r3, #16]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce90:	b2d2      	uxtb	r2, r2
 800ce92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce98:	1c5a      	adds	r2, r3, #1
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cea2:	3b01      	subs	r3, #1
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ceb8:	e042      	b.n	800cf40 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ceba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cebc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cebe:	68f8      	ldr	r0, [r7, #12]
 800cec0:	f004 f938 	bl	8011134 <I2C_WaitOnRXNEFlagUntilTimeout>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e04c      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	691a      	ldr	r2, [r3, #16]
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced8:	b2d2      	uxtb	r2, r2
 800ceda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee0:	1c5a      	adds	r2, r3, #1
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ceea:	3b01      	subs	r3, #1
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	3b01      	subs	r3, #1
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b04      	cmp	r3, #4
 800cf0c:	d118      	bne.n	800cf40 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	691a      	ldr	r2, [r3, #16]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	b2d2      	uxtb	r2, r2
 800cf1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf20:	1c5a      	adds	r2, r3, #1
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2a:	3b01      	subs	r3, #1
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	b29a      	uxth	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f47f aec2 	bne.w	800ccce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cf62:	2300      	movs	r3, #0
 800cf64:	e000      	b.n	800cf68 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cf66:	2302      	movs	r3, #2
  }
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3728      	adds	r7, #40	; 0x28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	00010004 	.word	0x00010004

0800cf74 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	4608      	mov	r0, r1
 800cf7e:	4611      	mov	r1, r2
 800cf80:	461a      	mov	r2, r3
 800cf82:	4603      	mov	r3, r0
 800cf84:	817b      	strh	r3, [r7, #10]
 800cf86:	460b      	mov	r3, r1
 800cf88:	813b      	strh	r3, [r7, #8]
 800cf8a:	4613      	mov	r3, r2
 800cf8c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf98:	b2db      	uxtb	r3, r3
 800cf9a:	2b20      	cmp	r3, #32
 800cf9c:	f040 808e 	bne.w	800d0bc <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800cfa0:	4b4a      	ldr	r3, [pc, #296]	; (800d0cc <HAL_I2C_Mem_Write_IT+0x158>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	08db      	lsrs	r3, r3, #3
 800cfa6:	4a4a      	ldr	r2, [pc, #296]	; (800d0d0 <HAL_I2C_Mem_Write_IT+0x15c>)
 800cfa8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfac:	0a1a      	lsrs	r2, r3, #8
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009a      	lsls	r2, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d116      	bne.n	800cff4 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	2220      	movs	r2, #32
 800cfd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfe0:	f043 0220 	orr.w	r2, r3, #32
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800cff0:	2301      	movs	r3, #1
 800cff2:	e064      	b.n	800d0be <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	699b      	ldr	r3, [r3, #24]
 800cffa:	f003 0302 	and.w	r3, r3, #2
 800cffe:	2b02      	cmp	r3, #2
 800d000:	d0db      	beq.n	800cfba <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d008:	2b01      	cmp	r3, #1
 800d00a:	d101      	bne.n	800d010 <HAL_I2C_Mem_Write_IT+0x9c>
 800d00c:	2302      	movs	r3, #2
 800d00e:	e056      	b.n	800d0be <HAL_I2C_Mem_Write_IT+0x14a>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2201      	movs	r2, #1
 800d014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b01      	cmp	r3, #1
 800d024:	d007      	beq.n	800d036 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f042 0201 	orr.w	r2, r2, #1
 800d034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d044:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2221      	movs	r2, #33	; 0x21
 800d04a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2240      	movs	r2, #64	; 0x40
 800d052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6a3a      	ldr	r2, [r7, #32]
 800d060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d06c:	b29a      	uxth	r2, r3
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	4a17      	ldr	r2, [pc, #92]	; (800d0d4 <HAL_I2C_Mem_Write_IT+0x160>)
 800d076:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d078:	897a      	ldrh	r2, [r7, #10]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d07e:	893a      	ldrh	r2, [r7, #8]
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d084:	88fa      	ldrh	r2, [r7, #6]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2200      	movs	r2, #0
 800d08e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d09e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	685a      	ldr	r2, [r3, #4]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d0b6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e000      	b.n	800d0be <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800d0bc:	2302      	movs	r3, #2
  }
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	371c      	adds	r7, #28
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	20000058 	.word	0x20000058
 800d0d0:	14f8b589 	.word	0x14f8b589
 800d0d4:	ffff0000 	.word	0xffff0000

0800d0d8 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	817b      	strh	r3, [r7, #10]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	813b      	strh	r3, [r7, #8]
 800d0ee:	4613      	mov	r3, r2
 800d0f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	2b20      	cmp	r3, #32
 800d100:	f040 809a 	bne.w	800d238 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d104:	4b50      	ldr	r3, [pc, #320]	; (800d248 <HAL_I2C_Mem_Read_IT+0x170>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	08db      	lsrs	r3, r3, #3
 800d10a:	4a50      	ldr	r2, [pc, #320]	; (800d24c <HAL_I2C_Mem_Read_IT+0x174>)
 800d10c:	fba2 2303 	umull	r2, r3, r2, r3
 800d110:	0a1a      	lsrs	r2, r3, #8
 800d112:	4613      	mov	r3, r2
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	4413      	add	r3, r2
 800d118:	009a      	lsls	r2, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	3b01      	subs	r3, #1
 800d122:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d116      	bne.n	800d158 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2220      	movs	r2, #32
 800d134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d144:	f043 0220 	orr.w	r2, r3, #32
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	e070      	b.n	800d23a <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	699b      	ldr	r3, [r3, #24]
 800d15e:	f003 0302 	and.w	r3, r3, #2
 800d162:	2b02      	cmp	r3, #2
 800d164:	d0db      	beq.n	800d11e <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d101      	bne.n	800d174 <HAL_I2C_Mem_Read_IT+0x9c>
 800d170:	2302      	movs	r3, #2
 800d172:	e062      	b.n	800d23a <HAL_I2C_Mem_Read_IT+0x162>
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0301 	and.w	r3, r3, #1
 800d186:	2b01      	cmp	r3, #1
 800d188:	d007      	beq.n	800d19a <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f042 0201 	orr.w	r2, r2, #1
 800d198:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1a8:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2222      	movs	r2, #34	; 0x22
 800d1ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2240      	movs	r2, #64	; 0x40
 800d1b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	6a3a      	ldr	r2, [r7, #32]
 800d1c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	4a1d      	ldr	r2, [pc, #116]	; (800d250 <HAL_I2C_Mem_Read_IT+0x178>)
 800d1da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d1dc:	897a      	ldrh	r2, [r7, #10]
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d1e2:	893a      	ldrh	r2, [r7, #8]
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d1e8:	88fa      	ldrh	r2, [r7, #6]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d202:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d212:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d220:	2b00      	cmp	r3, #0
 800d222:	d007      	beq.n	800d234 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	685a      	ldr	r2, [r3, #4]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800d232:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	e000      	b.n	800d23a <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 800d238:	2302      	movs	r3, #2
  }
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	371c      	adds	r7, #28
 800d23e:	46bd      	mov	sp, r7
 800d240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d244:	4770      	bx	lr
 800d246:	bf00      	nop
 800d248:	20000058 	.word	0x20000058
 800d24c:	14f8b589 	.word	0x14f8b589
 800d250:	ffff0000 	.word	0xffff0000

0800d254 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08a      	sub	sp, #40	; 0x28
 800d258:	af02      	add	r7, sp, #8
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	4608      	mov	r0, r1
 800d25e:	4611      	mov	r1, r2
 800d260:	461a      	mov	r2, r3
 800d262:	4603      	mov	r3, r0
 800d264:	817b      	strh	r3, [r7, #10]
 800d266:	460b      	mov	r3, r1
 800d268:	813b      	strh	r3, [r7, #8]
 800d26a:	4613      	mov	r3, r2
 800d26c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800d26e:	2300      	movs	r3, #0
 800d270:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d272:	f7f9 f9db 	bl	800662c <HAL_GetTick>
 800d276:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	2b20      	cmp	r3, #32
 800d282:	f040 8145 	bne.w	800d510 <HAL_I2C_Mem_Write_DMA+0x2bc>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d286:	4b9d      	ldr	r3, [pc, #628]	; (800d4fc <HAL_I2C_Mem_Write_DMA+0x2a8>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	08db      	lsrs	r3, r3, #3
 800d28c:	4a9c      	ldr	r2, [pc, #624]	; (800d500 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800d28e:	fba2 2303 	umull	r2, r3, r2, r3
 800d292:	0a1a      	lsrs	r2, r3, #8
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009a      	lsls	r2, r3, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d116      	bne.n	800d2da <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c6:	f043 0220 	orr.w	r2, r3, #32
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e11b      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	f003 0302 	and.w	r3, r3, #2
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d0db      	beq.n	800d2a0 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d101      	bne.n	800d2f6 <HAL_I2C_Mem_Write_DMA+0xa2>
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	e10d      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d007      	beq.n	800d31c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f042 0201 	orr.w	r2, r2, #1
 800d31a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d32a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2221      	movs	r2, #33	; 0x21
 800d330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2240      	movs	r2, #64	; 0x40
 800d338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d34c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d352:	b29a      	uxth	r2, r3
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	4a6a      	ldr	r2, [pc, #424]	; (800d504 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d35e:	897a      	ldrh	r2, [r7, #10]
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d364:	893a      	ldrh	r2, [r7, #8]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d36a:	88fa      	ldrh	r2, [r7, #6]
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	f000 80a9 	beq.w	800d4d2 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d384:	2b00      	cmp	r3, #0
 800d386:	d02a      	beq.n	800d3de <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d38c:	4a5e      	ldr	r2, [pc, #376]	; (800d508 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800d38e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d394:	4a5d      	ldr	r2, [pc, #372]	; (800d50c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800d396:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39c:	2200      	movs	r2, #0
 800d39e:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3310      	adds	r3, #16
 800d3c8:	461a      	mov	r2, r3
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3ce:	f7fa fb96 	bl	8007afe <HAL_DMA_Start_IT>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d3d6:	7efb      	ldrb	r3, [r7, #27]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d166      	bne.n	800d4aa <HAL_I2C_Mem_Write_DMA+0x256>
 800d3dc:	e013      	b.n	800d406 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2220      	movs	r2, #32
 800d3e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e085      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d406:	88f8      	ldrh	r0, [r7, #6]
 800d408:	893a      	ldrh	r2, [r7, #8]
 800d40a:	8979      	ldrh	r1, [r7, #10]
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	9301      	str	r3, [sp, #4]
 800d410:	2323      	movs	r3, #35	; 0x23
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	4603      	mov	r3, r0
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f003 f98c 	bl	8010734 <I2C_RequestMemoryWrite>
 800d41c:	4603      	mov	r3, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d022      	beq.n	800d468 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d426:	4618      	mov	r0, r3
 800d428:	f7fa fc31 	bl	8007c8e <HAL_DMA_Abort_IT>
 800d42c:	4603      	mov	r3, r0
 800d42e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d434:	2200      	movs	r2, #0
 800d436:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d446:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2200      	movs	r2, #0
 800d44c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2200      	movs	r2, #0
 800d452:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	681a      	ldr	r2, [r3, #0]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f022 0201 	bic.w	r2, r2, #1
 800d462:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	e054      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d468:	2300      	movs	r3, #0
 800d46a:	613b      	str	r3, [r7, #16]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	695b      	ldr	r3, [r3, #20]
 800d472:	613b      	str	r3, [r7, #16]
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	613b      	str	r3, [r7, #16]
 800d47c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	2200      	movs	r2, #0
 800d482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685a      	ldr	r2, [r3, #4]
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d494:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	685a      	ldr	r2, [r3, #4]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4a4:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e033      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2220      	movs	r2, #32
 800d4ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4be:	f043 0210 	orr.w	r2, r3, #16
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e01f      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2220      	movs	r2, #32
 800d4d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e00b      	b.n	800d512 <HAL_I2C_Mem_Write_DMA+0x2be>
 800d4fa:	bf00      	nop
 800d4fc:	20000058 	.word	0x20000058
 800d500:	14f8b589 	.word	0x14f8b589
 800d504:	ffff0000 	.word	0xffff0000
 800d508:	08010a31 	.word	0x08010a31
 800d50c:	08010bdb 	.word	0x08010bdb
    }
  }
  else
  {
    return HAL_BUSY;
 800d510:	2302      	movs	r3, #2
  }
}
 800d512:	4618      	mov	r0, r3
 800d514:	3720      	adds	r7, #32
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b08c      	sub	sp, #48	; 0x30
 800d51e:	af02      	add	r7, sp, #8
 800d520:	60f8      	str	r0, [r7, #12]
 800d522:	4608      	mov	r0, r1
 800d524:	4611      	mov	r1, r2
 800d526:	461a      	mov	r2, r3
 800d528:	4603      	mov	r3, r0
 800d52a:	817b      	strh	r3, [r7, #10]
 800d52c:	460b      	mov	r3, r1
 800d52e:	813b      	strh	r3, [r7, #8]
 800d530:	4613      	mov	r3, r2
 800d532:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d534:	f7f9 f87a 	bl	800662c <HAL_GetTick>
 800d538:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 800d53a:	2300      	movs	r3, #0
 800d53c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b20      	cmp	r3, #32
 800d548:	f040 8175 	bne.w	800d836 <HAL_I2C_Mem_Read_DMA+0x31c>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800d54c:	4b94      	ldr	r3, [pc, #592]	; (800d7a0 <HAL_I2C_Mem_Read_DMA+0x286>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	08db      	lsrs	r3, r3, #3
 800d552:	4a94      	ldr	r2, [pc, #592]	; (800d7a4 <HAL_I2C_Mem_Read_DMA+0x28a>)
 800d554:	fba2 2303 	umull	r2, r3, r2, r3
 800d558:	0a1a      	lsrs	r2, r3, #8
 800d55a:	4613      	mov	r3, r2
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	009a      	lsls	r2, r3, #2
 800d562:	4413      	add	r3, r2
 800d564:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	3b01      	subs	r3, #1
 800d56a:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800d56c:	69fb      	ldr	r3, [r7, #28]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d116      	bne.n	800d5a0 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2200      	movs	r2, #0
 800d576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2220      	movs	r2, #32
 800d57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2200      	movs	r2, #0
 800d584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58c:	f043 0220 	orr.w	r2, r3, #32
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2200      	movs	r2, #0
 800d598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e14b      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	699b      	ldr	r3, [r3, #24]
 800d5a6:	f003 0302 	and.w	r3, r3, #2
 800d5aa:	2b02      	cmp	r3, #2
 800d5ac:	d0db      	beq.n	800d566 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5b4:	2b01      	cmp	r3, #1
 800d5b6:	d101      	bne.n	800d5bc <HAL_I2C_Mem_Read_DMA+0xa2>
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	e13d      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2201      	movs	r2, #1
 800d5c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	f003 0301 	and.w	r3, r3, #1
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d007      	beq.n	800d5e2 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f042 0201 	orr.w	r2, r2, #1
 800d5e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d5f0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	2222      	movs	r2, #34	; 0x22
 800d5f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2240      	movs	r2, #64	; 0x40
 800d5fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d60c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d618:	b29a      	uxth	r2, r3
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	4a61      	ldr	r2, [pc, #388]	; (800d7a8 <HAL_I2C_Mem_Read_DMA+0x28e>)
 800d622:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800d624:	897a      	ldrh	r2, [r7, #10]
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800d62a:	893a      	ldrh	r2, [r7, #8]
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 800d630:	88fa      	ldrh	r2, [r7, #6]
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	2200      	movs	r2, #0
 800d63a:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d640:	2b00      	cmp	r3, #0
 800d642:	f000 80cb 	beq.w	800d7dc <HAL_I2C_Mem_Read_DMA+0x2c2>
    {
      if (hi2c->hdmarx != NULL)
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d02d      	beq.n	800d6aa <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d652:	4a56      	ldr	r2, [pc, #344]	; (800d7ac <HAL_I2C_Mem_Read_DMA+0x292>)
 800d654:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d65a:	4a55      	ldr	r2, [pc, #340]	; (800d7b0 <HAL_I2C_Mem_Read_DMA+0x296>)
 800d65c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d662:	2200      	movs	r2, #0
 800d664:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	2200      	movs	r2, #0
 800d66c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d672:	2200      	movs	r2, #0
 800d674:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d67a:	2200      	movs	r2, #0
 800d67c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3310      	adds	r3, #16
 800d688:	4619      	mov	r1, r3
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68e:	461a      	mov	r2, r3
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d694:	f7fa fa33 	bl	8007afe <HAL_DMA_Start_IT>
 800d698:	4603      	mov	r3, r0
 800d69a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d69e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f040 8086 	bne.w	800d7b4 <HAL_I2C_Mem_Read_DMA+0x29a>
 800d6a8:	e013      	b.n	800d6d2 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6be:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	e0b2      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d6d2:	88f8      	ldrh	r0, [r7, #6]
 800d6d4:	893a      	ldrh	r2, [r7, #8]
 800d6d6:	8979      	ldrh	r1, [r7, #10]
 800d6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6da:	9301      	str	r3, [sp, #4]
 800d6dc:	2323      	movs	r3, #35	; 0x23
 800d6de:	9300      	str	r3, [sp, #0]
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	68f8      	ldr	r0, [r7, #12]
 800d6e4:	f003 f8bc 	bl	8010860 <I2C_RequestMemoryRead>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d023      	beq.n	800d736 <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fa facb 	bl	8007c8e <HAL_DMA_Abort_IT>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d702:	2200      	movs	r2, #0
 800d704:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d714:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f022 0201 	bic.w	r2, r2, #1
 800d730:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e080      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
        }

        if (hi2c->XferSize == 1U)
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d108      	bne.n	800d750 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d74c:	601a      	str	r2, [r3, #0]
 800d74e:	e007      	b.n	800d760 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	685a      	ldr	r2, [r3, #4]
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d75e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d760:	2300      	movs	r3, #0
 800d762:	617b      	str	r3, [r7, #20]
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	695b      	ldr	r3, [r3, #20]
 800d76a:	617b      	str	r3, [r7, #20]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	617b      	str	r3, [r7, #20]
 800d774:	697b      	ldr	r3, [r7, #20]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d78c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	685a      	ldr	r2, [r3, #4]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d79c:	605a      	str	r2, [r3, #4]
 800d79e:	e048      	b.n	800d832 <HAL_I2C_Mem_Read_DMA+0x318>
 800d7a0:	20000058 	.word	0x20000058
 800d7a4:	14f8b589 	.word	0x14f8b589
 800d7a8:	ffff0000 	.word	0xffff0000
 800d7ac:	08010a31 	.word	0x08010a31
 800d7b0:	08010bdb 	.word	0x08010bdb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2220      	movs	r2, #32
 800d7b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c8:	f043 0210 	orr.w	r2, r3, #16
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e02d      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800d7dc:	88f8      	ldrh	r0, [r7, #6]
 800d7de:	893a      	ldrh	r2, [r7, #8]
 800d7e0:	8979      	ldrh	r1, [r7, #10]
 800d7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e4:	9301      	str	r3, [sp, #4]
 800d7e6:	2323      	movs	r3, #35	; 0x23
 800d7e8:	9300      	str	r3, [sp, #0]
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	68f8      	ldr	r0, [r7, #12]
 800d7ee:	f003 f837 	bl	8010860 <I2C_RequestMemoryRead>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d001      	beq.n	800d7fc <HAL_I2C_Mem_Read_DMA+0x2e2>
      {
        return HAL_ERROR;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e01d      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61bb      	str	r3, [r7, #24]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	61bb      	str	r3, [r7, #24]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	699b      	ldr	r3, [r3, #24]
 800d80e:	61bb      	str	r3, [r7, #24]
 800d810:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d820:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2220      	movs	r2, #32
 800d826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2200      	movs	r2, #0
 800d82e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	e000      	b.n	800d838 <HAL_I2C_Mem_Read_DMA+0x31e>
  }
  else
  {
    return HAL_BUSY;
 800d836:	2302      	movs	r3, #2
  }
}
 800d838:	4618      	mov	r0, r3
 800d83a:	3728      	adds	r7, #40	; 0x28
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}

0800d840 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b08a      	sub	sp, #40	; 0x28
 800d844:	af02      	add	r7, sp, #8
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	603b      	str	r3, [r7, #0]
 800d84c:	460b      	mov	r3, r1
 800d84e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800d850:	f7f8 feec 	bl	800662c <HAL_GetTick>
 800d854:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800d856:	2301      	movs	r3, #1
 800d858:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b20      	cmp	r3, #32
 800d864:	f040 8111 	bne.w	800da8a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d868:	69fb      	ldr	r3, [r7, #28]
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	2319      	movs	r3, #25
 800d86e:	2201      	movs	r2, #1
 800d870:	4988      	ldr	r1, [pc, #544]	; (800da94 <HAL_I2C_IsDeviceReady+0x254>)
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f003 fa96 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800d87e:	2302      	movs	r3, #2
 800d880:	e104      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d101      	bne.n	800d890 <HAL_I2C_IsDeviceReady+0x50>
 800d88c:	2302      	movs	r3, #2
 800d88e:	e0fd      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2201      	movs	r2, #1
 800d894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f003 0301 	and.w	r3, r3, #1
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d007      	beq.n	800d8b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f042 0201 	orr.w	r2, r2, #1
 800d8b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d8c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2224      	movs	r2, #36	; 0x24
 800d8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	4a70      	ldr	r2, [pc, #448]	; (800da98 <HAL_I2C_IsDeviceReady+0x258>)
 800d8d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	681a      	ldr	r2, [r3, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f003 fa54 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d00d      	beq.n	800d91e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d90c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d910:	d103      	bne.n	800d91a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d918:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800d91a:	2303      	movs	r3, #3
 800d91c:	e0b6      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d91e:	897b      	ldrh	r3, [r7, #10]
 800d920:	b2db      	uxtb	r3, r3
 800d922:	461a      	mov	r2, r3
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d92c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800d92e:	f7f8 fe7d 	bl	800662c <HAL_GetTick>
 800d932:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	f003 0302 	and.w	r3, r3, #2
 800d93e:	2b02      	cmp	r3, #2
 800d940:	bf0c      	ite	eq
 800d942:	2301      	moveq	r3, #1
 800d944:	2300      	movne	r3, #0
 800d946:	b2db      	uxtb	r3, r3
 800d948:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	695b      	ldr	r3, [r3, #20]
 800d950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d958:	bf0c      	ite	eq
 800d95a:	2301      	moveq	r3, #1
 800d95c:	2300      	movne	r3, #0
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d962:	e025      	b.n	800d9b0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800d964:	f7f8 fe62 	bl	800662c <HAL_GetTick>
 800d968:	4602      	mov	r2, r0
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	683a      	ldr	r2, [r7, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d302      	bcc.n	800d97a <HAL_I2C_IsDeviceReady+0x13a>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d103      	bne.n	800d982 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	22a0      	movs	r2, #160	; 0xa0
 800d97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	695b      	ldr	r3, [r3, #20]
 800d988:	f003 0302 	and.w	r3, r3, #2
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	bf0c      	ite	eq
 800d990:	2301      	moveq	r3, #1
 800d992:	2300      	movne	r3, #0
 800d994:	b2db      	uxtb	r3, r3
 800d996:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d9a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9a6:	bf0c      	ite	eq
 800d9a8:	2301      	moveq	r3, #1
 800d9aa:	2300      	movne	r3, #0
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2ba0      	cmp	r3, #160	; 0xa0
 800d9ba:	d005      	beq.n	800d9c8 <HAL_I2C_IsDeviceReady+0x188>
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d102      	bne.n	800d9c8 <HAL_I2C_IsDeviceReady+0x188>
 800d9c2:	7dbb      	ldrb	r3, [r7, #22]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d0cd      	beq.n	800d964 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2220      	movs	r2, #32
 800d9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	f003 0302 	and.w	r3, r3, #2
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	d129      	bne.n	800da32 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681a      	ldr	r2, [r3, #0]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9ec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	613b      	str	r3, [r7, #16]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	695b      	ldr	r3, [r3, #20]
 800d9f8:	613b      	str	r3, [r7, #16]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	699b      	ldr	r3, [r3, #24]
 800da00:	613b      	str	r3, [r7, #16]
 800da02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	9300      	str	r3, [sp, #0]
 800da08:	2319      	movs	r3, #25
 800da0a:	2201      	movs	r2, #1
 800da0c:	4921      	ldr	r1, [pc, #132]	; (800da94 <HAL_I2C_IsDeviceReady+0x254>)
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f003 f9c8 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d001      	beq.n	800da1e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e036      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2220      	movs	r2, #32
 800da22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2200      	movs	r2, #0
 800da2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	e02c      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800da4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	2319      	movs	r3, #25
 800da52:	2201      	movs	r2, #1
 800da54:	490f      	ldr	r1, [pc, #60]	; (800da94 <HAL_I2C_IsDeviceReady+0x254>)
 800da56:	68f8      	ldr	r0, [r7, #12]
 800da58:	f003 f9a4 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 800da5c:	4603      	mov	r3, r0
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800da62:	2301      	movs	r3, #1
 800da64:	e012      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800da66:	69bb      	ldr	r3, [r7, #24]
 800da68:	3301      	adds	r3, #1
 800da6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	429a      	cmp	r2, r3
 800da72:	f4ff af32 	bcc.w	800d8da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2220      	movs	r2, #32
 800da7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800da86:	2301      	movs	r3, #1
 800da88:	e000      	b.n	800da8c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800da8a:	2302      	movs	r3, #2
  }
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3720      	adds	r7, #32
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	00100002 	.word	0x00100002
 800da98:	ffff0000 	.word	0xffff0000

0800da9c <HAL_I2C_Master_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	607a      	str	r2, [r7, #4]
 800daa6:	461a      	mov	r2, r3
 800daa8:	460b      	mov	r3, r1
 800daaa:	817b      	strh	r3, [r7, #10]
 800daac:	4613      	mov	r3, r2
 800daae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dab0:	2300      	movs	r3, #0
 800dab2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count      = 0x00U;
 800dab4:	2300      	movs	r3, #0
 800dab6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	2b20      	cmp	r3, #32
 800dac2:	f040 80a6 	bne.w	800dc12 <HAL_I2C_Master_Seq_Transmit_IT+0x176>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dad4:	d005      	beq.n	800dae2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d002      	beq.n	800dae2 <HAL_I2C_Master_Seq_Transmit_IT+0x46>
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d130      	bne.n	800db44 <HAL_I2C_Master_Seq_Transmit_IT+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dae2:	4b4f      	ldr	r3, [pc, #316]	; (800dc20 <HAL_I2C_Master_Seq_Transmit_IT+0x184>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	08db      	lsrs	r3, r3, #3
 800dae8:	4a4e      	ldr	r2, [pc, #312]	; (800dc24 <HAL_I2C_Master_Seq_Transmit_IT+0x188>)
 800daea:	fba2 2303 	umull	r2, r3, r2, r3
 800daee:	0a1a      	lsrs	r2, r3, #8
 800daf0:	4613      	mov	r3, r2
 800daf2:	009b      	lsls	r3, r3, #2
 800daf4:	4413      	add	r3, r2
 800daf6:	009a      	lsls	r2, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800dafc:	693b      	ldr	r3, [r7, #16]
 800dafe:	3b01      	subs	r3, #1
 800db00:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d116      	bne.n	800db36 <HAL_I2C_Master_Seq_Transmit_IT+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2200      	movs	r2, #0
 800db0c:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2220      	movs	r2, #32
 800db12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2200      	movs	r2, #0
 800db1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db22:	f043 0220 	orr.w	r2, r3, #32
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e06e      	b.n	800dc14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	699b      	ldr	r3, [r3, #24]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b02      	cmp	r3, #2
 800db42:	d0db      	beq.n	800dafc <HAL_I2C_Master_Seq_Transmit_IT+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d101      	bne.n	800db52 <HAL_I2C_Master_Seq_Transmit_IT+0xb6>
 800db4e:	2302      	movs	r3, #2
 800db50:	e060      	b.n	800dc14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2201      	movs	r2, #1
 800db56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	2b01      	cmp	r3, #1
 800db66:	d007      	beq.n	800db78 <HAL_I2C_Master_Seq_Transmit_IT+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	681a      	ldr	r2, [r3, #0]
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 0201 	orr.w	r2, r2, #1
 800db76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2221      	movs	r2, #33	; 0x21
 800db8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2210      	movs	r2, #16
 800db94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	893a      	ldrh	r2, [r7, #8]
 800dba8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	6a3a      	ldr	r2, [r7, #32]
 800dbb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dbba:	897a      	ldrh	r2, [r7, #10]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc4:	617b      	str	r3, [r7, #20]

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	2b11      	cmp	r3, #17
 800dbca:	d10c      	bne.n	800dbe6 <HAL_I2C_Master_Seq_Transmit_IT+0x14a>
 800dbcc:	6a3b      	ldr	r3, [r7, #32]
 800dbce:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800dbd2:	d003      	beq.n	800dbdc <HAL_I2C_Master_Seq_Transmit_IT+0x140>
 800dbd4:	6a3b      	ldr	r3, [r7, #32]
 800dbd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800dbda:	d101      	bne.n	800dbe0 <HAL_I2C_Master_Seq_Transmit_IT+0x144>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	e000      	b.n	800dbe2 <HAL_I2C_Master_Seq_Transmit_IT+0x146>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d107      	bne.n	800dbf6 <HAL_I2C_Master_Seq_Transmit_IT+0x15a>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	681a      	ldr	r2, [r3, #0]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbf4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	685a      	ldr	r2, [r3, #4]
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800dc0c:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	e000      	b.n	800dc14 <HAL_I2C_Master_Seq_Transmit_IT+0x178>
  }
  else
  {
    return HAL_BUSY;
 800dc12:	2302      	movs	r3, #2
  }
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	371c      	adds	r7, #28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr
 800dc20:	20000058 	.word	0x20000058
 800dc24:	14f8b589 	.word	0x14f8b589

0800dc28 <HAL_I2C_Master_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b088      	sub	sp, #32
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	607a      	str	r2, [r7, #4]
 800dc32:	461a      	mov	r2, r3
 800dc34:	460b      	mov	r3, r1
 800dc36:	817b      	strh	r3, [r7, #10]
 800dc38:	4613      	mov	r3, r2
 800dc3a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count      = 0x00U;
 800dc40:	2300      	movs	r3, #0
 800dc42:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	2b20      	cmp	r3, #32
 800dc4e:	f040 8149 	bne.w	800dee4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2bc>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dc5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc60:	d005      	beq.n	800dc6e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc64:	2b08      	cmp	r3, #8
 800dc66:	d002      	beq.n	800dc6e <HAL_I2C_Master_Seq_Transmit_DMA+0x46>
 800dc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d130      	bne.n	800dcd0 <HAL_I2C_Master_Seq_Transmit_DMA+0xa8>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800dc6e:	4b99      	ldr	r3, [pc, #612]	; (800ded4 <HAL_I2C_Master_Seq_Transmit_DMA+0x2ac>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	08db      	lsrs	r3, r3, #3
 800dc74:	4a98      	ldr	r2, [pc, #608]	; (800ded8 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b0>)
 800dc76:	fba2 2303 	umull	r2, r3, r2, r3
 800dc7a:	0a1a      	lsrs	r2, r3, #8
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	009b      	lsls	r3, r3, #2
 800dc80:	4413      	add	r3, r2
 800dc82:	009a      	lsls	r2, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	3b01      	subs	r3, #1
 800dc8c:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d116      	bne.n	800dcc2 <HAL_I2C_Master_Seq_Transmit_DMA+0x9a>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2200      	movs	r2, #0
 800dc98:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	2220      	movs	r2, #32
 800dc9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcae:	f043 0220 	orr.w	r2, r3, #32
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e111      	b.n	800dee6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	699b      	ldr	r3, [r3, #24]
 800dcc8:	f003 0302 	and.w	r3, r3, #2
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d0db      	beq.n	800dc88 <HAL_I2C_Master_Seq_Transmit_DMA+0x60>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d101      	bne.n	800dcde <HAL_I2C_Master_Seq_Transmit_DMA+0xb6>
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e103      	b.n	800dee6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f003 0301 	and.w	r3, r3, #1
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d007      	beq.n	800dd04 <HAL_I2C_Master_Seq_Transmit_DMA+0xdc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f042 0201 	orr.w	r2, r2, #1
 800dd02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2221      	movs	r2, #33	; 0x21
 800dd18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2210      	movs	r2, #16
 800dd20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	687a      	ldr	r2, [r7, #4]
 800dd2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	893a      	ldrh	r2, [r7, #8]
 800dd34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800dd46:	897a      	ldrh	r2, [r7, #10]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd50:	61bb      	str	r3, [r7, #24]

    if (hi2c->XferSize > 0U)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	f000 808d 	beq.w	800de76 <HAL_I2C_Master_Seq_Transmit_DMA+0x24e>
    {
      if (hi2c->hdmatx != NULL)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d022      	beq.n	800ddaa <HAL_I2C_Master_Seq_Transmit_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd68:	4a5c      	ldr	r2, [pc, #368]	; (800dedc <HAL_I2C_Master_Seq_Transmit_DMA+0x2b4>)
 800dd6a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd70:	4a5b      	ldr	r2, [pc, #364]	; (800dee0 <HAL_I2C_Master_Seq_Transmit_DMA+0x2b8>)
 800dd72:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd78:	2200      	movs	r2, #0
 800dd7a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd80:	2200      	movs	r2, #0
 800dd82:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3310      	adds	r3, #16
 800dd94:	461a      	mov	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd9a:	f7f9 feb0 	bl	8007afe <HAL_DMA_Start_IT>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800dda2:	7ffb      	ldrb	r3, [r7, #31]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d152      	bne.n	800de4e <HAL_I2C_Master_Seq_Transmit_DMA+0x226>
 800dda8:	e013      	b.n	800ddd2 <HAL_I2C_Master_Seq_Transmit_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddbe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2200      	movs	r2, #0
 800ddca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e089      	b.n	800dee6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dde0:	601a      	str	r2, [r3, #0]

        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	2b11      	cmp	r3, #17
 800dde6:	d10c      	bne.n	800de02 <HAL_I2C_Master_Seq_Transmit_DMA+0x1da>
 800dde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ddee:	d003      	beq.n	800ddf8 <HAL_I2C_Master_Seq_Transmit_DMA+0x1d0>
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ddf6:	d101      	bne.n	800ddfc <HAL_I2C_Master_Seq_Transmit_DMA+0x1d4>
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	e000      	b.n	800ddfe <HAL_I2C_Master_Seq_Transmit_DMA+0x1d6>
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	2b01      	cmp	r3, #1
 800de00:	d107      	bne.n	800de12 <HAL_I2C_Master_Seq_Transmit_DMA+0x1ea>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de10:	601a      	str	r2, [r3, #0]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2200      	movs	r2, #0
 800de16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	2b04      	cmp	r3, #4
 800de1e:	d005      	beq.n	800de2c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	2b20      	cmp	r3, #32
 800de24:	d002      	beq.n	800de2c <HAL_I2C_Master_Seq_Transmit_DMA+0x204>
 800de26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de28:	2b10      	cmp	r3, #16
 800de2a:	d107      	bne.n	800de3c <HAL_I2C_Master_Seq_Transmit_DMA+0x214>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	685a      	ldr	r2, [r3, #4]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de3a:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800de4a:	605a      	str	r2, [r3, #4]
 800de4c:	e03f      	b.n	800dece <HAL_I2C_Master_Seq_Transmit_DMA+0x2a6>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2220      	movs	r2, #32
 800de52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de62:	f043 0210 	orr.w	r2, r3, #16
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800de72:	2301      	movs	r3, #1
 800de74:	e037      	b.n	800dee6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de84:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_TX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b11      	cmp	r3, #17
 800de8a:	d10c      	bne.n	800dea6 <HAL_I2C_Master_Seq_Transmit_DMA+0x27e>
 800de8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de8e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800de92:	d003      	beq.n	800de9c <HAL_I2C_Master_Seq_Transmit_DMA+0x274>
 800de94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800de9a:	d101      	bne.n	800dea0 <HAL_I2C_Master_Seq_Transmit_DMA+0x278>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e000      	b.n	800dea2 <HAL_I2C_Master_Seq_Transmit_DMA+0x27a>
 800dea0:	2300      	movs	r3, #0
 800dea2:	2b01      	cmp	r3, #1
 800dea4:	d107      	bne.n	800deb6 <HAL_I2C_Master_Seq_Transmit_DMA+0x28e>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800deb4:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	685a      	ldr	r2, [r3, #4]
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800decc:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 800dece:	2300      	movs	r3, #0
 800ded0:	e009      	b.n	800dee6 <HAL_I2C_Master_Seq_Transmit_DMA+0x2be>
 800ded2:	bf00      	nop
 800ded4:	20000058 	.word	0x20000058
 800ded8:	14f8b589 	.word	0x14f8b589
 800dedc:	08010a31 	.word	0x08010a31
 800dee0:	08010bdb 	.word	0x08010bdb
  }
  else
  {
    return HAL_BUSY;
 800dee4:	2302      	movs	r3, #2
  }
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3720      	adds	r7, #32
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <HAL_I2C_Master_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800deee:	b480      	push	{r7}
 800def0:	b089      	sub	sp, #36	; 0x24
 800def2:	af00      	add	r7, sp, #0
 800def4:	60f8      	str	r0, [r7, #12]
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	461a      	mov	r2, r3
 800defa:	460b      	mov	r3, r1
 800defc:	817b      	strh	r3, [r7, #10]
 800defe:	4613      	mov	r3, r2
 800df00:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800df02:	2300      	movs	r3, #0
 800df04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800df06:	2300      	movs	r3, #0
 800df08:	617b      	str	r3, [r7, #20]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800df0a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800df0e:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b20      	cmp	r3, #32
 800df1a:	f040 80da 	bne.w	800e0d2 <HAL_I2C_Master_Seq_Receive_IT+0x1e4>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df2c:	d005      	beq.n	800df3a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800df2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df30:	2b08      	cmp	r3, #8
 800df32:	d002      	beq.n	800df3a <HAL_I2C_Master_Seq_Receive_IT+0x4c>
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	2b01      	cmp	r3, #1
 800df38:	d130      	bne.n	800df9c <HAL_I2C_Master_Seq_Receive_IT+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800df3a:	4b69      	ldr	r3, [pc, #420]	; (800e0e0 <HAL_I2C_Master_Seq_Receive_IT+0x1f2>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	08db      	lsrs	r3, r3, #3
 800df40:	4a68      	ldr	r2, [pc, #416]	; (800e0e4 <HAL_I2C_Master_Seq_Receive_IT+0x1f6>)
 800df42:	fba2 2303 	umull	r2, r3, r2, r3
 800df46:	0a1a      	lsrs	r2, r3, #8
 800df48:	4613      	mov	r3, r2
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	009a      	lsls	r2, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	617b      	str	r3, [r7, #20]
      do
      {
        count--;
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	3b01      	subs	r3, #1
 800df58:	617b      	str	r3, [r7, #20]
        if (count == 0U)
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d116      	bne.n	800df8e <HAL_I2C_Master_Seq_Receive_IT+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2200      	movs	r2, #0
 800df64:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	2220      	movs	r2, #32
 800df6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df7a:	f043 0220 	orr.w	r2, r3, #32
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	e0a2      	b.n	800e0d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	699b      	ldr	r3, [r3, #24]
 800df94:	f003 0302 	and.w	r3, r3, #2
 800df98:	2b02      	cmp	r3, #2
 800df9a:	d0db      	beq.n	800df54 <HAL_I2C_Master_Seq_Receive_IT+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dfa2:	2b01      	cmp	r3, #1
 800dfa4:	d101      	bne.n	800dfaa <HAL_I2C_Master_Seq_Receive_IT+0xbc>
 800dfa6:	2302      	movs	r3, #2
 800dfa8:	e094      	b.n	800e0d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	2201      	movs	r2, #1
 800dfae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f003 0301 	and.w	r3, r3, #1
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d007      	beq.n	800dfd0 <HAL_I2C_Master_Seq_Receive_IT+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f042 0201 	orr.w	r2, r2, #1
 800dfce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681a      	ldr	r2, [r3, #0]
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	2222      	movs	r2, #34	; 0x22
 800dfe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2210      	movs	r2, #16
 800dfec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	893a      	ldrh	r2, [r7, #8]
 800e000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e006:	b29a      	uxth	r2, r3
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e010:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e012:	897a      	ldrh	r2, [r7, #10]
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01c:	61bb      	str	r3, [r7, #24]

    if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e022:	b29b      	uxth	r3, r3
 800e024:	2b02      	cmp	r3, #2
 800e026:	d126      	bne.n	800e076 <HAL_I2C_Master_Seq_Receive_IT+0x188>
 800e028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02a:	2b20      	cmp	r3, #32
 800e02c:	d002      	beq.n	800e034 <HAL_I2C_Master_Seq_Receive_IT+0x146>
 800e02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e030:	2b10      	cmp	r3, #16
 800e032:	d120      	bne.n	800e076 <HAL_I2C_Master_Seq_Receive_IT+0x188>
    {
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	2b12      	cmp	r3, #18
 800e038:	d114      	bne.n	800e064 <HAL_I2C_Master_Seq_Receive_IT+0x176>
      {
        /* Disable Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e048:	601a      	str	r2, [r3, #0]

        /* Enable Pos */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e058:	601a      	str	r2, [r3, #0]

        /* Remove Enabling of IT_BUF, mean RXNE treatment, treat the 2 bytes through BTF */
        enableIT &= ~I2C_IT_BUF;
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e060:	61fb      	str	r3, [r7, #28]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e062:	e010      	b.n	800e086 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e072:	601a      	str	r2, [r3, #0]
      if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e074:	e007      	b.n	800e086 <HAL_I2C_Master_Seq_Receive_IT+0x198>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e084:	601a      	str	r2, [r3, #0]
    }

    /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
    /* Mean Previous state is same as current state */
    if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	2b12      	cmp	r3, #18
 800e08a:	d10c      	bne.n	800e0a6 <HAL_I2C_Master_Seq_Receive_IT+0x1b8>
 800e08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e08e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e092:	d003      	beq.n	800e09c <HAL_I2C_Master_Seq_Receive_IT+0x1ae>
 800e094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e096:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e09a:	d101      	bne.n	800e0a0 <HAL_I2C_Master_Seq_Receive_IT+0x1b2>
 800e09c:	2301      	movs	r3, #1
 800e09e:	e000      	b.n	800e0a2 <HAL_I2C_Master_Seq_Receive_IT+0x1b4>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	d107      	bne.n	800e0b6 <HAL_I2C_Master_Seq_Receive_IT+0x1c8>
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e0b4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable interrupts */
    __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	6859      	ldr	r1, [r3, #4]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	69fa      	ldr	r2, [r7, #28]
 800e0ca:	430a      	orrs	r2, r1
 800e0cc:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	e000      	b.n	800e0d4 <HAL_I2C_Master_Seq_Receive_IT+0x1e6>
  }
  else
  {
    return HAL_BUSY;
 800e0d2:	2302      	movs	r3, #2
  }
}
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3724      	adds	r7, #36	; 0x24
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr
 800e0e0:	20000058 	.word	0x20000058
 800e0e4:	14f8b589 	.word	0x14f8b589

0800e0e8 <HAL_I2C_Master_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	607a      	str	r2, [r7, #4]
 800e0f2:	461a      	mov	r2, r3
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	817b      	strh	r3, [r7, #10]
 800e0f8:	4613      	mov	r3, r2
 800e0fa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t Prev_State = 0x00U;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e100:	2300      	movs	r3, #0
 800e102:	613b      	str	r3, [r7, #16]
  uint32_t enableIT = (I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e104:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800e108:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b20      	cmp	r3, #32
 800e114:	f040 8199 	bne.w	800e44a <HAL_I2C_Master_Seq_Receive_DMA+0x362>
  {
    /* Check Busy Flag only if FIRST call of Master interface */
    if ((READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP) || (XferOptions == I2C_FIRST_AND_LAST_FRAME) || (XferOptions == I2C_FIRST_FRAME))
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e126:	d005      	beq.n	800e134 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	2b08      	cmp	r3, #8
 800e12c:	d002      	beq.n	800e134 <HAL_I2C_Master_Seq_Receive_DMA+0x4c>
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	2b01      	cmp	r3, #1
 800e132:	d130      	bne.n	800e196 <HAL_I2C_Master_Seq_Receive_DMA+0xae>
    {
      /* Wait until BUSY flag is reset */
      count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800e134:	4b8f      	ldr	r3, [pc, #572]	; (800e374 <HAL_I2C_Master_Seq_Receive_DMA+0x28c>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	08db      	lsrs	r3, r3, #3
 800e13a:	4a8f      	ldr	r2, [pc, #572]	; (800e378 <HAL_I2C_Master_Seq_Receive_DMA+0x290>)
 800e13c:	fba2 2303 	umull	r2, r3, r2, r3
 800e140:	0a1a      	lsrs	r2, r3, #8
 800e142:	4613      	mov	r3, r2
 800e144:	009b      	lsls	r3, r3, #2
 800e146:	4413      	add	r3, r2
 800e148:	009a      	lsls	r2, r3, #2
 800e14a:	4413      	add	r3, r2
 800e14c:	613b      	str	r3, [r7, #16]
      do
      {
        count--;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	3b01      	subs	r3, #1
 800e152:	613b      	str	r3, [r7, #16]
        if (count == 0U)
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d116      	bne.n	800e188 <HAL_I2C_Master_Seq_Receive_DMA+0xa0>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	2200      	movs	r2, #0
 800e15e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2220      	movs	r2, #32
 800e164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e174:	f043 0220 	orr.w	r2, r3, #32
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800e184:	2301      	movs	r3, #1
 800e186:	e161      	b.n	800e44c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
        }
      }
      while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	f003 0302 	and.w	r3, r3, #2
 800e192:	2b02      	cmp	r3, #2
 800e194:	d0db      	beq.n	800e14e <HAL_I2C_Master_Seq_Receive_DMA+0x66>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e19c:	2b01      	cmp	r3, #1
 800e19e:	d101      	bne.n	800e1a4 <HAL_I2C_Master_Seq_Receive_DMA+0xbc>
 800e1a0:	2302      	movs	r3, #2
 800e1a2:	e153      	b.n	800e44c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	f003 0301 	and.w	r3, r3, #1
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d007      	beq.n	800e1ca <HAL_I2C_Master_Seq_Receive_DMA+0xe2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f042 0201 	orr.w	r2, r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	681a      	ldr	r2, [r3, #0]
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e1d8:	601a      	str	r2, [r3, #0]

    /* Clear Last DMA bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	685a      	ldr	r2, [r3, #4]
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e1e8:	605a      	str	r2, [r3, #4]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2222      	movs	r2, #34	; 0x22
 800e1ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	2210      	movs	r2, #16
 800e1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	893a      	ldrh	r2, [r7, #8]
 800e20a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e210:	b29a      	uxth	r2, r3
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e21a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800e21c:	897a      	ldrh	r2, [r7, #10]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	645a      	str	r2, [r3, #68]	; 0x44

    Prev_State = hi2c->PreviousState;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e226:	617b      	str	r3, [r7, #20]

    if (hi2c->XferSize > 0U)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	f000 80de 	beq.w	800e3ee <HAL_I2C_Master_Seq_Receive_DMA+0x306>
    {
      if ((hi2c->XferCount == 2U) && ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP)))
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e236:	b29b      	uxth	r3, r3
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d12a      	bne.n	800e292 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
 800e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e23e:	2b20      	cmp	r3, #32
 800e240:	d002      	beq.n	800e248 <HAL_I2C_Master_Seq_Receive_DMA+0x160>
 800e242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e244:	2b10      	cmp	r3, #16
 800e246:	d124      	bne.n	800e292 <HAL_I2C_Master_Seq_Receive_DMA+0x1aa>
      {
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	2b12      	cmp	r3, #18
 800e24c:	d118      	bne.n	800e280 <HAL_I2C_Master_Seq_Receive_DMA+0x198>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e25c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681a      	ldr	r2, [r3, #0]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e26c:	601a      	str	r2, [r3, #0]

          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	685a      	ldr	r2, [r3, #4]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e27c:	605a      	str	r2, [r3, #4]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e27e:	e022      	b.n	800e2c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e28e:	601a      	str	r2, [r3, #0]
        if (Prev_State == I2C_STATE_MASTER_BUSY_RX)
 800e290:	e019      	b.n	800e2c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e2a0:	601a      	str	r2, [r3, #0]

        if ((XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_OTHER_AND_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	2b20      	cmp	r3, #32
 800e2a6:	d006      	beq.n	800e2b6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e2ae:	d002      	beq.n	800e2b6 <HAL_I2C_Master_Seq_Receive_DMA+0x1ce>
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	2b10      	cmp	r3, #16
 800e2b4:	d107      	bne.n	800e2c6 <HAL_I2C_Master_Seq_Receive_DMA+0x1de>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	685a      	ldr	r2, [r3, #4]
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e2c4:	605a      	str	r2, [r3, #4]
        }
      }
      if (hi2c->hdmarx != NULL)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d022      	beq.n	800e314 <HAL_I2C_Master_Seq_Receive_DMA+0x22c>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d2:	4a2a      	ldr	r2, [pc, #168]	; (800e37c <HAL_I2C_Master_Seq_Receive_DMA+0x294>)
 800e2d4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	4a29      	ldr	r2, [pc, #164]	; (800e380 <HAL_I2C_Master_Seq_Receive_DMA+0x298>)
 800e2dc:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	3310      	adds	r3, #16
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2fe:	461a      	mov	r2, r3
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e304:	f7f9 fbfb 	bl	8007afe <HAL_DMA_Start_IT>
 800e308:	4603      	mov	r3, r0
 800e30a:	76fb      	strb	r3, [r7, #27]
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }
      if (dmaxferstatus == HAL_OK)
 800e30c:	7efb      	ldrb	r3, [r7, #27]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d159      	bne.n	800e3c6 <HAL_I2C_Master_Seq_Receive_DMA+0x2de>
 800e312:	e013      	b.n	800e33c <HAL_I2C_Master_Seq_Receive_DMA+0x254>
        hi2c->State     = HAL_I2C_STATE_READY;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2220      	movs	r2, #32
 800e318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e328:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	2200      	movs	r2, #0
 800e334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	e087      	b.n	800e44c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      {
        /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
        /* Mean Previous state is same as current state */
        if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	2b12      	cmp	r3, #18
 800e340:	d10c      	bne.n	800e35c <HAL_I2C_Master_Seq_Receive_DMA+0x274>
 800e342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e344:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e348:	d003      	beq.n	800e352 <HAL_I2C_Master_Seq_Receive_DMA+0x26a>
 800e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e350:	d101      	bne.n	800e356 <HAL_I2C_Master_Seq_Receive_DMA+0x26e>
 800e352:	2301      	movs	r3, #1
 800e354:	e000      	b.n	800e358 <HAL_I2C_Master_Seq_Receive_DMA+0x270>
 800e356:	2300      	movs	r3, #0
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d113      	bne.n	800e384 <HAL_I2C_Master_Seq_Receive_DMA+0x29c>
        {
          /* Generate Start */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e36a:	601a      	str	r2, [r3, #0]

          /* Update interrupt for only EVT and ERR */
          enableIT = (I2C_IT_EVT | I2C_IT_ERR);
 800e36c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e370:	61fb      	str	r3, [r7, #28]
 800e372:	e00a      	b.n	800e38a <HAL_I2C_Master_Seq_Receive_DMA+0x2a2>
 800e374:	20000058 	.word	0x20000058
 800e378:	14f8b589 	.word	0x14f8b589
 800e37c:	08010a31 	.word	0x08010a31
 800e380:	08010bdb 	.word	0x08010bdb
        }
        else
        {
          /* Update interrupt for only ERR */
          enableIT = I2C_IT_ERR;
 800e384:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e388:	61fb      	str	r3, [r7, #28]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2200      	movs	r2, #0
 800e38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* If XferOptions is not associated to a new frame, mean no start bit is request, enable directly the DMA request */
        /* In other cases, DMA request is enabled after Slave address treatment in IRQHandler */
        if ((XferOptions == I2C_NEXT_FRAME) || (XferOptions == I2C_LAST_FRAME) || (XferOptions == I2C_LAST_FRAME_NO_STOP))
 800e392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e394:	2b04      	cmp	r3, #4
 800e396:	d005      	beq.n	800e3a4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39a:	2b20      	cmp	r3, #32
 800e39c:	d002      	beq.n	800e3a4 <HAL_I2C_Master_Seq_Receive_DMA+0x2bc>
 800e39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a0:	2b10      	cmp	r3, #16
 800e3a2:	d107      	bne.n	800e3b4 <HAL_I2C_Master_Seq_Receive_DMA+0x2cc>
        {
          /* Enable DMA Request */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	685a      	ldr	r2, [r3, #4]
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e3b2:	605a      	str	r2, [r3, #4]
        }

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	6859      	ldr	r1, [r3, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	430a      	orrs	r2, r1
 800e3c2:	605a      	str	r2, [r3, #4]
 800e3c4:	e03f      	b.n	800e446 <HAL_I2C_Master_Seq_Receive_DMA+0x35e>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2220      	movs	r2, #32
 800e3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3da:	f043 0210 	orr.w	r2, r3, #16
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e02e      	b.n	800e44c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e3fc:	601a      	str	r2, [r3, #0]

      /* If transfer direction not change and there is no request to start another frame, do not generate Restart Condition */
      /* Mean Previous state is same as current state */
      if ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(XferOptions) == 1))
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	2b12      	cmp	r3, #18
 800e402:	d10c      	bne.n	800e41e <HAL_I2C_Master_Seq_Receive_DMA+0x336>
 800e404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e406:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800e40a:	d003      	beq.n	800e414 <HAL_I2C_Master_Seq_Receive_DMA+0x32c>
 800e40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e40e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800e412:	d101      	bne.n	800e418 <HAL_I2C_Master_Seq_Receive_DMA+0x330>
 800e414:	2301      	movs	r3, #1
 800e416:	e000      	b.n	800e41a <HAL_I2C_Master_Seq_Receive_DMA+0x332>
 800e418:	2300      	movs	r3, #0
 800e41a:	2b01      	cmp	r3, #1
 800e41c:	d107      	bne.n	800e42e <HAL_I2C_Master_Seq_Receive_DMA+0x346>
      {
        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e42c:	601a      	str	r2, [r3, #0]
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable interrupts */
      __HAL_I2C_ENABLE_IT(hi2c, enableIT);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	6859      	ldr	r1, [r3, #4]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	69fa      	ldr	r2, [r7, #28]
 800e442:	430a      	orrs	r2, r1
 800e444:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 800e446:	2300      	movs	r3, #0
 800e448:	e000      	b.n	800e44c <HAL_I2C_Master_Seq_Receive_DMA+0x364>
  }
  else
  {
    return HAL_BUSY;
 800e44a:	2302      	movs	r3, #2
  }
}
 800e44c:	4618      	mov	r0, r3
 800e44e:	3720      	adds	r7, #32
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	603b      	str	r3, [r7, #0]
 800e460:	4613      	mov	r3, r2
 800e462:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e470:	2b28      	cmp	r3, #40	; 0x28
 800e472:	d15b      	bne.n	800e52c <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d002      	beq.n	800e480 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800e47a:	88fb      	ldrh	r3, [r7, #6]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	e054      	b.n	800e52e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d101      	bne.n	800e492 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800e48e:	2302      	movs	r3, #2
 800e490:	e04d      	b.n	800e52e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2201      	movs	r2, #1
 800e496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f003 0301 	and.w	r3, r3, #1
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d007      	beq.n	800e4b8 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	681a      	ldr	r2, [r3, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f042 0201 	orr.w	r2, r2, #1
 800e4b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e4c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2229      	movs	r2, #41	; 0x29
 800e4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2220      	movs	r2, #32
 800e4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	68ba      	ldr	r2, [r7, #8]
 800e4e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	88fa      	ldrh	r2, [r7, #6]
 800e4e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4ee:	b29a      	uxth	r2, r3
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	617b      	str	r3, [r7, #20]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	699b      	ldr	r3, [r3, #24]
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	2200      	movs	r2, #0
 800e514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	685a      	ldr	r2, [r3, #4]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e526:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e528:	2300      	movs	r3, #0
 800e52a:	e000      	b.n	800e52e <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e52c:	2302      	movs	r3, #2
  }
}
 800e52e:	4618      	mov	r0, r3
 800e530:	371c      	adds	r7, #28
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <HAL_I2C_Slave_Seq_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b086      	sub	sp, #24
 800e53e:	af00      	add	r7, sp, #0
 800e540:	60f8      	str	r0, [r7, #12]
 800e542:	60b9      	str	r1, [r7, #8]
 800e544:	603b      	str	r3, [r7, #0]
 800e546:	4613      	mov	r3, r2
 800e548:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e550:	b2db      	uxtb	r3, r3
 800e552:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e556:	2b28      	cmp	r3, #40	; 0x28
 800e558:	f040 811e 	bne.w	800e798 <HAL_I2C_Slave_Seq_Transmit_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d002      	beq.n	800e568 <HAL_I2C_Slave_Seq_Transmit_DMA+0x2e>
 800e562:	88fb      	ldrh	r3, [r7, #6]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d101      	bne.n	800e56c <HAL_I2C_Slave_Seq_Transmit_DMA+0x32>
    {
      return  HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e116      	b.n	800e79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e572:	2b01      	cmp	r3, #1
 800e574:	d101      	bne.n	800e57a <HAL_I2C_Slave_Seq_Transmit_DMA+0x40>
 800e576:	2302      	movs	r3, #2
 800e578:	e10f      	b.n	800e79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	685a      	ldr	r2, [r3, #4]
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e590:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e598:	b2db      	uxtb	r3, r3
 800e59a:	2b2a      	cmp	r3, #42	; 0x2a
 800e59c:	d127      	bne.n	800e5ee <HAL_I2C_Slave_Seq_Transmit_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5ac:	d14c      	bne.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d048      	beq.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	685a      	ldr	r2, [r3, #4]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e5c4:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5ca:	4a76      	ldr	r2, [pc, #472]	; (800e7a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e5cc:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7f9 fb5b 	bl	8007c8e <HAL_DMA_Abort_IT>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d034      	beq.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e4:	68fa      	ldr	r2, [r7, #12]
 800e5e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	4798      	blx	r3
 800e5ec:	e02c      	b.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5f4:	b2db      	uxtb	r3, r3
 800e5f6:	2b29      	cmp	r3, #41	; 0x29
 800e5f8:	d126      	bne.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e608:	d11e      	bne.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	685a      	ldr	r2, [r3, #4]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e618:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d012      	beq.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e626:	4a5f      	ldr	r2, [pc, #380]	; (800e7a4 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26a>)
 800e628:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e62e:	4618      	mov	r0, r3
 800e630:	f7f9 fb2d 	bl	8007c8e <HAL_DMA_Abort_IT>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d006      	beq.n	800e648 <HAL_I2C_Slave_Seq_Transmit_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e640:	68fa      	ldr	r2, [r7, #12]
 800e642:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e644:	4610      	mov	r0, r2
 800e646:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f003 0301 	and.w	r3, r3, #1
 800e652:	2b01      	cmp	r3, #1
 800e654:	d007      	beq.n	800e666 <HAL_I2C_Slave_Seq_Transmit_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f042 0201 	orr.w	r2, r2, #1
 800e664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e674:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2229      	movs	r2, #41	; 0x29
 800e67a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	2220      	movs	r2, #32
 800e682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	2200      	movs	r2, #0
 800e68a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	88fa      	ldrh	r2, [r7, #6]
 800e696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	683a      	ldr	r2, [r7, #0]
 800e6a6:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmatx != NULL)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d022      	beq.n	800e6f6 <HAL_I2C_Slave_Seq_Transmit_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b4:	4a3c      	ldr	r2, [pc, #240]	; (800e7a8 <HAL_I2C_Slave_Seq_Transmit_DMA+0x26e>)
 800e6b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6bc:	4a3b      	ldr	r2, [pc, #236]	; (800e7ac <HAL_I2C_Slave_Seq_Transmit_DMA+0x272>)
 800e6be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6d8:	4619      	mov	r1, r3
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	3310      	adds	r3, #16
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6e6:	f7f9 fa0a 	bl	8007afe <HAL_DMA_Start_IT>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800e6ee:	7dfb      	ldrb	r3, [r7, #23]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d13d      	bne.n	800e770 <HAL_I2C_Slave_Seq_Transmit_DMA+0x236>
 800e6f4:	e013      	b.n	800e71e <HAL_I2C_Slave_Seq_Transmit_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2228      	movs	r2, #40	; 0x28
 800e6fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e70a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	2200      	movs	r2, #0
 800e716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e03d      	b.n	800e79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	681a      	ldr	r2, [r3, #0]
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e72c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e72e:	2300      	movs	r3, #0
 800e730:	613b      	str	r3, [r7, #16]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	613b      	str	r3, [r7, #16]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	699b      	ldr	r3, [r3, #24]
 800e740:	613b      	str	r3, [r7, #16]
 800e742:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2200      	movs	r2, #0
 800e748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	685a      	ldr	r2, [r3, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800e75a:	605a      	str	r2, [r3, #4]

      /* Enable DMA Request */
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685a      	ldr	r2, [r3, #4]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e76a:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800e76c:	2300      	movs	r3, #0
 800e76e:	e014      	b.n	800e79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	2220      	movs	r2, #32
 800e774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e784:	f043 0210 	orr.w	r2, r3, #16
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2200      	movs	r2, #0
 800e790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800e794:	2301      	movs	r3, #1
 800e796:	e000      	b.n	800e79a <HAL_I2C_Slave_Seq_Transmit_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800e798:	2302      	movs	r3, #2
  }
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3718      	adds	r7, #24
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	08010c55 	.word	0x08010c55
 800e7a8:	08010a31 	.word	0x08010a31
 800e7ac:	08010bdb 	.word	0x08010bdb

0800e7b0 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	b087      	sub	sp, #28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	60f8      	str	r0, [r7, #12]
 800e7b8:	60b9      	str	r1, [r7, #8]
 800e7ba:	603b      	str	r3, [r7, #0]
 800e7bc:	4613      	mov	r3, r2
 800e7be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7c6:	b2db      	uxtb	r3, r3
 800e7c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e7cc:	2b28      	cmp	r3, #40	; 0x28
 800e7ce:	d15b      	bne.n	800e888 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 800e7d6:	88fb      	ldrh	r3, [r7, #6]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d101      	bne.n	800e7e0 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	e054      	b.n	800e88a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7e6:	2b01      	cmp	r3, #1
 800e7e8:	d101      	bne.n	800e7ee <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	e04d      	b.n	800e88a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2201      	movs	r2, #1
 800e7f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f003 0301 	and.w	r3, r3, #1
 800e800:	2b01      	cmp	r3, #1
 800e802:	d007      	beq.n	800e814 <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f042 0201 	orr.w	r2, r2, #1
 800e812:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e822:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	222a      	movs	r2, #42	; 0x2a
 800e828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2220      	movs	r2, #32
 800e830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	2200      	movs	r2, #0
 800e838:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	68ba      	ldr	r2, [r7, #8]
 800e83e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	88fa      	ldrh	r2, [r7, #6]
 800e844:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e84a:	b29a      	uxth	r2, r3
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	683a      	ldr	r2, [r7, #0]
 800e854:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800e856:	2300      	movs	r3, #0
 800e858:	617b      	str	r3, [r7, #20]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	617b      	str	r3, [r7, #20]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	699b      	ldr	r3, [r3, #24]
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	685a      	ldr	r2, [r3, #4]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800e882:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	e000      	b.n	800e88a <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 800e888:	2302      	movs	r3, #2
  }
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	371c      	adds	r7, #28
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <HAL_I2C_Slave_Seq_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b086      	sub	sp, #24
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	603b      	str	r3, [r7, #0]
 800e8a2:	4613      	mov	r3, r2
 800e8a4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8ac:	b2db      	uxtb	r3, r3
 800e8ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e8b2:	2b28      	cmp	r3, #40	; 0x28
 800e8b4:	f040 811e 	bne.w	800eaf4 <HAL_I2C_Slave_Seq_Receive_DMA+0x25e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e8b8:	68bb      	ldr	r3, [r7, #8]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d002      	beq.n	800e8c4 <HAL_I2C_Slave_Seq_Receive_DMA+0x2e>
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d101      	bne.n	800e8c8 <HAL_I2C_Slave_Seq_Receive_DMA+0x32>
    {
      return  HAL_ERROR;
 800e8c4:	2301      	movs	r3, #1
 800e8c6:	e116      	b.n	800eaf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8ce:	2b01      	cmp	r3, #1
 800e8d0:	d101      	bne.n	800e8d6 <HAL_I2C_Slave_Seq_Receive_DMA+0x40>
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	e10f      	b.n	800eaf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	685a      	ldr	r2, [r3, #4]
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800e8ec:	605a      	str	r2, [r3, #4]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8f4:	b2db      	uxtb	r3, r3
 800e8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e8f8:	d127      	bne.n	800e94a <HAL_I2C_Slave_Seq_Receive_DMA+0xb4>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	685b      	ldr	r3, [r3, #4]
 800e900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e904:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e908:	d14c      	bne.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        /* Abort DMA Xfer if any */
        if (hi2c->hdmarx != NULL)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d048      	beq.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	685a      	ldr	r2, [r3, #4]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e920:	605a      	str	r2, [r3, #4]

          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e926:	4a76      	ldr	r2, [pc, #472]	; (800eb00 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e928:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e92e:	4618      	mov	r0, r3
 800e930:	f7f9 f9ad 	bl	8007c8e <HAL_DMA_Abort_IT>
 800e934:	4603      	mov	r3, r0
 800e936:	2b00      	cmp	r3, #0
 800e938:	d034      	beq.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e940:	68fa      	ldr	r2, [r7, #12]
 800e942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e944:	4610      	mov	r0, r2
 800e946:	4798      	blx	r3
 800e948:	e02c      	b.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          }
        }
      }
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b29      	cmp	r3, #41	; 0x29
 800e954:	d126      	bne.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
    {
      if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e960:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e964:	d11e      	bne.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
      {
        CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e974:	605a      	str	r2, [r3, #4]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d012      	beq.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e982:	4a5f      	ldr	r2, [pc, #380]	; (800eb00 <HAL_I2C_Slave_Seq_Receive_DMA+0x26a>)
 800e984:	651a      	str	r2, [r3, #80]	; 0x50

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7f9 f97f 	bl	8007c8e <HAL_DMA_Abort_IT>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d006      	beq.n	800e9a4 <HAL_I2C_Slave_Seq_Receive_DMA+0x10e>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e9a0:	4610      	mov	r0, r2
 800e9a2:	4798      	blx	r3
    {
      /* Nothing to do */
    }

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f003 0301 	and.w	r3, r3, #1
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	d007      	beq.n	800e9c2 <HAL_I2C_Slave_Seq_Receive_DMA+0x12c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f042 0201 	orr.w	r2, r2, #1
 800e9c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e9d0:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	222a      	movs	r2, #42	; 0x2a
 800e9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2220      	movs	r2, #32
 800e9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	68ba      	ldr	r2, [r7, #8]
 800e9ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	88fa      	ldrh	r2, [r7, #6]
 800e9f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hi2c->hdmarx != NULL)
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d022      	beq.n	800ea52 <HAL_I2C_Slave_Seq_Receive_DMA+0x1bc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea10:	4a3c      	ldr	r2, [pc, #240]	; (800eb04 <HAL_I2C_Slave_Seq_Receive_DMA+0x26e>)
 800ea12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea18:	4a3b      	ldr	r2, [pc, #236]	; (800eb08 <HAL_I2C_Slave_Seq_Receive_DMA+0x272>)
 800ea1a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea20:	2200      	movs	r2, #0
 800ea22:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea28:	2200      	movs	r2, #0
 800ea2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3310      	adds	r3, #16
 800ea36:	4619      	mov	r1, r3
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea3c:	461a      	mov	r2, r3
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea42:	f7f9 f85c 	bl	8007afe <HAL_DMA_Start_IT>
 800ea46:	4603      	mov	r3, r0
 800ea48:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800ea4a:	7dfb      	ldrb	r3, [r7, #23]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d13d      	bne.n	800eacc <HAL_I2C_Slave_Seq_Receive_DMA+0x236>
 800ea50:	e013      	b.n	800ea7a <HAL_I2C_Slave_Seq_Receive_DMA+0x1e4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	2228      	movs	r2, #40	; 0x28
 800ea56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ea66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2200      	movs	r2, #0
 800ea72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e03d      	b.n	800eaf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    {
      /* Enable Address Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ea88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	613b      	str	r3, [r7, #16]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	695b      	ldr	r3, [r3, #20]
 800ea94:	613b      	str	r3, [r7, #16]
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	699b      	ldr	r3, [r3, #24]
 800ea9c:	613b      	str	r3, [r7, #16]
 800ea9e:	693b      	ldr	r3, [r7, #16]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eab6:	605a      	str	r2, [r3, #4]

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable EVT and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800eac6:	605a      	str	r2, [r3, #4]

      return HAL_OK;
 800eac8:	2300      	movs	r3, #0
 800eaca:	e014      	b.n	800eaf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2220      	movs	r2, #32
 800ead0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2200      	movs	r2, #0
 800ead8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eae0:	f043 0210 	orr.w	r2, r3, #16
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	2200      	movs	r2, #0
 800eaec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <HAL_I2C_Slave_Seq_Receive_DMA+0x260>
    }
  }
  else
  {
    return HAL_BUSY;
 800eaf4:	2302      	movs	r3, #2
  }
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	08010c55 	.word	0x08010c55
 800eb04:	08010a31 	.word	0x08010a31
 800eb08:	08010bdb 	.word	0x08010bdb

0800eb0c <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb1a:	b2db      	uxtb	r3, r3
 800eb1c:	2b20      	cmp	r3, #32
 800eb1e:	d124      	bne.n	800eb6a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2228      	movs	r2, #40	; 0x28
 800eb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f003 0301 	and.w	r3, r3, #1
 800eb32:	2b01      	cmp	r3, #1
 800eb34:	d007      	beq.n	800eb46 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f042 0201 	orr.w	r2, r2, #1
 800eb44:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	681a      	ldr	r2, [r3, #0]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eb54:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	685a      	ldr	r2, [r3, #4]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800eb64:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	e000      	b.n	800eb6c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800eb6a:	2302      	movs	r3, #2
  }
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <HAL_I2C_DisableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DisableListen_IT(I2C_HandleTypeDef *hi2c)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b085      	sub	sp, #20
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp;

  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb86:	b2db      	uxtb	r3, r3
 800eb88:	2b28      	cmp	r3, #40	; 0x28
 800eb8a:	d129      	bne.n	800ebe0 <HAL_I2C_DisableListen_IT+0x68>
  {
    tmp = (uint32_t)(hi2c->State) & I2C_STATE_MSK;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb92:	b2db      	uxtb	r3, r3
 800eb94:	f003 0303 	and.w	r3, r3, #3
 800eb98:	60fb      	str	r3, [r7, #12]
    hi2c->PreviousState = tmp | (uint32_t)(hi2c->Mode);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	461a      	mov	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	431a      	orrs	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2220      	movs	r2, #32
 800ebb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ebca:	601a      	str	r2, [r3, #0]

    /* Disable EVT and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ebda:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	e000      	b.n	800ebe2 <HAL_I2C_DisableListen_IT+0x6a>
  }
  else
  {
    return HAL_BUSY;
 800ebe0:	2302      	movs	r3, #2
  }
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3714      	adds	r7, #20
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b084      	sub	sp, #16
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
 800ebf6:	460b      	mov	r3, r1
 800ebf8:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ec00:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && (CurrentMode == HAL_I2C_MODE_MASTER))
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	699b      	ldr	r3, [r3, #24]
 800ec08:	f003 0302 	and.w	r3, r3, #2
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	d138      	bne.n	800ec82 <HAL_I2C_Master_Abort_IT+0x94>
 800ec10:	7bfb      	ldrb	r3, [r7, #15]
 800ec12:	2b10      	cmp	r3, #16
 800ec14:	d135      	bne.n	800ec82 <HAL_I2C_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec1c:	2b01      	cmp	r3, #1
 800ec1e:	d101      	bne.n	800ec24 <HAL_I2C_Master_Abort_IT+0x36>
 800ec20:	2302      	movs	r3, #2
 800ec22:	e02f      	b.n	800ec84 <HAL_I2C_Master_Abort_IT+0x96>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2201      	movs	r2, #1
 800ec28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2260      	movs	r2, #96	; 0x60
 800ec36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	681a      	ldr	r2, [r3, #0]
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec48:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	681a      	ldr	r2, [r3, #0]
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec58:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ec6e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 fad9 	bl	8010230 <I2C_ITError>

    return HAL_OK;
 800ec7e:	2300      	movs	r3, #0
 800ec80:	e000      	b.n	800ec84 <HAL_I2C_Master_Abort_IT+0x96>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 800ec82:	2301      	movs	r3, #1
  }
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	3710      	adds	r7, #16
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b088      	sub	sp, #32
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800ec94:	2300      	movs	r3, #0
 800ec96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	685b      	ldr	r3, [r3, #4]
 800ec9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ecac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800ecb6:	7bfb      	ldrb	r3, [r7, #15]
 800ecb8:	2b10      	cmp	r3, #16
 800ecba:	d003      	beq.n	800ecc4 <HAL_I2C_EV_IRQHandler+0x38>
 800ecbc:	7bfb      	ldrb	r3, [r7, #15]
 800ecbe:	2b40      	cmp	r3, #64	; 0x40
 800ecc0:	f040 80c1 	bne.w	800ee46 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	699b      	ldr	r3, [r3, #24]
 800ecca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	695b      	ldr	r3, [r3, #20]
 800ecd2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	f003 0301 	and.w	r3, r3, #1
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d10d      	bne.n	800ecfa <HAL_I2C_EV_IRQHandler+0x6e>
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800ece4:	d003      	beq.n	800ecee <HAL_I2C_EV_IRQHandler+0x62>
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800ecec:	d101      	bne.n	800ecf2 <HAL_I2C_EV_IRQHandler+0x66>
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e000      	b.n	800ecf4 <HAL_I2C_EV_IRQHandler+0x68>
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	f000 8132 	beq.w	800ef5e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ecfa:	69fb      	ldr	r3, [r7, #28]
 800ecfc:	f003 0301 	and.w	r3, r3, #1
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00c      	beq.n	800ed1e <HAL_I2C_EV_IRQHandler+0x92>
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	0a5b      	lsrs	r3, r3, #9
 800ed08:	f003 0301 	and.w	r3, r3, #1
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d006      	beq.n	800ed1e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f002 fa94 	bl	801123e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fda1 	bl	800f85e <I2C_Master_SB>
 800ed1c:	e092      	b.n	800ee44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	08db      	lsrs	r3, r3, #3
 800ed22:	f003 0301 	and.w	r3, r3, #1
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d009      	beq.n	800ed3e <HAL_I2C_EV_IRQHandler+0xb2>
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	0a5b      	lsrs	r3, r3, #9
 800ed2e:	f003 0301 	and.w	r3, r3, #1
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d003      	beq.n	800ed3e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fe17 	bl	800f96a <I2C_Master_ADD10>
 800ed3c:	e082      	b.n	800ee44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	085b      	lsrs	r3, r3, #1
 800ed42:	f003 0301 	and.w	r3, r3, #1
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d009      	beq.n	800ed5e <HAL_I2C_EV_IRQHandler+0xd2>
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	0a5b      	lsrs	r3, r3, #9
 800ed4e:	f003 0301 	and.w	r3, r3, #1
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d003      	beq.n	800ed5e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f000 fe31 	bl	800f9be <I2C_Master_ADDR>
 800ed5c:	e072      	b.n	800ee44 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	089b      	lsrs	r3, r3, #2
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d03b      	beq.n	800ede2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed78:	f000 80f3 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	09db      	lsrs	r3, r3, #7
 800ed80:	f003 0301 	and.w	r3, r3, #1
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00f      	beq.n	800eda8 <HAL_I2C_EV_IRQHandler+0x11c>
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	0a9b      	lsrs	r3, r3, #10
 800ed8c:	f003 0301 	and.w	r3, r3, #1
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d009      	beq.n	800eda8 <HAL_I2C_EV_IRQHandler+0x11c>
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	089b      	lsrs	r3, r3, #2
 800ed98:	f003 0301 	and.w	r3, r3, #1
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d103      	bne.n	800eda8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fa1b 	bl	800f1dc <I2C_MasterTransmit_TXE>
 800eda6:	e04d      	b.n	800ee44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eda8:	69fb      	ldr	r3, [r7, #28]
 800edaa:	089b      	lsrs	r3, r3, #2
 800edac:	f003 0301 	and.w	r3, r3, #1
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	f000 80d6 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	0a5b      	lsrs	r3, r3, #9
 800edba:	f003 0301 	and.w	r3, r3, #1
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	f000 80cf 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
 800edc6:	2b21      	cmp	r3, #33	; 0x21
 800edc8:	d103      	bne.n	800edd2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f000 faa2 	bl	800f314 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800edd0:	e0c7      	b.n	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800edd2:	7bfb      	ldrb	r3, [r7, #15]
 800edd4:	2b40      	cmp	r3, #64	; 0x40
 800edd6:	f040 80c4 	bne.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 fb10 	bl	800f400 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ede0:	e0bf      	b.n	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800edec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800edf0:	f000 80b7 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	099b      	lsrs	r3, r3, #6
 800edf8:	f003 0301 	and.w	r3, r3, #1
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00f      	beq.n	800ee20 <HAL_I2C_EV_IRQHandler+0x194>
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	0a9b      	lsrs	r3, r3, #10
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d009      	beq.n	800ee20 <HAL_I2C_EV_IRQHandler+0x194>
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	089b      	lsrs	r3, r3, #2
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d103      	bne.n	800ee20 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 fb85 	bl	800f528 <I2C_MasterReceive_RXNE>
 800ee1e:	e011      	b.n	800ee44 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ee20:	69fb      	ldr	r3, [r7, #28]
 800ee22:	089b      	lsrs	r3, r3, #2
 800ee24:	f003 0301 	and.w	r3, r3, #1
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 809a 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
 800ee2e:	697b      	ldr	r3, [r7, #20]
 800ee30:	0a5b      	lsrs	r3, r3, #9
 800ee32:	f003 0301 	and.w	r3, r3, #1
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f000 8093 	beq.w	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800ee3c:	6878      	ldr	r0, [r7, #4]
 800ee3e:	f000 fc24 	bl	800f68a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ee42:	e08e      	b.n	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
 800ee44:	e08d      	b.n	800ef62 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d004      	beq.n	800ee58 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	61fb      	str	r3, [r7, #28]
 800ee56:	e007      	b.n	800ee68 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	699b      	ldr	r3, [r3, #24]
 800ee5e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	695b      	ldr	r3, [r3, #20]
 800ee66:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ee68:	69fb      	ldr	r3, [r7, #28]
 800ee6a:	085b      	lsrs	r3, r3, #1
 800ee6c:	f003 0301 	and.w	r3, r3, #1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d012      	beq.n	800ee9a <HAL_I2C_EV_IRQHandler+0x20e>
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	0a5b      	lsrs	r3, r3, #9
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d00c      	beq.n	800ee9a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d003      	beq.n	800ee90 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	699b      	ldr	r3, [r3, #24]
 800ee8e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800ee90:	69b9      	ldr	r1, [r7, #24]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	f000 ffe2 	bl	800fe5c <I2C_Slave_ADDR>
 800ee98:	e066      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ee9a:	69fb      	ldr	r3, [r7, #28]
 800ee9c:	091b      	lsrs	r3, r3, #4
 800ee9e:	f003 0301 	and.w	r3, r3, #1
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d009      	beq.n	800eeba <HAL_I2C_EV_IRQHandler+0x22e>
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	0a5b      	lsrs	r3, r3, #9
 800eeaa:	f003 0301 	and.w	r3, r3, #1
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d003      	beq.n	800eeba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f001 f81c 	bl	800fef0 <I2C_Slave_STOPF>
 800eeb8:	e056      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800eeba:	7bbb      	ldrb	r3, [r7, #14]
 800eebc:	2b21      	cmp	r3, #33	; 0x21
 800eebe:	d002      	beq.n	800eec6 <HAL_I2C_EV_IRQHandler+0x23a>
 800eec0:	7bbb      	ldrb	r3, [r7, #14]
 800eec2:	2b29      	cmp	r3, #41	; 0x29
 800eec4:	d125      	bne.n	800ef12 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eec6:	69fb      	ldr	r3, [r7, #28]
 800eec8:	09db      	lsrs	r3, r3, #7
 800eeca:	f003 0301 	and.w	r3, r3, #1
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d00f      	beq.n	800eef2 <HAL_I2C_EV_IRQHandler+0x266>
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	0a9b      	lsrs	r3, r3, #10
 800eed6:	f003 0301 	and.w	r3, r3, #1
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d009      	beq.n	800eef2 <HAL_I2C_EV_IRQHandler+0x266>
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	089b      	lsrs	r3, r3, #2
 800eee2:	f003 0301 	and.w	r3, r3, #1
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d103      	bne.n	800eef2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fef8 	bl	800fce0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800eef0:	e039      	b.n	800ef66 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	089b      	lsrs	r3, r3, #2
 800eef6:	f003 0301 	and.w	r3, r3, #1
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d033      	beq.n	800ef66 <HAL_I2C_EV_IRQHandler+0x2da>
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	0a5b      	lsrs	r3, r3, #9
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d02d      	beq.n	800ef66 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 ff25 	bl	800fd5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ef10:	e029      	b.n	800ef66 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	099b      	lsrs	r3, r3, #6
 800ef16:	f003 0301 	and.w	r3, r3, #1
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d00f      	beq.n	800ef3e <HAL_I2C_EV_IRQHandler+0x2b2>
 800ef1e:	697b      	ldr	r3, [r7, #20]
 800ef20:	0a9b      	lsrs	r3, r3, #10
 800ef22:	f003 0301 	and.w	r3, r3, #1
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d009      	beq.n	800ef3e <HAL_I2C_EV_IRQHandler+0x2b2>
 800ef2a:	69fb      	ldr	r3, [r7, #28]
 800ef2c:	089b      	lsrs	r3, r3, #2
 800ef2e:	f003 0301 	and.w	r3, r3, #1
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d103      	bne.n	800ef3e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f000 ff30 	bl	800fd9c <I2C_SlaveReceive_RXNE>
 800ef3c:	e014      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	089b      	lsrs	r3, r3, #2
 800ef42:	f003 0301 	and.w	r3, r3, #1
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00e      	beq.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	0a5b      	lsrs	r3, r3, #9
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d008      	beq.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	f000 ff5e 	bl	800fe18 <I2C_SlaveReceive_BTF>
 800ef5c:	e004      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800ef5e:	bf00      	nop
 800ef60:	e002      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800ef62:	bf00      	nop
 800ef64:	e000      	b.n	800ef68 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800ef66:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800ef68:	3720      	adds	r7, #32
 800ef6a:	46bd      	mov	sp, r7
 800ef6c:	bd80      	pop	{r7, pc}

0800ef6e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800ef6e:	b580      	push	{r7, lr}
 800ef70:	b08a      	sub	sp, #40	; 0x28
 800ef72:	af00      	add	r7, sp, #0
 800ef74:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	695b      	ldr	r3, [r3, #20]
 800ef7c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	685b      	ldr	r3, [r3, #4]
 800ef84:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800ef86:	2300      	movs	r3, #0
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ef90:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	0a1b      	lsrs	r3, r3, #8
 800ef96:	f003 0301 	and.w	r3, r3, #1
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00e      	beq.n	800efbc <HAL_I2C_ER_IRQHandler+0x4e>
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	0a1b      	lsrs	r3, r3, #8
 800efa2:	f003 0301 	and.w	r3, r3, #1
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d008      	beq.n	800efbc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800efaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efac:	f043 0301 	orr.w	r3, r3, #1
 800efb0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800efba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800efbc:	6a3b      	ldr	r3, [r7, #32]
 800efbe:	0a5b      	lsrs	r3, r3, #9
 800efc0:	f003 0301 	and.w	r3, r3, #1
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d00e      	beq.n	800efe6 <HAL_I2C_ER_IRQHandler+0x78>
 800efc8:	69fb      	ldr	r3, [r7, #28]
 800efca:	0a1b      	lsrs	r3, r3, #8
 800efcc:	f003 0301 	and.w	r3, r3, #1
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d008      	beq.n	800efe6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	f043 0302 	orr.w	r3, r3, #2
 800efda:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800efe4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	0a9b      	lsrs	r3, r3, #10
 800efea:	f003 0301 	and.w	r3, r3, #1
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d03f      	beq.n	800f072 <HAL_I2C_ER_IRQHandler+0x104>
 800eff2:	69fb      	ldr	r3, [r7, #28]
 800eff4:	0a1b      	lsrs	r3, r3, #8
 800eff6:	f003 0301 	and.w	r3, r3, #1
 800effa:	2b00      	cmp	r3, #0
 800effc:	d039      	beq.n	800f072 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800effe:	7efb      	ldrb	r3, [r7, #27]
 800f000:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f006:	b29b      	uxth	r3, r3
 800f008:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f010:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f016:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800f018:	7ebb      	ldrb	r3, [r7, #26]
 800f01a:	2b20      	cmp	r3, #32
 800f01c:	d112      	bne.n	800f044 <HAL_I2C_ER_IRQHandler+0xd6>
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10f      	bne.n	800f044 <HAL_I2C_ER_IRQHandler+0xd6>
 800f024:	7cfb      	ldrb	r3, [r7, #19]
 800f026:	2b21      	cmp	r3, #33	; 0x21
 800f028:	d008      	beq.n	800f03c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800f02a:	7cfb      	ldrb	r3, [r7, #19]
 800f02c:	2b29      	cmp	r3, #41	; 0x29
 800f02e:	d005      	beq.n	800f03c <HAL_I2C_ER_IRQHandler+0xce>
 800f030:	7cfb      	ldrb	r3, [r7, #19]
 800f032:	2b28      	cmp	r3, #40	; 0x28
 800f034:	d106      	bne.n	800f044 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	2b21      	cmp	r3, #33	; 0x21
 800f03a:	d103      	bne.n	800f044 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f001 f887 	bl	8010150 <I2C_Slave_AF>
 800f042:	e016      	b.n	800f072 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f04c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800f04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f050:	f043 0304 	orr.w	r3, r3, #4
 800f054:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800f056:	7efb      	ldrb	r3, [r7, #27]
 800f058:	2b10      	cmp	r3, #16
 800f05a:	d002      	beq.n	800f062 <HAL_I2C_ER_IRQHandler+0xf4>
 800f05c:	7efb      	ldrb	r3, [r7, #27]
 800f05e:	2b40      	cmp	r3, #64	; 0x40
 800f060:	d107      	bne.n	800f072 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	681a      	ldr	r2, [r3, #0]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f070:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800f072:	6a3b      	ldr	r3, [r7, #32]
 800f074:	0adb      	lsrs	r3, r3, #11
 800f076:	f003 0301 	and.w	r3, r3, #1
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d00e      	beq.n	800f09c <HAL_I2C_ER_IRQHandler+0x12e>
 800f07e:	69fb      	ldr	r3, [r7, #28]
 800f080:	0a1b      	lsrs	r3, r3, #8
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	d008      	beq.n	800f09c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800f08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f08c:	f043 0308 	orr.w	r3, r3, #8
 800f090:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800f09a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800f09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d008      	beq.n	800f0b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	431a      	orrs	r2, r3
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f001 f8be 	bl	8010230 <I2C_ITError>
  }
}
 800f0b4:	bf00      	nop
 800f0b6:	3728      	adds	r7, #40	; 0x28
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b083      	sub	sp, #12
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800f0c4:	bf00      	nop
 800f0c6:	370c      	adds	r7, #12
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b083      	sub	sp, #12
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800f0d8:	bf00      	nop
 800f0da:	370c      	adds	r7, #12
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0e2:	4770      	bx	lr

0800f0e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800f0ec:	bf00      	nop
 800f0ee:	370c      	adds	r7, #12
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800f100:	bf00      	nop
 800f102:	370c      	adds	r7, #12
 800f104:	46bd      	mov	sp, r7
 800f106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f10a:	4770      	bx	lr

0800f10c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800f10c:	b480      	push	{r7}
 800f10e:	b083      	sub	sp, #12
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	70fb      	strb	r3, [r7, #3]
 800f118:	4613      	mov	r3, r2
 800f11a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800f11c:	bf00      	nop
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f128:	b480      	push	{r7}
 800f12a:	b083      	sub	sp, #12
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800f130:	bf00      	nop
 800f132:	370c      	adds	r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr

0800f13c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800f144:	bf00      	nop
 800f146:	370c      	adds	r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f19a:	b2db      	uxtb	r3, r3
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	370c      	adds	r7, #12
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a6:	4770      	bx	lr

0800f1a8 <HAL_I2C_GetMode>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL mode
  */
HAL_I2C_ModeTypeDef HAL_I2C_GetMode(I2C_HandleTypeDef *hi2c)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  return hi2c->Mode;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1b6:	b2db      	uxtb	r3, r3
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1ea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1f2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1f8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d150      	bne.n	800f2a4 <I2C_MasterTransmit_TXE+0xc8>
 800f202:	7bfb      	ldrb	r3, [r7, #15]
 800f204:	2b21      	cmp	r3, #33	; 0x21
 800f206:	d14d      	bne.n	800f2a4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f208:	68bb      	ldr	r3, [r7, #8]
 800f20a:	2b08      	cmp	r3, #8
 800f20c:	d01d      	beq.n	800f24a <I2C_MasterTransmit_TXE+0x6e>
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	2b20      	cmp	r3, #32
 800f212:	d01a      	beq.n	800f24a <I2C_MasterTransmit_TXE+0x6e>
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f21a:	d016      	beq.n	800f24a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	685a      	ldr	r2, [r3, #4]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f22a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2211      	movs	r2, #17
 800f230:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2200      	movs	r2, #0
 800f236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2220      	movs	r2, #32
 800f23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff ff3a 	bl	800f0bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f248:	e060      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	685a      	ldr	r2, [r3, #4]
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f258:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f268:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2220      	movs	r2, #32
 800f274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b40      	cmp	r3, #64	; 0x40
 800f282:	d107      	bne.n	800f294 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7ff ff55 	bl	800f13c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f292:	e03b      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f29c:	6878      	ldr	r0, [r7, #4]
 800f29e:	f7ff ff0d 	bl	800f0bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f2a2:	e033      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
 800f2a6:	2b21      	cmp	r3, #33	; 0x21
 800f2a8:	d005      	beq.n	800f2b6 <I2C_MasterTransmit_TXE+0xda>
 800f2aa:	7bbb      	ldrb	r3, [r7, #14]
 800f2ac:	2b40      	cmp	r3, #64	; 0x40
 800f2ae:	d12d      	bne.n	800f30c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800f2b0:	7bfb      	ldrb	r3, [r7, #15]
 800f2b2:	2b22      	cmp	r3, #34	; 0x22
 800f2b4:	d12a      	bne.n	800f30c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d108      	bne.n	800f2d2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	685a      	ldr	r2, [r3, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2ce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800f2d0:	e01c      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b40      	cmp	r3, #64	; 0x40
 800f2dc:	d103      	bne.n	800f2e6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f88e 	bl	800f400 <I2C_MemoryTransmit_TXE_BTF>
}
 800f2e4:	e012      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f300:	b29b      	uxth	r3, r3
 800f302:	3b01      	subs	r3, #1
 800f304:	b29a      	uxth	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f30a:	e7ff      	b.n	800f30c <I2C_MasterTransmit_TXE+0x130>
 800f30c:	bf00      	nop
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f320:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b21      	cmp	r3, #33	; 0x21
 800f32c:	d164      	bne.n	800f3f8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f332:	b29b      	uxth	r3, r3
 800f334:	2b00      	cmp	r3, #0
 800f336:	d012      	beq.n	800f35e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f33c:	781a      	ldrb	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f348:	1c5a      	adds	r2, r3, #1
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f352:	b29b      	uxth	r3, r3
 800f354:	3b01      	subs	r3, #1
 800f356:	b29a      	uxth	r2, r3
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800f35c:	e04c      	b.n	800f3f8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	2b08      	cmp	r3, #8
 800f362:	d01d      	beq.n	800f3a0 <I2C_MasterTransmit_BTF+0x8c>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2b20      	cmp	r3, #32
 800f368:	d01a      	beq.n	800f3a0 <I2C_MasterTransmit_BTF+0x8c>
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f370:	d016      	beq.n	800f3a0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	685a      	ldr	r2, [r3, #4]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f380:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2211      	movs	r2, #17
 800f386:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2200      	movs	r2, #0
 800f38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2220      	movs	r2, #32
 800f394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff fe8f 	bl	800f0bc <HAL_I2C_MasterTxCpltCallback>
}
 800f39e:	e02b      	b.n	800f3f8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	685a      	ldr	r2, [r3, #4]
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f3ae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f3be:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2220      	movs	r2, #32
 800f3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b40      	cmp	r3, #64	; 0x40
 800f3d8:	d107      	bne.n	800f3ea <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff feaa 	bl	800f13c <HAL_I2C_MemTxCpltCallback>
}
 800f3e8:	e006      	b.n	800f3f8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fe62 	bl	800f0bc <HAL_I2C_MasterTxCpltCallback>
}
 800f3f8:	bf00      	nop
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}

0800f400 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f40e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f414:	2b00      	cmp	r3, #0
 800f416:	d11d      	bne.n	800f454 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f41c:	2b01      	cmp	r3, #1
 800f41e:	d10b      	bne.n	800f438 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f424:	b2da      	uxtb	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f430:	1c9a      	adds	r2, r3, #2
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800f436:	e073      	b.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f43c:	b29b      	uxth	r3, r3
 800f43e:	121b      	asrs	r3, r3, #8
 800f440:	b2da      	uxtb	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f44c:	1c5a      	adds	r2, r3, #1
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f452:	e065      	b.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f458:	2b01      	cmp	r3, #1
 800f45a:	d10b      	bne.n	800f474 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f460:	b2da      	uxtb	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f472:	e055      	b.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d151      	bne.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
 800f47e:	2b22      	cmp	r3, #34	; 0x22
 800f480:	d10d      	bne.n	800f49e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	681a      	ldr	r2, [r3, #0]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f490:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800f49c:	e040      	b.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d015      	beq.n	800f4d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800f4a8:	7bfb      	ldrb	r3, [r7, #15]
 800f4aa:	2b21      	cmp	r3, #33	; 0x21
 800f4ac:	d112      	bne.n	800f4d4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b2:	781a      	ldrb	r2, [r3, #0]
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4c8:	b29b      	uxth	r3, r3
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f4d2:	e025      	b.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4d8:	b29b      	uxth	r3, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d120      	bne.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800f4de:	7bfb      	ldrb	r3, [r7, #15]
 800f4e0:	2b21      	cmp	r3, #33	; 0x21
 800f4e2:	d11d      	bne.n	800f520 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	685a      	ldr	r2, [r3, #4]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f4f2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	681a      	ldr	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f502:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2220      	movs	r2, #32
 800f50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f7ff fe0e 	bl	800f13c <HAL_I2C_MemTxCpltCallback>
}
 800f520:	bf00      	nop
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b084      	sub	sp, #16
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b22      	cmp	r3, #34	; 0x22
 800f53a:	f040 80a2 	bne.w	800f682 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f542:	b29b      	uxth	r3, r3
 800f544:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	2b03      	cmp	r3, #3
 800f54a:	d921      	bls.n	800f590 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	691a      	ldr	r2, [r3, #16]
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f556:	b2d2      	uxtb	r2, r2
 800f558:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55e:	1c5a      	adds	r2, r3, #1
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f568:	b29b      	uxth	r3, r3
 800f56a:	3b01      	subs	r3, #1
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f576:	b29b      	uxth	r3, r3
 800f578:	2b03      	cmp	r3, #3
 800f57a:	f040 8082 	bne.w	800f682 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	685a      	ldr	r2, [r3, #4]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f58c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800f58e:	e078      	b.n	800f682 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f594:	2b02      	cmp	r3, #2
 800f596:	d074      	beq.n	800f682 <I2C_MasterReceive_RXNE+0x15a>
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d002      	beq.n	800f5a4 <I2C_MasterReceive_RXNE+0x7c>
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d16e      	bne.n	800f682 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f001 fd92 	bl	80110ce <I2C_WaitOnSTOPRequestThroughIT>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d142      	bne.n	800f636 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681a      	ldr	r2, [r3, #0]
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f5be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f5ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	691a      	ldr	r2, [r3, #16]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5da:	b2d2      	uxtb	r2, r2
 800f5dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5e2:	1c5a      	adds	r2, r3, #1
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5ec:	b29b      	uxth	r3, r3
 800f5ee:	3b01      	subs	r3, #1
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2220      	movs	r2, #32
 800f5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f604:	b2db      	uxtb	r3, r3
 800f606:	2b40      	cmp	r3, #64	; 0x40
 800f608:	d10a      	bne.n	800f620 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7ff fd99 	bl	800f150 <HAL_I2C_MemRxCpltCallback>
}
 800f61e:	e030      	b.n	800f682 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2212      	movs	r2, #18
 800f62c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f7ff fd4e 	bl	800f0d0 <HAL_I2C_MasterRxCpltCallback>
}
 800f634:	e025      	b.n	800f682 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	685a      	ldr	r2, [r3, #4]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800f644:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	691a      	ldr	r2, [r3, #16]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	b2d2      	uxtb	r2, r2
 800f652:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f658:	1c5a      	adds	r2, r3, #1
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f662:	b29b      	uxth	r3, r3
 800f664:	3b01      	subs	r3, #1
 800f666:	b29a      	uxth	r2, r3
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2220      	movs	r2, #32
 800f670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2200      	movs	r2, #0
 800f678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f7ff fd71 	bl	800f164 <HAL_I2C_ErrorCallback>
}
 800f682:	bf00      	nop
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}

0800f68a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800f68a:	b580      	push	{r7, lr}
 800f68c:	b084      	sub	sp, #16
 800f68e:	af00      	add	r7, sp, #0
 800f690:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f696:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	2b04      	cmp	r3, #4
 800f6a0:	d11b      	bne.n	800f6da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	685a      	ldr	r2, [r3, #4]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	691a      	ldr	r2, [r3, #16]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6bc:	b2d2      	uxtb	r2, r2
 800f6be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c4:	1c5a      	adds	r2, r3, #1
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6ce:	b29b      	uxth	r3, r3
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800f6d8:	e0bd      	b.n	800f856 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f6de:	b29b      	uxth	r3, r3
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	d129      	bne.n	800f738 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	685a      	ldr	r2, [r3, #4]
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f6f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	d00a      	beq.n	800f710 <I2C_MasterReceive_BTF+0x86>
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2b02      	cmp	r3, #2
 800f6fe:	d007      	beq.n	800f710 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f70e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	691a      	ldr	r2, [r3, #16]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71a:	b2d2      	uxtb	r2, r2
 800f71c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f722:	1c5a      	adds	r2, r3, #1
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	3b01      	subs	r3, #1
 800f730:	b29a      	uxth	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f736:	e08e      	b.n	800f856 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	2b02      	cmp	r3, #2
 800f740:	d176      	bne.n	800f830 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d002      	beq.n	800f74e <I2C_MasterReceive_BTF+0xc4>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2b10      	cmp	r3, #16
 800f74c:	d108      	bne.n	800f760 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	681a      	ldr	r2, [r3, #0]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f75c:	601a      	str	r2, [r3, #0]
 800f75e:	e019      	b.n	800f794 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b04      	cmp	r3, #4
 800f764:	d002      	beq.n	800f76c <I2C_MasterReceive_BTF+0xe2>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b02      	cmp	r3, #2
 800f76a:	d108      	bne.n	800f77e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	681a      	ldr	r2, [r3, #0]
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f77a:	601a      	str	r2, [r3, #0]
 800f77c:	e00a      	b.n	800f794 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b10      	cmp	r3, #16
 800f782:	d007      	beq.n	800f794 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f792:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	691a      	ldr	r2, [r3, #16]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79e:	b2d2      	uxtb	r2, r2
 800f7a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a6:	1c5a      	adds	r2, r3, #1
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	3b01      	subs	r3, #1
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	691a      	ldr	r2, [r3, #16]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7c4:	b2d2      	uxtb	r2, r2
 800f7c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f7d6:	b29b      	uxth	r3, r3
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	b29a      	uxth	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	685a      	ldr	r2, [r3, #4]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800f7ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	2220      	movs	r2, #32
 800f7f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	2b40      	cmp	r3, #64	; 0x40
 800f802:	d10a      	bne.n	800f81a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2200      	movs	r2, #0
 800f808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f7ff fc9c 	bl	800f150 <HAL_I2C_MemRxCpltCallback>
}
 800f818:	e01d      	b.n	800f856 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2212      	movs	r2, #18
 800f826:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7ff fc51 	bl	800f0d0 <HAL_I2C_MasterRxCpltCallback>
}
 800f82e:	e012      	b.n	800f856 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	691a      	ldr	r2, [r3, #16]
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f83a:	b2d2      	uxtb	r2, r2
 800f83c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	3b01      	subs	r3, #1
 800f850:	b29a      	uxth	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800f856:	bf00      	nop
 800f858:	3710      	adds	r7, #16
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}

0800f85e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800f85e:	b480      	push	{r7}
 800f860:	b083      	sub	sp, #12
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b40      	cmp	r3, #64	; 0x40
 800f870:	d117      	bne.n	800f8a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f876:	2b00      	cmp	r3, #0
 800f878:	d109      	bne.n	800f88e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	461a      	mov	r2, r3
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f88a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800f88c:	e067      	b.n	800f95e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f892:	b2db      	uxtb	r3, r3
 800f894:	f043 0301 	orr.w	r3, r3, #1
 800f898:	b2da      	uxtb	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	611a      	str	r2, [r3, #16]
}
 800f8a0:	e05d      	b.n	800f95e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	691b      	ldr	r3, [r3, #16]
 800f8a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8aa:	d133      	bne.n	800f914 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b21      	cmp	r3, #33	; 0x21
 800f8b6:	d109      	bne.n	800f8cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	461a      	mov	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f8c8:	611a      	str	r2, [r3, #16]
 800f8ca:	e008      	b.n	800f8de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d0:	b2db      	uxtb	r3, r3
 800f8d2:	f043 0301 	orr.w	r3, r3, #1
 800f8d6:	b2da      	uxtb	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d004      	beq.n	800f8f0 <I2C_Master_SB+0x92>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d108      	bne.n	800f902 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d032      	beq.n	800f95e <I2C_Master_SB+0x100>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d02d      	beq.n	800f95e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	685a      	ldr	r2, [r3, #4]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f910:	605a      	str	r2, [r3, #4]
}
 800f912:	e024      	b.n	800f95e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d10e      	bne.n	800f93a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f920:	b29b      	uxth	r3, r3
 800f922:	11db      	asrs	r3, r3, #7
 800f924:	b2db      	uxtb	r3, r3
 800f926:	f003 0306 	and.w	r3, r3, #6
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	f063 030f 	orn	r3, r3, #15
 800f930:	b2da      	uxtb	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	611a      	str	r2, [r3, #16]
}
 800f938:	e011      	b.n	800f95e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d10d      	bne.n	800f95e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f946:	b29b      	uxth	r3, r3
 800f948:	11db      	asrs	r3, r3, #7
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	f003 0306 	and.w	r3, r3, #6
 800f950:	b2db      	uxtb	r3, r3
 800f952:	f063 030e 	orn	r3, r3, #14
 800f956:	b2da      	uxtb	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	611a      	str	r2, [r3, #16]
}
 800f95e:	bf00      	nop
 800f960:	370c      	adds	r7, #12
 800f962:	46bd      	mov	sp, r7
 800f964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800f96a:	b480      	push	{r7}
 800f96c:	b083      	sub	sp, #12
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f976:	b2da      	uxtb	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f982:	2b00      	cmp	r3, #0
 800f984:	d004      	beq.n	800f990 <I2C_Master_ADD10+0x26>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d108      	bne.n	800f9a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f994:	2b00      	cmp	r3, #0
 800f996:	d00c      	beq.n	800f9b2 <I2C_Master_ADD10+0x48>
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d007      	beq.n	800f9b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	685a      	ldr	r2, [r3, #4]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f9b0:	605a      	str	r2, [r3, #4]
  }
}
 800f9b2:	bf00      	nop
 800f9b4:	370c      	adds	r7, #12
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9bc:	4770      	bx	lr

0800f9be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800f9be:	b480      	push	{r7}
 800f9c0:	b091      	sub	sp, #68	; 0x44
 800f9c2:	af00      	add	r7, sp, #0
 800f9c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f9cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	2b22      	cmp	r3, #34	; 0x22
 800f9e6:	f040 8169 	bne.w	800fcbc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d10f      	bne.n	800fa12 <I2C_Master_ADDR+0x54>
 800f9f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f9f6:	2b40      	cmp	r3, #64	; 0x40
 800f9f8:	d10b      	bne.n	800fa12 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	60fb      	str	r3, [r7, #12]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	60fb      	str	r3, [r7, #12]
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	60fb      	str	r3, [r7, #12]
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	e160      	b.n	800fcd4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d11d      	bne.n	800fa56 <I2C_Master_ADDR+0x98>
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	691b      	ldr	r3, [r3, #16]
 800fa1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800fa22:	d118      	bne.n	800fa56 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fa24:	2300      	movs	r3, #0
 800fa26:	613b      	str	r3, [r7, #16]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	695b      	ldr	r3, [r3, #20]
 800fa2e:	613b      	str	r3, [r7, #16]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	699b      	ldr	r3, [r3, #24]
 800fa36:	613b      	str	r3, [r7, #16]
 800fa38:	693b      	ldr	r3, [r7, #16]

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	681a      	ldr	r2, [r3, #0]
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fa48:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa4e:	1c5a      	adds	r2, r3, #1
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	651a      	str	r2, [r3, #80]	; 0x50
 800fa54:	e13e      	b.n	800fcd4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d113      	bne.n	800fa88 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fa60:	2300      	movs	r3, #0
 800fa62:	617b      	str	r3, [r7, #20]
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	695b      	ldr	r3, [r3, #20]
 800fa6a:	617b      	str	r3, [r7, #20]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	617b      	str	r3, [r7, #20]
 800fa74:	697b      	ldr	r3, [r7, #20]

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa84:	601a      	str	r2, [r3, #0]
 800fa86:	e115      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	f040 808a 	bne.w	800fba8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800fa94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa96:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fa9a:	d137      	bne.n	800fb0c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	681a      	ldr	r2, [r3, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faaa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800faba:	d113      	bne.n	800fae4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	681a      	ldr	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800facc:	2300      	movs	r3, #0
 800face:	61bb      	str	r3, [r7, #24]
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	61bb      	str	r3, [r7, #24]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	699b      	ldr	r3, [r3, #24]
 800fade:	61bb      	str	r3, [r7, #24]
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	e0e7      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fae4:	2300      	movs	r3, #0
 800fae6:	61fb      	str	r3, [r7, #28]
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	695b      	ldr	r3, [r3, #20]
 800faee:	61fb      	str	r3, [r7, #28]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	699b      	ldr	r3, [r3, #24]
 800faf6:	61fb      	str	r3, [r7, #28]
 800faf8:	69fb      	ldr	r3, [r7, #28]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fb08:	601a      	str	r2, [r3, #0]
 800fb0a:	e0d3      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	2b08      	cmp	r3, #8
 800fb10:	d02e      	beq.n	800fb70 <I2C_Master_ADDR+0x1b2>
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	2b20      	cmp	r3, #32
 800fb16:	d02b      	beq.n	800fb70 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800fb18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1a:	2b12      	cmp	r3, #18
 800fb1c:	d102      	bne.n	800fb24 <I2C_Master_ADDR+0x166>
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d125      	bne.n	800fb70 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb26:	2b04      	cmp	r3, #4
 800fb28:	d00e      	beq.n	800fb48 <I2C_Master_ADDR+0x18a>
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	d00b      	beq.n	800fb48 <I2C_Master_ADDR+0x18a>
 800fb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb32:	2b10      	cmp	r3, #16
 800fb34:	d008      	beq.n	800fb48 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	e007      	b.n	800fb58 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fb56:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fb58:	2300      	movs	r3, #0
 800fb5a:	623b      	str	r3, [r7, #32]
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	695b      	ldr	r3, [r3, #20]
 800fb62:	623b      	str	r3, [r7, #32]
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	623b      	str	r3, [r7, #32]
 800fb6c:	6a3b      	ldr	r3, [r7, #32]
 800fb6e:	e0a1      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fb7e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fb80:	2300      	movs	r3, #0
 800fb82:	627b      	str	r3, [r7, #36]	; 0x24
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	695b      	ldr	r3, [r3, #20]
 800fb8a:	627b      	str	r3, [r7, #36]	; 0x24
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	699b      	ldr	r3, [r3, #24]
 800fb92:	627b      	str	r3, [r7, #36]	; 0x24
 800fb94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	681a      	ldr	r2, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fba4:	601a      	str	r2, [r3, #0]
 800fba6:	e085      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	2b02      	cmp	r3, #2
 800fbb0:	d14d      	bne.n	800fc4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800fbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbb4:	2b04      	cmp	r3, #4
 800fbb6:	d016      	beq.n	800fbe6 <I2C_Master_ADDR+0x228>
 800fbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbba:	2b02      	cmp	r3, #2
 800fbbc:	d013      	beq.n	800fbe6 <I2C_Master_ADDR+0x228>
 800fbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc0:	2b10      	cmp	r3, #16
 800fbc2:	d010      	beq.n	800fbe6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	681a      	ldr	r2, [r3, #0]
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fbd2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	681a      	ldr	r2, [r3, #0]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	e007      	b.n	800fbf6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fbf4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc04:	d117      	bne.n	800fc36 <I2C_Master_ADDR+0x278>
 800fc06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc0c:	d00b      	beq.n	800fc26 <I2C_Master_ADDR+0x268>
 800fc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc10:	2b01      	cmp	r3, #1
 800fc12:	d008      	beq.n	800fc26 <I2C_Master_ADDR+0x268>
 800fc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc16:	2b08      	cmp	r3, #8
 800fc18:	d005      	beq.n	800fc26 <I2C_Master_ADDR+0x268>
 800fc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1c:	2b10      	cmp	r3, #16
 800fc1e:	d002      	beq.n	800fc26 <I2C_Master_ADDR+0x268>
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	2b20      	cmp	r3, #32
 800fc24:	d107      	bne.n	800fc36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	685a      	ldr	r2, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fc34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc36:	2300      	movs	r3, #0
 800fc38:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	695b      	ldr	r3, [r3, #20]
 800fc40:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	699b      	ldr	r3, [r3, #24]
 800fc48:	62bb      	str	r3, [r7, #40]	; 0x28
 800fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc4c:	e032      	b.n	800fcb4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	681a      	ldr	r2, [r3, #0]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fc5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fc68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fc6c:	d117      	bne.n	800fc9e <I2C_Master_ADDR+0x2e0>
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800fc74:	d00b      	beq.n	800fc8e <I2C_Master_ADDR+0x2d0>
 800fc76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d008      	beq.n	800fc8e <I2C_Master_ADDR+0x2d0>
 800fc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc7e:	2b08      	cmp	r3, #8
 800fc80:	d005      	beq.n	800fc8e <I2C_Master_ADDR+0x2d0>
 800fc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc84:	2b10      	cmp	r3, #16
 800fc86:	d002      	beq.n	800fc8e <I2C_Master_ADDR+0x2d0>
 800fc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8a:	2b20      	cmp	r3, #32
 800fc8c:	d107      	bne.n	800fc9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	685a      	ldr	r2, [r3, #4]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fc9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fc9e:	2300      	movs	r3, #0
 800fca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	695b      	ldr	r3, [r3, #20]
 800fca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800fcba:	e00b      	b.n	800fcd4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	633b      	str	r3, [r7, #48]	; 0x30
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	695b      	ldr	r3, [r3, #20]
 800fcc6:	633b      	str	r3, [r7, #48]	; 0x30
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	699b      	ldr	r3, [r3, #24]
 800fcce:	633b      	str	r3, [r7, #48]	; 0x30
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800fcd2:	e7ff      	b.n	800fcd4 <I2C_Master_ADDR+0x316>
 800fcd4:	bf00      	nop
 800fcd6:	3744      	adds	r7, #68	; 0x44
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fcee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d02b      	beq.n	800fd52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfe:	781a      	ldrb	r2, [r3, #0]
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd0a:	1c5a      	adds	r2, r3, #1
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	3b01      	subs	r3, #1
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d114      	bne.n	800fd52 <I2C_SlaveTransmit_TXE+0x72>
 800fd28:	7bfb      	ldrb	r3, [r7, #15]
 800fd2a:	2b29      	cmp	r3, #41	; 0x29
 800fd2c:	d111      	bne.n	800fd52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fd3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2221      	movs	r2, #33	; 0x21
 800fd42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2228      	movs	r2, #40	; 0x28
 800fd48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f7ff f9c9 	bl	800f0e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800fd52:	bf00      	nop
 800fd54:	3710      	adds	r7, #16
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}

0800fd5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800fd5a:	b480      	push	{r7}
 800fd5c:	b083      	sub	sp, #12
 800fd5e:	af00      	add	r7, sp, #0
 800fd60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d011      	beq.n	800fd90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd70:	781a      	ldrb	r2, [r3, #0]
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7c:	1c5a      	adds	r2, r3, #1
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800fd90:	bf00      	nop
 800fd92:	370c      	adds	r7, #12
 800fd94:	46bd      	mov	sp, r7
 800fd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9a:	4770      	bx	lr

0800fd9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b084      	sub	sp, #16
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fdaa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d02c      	beq.n	800fe10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	691a      	ldr	r2, [r3, #16]
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc0:	b2d2      	uxtb	r2, r2
 800fdc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdc8:	1c5a      	adds	r2, r3, #1
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	3b01      	subs	r3, #1
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fde0:	b29b      	uxth	r3, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d114      	bne.n	800fe10 <I2C_SlaveReceive_RXNE+0x74>
 800fde6:	7bfb      	ldrb	r3, [r7, #15]
 800fde8:	2b2a      	cmp	r3, #42	; 0x2a
 800fdea:	d111      	bne.n	800fe10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	685a      	ldr	r2, [r3, #4]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2222      	movs	r2, #34	; 0x22
 800fe00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2228      	movs	r2, #40	; 0x28
 800fe06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7ff f974 	bl	800f0f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800fe10:	bf00      	nop
 800fe12:	3710      	adds	r7, #16
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d012      	beq.n	800fe50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	691a      	ldr	r2, [r3, #16]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe34:	b2d2      	uxtb	r2, r2
 800fe36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3c:	1c5a      	adds	r2, r3, #1
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe46:	b29b      	uxth	r3, r3
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	b29a      	uxth	r2, r3
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800fe50:	bf00      	nop
 800fe52:	370c      	adds	r7, #12
 800fe54:	46bd      	mov	sp, r7
 800fe56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5a:	4770      	bx	lr

0800fe5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fe76:	2b28      	cmp	r3, #40	; 0x28
 800fe78:	d127      	bne.n	800feca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	685a      	ldr	r2, [r3, #4]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	089b      	lsrs	r3, r3, #2
 800fe8e:	f003 0301 	and.w	r3, r3, #1
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d101      	bne.n	800fe9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800fe96:	2301      	movs	r3, #1
 800fe98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	09db      	lsrs	r3, r3, #7
 800fe9e:	f003 0301 	and.w	r3, r3, #1
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d103      	bne.n	800feae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	68db      	ldr	r3, [r3, #12]
 800feaa:	81bb      	strh	r3, [r7, #12]
 800feac:	e002      	b.n	800feb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	699b      	ldr	r3, [r3, #24]
 800feb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800febc:	89ba      	ldrh	r2, [r7, #12]
 800febe:	7bfb      	ldrb	r3, [r7, #15]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff f922 	bl	800f10c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800fec8:	e00e      	b.n	800fee8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800feca:	2300      	movs	r3, #0
 800fecc:	60bb      	str	r3, [r7, #8]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	695b      	ldr	r3, [r3, #20]
 800fed4:	60bb      	str	r3, [r7, #8]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	699b      	ldr	r3, [r3, #24]
 800fedc:	60bb      	str	r3, [r7, #8]
 800fede:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2200      	movs	r2, #0
 800fee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800fee8:	bf00      	nop
 800feea:	3710      	adds	r7, #16
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b084      	sub	sp, #16
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fefe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	685a      	ldr	r2, [r3, #4]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ff0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800ff10:	2300      	movs	r3, #0
 800ff12:	60bb      	str	r3, [r7, #8]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	695b      	ldr	r3, [r3, #20]
 800ff1a:	60bb      	str	r3, [r7, #8]
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f042 0201 	orr.w	r2, r2, #1
 800ff2a:	601a      	str	r2, [r3, #0]
 800ff2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ff48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ff4c:	d172      	bne.n	8010034 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ff4e:	7bfb      	ldrb	r3, [r7, #15]
 800ff50:	2b22      	cmp	r3, #34	; 0x22
 800ff52:	d002      	beq.n	800ff5a <I2C_Slave_STOPF+0x6a>
 800ff54:	7bfb      	ldrb	r3, [r7, #15]
 800ff56:	2b2a      	cmp	r3, #42	; 0x2a
 800ff58:	d135      	bne.n	800ffc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d005      	beq.n	800ff7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff76:	f043 0204 	orr.w	r2, r3, #4
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ff8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7f8 f9c1 	bl	800831a <HAL_DMA_GetState>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d049      	beq.n	8010032 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa2:	4a69      	ldr	r2, [pc, #420]	; (8010148 <I2C_Slave_STOPF+0x258>)
 800ffa4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f7 fe6f 	bl	8007c8e <HAL_DMA_Abort_IT>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d03d      	beq.n	8010032 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ffc4:	e035      	b.n	8010032 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ffd8:	b29b      	uxth	r3, r3
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d005      	beq.n	800ffea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe2:	f043 0204 	orr.w	r2, r3, #4
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	685a      	ldr	r2, [r3, #4]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fff8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fffe:	4618      	mov	r0, r3
 8010000:	f7f8 f98b 	bl	800831a <HAL_DMA_GetState>
 8010004:	4603      	mov	r3, r0
 8010006:	2b01      	cmp	r3, #1
 8010008:	d014      	beq.n	8010034 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801000e:	4a4e      	ldr	r2, [pc, #312]	; (8010148 <I2C_Slave_STOPF+0x258>)
 8010010:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010016:	4618      	mov	r0, r3
 8010018:	f7f7 fe39 	bl	8007c8e <HAL_DMA_Abort_IT>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	d008      	beq.n	8010034 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801002c:	4610      	mov	r0, r2
 801002e:	4798      	blx	r3
 8010030:	e000      	b.n	8010034 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8010032:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010038:	b29b      	uxth	r3, r3
 801003a:	2b00      	cmp	r3, #0
 801003c:	d03e      	beq.n	80100bc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	695b      	ldr	r3, [r3, #20]
 8010044:	f003 0304 	and.w	r3, r3, #4
 8010048:	2b04      	cmp	r3, #4
 801004a:	d112      	bne.n	8010072 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	691a      	ldr	r2, [r3, #16]
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010056:	b2d2      	uxtb	r2, r2
 8010058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005e:	1c5a      	adds	r2, r3, #1
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010068:	b29b      	uxth	r3, r3
 801006a:	3b01      	subs	r3, #1
 801006c:	b29a      	uxth	r2, r3
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	695b      	ldr	r3, [r3, #20]
 8010078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801007c:	2b40      	cmp	r3, #64	; 0x40
 801007e:	d112      	bne.n	80100a6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	691a      	ldr	r2, [r3, #16]
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801008a:	b2d2      	uxtb	r2, r2
 801008c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010092:	1c5a      	adds	r2, r3, #1
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801009c:	b29b      	uxth	r3, r3
 801009e:	3b01      	subs	r3, #1
 80100a0:	b29a      	uxth	r2, r3
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d005      	beq.n	80100bc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b4:	f043 0204 	orr.w	r2, r3, #4
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d003      	beq.n	80100cc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 f8b3 	bl	8010230 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80100ca:	e039      	b.n	8010140 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
 80100ce:	2b2a      	cmp	r3, #42	; 0x2a
 80100d0:	d109      	bne.n	80100e6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2200      	movs	r2, #0
 80100d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2228      	movs	r2, #40	; 0x28
 80100dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff f809 	bl	800f0f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100ec:	b2db      	uxtb	r3, r3
 80100ee:	2b28      	cmp	r3, #40	; 0x28
 80100f0:	d111      	bne.n	8010116 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	4a15      	ldr	r2, [pc, #84]	; (801014c <I2C_Slave_STOPF+0x25c>)
 80100f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2220      	movs	r2, #32
 8010102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f7ff f80a 	bl	800f128 <HAL_I2C_ListenCpltCallback>
}
 8010114:	e014      	b.n	8010140 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801011a:	2b22      	cmp	r3, #34	; 0x22
 801011c:	d002      	beq.n	8010124 <I2C_Slave_STOPF+0x234>
 801011e:	7bfb      	ldrb	r3, [r7, #15]
 8010120:	2b22      	cmp	r3, #34	; 0x22
 8010122:	d10d      	bne.n	8010140 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2220      	movs	r2, #32
 801012e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2200      	movs	r2, #0
 8010136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7fe ffdc 	bl	800f0f8 <HAL_I2C_SlaveRxCpltCallback>
}
 8010140:	bf00      	nop
 8010142:	3710      	adds	r7, #16
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	08010c55 	.word	0x08010c55
 801014c:	ffff0000 	.word	0xffff0000

08010150 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801015e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	2b08      	cmp	r3, #8
 801016a:	d002      	beq.n	8010172 <I2C_Slave_AF+0x22>
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	2b20      	cmp	r3, #32
 8010170:	d129      	bne.n	80101c6 <I2C_Slave_AF+0x76>
 8010172:	7bfb      	ldrb	r3, [r7, #15]
 8010174:	2b28      	cmp	r3, #40	; 0x28
 8010176:	d126      	bne.n	80101c6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a2c      	ldr	r2, [pc, #176]	; (801022c <I2C_Slave_AF+0xdc>)
 801017c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	685a      	ldr	r2, [r3, #4]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 801018c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010196:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80101a6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2220      	movs	r2, #32
 80101b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2200      	movs	r2, #0
 80101ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7fe ffb2 	bl	800f128 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80101c4:	e02e      	b.n	8010224 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80101c6:	7bfb      	ldrb	r3, [r7, #15]
 80101c8:	2b21      	cmp	r3, #33	; 0x21
 80101ca:	d126      	bne.n	801021a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	4a17      	ldr	r2, [pc, #92]	; (801022c <I2C_Slave_AF+0xdc>)
 80101d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	2221      	movs	r2, #33	; 0x21
 80101d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2220      	movs	r2, #32
 80101dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2200      	movs	r2, #0
 80101e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	685a      	ldr	r2, [r3, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80101f6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010200:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010210:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f7fe ff66 	bl	800f0e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8010218:	e004      	b.n	8010224 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010222:	615a      	str	r2, [r3, #20]
}
 8010224:	bf00      	nop
 8010226:	3710      	adds	r7, #16
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}
 801022c:	ffff0000 	.word	0xffff0000

08010230 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801023e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010246:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8010248:	7bbb      	ldrb	r3, [r7, #14]
 801024a:	2b10      	cmp	r3, #16
 801024c:	d002      	beq.n	8010254 <I2C_ITError+0x24>
 801024e:	7bbb      	ldrb	r3, [r7, #14]
 8010250:	2b40      	cmp	r3, #64	; 0x40
 8010252:	d10a      	bne.n	801026a <I2C_ITError+0x3a>
 8010254:	7bfb      	ldrb	r3, [r7, #15]
 8010256:	2b22      	cmp	r3, #34	; 0x22
 8010258:	d107      	bne.n	801026a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	681a      	ldr	r2, [r3, #0]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010268:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 801026a:	7bfb      	ldrb	r3, [r7, #15]
 801026c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010270:	2b28      	cmp	r3, #40	; 0x28
 8010272:	d107      	bne.n	8010284 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2228      	movs	r2, #40	; 0x28
 801027e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010282:	e015      	b.n	80102b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801028e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010292:	d00a      	beq.n	80102aa <I2C_ITError+0x7a>
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	2b60      	cmp	r3, #96	; 0x60
 8010298:	d007      	beq.n	80102aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2220      	movs	r2, #32
 801029e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2200      	movs	r2, #0
 80102ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80102ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80102be:	d162      	bne.n	8010386 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	685a      	ldr	r2, [r3, #4]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80102ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d020      	beq.n	8010320 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102e2:	4a6a      	ldr	r2, [pc, #424]	; (801048c <I2C_ITError+0x25c>)
 80102e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7f7 fccf 	bl	8007c8e <HAL_DMA_Abort_IT>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	f000 8089 	beq.w	801040a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	f022 0201 	bic.w	r2, r2, #1
 8010306:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2220      	movs	r2, #32
 801030c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010316:	687a      	ldr	r2, [r7, #4]
 8010318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801031a:	4610      	mov	r0, r2
 801031c:	4798      	blx	r3
 801031e:	e074      	b.n	801040a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010324:	4a59      	ldr	r2, [pc, #356]	; (801048c <I2C_ITError+0x25c>)
 8010326:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801032c:	4618      	mov	r0, r3
 801032e:	f7f7 fcae 	bl	8007c8e <HAL_DMA_Abort_IT>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d068      	beq.n	801040a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	695b      	ldr	r3, [r3, #20]
 801033e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010342:	2b40      	cmp	r3, #64	; 0x40
 8010344:	d10b      	bne.n	801035e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	691a      	ldr	r2, [r3, #16]
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010350:	b2d2      	uxtb	r2, r2
 8010352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010358:	1c5a      	adds	r2, r3, #1
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f022 0201 	bic.w	r2, r2, #1
 801036c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	2220      	movs	r2, #32
 8010372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801037a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801037c:	687a      	ldr	r2, [r7, #4]
 801037e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8010380:	4610      	mov	r0, r2
 8010382:	4798      	blx	r3
 8010384:	e041      	b.n	801040a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b60      	cmp	r3, #96	; 0x60
 8010390:	d125      	bne.n	80103de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	2220      	movs	r2, #32
 8010396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	2200      	movs	r2, #0
 801039e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	695b      	ldr	r3, [r3, #20]
 80103a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103aa:	2b40      	cmp	r3, #64	; 0x40
 80103ac:	d10b      	bne.n	80103c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	691a      	ldr	r2, [r3, #16]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103b8:	b2d2      	uxtb	r2, r2
 80103ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103c0:	1c5a      	adds	r2, r3, #1
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	681a      	ldr	r2, [r3, #0]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f022 0201 	bic.w	r2, r2, #1
 80103d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f7fe fece 	bl	800f178 <HAL_I2C_AbortCpltCallback>
 80103dc:	e015      	b.n	801040a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	695b      	ldr	r3, [r3, #20]
 80103e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e8:	2b40      	cmp	r3, #64	; 0x40
 80103ea:	d10b      	bne.n	8010404 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	691a      	ldr	r2, [r3, #16]
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f6:	b2d2      	uxtb	r2, r2
 80103f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7fe fead 	bl	800f164 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801040e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	f003 0301 	and.w	r3, r3, #1
 8010416:	2b00      	cmp	r3, #0
 8010418:	d10e      	bne.n	8010438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8010420:	2b00      	cmp	r3, #0
 8010422:	d109      	bne.n	8010438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 801042a:	2b00      	cmp	r3, #0
 801042c:	d104      	bne.n	8010438 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8010434:	2b00      	cmp	r3, #0
 8010436:	d007      	beq.n	8010448 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	685a      	ldr	r2, [r3, #4]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8010446:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801044e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010454:	f003 0304 	and.w	r3, r3, #4
 8010458:	2b04      	cmp	r3, #4
 801045a:	d113      	bne.n	8010484 <I2C_ITError+0x254>
 801045c:	7bfb      	ldrb	r3, [r7, #15]
 801045e:	2b28      	cmp	r3, #40	; 0x28
 8010460:	d110      	bne.n	8010484 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4a0a      	ldr	r2, [pc, #40]	; (8010490 <I2C_ITError+0x260>)
 8010466:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2200      	movs	r2, #0
 801046c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2220      	movs	r2, #32
 8010472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2200      	movs	r2, #0
 801047a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7fe fe52 	bl	800f128 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010484:	bf00      	nop
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}
 801048c:	08010c55 	.word	0x08010c55
 8010490:	ffff0000 	.word	0xffff0000

08010494 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af02      	add	r7, sp, #8
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	607a      	str	r2, [r7, #4]
 801049e:	603b      	str	r3, [r7, #0]
 80104a0:	460b      	mov	r3, r1
 80104a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	2b08      	cmp	r3, #8
 80104ae:	d006      	beq.n	80104be <I2C_MasterRequestWrite+0x2a>
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d003      	beq.n	80104be <I2C_MasterRequestWrite+0x2a>
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80104bc:	d108      	bne.n	80104d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104cc:	601a      	str	r2, [r3, #0]
 80104ce:	e00b      	b.n	80104e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80104d4:	2b12      	cmp	r3, #18
 80104d6:	d107      	bne.n	80104e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80104e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80104e8:	683b      	ldr	r3, [r7, #0]
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 fc55 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 80104fa:	4603      	mov	r3, r0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00d      	beq.n	801051c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801050a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801050e:	d103      	bne.n	8010518 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010516:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8010518:	2303      	movs	r3, #3
 801051a:	e035      	b.n	8010588 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	691b      	ldr	r3, [r3, #16]
 8010520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010524:	d108      	bne.n	8010538 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010526:	897b      	ldrh	r3, [r7, #10]
 8010528:	b2db      	uxtb	r3, r3
 801052a:	461a      	mov	r2, r3
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8010534:	611a      	str	r2, [r3, #16]
 8010536:	e01b      	b.n	8010570 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8010538:	897b      	ldrh	r3, [r7, #10]
 801053a:	11db      	asrs	r3, r3, #7
 801053c:	b2db      	uxtb	r3, r3
 801053e:	f003 0306 	and.w	r3, r3, #6
 8010542:	b2db      	uxtb	r3, r3
 8010544:	f063 030f 	orn	r3, r3, #15
 8010548:	b2da      	uxtb	r2, r3
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010550:	683b      	ldr	r3, [r7, #0]
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	490e      	ldr	r1, [pc, #56]	; (8010590 <I2C_MasterRequestWrite+0xfc>)
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f000 fc7b 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801055c:	4603      	mov	r3, r0
 801055e:	2b00      	cmp	r3, #0
 8010560:	d001      	beq.n	8010566 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8010562:	2301      	movs	r3, #1
 8010564:	e010      	b.n	8010588 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8010566:	897b      	ldrh	r3, [r7, #10]
 8010568:	b2da      	uxtb	r2, r3
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010570:	683b      	ldr	r3, [r7, #0]
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	4907      	ldr	r1, [pc, #28]	; (8010594 <I2C_MasterRequestWrite+0x100>)
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f000 fc6b 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 801057c:	4603      	mov	r3, r0
 801057e:	2b00      	cmp	r3, #0
 8010580:	d001      	beq.n	8010586 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3718      	adds	r7, #24
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	00010008 	.word	0x00010008
 8010594:	00010002 	.word	0x00010002

08010598 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b088      	sub	sp, #32
 801059c:	af02      	add	r7, sp, #8
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	607a      	str	r2, [r7, #4]
 80105a2:	603b      	str	r3, [r7, #0]
 80105a4:	460b      	mov	r3, r1
 80105a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80105bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	2b08      	cmp	r3, #8
 80105c2:	d006      	beq.n	80105d2 <I2C_MasterRequestRead+0x3a>
 80105c4:	697b      	ldr	r3, [r7, #20]
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d003      	beq.n	80105d2 <I2C_MasterRequestRead+0x3a>
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80105d0:	d108      	bne.n	80105e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80105e0:	601a      	str	r2, [r3, #0]
 80105e2:	e00b      	b.n	80105fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105e8:	2b11      	cmp	r3, #17
 80105ea:	d107      	bne.n	80105fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80105fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2200      	movs	r2, #0
 8010604:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8010608:	68f8      	ldr	r0, [r7, #12]
 801060a:	f000 fbcb 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00d      	beq.n	8010630 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801061e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010622:	d103      	bne.n	801062c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	f44f 7200 	mov.w	r2, #512	; 0x200
 801062a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801062c:	2303      	movs	r3, #3
 801062e:	e079      	b.n	8010724 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010638:	d108      	bne.n	801064c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801063a:	897b      	ldrh	r3, [r7, #10]
 801063c:	b2db      	uxtb	r3, r3
 801063e:	f043 0301 	orr.w	r3, r3, #1
 8010642:	b2da      	uxtb	r2, r3
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	611a      	str	r2, [r3, #16]
 801064a:	e05f      	b.n	801070c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801064c:	897b      	ldrh	r3, [r7, #10]
 801064e:	11db      	asrs	r3, r3, #7
 8010650:	b2db      	uxtb	r3, r3
 8010652:	f003 0306 	and.w	r3, r3, #6
 8010656:	b2db      	uxtb	r3, r3
 8010658:	f063 030f 	orn	r3, r3, #15
 801065c:	b2da      	uxtb	r2, r3
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	687a      	ldr	r2, [r7, #4]
 8010668:	4930      	ldr	r1, [pc, #192]	; (801072c <I2C_MasterRequestRead+0x194>)
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f000 fbf1 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8010676:	2301      	movs	r3, #1
 8010678:	e054      	b.n	8010724 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801067a:	897b      	ldrh	r3, [r7, #10]
 801067c:	b2da      	uxtb	r2, r3
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	4929      	ldr	r1, [pc, #164]	; (8010730 <I2C_MasterRequestRead+0x198>)
 801068a:	68f8      	ldr	r0, [r7, #12]
 801068c:	f000 fbe1 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010690:	4603      	mov	r3, r0
 8010692:	2b00      	cmp	r3, #0
 8010694:	d001      	beq.n	801069a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8010696:	2301      	movs	r3, #1
 8010698:	e044      	b.n	8010724 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801069a:	2300      	movs	r3, #0
 801069c:	613b      	str	r3, [r7, #16]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	695b      	ldr	r3, [r3, #20]
 80106a4:	613b      	str	r3, [r7, #16]
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	699b      	ldr	r3, [r3, #24]
 80106ac:	613b      	str	r3, [r7, #16]
 80106ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	9300      	str	r3, [sp, #0]
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f000 fb69 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d00d      	beq.n	80106f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106e6:	d103      	bne.n	80106f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80106ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80106f0:	2303      	movs	r3, #3
 80106f2:	e017      	b.n	8010724 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80106f4:	897b      	ldrh	r3, [r7, #10]
 80106f6:	11db      	asrs	r3, r3, #7
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	f003 0306 	and.w	r3, r3, #6
 80106fe:	b2db      	uxtb	r3, r3
 8010700:	f063 030e 	orn	r3, r3, #14
 8010704:	b2da      	uxtb	r2, r3
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	4907      	ldr	r1, [pc, #28]	; (8010730 <I2C_MasterRequestRead+0x198>)
 8010712:	68f8      	ldr	r0, [r7, #12]
 8010714:	f000 fb9d 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010718:	4603      	mov	r3, r0
 801071a:	2b00      	cmp	r3, #0
 801071c:	d001      	beq.n	8010722 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 801071e:	2301      	movs	r3, #1
 8010720:	e000      	b.n	8010724 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8010722:	2300      	movs	r3, #0
}
 8010724:	4618      	mov	r0, r3
 8010726:	3718      	adds	r7, #24
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	00010008 	.word	0x00010008
 8010730:	00010002 	.word	0x00010002

08010734 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b088      	sub	sp, #32
 8010738:	af02      	add	r7, sp, #8
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	4608      	mov	r0, r1
 801073e:	4611      	mov	r1, r2
 8010740:	461a      	mov	r2, r3
 8010742:	4603      	mov	r3, r0
 8010744:	817b      	strh	r3, [r7, #10]
 8010746:	460b      	mov	r3, r1
 8010748:	813b      	strh	r3, [r7, #8]
 801074a:	4613      	mov	r3, r2
 801074c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801075c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	6a3b      	ldr	r3, [r7, #32]
 8010764:	2200      	movs	r2, #0
 8010766:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801076a:	68f8      	ldr	r0, [r7, #12]
 801076c:	f000 fb1a 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00d      	beq.n	8010792 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010784:	d103      	bne.n	801078e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f44f 7200 	mov.w	r2, #512	; 0x200
 801078c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 801078e:	2303      	movs	r3, #3
 8010790:	e05f      	b.n	8010852 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8010792:	897b      	ldrh	r3, [r7, #10]
 8010794:	b2db      	uxtb	r3, r3
 8010796:	461a      	mov	r2, r3
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80107a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	6a3a      	ldr	r2, [r7, #32]
 80107a6:	492d      	ldr	r1, [pc, #180]	; (801085c <I2C_RequestMemoryWrite+0x128>)
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fb52 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80107ae:	4603      	mov	r3, r0
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d001      	beq.n	80107b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80107b4:	2301      	movs	r3, #1
 80107b6:	e04c      	b.n	8010852 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80107b8:	2300      	movs	r3, #0
 80107ba:	617b      	str	r3, [r7, #20]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	695b      	ldr	r3, [r3, #20]
 80107c2:	617b      	str	r3, [r7, #20]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	699b      	ldr	r3, [r3, #24]
 80107ca:	617b      	str	r3, [r7, #20]
 80107cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80107ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107d0:	6a39      	ldr	r1, [r7, #32]
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f000 fbbc 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00d      	beq.n	80107fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107e2:	2b04      	cmp	r3, #4
 80107e4:	d107      	bne.n	80107f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80107f6:	2301      	movs	r3, #1
 80107f8:	e02b      	b.n	8010852 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80107fa:	88fb      	ldrh	r3, [r7, #6]
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d105      	bne.n	801080c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010800:	893b      	ldrh	r3, [r7, #8]
 8010802:	b2da      	uxtb	r2, r3
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	611a      	str	r2, [r3, #16]
 801080a:	e021      	b.n	8010850 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 801080c:	893b      	ldrh	r3, [r7, #8]
 801080e:	0a1b      	lsrs	r3, r3, #8
 8010810:	b29b      	uxth	r3, r3
 8010812:	b2da      	uxtb	r2, r3
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801081a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801081c:	6a39      	ldr	r1, [r7, #32]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f000 fb96 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d00d      	beq.n	8010846 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082e:	2b04      	cmp	r3, #4
 8010830:	d107      	bne.n	8010842 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	681a      	ldr	r2, [r3, #0]
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8010842:	2301      	movs	r3, #1
 8010844:	e005      	b.n	8010852 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010846:	893b      	ldrh	r3, [r7, #8]
 8010848:	b2da      	uxtb	r2, r3
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3718      	adds	r7, #24
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	00010002 	.word	0x00010002

08010860 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b088      	sub	sp, #32
 8010864:	af02      	add	r7, sp, #8
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	4608      	mov	r0, r1
 801086a:	4611      	mov	r1, r2
 801086c:	461a      	mov	r2, r3
 801086e:	4603      	mov	r3, r0
 8010870:	817b      	strh	r3, [r7, #10]
 8010872:	460b      	mov	r3, r1
 8010874:	813b      	strh	r3, [r7, #8]
 8010876:	4613      	mov	r3, r2
 8010878:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010888:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010898:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	6a3b      	ldr	r3, [r7, #32]
 80108a0:	2200      	movs	r2, #0
 80108a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80108a6:	68f8      	ldr	r0, [r7, #12]
 80108a8:	f000 fa7c 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00d      	beq.n	80108ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108c0:	d103      	bne.n	80108ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80108ca:	2303      	movs	r3, #3
 80108cc:	e0aa      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80108ce:	897b      	ldrh	r3, [r7, #10]
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	461a      	mov	r2, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80108dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80108de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e0:	6a3a      	ldr	r2, [r7, #32]
 80108e2:	4952      	ldr	r1, [pc, #328]	; (8010a2c <I2C_RequestMemoryRead+0x1cc>)
 80108e4:	68f8      	ldr	r0, [r7, #12]
 80108e6:	f000 fab4 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80108ea:	4603      	mov	r3, r0
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80108f0:	2301      	movs	r3, #1
 80108f2:	e097      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80108f4:	2300      	movs	r3, #0
 80108f6:	617b      	str	r3, [r7, #20]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	695b      	ldr	r3, [r3, #20]
 80108fe:	617b      	str	r3, [r7, #20]
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	699b      	ldr	r3, [r3, #24]
 8010906:	617b      	str	r3, [r7, #20]
 8010908:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801090a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090c:	6a39      	ldr	r1, [r7, #32]
 801090e:	68f8      	ldr	r0, [r7, #12]
 8010910:	f000 fb1e 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d00d      	beq.n	8010936 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801091e:	2b04      	cmp	r3, #4
 8010920:	d107      	bne.n	8010932 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010930:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e076      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8010936:	88fb      	ldrh	r3, [r7, #6]
 8010938:	2b01      	cmp	r3, #1
 801093a:	d105      	bne.n	8010948 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 801093c:	893b      	ldrh	r3, [r7, #8]
 801093e:	b2da      	uxtb	r2, r3
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	611a      	str	r2, [r3, #16]
 8010946:	e021      	b.n	801098c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8010948:	893b      	ldrh	r3, [r7, #8]
 801094a:	0a1b      	lsrs	r3, r3, #8
 801094c:	b29b      	uxth	r3, r3
 801094e:	b2da      	uxtb	r2, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8010956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010958:	6a39      	ldr	r1, [r7, #32]
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	f000 faf8 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d00d      	beq.n	8010982 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096a:	2b04      	cmp	r3, #4
 801096c:	d107      	bne.n	801097e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	681a      	ldr	r2, [r3, #0]
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801097c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 801097e:	2301      	movs	r3, #1
 8010980:	e050      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8010982:	893b      	ldrh	r3, [r7, #8]
 8010984:	b2da      	uxtb	r2, r3
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801098c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801098e:	6a39      	ldr	r1, [r7, #32]
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 fadd 	bl	8010f50 <I2C_WaitOnTXEFlagUntilTimeout>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d00d      	beq.n	80109b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a0:	2b04      	cmp	r3, #4
 80109a2:	d107      	bne.n	80109b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80109b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80109b4:	2301      	movs	r3, #1
 80109b6:	e035      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	681a      	ldr	r2, [r3, #0]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80109c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	9300      	str	r3, [sp, #0]
 80109cc:	6a3b      	ldr	r3, [r7, #32]
 80109ce:	2200      	movs	r2, #0
 80109d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80109d4:	68f8      	ldr	r0, [r7, #12]
 80109d6:	f000 f9e5 	bl	8010da4 <I2C_WaitOnFlagUntilTimeout>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d00d      	beq.n	80109fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ee:	d103      	bne.n	80109f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80109f8:	2303      	movs	r3, #3
 80109fa:	e013      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80109fc:	897b      	ldrh	r3, [r7, #10]
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	f043 0301 	orr.w	r3, r3, #1
 8010a04:	b2da      	uxtb	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8010a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0e:	6a3a      	ldr	r2, [r7, #32]
 8010a10:	4906      	ldr	r1, [pc, #24]	; (8010a2c <I2C_RequestMemoryRead+0x1cc>)
 8010a12:	68f8      	ldr	r0, [r7, #12]
 8010a14:	f000 fa1d 	bl	8010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d001      	beq.n	8010a22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e000      	b.n	8010a24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3718      	adds	r7, #24
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	00010002 	.word	0x00010002

08010a30 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a3c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010a3e:	697b      	ldr	r3, [r7, #20]
 8010a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a44:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8010a46:	697b      	ldr	r3, [r7, #20]
 8010a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a4c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a52:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010a54:	697b      	ldr	r3, [r7, #20]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	685a      	ldr	r2, [r3, #4]
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010a62:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010a70:	2200      	movs	r2, #0
 8010a72:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d003      	beq.n	8010a84 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a80:	2200      	movs	r2, #0
 8010a82:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8010a84:	7cfb      	ldrb	r3, [r7, #19]
 8010a86:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8010a8a:	2b21      	cmp	r3, #33	; 0x21
 8010a8c:	d007      	beq.n	8010a9e <I2C_DMAXferCplt+0x6e>
 8010a8e:	7cfb      	ldrb	r3, [r7, #19]
 8010a90:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8010a94:	2b22      	cmp	r3, #34	; 0x22
 8010a96:	d131      	bne.n	8010afc <I2C_DMAXferCplt+0xcc>
 8010a98:	7cbb      	ldrb	r3, [r7, #18]
 8010a9a:	2b20      	cmp	r3, #32
 8010a9c:	d12e      	bne.n	8010afc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	685a      	ldr	r2, [r3, #4]
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010aac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8010ab4:	7cfb      	ldrb	r3, [r7, #19]
 8010ab6:	2b29      	cmp	r3, #41	; 0x29
 8010ab8:	d10a      	bne.n	8010ad0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	2221      	movs	r2, #33	; 0x21
 8010abe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	2228      	movs	r2, #40	; 0x28
 8010ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8010ac8:	6978      	ldr	r0, [r7, #20]
 8010aca:	f7fe fb0b 	bl	800f0e4 <HAL_I2C_SlaveTxCpltCallback>
 8010ace:	e00c      	b.n	8010aea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8010ad0:	7cfb      	ldrb	r3, [r7, #19]
 8010ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8010ad4:	d109      	bne.n	8010aea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	2222      	movs	r2, #34	; 0x22
 8010ada:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	2228      	movs	r2, #40	; 0x28
 8010ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8010ae4:	6978      	ldr	r0, [r7, #20]
 8010ae6:	f7fe fb07 	bl	800f0f8 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	685a      	ldr	r2, [r3, #4]
 8010af0:	697b      	ldr	r3, [r7, #20]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8010af8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8010afa:	e06a      	b.n	8010bd2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8010afc:	697b      	ldr	r3, [r7, #20]
 8010afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d064      	beq.n	8010bd2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8010b08:	697b      	ldr	r3, [r7, #20]
 8010b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d107      	bne.n	8010b22 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b20:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	685a      	ldr	r2, [r3, #4]
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8010b30:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8010b38:	d009      	beq.n	8010b4e <I2C_DMAXferCplt+0x11e>
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b08      	cmp	r3, #8
 8010b3e:	d006      	beq.n	8010b4e <I2C_DMAXferCplt+0x11e>
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8010b46:	d002      	beq.n	8010b4e <I2C_DMAXferCplt+0x11e>
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2b20      	cmp	r3, #32
 8010b4c:	d107      	bne.n	8010b5e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010b5c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8010b5e:	697b      	ldr	r3, [r7, #20]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	685a      	ldr	r2, [r3, #4]
 8010b64:	697b      	ldr	r3, [r7, #20]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010b6c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685a      	ldr	r2, [r3, #4]
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010b7c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	2200      	movs	r2, #0
 8010b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8010b8c:	6978      	ldr	r0, [r7, #20]
 8010b8e:	f7fe fae9 	bl	800f164 <HAL_I2C_ErrorCallback>
}
 8010b92:	e01e      	b.n	8010bd2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	2220      	movs	r2, #32
 8010b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	2b40      	cmp	r3, #64	; 0x40
 8010ba6:	d10a      	bne.n	8010bbe <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010ba8:	697b      	ldr	r3, [r7, #20]
 8010baa:	2200      	movs	r2, #0
 8010bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8010bb6:	6978      	ldr	r0, [r7, #20]
 8010bb8:	f7fe faca 	bl	800f150 <HAL_I2C_MemRxCpltCallback>
}
 8010bbc:	e009      	b.n	8010bd2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8010bbe:	697b      	ldr	r3, [r7, #20]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2212      	movs	r2, #18
 8010bca:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8010bcc:	6978      	ldr	r0, [r7, #20]
 8010bce:	f7fe fa7f 	bl	800f0d0 <HAL_I2C_MasterRxCpltCallback>
}
 8010bd2:	bf00      	nop
 8010bd4:	3718      	adds	r7, #24
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010be6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d003      	beq.n	8010bf8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d003      	beq.n	8010c08 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c04:	2200      	movs	r2, #0
 8010c06:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f7f7 fb94 	bl	8008336 <HAL_DMA_GetError>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	2b02      	cmp	r3, #2
 8010c12:	d01b      	beq.n	8010c4c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	681a      	ldr	r2, [r3, #0]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c22:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	2200      	movs	r2, #0
 8010c28:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2220      	movs	r2, #32
 8010c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	2200      	movs	r2, #0
 8010c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c3e:	f043 0210 	orr.w	r2, r3, #16
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8010c46:	68f8      	ldr	r0, [r7, #12]
 8010c48:	f7fe fa8c 	bl	800f164 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010c4c:	bf00      	nop
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b086      	sub	sp, #24
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c64:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c6c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8010c6e:	4b4b      	ldr	r3, [pc, #300]	; (8010d9c <I2C_DMAAbort+0x148>)
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	08db      	lsrs	r3, r3, #3
 8010c74:	4a4a      	ldr	r2, [pc, #296]	; (8010da0 <I2C_DMAAbort+0x14c>)
 8010c76:	fba2 2303 	umull	r2, r3, r2, r3
 8010c7a:	0a1a      	lsrs	r2, r3, #8
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	009b      	lsls	r3, r3, #2
 8010c80:	4413      	add	r3, r2
 8010c82:	00da      	lsls	r2, r3, #3
 8010c84:	1ad3      	subs	r3, r2, r3
 8010c86:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d106      	bne.n	8010c9c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c92:	f043 0220 	orr.w	r2, r3, #32
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8010c9a:	e00a      	b.n	8010cb2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8010ca2:	697b      	ldr	r3, [r7, #20]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010cb0:	d0ea      	beq.n	8010c88 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d003      	beq.n	8010cc2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d003      	beq.n	8010cd2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cce:	2200      	movs	r2, #0
 8010cd0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ce0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8010ce2:	697b      	ldr	r3, [r7, #20]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d003      	beq.n	8010cf8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d003      	beq.n	8010d08 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8010d00:	697b      	ldr	r3, [r7, #20]
 8010d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d04:	2200      	movs	r2, #0
 8010d06:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	681a      	ldr	r2, [r3, #0]
 8010d0e:	697b      	ldr	r3, [r7, #20]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f022 0201 	bic.w	r2, r2, #1
 8010d16:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8010d18:	697b      	ldr	r3, [r7, #20]
 8010d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b60      	cmp	r3, #96	; 0x60
 8010d22:	d10e      	bne.n	8010d42 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	2220      	movs	r2, #32
 8010d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	2200      	movs	r2, #0
 8010d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8010d3a:	6978      	ldr	r0, [r7, #20]
 8010d3c:	f7fe fa1c 	bl	800f178 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8010d40:	e027      	b.n	8010d92 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8010d42:	7cfb      	ldrb	r3, [r7, #19]
 8010d44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010d48:	2b28      	cmp	r3, #40	; 0x28
 8010d4a:	d117      	bne.n	8010d7c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f042 0201 	orr.w	r2, r2, #1
 8010d5a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	697b      	ldr	r3, [r7, #20]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010d6a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	2200      	movs	r2, #0
 8010d70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8010d72:	697b      	ldr	r3, [r7, #20]
 8010d74:	2228      	movs	r2, #40	; 0x28
 8010d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010d7a:	e007      	b.n	8010d8c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2220      	movs	r2, #32
 8010d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2200      	movs	r2, #0
 8010d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8010d8c:	6978      	ldr	r0, [r7, #20]
 8010d8e:	f7fe f9e9 	bl	800f164 <HAL_I2C_ErrorCallback>
}
 8010d92:	bf00      	nop
 8010d94:	3718      	adds	r7, #24
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
 8010d9a:	bf00      	nop
 8010d9c:	20000058 	.word	0x20000058
 8010da0:	14f8b589 	.word	0x14f8b589

08010da4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	603b      	str	r3, [r7, #0]
 8010db0:	4613      	mov	r3, r2
 8010db2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010db4:	e025      	b.n	8010e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dbc:	d021      	beq.n	8010e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010dbe:	f7f5 fc35 	bl	800662c <HAL_GetTick>
 8010dc2:	4602      	mov	r2, r0
 8010dc4:	69bb      	ldr	r3, [r7, #24]
 8010dc6:	1ad3      	subs	r3, r2, r3
 8010dc8:	683a      	ldr	r2, [r7, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d302      	bcc.n	8010dd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d116      	bne.n	8010e02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2200      	movs	r2, #0
 8010dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	2220      	movs	r2, #32
 8010dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	2200      	movs	r2, #0
 8010de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dee:	f043 0220 	orr.w	r2, r3, #32
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e023      	b.n	8010e4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	0c1b      	lsrs	r3, r3, #16
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	2b01      	cmp	r3, #1
 8010e0a:	d10d      	bne.n	8010e28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	695b      	ldr	r3, [r3, #20]
 8010e12:	43da      	mvns	r2, r3
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	4013      	ands	r3, r2
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bf0c      	ite	eq
 8010e1e:	2301      	moveq	r3, #1
 8010e20:	2300      	movne	r3, #0
 8010e22:	b2db      	uxtb	r3, r3
 8010e24:	461a      	mov	r2, r3
 8010e26:	e00c      	b.n	8010e42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	699b      	ldr	r3, [r3, #24]
 8010e2e:	43da      	mvns	r2, r3
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	4013      	ands	r3, r2
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	bf0c      	ite	eq
 8010e3a:	2301      	moveq	r3, #1
 8010e3c:	2300      	movne	r3, #0
 8010e3e:	b2db      	uxtb	r3, r3
 8010e40:	461a      	mov	r2, r3
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	d0b6      	beq.n	8010db6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8010e48:	2300      	movs	r3, #0
}
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	3710      	adds	r7, #16
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	bd80      	pop	{r7, pc}

08010e52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8010e52:	b580      	push	{r7, lr}
 8010e54:	b084      	sub	sp, #16
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	60f8      	str	r0, [r7, #12]
 8010e5a:	60b9      	str	r1, [r7, #8]
 8010e5c:	607a      	str	r2, [r7, #4]
 8010e5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010e60:	e051      	b.n	8010f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	695b      	ldr	r3, [r3, #20]
 8010e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e70:	d123      	bne.n	8010eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010e80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8010e8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	2220      	movs	r2, #32
 8010e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2200      	movs	r2, #0
 8010e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ea6:	f043 0204 	orr.w	r2, r3, #4
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e046      	b.n	8010f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ec0:	d021      	beq.n	8010f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ec2:	f7f5 fbb3 	bl	800662c <HAL_GetTick>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	1ad3      	subs	r3, r2, r3
 8010ecc:	687a      	ldr	r2, [r7, #4]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d302      	bcc.n	8010ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d116      	bne.n	8010f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2200      	movs	r2, #0
 8010edc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2220      	movs	r2, #32
 8010ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ef2:	f043 0220 	orr.w	r2, r3, #32
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2200      	movs	r2, #0
 8010efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	e020      	b.n	8010f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	0c1b      	lsrs	r3, r3, #16
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d10c      	bne.n	8010f2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	695b      	ldr	r3, [r3, #20]
 8010f16:	43da      	mvns	r2, r3
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	4013      	ands	r3, r2
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	bf14      	ite	ne
 8010f22:	2301      	movne	r3, #1
 8010f24:	2300      	moveq	r3, #0
 8010f26:	b2db      	uxtb	r3, r3
 8010f28:	e00b      	b.n	8010f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	699b      	ldr	r3, [r3, #24]
 8010f30:	43da      	mvns	r2, r3
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	4013      	ands	r3, r2
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	bf14      	ite	ne
 8010f3c:	2301      	movne	r3, #1
 8010f3e:	2300      	moveq	r3, #0
 8010f40:	b2db      	uxtb	r3, r3
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d18d      	bne.n	8010e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8010f46:	2300      	movs	r3, #0
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3710      	adds	r7, #16
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}

08010f50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b084      	sub	sp, #16
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010f5c:	e02d      	b.n	8010fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010f5e:	68f8      	ldr	r0, [r7, #12]
 8010f60:	f000 f93e 	bl	80111e0 <I2C_IsAcknowledgeFailed>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d001      	beq.n	8010f6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	e02d      	b.n	8010fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f74:	d021      	beq.n	8010fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f76:	f7f5 fb59 	bl	800662c <HAL_GetTick>
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	1ad3      	subs	r3, r2, r3
 8010f80:	68ba      	ldr	r2, [r7, #8]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d302      	bcc.n	8010f8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d116      	bne.n	8010fba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2220      	movs	r2, #32
 8010f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa6:	f043 0220 	orr.w	r2, r3, #32
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	e007      	b.n	8010fca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fc4:	2b80      	cmp	r3, #128	; 0x80
 8010fc6:	d1ca      	bne.n	8010f5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b084      	sub	sp, #16
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	60f8      	str	r0, [r7, #12]
 8010fda:	60b9      	str	r1, [r7, #8]
 8010fdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8010fde:	e02d      	b.n	801103c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f000 f8fd 	bl	80111e0 <I2C_IsAcknowledgeFailed>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d001      	beq.n	8010ff0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8010fec:	2301      	movs	r3, #1
 8010fee:	e02d      	b.n	801104c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ff6:	d021      	beq.n	801103c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ff8:	f7f5 fb18 	bl	800662c <HAL_GetTick>
 8010ffc:	4602      	mov	r2, r0
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	1ad3      	subs	r3, r2, r3
 8011002:	68ba      	ldr	r2, [r7, #8]
 8011004:	429a      	cmp	r2, r3
 8011006:	d302      	bcc.n	801100e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d116      	bne.n	801103c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	2200      	movs	r2, #0
 8011012:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2220      	movs	r2, #32
 8011018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2200      	movs	r2, #0
 8011020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011028:	f043 0220 	orr.w	r2, r3, #32
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2200      	movs	r2, #0
 8011034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8011038:	2301      	movs	r3, #1
 801103a:	e007      	b.n	801104c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	695b      	ldr	r3, [r3, #20]
 8011042:	f003 0304 	and.w	r3, r3, #4
 8011046:	2b04      	cmp	r3, #4
 8011048:	d1ca      	bne.n	8010fe0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	60f8      	str	r0, [r7, #12]
 801105c:	60b9      	str	r1, [r7, #8]
 801105e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011060:	e029      	b.n	80110b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8011062:	68f8      	ldr	r0, [r7, #12]
 8011064:	f000 f8bc 	bl	80111e0 <I2C_IsAcknowledgeFailed>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d001      	beq.n	8011072 <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	e029      	b.n	80110c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011072:	f7f5 fadb 	bl	800662c <HAL_GetTick>
 8011076:	4602      	mov	r2, r0
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	68ba      	ldr	r2, [r7, #8]
 801107e:	429a      	cmp	r2, r3
 8011080:	d302      	bcc.n	8011088 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d116      	bne.n	80110b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	2200      	movs	r2, #0
 801108c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2220      	movs	r2, #32
 8011092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	2200      	movs	r2, #0
 801109a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110a2:	f043 0220 	orr.w	r2, r3, #32
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2200      	movs	r2, #0
 80110ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80110b2:	2301      	movs	r3, #1
 80110b4:	e007      	b.n	80110c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	695b      	ldr	r3, [r3, #20]
 80110bc:	f003 0310 	and.w	r3, r3, #16
 80110c0:	2b10      	cmp	r3, #16
 80110c2:	d1ce      	bne.n	8011062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80110c4:	2300      	movs	r3, #0
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80110ce:	b480      	push	{r7}
 80110d0:	b085      	sub	sp, #20
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80110d6:	2300      	movs	r3, #0
 80110d8:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80110da:	4b14      	ldr	r3, [pc, #80]	; (801112c <I2C_WaitOnSTOPRequestThroughIT+0x5e>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	08db      	lsrs	r3, r3, #3
 80110e0:	4a13      	ldr	r2, [pc, #76]	; (8011130 <I2C_WaitOnSTOPRequestThroughIT+0x62>)
 80110e2:	fba2 2303 	umull	r2, r3, r2, r3
 80110e6:	0a1a      	lsrs	r2, r3, #8
 80110e8:	4613      	mov	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3b01      	subs	r3, #1
 80110f4:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d107      	bne.n	801110c <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011100:	f043 0220 	orr.w	r2, r3, #32
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8011108:	2301      	movs	r3, #1
 801110a:	e008      	b.n	801111e <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801111a:	d0e9      	beq.n	80110f0 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 801111c:	2300      	movs	r3, #0
}
 801111e:	4618      	mov	r0, r3
 8011120:	3714      	adds	r7, #20
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	20000058 	.word	0x20000058
 8011130:	14f8b589 	.word	0x14f8b589

08011134 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b084      	sub	sp, #16
 8011138:	af00      	add	r7, sp, #0
 801113a:	60f8      	str	r0, [r7, #12]
 801113c:	60b9      	str	r1, [r7, #8]
 801113e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8011140:	e042      	b.n	80111c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	695b      	ldr	r3, [r3, #20]
 8011148:	f003 0310 	and.w	r3, r3, #16
 801114c:	2b10      	cmp	r3, #16
 801114e:	d119      	bne.n	8011184 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f06f 0210 	mvn.w	r2, #16
 8011158:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	2200      	movs	r2, #0
 801115e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2220      	movs	r2, #32
 8011164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2200      	movs	r2, #0
 801116c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2200      	movs	r2, #0
 801117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8011180:	2301      	movs	r3, #1
 8011182:	e029      	b.n	80111d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011184:	f7f5 fa52 	bl	800662c <HAL_GetTick>
 8011188:	4602      	mov	r2, r0
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	1ad3      	subs	r3, r2, r3
 801118e:	68ba      	ldr	r2, [r7, #8]
 8011190:	429a      	cmp	r2, r3
 8011192:	d302      	bcc.n	801119a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d116      	bne.n	80111c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2200      	movs	r2, #0
 801119e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	2220      	movs	r2, #32
 80111a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111b4:	f043 0220 	orr.w	r2, r3, #32
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2200      	movs	r2, #0
 80111c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80111c4:	2301      	movs	r3, #1
 80111c6:	e007      	b.n	80111d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	695b      	ldr	r3, [r3, #20]
 80111ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111d2:	2b40      	cmp	r3, #64	; 0x40
 80111d4:	d1b5      	bne.n	8011142 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	3710      	adds	r7, #16
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}

080111e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b083      	sub	sp, #12
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	695b      	ldr	r3, [r3, #20]
 80111ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80111f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80111f6:	d11b      	bne.n	8011230 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8011200:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	2220      	movs	r2, #32
 801120c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801121c:	f043 0204 	orr.w	r2, r3, #4
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2200      	movs	r2, #0
 8011228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 801122c:	2301      	movs	r3, #1
 801122e:	e000      	b.n	8011232 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8011230:	2300      	movs	r3, #0
}
 8011232:	4618      	mov	r0, r3
 8011234:	370c      	adds	r7, #12
 8011236:	46bd      	mov	sp, r7
 8011238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123c:	4770      	bx	lr

0801123e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 801123e:	b480      	push	{r7}
 8011240:	b083      	sub	sp, #12
 8011242:	af00      	add	r7, sp, #0
 8011244:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801124a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 801124e:	d103      	bne.n	8011258 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	2201      	movs	r2, #1
 8011254:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8011256:	e007      	b.n	8011268 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801125c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8011260:	d102      	bne.n	8011268 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	2208      	movs	r2, #8
 8011266:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8011268:	bf00      	nop
 801126a:	370c      	adds	r7, #12
 801126c:	46bd      	mov	sp, r7
 801126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011272:	4770      	bx	lr

08011274 <HAL_PWR_DeInit>:
/**
  * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
  * @retval None
  */
void HAL_PWR_DeInit(void)
{
 8011274:	b480      	push	{r7}
 8011276:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_FORCE_RESET();
 8011278:	4b08      	ldr	r3, [pc, #32]	; (801129c <HAL_PWR_DeInit+0x28>)
 801127a:	6a1b      	ldr	r3, [r3, #32]
 801127c:	4a07      	ldr	r2, [pc, #28]	; (801129c <HAL_PWR_DeInit+0x28>)
 801127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011282:	6213      	str	r3, [r2, #32]
  __HAL_RCC_PWR_RELEASE_RESET();
 8011284:	4b05      	ldr	r3, [pc, #20]	; (801129c <HAL_PWR_DeInit+0x28>)
 8011286:	6a1b      	ldr	r3, [r3, #32]
 8011288:	4a04      	ldr	r2, [pc, #16]	; (801129c <HAL_PWR_DeInit+0x28>)
 801128a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801128e:	6213      	str	r3, [r2, #32]
}
 8011290:	bf00      	nop
 8011292:	46bd      	mov	sp, r7
 8011294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	40023800 	.word	0x40023800

080112a0 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80112a0:	b480      	push	{r7}
 80112a2:	b083      	sub	sp, #12
 80112a4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80112a6:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <HAL_PWR_EnableBkUpAccess+0x20>)
 80112a8:	2201      	movs	r2, #1
 80112aa:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80112ac:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <HAL_PWR_EnableBkUpAccess+0x24>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80112b2:	687b      	ldr	r3, [r7, #4]
}
 80112b4:	bf00      	nop
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	420e0020 	.word	0x420e0020
 80112c4:	40007000 	.word	0x40007000

080112c8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80112ce:	4b06      	ldr	r3, [pc, #24]	; (80112e8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80112d4:	4b05      	ldr	r3, [pc, #20]	; (80112ec <HAL_PWR_DisableBkUpAccess+0x24>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80112da:	687b      	ldr	r3, [r7, #4]
}
 80112dc:	bf00      	nop
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr
 80112e8:	420e0020 	.word	0x420e0020
 80112ec:	40007000 	.word	0x40007000

080112f0 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each 
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
  
  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 80112f8:	4b2b      	ldr	r3, [pc, #172]	; (80113a8 <HAL_PWR_ConfigPVD+0xb8>)
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	4928      	ldr	r1, [pc, #160]	; (80113a8 <HAL_PWR_ConfigPVD+0xb8>)
 8011306:	4313      	orrs	r3, r2
 8011308:	600b      	str	r3, [r1, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 801130a:	4b28      	ldr	r3, [pc, #160]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	4a27      	ldr	r2, [pc, #156]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011314:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8011316:	4b25      	ldr	r3, [pc, #148]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	4a24      	ldr	r2, [pc, #144]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 801131c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011320:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8011322:	4b22      	ldr	r3, [pc, #136]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011324:	689b      	ldr	r3, [r3, #8]
 8011326:	4a21      	ldr	r2, [pc, #132]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801132c:	6093      	str	r3, [r2, #8]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 801132e:	4b1f      	ldr	r3, [pc, #124]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	4a1e      	ldr	r2, [pc, #120]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011338:	60d3      	str	r3, [r2, #12]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011342:	2b00      	cmp	r3, #0
 8011344:	d005      	beq.n	8011352 <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8011346:	4b19      	ldr	r3, [pc, #100]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	4a18      	ldr	r2, [pc, #96]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 801134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011350:	6013      	str	r3, [r2, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801135a:	2b00      	cmp	r3, #0
 801135c:	d005      	beq.n	801136a <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 801135e:	4b13      	ldr	r3, [pc, #76]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4a12      	ldr	r2, [pc, #72]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011368:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	f003 0301 	and.w	r3, r3, #1
 8011372:	2b00      	cmp	r3, #0
 8011374:	d005      	beq.n	8011382 <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8011376:	4b0d      	ldr	r3, [pc, #52]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	4a0c      	ldr	r2, [pc, #48]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 801137c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011380:	6093      	str	r3, [r2, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	685b      	ldr	r3, [r3, #4]
 8011386:	f003 0302 	and.w	r3, r3, #2
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 801138e:	4b07      	ldr	r3, [pc, #28]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	4a06      	ldr	r2, [pc, #24]	; (80113ac <HAL_PWR_ConfigPVD+0xbc>)
 8011394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011398:	60d3      	str	r3, [r2, #12]
  }
}
 801139a:	bf00      	nop
 801139c:	370c      	adds	r7, #12
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
 80113a6:	bf00      	nop
 80113a8:	40007000 	.word	0x40007000
 80113ac:	40013c00 	.word	0x40013c00

080113b0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80113b0:	b480      	push	{r7}
 80113b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 80113b4:	4b03      	ldr	r3, [pc, #12]	; (80113c4 <HAL_PWR_EnablePVD+0x14>)
 80113b6:	2201      	movs	r2, #1
 80113b8:	601a      	str	r2, [r3, #0]
}
 80113ba:	bf00      	nop
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr
 80113c4:	420e0010 	.word	0x420e0010

080113c8 <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 80113c8:	b480      	push	{r7}
 80113ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 80113cc:	4b03      	ldr	r3, [pc, #12]	; (80113dc <HAL_PWR_DisablePVD+0x14>)
 80113ce:	2200      	movs	r2, #0
 80113d0:	601a      	str	r2, [r3, #0]
}
 80113d2:	bf00      	nop
 80113d4:	46bd      	mov	sp, r7
 80113d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113da:	4770      	bx	lr
 80113dc:	420e0010 	.word	0x420e0010

080113e0 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80113e8:	4b05      	ldr	r3, [pc, #20]	; (8011400 <HAL_PWR_EnableWakeUpPin+0x20>)
 80113ea:	685a      	ldr	r2, [r3, #4]
 80113ec:	4904      	ldr	r1, [pc, #16]	; (8011400 <HAL_PWR_EnableWakeUpPin+0x20>)
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	604b      	str	r3, [r1, #4]
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr
 8011400:	40007000 	.word	0x40007000

08011404 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 801140c:	4b06      	ldr	r3, [pc, #24]	; (8011428 <HAL_PWR_DisableWakeUpPin+0x24>)
 801140e:	685a      	ldr	r2, [r3, #4]
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	43db      	mvns	r3, r3
 8011414:	4904      	ldr	r1, [pc, #16]	; (8011428 <HAL_PWR_DisableWakeUpPin+0x24>)
 8011416:	4013      	ands	r3, r2
 8011418:	604b      	str	r3, [r1, #4]
}
 801141a:	bf00      	nop
 801141c:	370c      	adds	r7, #12
 801141e:	46bd      	mov	sp, r7
 8011420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011424:	4770      	bx	lr
 8011426:	bf00      	nop
 8011428:	40007000 	.word	0x40007000

0801142c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	460b      	mov	r3, r1
 8011436:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011438:	4b09      	ldr	r3, [pc, #36]	; (8011460 <HAL_PWR_EnterSLEEPMode+0x34>)
 801143a:	691b      	ldr	r3, [r3, #16]
 801143c:	4a08      	ldr	r2, [pc, #32]	; (8011460 <HAL_PWR_EnterSLEEPMode+0x34>)
 801143e:	f023 0304 	bic.w	r3, r3, #4
 8011442:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8011444:	78fb      	ldrb	r3, [r7, #3]
 8011446:	2b01      	cmp	r3, #1
 8011448:	d101      	bne.n	801144e <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 801144a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 801144c:	e002      	b.n	8011454 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 801144e:	bf40      	sev
    __WFE();
 8011450:	bf20      	wfe
    __WFE();
 8011452:	bf20      	wfe
}
 8011454:	bf00      	nop
 8011456:	370c      	adds	r7, #12
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr
 8011460:	e000ed00 	.word	0xe000ed00

08011464 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8011464:	b480      	push	{r7}
 8011466:	b083      	sub	sp, #12
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	460b      	mov	r3, r1
 801146e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  
  /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator value */
  MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 8011470:	4b10      	ldr	r3, [pc, #64]	; (80114b4 <HAL_PWR_EnterSTOPMode+0x50>)
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	f023 0203 	bic.w	r2, r3, #3
 8011478:	490e      	ldr	r1, [pc, #56]	; (80114b4 <HAL_PWR_EnterSTOPMode+0x50>)
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	4313      	orrs	r3, r2
 801147e:	600b      	str	r3, [r1, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8011480:	4b0d      	ldr	r3, [pc, #52]	; (80114b8 <HAL_PWR_EnterSTOPMode+0x54>)
 8011482:	691b      	ldr	r3, [r3, #16]
 8011484:	4a0c      	ldr	r2, [pc, #48]	; (80114b8 <HAL_PWR_EnterSTOPMode+0x54>)
 8011486:	f043 0304 	orr.w	r3, r3, #4
 801148a:	6113      	str	r3, [r2, #16]
  
  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 801148c:	78fb      	ldrb	r3, [r7, #3]
 801148e:	2b01      	cmp	r3, #1
 8011490:	d101      	bne.n	8011496 <HAL_PWR_EnterSTOPMode+0x32>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8011492:	bf30      	wfi
 8011494:	e002      	b.n	801149c <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8011496:	bf40      	sev
    __WFE();
 8011498:	bf20      	wfe
    __WFE();
 801149a:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 801149c:	4b06      	ldr	r3, [pc, #24]	; (80114b8 <HAL_PWR_EnterSTOPMode+0x54>)
 801149e:	691b      	ldr	r3, [r3, #16]
 80114a0:	4a05      	ldr	r2, [pc, #20]	; (80114b8 <HAL_PWR_EnterSTOPMode+0x54>)
 80114a2:	f023 0304 	bic.w	r3, r3, #4
 80114a6:	6113      	str	r3, [r2, #16]
}
 80114a8:	bf00      	nop
 80114aa:	370c      	adds	r7, #12
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr
 80114b4:	40007000 	.word	0x40007000
 80114b8:	e000ed00 	.word	0xe000ed00

080114bc <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80114bc:	b480      	push	{r7}
 80114be:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80114c0:	4b08      	ldr	r3, [pc, #32]	; (80114e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a07      	ldr	r2, [pc, #28]	; (80114e4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80114c6:	f043 0302 	orr.w	r3, r3, #2
 80114ca:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80114cc:	4b06      	ldr	r3, [pc, #24]	; (80114e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80114ce:	691b      	ldr	r3, [r3, #16]
 80114d0:	4a05      	ldr	r2, [pc, #20]	; (80114e8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80114d2:	f043 0304 	orr.w	r3, r3, #4
 80114d6:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80114d8:	bf30      	wfi
}
 80114da:	bf00      	nop
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	40007000 	.word	0x40007000
 80114e8:	e000ed00 	.word	0xe000ed00

080114ec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80114f0:	4b06      	ldr	r3, [pc, #24]	; (801150c <HAL_PWR_PVD_IRQHandler+0x20>)
 80114f2:	695b      	ldr	r3, [r3, #20]
 80114f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d005      	beq.n	8011508 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80114fc:	f000 f808 	bl	8011510 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8011500:	4b02      	ldr	r3, [pc, #8]	; (801150c <HAL_PWR_PVD_IRQHandler+0x20>)
 8011502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011506:	615a      	str	r2, [r3, #20]
  }
}
 8011508:	bf00      	nop
 801150a:	bd80      	pop	{r7, pc}
 801150c:	40013c00 	.word	0x40013c00

08011510 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8011510:	b480      	push	{r7}
 8011512:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8011514:	bf00      	nop
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 801151e:	b480      	push	{r7}
 8011520:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011522:	4b05      	ldr	r3, [pc, #20]	; (8011538 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	4a04      	ldr	r2, [pc, #16]	; (8011538 <HAL_PWR_EnableSleepOnExit+0x1a>)
 8011528:	f043 0302 	orr.w	r3, r3, #2
 801152c:	6113      	str	r3, [r2, #16]
}
 801152e:	bf00      	nop
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr
 8011538:	e000ed00 	.word	0xe000ed00

0801153c <HAL_PWR_DisableSleepOnExit>:
  * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
  *       re-enters SLEEP mode when an interruption handling is over.          
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 801153c:	b480      	push	{r7}
 801153e:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8011540:	4b05      	ldr	r3, [pc, #20]	; (8011558 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011542:	691b      	ldr	r3, [r3, #16]
 8011544:	4a04      	ldr	r2, [pc, #16]	; (8011558 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8011546:	f023 0302 	bic.w	r3, r3, #2
 801154a:	6113      	str	r3, [r2, #16]
}
 801154c:	bf00      	nop
 801154e:	46bd      	mov	sp, r7
 8011550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop
 8011558:	e000ed00 	.word	0xe000ed00

0801155c <HAL_PWR_EnableSEVOnPend>:
  * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.
  * @retval None
  */
void HAL_PWR_EnableSEVOnPend(void)
{
 801155c:	b480      	push	{r7}
 801155e:	af00      	add	r7, sp, #0
  /* Set SEVONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011560:	4b05      	ldr	r3, [pc, #20]	; (8011578 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011562:	691b      	ldr	r3, [r3, #16]
 8011564:	4a04      	ldr	r2, [pc, #16]	; (8011578 <HAL_PWR_EnableSEVOnPend+0x1c>)
 8011566:	f043 0310 	orr.w	r3, r3, #16
 801156a:	6113      	str	r3, [r2, #16]
}
 801156c:	bf00      	nop
 801156e:	46bd      	mov	sp, r7
 8011570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011574:	4770      	bx	lr
 8011576:	bf00      	nop
 8011578:	e000ed00 	.word	0xe000ed00

0801157c <HAL_PWR_DisableSEVOnPend>:
  * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
  *       WFE to wake up when an interrupt moves from inactive to pended.         
  * @retval None
  */
void HAL_PWR_DisableSEVOnPend(void)
{
 801157c:	b480      	push	{r7}
 801157e:	af00      	add	r7, sp, #0
  /* Clear SEVONPEND bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8011580:	4b05      	ldr	r3, [pc, #20]	; (8011598 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	4a04      	ldr	r2, [pc, #16]	; (8011598 <HAL_PWR_DisableSEVOnPend+0x1c>)
 8011586:	f023 0310 	bic.w	r3, r3, #16
 801158a:	6113      	str	r3, [r2, #16]
}
 801158c:	bf00      	nop
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	e000ed00 	.word	0xe000ed00

0801159c <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80115a2:	2300      	movs	r3, #0
 80115a4:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 80115a6:	4b0e      	ldr	r3, [pc, #56]	; (80115e0 <HAL_PWREx_EnableBkUpReg+0x44>)
 80115a8:	2201      	movs	r2, #1
 80115aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80115ac:	f7f5 f83e 	bl	800662c <HAL_GetTick>
 80115b0:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80115b2:	e009      	b.n	80115c8 <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 80115b4:	f7f5 f83a 	bl	800662c <HAL_GetTick>
 80115b8:	4602      	mov	r2, r0
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80115c2:	d901      	bls.n	80115c8 <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 80115c4:	2303      	movs	r3, #3
 80115c6:	e006      	b.n	80115d6 <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 80115c8:	4b06      	ldr	r3, [pc, #24]	; (80115e4 <HAL_PWREx_EnableBkUpReg+0x48>)
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	f003 0308 	and.w	r3, r3, #8
 80115d0:	2b08      	cmp	r3, #8
 80115d2:	d1ef      	bne.n	80115b4 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 80115d4:	2300      	movs	r3, #0
}
 80115d6:	4618      	mov	r0, r3
 80115d8:	3708      	adds	r7, #8
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	420e00a4 	.word	0x420e00a4
 80115e4:	40007000 	.word	0x40007000

080115e8 <HAL_PWREx_DisableBkUpReg>:
/**
  * @brief Disables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_DisableBkUpReg(void)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b082      	sub	sp, #8
 80115ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80115ee:	2300      	movs	r3, #0
 80115f0:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)DISABLE;
 80115f2:	4b0e      	ldr	r3, [pc, #56]	; (801162c <HAL_PWREx_DisableBkUpReg+0x44>)
 80115f4:	2200      	movs	r2, #0
 80115f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80115f8:	f7f5 f818 	bl	800662c <HAL_GetTick>
 80115fc:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 80115fe:	e009      	b.n	8011614 <HAL_PWREx_DisableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8011600:	f7f5 f814 	bl	800662c <HAL_GetTick>
 8011604:	4602      	mov	r2, r0
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801160e:	d901      	bls.n	8011614 <HAL_PWREx_DisableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8011610:	2303      	movs	r3, #3
 8011612:	e006      	b.n	8011622 <HAL_PWREx_DisableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) != RESET)
 8011614:	4b06      	ldr	r3, [pc, #24]	; (8011630 <HAL_PWREx_DisableBkUpReg+0x48>)
 8011616:	685b      	ldr	r3, [r3, #4]
 8011618:	f003 0308 	and.w	r3, r3, #8
 801161c:	2b08      	cmp	r3, #8
 801161e:	d0ef      	beq.n	8011600 <HAL_PWREx_DisableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8011620:	2300      	movs	r3, #0
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	420e00a4 	.word	0x420e00a4
 8011630:	40007000 	.word	0x40007000

08011634 <HAL_PWREx_EnableFlashPowerDown>:
/**
  * @brief Enables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_EnableFlashPowerDown(void)
{
 8011634:	b480      	push	{r7}
 8011636:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)ENABLE;
 8011638:	4b03      	ldr	r3, [pc, #12]	; (8011648 <HAL_PWREx_EnableFlashPowerDown+0x14>)
 801163a:	2201      	movs	r2, #1
 801163c:	601a      	str	r2, [r3, #0]
}
 801163e:	bf00      	nop
 8011640:	46bd      	mov	sp, r7
 8011642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011646:	4770      	bx	lr
 8011648:	420e0024 	.word	0x420e0024

0801164c <HAL_PWREx_DisableFlashPowerDown>:
/**
  * @brief Disables the Flash Power Down in Stop mode.
  * @retval None
  */
void HAL_PWREx_DisableFlashPowerDown(void)
{
 801164c:	b480      	push	{r7}
 801164e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)DISABLE;
 8011650:	4b03      	ldr	r3, [pc, #12]	; (8011660 <HAL_PWREx_DisableFlashPowerDown+0x14>)
 8011652:	2200      	movs	r2, #0
 8011654:	601a      	str	r2, [r3, #0]
}
 8011656:	bf00      	nop
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr
 8011660:	420e0024 	.word	0x420e0024

08011664 <HAL_PWREx_GetVoltageRange>:
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE1: Regulator voltage output Scale 1 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE2: Regulator voltage output Scale 2 mode
  *            - @arg PWR_REGULATOR_VOLTAGE_SCALE3: Regulator voltage output Scale 3 mode
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8011664:	b480      	push	{r7}
 8011666:	af00      	add	r7, sp, #0
  return (PWR->CR & PWR_CR_VOS);
 8011668:	4b04      	ldr	r3, [pc, #16]	; (801167c <HAL_PWREx_GetVoltageRange+0x18>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
}
 8011670:	4618      	mov	r0, r3
 8011672:	46bd      	mov	sp, r7
 8011674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011678:	4770      	bx	lr
 801167a:	bf00      	nop
 801167c:	40007000 	.word	0x40007000

08011680 <HAL_PWREx_ControlVoltageScaling>:
  *        When moving from Range 2 to Range 1, the system frequency can be increased to
  *        a value up to 168 MHz after calling HAL_PWREx_ConfigVoltageScaling() API.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011688:	2300      	movs	r3, #0
 801168a:	617b      	str	r3, [r7, #20]
  
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* Enable PWR RCC Clock Peripheral */
  __HAL_RCC_PWR_CLK_ENABLE();
 801168c:	2300      	movs	r3, #0
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	4b1a      	ldr	r3, [pc, #104]	; (80116fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011694:	4a19      	ldr	r2, [pc, #100]	; (80116fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8011696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801169a:	6413      	str	r3, [r2, #64]	; 0x40
 801169c:	4b17      	ldr	r3, [pc, #92]	; (80116fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 801169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80116a4:	60fb      	str	r3, [r7, #12]
 80116a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Set Range */
  __HAL_PWR_VOLTAGESCALING_CONFIG(VoltageScaling);
 80116a8:	2300      	movs	r3, #0
 80116aa:	613b      	str	r3, [r7, #16]
 80116ac:	4b14      	ldr	r3, [pc, #80]	; (8011700 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80116b4:	4912      	ldr	r1, [pc, #72]	; (8011700 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4313      	orrs	r3, r2
 80116ba:	600b      	str	r3, [r1, #0]
 80116bc:	4b10      	ldr	r3, [pc, #64]	; (8011700 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116c4:	613b      	str	r3, [r7, #16]
 80116c6:	693b      	ldr	r3, [r7, #16]
  
  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80116c8:	f7f4 ffb0 	bl	800662c <HAL_GetTick>
 80116cc:	6178      	str	r0, [r7, #20]
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80116ce:	e009      	b.n	80116e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    if((HAL_GetTick() - tickstart ) > PWR_VOSRDY_TIMEOUT_VALUE)
 80116d0:	f7f4 ffac 	bl	800662c <HAL_GetTick>
 80116d4:	4602      	mov	r2, r0
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80116de:	d901      	bls.n	80116e4 <HAL_PWREx_ControlVoltageScaling+0x64>
    {
      return HAL_TIMEOUT;
 80116e0:	2303      	movs	r3, #3
 80116e2:	e007      	b.n	80116f4 <HAL_PWREx_ControlVoltageScaling+0x74>
  while((__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY) == RESET))
 80116e4:	4b06      	ldr	r3, [pc, #24]	; (8011700 <HAL_PWREx_ControlVoltageScaling+0x80>)
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80116ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80116f0:	d1ee      	bne.n	80116d0 <HAL_PWREx_ControlVoltageScaling+0x50>
    } 
  }

  return HAL_OK;
 80116f2:	2300      	movs	r3, #0
}
 80116f4:	4618      	mov	r0, r3
 80116f6:	3718      	adds	r7, #24
 80116f8:	46bd      	mov	sp, r7
 80116fa:	bd80      	pop	{r7, pc}
 80116fc:	40023800 	.word	0x40023800
 8011700:	40007000 	.word	0x40007000

08011704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b086      	sub	sp, #24
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d101      	bne.n	8011716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8011712:	2301      	movs	r3, #1
 8011714:	e267      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f003 0301 	and.w	r3, r3, #1
 801171e:	2b00      	cmp	r3, #0
 8011720:	d075      	beq.n	801180e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011722:	4b88      	ldr	r3, [pc, #544]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011724:	689b      	ldr	r3, [r3, #8]
 8011726:	f003 030c 	and.w	r3, r3, #12
 801172a:	2b04      	cmp	r3, #4
 801172c:	d00c      	beq.n	8011748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801172e:	4b85      	ldr	r3, [pc, #532]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8011736:	2b08      	cmp	r3, #8
 8011738:	d112      	bne.n	8011760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801173a:	4b82      	ldr	r3, [pc, #520]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011746:	d10b      	bne.n	8011760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011748:	4b7e      	ldr	r3, [pc, #504]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011750:	2b00      	cmp	r3, #0
 8011752:	d05b      	beq.n	801180c <HAL_RCC_OscConfig+0x108>
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	685b      	ldr	r3, [r3, #4]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d157      	bne.n	801180c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801175c:	2301      	movs	r3, #1
 801175e:	e242      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011768:	d106      	bne.n	8011778 <HAL_RCC_OscConfig+0x74>
 801176a:	4b76      	ldr	r3, [pc, #472]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	4a75      	ldr	r2, [pc, #468]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011774:	6013      	str	r3, [r2, #0]
 8011776:	e01d      	b.n	80117b4 <HAL_RCC_OscConfig+0xb0>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011780:	d10c      	bne.n	801179c <HAL_RCC_OscConfig+0x98>
 8011782:	4b70      	ldr	r3, [pc, #448]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4a6f      	ldr	r2, [pc, #444]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801178c:	6013      	str	r3, [r2, #0]
 801178e:	4b6d      	ldr	r3, [pc, #436]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	4a6c      	ldr	r2, [pc, #432]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011798:	6013      	str	r3, [r2, #0]
 801179a:	e00b      	b.n	80117b4 <HAL_RCC_OscConfig+0xb0>
 801179c:	4b69      	ldr	r3, [pc, #420]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	4a68      	ldr	r2, [pc, #416]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80117a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80117a6:	6013      	str	r3, [r2, #0]
 80117a8:	4b66      	ldr	r3, [pc, #408]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a65      	ldr	r2, [pc, #404]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80117ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80117b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d013      	beq.n	80117e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117bc:	f7f4 ff36 	bl	800662c <HAL_GetTick>
 80117c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117c2:	e008      	b.n	80117d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117c4:	f7f4 ff32 	bl	800662c <HAL_GetTick>
 80117c8:	4602      	mov	r2, r0
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	1ad3      	subs	r3, r2, r3
 80117ce:	2b64      	cmp	r3, #100	; 0x64
 80117d0:	d901      	bls.n	80117d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80117d2:	2303      	movs	r3, #3
 80117d4:	e207      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80117d6:	4b5b      	ldr	r3, [pc, #364]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d0f0      	beq.n	80117c4 <HAL_RCC_OscConfig+0xc0>
 80117e2:	e014      	b.n	801180e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80117e4:	f7f4 ff22 	bl	800662c <HAL_GetTick>
 80117e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80117ea:	e008      	b.n	80117fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80117ec:	f7f4 ff1e 	bl	800662c <HAL_GetTick>
 80117f0:	4602      	mov	r2, r0
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	1ad3      	subs	r3, r2, r3
 80117f6:	2b64      	cmp	r3, #100	; 0x64
 80117f8:	d901      	bls.n	80117fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80117fa:	2303      	movs	r3, #3
 80117fc:	e1f3      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80117fe:	4b51      	ldr	r3, [pc, #324]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011806:	2b00      	cmp	r3, #0
 8011808:	d1f0      	bne.n	80117ec <HAL_RCC_OscConfig+0xe8>
 801180a:	e000      	b.n	801180e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	f003 0302 	and.w	r3, r3, #2
 8011816:	2b00      	cmp	r3, #0
 8011818:	d063      	beq.n	80118e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801181a:	4b4a      	ldr	r3, [pc, #296]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 801181c:	689b      	ldr	r3, [r3, #8]
 801181e:	f003 030c 	and.w	r3, r3, #12
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00b      	beq.n	801183e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011826:	4b47      	ldr	r3, [pc, #284]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011828:	689b      	ldr	r3, [r3, #8]
 801182a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801182e:	2b08      	cmp	r3, #8
 8011830:	d11c      	bne.n	801186c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8011832:	4b44      	ldr	r3, [pc, #272]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801183a:	2b00      	cmp	r3, #0
 801183c:	d116      	bne.n	801186c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801183e:	4b41      	ldr	r3, [pc, #260]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	f003 0302 	and.w	r3, r3, #2
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <HAL_RCC_OscConfig+0x152>
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	68db      	ldr	r3, [r3, #12]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d001      	beq.n	8011856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8011852:	2301      	movs	r3, #1
 8011854:	e1c7      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8011856:	4b3b      	ldr	r3, [pc, #236]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	691b      	ldr	r3, [r3, #16]
 8011862:	00db      	lsls	r3, r3, #3
 8011864:	4937      	ldr	r1, [pc, #220]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011866:	4313      	orrs	r3, r2
 8011868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801186a:	e03a      	b.n	80118e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d020      	beq.n	80118b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8011874:	4b34      	ldr	r3, [pc, #208]	; (8011948 <HAL_RCC_OscConfig+0x244>)
 8011876:	2201      	movs	r2, #1
 8011878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801187a:	f7f4 fed7 	bl	800662c <HAL_GetTick>
 801187e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011880:	e008      	b.n	8011894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8011882:	f7f4 fed3 	bl	800662c <HAL_GetTick>
 8011886:	4602      	mov	r2, r0
 8011888:	693b      	ldr	r3, [r7, #16]
 801188a:	1ad3      	subs	r3, r2, r3
 801188c:	2b02      	cmp	r3, #2
 801188e:	d901      	bls.n	8011894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8011890:	2303      	movs	r3, #3
 8011892:	e1a8      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011894:	4b2b      	ldr	r3, [pc, #172]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	f003 0302 	and.w	r3, r3, #2
 801189c:	2b00      	cmp	r3, #0
 801189e:	d0f0      	beq.n	8011882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80118a0:	4b28      	ldr	r3, [pc, #160]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	691b      	ldr	r3, [r3, #16]
 80118ac:	00db      	lsls	r3, r3, #3
 80118ae:	4925      	ldr	r1, [pc, #148]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80118b0:	4313      	orrs	r3, r2
 80118b2:	600b      	str	r3, [r1, #0]
 80118b4:	e015      	b.n	80118e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80118b6:	4b24      	ldr	r3, [pc, #144]	; (8011948 <HAL_RCC_OscConfig+0x244>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80118bc:	f7f4 feb6 	bl	800662c <HAL_GetTick>
 80118c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118c2:	e008      	b.n	80118d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80118c4:	f7f4 feb2 	bl	800662c <HAL_GetTick>
 80118c8:	4602      	mov	r2, r0
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	2b02      	cmp	r3, #2
 80118d0:	d901      	bls.n	80118d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80118d2:	2303      	movs	r3, #3
 80118d4:	e187      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80118d6:	4b1b      	ldr	r3, [pc, #108]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	f003 0302 	and.w	r3, r3, #2
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d1f0      	bne.n	80118c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	681b      	ldr	r3, [r3, #0]
 80118e6:	f003 0308 	and.w	r3, r3, #8
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d036      	beq.n	801195c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d016      	beq.n	8011924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80118f6:	4b15      	ldr	r3, [pc, #84]	; (801194c <HAL_RCC_OscConfig+0x248>)
 80118f8:	2201      	movs	r2, #1
 80118fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80118fc:	f7f4 fe96 	bl	800662c <HAL_GetTick>
 8011900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011902:	e008      	b.n	8011916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011904:	f7f4 fe92 	bl	800662c <HAL_GetTick>
 8011908:	4602      	mov	r2, r0
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	1ad3      	subs	r3, r2, r3
 801190e:	2b02      	cmp	r3, #2
 8011910:	d901      	bls.n	8011916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8011912:	2303      	movs	r3, #3
 8011914:	e167      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8011916:	4b0b      	ldr	r3, [pc, #44]	; (8011944 <HAL_RCC_OscConfig+0x240>)
 8011918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801191a:	f003 0302 	and.w	r3, r3, #2
 801191e:	2b00      	cmp	r3, #0
 8011920:	d0f0      	beq.n	8011904 <HAL_RCC_OscConfig+0x200>
 8011922:	e01b      	b.n	801195c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011924:	4b09      	ldr	r3, [pc, #36]	; (801194c <HAL_RCC_OscConfig+0x248>)
 8011926:	2200      	movs	r2, #0
 8011928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801192a:	f7f4 fe7f 	bl	800662c <HAL_GetTick>
 801192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011930:	e00e      	b.n	8011950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011932:	f7f4 fe7b 	bl	800662c <HAL_GetTick>
 8011936:	4602      	mov	r2, r0
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	1ad3      	subs	r3, r2, r3
 801193c:	2b02      	cmp	r3, #2
 801193e:	d907      	bls.n	8011950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8011940:	2303      	movs	r3, #3
 8011942:	e150      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
 8011944:	40023800 	.word	0x40023800
 8011948:	42470000 	.word	0x42470000
 801194c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8011950:	4b88      	ldr	r3, [pc, #544]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011954:	f003 0302 	and.w	r3, r3, #2
 8011958:	2b00      	cmp	r3, #0
 801195a:	d1ea      	bne.n	8011932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	f003 0304 	and.w	r3, r3, #4
 8011964:	2b00      	cmp	r3, #0
 8011966:	f000 8097 	beq.w	8011a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 801196a:	2300      	movs	r3, #0
 801196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801196e:	4b81      	ldr	r3, [pc, #516]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011976:	2b00      	cmp	r3, #0
 8011978:	d10f      	bne.n	801199a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801197a:	2300      	movs	r3, #0
 801197c:	60bb      	str	r3, [r7, #8]
 801197e:	4b7d      	ldr	r3, [pc, #500]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011982:	4a7c      	ldr	r2, [pc, #496]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011988:	6413      	str	r3, [r2, #64]	; 0x40
 801198a:	4b7a      	ldr	r3, [pc, #488]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 801198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801198e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011992:	60bb      	str	r3, [r7, #8]
 8011994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8011996:	2301      	movs	r3, #1
 8011998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801199a:	4b77      	ldr	r3, [pc, #476]	; (8011b78 <HAL_RCC_OscConfig+0x474>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d118      	bne.n	80119d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80119a6:	4b74      	ldr	r3, [pc, #464]	; (8011b78 <HAL_RCC_OscConfig+0x474>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a73      	ldr	r2, [pc, #460]	; (8011b78 <HAL_RCC_OscConfig+0x474>)
 80119ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80119b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80119b2:	f7f4 fe3b 	bl	800662c <HAL_GetTick>
 80119b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119b8:	e008      	b.n	80119cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80119ba:	f7f4 fe37 	bl	800662c <HAL_GetTick>
 80119be:	4602      	mov	r2, r0
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	2b02      	cmp	r3, #2
 80119c6:	d901      	bls.n	80119cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80119c8:	2303      	movs	r3, #3
 80119ca:	e10c      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80119cc:	4b6a      	ldr	r3, [pc, #424]	; (8011b78 <HAL_RCC_OscConfig+0x474>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d0f0      	beq.n	80119ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	689b      	ldr	r3, [r3, #8]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d106      	bne.n	80119ee <HAL_RCC_OscConfig+0x2ea>
 80119e0:	4b64      	ldr	r3, [pc, #400]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 80119e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e4:	4a63      	ldr	r2, [pc, #396]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 80119e6:	f043 0301 	orr.w	r3, r3, #1
 80119ea:	6713      	str	r3, [r2, #112]	; 0x70
 80119ec:	e01c      	b.n	8011a28 <HAL_RCC_OscConfig+0x324>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	2b05      	cmp	r3, #5
 80119f4:	d10c      	bne.n	8011a10 <HAL_RCC_OscConfig+0x30c>
 80119f6:	4b5f      	ldr	r3, [pc, #380]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 80119f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119fa:	4a5e      	ldr	r2, [pc, #376]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 80119fc:	f043 0304 	orr.w	r3, r3, #4
 8011a00:	6713      	str	r3, [r2, #112]	; 0x70
 8011a02:	4b5c      	ldr	r3, [pc, #368]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a06:	4a5b      	ldr	r2, [pc, #364]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a08:	f043 0301 	orr.w	r3, r3, #1
 8011a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8011a0e:	e00b      	b.n	8011a28 <HAL_RCC_OscConfig+0x324>
 8011a10:	4b58      	ldr	r3, [pc, #352]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a14:	4a57      	ldr	r2, [pc, #348]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a16:	f023 0301 	bic.w	r3, r3, #1
 8011a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8011a1c:	4b55      	ldr	r3, [pc, #340]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a20:	4a54      	ldr	r2, [pc, #336]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a22:	f023 0304 	bic.w	r3, r3, #4
 8011a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	689b      	ldr	r3, [r3, #8]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d015      	beq.n	8011a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011a30:	f7f4 fdfc 	bl	800662c <HAL_GetTick>
 8011a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a36:	e00a      	b.n	8011a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a38:	f7f4 fdf8 	bl	800662c <HAL_GetTick>
 8011a3c:	4602      	mov	r2, r0
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	1ad3      	subs	r3, r2, r3
 8011a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d901      	bls.n	8011a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8011a4a:	2303      	movs	r3, #3
 8011a4c:	e0cb      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8011a4e:	4b49      	ldr	r3, [pc, #292]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a52:	f003 0302 	and.w	r3, r3, #2
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d0ee      	beq.n	8011a38 <HAL_RCC_OscConfig+0x334>
 8011a5a:	e014      	b.n	8011a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a5c:	f7f4 fde6 	bl	800662c <HAL_GetTick>
 8011a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a62:	e00a      	b.n	8011a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011a64:	f7f4 fde2 	bl	800662c <HAL_GetTick>
 8011a68:	4602      	mov	r2, r0
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a72:	4293      	cmp	r3, r2
 8011a74:	d901      	bls.n	8011a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8011a76:	2303      	movs	r3, #3
 8011a78:	e0b5      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8011a7a:	4b3e      	ldr	r3, [pc, #248]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a7e:	f003 0302 	and.w	r3, r3, #2
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d1ee      	bne.n	8011a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8011a86:	7dfb      	ldrb	r3, [r7, #23]
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d105      	bne.n	8011a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011a8c:	4b39      	ldr	r3, [pc, #228]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a90:	4a38      	ldr	r2, [pc, #224]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	f000 80a1 	beq.w	8011be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8011aa2:	4b34      	ldr	r3, [pc, #208]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011aa4:	689b      	ldr	r3, [r3, #8]
 8011aa6:	f003 030c 	and.w	r3, r3, #12
 8011aaa:	2b08      	cmp	r3, #8
 8011aac:	d05c      	beq.n	8011b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	699b      	ldr	r3, [r3, #24]
 8011ab2:	2b02      	cmp	r3, #2
 8011ab4:	d141      	bne.n	8011b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011ab6:	4b31      	ldr	r3, [pc, #196]	; (8011b7c <HAL_RCC_OscConfig+0x478>)
 8011ab8:	2200      	movs	r2, #0
 8011aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011abc:	f7f4 fdb6 	bl	800662c <HAL_GetTick>
 8011ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011ac2:	e008      	b.n	8011ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011ac4:	f7f4 fdb2 	bl	800662c <HAL_GetTick>
 8011ac8:	4602      	mov	r2, r0
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	1ad3      	subs	r3, r2, r3
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d901      	bls.n	8011ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8011ad2:	2303      	movs	r3, #3
 8011ad4:	e087      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011ad6:	4b27      	ldr	r3, [pc, #156]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1f0      	bne.n	8011ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	69da      	ldr	r2, [r3, #28]
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6a1b      	ldr	r3, [r3, #32]
 8011aea:	431a      	orrs	r2, r3
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af0:	019b      	lsls	r3, r3, #6
 8011af2:	431a      	orrs	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011af8:	085b      	lsrs	r3, r3, #1
 8011afa:	3b01      	subs	r3, #1
 8011afc:	041b      	lsls	r3, r3, #16
 8011afe:	431a      	orrs	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b04:	061b      	lsls	r3, r3, #24
 8011b06:	491b      	ldr	r1, [pc, #108]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011b0c:	4b1b      	ldr	r3, [pc, #108]	; (8011b7c <HAL_RCC_OscConfig+0x478>)
 8011b0e:	2201      	movs	r2, #1
 8011b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b12:	f7f4 fd8b 	bl	800662c <HAL_GetTick>
 8011b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011b18:	e008      	b.n	8011b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b1a:	f7f4 fd87 	bl	800662c <HAL_GetTick>
 8011b1e:	4602      	mov	r2, r0
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	2b02      	cmp	r3, #2
 8011b26:	d901      	bls.n	8011b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	e05c      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011b2c:	4b11      	ldr	r3, [pc, #68]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d0f0      	beq.n	8011b1a <HAL_RCC_OscConfig+0x416>
 8011b38:	e054      	b.n	8011be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011b3a:	4b10      	ldr	r3, [pc, #64]	; (8011b7c <HAL_RCC_OscConfig+0x478>)
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011b40:	f7f4 fd74 	bl	800662c <HAL_GetTick>
 8011b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b46:	e008      	b.n	8011b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011b48:	f7f4 fd70 	bl	800662c <HAL_GetTick>
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	693b      	ldr	r3, [r7, #16]
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	2b02      	cmp	r3, #2
 8011b54:	d901      	bls.n	8011b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8011b56:	2303      	movs	r3, #3
 8011b58:	e045      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8011b5a:	4b06      	ldr	r3, [pc, #24]	; (8011b74 <HAL_RCC_OscConfig+0x470>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1f0      	bne.n	8011b48 <HAL_RCC_OscConfig+0x444>
 8011b66:	e03d      	b.n	8011be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d107      	bne.n	8011b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8011b70:	2301      	movs	r3, #1
 8011b72:	e038      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
 8011b74:	40023800 	.word	0x40023800
 8011b78:	40007000 	.word	0x40007000
 8011b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8011b80:	4b1b      	ldr	r3, [pc, #108]	; (8011bf0 <HAL_RCC_OscConfig+0x4ec>)
 8011b82:	685b      	ldr	r3, [r3, #4]
 8011b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	699b      	ldr	r3, [r3, #24]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d028      	beq.n	8011be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011b98:	429a      	cmp	r2, r3
 8011b9a:	d121      	bne.n	8011be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d11a      	bne.n	8011be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011bb0:	4013      	ands	r3, r2
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d111      	bne.n	8011be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bc6:	085b      	lsrs	r3, r3, #1
 8011bc8:	3b01      	subs	r3, #1
 8011bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d107      	bne.n	8011be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d001      	beq.n	8011be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8011be0:	2301      	movs	r3, #1
 8011be2:	e000      	b.n	8011be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8011be4:	2300      	movs	r3, #0
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3718      	adds	r7, #24
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	40023800 	.word	0x40023800

08011bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b084      	sub	sp, #16
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d101      	bne.n	8011c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011c04:	2301      	movs	r3, #1
 8011c06:	e0cc      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011c08:	4b68      	ldr	r3, [pc, #416]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	f003 0307 	and.w	r3, r3, #7
 8011c10:	683a      	ldr	r2, [r7, #0]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d90c      	bls.n	8011c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011c16:	4b65      	ldr	r3, [pc, #404]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011c18:	683a      	ldr	r2, [r7, #0]
 8011c1a:	b2d2      	uxtb	r2, r2
 8011c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011c1e:	4b63      	ldr	r3, [pc, #396]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f003 0307 	and.w	r3, r3, #7
 8011c26:	683a      	ldr	r2, [r7, #0]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	d001      	beq.n	8011c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	e0b8      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	f003 0302 	and.w	r3, r3, #2
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d020      	beq.n	8011c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	f003 0304 	and.w	r3, r3, #4
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d005      	beq.n	8011c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011c48:	4b59      	ldr	r3, [pc, #356]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c4a:	689b      	ldr	r3, [r3, #8]
 8011c4c:	4a58      	ldr	r2, [pc, #352]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	f003 0308 	and.w	r3, r3, #8
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d005      	beq.n	8011c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011c60:	4b53      	ldr	r3, [pc, #332]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c62:	689b      	ldr	r3, [r3, #8]
 8011c64:	4a52      	ldr	r2, [pc, #328]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011c6c:	4b50      	ldr	r3, [pc, #320]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c6e:	689b      	ldr	r3, [r3, #8]
 8011c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	689b      	ldr	r3, [r3, #8]
 8011c78:	494d      	ldr	r1, [pc, #308]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c7a:	4313      	orrs	r3, r2
 8011c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f003 0301 	and.w	r3, r3, #1
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d044      	beq.n	8011d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	685b      	ldr	r3, [r3, #4]
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d107      	bne.n	8011ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011c92:	4b47      	ldr	r3, [pc, #284]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d119      	bne.n	8011cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e07f      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	2b02      	cmp	r3, #2
 8011ca8:	d003      	beq.n	8011cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011cae:	2b03      	cmp	r3, #3
 8011cb0:	d107      	bne.n	8011cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011cb2:	4b3f      	ldr	r3, [pc, #252]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d109      	bne.n	8011cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	e06f      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011cc2:	4b3b      	ldr	r3, [pc, #236]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	f003 0302 	and.w	r3, r3, #2
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d101      	bne.n	8011cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	e067      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011cd2:	4b37      	ldr	r3, [pc, #220]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011cd4:	689b      	ldr	r3, [r3, #8]
 8011cd6:	f023 0203 	bic.w	r2, r3, #3
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	4934      	ldr	r1, [pc, #208]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011ce4:	f7f4 fca2 	bl	800662c <HAL_GetTick>
 8011ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011cea:	e00a      	b.n	8011d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011cec:	f7f4 fc9e 	bl	800662c <HAL_GetTick>
 8011cf0:	4602      	mov	r2, r0
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cfa:	4293      	cmp	r3, r2
 8011cfc:	d901      	bls.n	8011d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011cfe:	2303      	movs	r3, #3
 8011d00:	e04f      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011d02:	4b2b      	ldr	r3, [pc, #172]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d04:	689b      	ldr	r3, [r3, #8]
 8011d06:	f003 020c 	and.w	r2, r3, #12
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	429a      	cmp	r2, r3
 8011d12:	d1eb      	bne.n	8011cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011d14:	4b25      	ldr	r3, [pc, #148]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f003 0307 	and.w	r3, r3, #7
 8011d1c:	683a      	ldr	r2, [r7, #0]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	d20c      	bcs.n	8011d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011d22:	4b22      	ldr	r3, [pc, #136]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011d24:	683a      	ldr	r2, [r7, #0]
 8011d26:	b2d2      	uxtb	r2, r2
 8011d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8011d2a:	4b20      	ldr	r3, [pc, #128]	; (8011dac <HAL_RCC_ClockConfig+0x1b8>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f003 0307 	and.w	r3, r3, #7
 8011d32:	683a      	ldr	r2, [r7, #0]
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d001      	beq.n	8011d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011d38:	2301      	movs	r3, #1
 8011d3a:	e032      	b.n	8011da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	f003 0304 	and.w	r3, r3, #4
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d008      	beq.n	8011d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011d48:	4b19      	ldr	r3, [pc, #100]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	68db      	ldr	r3, [r3, #12]
 8011d54:	4916      	ldr	r1, [pc, #88]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d56:	4313      	orrs	r3, r2
 8011d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	f003 0308 	and.w	r3, r3, #8
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d009      	beq.n	8011d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011d66:	4b12      	ldr	r3, [pc, #72]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d68:	689b      	ldr	r3, [r3, #8]
 8011d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	691b      	ldr	r3, [r3, #16]
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	490e      	ldr	r1, [pc, #56]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d76:	4313      	orrs	r3, r2
 8011d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011d7a:	f000 f8a1 	bl	8011ec0 <HAL_RCC_GetSysClockFreq>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	4b0b      	ldr	r3, [pc, #44]	; (8011db0 <HAL_RCC_ClockConfig+0x1bc>)
 8011d82:	689b      	ldr	r3, [r3, #8]
 8011d84:	091b      	lsrs	r3, r3, #4
 8011d86:	f003 030f 	and.w	r3, r3, #15
 8011d8a:	490a      	ldr	r1, [pc, #40]	; (8011db4 <HAL_RCC_ClockConfig+0x1c0>)
 8011d8c:	5ccb      	ldrb	r3, [r1, r3]
 8011d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8011d92:	4a09      	ldr	r2, [pc, #36]	; (8011db8 <HAL_RCC_ClockConfig+0x1c4>)
 8011d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8011d96:	4b09      	ldr	r3, [pc, #36]	; (8011dbc <HAL_RCC_ClockConfig+0x1c8>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7f4 fc01 	bl	80065a2 <HAL_InitTick>

  return HAL_OK;
 8011da0:	2300      	movs	r3, #0
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	3710      	adds	r7, #16
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
 8011daa:	bf00      	nop
 8011dac:	40023c00 	.word	0x40023c00
 8011db0:	40023800 	.word	0x40023800
 8011db4:	08051d08 	.word	0x08051d08
 8011db8:	20000058 	.word	0x20000058
 8011dbc:	2000005c 	.word	0x2000005c

08011dc0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b08c      	sub	sp, #48	; 0x30
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d129      	bne.n	8011e26 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	617b      	str	r3, [r7, #20]
 8011dd6:	4b2b      	ldr	r3, [pc, #172]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dda:	4a2a      	ldr	r2, [pc, #168]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011ddc:	f043 0301 	orr.w	r3, r3, #1
 8011de0:	6313      	str	r3, [r2, #48]	; 0x30
 8011de2:	4b28      	ldr	r3, [pc, #160]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011de6:	f003 0301 	and.w	r3, r3, #1
 8011dea:	617b      	str	r3, [r7, #20]
 8011dec:	697b      	ldr	r3, [r7, #20]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8011dee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011df4:	2302      	movs	r3, #2
 8011df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011df8:	2303      	movs	r3, #3
 8011dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011e00:	2300      	movs	r3, #0
 8011e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8011e04:	f107 031c 	add.w	r3, r7, #28
 8011e08:	4619      	mov	r1, r3
 8011e0a:	481f      	ldr	r0, [pc, #124]	; (8011e88 <HAL_RCC_MCOConfig+0xc8>)
 8011e0c:	f7f8 fd76 	bl	800a8fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8011e10:	4b1c      	ldr	r3, [pc, #112]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8011e18:	68b9      	ldr	r1, [r7, #8]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	430b      	orrs	r3, r1
 8011e1e:	4919      	ldr	r1, [pc, #100]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e20:	4313      	orrs	r3, r2
 8011e22:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8011e24:	e029      	b.n	8011e7a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8011e26:	2300      	movs	r3, #0
 8011e28:	61bb      	str	r3, [r7, #24]
 8011e2a:	4b16      	ldr	r3, [pc, #88]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e2e:	4a15      	ldr	r2, [pc, #84]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e30:	f043 0304 	orr.w	r3, r3, #4
 8011e34:	6313      	str	r3, [r2, #48]	; 0x30
 8011e36:	4b13      	ldr	r3, [pc, #76]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e3a:	f003 0304 	and.w	r3, r3, #4
 8011e3e:	61bb      	str	r3, [r7, #24]
 8011e40:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8011e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e48:	2302      	movs	r3, #2
 8011e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e4c:	2303      	movs	r3, #3
 8011e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011e50:	2300      	movs	r3, #0
 8011e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8011e54:	2300      	movs	r3, #0
 8011e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8011e58:	f107 031c 	add.w	r3, r7, #28
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	480b      	ldr	r0, [pc, #44]	; (8011e8c <HAL_RCC_MCOConfig+0xcc>)
 8011e60:	f7f8 fd4c 	bl	800a8fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8011e64:	4b07      	ldr	r3, [pc, #28]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	00d9      	lsls	r1, r3, #3
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	430b      	orrs	r3, r1
 8011e74:	4903      	ldr	r1, [pc, #12]	; (8011e84 <HAL_RCC_MCOConfig+0xc4>)
 8011e76:	4313      	orrs	r3, r2
 8011e78:	608b      	str	r3, [r1, #8]
}
 8011e7a:	bf00      	nop
 8011e7c:	3730      	adds	r7, #48	; 0x30
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
 8011e82:	bf00      	nop
 8011e84:	40023800 	.word	0x40023800
 8011e88:	40020000 	.word	0x40020000
 8011e8c:	40020800 	.word	0x40020800

08011e90 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8011e90:	b480      	push	{r7}
 8011e92:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8011e94:	4b03      	ldr	r3, [pc, #12]	; (8011ea4 <HAL_RCC_EnableCSS+0x14>)
 8011e96:	2201      	movs	r2, #1
 8011e98:	601a      	str	r2, [r3, #0]
}
 8011e9a:	bf00      	nop
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr
 8011ea4:	4247004c 	.word	0x4247004c

08011ea8 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8011eac:	4b03      	ldr	r3, [pc, #12]	; (8011ebc <HAL_RCC_DisableCSS+0x14>)
 8011eae:	2200      	movs	r2, #0
 8011eb0:	601a      	str	r2, [r3, #0]
}
 8011eb2:	bf00      	nop
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	4247004c 	.word	0x4247004c

08011ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011ec4:	b094      	sub	sp, #80	; 0x50
 8011ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	647b      	str	r3, [r7, #68]	; 0x44
 8011ecc:	2300      	movs	r3, #0
 8011ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011ed8:	4b79      	ldr	r3, [pc, #484]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	f003 030c 	and.w	r3, r3, #12
 8011ee0:	2b08      	cmp	r3, #8
 8011ee2:	d00d      	beq.n	8011f00 <HAL_RCC_GetSysClockFreq+0x40>
 8011ee4:	2b08      	cmp	r3, #8
 8011ee6:	f200 80e1 	bhi.w	80120ac <HAL_RCC_GetSysClockFreq+0x1ec>
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d002      	beq.n	8011ef4 <HAL_RCC_GetSysClockFreq+0x34>
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	d003      	beq.n	8011efa <HAL_RCC_GetSysClockFreq+0x3a>
 8011ef2:	e0db      	b.n	80120ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011ef4:	4b73      	ldr	r3, [pc, #460]	; (80120c4 <HAL_RCC_GetSysClockFreq+0x204>)
 8011ef6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8011ef8:	e0db      	b.n	80120b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011efa:	4b73      	ldr	r3, [pc, #460]	; (80120c8 <HAL_RCC_GetSysClockFreq+0x208>)
 8011efc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8011efe:	e0d8      	b.n	80120b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011f00:	4b6f      	ldr	r3, [pc, #444]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8011f02:	685b      	ldr	r3, [r3, #4]
 8011f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011f0a:	4b6d      	ldr	r3, [pc, #436]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8011f0c:	685b      	ldr	r3, [r3, #4]
 8011f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d063      	beq.n	8011fde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011f16:	4b6a      	ldr	r3, [pc, #424]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	099b      	lsrs	r3, r3, #6
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011f20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f28:	633b      	str	r3, [r7, #48]	; 0x30
 8011f2a:	2300      	movs	r3, #0
 8011f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8011f2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011f32:	4622      	mov	r2, r4
 8011f34:	462b      	mov	r3, r5
 8011f36:	f04f 0000 	mov.w	r0, #0
 8011f3a:	f04f 0100 	mov.w	r1, #0
 8011f3e:	0159      	lsls	r1, r3, #5
 8011f40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011f44:	0150      	lsls	r0, r2, #5
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	4621      	mov	r1, r4
 8011f4c:	1a51      	subs	r1, r2, r1
 8011f4e:	6139      	str	r1, [r7, #16]
 8011f50:	4629      	mov	r1, r5
 8011f52:	eb63 0301 	sbc.w	r3, r3, r1
 8011f56:	617b      	str	r3, [r7, #20]
 8011f58:	f04f 0200 	mov.w	r2, #0
 8011f5c:	f04f 0300 	mov.w	r3, #0
 8011f60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011f64:	4659      	mov	r1, fp
 8011f66:	018b      	lsls	r3, r1, #6
 8011f68:	4651      	mov	r1, sl
 8011f6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011f6e:	4651      	mov	r1, sl
 8011f70:	018a      	lsls	r2, r1, #6
 8011f72:	4651      	mov	r1, sl
 8011f74:	ebb2 0801 	subs.w	r8, r2, r1
 8011f78:	4659      	mov	r1, fp
 8011f7a:	eb63 0901 	sbc.w	r9, r3, r1
 8011f7e:	f04f 0200 	mov.w	r2, #0
 8011f82:	f04f 0300 	mov.w	r3, #0
 8011f86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011f8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011f8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011f92:	4690      	mov	r8, r2
 8011f94:	4699      	mov	r9, r3
 8011f96:	4623      	mov	r3, r4
 8011f98:	eb18 0303 	adds.w	r3, r8, r3
 8011f9c:	60bb      	str	r3, [r7, #8]
 8011f9e:	462b      	mov	r3, r5
 8011fa0:	eb49 0303 	adc.w	r3, r9, r3
 8011fa4:	60fb      	str	r3, [r7, #12]
 8011fa6:	f04f 0200 	mov.w	r2, #0
 8011faa:	f04f 0300 	mov.w	r3, #0
 8011fae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011fb2:	4629      	mov	r1, r5
 8011fb4:	024b      	lsls	r3, r1, #9
 8011fb6:	4621      	mov	r1, r4
 8011fb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	024a      	lsls	r2, r1, #9
 8011fc0:	4610      	mov	r0, r2
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8011fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011fcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011fd0:	f007 f998 	bl	8019304 <__aeabi_uldivmod>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	4613      	mov	r3, r2
 8011fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011fdc:	e058      	b.n	8012090 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011fde:	4b38      	ldr	r3, [pc, #224]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8011fe0:	685b      	ldr	r3, [r3, #4]
 8011fe2:	099b      	lsrs	r3, r3, #6
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	4611      	mov	r1, r2
 8011fea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8011fee:	623b      	str	r3, [r7, #32]
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ff4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011ff8:	4642      	mov	r2, r8
 8011ffa:	464b      	mov	r3, r9
 8011ffc:	f04f 0000 	mov.w	r0, #0
 8012000:	f04f 0100 	mov.w	r1, #0
 8012004:	0159      	lsls	r1, r3, #5
 8012006:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801200a:	0150      	lsls	r0, r2, #5
 801200c:	4602      	mov	r2, r0
 801200e:	460b      	mov	r3, r1
 8012010:	4641      	mov	r1, r8
 8012012:	ebb2 0a01 	subs.w	sl, r2, r1
 8012016:	4649      	mov	r1, r9
 8012018:	eb63 0b01 	sbc.w	fp, r3, r1
 801201c:	f04f 0200 	mov.w	r2, #0
 8012020:	f04f 0300 	mov.w	r3, #0
 8012024:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8012028:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 801202c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012030:	ebb2 040a 	subs.w	r4, r2, sl
 8012034:	eb63 050b 	sbc.w	r5, r3, fp
 8012038:	f04f 0200 	mov.w	r2, #0
 801203c:	f04f 0300 	mov.w	r3, #0
 8012040:	00eb      	lsls	r3, r5, #3
 8012042:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012046:	00e2      	lsls	r2, r4, #3
 8012048:	4614      	mov	r4, r2
 801204a:	461d      	mov	r5, r3
 801204c:	4643      	mov	r3, r8
 801204e:	18e3      	adds	r3, r4, r3
 8012050:	603b      	str	r3, [r7, #0]
 8012052:	464b      	mov	r3, r9
 8012054:	eb45 0303 	adc.w	r3, r5, r3
 8012058:	607b      	str	r3, [r7, #4]
 801205a:	f04f 0200 	mov.w	r2, #0
 801205e:	f04f 0300 	mov.w	r3, #0
 8012062:	e9d7 4500 	ldrd	r4, r5, [r7]
 8012066:	4629      	mov	r1, r5
 8012068:	028b      	lsls	r3, r1, #10
 801206a:	4621      	mov	r1, r4
 801206c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8012070:	4621      	mov	r1, r4
 8012072:	028a      	lsls	r2, r1, #10
 8012074:	4610      	mov	r0, r2
 8012076:	4619      	mov	r1, r3
 8012078:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801207a:	2200      	movs	r2, #0
 801207c:	61bb      	str	r3, [r7, #24]
 801207e:	61fa      	str	r2, [r7, #28]
 8012080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012084:	f007 f93e 	bl	8019304 <__aeabi_uldivmod>
 8012088:	4602      	mov	r2, r0
 801208a:	460b      	mov	r3, r1
 801208c:	4613      	mov	r3, r2
 801208e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8012090:	4b0b      	ldr	r3, [pc, #44]	; (80120c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	0c1b      	lsrs	r3, r3, #16
 8012096:	f003 0303 	and.w	r3, r3, #3
 801209a:	3301      	adds	r3, #1
 801209c:	005b      	lsls	r3, r3, #1
 801209e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80120a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80120a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80120a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80120a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80120aa:	e002      	b.n	80120b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80120ac:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80120ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80120b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80120b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3750      	adds	r7, #80	; 0x50
 80120b8:	46bd      	mov	sp, r7
 80120ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80120be:	bf00      	nop
 80120c0:	40023800 	.word	0x40023800
 80120c4:	00f42400 	.word	0x00f42400
 80120c8:	007a1200 	.word	0x007a1200

080120cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80120cc:	b480      	push	{r7}
 80120ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80120d0:	4b03      	ldr	r3, [pc, #12]	; (80120e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80120d2:	681b      	ldr	r3, [r3, #0]
}
 80120d4:	4618      	mov	r0, r3
 80120d6:	46bd      	mov	sp, r7
 80120d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120dc:	4770      	bx	lr
 80120de:	bf00      	nop
 80120e0:	20000058 	.word	0x20000058

080120e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80120e4:	b580      	push	{r7, lr}
 80120e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80120e8:	f7ff fff0 	bl	80120cc <HAL_RCC_GetHCLKFreq>
 80120ec:	4602      	mov	r2, r0
 80120ee:	4b05      	ldr	r3, [pc, #20]	; (8012104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80120f0:	689b      	ldr	r3, [r3, #8]
 80120f2:	0a9b      	lsrs	r3, r3, #10
 80120f4:	f003 0307 	and.w	r3, r3, #7
 80120f8:	4903      	ldr	r1, [pc, #12]	; (8012108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80120fa:	5ccb      	ldrb	r3, [r1, r3]
 80120fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012100:	4618      	mov	r0, r3
 8012102:	bd80      	pop	{r7, pc}
 8012104:	40023800 	.word	0x40023800
 8012108:	08051d18 	.word	0x08051d18

0801210c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8012110:	f7ff ffdc 	bl	80120cc <HAL_RCC_GetHCLKFreq>
 8012114:	4602      	mov	r2, r0
 8012116:	4b05      	ldr	r3, [pc, #20]	; (801212c <HAL_RCC_GetPCLK2Freq+0x20>)
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	0b5b      	lsrs	r3, r3, #13
 801211c:	f003 0307 	and.w	r3, r3, #7
 8012120:	4903      	ldr	r1, [pc, #12]	; (8012130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012122:	5ccb      	ldrb	r3, [r1, r3]
 8012124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8012128:	4618      	mov	r0, r3
 801212a:	bd80      	pop	{r7, pc}
 801212c:	40023800 	.word	0x40023800
 8012130:	08051d18 	.word	0x08051d18

08012134 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
__weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012134:	b480      	push	{r7}
 8012136:	b083      	sub	sp, #12
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	220f      	movs	r2, #15
 8012140:	601a      	str	r2, [r3, #0]

  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8012142:	4b45      	ldr	r3, [pc, #276]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801214a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801214e:	d104      	bne.n	801215a <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8012156:	605a      	str	r2, [r3, #4]
 8012158:	e00e      	b.n	8012178 <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 801215a:	4b3f      	ldr	r3, [pc, #252]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012166:	d104      	bne.n	8012172 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801216e:	605a      	str	r2, [r3, #4]
 8012170:	e002      	b.n	8012178 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	2200      	movs	r2, #0
 8012176:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8012178:	4b37      	ldr	r3, [pc, #220]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f003 0301 	and.w	r3, r3, #1
 8012180:	2b01      	cmp	r3, #1
 8012182:	d103      	bne.n	801218c <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2201      	movs	r2, #1
 8012188:	60da      	str	r2, [r3, #12]
 801218a:	e002      	b.n	8012192 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8012192:	4b31      	ldr	r3, [pc, #196]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	08db      	lsrs	r3, r3, #3
 8012198:	f003 021f 	and.w	r2, r3, #31
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	611a      	str	r2, [r3, #16]

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 80121a0:	4b2d      	ldr	r3, [pc, #180]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 80121a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a4:	f003 0304 	and.w	r3, r3, #4
 80121a8:	2b04      	cmp	r3, #4
 80121aa:	d103      	bne.n	80121b4 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2205      	movs	r2, #5
 80121b0:	609a      	str	r2, [r3, #8]
 80121b2:	e00c      	b.n	80121ce <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 80121b4:	4b28      	ldr	r3, [pc, #160]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 80121b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b8:	f003 0301 	and.w	r3, r3, #1
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d103      	bne.n	80121c8 <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	2201      	movs	r2, #1
 80121c4:	609a      	str	r2, [r3, #8]
 80121c6:	e002      	b.n	80121ce <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2200      	movs	r2, #0
 80121cc:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 80121ce:	4b22      	ldr	r3, [pc, #136]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 80121d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121d2:	f003 0301 	and.w	r3, r3, #1
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d103      	bne.n	80121e2 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	615a      	str	r2, [r3, #20]
 80121e0:	e002      	b.n	80121e8 <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	615a      	str	r2, [r3, #20]
  }

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 80121e8:	4b1b      	ldr	r3, [pc, #108]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80121f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80121f4:	d103      	bne.n	80121fe <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2202      	movs	r2, #2
 80121fa:	619a      	str	r2, [r3, #24]
 80121fc:	e002      	b.n	8012204 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2201      	movs	r2, #1
 8012202:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8012204:	4b14      	ldr	r3, [pc, #80]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
 8012210:	4b11      	ldr	r3, [pc, #68]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801221c:	4b0e      	ldr	r3, [pc, #56]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 801221e:	685b      	ldr	r3, [r3, #4]
 8012220:	099b      	lsrs	r3, r3, #6
 8012222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
 801222a:	4b0b      	ldr	r3, [pc, #44]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8012232:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8012236:	005b      	lsls	r3, r3, #1
 8012238:	0c1a      	lsrs	r2, r3, #16
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
 801223e:	4b06      	ldr	r3, [pc, #24]	; (8012258 <HAL_RCC_GetOscConfig+0x124>)
 8012240:	685b      	ldr	r3, [r3, #4]
 8012242:	0e1b      	lsrs	r3, r3, #24
 8012244:	f003 020f 	and.w	r2, r3, #15
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr
 8012258:	40023800 	.word	0x40023800

0801225c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801225c:	b480      	push	{r7}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	220f      	movs	r2, #15
 801226a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801226c:	4b12      	ldr	r3, [pc, #72]	; (80122b8 <HAL_RCC_GetClockConfig+0x5c>)
 801226e:	689b      	ldr	r3, [r3, #8]
 8012270:	f003 0203 	and.w	r2, r3, #3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8012278:	4b0f      	ldr	r3, [pc, #60]	; (80122b8 <HAL_RCC_GetClockConfig+0x5c>)
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8012284:	4b0c      	ldr	r3, [pc, #48]	; (80122b8 <HAL_RCC_GetClockConfig+0x5c>)
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8012290:	4b09      	ldr	r3, [pc, #36]	; (80122b8 <HAL_RCC_GetClockConfig+0x5c>)
 8012292:	689b      	ldr	r3, [r3, #8]
 8012294:	08db      	lsrs	r3, r3, #3
 8012296:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 801229e:	4b07      	ldr	r3, [pc, #28]	; (80122bc <HAL_RCC_GetClockConfig+0x60>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	f003 0207 	and.w	r2, r3, #7
 80122a6:	683b      	ldr	r3, [r7, #0]
 80122a8:	601a      	str	r2, [r3, #0]
}
 80122aa:	bf00      	nop
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr
 80122b6:	bf00      	nop
 80122b8:	40023800 	.word	0x40023800
 80122bc:	40023c00 	.word	0x40023c00

080122c0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80122c4:	4b06      	ldr	r3, [pc, #24]	; (80122e0 <HAL_RCC_NMI_IRQHandler+0x20>)
 80122c6:	68db      	ldr	r3, [r3, #12]
 80122c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122cc:	2b80      	cmp	r3, #128	; 0x80
 80122ce:	d104      	bne.n	80122da <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80122d0:	f000 f80a 	bl	80122e8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80122d4:	4b03      	ldr	r3, [pc, #12]	; (80122e4 <HAL_RCC_NMI_IRQHandler+0x24>)
 80122d6:	2280      	movs	r2, #128	; 0x80
 80122d8:	701a      	strb	r2, [r3, #0]
  }
}
 80122da:	bf00      	nop
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	40023800 	.word	0x40023800
 80122e4:	4002380e 	.word	0x4002380e

080122e8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80122e8:	b480      	push	{r7}
 80122ea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80122ec:	bf00      	nop
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr

080122f6 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b086      	sub	sp, #24
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80122fe:	2300      	movs	r3, #0
 8012300:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	f003 0301 	and.w	r3, r3, #1
 801230e:	2b00      	cmp	r3, #0
 8012310:	d105      	bne.n	801231e <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801231a:	2b00      	cmp	r3, #0
 801231c:	d035      	beq.n	801238a <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801231e:	4b62      	ldr	r3, [pc, #392]	; (80124a8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012320:	2200      	movs	r2, #0
 8012322:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012324:	f7f4 f982 	bl	800662c <HAL_GetTick>
 8012328:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801232a:	e008      	b.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801232c:	f7f4 f97e 	bl	800662c <HAL_GetTick>
 8012330:	4602      	mov	r2, r0
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	1ad3      	subs	r3, r2, r3
 8012336:	2b02      	cmp	r3, #2
 8012338:	d901      	bls.n	801233e <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801233a:	2303      	movs	r3, #3
 801233c:	e0b0      	b.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801233e:	4b5b      	ldr	r3, [pc, #364]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012346:	2b00      	cmp	r3, #0
 8012348:	d1f0      	bne.n	801232c <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	019a      	lsls	r2, r3, #6
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	689b      	ldr	r3, [r3, #8]
 8012354:	071b      	lsls	r3, r3, #28
 8012356:	4955      	ldr	r1, [pc, #340]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012358:	4313      	orrs	r3, r2
 801235a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801235e:	4b52      	ldr	r3, [pc, #328]	; (80124a8 <HAL_RCCEx_PeriphCLKConfig+0x1b2>)
 8012360:	2201      	movs	r2, #1
 8012362:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8012364:	f7f4 f962 	bl	800662c <HAL_GetTick>
 8012368:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801236a:	e008      	b.n	801237e <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 801236c:	f7f4 f95e 	bl	800662c <HAL_GetTick>
 8012370:	4602      	mov	r2, r0
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	2b02      	cmp	r3, #2
 8012378:	d901      	bls.n	801237e <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801237a:	2303      	movs	r3, #3
 801237c:	e090      	b.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801237e:	4b4b      	ldr	r3, [pc, #300]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012386:	2b00      	cmp	r3, #0
 8012388:	d0f0      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	f003 0302 	and.w	r3, r3, #2
 8012392:	2b00      	cmp	r3, #0
 8012394:	f000 8083 	beq.w	801249e <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8012398:	2300      	movs	r3, #0
 801239a:	60fb      	str	r3, [r7, #12]
 801239c:	4b43      	ldr	r3, [pc, #268]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123a0:	4a42      	ldr	r2, [pc, #264]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80123a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80123a6:	6413      	str	r3, [r2, #64]	; 0x40
 80123a8:	4b40      	ldr	r3, [pc, #256]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80123aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80123b0:	60fb      	str	r3, [r7, #12]
 80123b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80123b4:	4b3e      	ldr	r3, [pc, #248]	; (80124b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	4a3d      	ldr	r2, [pc, #244]	; (80124b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80123ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80123c0:	f7f4 f934 	bl	800662c <HAL_GetTick>
 80123c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80123c6:	e008      	b.n	80123da <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80123c8:	f7f4 f930 	bl	800662c <HAL_GetTick>
 80123cc:	4602      	mov	r2, r0
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	1ad3      	subs	r3, r2, r3
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	d901      	bls.n	80123da <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80123d6:	2303      	movs	r3, #3
 80123d8:	e062      	b.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80123da:	4b35      	ldr	r3, [pc, #212]	; (80124b0 <HAL_RCCEx_PeriphCLKConfig+0x1ba>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d0f0      	beq.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80123e6:	4b31      	ldr	r3, [pc, #196]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 80123e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d02f      	beq.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	68db      	ldr	r3, [r3, #12]
 80123fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123fe:	693a      	ldr	r2, [r7, #16]
 8012400:	429a      	cmp	r2, r3
 8012402:	d028      	beq.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012404:	4b29      	ldr	r3, [pc, #164]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801240c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801240e:	4b29      	ldr	r3, [pc, #164]	; (80124b4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012410:	2201      	movs	r2, #1
 8012412:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012414:	4b27      	ldr	r3, [pc, #156]	; (80124b4 <HAL_RCCEx_PeriphCLKConfig+0x1be>)
 8012416:	2200      	movs	r2, #0
 8012418:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 801241a:	4a24      	ldr	r2, [pc, #144]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8012420:	4b22      	ldr	r3, [pc, #136]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012424:	f003 0301 	and.w	r3, r3, #1
 8012428:	2b01      	cmp	r3, #1
 801242a:	d114      	bne.n	8012456 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 801242c:	f7f4 f8fe 	bl	800662c <HAL_GetTick>
 8012430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012432:	e00a      	b.n	801244a <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012434:	f7f4 f8fa 	bl	800662c <HAL_GetTick>
 8012438:	4602      	mov	r2, r0
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	1ad3      	subs	r3, r2, r3
 801243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012442:	4293      	cmp	r3, r2
 8012444:	d901      	bls.n	801244a <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8012446:	2303      	movs	r3, #3
 8012448:	e02a      	b.n	80124a0 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801244a:	4b18      	ldr	r3, [pc, #96]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801244c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801244e:	f003 0302 	and.w	r3, r3, #2
 8012452:	2b00      	cmp	r3, #0
 8012454:	d0ee      	beq.n	8012434 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801245e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012462:	d10d      	bne.n	8012480 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8012464:	4b11      	ldr	r3, [pc, #68]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012466:	689b      	ldr	r3, [r3, #8]
 8012468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012478:	490c      	ldr	r1, [pc, #48]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801247a:	4313      	orrs	r3, r2
 801247c:	608b      	str	r3, [r1, #8]
 801247e:	e005      	b.n	801248c <HAL_RCCEx_PeriphCLKConfig+0x196>
 8012480:	4b0a      	ldr	r3, [pc, #40]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	4a09      	ldr	r2, [pc, #36]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 8012486:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801248a:	6093      	str	r3, [r2, #8]
 801248c:	4b07      	ldr	r3, [pc, #28]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801248e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012498:	4904      	ldr	r1, [pc, #16]	; (80124ac <HAL_RCCEx_PeriphCLKConfig+0x1b6>)
 801249a:	4313      	orrs	r3, r2
 801249c:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 801249e:	2300      	movs	r3, #0
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	3718      	adds	r7, #24
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	42470068 	.word	0x42470068
 80124ac:	40023800 	.word	0x40023800
 80124b0:	40007000 	.word	0x40007000
 80124b4:	42470e40 	.word	0x42470e40

080124b8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2203      	movs	r2, #3
 80124c4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80124c6:	4b11      	ldr	r3, [pc, #68]	; (801250c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80124c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124cc:	099b      	lsrs	r3, r3, #6
 80124ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80124d6:	4b0d      	ldr	r3, [pc, #52]	; (801250c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80124d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124dc:	0f1b      	lsrs	r3, r3, #28
 80124de:	f003 0207 	and.w	r2, r3, #7
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80124e6:	4b09      	ldr	r3, [pc, #36]	; (801250c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80124e8:	689b      	ldr	r3, [r3, #8]
 80124ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80124ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80124f0:	4b06      	ldr	r3, [pc, #24]	; (801250c <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 80124f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124f4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	431a      	orrs	r2, r3
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8012500:	bf00      	nop
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	40023800 	.word	0x40023800

08012510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8012510:	b480      	push	{r7}
 8012512:	b087      	sub	sp, #28
 8012514:	af00      	add	r7, sp, #0
 8012516:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8012518:	2300      	movs	r3, #0
 801251a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 801251c:	2300      	movs	r3, #0
 801251e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8012520:	2300      	movs	r3, #0
 8012522:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8012524:	2300      	movs	r3, #0
 8012526:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2b01      	cmp	r3, #1
 801252c:	d13e      	bne.n	80125ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 801252e:	4b23      	ldr	r3, [pc, #140]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012530:	689b      	ldr	r3, [r3, #8]
 8012532:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012536:	60fb      	str	r3, [r7, #12]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d005      	beq.n	801254a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d12f      	bne.n	80125a4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8012544:	4b1e      	ldr	r3, [pc, #120]	; (80125c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8012546:	617b      	str	r3, [r7, #20]
          break;
 8012548:	e02f      	b.n	80125aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 801254a:	4b1c      	ldr	r3, [pc, #112]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012556:	d108      	bne.n	801256a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8012558:	4b18      	ldr	r3, [pc, #96]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801255a:	685b      	ldr	r3, [r3, #4]
 801255c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012560:	4a18      	ldr	r2, [pc, #96]	; (80125c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8012562:	fbb2 f3f3 	udiv	r3, r2, r3
 8012566:	613b      	str	r3, [r7, #16]
 8012568:	e007      	b.n	801257a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 801256a:	4b14      	ldr	r3, [pc, #80]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012572:	4a15      	ldr	r2, [pc, #84]	; (80125c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8012574:	fbb2 f3f3 	udiv	r3, r2, r3
 8012578:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 801257a:	4b10      	ldr	r3, [pc, #64]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 801257c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012580:	099b      	lsrs	r3, r3, #6
 8012582:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	fb02 f303 	mul.w	r3, r2, r3
 801258c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 801258e:	4b0b      	ldr	r3, [pc, #44]	; (80125bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8012590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012594:	0f1b      	lsrs	r3, r3, #28
 8012596:	f003 0307 	and.w	r3, r3, #7
 801259a:	68ba      	ldr	r2, [r7, #8]
 801259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80125a0:	617b      	str	r3, [r7, #20]
          break;
 80125a2:	e002      	b.n	80125aa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80125a4:	2300      	movs	r3, #0
 80125a6:	617b      	str	r3, [r7, #20]
          break;
 80125a8:	bf00      	nop
        }
      }
      break;
 80125aa:	bf00      	nop
    }
  }
  return frequency;
 80125ac:	697b      	ldr	r3, [r7, #20]
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	371c      	adds	r7, #28
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop
 80125bc:	40023800 	.word	0x40023800
 80125c0:	00bb8000 	.word	0x00bb8000
 80125c4:	007a1200 	.word	0x007a1200
 80125c8:	00f42400 	.word	0x00f42400

080125cc <HAL_RCCEx_EnablePLLI2S>:
  * @param  PLLI2SInit  pointer to an RCC_PLLI2SInitTypeDef structure that
  *         contains the configuration information for the PLLI2S
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b084      	sub	sp, #16
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
#if defined(RCC_PLLI2SCFGR_PLLI2SQ)
  assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
#endif /* RCC_PLLI2SCFGR_PLLI2SQ */

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 80125d4:	4b1d      	ldr	r3, [pc, #116]	; (801264c <HAL_RCCEx_EnablePLLI2S+0x80>)
 80125d6:	2200      	movs	r2, #0
 80125d8:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 80125da:	f7f4 f827 	bl	800662c <HAL_GetTick>
 80125de:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80125e0:	e008      	b.n	80125f4 <HAL_RCCEx_EnablePLLI2S+0x28>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80125e2:	f7f4 f823 	bl	800662c <HAL_GetTick>
 80125e6:	4602      	mov	r2, r0
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	2b02      	cmp	r3, #2
 80125ee:	d901      	bls.n	80125f4 <HAL_RCCEx_EnablePLLI2S+0x28>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 80125f0:	2303      	movs	r3, #3
 80125f2:	e026      	b.n	8012642 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
 80125f4:	4b16      	ldr	r3, [pc, #88]	; (8012650 <HAL_RCCEx_EnablePLLI2S+0x84>)
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d1f0      	bne.n	80125e2 <HAL_RCCEx_EnablePLLI2S+0x16>
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
#else
  /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
  /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
  __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	019a      	lsls	r2, r3, #6
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	685b      	ldr	r3, [r3, #4]
 801260a:	071b      	lsls	r3, r3, #28
 801260c:	4910      	ldr	r1, [pc, #64]	; (8012650 <HAL_RCCEx_EnablePLLI2S+0x84>)
 801260e:	4313      	orrs	r3, r2
 8012610:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F446xx */

  /* Enable the PLLI2S */
  __HAL_RCC_PLLI2S_ENABLE();
 8012614:	4b0d      	ldr	r3, [pc, #52]	; (801264c <HAL_RCCEx_EnablePLLI2S+0x80>)
 8012616:	2201      	movs	r2, #1
 8012618:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  tickstart = HAL_GetTick();
 801261a:	f7f4 f807 	bl	800662c <HAL_GetTick>
 801261e:	60f8      	str	r0, [r7, #12]
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012620:	e008      	b.n	8012634 <HAL_RCCEx_EnablePLLI2S+0x68>
  {
    if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8012622:	f7f4 f803 	bl	800662c <HAL_GetTick>
 8012626:	4602      	mov	r2, r0
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	1ad3      	subs	r3, r2, r3
 801262c:	2b02      	cmp	r3, #2
 801262e:	d901      	bls.n	8012634 <HAL_RCCEx_EnablePLLI2S+0x68>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012630:	2303      	movs	r3, #3
 8012632:	e006      	b.n	8012642 <HAL_RCCEx_EnablePLLI2S+0x76>
  while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
 8012634:	4b06      	ldr	r3, [pc, #24]	; (8012650 <HAL_RCCEx_EnablePLLI2S+0x84>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801263c:	2b00      	cmp	r3, #0
 801263e:	d0f0      	beq.n	8012622 <HAL_RCCEx_EnablePLLI2S+0x56>
    }
  }

 return HAL_OK;
 8012640:	2300      	movs	r3, #0
}
 8012642:	4618      	mov	r0, r3
 8012644:	3710      	adds	r7, #16
 8012646:	46bd      	mov	sp, r7
 8012648:	bd80      	pop	{r7, pc}
 801264a:	bf00      	nop
 801264c:	42470068 	.word	0x42470068
 8012650:	40023800 	.word	0x40023800

08012654 <HAL_RCCEx_DisablePLLI2S>:
/**
  * @brief  Disable PLLI2S.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Disable the PLLI2S */
  __HAL_RCC_PLLI2S_DISABLE();
 801265a:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <HAL_RCCEx_DisablePLLI2S+0x3c>)
 801265c:	2200      	movs	r2, #0
 801265e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is disabled */
  tickstart = HAL_GetTick();
 8012660:	f7f3 ffe4 	bl	800662c <HAL_GetTick>
 8012664:	6078      	str	r0, [r7, #4]
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012666:	e008      	b.n	801267a <HAL_RCCEx_DisablePLLI2S+0x26>
  {
    if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012668:	f7f3 ffe0 	bl	800662c <HAL_GetTick>
 801266c:	4602      	mov	r2, r0
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	2b02      	cmp	r3, #2
 8012674:	d901      	bls.n	801267a <HAL_RCCEx_DisablePLLI2S+0x26>
    {
      /* return in case of Timeout detected */
      return HAL_TIMEOUT;
 8012676:	2303      	movs	r3, #3
 8012678:	e006      	b.n	8012688 <HAL_RCCEx_DisablePLLI2S+0x34>
  while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 801267a:	4b06      	ldr	r3, [pc, #24]	; (8012694 <HAL_RCCEx_DisablePLLI2S+0x40>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012682:	2b00      	cmp	r3, #0
 8012684:	d1f0      	bne.n	8012668 <HAL_RCCEx_DisablePLLI2S+0x14>
    }
  }

  return HAL_OK;
 8012686:	2300      	movs	r3, #0
}
 8012688:	4618      	mov	r0, r3
 801268a:	3708      	adds	r7, #8
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	42470068 	.word	0x42470068
 8012694:	40023800 	.word	0x40023800

08012698 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801269e:	f7f3 ffc5 	bl	800662c <HAL_GetTick>
 80126a2:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80126a4:	4b5d      	ldr	r3, [pc, #372]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	4a5c      	ldr	r2, [pc, #368]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126aa:	f043 0301 	orr.w	r3, r3, #1
 80126ae:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80126b0:	e008      	b.n	80126c4 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80126b2:	f7f3 ffbb 	bl	800662c <HAL_GetTick>
 80126b6:	4602      	mov	r2, r0
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	2b02      	cmp	r3, #2
 80126be:	d901      	bls.n	80126c4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80126c0:	2303      	movs	r3, #3
 80126c2:	e0a7      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80126c4:	4b55      	ldr	r3, [pc, #340]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	f003 0302 	and.w	r3, r3, #2
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d0f0      	beq.n	80126b2 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 80126d0:	4b52      	ldr	r3, [pc, #328]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	4a51      	ldr	r2, [pc, #324]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80126dc:	f7f3 ffa6 	bl	800662c <HAL_GetTick>
 80126e0:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80126e2:	4b4e      	ldr	r3, [pc, #312]	; (801281c <HAL_RCC_DeInit+0x184>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80126e8:	e00a      	b.n	8012700 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126ea:	f7f3 ff9f 	bl	800662c <HAL_GetTick>
 80126ee:	4602      	mov	r2, r0
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	1ad3      	subs	r3, r2, r3
 80126f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80126f8:	4293      	cmp	r3, r2
 80126fa:	d901      	bls.n	8012700 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80126fc:	2303      	movs	r3, #3
 80126fe:	e089      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8012700:	4b46      	ldr	r3, [pc, #280]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012702:	689b      	ldr	r3, [r3, #8]
 8012704:	f003 030c 	and.w	r3, r3, #12
 8012708:	2b00      	cmp	r3, #0
 801270a:	d1ee      	bne.n	80126ea <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801270c:	f7f3 ff8e 	bl	800662c <HAL_GetTick>
 8012710:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8012712:	4b42      	ldr	r3, [pc, #264]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	4a41      	ldr	r2, [pc, #260]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012718:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 801271c:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 801271e:	e008      	b.n	8012732 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012720:	f7f3 ff84 	bl	800662c <HAL_GetTick>
 8012724:	4602      	mov	r2, r0
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	1ad3      	subs	r3, r2, r3
 801272a:	2b64      	cmp	r3, #100	; 0x64
 801272c:	d901      	bls.n	8012732 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 801272e:	2303      	movs	r3, #3
 8012730:	e070      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8012732:	4b3a      	ldr	r3, [pc, #232]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801273a:	2b00      	cmp	r3, #0
 801273c:	d1f0      	bne.n	8012720 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 801273e:	f7f3 ff75 	bl	800662c <HAL_GetTick>
 8012742:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8012744:	4b35      	ldr	r3, [pc, #212]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	4a34      	ldr	r2, [pc, #208]	; (801281c <HAL_RCC_DeInit+0x184>)
 801274a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801274e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012750:	e008      	b.n	8012764 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012752:	f7f3 ff6b 	bl	800662c <HAL_GetTick>
 8012756:	4602      	mov	r2, r0
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	2b02      	cmp	r3, #2
 801275e:	d901      	bls.n	8012764 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8012760:	2303      	movs	r3, #3
 8012762:	e057      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8012764:	4b2d      	ldr	r3, [pc, #180]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1f0      	bne.n	8012752 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8012770:	f7f3 ff5c 	bl	800662c <HAL_GetTick>
 8012774:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8012776:	4b29      	ldr	r3, [pc, #164]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a28      	ldr	r2, [pc, #160]	; (801281c <HAL_RCC_DeInit+0x184>)
 801277c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012780:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012782:	e008      	b.n	8012796 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8012784:	f7f3 ff52 	bl	800662c <HAL_GetTick>
 8012788:	4602      	mov	r2, r0
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	1ad3      	subs	r3, r2, r3
 801278e:	2b02      	cmp	r3, #2
 8012790:	d901      	bls.n	8012796 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8012792:	2303      	movs	r3, #3
 8012794:	e03e      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8012796:	4b21      	ldr	r3, [pc, #132]	; (801281c <HAL_RCC_DeInit+0x184>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d1f0      	bne.n	8012784 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 80127a2:	4b1e      	ldr	r3, [pc, #120]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127a4:	4a1e      	ldr	r2, [pc, #120]	; (8012820 <HAL_RCC_DeInit+0x188>)
 80127a6:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 80127a8:	4b1c      	ldr	r3, [pc, #112]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127aa:	4a1e      	ldr	r2, [pc, #120]	; (8012824 <HAL_RCC_DeInit+0x18c>)
 80127ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 80127b0:	4b1a      	ldr	r3, [pc, #104]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127b2:	68db      	ldr	r3, [r3, #12]
 80127b4:	4a19      	ldr	r2, [pc, #100]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80127ba:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 80127bc:	4b17      	ldr	r3, [pc, #92]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	4a16      	ldr	r2, [pc, #88]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80127c6:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 80127c8:	4b14      	ldr	r3, [pc, #80]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127ca:	68db      	ldr	r3, [r3, #12]
 80127cc:	4a13      	ldr	r2, [pc, #76]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127ce:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 80127d2:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 80127d4:	4b11      	ldr	r3, [pc, #68]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	4a10      	ldr	r2, [pc, #64]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80127de:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80127e0:	4b0e      	ldr	r3, [pc, #56]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127e4:	4a0d      	ldr	r2, [pc, #52]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127e6:	f023 0301 	bic.w	r3, r3, #1
 80127ea:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80127ec:	4b0b      	ldr	r3, [pc, #44]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127f0:	4a0a      	ldr	r2, [pc, #40]	; (801281c <HAL_RCC_DeInit+0x184>)
 80127f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80127f6:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80127f8:	4b0b      	ldr	r3, [pc, #44]	; (8012828 <HAL_RCC_DeInit+0x190>)
 80127fa:	4a0c      	ldr	r2, [pc, #48]	; (801282c <HAL_RCC_DeInit+0x194>)
 80127fc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80127fe:	4b0c      	ldr	r3, [pc, #48]	; (8012830 <HAL_RCC_DeInit+0x198>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	4618      	mov	r0, r3
 8012804:	f7f3 fecd 	bl	80065a2 <HAL_InitTick>
 8012808:	4603      	mov	r3, r0
 801280a:	2b00      	cmp	r3, #0
 801280c:	d001      	beq.n	8012812 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 801280e:	2301      	movs	r3, #1
 8012810:	e000      	b.n	8012814 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8012812:	2300      	movs	r3, #0
  }
}
 8012814:	4618      	mov	r0, r3
 8012816:	3708      	adds	r7, #8
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}
 801281c:	40023800 	.word	0x40023800
 8012820:	04003010 	.word	0x04003010
 8012824:	20003000 	.word	0x20003000
 8012828:	20000058 	.word	0x20000058
 801282c:	00f42400 	.word	0x00f42400
 8012830:	2000005c 	.word	0x2000005c

08012834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b082      	sub	sp, #8
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012842:	2301      	movs	r3, #1
 8012844:	e07b      	b.n	801293e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284a:	2b00      	cmp	r3, #0
 801284c:	d108      	bne.n	8012860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012856:	d009      	beq.n	801286c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2200      	movs	r2, #0
 801285c:	61da      	str	r2, [r3, #28]
 801285e:	e005      	b.n	801286c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2200      	movs	r2, #0
 801286a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2200      	movs	r2, #0
 8012870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012878:	b2db      	uxtb	r3, r3
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7f3 f860 	bl	800594c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	2202      	movs	r2, #2
 8012890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80128b4:	431a      	orrs	r2, r3
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	68db      	ldr	r3, [r3, #12]
 80128ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80128be:	431a      	orrs	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	691b      	ldr	r3, [r3, #16]
 80128c4:	f003 0302 	and.w	r3, r3, #2
 80128c8:	431a      	orrs	r2, r3
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	f003 0301 	and.w	r3, r3, #1
 80128d2:	431a      	orrs	r2, r3
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	699b      	ldr	r3, [r3, #24]
 80128d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80128dc:	431a      	orrs	r2, r3
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	69db      	ldr	r3, [r3, #28]
 80128e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80128e6:	431a      	orrs	r2, r3
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6a1b      	ldr	r3, [r3, #32]
 80128ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128f0:	ea42 0103 	orr.w	r1, r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	430a      	orrs	r2, r1
 8012902:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	699b      	ldr	r3, [r3, #24]
 8012908:	0c1b      	lsrs	r3, r3, #16
 801290a:	f003 0104 	and.w	r1, r3, #4
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012912:	f003 0210 	and.w	r2, r3, #16
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	430a      	orrs	r2, r1
 801291c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	69da      	ldr	r2, [r3, #28]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801292c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2200      	movs	r2, #0
 8012932:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2201      	movs	r2, #1
 8012938:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801293c:	2300      	movs	r3, #0
}
 801293e:	4618      	mov	r0, r3
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8012946:	b580      	push	{r7, lr}
 8012948:	b082      	sub	sp, #8
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d101      	bne.n	8012958 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8012954:	2301      	movs	r3, #1
 8012956:	e01a      	b.n	801298e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2202      	movs	r2, #2
 801295c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	681a      	ldr	r2, [r3, #0]
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801296e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7f3 f923 	bl	8005bbc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	2200      	movs	r2, #0
 801297a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	2200      	movs	r2, #0
 8012980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2200      	movs	r2, #0
 8012988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801298c:	2300      	movs	r3, #0
}
 801298e:	4618      	mov	r0, r3
 8012990:	3708      	adds	r7, #8
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012996:	b580      	push	{r7, lr}
 8012998:	b088      	sub	sp, #32
 801299a:	af00      	add	r7, sp, #0
 801299c:	60f8      	str	r0, [r7, #12]
 801299e:	60b9      	str	r1, [r7, #8]
 80129a0:	603b      	str	r3, [r7, #0]
 80129a2:	4613      	mov	r3, r2
 80129a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80129a6:	2300      	movs	r3, #0
 80129a8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d101      	bne.n	80129b8 <HAL_SPI_Transmit+0x22>
 80129b4:	2302      	movs	r3, #2
 80129b6:	e126      	b.n	8012c06 <HAL_SPI_Transmit+0x270>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2201      	movs	r2, #1
 80129bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80129c0:	f7f3 fe34 	bl	800662c <HAL_GetTick>
 80129c4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80129c6:	88fb      	ldrh	r3, [r7, #6]
 80129c8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	2b01      	cmp	r3, #1
 80129d4:	d002      	beq.n	80129dc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80129d6:	2302      	movs	r3, #2
 80129d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80129da:	e10b      	b.n	8012bf4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d002      	beq.n	80129e8 <HAL_SPI_Transmit+0x52>
 80129e2:	88fb      	ldrh	r3, [r7, #6]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d102      	bne.n	80129ee <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80129e8:	2301      	movs	r3, #1
 80129ea:	77fb      	strb	r3, [r7, #31]
    goto error;
 80129ec:	e102      	b.n	8012bf4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	2203      	movs	r2, #3
 80129f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	2200      	movs	r2, #0
 80129fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	68ba      	ldr	r2, [r7, #8]
 8012a00:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	88fa      	ldrh	r2, [r7, #6]
 8012a06:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	88fa      	ldrh	r2, [r7, #6]
 8012a0c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2200      	movs	r2, #0
 8012a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2200      	movs	r2, #0
 8012a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	2200      	movs	r2, #0
 8012a24:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	689b      	ldr	r3, [r3, #8]
 8012a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a34:	d10f      	bne.n	8012a56 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	681a      	ldr	r2, [r3, #0]
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a60:	2b40      	cmp	r3, #64	; 0x40
 8012a62:	d007      	beq.n	8012a74 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	681a      	ldr	r2, [r3, #0]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	68db      	ldr	r3, [r3, #12]
 8012a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a7c:	d14b      	bne.n	8012b16 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d002      	beq.n	8012a8c <HAL_SPI_Transmit+0xf6>
 8012a86:	8afb      	ldrh	r3, [r7, #22]
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d13e      	bne.n	8012b0a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a90:	881a      	ldrh	r2, [r3, #0]
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a9c:	1c9a      	adds	r2, r3, #2
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	3b01      	subs	r3, #1
 8012aaa:	b29a      	uxth	r2, r3
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8012ab0:	e02b      	b.n	8012b0a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	689b      	ldr	r3, [r3, #8]
 8012ab8:	f003 0302 	and.w	r3, r3, #2
 8012abc:	2b02      	cmp	r3, #2
 8012abe:	d112      	bne.n	8012ae6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ac4:	881a      	ldrh	r2, [r3, #0]
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ad0:	1c9a      	adds	r2, r3, #2
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	3b01      	subs	r3, #1
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	86da      	strh	r2, [r3, #54]	; 0x36
 8012ae4:	e011      	b.n	8012b0a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012ae6:	f7f3 fda1 	bl	800662c <HAL_GetTick>
 8012aea:	4602      	mov	r2, r0
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	1ad3      	subs	r3, r2, r3
 8012af0:	683a      	ldr	r2, [r7, #0]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d803      	bhi.n	8012afe <HAL_SPI_Transmit+0x168>
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012afc:	d102      	bne.n	8012b04 <HAL_SPI_Transmit+0x16e>
 8012afe:	683b      	ldr	r3, [r7, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d102      	bne.n	8012b0a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8012b04:	2303      	movs	r3, #3
 8012b06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012b08:	e074      	b.n	8012bf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d1ce      	bne.n	8012ab2 <HAL_SPI_Transmit+0x11c>
 8012b14:	e04c      	b.n	8012bb0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	685b      	ldr	r3, [r3, #4]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d002      	beq.n	8012b24 <HAL_SPI_Transmit+0x18e>
 8012b1e:	8afb      	ldrh	r3, [r7, #22]
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d140      	bne.n	8012ba6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	330c      	adds	r3, #12
 8012b2e:	7812      	ldrb	r2, [r2, #0]
 8012b30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b36:	1c5a      	adds	r2, r3, #1
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	3b01      	subs	r3, #1
 8012b44:	b29a      	uxth	r2, r3
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8012b4a:	e02c      	b.n	8012ba6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	689b      	ldr	r3, [r3, #8]
 8012b52:	f003 0302 	and.w	r3, r3, #2
 8012b56:	2b02      	cmp	r3, #2
 8012b58:	d113      	bne.n	8012b82 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	330c      	adds	r3, #12
 8012b64:	7812      	ldrb	r2, [r2, #0]
 8012b66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b6c:	1c5a      	adds	r2, r3, #1
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	3b01      	subs	r3, #1
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8012b80:	e011      	b.n	8012ba6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012b82:	f7f3 fd53 	bl	800662c <HAL_GetTick>
 8012b86:	4602      	mov	r2, r0
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	1ad3      	subs	r3, r2, r3
 8012b8c:	683a      	ldr	r2, [r7, #0]
 8012b8e:	429a      	cmp	r2, r3
 8012b90:	d803      	bhi.n	8012b9a <HAL_SPI_Transmit+0x204>
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b98:	d102      	bne.n	8012ba0 <HAL_SPI_Transmit+0x20a>
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d102      	bne.n	8012ba6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8012ba0:	2303      	movs	r3, #3
 8012ba2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8012ba4:	e026      	b.n	8012bf4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1cd      	bne.n	8012b4c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012bb0:	69ba      	ldr	r2, [r7, #24]
 8012bb2:	6839      	ldr	r1, [r7, #0]
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f001 ff3e 	bl	8014a36 <SPI_EndRxTxTransaction>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	2220      	movs	r2, #32
 8012bc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d10a      	bne.n	8012be4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012bce:	2300      	movs	r3, #0
 8012bd0:	613b      	str	r3, [r7, #16]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	613b      	str	r3, [r7, #16]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	689b      	ldr	r3, [r3, #8]
 8012be0:	613b      	str	r3, [r7, #16]
 8012be2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d002      	beq.n	8012bf2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8012bec:	2301      	movs	r3, #1
 8012bee:	77fb      	strb	r3, [r7, #31]
 8012bf0:	e000      	b.n	8012bf4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8012bf2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	2201      	movs	r2, #1
 8012bf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012c04:	7ffb      	ldrb	r3, [r7, #31]
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3720      	adds	r7, #32
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b088      	sub	sp, #32
 8012c12:	af02      	add	r7, sp, #8
 8012c14:	60f8      	str	r0, [r7, #12]
 8012c16:	60b9      	str	r1, [r7, #8]
 8012c18:	603b      	str	r3, [r7, #0]
 8012c1a:	4613      	mov	r3, r2
 8012c1c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	685b      	ldr	r3, [r3, #4]
 8012c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012c2a:	d112      	bne.n	8012c52 <HAL_SPI_Receive+0x44>
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	689b      	ldr	r3, [r3, #8]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10e      	bne.n	8012c52 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2204      	movs	r2, #4
 8012c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8012c3c:	88fa      	ldrh	r2, [r7, #6]
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	9300      	str	r3, [sp, #0]
 8012c42:	4613      	mov	r3, r2
 8012c44:	68ba      	ldr	r2, [r7, #8]
 8012c46:	68b9      	ldr	r1, [r7, #8]
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 f8f1 	bl	8012e30 <HAL_SPI_TransmitReceive>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	e0ea      	b.n	8012e28 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d101      	bne.n	8012c60 <HAL_SPI_Receive+0x52>
 8012c5c:	2302      	movs	r3, #2
 8012c5e:	e0e3      	b.n	8012e28 <HAL_SPI_Receive+0x21a>
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2201      	movs	r2, #1
 8012c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012c68:	f7f3 fce0 	bl	800662c <HAL_GetTick>
 8012c6c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d002      	beq.n	8012c80 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8012c7a:	2302      	movs	r3, #2
 8012c7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012c7e:	e0ca      	b.n	8012e16 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8012c80:	68bb      	ldr	r3, [r7, #8]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d002      	beq.n	8012c8c <HAL_SPI_Receive+0x7e>
 8012c86:	88fb      	ldrh	r3, [r7, #6]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012c90:	e0c1      	b.n	8012e16 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	2204      	movs	r2, #4
 8012c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	2200      	movs	r2, #0
 8012c9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	68ba      	ldr	r2, [r7, #8]
 8012ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	88fa      	ldrh	r2, [r7, #6]
 8012caa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	88fa      	ldrh	r2, [r7, #6]
 8012cb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	2200      	movs	r2, #0
 8012cbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	689b      	ldr	r3, [r3, #8]
 8012cd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012cd8:	d10f      	bne.n	8012cfa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	681a      	ldr	r2, [r3, #0]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ce8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	681a      	ldr	r2, [r3, #0]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8012cf8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d04:	2b40      	cmp	r3, #64	; 0x40
 8012d06:	d007      	beq.n	8012d18 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	681a      	ldr	r2, [r3, #0]
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012d16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	68db      	ldr	r3, [r3, #12]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d162      	bne.n	8012de6 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8012d20:	e02e      	b.n	8012d80 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	689b      	ldr	r3, [r3, #8]
 8012d28:	f003 0301 	and.w	r3, r3, #1
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d115      	bne.n	8012d5c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f103 020c 	add.w	r2, r3, #12
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d3c:	7812      	ldrb	r2, [r2, #0]
 8012d3e:	b2d2      	uxtb	r2, r2
 8012d40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012d46:	1c5a      	adds	r2, r3, #1
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	3b01      	subs	r3, #1
 8012d54:	b29a      	uxth	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012d5a:	e011      	b.n	8012d80 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012d5c:	f7f3 fc66 	bl	800662c <HAL_GetTick>
 8012d60:	4602      	mov	r2, r0
 8012d62:	693b      	ldr	r3, [r7, #16]
 8012d64:	1ad3      	subs	r3, r2, r3
 8012d66:	683a      	ldr	r2, [r7, #0]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d803      	bhi.n	8012d74 <HAL_SPI_Receive+0x166>
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d72:	d102      	bne.n	8012d7a <HAL_SPI_Receive+0x16c>
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d102      	bne.n	8012d80 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8012d7a:	2303      	movs	r3, #3
 8012d7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012d7e:	e04a      	b.n	8012e16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012d84:	b29b      	uxth	r3, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1cb      	bne.n	8012d22 <HAL_SPI_Receive+0x114>
 8012d8a:	e031      	b.n	8012df0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	689b      	ldr	r3, [r3, #8]
 8012d92:	f003 0301 	and.w	r3, r3, #1
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d113      	bne.n	8012dc2 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	68da      	ldr	r2, [r3, #12]
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012da4:	b292      	uxth	r2, r2
 8012da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dac:	1c9a      	adds	r2, r3, #2
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	3b01      	subs	r3, #1
 8012dba:	b29a      	uxth	r2, r3
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012dc0:	e011      	b.n	8012de6 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012dc2:	f7f3 fc33 	bl	800662c <HAL_GetTick>
 8012dc6:	4602      	mov	r2, r0
 8012dc8:	693b      	ldr	r3, [r7, #16]
 8012dca:	1ad3      	subs	r3, r2, r3
 8012dcc:	683a      	ldr	r2, [r7, #0]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d803      	bhi.n	8012dda <HAL_SPI_Receive+0x1cc>
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dd8:	d102      	bne.n	8012de0 <HAL_SPI_Receive+0x1d2>
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d102      	bne.n	8012de6 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8012de0:	2303      	movs	r3, #3
 8012de2:	75fb      	strb	r3, [r7, #23]
          goto error;
 8012de4:	e017      	b.n	8012e16 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012dea:	b29b      	uxth	r3, r3
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d1cd      	bne.n	8012d8c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8012df0:	693a      	ldr	r2, [r7, #16]
 8012df2:	6839      	ldr	r1, [r7, #0]
 8012df4:	68f8      	ldr	r0, [r7, #12]
 8012df6:	f001 fdb9 	bl	801496c <SPI_EndRxTransaction>
 8012dfa:	4603      	mov	r3, r0
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d002      	beq.n	8012e06 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	2220      	movs	r2, #32
 8012e04:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d002      	beq.n	8012e14 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	75fb      	strb	r3, [r7, #23]
 8012e12:	e000      	b.n	8012e16 <HAL_SPI_Receive+0x208>
  }

error :
 8012e14:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	2201      	movs	r2, #1
 8012e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	2200      	movs	r2, #0
 8012e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	3718      	adds	r7, #24
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	bd80      	pop	{r7, pc}

08012e30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b08c      	sub	sp, #48	; 0x30
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	60b9      	str	r1, [r7, #8]
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8012e3e:	2301      	movs	r3, #1
 8012e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012e42:	2300      	movs	r3, #0
 8012e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012e4e:	2b01      	cmp	r3, #1
 8012e50:	d101      	bne.n	8012e56 <HAL_SPI_TransmitReceive+0x26>
 8012e52:	2302      	movs	r3, #2
 8012e54:	e18a      	b.n	801316c <HAL_SPI_TransmitReceive+0x33c>
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	2201      	movs	r2, #1
 8012e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8012e5e:	f7f3 fbe5 	bl	800662c <HAL_GetTick>
 8012e62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012e74:	887b      	ldrh	r3, [r7, #2]
 8012e76:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d00f      	beq.n	8012ea0 <HAL_SPI_TransmitReceive+0x70>
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012e86:	d107      	bne.n	8012e98 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	689b      	ldr	r3, [r3, #8]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d103      	bne.n	8012e98 <HAL_SPI_TransmitReceive+0x68>
 8012e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012e94:	2b04      	cmp	r3, #4
 8012e96:	d003      	beq.n	8012ea0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012e98:	2302      	movs	r3, #2
 8012e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012e9e:	e15b      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d005      	beq.n	8012eb2 <HAL_SPI_TransmitReceive+0x82>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d002      	beq.n	8012eb2 <HAL_SPI_TransmitReceive+0x82>
 8012eac:	887b      	ldrh	r3, [r7, #2]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d103      	bne.n	8012eba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012eb8:	e14e      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012ec0:	b2db      	uxtb	r3, r3
 8012ec2:	2b04      	cmp	r3, #4
 8012ec4:	d003      	beq.n	8012ece <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	2205      	movs	r2, #5
 8012eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	687a      	ldr	r2, [r7, #4]
 8012ed8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	887a      	ldrh	r2, [r7, #2]
 8012ede:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	887a      	ldrh	r2, [r7, #2]
 8012ee4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	68ba      	ldr	r2, [r7, #8]
 8012eea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	887a      	ldrh	r2, [r7, #2]
 8012ef0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	887a      	ldrh	r2, [r7, #2]
 8012ef6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2200      	movs	r2, #0
 8012efc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2200      	movs	r2, #0
 8012f02:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f0e:	2b40      	cmp	r3, #64	; 0x40
 8012f10:	d007      	beq.n	8012f22 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012f20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f2a:	d178      	bne.n	801301e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d002      	beq.n	8012f3a <HAL_SPI_TransmitReceive+0x10a>
 8012f34:	8b7b      	ldrh	r3, [r7, #26]
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d166      	bne.n	8013008 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f3e:	881a      	ldrh	r2, [r3, #0]
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f4a:	1c9a      	adds	r2, r3, #2
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	3b01      	subs	r3, #1
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012f5e:	e053      	b.n	8013008 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	689b      	ldr	r3, [r3, #8]
 8012f66:	f003 0302 	and.w	r3, r3, #2
 8012f6a:	2b02      	cmp	r3, #2
 8012f6c:	d11b      	bne.n	8012fa6 <HAL_SPI_TransmitReceive+0x176>
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d016      	beq.n	8012fa6 <HAL_SPI_TransmitReceive+0x176>
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d113      	bne.n	8012fa6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f82:	881a      	ldrh	r2, [r3, #0]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f8e:	1c9a      	adds	r2, r3, #2
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012f98:	b29b      	uxth	r3, r3
 8012f9a:	3b01      	subs	r3, #1
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	689b      	ldr	r3, [r3, #8]
 8012fac:	f003 0301 	and.w	r3, r3, #1
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d119      	bne.n	8012fe8 <HAL_SPI_TransmitReceive+0x1b8>
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fb8:	b29b      	uxth	r3, r3
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d014      	beq.n	8012fe8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	68da      	ldr	r2, [r3, #12]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fc8:	b292      	uxth	r2, r2
 8012fca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fd0:	1c9a      	adds	r2, r3, #2
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8012fe8:	f7f3 fb20 	bl	800662c <HAL_GetTick>
 8012fec:	4602      	mov	r2, r0
 8012fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff0:	1ad3      	subs	r3, r2, r3
 8012ff2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	d807      	bhi.n	8013008 <HAL_SPI_TransmitReceive+0x1d8>
 8012ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ffe:	d003      	beq.n	8013008 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013000:	2303      	movs	r3, #3
 8013002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013006:	e0a7      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801300c:	b29b      	uxth	r3, r3
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1a6      	bne.n	8012f60 <HAL_SPI_TransmitReceive+0x130>
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013016:	b29b      	uxth	r3, r3
 8013018:	2b00      	cmp	r3, #0
 801301a:	d1a1      	bne.n	8012f60 <HAL_SPI_TransmitReceive+0x130>
 801301c:	e07c      	b.n	8013118 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	685b      	ldr	r3, [r3, #4]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d002      	beq.n	801302c <HAL_SPI_TransmitReceive+0x1fc>
 8013026:	8b7b      	ldrh	r3, [r7, #26]
 8013028:	2b01      	cmp	r3, #1
 801302a:	d16b      	bne.n	8013104 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	330c      	adds	r3, #12
 8013036:	7812      	ldrb	r2, [r2, #0]
 8013038:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013048:	b29b      	uxth	r3, r3
 801304a:	3b01      	subs	r3, #1
 801304c:	b29a      	uxth	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013052:	e057      	b.n	8013104 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	f003 0302 	and.w	r3, r3, #2
 801305e:	2b02      	cmp	r3, #2
 8013060:	d11c      	bne.n	801309c <HAL_SPI_TransmitReceive+0x26c>
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013066:	b29b      	uxth	r3, r3
 8013068:	2b00      	cmp	r3, #0
 801306a:	d017      	beq.n	801309c <HAL_SPI_TransmitReceive+0x26c>
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	2b01      	cmp	r3, #1
 8013070:	d114      	bne.n	801309c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	330c      	adds	r3, #12
 801307c:	7812      	ldrb	r2, [r2, #0]
 801307e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013084:	1c5a      	adds	r2, r3, #1
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801308e:	b29b      	uxth	r3, r3
 8013090:	3b01      	subs	r3, #1
 8013092:	b29a      	uxth	r2, r3
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013098:	2300      	movs	r3, #0
 801309a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	f003 0301 	and.w	r3, r3, #1
 80130a6:	2b01      	cmp	r3, #1
 80130a8:	d119      	bne.n	80130de <HAL_SPI_TransmitReceive+0x2ae>
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d014      	beq.n	80130de <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	68da      	ldr	r2, [r3, #12]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130be:	b2d2      	uxtb	r2, r2
 80130c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130c6:	1c5a      	adds	r2, r3, #1
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80130d0:	b29b      	uxth	r3, r3
 80130d2:	3b01      	subs	r3, #1
 80130d4:	b29a      	uxth	r2, r3
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80130da:	2301      	movs	r3, #1
 80130dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80130de:	f7f3 faa5 	bl	800662c <HAL_GetTick>
 80130e2:	4602      	mov	r2, r0
 80130e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e6:	1ad3      	subs	r3, r2, r3
 80130e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d803      	bhi.n	80130f6 <HAL_SPI_TransmitReceive+0x2c6>
 80130ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130f4:	d102      	bne.n	80130fc <HAL_SPI_TransmitReceive+0x2cc>
 80130f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d103      	bne.n	8013104 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80130fc:	2303      	movs	r3, #3
 80130fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013102:	e029      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013108:	b29b      	uxth	r3, r3
 801310a:	2b00      	cmp	r3, #0
 801310c:	d1a2      	bne.n	8013054 <HAL_SPI_TransmitReceive+0x224>
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013112:	b29b      	uxth	r3, r3
 8013114:	2b00      	cmp	r3, #0
 8013116:	d19d      	bne.n	8013054 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801311a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801311c:	68f8      	ldr	r0, [r7, #12]
 801311e:	f001 fc8a 	bl	8014a36 <SPI_EndRxTxTransaction>
 8013122:	4603      	mov	r3, r0
 8013124:	2b00      	cmp	r3, #0
 8013126:	d006      	beq.n	8013136 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013128:	2301      	movs	r3, #1
 801312a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2220      	movs	r2, #32
 8013132:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013134:	e010      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	689b      	ldr	r3, [r3, #8]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d10b      	bne.n	8013156 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801313e:	2300      	movs	r3, #0
 8013140:	617b      	str	r3, [r7, #20]
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	617b      	str	r3, [r7, #20]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	617b      	str	r3, [r7, #20]
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	e000      	b.n	8013158 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013156:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2201      	movs	r2, #1
 801315c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2200      	movs	r2, #0
 8013164:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801316c:	4618      	mov	r0, r3
 801316e:	3730      	adds	r7, #48	; 0x30
 8013170:	46bd      	mov	sp, r7
 8013172:	bd80      	pop	{r7, pc}

08013174 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013174:	b480      	push	{r7}
 8013176:	b087      	sub	sp, #28
 8013178:	af00      	add	r7, sp, #0
 801317a:	60f8      	str	r0, [r7, #12]
 801317c:	60b9      	str	r1, [r7, #8]
 801317e:	4613      	mov	r3, r2
 8013180:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013182:	2300      	movs	r3, #0
 8013184:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801318c:	2b01      	cmp	r3, #1
 801318e:	d101      	bne.n	8013194 <HAL_SPI_Transmit_IT+0x20>
 8013190:	2302      	movs	r3, #2
 8013192:	e06f      	b.n	8013274 <HAL_SPI_Transmit_IT+0x100>
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2201      	movs	r2, #1
 8013198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d002      	beq.n	80131a8 <HAL_SPI_Transmit_IT+0x34>
 80131a2:	88fb      	ldrh	r3, [r7, #6]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d102      	bne.n	80131ae <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80131a8:	2301      	movs	r3, #1
 80131aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80131ac:	e05d      	b.n	801326a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80131b4:	b2db      	uxtb	r3, r3
 80131b6:	2b01      	cmp	r3, #1
 80131b8:	d002      	beq.n	80131c0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80131ba:	2302      	movs	r3, #2
 80131bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80131be:	e054      	b.n	801326a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2203      	movs	r2, #3
 80131c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	2200      	movs	r2, #0
 80131cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	68ba      	ldr	r2, [r7, #8]
 80131d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	88fa      	ldrh	r2, [r7, #6]
 80131d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	88fa      	ldrh	r2, [r7, #6]
 80131de:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	2200      	movs	r2, #0
 80131e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	2200      	movs	r2, #0
 80131ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2200      	movs	r2, #0
 80131f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	2200      	movs	r2, #0
 80131f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d003      	beq.n	8013208 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	4a1f      	ldr	r2, [pc, #124]	; (8013280 <HAL_SPI_Transmit_IT+0x10c>)
 8013204:	645a      	str	r2, [r3, #68]	; 0x44
 8013206:	e002      	b.n	801320e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	4a1e      	ldr	r2, [pc, #120]	; (8013284 <HAL_SPI_Transmit_IT+0x110>)
 801320c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013216:	d10f      	bne.n	8013238 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	681a      	ldr	r2, [r3, #0]
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013226:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	681a      	ldr	r2, [r3, #0]
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013236:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	685a      	ldr	r2, [r3, #4]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8013246:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013252:	2b40      	cmp	r3, #64	; 0x40
 8013254:	d008      	beq.n	8013268 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013264:	601a      	str	r2, [r3, #0]
 8013266:	e000      	b.n	801326a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8013268:	bf00      	nop
  __HAL_UNLOCK(hspi);
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	2200      	movs	r2, #0
 801326e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013272:	7dfb      	ldrb	r3, [r7, #23]
}
 8013274:	4618      	mov	r0, r3
 8013276:	371c      	adds	r7, #28
 8013278:	46bd      	mov	sp, r7
 801327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327e:	4770      	bx	lr
 8013280:	08014819 	.word	0x08014819
 8013284:	080147d3 	.word	0x080147d3

08013288 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b086      	sub	sp, #24
 801328c:	af00      	add	r7, sp, #0
 801328e:	60f8      	str	r0, [r7, #12]
 8013290:	60b9      	str	r1, [r7, #8]
 8013292:	4613      	mov	r3, r2
 8013294:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013296:	2300      	movs	r3, #0
 8013298:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	689b      	ldr	r3, [r3, #8]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d110      	bne.n	80132c4 <HAL_SPI_Receive_IT+0x3c>
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80132aa:	d10b      	bne.n	80132c4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80132ac:	68fb      	ldr	r3, [r7, #12]
 80132ae:	2204      	movs	r2, #4
 80132b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80132b4:	88fb      	ldrh	r3, [r7, #6]
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	68b9      	ldr	r1, [r7, #8]
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f000 f882 	bl	80133c4 <HAL_SPI_TransmitReceive_IT>
 80132c0:	4603      	mov	r3, r0
 80132c2:	e076      	b.n	80133b2 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d101      	bne.n	80132d2 <HAL_SPI_Receive_IT+0x4a>
 80132ce:	2302      	movs	r3, #2
 80132d0:	e06f      	b.n	80133b2 <HAL_SPI_Receive_IT+0x12a>
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	2201      	movs	r2, #1
 80132d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80132e0:	b2db      	uxtb	r3, r3
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d002      	beq.n	80132ec <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80132e6:	2302      	movs	r3, #2
 80132e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80132ea:	e05d      	b.n	80133a8 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <HAL_SPI_Receive_IT+0x70>
 80132f2:	88fb      	ldrh	r3, [r7, #6]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d102      	bne.n	80132fe <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80132f8:	2301      	movs	r3, #1
 80132fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80132fc:	e054      	b.n	80133a8 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2204      	movs	r2, #4
 8013302:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	2200      	movs	r2, #0
 801330a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	88fa      	ldrh	r2, [r7, #6]
 8013316:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	88fa      	ldrh	r2, [r7, #6]
 801331c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	2200      	movs	r2, #0
 8013322:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	2200      	movs	r2, #0
 8013328:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2200      	movs	r2, #0
 801332e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	2200      	movs	r2, #0
 8013334:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	68db      	ldr	r3, [r3, #12]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d003      	beq.n	8013346 <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	4a1e      	ldr	r2, [pc, #120]	; (80133bc <HAL_SPI_Receive_IT+0x134>)
 8013342:	641a      	str	r2, [r3, #64]	; 0x40
 8013344:	e002      	b.n	801334c <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	4a1d      	ldr	r2, [pc, #116]	; (80133c0 <HAL_SPI_Receive_IT+0x138>)
 801334a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013354:	d10f      	bne.n	8013376 <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013364:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8013374:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	685a      	ldr	r2, [r3, #4]
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8013384:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013390:	2b40      	cmp	r3, #64	; 0x40
 8013392:	d008      	beq.n	80133a6 <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80133a2:	601a      	str	r2, [r3, #0]
 80133a4:	e000      	b.n	80133a8 <HAL_SPI_Receive_IT+0x120>
  }

error :
 80133a6:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	2200      	movs	r2, #0
 80133ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3718      	adds	r7, #24
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
 80133ba:	bf00      	nop
 80133bc:	0801478d 	.word	0x0801478d
 80133c0:	08014743 	.word	0x08014743

080133c4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80133c4:	b480      	push	{r7}
 80133c6:	b087      	sub	sp, #28
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60f8      	str	r0, [r7, #12]
 80133cc:	60b9      	str	r1, [r7, #8]
 80133ce:	607a      	str	r2, [r7, #4]
 80133d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80133d2:	2300      	movs	r3, #0
 80133d4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80133dc:	2b01      	cmp	r3, #1
 80133de:	d101      	bne.n	80133e4 <HAL_SPI_TransmitReceive_IT+0x20>
 80133e0:	2302      	movs	r3, #2
 80133e2:	e075      	b.n	80134d0 <HAL_SPI_TransmitReceive_IT+0x10c>
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2201      	movs	r2, #1
 80133e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80133f2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80133fa:	7dbb      	ldrb	r3, [r7, #22]
 80133fc:	2b01      	cmp	r3, #1
 80133fe:	d00d      	beq.n	801341c <HAL_SPI_TransmitReceive_IT+0x58>
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013406:	d106      	bne.n	8013416 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	689b      	ldr	r3, [r3, #8]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d102      	bne.n	8013416 <HAL_SPI_TransmitReceive_IT+0x52>
 8013410:	7dbb      	ldrb	r3, [r7, #22]
 8013412:	2b04      	cmp	r3, #4
 8013414:	d002      	beq.n	801341c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8013416:	2302      	movs	r3, #2
 8013418:	75fb      	strb	r3, [r7, #23]
    goto error;
 801341a:	e054      	b.n	80134c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d005      	beq.n	801342e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d002      	beq.n	801342e <HAL_SPI_TransmitReceive_IT+0x6a>
 8013428:	887b      	ldrh	r3, [r7, #2]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d102      	bne.n	8013434 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 801342e:	2301      	movs	r3, #1
 8013430:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013432:	e048      	b.n	80134c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b04      	cmp	r3, #4
 801343e:	d003      	beq.n	8013448 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2205      	movs	r2, #5
 8013444:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2200      	movs	r2, #0
 801344c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	68ba      	ldr	r2, [r7, #8]
 8013452:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	887a      	ldrh	r2, [r7, #2]
 8013458:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	887a      	ldrh	r2, [r7, #2]
 801345e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	887a      	ldrh	r2, [r7, #2]
 801346a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	887a      	ldrh	r2, [r7, #2]
 8013470:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d006      	beq.n	8013488 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	4a17      	ldr	r2, [pc, #92]	; (80134dc <HAL_SPI_TransmitReceive_IT+0x118>)
 801347e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	4a17      	ldr	r2, [pc, #92]	; (80134e0 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8013484:	645a      	str	r2, [r3, #68]	; 0x44
 8013486:	e005      	b.n	8013494 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	4a16      	ldr	r2, [pc, #88]	; (80134e4 <HAL_SPI_TransmitReceive_IT+0x120>)
 801348c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	4a15      	ldr	r2, [pc, #84]	; (80134e8 <HAL_SPI_TransmitReceive_IT+0x124>)
 8013492:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	685a      	ldr	r2, [r3, #4]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80134a2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134ae:	2b40      	cmp	r3, #64	; 0x40
 80134b0:	d008      	beq.n	80134c4 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	681a      	ldr	r2, [r3, #0]
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80134c0:	601a      	str	r2, [r3, #0]
 80134c2:	e000      	b.n	80134c6 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 80134c4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2200      	movs	r2, #0
 80134ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80134ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80134d0:	4618      	mov	r0, r3
 80134d2:	371c      	adds	r7, #28
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	08014685 	.word	0x08014685
 80134e0:	080146e5 	.word	0x080146e5
 80134e4:	080145c1 	.word	0x080145c1
 80134e8:	08014625 	.word	0x08014625

080134ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b086      	sub	sp, #24
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	60f8      	str	r0, [r7, #12]
 80134f4:	60b9      	str	r1, [r7, #8]
 80134f6:	4613      	mov	r3, r2
 80134f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80134fa:	2300      	movs	r3, #0
 80134fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013504:	2b01      	cmp	r3, #1
 8013506:	d101      	bne.n	801350c <HAL_SPI_Transmit_DMA+0x20>
 8013508:	2302      	movs	r3, #2
 801350a:	e09b      	b.n	8013644 <HAL_SPI_Transmit_DMA+0x158>
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	2201      	movs	r2, #1
 8013510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801351a:	b2db      	uxtb	r3, r3
 801351c:	2b01      	cmp	r3, #1
 801351e:	d002      	beq.n	8013526 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8013520:	2302      	movs	r3, #2
 8013522:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013524:	e089      	b.n	801363a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d002      	beq.n	8013532 <HAL_SPI_Transmit_DMA+0x46>
 801352c:	88fb      	ldrh	r3, [r7, #6]
 801352e:	2b00      	cmp	r3, #0
 8013530:	d102      	bne.n	8013538 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8013532:	2301      	movs	r3, #1
 8013534:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013536:	e080      	b.n	801363a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	2203      	movs	r2, #3
 801353c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2200      	movs	r2, #0
 8013544:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	68ba      	ldr	r2, [r7, #8]
 801354a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	88fa      	ldrh	r2, [r7, #6]
 8013550:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	88fa      	ldrh	r2, [r7, #6]
 8013556:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	2200      	movs	r2, #0
 8013562:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2200      	movs	r2, #0
 8013568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	2200      	movs	r2, #0
 801356e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	2200      	movs	r2, #0
 8013574:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	689b      	ldr	r3, [r3, #8]
 801357a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801357e:	d10f      	bne.n	80135a0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801358e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	681b      	ldr	r3, [r3, #0]
 8013594:	681a      	ldr	r2, [r3, #0]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801359e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135a4:	4a29      	ldr	r2, [pc, #164]	; (801364c <HAL_SPI_Transmit_DMA+0x160>)
 80135a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135ac:	4a28      	ldr	r2, [pc, #160]	; (8013650 <HAL_SPI_Transmit_DMA+0x164>)
 80135ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135b4:	4a27      	ldr	r2, [pc, #156]	; (8013654 <HAL_SPI_Transmit_DMA+0x168>)
 80135b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80135bc:	2200      	movs	r2, #0
 80135be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135c8:	4619      	mov	r1, r3
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	330c      	adds	r3, #12
 80135d0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135d6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80135d8:	f7f4 fa91 	bl	8007afe <HAL_DMA_Start_IT>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00c      	beq.n	80135fc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135e6:	f043 0210 	orr.w	r2, r3, #16
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80135ee:	2301      	movs	r3, #1
 80135f0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2201      	movs	r2, #1
 80135f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80135fa:	e01e      	b.n	801363a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013606:	2b40      	cmp	r3, #64	; 0x40
 8013608:	d007      	beq.n	801361a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	681a      	ldr	r2, [r3, #0]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013618:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	685a      	ldr	r2, [r3, #4]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	f042 0220 	orr.w	r2, r2, #32
 8013628:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	685a      	ldr	r2, [r3, #4]
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	f042 0202 	orr.w	r2, r2, #2
 8013638:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2200      	movs	r2, #0
 801363e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013642:	7dfb      	ldrb	r3, [r7, #23]
}
 8013644:	4618      	mov	r0, r3
 8013646:	3718      	adds	r7, #24
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	08014371 	.word	0x08014371
 8013650:	08014191 	.word	0x08014191
 8013654:	080143c5 	.word	0x080143c5

08013658 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8013658:	b580      	push	{r7, lr}
 801365a:	b086      	sub	sp, #24
 801365c:	af00      	add	r7, sp, #0
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	4613      	mov	r3, r2
 8013664:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013666:	2300      	movs	r3, #0
 8013668:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	689b      	ldr	r3, [r3, #8]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d110      	bne.n	8013694 <HAL_SPI_Receive_DMA+0x3c>
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	685b      	ldr	r3, [r3, #4]
 8013676:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801367a:	d10b      	bne.n	8013694 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	2204      	movs	r2, #4
 8013680:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8013684:	88fb      	ldrh	r3, [r7, #6]
 8013686:	68ba      	ldr	r2, [r7, #8]
 8013688:	68b9      	ldr	r1, [r7, #8]
 801368a:	68f8      	ldr	r0, [r7, #12]
 801368c:	f000 f8ac 	bl	80137e8 <HAL_SPI_TransmitReceive_DMA>
 8013690:	4603      	mov	r3, r0
 8013692:	e09f      	b.n	80137d4 <HAL_SPI_Receive_DMA+0x17c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801369a:	2b01      	cmp	r3, #1
 801369c:	d101      	bne.n	80136a2 <HAL_SPI_Receive_DMA+0x4a>
 801369e:	2302      	movs	r3, #2
 80136a0:	e098      	b.n	80137d4 <HAL_SPI_Receive_DMA+0x17c>
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	2201      	movs	r2, #1
 80136a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	2b01      	cmp	r3, #1
 80136b4:	d002      	beq.n	80136bc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80136b6:	2302      	movs	r3, #2
 80136b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80136ba:	e086      	b.n	80137ca <HAL_SPI_Receive_DMA+0x172>
  }

  if ((pData == NULL) || (Size == 0U))
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d002      	beq.n	80136c8 <HAL_SPI_Receive_DMA+0x70>
 80136c2:	88fb      	ldrh	r3, [r7, #6]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d102      	bne.n	80136ce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80136c8:	2301      	movs	r3, #1
 80136ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80136cc:	e07d      	b.n	80137ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	2204      	movs	r2, #4
 80136d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2200      	movs	r2, #0
 80136da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	68ba      	ldr	r2, [r7, #8]
 80136e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	88fa      	ldrh	r2, [r7, #6]
 80136e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	88fa      	ldrh	r2, [r7, #6]
 80136ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	2200      	movs	r2, #0
 80136f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2200      	movs	r2, #0
 80136fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2200      	movs	r2, #0
 8013704:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	689b      	ldr	r3, [r3, #8]
 801370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801370e:	d10f      	bne.n	8013730 <HAL_SPI_Receive_DMA+0xd8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	681a      	ldr	r2, [r3, #0]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801371e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	681a      	ldr	r2, [r3, #0]
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801372e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013734:	4a29      	ldr	r2, [pc, #164]	; (80137dc <HAL_SPI_Receive_DMA+0x184>)
 8013736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801373c:	4a28      	ldr	r2, [pc, #160]	; (80137e0 <HAL_SPI_Receive_DMA+0x188>)
 801373e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013744:	4a27      	ldr	r2, [pc, #156]	; (80137e4 <HAL_SPI_Receive_DMA+0x18c>)
 8013746:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801374c:	2200      	movs	r2, #0
 801374e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	330c      	adds	r3, #12
 801375a:	4619      	mov	r1, r3
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013760:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013766:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8013768:	f7f4 f9c9 	bl	8007afe <HAL_DMA_Start_IT>
 801376c:	4603      	mov	r3, r0
 801376e:	2b00      	cmp	r3, #0
 8013770:	d00c      	beq.n	801378c <HAL_SPI_Receive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013776:	f043 0210 	orr.w	r2, r3, #16
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801377e:	2301      	movs	r3, #1
 8013780:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	2201      	movs	r2, #1
 8013786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801378a:	e01e      	b.n	80137ca <HAL_SPI_Receive_DMA+0x172>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013796:	2b40      	cmp	r3, #64	; 0x40
 8013798:	d007      	beq.n	80137aa <HAL_SPI_Receive_DMA+0x152>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137a8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	685a      	ldr	r2, [r3, #4]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	f042 0220 	orr.w	r2, r2, #32
 80137b8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	685a      	ldr	r2, [r3, #4]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	f042 0201 	orr.w	r2, r2, #1
 80137c8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	2200      	movs	r2, #0
 80137ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80137d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3718      	adds	r7, #24
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}
 80137dc:	0801438d 	.word	0x0801438d
 80137e0:	08014239 	.word	0x08014239
 80137e4:	080143c5 	.word	0x080143c5

080137e8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b086      	sub	sp, #24
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
 80137f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80137f6:	2300      	movs	r3, #0
 80137f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013800:	2b01      	cmp	r3, #1
 8013802:	d101      	bne.n	8013808 <HAL_SPI_TransmitReceive_DMA+0x20>
 8013804:	2302      	movs	r3, #2
 8013806:	e0e3      	b.n	80139d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	2201      	movs	r2, #1
 801380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013816:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 801381e:	7dbb      	ldrb	r3, [r7, #22]
 8013820:	2b01      	cmp	r3, #1
 8013822:	d00d      	beq.n	8013840 <HAL_SPI_TransmitReceive_DMA+0x58>
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801382a:	d106      	bne.n	801383a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d102      	bne.n	801383a <HAL_SPI_TransmitReceive_DMA+0x52>
 8013834:	7dbb      	ldrb	r3, [r7, #22]
 8013836:	2b04      	cmp	r3, #4
 8013838:	d002      	beq.n	8013840 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 801383a:	2302      	movs	r3, #2
 801383c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801383e:	e0c2      	b.n	80139c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013840:	68bb      	ldr	r3, [r7, #8]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d005      	beq.n	8013852 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d002      	beq.n	8013852 <HAL_SPI_TransmitReceive_DMA+0x6a>
 801384c:	887b      	ldrh	r3, [r7, #2]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d102      	bne.n	8013858 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8013852:	2301      	movs	r3, #1
 8013854:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013856:	e0b6      	b.n	80139c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801385e:	b2db      	uxtb	r3, r3
 8013860:	2b04      	cmp	r3, #4
 8013862:	d003      	beq.n	801386c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	2205      	movs	r2, #5
 8013868:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	2200      	movs	r2, #0
 8013870:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	887a      	ldrh	r2, [r7, #2]
 801387c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	887a      	ldrh	r2, [r7, #2]
 8013882:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	887a      	ldrh	r2, [r7, #2]
 801388e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	887a      	ldrh	r2, [r7, #2]
 8013894:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2200      	movs	r2, #0
 801389a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	2200      	movs	r2, #0
 80138a0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	2b04      	cmp	r3, #4
 80138ac:	d108      	bne.n	80138c0 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138b2:	4a49      	ldr	r2, [pc, #292]	; (80139d8 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 80138b4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138ba:	4a48      	ldr	r2, [pc, #288]	; (80139dc <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 80138bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80138be:	e007      	b.n	80138d0 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138c4:	4a46      	ldr	r2, [pc, #280]	; (80139e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 80138c6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138cc:	4a45      	ldr	r2, [pc, #276]	; (80139e4 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80138ce:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138d4:	4a44      	ldr	r2, [pc, #272]	; (80139e8 <HAL_SPI_TransmitReceive_DMA+0x200>)
 80138d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138dc:	2200      	movs	r2, #0
 80138de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	330c      	adds	r3, #12
 80138ea:	4619      	mov	r1, r3
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80138f0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80138f6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80138f8:	f7f4 f901 	bl	8007afe <HAL_DMA_Start_IT>
 80138fc:	4603      	mov	r3, r0
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d00c      	beq.n	801391c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013906:	f043 0210 	orr.w	r2, r3, #16
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801390e:	2301      	movs	r3, #1
 8013910:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2201      	movs	r2, #1
 8013916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 801391a:	e054      	b.n	80139c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	685a      	ldr	r2, [r3, #4]
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	f042 0201 	orr.w	r2, r2, #1
 801392a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013930:	2200      	movs	r2, #0
 8013932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013938:	2200      	movs	r2, #0
 801393a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013940:	2200      	movs	r2, #0
 8013942:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013948:	2200      	movs	r2, #0
 801394a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013954:	4619      	mov	r1, r3
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	330c      	adds	r3, #12
 801395c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013962:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8013964:	f7f4 f8cb 	bl	8007afe <HAL_DMA_Start_IT>
 8013968:	4603      	mov	r3, r0
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00c      	beq.n	8013988 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013972:	f043 0210 	orr.w	r2, r3, #16
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801397a:	2301      	movs	r3, #1
 801397c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2201      	movs	r2, #1
 8013982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8013986:	e01e      	b.n	80139c6 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013992:	2b40      	cmp	r3, #64	; 0x40
 8013994:	d007      	beq.n	80139a6 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139a4:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	685a      	ldr	r2, [r3, #4]
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f042 0220 	orr.w	r2, r2, #32
 80139b4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	685a      	ldr	r2, [r3, #4]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f042 0202 	orr.w	r2, r2, #2
 80139c4:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80139ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	3718      	adds	r7, #24
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	0801438d 	.word	0x0801438d
 80139dc:	08014239 	.word	0x08014239
 80139e0:	080143a9 	.word	0x080143a9
 80139e4:	080142e1 	.word	0x080142e1
 80139e8:	080143c5 	.word	0x080143c5

080139ec <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b088      	sub	sp, #32
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80139f4:	2300      	movs	r3, #0
 80139f6:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80139f8:	4b6e      	ldr	r3, [pc, #440]	; (8013bb4 <HAL_SPI_Abort+0x1c8>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	4a6e      	ldr	r2, [pc, #440]	; (8013bb8 <HAL_SPI_Abort+0x1cc>)
 80139fe:	fba2 2303 	umull	r2, r3, r2, r3
 8013a02:	0a5b      	lsrs	r3, r3, #9
 8013a04:	2264      	movs	r2, #100	; 0x64
 8013a06:	fb02 f303 	mul.w	r3, r2, r3
 8013a0a:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	685a      	ldr	r2, [r3, #4]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	f022 0220 	bic.w	r2, r2, #32
 8013a1e:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a2a:	2b80      	cmp	r3, #128	; 0x80
 8013a2c:	d117      	bne.n	8013a5e <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	4a62      	ldr	r2, [pc, #392]	; (8013bbc <HAL_SPI_Abort+0x1d0>)
 8013a32:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013a34:	69bb      	ldr	r3, [r7, #24]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d106      	bne.n	8013a48 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013a46:	e008      	b.n	8013a5a <HAL_SPI_Abort+0x6e>
      }
      count--;
 8013a48:	69bb      	ldr	r3, [r7, #24]
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b07      	cmp	r3, #7
 8013a58:	d1ec      	bne.n	8013a34 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8013a5a:	697b      	ldr	r3, [r7, #20]
 8013a5c:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013a68:	2b40      	cmp	r3, #64	; 0x40
 8013a6a:	d117      	bne.n	8013a9c <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	4a54      	ldr	r2, [pc, #336]	; (8013bc0 <HAL_SPI_Abort+0x1d4>)
 8013a70:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013a72:	69bb      	ldr	r3, [r7, #24]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d106      	bne.n	8013a86 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013a84:	e008      	b.n	8013a98 <HAL_SPI_Abort+0xac>
      }
      count--;
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013a92:	b2db      	uxtb	r3, r3
 8013a94:	2b07      	cmp	r3, #7
 8013a96:	d1ec      	bne.n	8013a72 <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	f003 0302 	and.w	r3, r3, #2
 8013aa6:	2b02      	cmp	r3, #2
 8013aa8:	d12e      	bne.n	8013b08 <HAL_SPI_Abort+0x11c>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d02a      	beq.n	8013b08 <HAL_SPI_Abort+0x11c>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7f4 f875 	bl	8007bae <HAL_DMA_Abort>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d002      	beq.n	8013ad0 <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	2240      	movs	r2, #64	; 0x40
 8013ace:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	685a      	ldr	r2, [r3, #4]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	681b      	ldr	r3, [r3, #0]
 8013ada:	f022 0202 	bic.w	r2, r2, #2
 8013ade:	605a      	str	r2, [r3, #4]

      /* Wait until TXE flag is set */
      do
      {
        if (count == 0U)
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d106      	bne.n	8013af4 <HAL_SPI_Abort+0x108>
        {
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013aea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8013af2:	e009      	b.n	8013b08 <HAL_SPI_Abort+0x11c>
        }
        count--;
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	3b01      	subs	r3, #1
 8013af8:	61bb      	str	r3, [r7, #24]
      } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	f003 0302 	and.w	r3, r3, #2
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d0eb      	beq.n	8013ae0 <HAL_SPI_Abort+0xf4>
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	f003 0301 	and.w	r3, r3, #1
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d122      	bne.n	8013b5c <HAL_SPI_Abort+0x170>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d01e      	beq.n	8013b5c <HAL_SPI_Abort+0x170>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b22:	2200      	movs	r2, #0
 8013b24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	f7f4 f83f 	bl	8007bae <HAL_DMA_Abort>
 8013b30:	4603      	mov	r3, r0
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d002      	beq.n	8013b3c <HAL_SPI_Abort+0x150>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2240      	movs	r2, #64	; 0x40
 8013b3a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	681a      	ldr	r2, [r3, #0]
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013b4a:	601a      	str	r2, [r3, #0]

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	685a      	ldr	r2, [r3, #4]
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	f022 0201 	bic.w	r2, r2, #1
 8013b5a:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2200      	movs	r2, #0
 8013b60:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	2200      	movs	r2, #0
 8013b66:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013b6c:	2b40      	cmp	r3, #64	; 0x40
 8013b6e:	d102      	bne.n	8013b76 <HAL_SPI_Abort+0x18a>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 8013b70:	2301      	movs	r3, #1
 8013b72:	77fb      	strb	r3, [r7, #31]
 8013b74:	e002      	b.n	8013b7c <HAL_SPI_Abort+0x190>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	60fb      	str	r3, [r7, #12]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	68db      	ldr	r3, [r3, #12]
 8013b86:	60fb      	str	r3, [r7, #12]
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	689b      	ldr	r3, [r3, #8]
 8013b8e:	60fb      	str	r3, [r7, #12]
 8013b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013b92:	2300      	movs	r3, #0
 8013b94:	613b      	str	r3, [r7, #16]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	613b      	str	r3, [r7, #16]
 8013b9e:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return errorcode;
 8013ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3720      	adds	r7, #32
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20000058 	.word	0x20000058
 8013bb8:	057619f1 	.word	0x057619f1
 8013bbc:	08014d71 	.word	0x08014d71
 8013bc0:	08014ce1 	.word	0x08014ce1

08013bc4 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b088      	sub	sp, #32
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 8013bcc:	2300      	movs	r3, #0
 8013bce:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 8013bd0:	2301      	movs	r3, #1
 8013bd2:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8013bd4:	4b72      	ldr	r3, [pc, #456]	; (8013da0 <HAL_SPI_Abort_IT+0x1dc>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	4a72      	ldr	r2, [pc, #456]	; (8013da4 <HAL_SPI_Abort_IT+0x1e0>)
 8013bda:	fba2 2303 	umull	r2, r3, r2, r3
 8013bde:	0a5b      	lsrs	r3, r3, #9
 8013be0:	2264      	movs	r2, #100	; 0x64
 8013be2:	fb02 f303 	mul.w	r3, r2, r3
 8013be6:	613b      	str	r3, [r7, #16]
  count = resetcount;
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	685a      	ldr	r2, [r3, #4]
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	f022 0220 	bic.w	r2, r2, #32
 8013bfa:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	685b      	ldr	r3, [r3, #4]
 8013c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c06:	2b80      	cmp	r3, #128	; 0x80
 8013c08:	d117      	bne.n	8013c3a <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4a66      	ldr	r2, [pc, #408]	; (8013da8 <HAL_SPI_Abort_IT+0x1e4>)
 8013c0e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d106      	bne.n	8013c24 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c22:	e008      	b.n	8013c36 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	3b01      	subs	r3, #1
 8013c28:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c30:	b2db      	uxtb	r3, r3
 8013c32:	2b07      	cmp	r3, #7
 8013c34:	d1ec      	bne.n	8013c10 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c44:	2b40      	cmp	r3, #64	; 0x40
 8013c46:	d117      	bne.n	8013c78 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a58      	ldr	r2, [pc, #352]	; (8013dac <HAL_SPI_Abort_IT+0x1e8>)
 8013c4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d106      	bne.n	8013c62 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013c58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8013c60:	e008      	b.n	8013c74 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	3b01      	subs	r3, #1
 8013c66:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013c6e:	b2db      	uxtb	r3, r3
 8013c70:	2b07      	cmp	r3, #7
 8013c72:	d1ec      	bne.n	8013c4e <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d00f      	beq.n	8013ca0 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	685b      	ldr	r3, [r3, #4]
 8013c86:	f003 0302 	and.w	r3, r3, #2
 8013c8a:	2b02      	cmp	r3, #2
 8013c8c:	d104      	bne.n	8013c98 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c92:	4a47      	ldr	r2, [pc, #284]	; (8013db0 <HAL_SPI_Abort_IT+0x1ec>)
 8013c94:	651a      	str	r2, [r3, #80]	; 0x50
 8013c96:	e003      	b.n	8013ca0 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d00f      	beq.n	8013cc8 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	685b      	ldr	r3, [r3, #4]
 8013cae:	f003 0301 	and.w	r3, r3, #1
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d104      	bne.n	8013cc0 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cba:	4a3e      	ldr	r2, [pc, #248]	; (8013db4 <HAL_SPI_Abort_IT+0x1f0>)
 8013cbc:	651a      	str	r2, [r3, #80]	; 0x50
 8013cbe:	e003      	b.n	8013cc8 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013cc4:	2200      	movs	r2, #0
 8013cc6:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	f003 0302 	and.w	r3, r3, #2
 8013cd2:	2b02      	cmp	r3, #2
 8013cd4:	d115      	bne.n	8013d02 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d011      	beq.n	8013d02 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	f7f3 ffd3 	bl	8007c8e <HAL_DMA_Abort_IT>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d007      	beq.n	8013cfe <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	2240      	movs	r2, #64	; 0x40
 8013cfa:	655a      	str	r2, [r3, #84]	; 0x54
 8013cfc:	e001      	b.n	8013d02 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	f003 0301 	and.w	r3, r3, #1
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	d115      	bne.n	8013d3c <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d011      	beq.n	8013d3c <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f3 ffb6 	bl	8007c8e <HAL_DMA_Abort_IT>
 8013d22:	4603      	mov	r3, r0
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d007      	beq.n	8013d38 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d2c:	2200      	movs	r2, #0
 8013d2e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2240      	movs	r2, #64	; 0x40
 8013d34:	655a      	str	r2, [r3, #84]	; 0x54
 8013d36:	e001      	b.n	8013d3c <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 8013d38:	2300      	movs	r3, #0
 8013d3a:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 8013d3c:	69bb      	ldr	r3, [r7, #24]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d128      	bne.n	8013d94 <HAL_SPI_Abort_IT+0x1d0>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	2200      	movs	r2, #0
 8013d46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxXferCount = 0U;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2200      	movs	r2, #0
 8013d4c:	86da      	strh	r2, [r3, #54]	; 0x36

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d52:	2b40      	cmp	r3, #64	; 0x40
 8013d54:	d102      	bne.n	8013d5c <HAL_SPI_Abort_IT+0x198>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 8013d56:	2301      	movs	r3, #1
 8013d58:	77fb      	strb	r3, [r7, #31]
 8013d5a:	e002      	b.n	8013d62 <HAL_SPI_Abort_IT+0x19e>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013d62:	2300      	movs	r3, #0
 8013d64:	60bb      	str	r3, [r7, #8]
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	68db      	ldr	r3, [r3, #12]
 8013d6c:	60bb      	str	r3, [r7, #8]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	689b      	ldr	r3, [r3, #8]
 8013d74:	60bb      	str	r3, [r7, #8]
 8013d76:	68bb      	ldr	r3, [r7, #8]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013d78:	2300      	movs	r3, #0
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	689b      	ldr	r3, [r3, #8]
 8013d82:	60fb      	str	r3, [r7, #12]
 8013d84:	68fb      	ldr	r3, [r7, #12]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2201      	movs	r2, #1
 8013d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 f9da 	bl	8014148 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 8013d94:	7ffb      	ldrb	r3, [r7, #31]
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3720      	adds	r7, #32
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	20000058 	.word	0x20000058
 8013da4:	057619f1 	.word	0x057619f1
 8013da8:	08014d71 	.word	0x08014d71
 8013dac:	08014ce1 	.word	0x08014ce1
 8013db0:	0801442d 	.word	0x0801442d
 8013db4:	08014501 	.word	0x08014501

08013db8 <HAL_SPI_DMAPause>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAPause(SPI_HandleTypeDef *hspi)
{
 8013db8:	b480      	push	{r7}
 8013dba:	b083      	sub	sp, #12
 8013dbc:	af00      	add	r7, sp, #0
 8013dbe:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d101      	bne.n	8013dce <HAL_SPI_DMAPause+0x16>
 8013dca:	2302      	movs	r3, #2
 8013dcc:	e010      	b.n	8013df0 <HAL_SPI_DMAPause+0x38>
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2201      	movs	r2, #1
 8013dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	f022 0203 	bic.w	r2, r2, #3
 8013de4:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2200      	movs	r2, #0
 8013dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013dee:	2300      	movs	r3, #0
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	370c      	adds	r7, #12
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <HAL_SPI_DMAResume>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAResume(SPI_HandleTypeDef *hspi)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b083      	sub	sp, #12
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hspi);
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013e0a:	2b01      	cmp	r3, #1
 8013e0c:	d101      	bne.n	8013e12 <HAL_SPI_DMAResume+0x16>
 8013e0e:	2302      	movs	r3, #2
 8013e10:	e010      	b.n	8013e34 <HAL_SPI_DMAResume+0x38>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2201      	movs	r2, #1
 8013e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Enable the SPI DMA Tx & Rx requests */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	685a      	ldr	r2, [r3, #4]
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	f042 0203 	orr.w	r2, r2, #3
 8013e28:	605a      	str	r2, [r3, #4]

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8013e32:	2300      	movs	r3, #0
}
 8013e34:	4618      	mov	r0, r3
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr

08013e40 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d00f      	beq.n	8013e74 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013e58:	4618      	mov	r0, r3
 8013e5a:	f7f3 fea8 	bl	8007bae <HAL_DMA_Abort>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d007      	beq.n	8013e74 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e68:	f043 0210 	orr.w	r2, r3, #16
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8013e70:	2301      	movs	r3, #1
 8013e72:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00f      	beq.n	8013e9c <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e80:	4618      	mov	r0, r3
 8013e82:	f7f3 fe94 	bl	8007bae <HAL_DMA_Abort>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d007      	beq.n	8013e9c <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e90:	f043 0210 	orr.w	r2, r3, #16
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 8013e98:	2301      	movs	r3, #1
 8013e9a:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	f022 0203 	bic.w	r2, r2, #3
 8013eaa:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 8013eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}

08013ebe <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8013ebe:	b580      	push	{r7, lr}
 8013ec0:	b088      	sub	sp, #32
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	685b      	ldr	r3, [r3, #4]
 8013ecc:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	689b      	ldr	r3, [r3, #8]
 8013ed4:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013ed6:	69bb      	ldr	r3, [r7, #24]
 8013ed8:	099b      	lsrs	r3, r3, #6
 8013eda:	f003 0301 	and.w	r3, r3, #1
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d10f      	bne.n	8013f02 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013ee2:	69bb      	ldr	r3, [r7, #24]
 8013ee4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d00a      	beq.n	8013f02 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	099b      	lsrs	r3, r3, #6
 8013ef0:	f003 0301 	and.w	r3, r3, #1
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d004      	beq.n	8013f02 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	4798      	blx	r3
    return;
 8013f00:	e0d7      	b.n	80140b2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8013f02:	69bb      	ldr	r3, [r7, #24]
 8013f04:	085b      	lsrs	r3, r3, #1
 8013f06:	f003 0301 	and.w	r3, r3, #1
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d00a      	beq.n	8013f24 <HAL_SPI_IRQHandler+0x66>
 8013f0e:	69fb      	ldr	r3, [r7, #28]
 8013f10:	09db      	lsrs	r3, r3, #7
 8013f12:	f003 0301 	and.w	r3, r3, #1
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d004      	beq.n	8013f24 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f1e:	6878      	ldr	r0, [r7, #4]
 8013f20:	4798      	blx	r3
    return;
 8013f22:	e0c6      	b.n	80140b2 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013f24:	69bb      	ldr	r3, [r7, #24]
 8013f26:	095b      	lsrs	r3, r3, #5
 8013f28:	f003 0301 	and.w	r3, r3, #1
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d10c      	bne.n	8013f4a <HAL_SPI_IRQHandler+0x8c>
 8013f30:	69bb      	ldr	r3, [r7, #24]
 8013f32:	099b      	lsrs	r3, r3, #6
 8013f34:	f003 0301 	and.w	r3, r3, #1
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d106      	bne.n	8013f4a <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8013f3c:	69bb      	ldr	r3, [r7, #24]
 8013f3e:	0a1b      	lsrs	r3, r3, #8
 8013f40:	f003 0301 	and.w	r3, r3, #1
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	f000 80b4 	beq.w	80140b2 <HAL_SPI_IRQHandler+0x1f4>
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	095b      	lsrs	r3, r3, #5
 8013f4e:	f003 0301 	and.w	r3, r3, #1
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	f000 80ad 	beq.w	80140b2 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8013f58:	69bb      	ldr	r3, [r7, #24]
 8013f5a:	099b      	lsrs	r3, r3, #6
 8013f5c:	f003 0301 	and.w	r3, r3, #1
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d023      	beq.n	8013fac <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013f6a:	b2db      	uxtb	r3, r3
 8013f6c:	2b03      	cmp	r3, #3
 8013f6e:	d011      	beq.n	8013f94 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f74:	f043 0204 	orr.w	r2, r3, #4
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f7c:	2300      	movs	r3, #0
 8013f7e:	60bb      	str	r3, [r7, #8]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	68db      	ldr	r3, [r3, #12]
 8013f86:	60bb      	str	r3, [r7, #8]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	689b      	ldr	r3, [r3, #8]
 8013f8e:	60bb      	str	r3, [r7, #8]
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	e00b      	b.n	8013fac <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013f94:	2300      	movs	r3, #0
 8013f96:	60fb      	str	r3, [r7, #12]
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	60fb      	str	r3, [r7, #12]
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	689b      	ldr	r3, [r3, #8]
 8013fa6:	60fb      	str	r3, [r7, #12]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
        return;
 8013faa:	e082      	b.n	80140b2 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	095b      	lsrs	r3, r3, #5
 8013fb0:	f003 0301 	and.w	r3, r3, #1
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d014      	beq.n	8013fe2 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fbc:	f043 0201 	orr.w	r2, r3, #1
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	613b      	str	r3, [r7, #16]
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	689b      	ldr	r3, [r3, #8]
 8013fce:	613b      	str	r3, [r7, #16]
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	681a      	ldr	r2, [r3, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013fde:	601a      	str	r2, [r3, #0]
 8013fe0:	693b      	ldr	r3, [r7, #16]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8013fe2:	69bb      	ldr	r3, [r7, #24]
 8013fe4:	0a1b      	lsrs	r3, r3, #8
 8013fe6:	f003 0301 	and.w	r3, r3, #1
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d00c      	beq.n	8014008 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ff2:	f043 0208 	orr.w	r2, r3, #8
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	617b      	str	r3, [r7, #20]
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	689b      	ldr	r3, [r3, #8]
 8014004:	617b      	str	r3, [r7, #20]
 8014006:	697b      	ldr	r3, [r7, #20]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801400c:	2b00      	cmp	r3, #0
 801400e:	d04f      	beq.n	80140b0 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	685a      	ldr	r2, [r3, #4]
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801401e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	2201      	movs	r2, #1
 8014024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8014028:	69fb      	ldr	r3, [r7, #28]
 801402a:	f003 0302 	and.w	r3, r3, #2
 801402e:	2b00      	cmp	r3, #0
 8014030:	d104      	bne.n	801403c <HAL_SPI_IRQHandler+0x17e>
 8014032:	69fb      	ldr	r3, [r7, #28]
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d034      	beq.n	80140a6 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	685a      	ldr	r2, [r3, #4]
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	f022 0203 	bic.w	r2, r2, #3
 801404a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014050:	2b00      	cmp	r3, #0
 8014052:	d011      	beq.n	8014078 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014058:	4a17      	ldr	r2, [pc, #92]	; (80140b8 <HAL_SPI_IRQHandler+0x1fa>)
 801405a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014060:	4618      	mov	r0, r3
 8014062:	f7f3 fe14 	bl	8007c8e <HAL_DMA_Abort_IT>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d005      	beq.n	8014078 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801407c:	2b00      	cmp	r3, #0
 801407e:	d016      	beq.n	80140ae <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014084:	4a0c      	ldr	r2, [pc, #48]	; (80140b8 <HAL_SPI_IRQHandler+0x1fa>)
 8014086:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801408c:	4618      	mov	r0, r3
 801408e:	f7f3 fdfe 	bl	8007c8e <HAL_DMA_Abort_IT>
 8014092:	4603      	mov	r3, r0
 8014094:	2b00      	cmp	r3, #0
 8014096:	d00a      	beq.n	80140ae <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801409c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80140a4:	e003      	b.n	80140ae <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80140a6:	6878      	ldr	r0, [r7, #4]
 80140a8:	f000 f844 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80140ac:	e000      	b.n	80140b0 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80140ae:	bf00      	nop
    return;
 80140b0:	bf00      	nop
  }
}
 80140b2:	3720      	adds	r7, #32
 80140b4:	46bd      	mov	sp, r7
 80140b6:	bd80      	pop	{r7, pc}
 80140b8:	08014405 	.word	0x08014405

080140bc <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80140bc:	b480      	push	{r7}
 80140be:	b083      	sub	sp, #12
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80140c4:	bf00      	nop
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr

080140d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b083      	sub	sp, #12
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80140d8:	bf00      	nop
 80140da:	370c      	adds	r7, #12
 80140dc:	46bd      	mov	sp, r7
 80140de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e2:	4770      	bx	lr

080140e4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80140e4:	b480      	push	{r7}
 80140e6:	b083      	sub	sp, #12
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80140ec:	bf00      	nop
 80140ee:	370c      	adds	r7, #12
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b083      	sub	sp, #12
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8014100:	bf00      	nop
 8014102:	370c      	adds	r7, #12
 8014104:	46bd      	mov	sp, r7
 8014106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410a:	4770      	bx	lr

0801410c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 801410c:	b480      	push	{r7}
 801410e:	b083      	sub	sp, #12
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8014114:	bf00      	nop
 8014116:	370c      	adds	r7, #12
 8014118:	46bd      	mov	sp, r7
 801411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411e:	4770      	bx	lr

08014120 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014120:	b480      	push	{r7}
 8014122:	b083      	sub	sp, #12
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8014128:	bf00      	nop
 801412a:	370c      	adds	r7, #12
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr

08014134 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8014134:	b480      	push	{r7}
 8014136:	b083      	sub	sp, #12
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801413c:	bf00      	nop
 801413e:	370c      	adds	r7, #12
 8014140:	46bd      	mov	sp, r7
 8014142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014146:	4770      	bx	lr

08014148 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8014148:	b480      	push	{r7}
 801414a:	b083      	sub	sp, #12
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8014150:	bf00      	nop
 8014152:	370c      	adds	r7, #12
 8014154:	46bd      	mov	sp, r7
 8014156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415a:	4770      	bx	lr

0801415c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 801415c:	b480      	push	{r7}
 801415e:	b083      	sub	sp, #12
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801416a:	b2db      	uxtb	r3, r3
}
 801416c:	4618      	mov	r0, r3
 801416e:	370c      	adds	r7, #12
 8014170:	46bd      	mov	sp, r7
 8014172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014176:	4770      	bx	lr

08014178 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8014178:	b480      	push	{r7}
 801417a:	b083      	sub	sp, #12
 801417c:	af00      	add	r7, sp, #0
 801417e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8014184:	4618      	mov	r0, r3
 8014186:	370c      	adds	r7, #12
 8014188:	46bd      	mov	sp, r7
 801418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801418e:	4770      	bx	lr

08014190 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b086      	sub	sp, #24
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801419c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801419e:	f7f2 fa45 	bl	800662c <HAL_GetTick>
 80141a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80141ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80141b2:	d03b      	beq.n	801422c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	685a      	ldr	r2, [r3, #4]
 80141ba:	697b      	ldr	r3, [r7, #20]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	f022 0220 	bic.w	r2, r2, #32
 80141c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	685a      	ldr	r2, [r3, #4]
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	f022 0202 	bic.w	r2, r2, #2
 80141d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80141d4:	693a      	ldr	r2, [r7, #16]
 80141d6:	2164      	movs	r1, #100	; 0x64
 80141d8:	6978      	ldr	r0, [r7, #20]
 80141da:	f000 fc2c 	bl	8014a36 <SPI_EndRxTxTransaction>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d005      	beq.n	80141f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80141e4:	697b      	ldr	r3, [r7, #20]
 80141e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141e8:	f043 0220 	orr.w	r2, r3, #32
 80141ec:	697b      	ldr	r3, [r7, #20]
 80141ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d10a      	bne.n	801420e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80141f8:	2300      	movs	r3, #0
 80141fa:	60fb      	str	r3, [r7, #12]
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	60fb      	str	r3, [r7, #12]
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	689b      	ldr	r3, [r3, #8]
 801420a:	60fb      	str	r3, [r7, #12]
 801420c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	2200      	movs	r2, #0
 8014212:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	2201      	movs	r2, #1
 8014218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014220:	2b00      	cmp	r3, #0
 8014222:	d003      	beq.n	801422c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8014224:	6978      	ldr	r0, [r7, #20]
 8014226:	f7ff ff85 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801422a:	e002      	b.n	8014232 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 801422c:	6978      	ldr	r0, [r7, #20]
 801422e:	f7ff ff45 	bl	80140bc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014232:	3718      	adds	r7, #24
 8014234:	46bd      	mov	sp, r7
 8014236:	bd80      	pop	{r7, pc}

08014238 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b084      	sub	sp, #16
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014244:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014246:	f7f2 f9f1 	bl	800662c <HAL_GetTick>
 801424a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801425a:	d03b      	beq.n	80142d4 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	685a      	ldr	r2, [r3, #4]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	f022 0220 	bic.w	r2, r2, #32
 801426a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	689b      	ldr	r3, [r3, #8]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d10d      	bne.n	8014290 <SPI_DMAReceiveCplt+0x58>
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	685b      	ldr	r3, [r3, #4]
 8014278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801427c:	d108      	bne.n	8014290 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	685a      	ldr	r2, [r3, #4]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f022 0203 	bic.w	r2, r2, #3
 801428c:	605a      	str	r2, [r3, #4]
 801428e:	e007      	b.n	80142a0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	685a      	ldr	r2, [r3, #4]
 8014296:	68fb      	ldr	r3, [r7, #12]
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f022 0201 	bic.w	r2, r2, #1
 801429e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80142a0:	68ba      	ldr	r2, [r7, #8]
 80142a2:	2164      	movs	r1, #100	; 0x64
 80142a4:	68f8      	ldr	r0, [r7, #12]
 80142a6:	f000 fb61 	bl	801496c <SPI_EndRxTransaction>
 80142aa:	4603      	mov	r3, r0
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d002      	beq.n	80142b6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	2220      	movs	r2, #32
 80142b4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	2200      	movs	r2, #0
 80142ba:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2201      	movs	r2, #1
 80142c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d003      	beq.n	80142d4 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f7ff ff31 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80142d2:	e002      	b.n	80142da <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80142d4:	68f8      	ldr	r0, [r7, #12]
 80142d6:	f7ff fefb 	bl	80140d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80142ec:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80142ee:	f7f2 f99d 	bl	800662c <HAL_GetTick>
 80142f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80142fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014302:	d02f      	beq.n	8014364 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	685a      	ldr	r2, [r3, #4]
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	f022 0220 	bic.w	r2, r2, #32
 8014312:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014314:	68ba      	ldr	r2, [r7, #8]
 8014316:	2164      	movs	r1, #100	; 0x64
 8014318:	68f8      	ldr	r0, [r7, #12]
 801431a:	f000 fb8c 	bl	8014a36 <SPI_EndRxTxTransaction>
 801431e:	4603      	mov	r3, r0
 8014320:	2b00      	cmp	r3, #0
 8014322:	d005      	beq.n	8014330 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014328:	f043 0220 	orr.w	r2, r3, #32
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	685a      	ldr	r2, [r3, #4]
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	f022 0203 	bic.w	r2, r2, #3
 801433e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	2200      	movs	r2, #0
 8014344:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	2200      	movs	r2, #0
 801434a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2201      	movs	r2, #1
 8014350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014358:	2b00      	cmp	r3, #0
 801435a:	d003      	beq.n	8014364 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801435c:	68f8      	ldr	r0, [r7, #12]
 801435e:	f7ff fee9 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8014362:	e002      	b.n	801436a <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8014364:	68f8      	ldr	r0, [r7, #12]
 8014366:	f7ff febd 	bl	80140e4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801436a:	3710      	adds	r7, #16
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801437c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f7ff feba 	bl	80140f8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014384:	bf00      	nop
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bd80      	pop	{r7, pc}

0801438c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801438c:	b580      	push	{r7, lr}
 801438e:	b084      	sub	sp, #16
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014398:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 801439a:	68f8      	ldr	r0, [r7, #12]
 801439c:	f7ff feb6 	bl	801410c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80143a0:	bf00      	nop
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143b4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80143b6:	68f8      	ldr	r0, [r7, #12]
 80143b8:	f7ff feb2 	bl	8014120 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80143bc:	bf00      	nop
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bd80      	pop	{r7, pc}

080143c4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b084      	sub	sp, #16
 80143c8:	af00      	add	r7, sp, #0
 80143ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143d0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	685a      	ldr	r2, [r3, #4]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f022 0203 	bic.w	r2, r2, #3
 80143e0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80143e6:	f043 0210 	orr.w	r2, r3, #16
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	2201      	movs	r2, #1
 80143f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80143f6:	68f8      	ldr	r0, [r7, #12]
 80143f8:	f7ff fe9c 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80143fc:	bf00      	nop
 80143fe:	3710      	adds	r7, #16
 8014400:	46bd      	mov	sp, r7
 8014402:	bd80      	pop	{r7, pc}

08014404 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b084      	sub	sp, #16
 8014408:	af00      	add	r7, sp, #0
 801440a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014410:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	2200      	movs	r2, #0
 8014416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	2200      	movs	r2, #0
 801441c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801441e:	68f8      	ldr	r0, [r7, #12]
 8014420:	f7ff fe88 	bl	8014134 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8014424:	bf00      	nop
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 801442c:	b580      	push	{r7, lr}
 801442e:	b086      	sub	sp, #24
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014438:	617b      	str	r3, [r7, #20]
  __IO uint32_t count;

  hspi->hdmatx->XferAbortCallback = NULL;
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801443e:	2200      	movs	r2, #0
 8014440:	651a      	str	r2, [r3, #80]	; 0x50
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014442:	4b2d      	ldr	r3, [pc, #180]	; (80144f8 <SPI_DMATxAbortCallback+0xcc>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	4a2d      	ldr	r2, [pc, #180]	; (80144fc <SPI_DMATxAbortCallback+0xd0>)
 8014448:	fba2 2303 	umull	r2, r3, r2, r3
 801444c:	0a5b      	lsrs	r3, r3, #9
 801444e:	2264      	movs	r2, #100	; 0x64
 8014450:	fb02 f303 	mul.w	r3, r2, r3
 8014454:	613b      	str	r3, [r7, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8014456:	697b      	ldr	r3, [r7, #20]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	685a      	ldr	r2, [r3, #4]
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	f022 0202 	bic.w	r2, r2, #2
 8014464:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014466:	693b      	ldr	r3, [r7, #16]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <SPI_DMATxAbortCallback+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014470:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014474:	697b      	ldr	r3, [r7, #20]
 8014476:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014478:	e009      	b.n	801448e <SPI_DMATxAbortCallback+0x62>
    }
    count--;
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	3b01      	subs	r3, #1
 801447e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	689b      	ldr	r3, [r3, #8]
 8014486:	f003 0302 	and.w	r3, r3, #2
 801448a:	2b00      	cmp	r3, #0
 801448c:	d0eb      	beq.n	8014466 <SPI_DMATxAbortCallback+0x3a>

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014492:	2b00      	cmp	r3, #0
 8014494:	d004      	beq.n	80144a0 <SPI_DMATxAbortCallback+0x74>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801449c:	2b00      	cmp	r3, #0
 801449e:	d126      	bne.n	80144ee <SPI_DMATxAbortCallback+0xc2>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	2200      	movs	r2, #0
 80144a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	2200      	movs	r2, #0
 80144aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 80144ac:	697b      	ldr	r3, [r7, #20]
 80144ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80144b0:	2b40      	cmp	r3, #64	; 0x40
 80144b2:	d002      	beq.n	80144ba <SPI_DMATxAbortCallback+0x8e>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80144b4:	697b      	ldr	r3, [r7, #20]
 80144b6:	2200      	movs	r2, #0
 80144b8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80144ba:	2300      	movs	r3, #0
 80144bc:	60bb      	str	r3, [r7, #8]
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	68db      	ldr	r3, [r3, #12]
 80144c4:	60bb      	str	r3, [r7, #8]
 80144c6:	697b      	ldr	r3, [r7, #20]
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	689b      	ldr	r3, [r3, #8]
 80144cc:	60bb      	str	r3, [r7, #8]
 80144ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80144d0:	2300      	movs	r3, #0
 80144d2:	60fb      	str	r3, [r7, #12]
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	689b      	ldr	r3, [r3, #8]
 80144da:	60fb      	str	r3, [r7, #12]
 80144dc:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	2201      	movs	r2, #1
 80144e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80144e6:	6978      	ldr	r0, [r7, #20]
 80144e8:	f7ff fe2e 	bl	8014148 <HAL_SPI_AbortCpltCallback>
 80144ec:	e000      	b.n	80144f0 <SPI_DMATxAbortCallback+0xc4>
      return;
 80144ee:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80144f0:	3718      	adds	r7, #24
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}
 80144f6:	bf00      	nop
 80144f8:	20000058 	.word	0x20000058
 80144fc:	057619f1 	.word	0x057619f1

08014500 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b086      	sub	sp, #24
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801450c:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	681a      	ldr	r2, [r3, #0]
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801451c:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014522:	2200      	movs	r2, #0
 8014524:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	685a      	ldr	r2, [r3, #4]
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	f022 0201 	bic.w	r2, r2, #1
 8014534:	605a      	str	r2, [r3, #4]

  /* Check Busy flag */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014536:	f7f2 f879 	bl	800662c <HAL_GetTick>
 801453a:	4603      	mov	r3, r0
 801453c:	461a      	mov	r2, r3
 801453e:	2164      	movs	r1, #100	; 0x64
 8014540:	6978      	ldr	r0, [r7, #20]
 8014542:	f000 fa78 	bl	8014a36 <SPI_EndRxTxTransaction>
 8014546:	4603      	mov	r3, r0
 8014548:	2b00      	cmp	r3, #0
 801454a:	d005      	beq.n	8014558 <SPI_DMARxAbortCallback+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014550:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014554:	697b      	ldr	r3, [r7, #20]
 8014556:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 8014558:	697b      	ldr	r3, [r7, #20]
 801455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801455c:	2b00      	cmp	r3, #0
 801455e:	d004      	beq.n	801456a <SPI_DMARxAbortCallback+0x6a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014566:	2b00      	cmp	r3, #0
 8014568:	d126      	bne.n	80145b8 <SPI_DMARxAbortCallback+0xb8>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 801456a:	697b      	ldr	r3, [r7, #20]
 801456c:	2200      	movs	r2, #0
 801456e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	2200      	movs	r2, #0
 8014574:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801457a:	2b40      	cmp	r3, #64	; 0x40
 801457c:	d002      	beq.n	8014584 <SPI_DMARxAbortCallback+0x84>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2200      	movs	r2, #0
 8014582:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014584:	2300      	movs	r3, #0
 8014586:	60fb      	str	r3, [r7, #12]
 8014588:	697b      	ldr	r3, [r7, #20]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	68db      	ldr	r3, [r3, #12]
 801458e:	60fb      	str	r3, [r7, #12]
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	689b      	ldr	r3, [r3, #8]
 8014596:	60fb      	str	r3, [r7, #12]
 8014598:	68fb      	ldr	r3, [r7, #12]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 801459a:	2300      	movs	r3, #0
 801459c:	613b      	str	r3, [r7, #16]
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	689b      	ldr	r3, [r3, #8]
 80145a4:	613b      	str	r3, [r7, #16]
 80145a6:	693b      	ldr	r3, [r7, #16]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 80145a8:	697b      	ldr	r3, [r7, #20]
 80145aa:	2201      	movs	r2, #1
 80145ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 80145b0:	6978      	ldr	r0, [r7, #20]
 80145b2:	f7ff fdc9 	bl	8014148 <HAL_SPI_AbortCpltCallback>
 80145b6:	e000      	b.n	80145ba <SPI_DMARxAbortCallback+0xba>
      return;
 80145b8:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80145ba:	3718      	adds	r7, #24
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	f103 020c 	add.w	r2, r3, #12
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145d4:	7812      	ldrb	r2, [r2, #0]
 80145d6:	b2d2      	uxtb	r2, r2
 80145d8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80145de:	1c5a      	adds	r2, r3, #1
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145e8:	b29b      	uxth	r3, r3
 80145ea:	3b01      	subs	r3, #1
 80145ec:	b29a      	uxth	r2, r3
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80145f6:	b29b      	uxth	r3, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10f      	bne.n	801461c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	685a      	ldr	r2, [r3, #4]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801460a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014610:	b29b      	uxth	r3, r3
 8014612:	2b00      	cmp	r3, #0
 8014614:	d102      	bne.n	801461c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fa4e 	bl	8014ab8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801461c:	bf00      	nop
 801461e:	3708      	adds	r7, #8
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	330c      	adds	r3, #12
 8014636:	7812      	ldrb	r2, [r2, #0]
 8014638:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801463e:	1c5a      	adds	r2, r3, #1
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014648:	b29b      	uxth	r3, r3
 801464a:	3b01      	subs	r3, #1
 801464c:	b29a      	uxth	r2, r3
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014656:	b29b      	uxth	r3, r3
 8014658:	2b00      	cmp	r3, #0
 801465a:	d10f      	bne.n	801467c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	685a      	ldr	r2, [r3, #4]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801466a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014670:	b29b      	uxth	r3, r3
 8014672:	2b00      	cmp	r3, #0
 8014674:	d102      	bne.n	801467c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 fa1e 	bl	8014ab8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801467c:	bf00      	nop
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	68da      	ldr	r2, [r3, #12]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014696:	b292      	uxth	r2, r2
 8014698:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801469e:	1c9a      	adds	r2, r3, #2
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146a8:	b29b      	uxth	r3, r3
 80146aa:	3b01      	subs	r3, #1
 80146ac:	b29a      	uxth	r2, r3
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80146b6:	b29b      	uxth	r3, r3
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10f      	bne.n	80146dc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	685a      	ldr	r2, [r3, #4]
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80146ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80146d0:	b29b      	uxth	r3, r3
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d102      	bne.n	80146dc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	f000 f9ee 	bl	8014ab8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80146dc:	bf00      	nop
 80146de:	3708      	adds	r7, #8
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}

080146e4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b082      	sub	sp, #8
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146f0:	881a      	ldrh	r2, [r3, #0]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146fc:	1c9a      	adds	r2, r3, #2
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014706:	b29b      	uxth	r3, r3
 8014708:	3b01      	subs	r3, #1
 801470a:	b29a      	uxth	r2, r3
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014714:	b29b      	uxth	r3, r3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d10f      	bne.n	801473a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	685a      	ldr	r2, [r3, #4]
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014728:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801472e:	b29b      	uxth	r3, r3
 8014730:	2b00      	cmp	r3, #0
 8014732:	d102      	bne.n	801473a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f000 f9bf 	bl	8014ab8 <SPI_CloseRxTx_ISR>
    }
  }
}
 801473a:	bf00      	nop
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}

08014742 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014742:	b580      	push	{r7, lr}
 8014744:	b082      	sub	sp, #8
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f103 020c 	add.w	r2, r3, #12
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014756:	7812      	ldrb	r2, [r2, #0]
 8014758:	b2d2      	uxtb	r2, r2
 801475a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014760:	1c5a      	adds	r2, r3, #1
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801476a:	b29b      	uxth	r3, r3
 801476c:	3b01      	subs	r3, #1
 801476e:	b29a      	uxth	r2, r3
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8014778:	b29b      	uxth	r3, r3
 801477a:	2b00      	cmp	r3, #0
 801477c:	d102      	bne.n	8014784 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f000 fa0e 	bl	8014ba0 <SPI_CloseRx_ISR>
  }
}
 8014784:	bf00      	nop
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}

0801478c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	68da      	ldr	r2, [r3, #12]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801479e:	b292      	uxth	r2, r2
 80147a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80147a6:	1c9a      	adds	r2, r3, #2
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	3b01      	subs	r3, #1
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80147be:	b29b      	uxth	r3, r3
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d102      	bne.n	80147ca <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f000 f9eb 	bl	8014ba0 <SPI_CloseRx_ISR>
  }
}
 80147ca:	bf00      	nop
 80147cc:	3708      	adds	r7, #8
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b082      	sub	sp, #8
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	330c      	adds	r3, #12
 80147e4:	7812      	ldrb	r2, [r2, #0]
 80147e6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147ec:	1c5a      	adds	r2, r3, #1
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	3b01      	subs	r3, #1
 80147fa:	b29a      	uxth	r2, r3
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014804:	b29b      	uxth	r3, r3
 8014806:	2b00      	cmp	r3, #0
 8014808:	d102      	bne.n	8014810 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fa07 	bl	8014c1e <SPI_CloseTx_ISR>
  }
}
 8014810:	bf00      	nop
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8014818:	b580      	push	{r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014824:	881a      	ldrh	r2, [r3, #0]
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014830:	1c9a      	adds	r2, r3, #2
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801483a:	b29b      	uxth	r3, r3
 801483c:	3b01      	subs	r3, #1
 801483e:	b29a      	uxth	r2, r3
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8014848:	b29b      	uxth	r3, r3
 801484a:	2b00      	cmp	r3, #0
 801484c:	d102      	bne.n	8014854 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 801484e:	6878      	ldr	r0, [r7, #4]
 8014850:	f000 f9e5 	bl	8014c1e <SPI_CloseTx_ISR>
  }
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}

0801485c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801485c:	b580      	push	{r7, lr}
 801485e:	b088      	sub	sp, #32
 8014860:	af00      	add	r7, sp, #0
 8014862:	60f8      	str	r0, [r7, #12]
 8014864:	60b9      	str	r1, [r7, #8]
 8014866:	603b      	str	r3, [r7, #0]
 8014868:	4613      	mov	r3, r2
 801486a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801486c:	f7f1 fede 	bl	800662c <HAL_GetTick>
 8014870:	4602      	mov	r2, r0
 8014872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014874:	1a9b      	subs	r3, r3, r2
 8014876:	683a      	ldr	r2, [r7, #0]
 8014878:	4413      	add	r3, r2
 801487a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801487c:	f7f1 fed6 	bl	800662c <HAL_GetTick>
 8014880:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8014882:	4b39      	ldr	r3, [pc, #228]	; (8014968 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	015b      	lsls	r3, r3, #5
 8014888:	0d1b      	lsrs	r3, r3, #20
 801488a:	69fa      	ldr	r2, [r7, #28]
 801488c:	fb02 f303 	mul.w	r3, r2, r3
 8014890:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8014892:	e054      	b.n	801493e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801489a:	d050      	beq.n	801493e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801489c:	f7f1 fec6 	bl	800662c <HAL_GetTick>
 80148a0:	4602      	mov	r2, r0
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	1ad3      	subs	r3, r2, r3
 80148a6:	69fa      	ldr	r2, [r7, #28]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d902      	bls.n	80148b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d13d      	bne.n	801492e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	685a      	ldr	r2, [r3, #4]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80148c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80148ca:	d111      	bne.n	80148f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	689b      	ldr	r3, [r3, #8]
 80148d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80148d4:	d004      	beq.n	80148e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	689b      	ldr	r3, [r3, #8]
 80148da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80148de:	d107      	bne.n	80148f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80148ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80148f8:	d10f      	bne.n	801491a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	681a      	ldr	r2, [r3, #0]
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681b      	ldr	r3, [r3, #0]
 8014904:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014908:	601a      	str	r2, [r3, #0]
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	681a      	ldr	r2, [r3, #0]
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014918:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	2201      	movs	r2, #1
 801491e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	2200      	movs	r2, #0
 8014926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801492a:	2303      	movs	r3, #3
 801492c:	e017      	b.n	801495e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d101      	bne.n	8014938 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8014934:	2300      	movs	r3, #0
 8014936:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	3b01      	subs	r3, #1
 801493c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	689a      	ldr	r2, [r3, #8]
 8014944:	68bb      	ldr	r3, [r7, #8]
 8014946:	4013      	ands	r3, r2
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	429a      	cmp	r2, r3
 801494c:	bf0c      	ite	eq
 801494e:	2301      	moveq	r3, #1
 8014950:	2300      	movne	r3, #0
 8014952:	b2db      	uxtb	r3, r3
 8014954:	461a      	mov	r2, r3
 8014956:	79fb      	ldrb	r3, [r7, #7]
 8014958:	429a      	cmp	r2, r3
 801495a:	d19b      	bne.n	8014894 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801495c:	2300      	movs	r3, #0
}
 801495e:	4618      	mov	r0, r3
 8014960:	3720      	adds	r7, #32
 8014962:	46bd      	mov	sp, r7
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	20000058 	.word	0x20000058

0801496c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	b086      	sub	sp, #24
 8014970:	af02      	add	r7, sp, #8
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	60b9      	str	r1, [r7, #8]
 8014976:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014980:	d111      	bne.n	80149a6 <SPI_EndRxTransaction+0x3a>
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	689b      	ldr	r3, [r3, #8]
 8014986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801498a:	d004      	beq.n	8014996 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	689b      	ldr	r3, [r3, #8]
 8014990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014994:	d107      	bne.n	80149a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80149a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	685b      	ldr	r3, [r3, #4]
 80149aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80149ae:	d12a      	bne.n	8014a06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80149b0:	68fb      	ldr	r3, [r7, #12]
 80149b2:	689b      	ldr	r3, [r3, #8]
 80149b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80149b8:	d012      	beq.n	80149e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	2200      	movs	r2, #0
 80149c2:	2180      	movs	r1, #128	; 0x80
 80149c4:	68f8      	ldr	r0, [r7, #12]
 80149c6:	f7ff ff49 	bl	801485c <SPI_WaitFlagStateUntilTimeout>
 80149ca:	4603      	mov	r3, r0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d02d      	beq.n	8014a2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149d4:	f043 0220 	orr.w	r2, r3, #32
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80149dc:	2303      	movs	r3, #3
 80149de:	e026      	b.n	8014a2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	2200      	movs	r2, #0
 80149e8:	2101      	movs	r1, #1
 80149ea:	68f8      	ldr	r0, [r7, #12]
 80149ec:	f7ff ff36 	bl	801485c <SPI_WaitFlagStateUntilTimeout>
 80149f0:	4603      	mov	r3, r0
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d01a      	beq.n	8014a2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149fa:	f043 0220 	orr.w	r2, r3, #32
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8014a02:	2303      	movs	r3, #3
 8014a04:	e013      	b.n	8014a2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	9300      	str	r3, [sp, #0]
 8014a0a:	68bb      	ldr	r3, [r7, #8]
 8014a0c:	2200      	movs	r2, #0
 8014a0e:	2101      	movs	r1, #1
 8014a10:	68f8      	ldr	r0, [r7, #12]
 8014a12:	f7ff ff23 	bl	801485c <SPI_WaitFlagStateUntilTimeout>
 8014a16:	4603      	mov	r3, r0
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d007      	beq.n	8014a2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a20:	f043 0220 	orr.w	r2, r3, #32
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014a28:	2303      	movs	r3, #3
 8014a2a:	e000      	b.n	8014a2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8014a2c:	2300      	movs	r3, #0
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3710      	adds	r7, #16
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}

08014a36 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8014a36:	b580      	push	{r7, lr}
 8014a38:	b088      	sub	sp, #32
 8014a3a:	af02      	add	r7, sp, #8
 8014a3c:	60f8      	str	r0, [r7, #12]
 8014a3e:	60b9      	str	r1, [r7, #8]
 8014a40:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8014a42:	4b1b      	ldr	r3, [pc, #108]	; (8014ab0 <SPI_EndRxTxTransaction+0x7a>)
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	4a1b      	ldr	r2, [pc, #108]	; (8014ab4 <SPI_EndRxTxTransaction+0x7e>)
 8014a48:	fba2 2303 	umull	r2, r3, r2, r3
 8014a4c:	0d5b      	lsrs	r3, r3, #21
 8014a4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a52:	fb02 f303 	mul.w	r3, r2, r3
 8014a56:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8014a60:	d112      	bne.n	8014a88 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	9300      	str	r3, [sp, #0]
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2200      	movs	r2, #0
 8014a6a:	2180      	movs	r1, #128	; 0x80
 8014a6c:	68f8      	ldr	r0, [r7, #12]
 8014a6e:	f7ff fef5 	bl	801485c <SPI_WaitFlagStateUntilTimeout>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d016      	beq.n	8014aa6 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014a78:	68fb      	ldr	r3, [r7, #12]
 8014a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a7c:	f043 0220 	orr.w	r2, r3, #32
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8014a84:	2303      	movs	r3, #3
 8014a86:	e00f      	b.n	8014aa8 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8014a88:	697b      	ldr	r3, [r7, #20]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d00a      	beq.n	8014aa4 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	3b01      	subs	r3, #1
 8014a92:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	689b      	ldr	r3, [r3, #8]
 8014a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a9e:	2b80      	cmp	r3, #128	; 0x80
 8014aa0:	d0f2      	beq.n	8014a88 <SPI_EndRxTxTransaction+0x52>
 8014aa2:	e000      	b.n	8014aa6 <SPI_EndRxTxTransaction+0x70>
        break;
 8014aa4:	bf00      	nop
  }

  return HAL_OK;
 8014aa6:	2300      	movs	r3, #0
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	3718      	adds	r7, #24
 8014aac:	46bd      	mov	sp, r7
 8014aae:	bd80      	pop	{r7, pc}
 8014ab0:	20000058 	.word	0x20000058
 8014ab4:	165e9f81 	.word	0x165e9f81

08014ab8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b086      	sub	sp, #24
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014ac0:	4b35      	ldr	r3, [pc, #212]	; (8014b98 <SPI_CloseRxTx_ISR+0xe0>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
 8014ac4:	4a35      	ldr	r2, [pc, #212]	; (8014b9c <SPI_CloseRxTx_ISR+0xe4>)
 8014ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8014aca:	0a5b      	lsrs	r3, r3, #9
 8014acc:	2264      	movs	r2, #100	; 0x64
 8014ace:	fb02 f303 	mul.w	r3, r2, r3
 8014ad2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014ad4:	f7f1 fdaa 	bl	800662c <HAL_GetTick>
 8014ad8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	685a      	ldr	r2, [r3, #4]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	681b      	ldr	r3, [r3, #0]
 8014ae4:	f022 0220 	bic.w	r2, r2, #32
 8014ae8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014aea:	693b      	ldr	r3, [r7, #16]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d106      	bne.n	8014afe <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014af4:	f043 0220 	orr.w	r2, r3, #32
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014afc:	e009      	b.n	8014b12 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	3b01      	subs	r3, #1
 8014b02:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	689b      	ldr	r3, [r3, #8]
 8014b0a:	f003 0302 	and.w	r3, r3, #2
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d0eb      	beq.n	8014aea <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014b12:	697a      	ldr	r2, [r7, #20]
 8014b14:	2164      	movs	r1, #100	; 0x64
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7ff ff8d 	bl	8014a36 <SPI_EndRxTxTransaction>
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d005      	beq.n	8014b2e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b26:	f043 0220 	orr.w	r2, r3, #32
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	689b      	ldr	r3, [r3, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d10a      	bne.n	8014b4c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014b36:	2300      	movs	r3, #0
 8014b38:	60fb      	str	r3, [r7, #12]
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	60fb      	str	r3, [r7, #12]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	681b      	ldr	r3, [r3, #0]
 8014b46:	689b      	ldr	r3, [r3, #8]
 8014b48:	60fb      	str	r3, [r7, #12]
 8014b4a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d115      	bne.n	8014b80 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8014b5a:	b2db      	uxtb	r3, r3
 8014b5c:	2b04      	cmp	r3, #4
 8014b5e:	d107      	bne.n	8014b70 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	2201      	movs	r2, #1
 8014b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f7ff fab1 	bl	80140d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014b6e:	e00e      	b.n	8014b8e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2201      	movs	r2, #1
 8014b74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f7ff fab3 	bl	80140e4 <HAL_SPI_TxRxCpltCallback>
}
 8014b7e:	e006      	b.n	8014b8e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2201      	movs	r2, #1
 8014b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7ff fad3 	bl	8014134 <HAL_SPI_ErrorCallback>
}
 8014b8e:	bf00      	nop
 8014b90:	3718      	adds	r7, #24
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	20000058 	.word	0x20000058
 8014b9c:	057619f1 	.word	0x057619f1

08014ba0 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ba0:	b580      	push	{r7, lr}
 8014ba2:	b084      	sub	sp, #16
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014bb6:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8014bb8:	f7f1 fd38 	bl	800662c <HAL_GetTick>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	461a      	mov	r2, r3
 8014bc0:	2164      	movs	r1, #100	; 0x64
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7ff fed2 	bl	801496c <SPI_EndRxTransaction>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d005      	beq.n	8014bda <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014bd2:	f043 0220 	orr.w	r2, r3, #32
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	689b      	ldr	r3, [r3, #8]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d10a      	bne.n	8014bf8 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014be2:	2300      	movs	r3, #0
 8014be4:	60fb      	str	r3, [r7, #12]
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	60fb      	str	r3, [r7, #12]
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	689b      	ldr	r3, [r3, #8]
 8014bf4:	60fb      	str	r3, [r7, #12]
 8014bf6:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	2201      	movs	r2, #1
 8014bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d103      	bne.n	8014c10 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f7ff fa61 	bl	80140d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8014c0e:	e002      	b.n	8014c16 <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8014c10:	6878      	ldr	r0, [r7, #4]
 8014c12:	f7ff fa8f 	bl	8014134 <HAL_SPI_ErrorCallback>
}
 8014c16:	bf00      	nop
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}

08014c1e <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014c1e:	b580      	push	{r7, lr}
 8014c20:	b086      	sub	sp, #24
 8014c22:	af00      	add	r7, sp, #0
 8014c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014c26:	4b2c      	ldr	r3, [pc, #176]	; (8014cd8 <SPI_CloseTx_ISR+0xba>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a2c      	ldr	r2, [pc, #176]	; (8014cdc <SPI_CloseTx_ISR+0xbe>)
 8014c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8014c30:	0a5b      	lsrs	r3, r3, #9
 8014c32:	2264      	movs	r2, #100	; 0x64
 8014c34:	fb02 f303 	mul.w	r3, r2, r3
 8014c38:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8014c3a:	f7f1 fcf7 	bl	800662c <HAL_GetTick>
 8014c3e:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014c40:	693b      	ldr	r3, [r7, #16]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d106      	bne.n	8014c54 <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c4a:	f043 0220 	orr.w	r2, r3, #32
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014c52:	e009      	b.n	8014c68 <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	3b01      	subs	r3, #1
 8014c58:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	f003 0302 	and.w	r3, r3, #2
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d0eb      	beq.n	8014c40 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	681b      	ldr	r3, [r3, #0]
 8014c6c:	685a      	ldr	r2, [r3, #4]
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8014c76:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8014c78:	697a      	ldr	r2, [r7, #20]
 8014c7a:	2164      	movs	r1, #100	; 0x64
 8014c7c:	6878      	ldr	r0, [r7, #4]
 8014c7e:	f7ff feda 	bl	8014a36 <SPI_EndRxTxTransaction>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d005      	beq.n	8014c94 <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014c8c:	f043 0220 	orr.w	r2, r3, #32
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	689b      	ldr	r3, [r3, #8]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d10a      	bne.n	8014cb2 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	60fb      	str	r3, [r7, #12]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	68db      	ldr	r3, [r3, #12]
 8014ca6:	60fb      	str	r3, [r7, #12]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	689b      	ldr	r3, [r3, #8]
 8014cae:	60fb      	str	r3, [r7, #12]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	2201      	movs	r2, #1
 8014cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d003      	beq.n	8014cca <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7ff fa36 	bl	8014134 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8014cc8:	e002      	b.n	8014cd0 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f7ff f9f6 	bl	80140bc <HAL_SPI_TxCpltCallback>
}
 8014cd0:	bf00      	nop
 8014cd2:	3718      	adds	r7, #24
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	bd80      	pop	{r7, pc}
 8014cd8:	20000058 	.word	0x20000058
 8014cdc:	057619f1 	.word	0x057619f1

08014ce0 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0U;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8014cec:	4b1e      	ldr	r3, [pc, #120]	; (8014d68 <SPI_AbortRx_ISR+0x88>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	4a1e      	ldr	r2, [pc, #120]	; (8014d6c <SPI_AbortRx_ISR+0x8c>)
 8014cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8014cf6:	0a5b      	lsrs	r3, r3, #9
 8014cf8:	2264      	movs	r2, #100	; 0x64
 8014cfa:	fb02 f303 	mul.w	r3, r2, r3
 8014cfe:	60bb      	str	r3, [r7, #8]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8014d00:	68bb      	ldr	r3, [r7, #8]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d106      	bne.n	8014d14 <SPI_AbortRx_ISR+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014d12:	e009      	b.n	8014d28 <SPI_AbortRx_ISR+0x48>
    }
    count--;
 8014d14:	68bb      	ldr	r3, [r7, #8]
 8014d16:	3b01      	subs	r3, #1
 8014d18:	60bb      	str	r3, [r7, #8]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	689b      	ldr	r3, [r3, #8]
 8014d20:	f003 0302 	and.w	r3, r3, #2
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d0eb      	beq.n	8014d00 <SPI_AbortRx_ISR+0x20>

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d36:	601a      	str	r2, [r3, #0]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE));
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	685a      	ldr	r2, [r3, #4]
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8014d46:	605a      	str	r2, [r3, #4]

  /* Flush Data Register by a blank read */
  tmpreg = READ_REG(hspi->Instance->DR);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	60fb      	str	r3, [r7, #12]
  /* To avoid GCC warning */
  UNUSED(tmpreg);
 8014d50:	68fb      	ldr	r3, [r7, #12]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2207      	movs	r2, #7
 8014d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014d5a:	bf00      	nop
 8014d5c:	3714      	adds	r7, #20
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	20000058 	.word	0x20000058
 8014d6c:	057619f1 	.word	0x057619f1

08014d70 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8014d70:	b480      	push	{r7}
 8014d72:	b083      	sub	sp, #12
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	685a      	ldr	r2, [r3, #4]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8014d86:	605a      	str	r2, [r3, #4]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	681a      	ldr	r2, [r3, #0]
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8014d96:	601a      	str	r2, [r3, #0]

  hspi->State = HAL_SPI_STATE_ABORT;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2207      	movs	r2, #7
 8014d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
}
 8014da0:	bf00      	nop
 8014da2:	370c      	adds	r7, #12
 8014da4:	46bd      	mov	sp, r7
 8014da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014daa:	4770      	bx	lr

08014dac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	60f8      	str	r0, [r7, #12]
 8014db4:	60b9      	str	r1, [r7, #8]
 8014db6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8014db8:	68fb      	ldr	r3, [r7, #12]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d101      	bne.n	8014dc2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8014dbe:	2301      	movs	r3, #1
 8014dc0:	e034      	b.n	8014e2c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8014dc2:	68fb      	ldr	r3, [r7, #12]
 8014dc4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d106      	bne.n	8014ddc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8014dd6:	68f8      	ldr	r0, [r7, #12]
 8014dd8:	f7f1 f804 	bl	8005de4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	681a      	ldr	r2, [r3, #0]
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	3308      	adds	r3, #8
 8014de4:	4619      	mov	r1, r3
 8014de6:	4610      	mov	r0, r2
 8014de8:	f003 f9a0 	bl	801812c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	6818      	ldr	r0, [r3, #0]
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	689b      	ldr	r3, [r3, #8]
 8014df4:	461a      	mov	r2, r3
 8014df6:	68b9      	ldr	r1, [r7, #8]
 8014df8:	f003 fa1e 	bl	8018238 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8014dfc:	68fb      	ldr	r3, [r7, #12]
 8014dfe:	6858      	ldr	r0, [r3, #4]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	689a      	ldr	r2, [r3, #8]
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e08:	6879      	ldr	r1, [r7, #4]
 8014e0a:	f003 fa52 	bl	80182b2 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	68fa      	ldr	r2, [r7, #12]
 8014e14:	6892      	ldr	r2, [r2, #8]
 8014e16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	68fa      	ldr	r2, [r7, #12]
 8014e20:	6892      	ldr	r2, [r2, #8]
 8014e22:	f041 0101 	orr.w	r1, r1, #1
 8014e26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8014e2a:	2300      	movs	r3, #0
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3710      	adds	r7, #16
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bd80      	pop	{r7, pc}

08014e34 <HAL_SRAM_DeInit>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_SRAM_DeInit(SRAM_HandleTypeDef *hsram)
{ 
 8014e34:	b580      	push	{r7, lr}
 8014e36:	b082      	sub	sp, #8
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsram->MspDeInitCallback(hsram);
#else
  /* De-Initialize the low level hardware (MSP) */
  HAL_SRAM_MspDeInit(hsram);
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f7f0 ffff 	bl	8005e40 <HAL_SRAM_MspDeInit>
#endif

  /* Configure the SRAM registers with their reset values */
  FMC_NORSRAM_DeInit(hsram->Instance, hsram->Extended, hsram->Init.NSBank);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6818      	ldr	r0, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	6859      	ldr	r1, [r3, #4]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	689b      	ldr	r3, [r3, #8]
 8014e4e:	461a      	mov	r2, r3
 8014e50:	f003 f9be 	bl	80181d0 <FSMC_NORSRAM_DeInit>

  hsram->State = HAL_SRAM_STATE_RESET;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2200      	movs	r2, #0
 8014e58:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Release Lock */
  __HAL_UNLOCK(hsram);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2200      	movs	r2, #0
 8014e60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3708      	adds	r7, #8
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd80      	pop	{r7, pc}

08014e6e <HAL_SRAM_DMA_XferCpltCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
{
 8014e6e:	b480      	push	{r7}
 8014e70:	b083      	sub	sp, #12
 8014e72:	af00      	add	r7, sp, #0
 8014e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferCpltCallback could be implemented in the user file
   */ 
}
 8014e76:	bf00      	nop
 8014e78:	370c      	adds	r7, #12
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e80:	4770      	bx	lr

08014e82 <HAL_SRAM_DMA_XferErrorCallback>:
  * @param  hdma pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval None
  */
__weak void HAL_SRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
{
 8014e82:	b480      	push	{r7}
 8014e84:	b083      	sub	sp, #12
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdma);
    /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SRAM_DMA_XferErrorCallback could be implemented in the user file
   */ 
}
 8014e8a:	bf00      	nop
 8014e8c:	370c      	adds	r7, #12
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e94:	4770      	bx	lr

08014e96 <HAL_SRAM_Read_8b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pDstBuffer, uint32_t BufferSize)
{
 8014e96:	b480      	push	{r7}
 8014e98:	b087      	sub	sp, #28
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	60f8      	str	r0, [r7, #12]
 8014e9e:	60b9      	str	r1, [r7, #8]
 8014ea0:	607a      	str	r2, [r7, #4]
 8014ea2:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014eae:	2b01      	cmp	r3, #1
 8014eb0:	d101      	bne.n	8014eb6 <HAL_SRAM_Read_8b+0x20>
 8014eb2:	2302      	movs	r3, #2
 8014eb4:	e022      	b.n	8014efc <HAL_SRAM_Read_8b+0x66>
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2202      	movs	r2, #2
 8014ec2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014ec6:	e00d      	b.n	8014ee4 <HAL_SRAM_Read_8b+0x4e>
  {
    *pDstBuffer = *(__IO uint8_t *)pSramAddress;
 8014ec8:	697b      	ldr	r3, [r7, #20]
 8014eca:	781b      	ldrb	r3, [r3, #0]
 8014ecc:	b2da      	uxtb	r2, r3
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	701a      	strb	r2, [r3, #0]
    pDstBuffer++;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	3301      	adds	r3, #1
 8014edc:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014ede:	683b      	ldr	r3, [r7, #0]
 8014ee0:	3b01      	subs	r3, #1
 8014ee2:	603b      	str	r3, [r7, #0]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d1ee      	bne.n	8014ec8 <HAL_SRAM_Read_8b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	2201      	movs	r2, #1
 8014eee:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014efa:	2300      	movs	r3, #0
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	371c      	adds	r7, #28
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <HAL_SRAM_Write_8b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_8b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint8_t *pSrcBuffer, uint32_t BufferSize)
{
 8014f08:	b480      	push	{r7}
 8014f0a:	b087      	sub	sp, #28
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	60f8      	str	r0, [r7, #12]
 8014f10:	60b9      	str	r1, [r7, #8]
 8014f12:	607a      	str	r2, [r7, #4]
 8014f14:	603b      	str	r3, [r7, #0]
  __IO uint8_t * pSramAddress = (uint8_t *)pAddress;
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014f20:	b2db      	uxtb	r3, r3
 8014f22:	2b04      	cmp	r3, #4
 8014f24:	d101      	bne.n	8014f2a <HAL_SRAM_Write_8b+0x22>
  {
    return  HAL_ERROR; 
 8014f26:	2301      	movs	r3, #1
 8014f28:	e028      	b.n	8014f7c <HAL_SRAM_Write_8b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f30:	2b01      	cmp	r3, #1
 8014f32:	d101      	bne.n	8014f38 <HAL_SRAM_Write_8b+0x30>
 8014f34:	2302      	movs	r3, #2
 8014f36:	e021      	b.n	8014f7c <HAL_SRAM_Write_8b+0x74>
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	2201      	movs	r2, #1
 8014f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	2202      	movs	r2, #2
 8014f44:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8014f48:	e00c      	b.n	8014f64 <HAL_SRAM_Write_8b+0x5c>
  {
    *(__IO uint8_t *)pSramAddress = *pSrcBuffer; 
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	781a      	ldrb	r2, [r3, #0]
 8014f4e:	697b      	ldr	r3, [r7, #20]
 8014f50:	701a      	strb	r2, [r3, #0]
    pSrcBuffer++;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	3301      	adds	r3, #1
 8014f56:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 8014f58:	697b      	ldr	r3, [r7, #20]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	603b      	str	r3, [r7, #0]
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d1ef      	bne.n	8014f4a <HAL_SRAM_Write_8b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	2200      	movs	r2, #0
 8014f76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8014f7a:	2300      	movs	r3, #0
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	371c      	adds	r7, #28
 8014f80:	46bd      	mov	sp, r7
 8014f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f86:	4770      	bx	lr

08014f88 <HAL_SRAM_Read_16b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pDstBuffer, uint32_t BufferSize)
{
 8014f88:	b480      	push	{r7}
 8014f8a:	b087      	sub	sp, #28
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	60f8      	str	r0, [r7, #12]
 8014f90:	60b9      	str	r1, [r7, #8]
 8014f92:	607a      	str	r2, [r7, #4]
 8014f94:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d101      	bne.n	8014fa8 <HAL_SRAM_Read_16b+0x20>
 8014fa4:	2302      	movs	r3, #2
 8014fa6:	e022      	b.n	8014fee <HAL_SRAM_Read_16b+0x66>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	2201      	movs	r2, #1
 8014fac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 8014fb8:	e00d      	b.n	8014fd6 <HAL_SRAM_Read_16b+0x4e>
  {
    *pDstBuffer = *(__IO uint16_t *)pSramAddress;
 8014fba:	697b      	ldr	r3, [r7, #20]
 8014fbc:	881b      	ldrh	r3, [r3, #0]
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	801a      	strh	r2, [r3, #0]
    pDstBuffer++;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	3302      	adds	r3, #2
 8014fc8:	607b      	str	r3, [r7, #4]
    pSramAddress++;
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	3302      	adds	r3, #2
 8014fce:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8014fd0:	683b      	ldr	r3, [r7, #0]
 8014fd2:	3b01      	subs	r3, #1
 8014fd4:	603b      	str	r3, [r7, #0]
 8014fd6:	683b      	ldr	r3, [r7, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d1ee      	bne.n	8014fba <HAL_SRAM_Read_16b+0x32>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	2201      	movs	r2, #1
 8014fe0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 8014fec:	2300      	movs	r3, #0
}
 8014fee:	4618      	mov	r0, r3
 8014ff0:	371c      	adds	r7, #28
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff8:	4770      	bx	lr

08014ffa <HAL_SRAM_Write_16b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_16b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint16_t *pSrcBuffer, uint32_t BufferSize)
{
 8014ffa:	b480      	push	{r7}
 8014ffc:	b087      	sub	sp, #28
 8014ffe:	af00      	add	r7, sp, #0
 8015000:	60f8      	str	r0, [r7, #12]
 8015002:	60b9      	str	r1, [r7, #8]
 8015004:	607a      	str	r2, [r7, #4]
 8015006:	603b      	str	r3, [r7, #0]
  __IO uint16_t * pSramAddress = (uint16_t *)pAddress; 
 8015008:	68bb      	ldr	r3, [r7, #8]
 801500a:	617b      	str	r3, [r7, #20]
  
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8015012:	b2db      	uxtb	r3, r3
 8015014:	2b04      	cmp	r3, #4
 8015016:	d101      	bne.n	801501c <HAL_SRAM_Write_16b+0x22>
  {
    return  HAL_ERROR; 
 8015018:	2301      	movs	r3, #1
 801501a:	e028      	b.n	801506e <HAL_SRAM_Write_16b+0x74>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015022:	2b01      	cmp	r3, #1
 8015024:	d101      	bne.n	801502a <HAL_SRAM_Write_16b+0x30>
 8015026:	2302      	movs	r3, #2
 8015028:	e021      	b.n	801506e <HAL_SRAM_Write_16b+0x74>
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2201      	movs	r2, #1
 801502e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2202      	movs	r2, #2
 8015036:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 801503a:	e00c      	b.n	8015056 <HAL_SRAM_Write_16b+0x5c>
  {
    *(__IO uint16_t *)pSramAddress = *pSrcBuffer; 
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	881a      	ldrh	r2, [r3, #0]
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	801a      	strh	r2, [r3, #0]
    pSrcBuffer++;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	3302      	adds	r3, #2
 8015048:	607b      	str	r3, [r7, #4]
    pSramAddress++;    
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	3302      	adds	r3, #2
 801504e:	617b      	str	r3, [r7, #20]
  for(; BufferSize != 0U; BufferSize--)
 8015050:	683b      	ldr	r3, [r7, #0]
 8015052:	3b01      	subs	r3, #1
 8015054:	603b      	str	r3, [r7, #0]
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d1ef      	bne.n	801503c <HAL_SRAM_Write_16b+0x42>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	2201      	movs	r2, #1
 8015060:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 8015064:	68fb      	ldr	r3, [r7, #12]
 8015066:	2200      	movs	r2, #0
 8015068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 801506c:	2300      	movs	r3, #0
}
 801506e:	4618      	mov	r0, r3
 8015070:	371c      	adds	r7, #28
 8015072:	46bd      	mov	sp, r7
 8015074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015078:	4770      	bx	lr

0801507a <HAL_SRAM_Read_32b>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 801507a:	b480      	push	{r7}
 801507c:	b085      	sub	sp, #20
 801507e:	af00      	add	r7, sp, #0
 8015080:	60f8      	str	r0, [r7, #12]
 8015082:	60b9      	str	r1, [r7, #8]
 8015084:	607a      	str	r2, [r7, #4]
 8015086:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801508e:	2b01      	cmp	r3, #1
 8015090:	d101      	bne.n	8015096 <HAL_SRAM_Read_32b+0x1c>
 8015092:	2302      	movs	r3, #2
 8015094:	e021      	b.n	80150da <HAL_SRAM_Read_32b+0x60>
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2201      	movs	r2, #1
 801509a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;  
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2202      	movs	r2, #2
 80150a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Read data from memory */
  for(; BufferSize != 0U; BufferSize--)
 80150a6:	e00c      	b.n	80150c2 <HAL_SRAM_Read_32b+0x48>
  {
    *pDstBuffer = *(__IO uint32_t *)pAddress;
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	601a      	str	r2, [r3, #0]
    pDstBuffer++;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	3304      	adds	r3, #4
 80150b4:	607b      	str	r3, [r7, #4]
    pAddress++;
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	3304      	adds	r3, #4
 80150ba:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 80150bc:	683b      	ldr	r3, [r7, #0]
 80150be:	3b01      	subs	r3, #1
 80150c0:	603b      	str	r3, [r7, #0]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1ef      	bne.n	80150a8 <HAL_SRAM_Read_32b+0x2e>
  }
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;    
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	2201      	movs	r2, #1
 80150cc:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	2200      	movs	r2, #0
 80150d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;  
 80150d8:	2300      	movs	r3, #0
}
 80150da:	4618      	mov	r0, r3
 80150dc:	3714      	adds	r7, #20
 80150de:	46bd      	mov	sp, r7
 80150e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e4:	4770      	bx	lr

080150e6 <HAL_SRAM_Write_32b>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_32b(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80150e6:	b480      	push	{r7}
 80150e8:	b085      	sub	sp, #20
 80150ea:	af00      	add	r7, sp, #0
 80150ec:	60f8      	str	r0, [r7, #12]
 80150ee:	60b9      	str	r1, [r7, #8]
 80150f0:	607a      	str	r2, [r7, #4]
 80150f2:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80150fa:	b2db      	uxtb	r3, r3
 80150fc:	2b04      	cmp	r3, #4
 80150fe:	d101      	bne.n	8015104 <HAL_SRAM_Write_32b+0x1e>
  {
    return  HAL_ERROR; 
 8015100:	2301      	movs	r3, #1
 8015102:	e028      	b.n	8015156 <HAL_SRAM_Write_32b+0x70>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801510a:	2b01      	cmp	r3, #1
 801510c:	d101      	bne.n	8015112 <HAL_SRAM_Write_32b+0x2c>
 801510e:	2302      	movs	r3, #2
 8015110:	e021      	b.n	8015156 <HAL_SRAM_Write_32b+0x70>
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	2201      	movs	r2, #1
 8015116:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	2202      	movs	r2, #2
 801511e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Write data to memory */
  for(; BufferSize != 0U; BufferSize--)
 8015122:	e00c      	b.n	801513e <HAL_SRAM_Write_32b+0x58>
  {
    *(__IO uint32_t *)pAddress = *pSrcBuffer; 
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	601a      	str	r2, [r3, #0]
    pSrcBuffer++;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	3304      	adds	r3, #4
 8015130:	607b      	str	r3, [r7, #4]
    pAddress++;    
 8015132:	68bb      	ldr	r3, [r7, #8]
 8015134:	3304      	adds	r3, #4
 8015136:	60bb      	str	r3, [r7, #8]
  for(; BufferSize != 0U; BufferSize--)
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	3b01      	subs	r3, #1
 801513c:	603b      	str	r3, [r7, #0]
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d1ef      	bne.n	8015124 <HAL_SRAM_Write_32b+0x3e>
  }    

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	2201      	movs	r2, #1
 8015148:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	2200      	movs	r2, #0
 8015150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
  return HAL_OK;   
 8015154:	2300      	movs	r3, #0
}
 8015156:	4618      	mov	r0, r3
 8015158:	3714      	adds	r7, #20
 801515a:	46bd      	mov	sp, r7
 801515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015160:	4770      	bx	lr

08015162 <HAL_SRAM_Read_DMA>:
  * @param  pDstBuffer Pointer to destination buffer  
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Read_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pDstBuffer, uint32_t BufferSize)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b084      	sub	sp, #16
 8015166:	af00      	add	r7, sp, #0
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	60b9      	str	r1, [r7, #8]
 801516c:	607a      	str	r2, [r7, #4]
 801516e:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hsram);  
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015176:	2b01      	cmp	r3, #1
 8015178:	d101      	bne.n	801517e <HAL_SRAM_Read_DMA+0x1c>
 801517a:	2302      	movs	r3, #2
 801517c:	e01f      	b.n	80151be <HAL_SRAM_Read_DMA+0x5c>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2201      	movs	r2, #1
 8015182:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;   
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	2202      	movs	r2, #2
 801518a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015192:	4a0d      	ldr	r2, [pc, #52]	; (80151c8 <HAL_SRAM_Read_DMA+0x66>)
 8015194:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801519a:	4a0c      	ldr	r2, [pc, #48]	; (80151cc <HAL_SRAM_Read_DMA+0x6a>)
 801519c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80151a2:	68b9      	ldr	r1, [r7, #8]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	f7f2 fca9 	bl	8007afe <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY; 
 80151ac:	68fb      	ldr	r3, [r7, #12]
 80151ae:	2201      	movs	r2, #1
 80151b0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	2200      	movs	r2, #0
 80151b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK; 
 80151bc:	2300      	movs	r3, #0
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3710      	adds	r7, #16
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	08014e6f 	.word	0x08014e6f
 80151cc:	08014e83 	.word	0x08014e83

080151d0 <HAL_SRAM_Write_DMA>:
  * @param  pSrcBuffer Pointer to source buffer to write  
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Write_DMA(SRAM_HandleTypeDef *hsram, uint32_t *pAddress, uint32_t *pSrcBuffer, uint32_t BufferSize)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	60f8      	str	r0, [r7, #12]
 80151d8:	60b9      	str	r1, [r7, #8]
 80151da:	607a      	str	r2, [r7, #4]
 80151dc:	603b      	str	r3, [r7, #0]
  /* Check the SRAM controller state */
  if(hsram->State == HAL_SRAM_STATE_PROTECTED)
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80151e4:	b2db      	uxtb	r3, r3
 80151e6:	2b04      	cmp	r3, #4
 80151e8:	d101      	bne.n	80151ee <HAL_SRAM_Write_DMA+0x1e>
  {
    return  HAL_ERROR; 
 80151ea:	2301      	movs	r3, #1
 80151ec:	e026      	b.n	801523c <HAL_SRAM_Write_DMA+0x6c>
  }
  
  /* Process Locked */
  __HAL_LOCK(hsram);
 80151ee:	68fb      	ldr	r3, [r7, #12]
 80151f0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80151f4:	2b01      	cmp	r3, #1
 80151f6:	d101      	bne.n	80151fc <HAL_SRAM_Write_DMA+0x2c>
 80151f8:	2302      	movs	r3, #2
 80151fa:	e01f      	b.n	801523c <HAL_SRAM_Write_DMA+0x6c>
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2201      	movs	r2, #1
 8015200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY; 
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2202      	movs	r2, #2
 8015208:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Configure DMA user callbacks */
  hsram->hdma->XferCpltCallback  = HAL_SRAM_DMA_XferCpltCallback;
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015210:	4a0c      	ldr	r2, [pc, #48]	; (8015244 <HAL_SRAM_Write_DMA+0x74>)
 8015212:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram->hdma->XferErrorCallback = HAL_SRAM_DMA_XferErrorCallback;
 8015214:	68fb      	ldr	r3, [r7, #12]
 8015216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015218:	4a0b      	ldr	r2, [pc, #44]	; (8015248 <HAL_SRAM_Write_DMA+0x78>)
 801521a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the DMA Stream */
  HAL_DMA_Start_IT(hsram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8015220:	6879      	ldr	r1, [r7, #4]
 8015222:	68ba      	ldr	r2, [r7, #8]
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	f7f2 fc6a 	bl	8007afe <HAL_DMA_Start_IT>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;  
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2201      	movs	r2, #1
 801522e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram);  
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	2200      	movs	r2, #0
 8015236:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;
 801523a:	2300      	movs	r3, #0
}
 801523c:	4618      	mov	r0, r3
 801523e:	3710      	adds	r7, #16
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	08014e6f 	.word	0x08014e6f
 8015248:	08014e83 	.word	0x08014e83

0801524c <HAL_SRAM_WriteOperation_Enable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Enable(SRAM_HandleTypeDef *hsram)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801525a:	2b01      	cmp	r3, #1
 801525c:	d101      	bne.n	8015262 <HAL_SRAM_WriteOperation_Enable+0x16>
 801525e:	2302      	movs	r3, #2
 8015260:	e014      	b.n	801528c <HAL_SRAM_WriteOperation_Enable+0x40>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2201      	movs	r2, #1
 8015266:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Enable write operation */
  FMC_NORSRAM_WriteOperation_Enable(hsram->Instance, hsram->Init.NSBank); 
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	681a      	ldr	r2, [r3, #0]
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	689b      	ldr	r3, [r3, #8]
 8015272:	4619      	mov	r1, r3
 8015274:	4610      	mov	r0, r2
 8015276:	f003 f85b 	bl	8018330 <FSMC_NORSRAM_WriteOperation_Enable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	2201      	movs	r2, #1
 801527e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	2200      	movs	r2, #0
 8015286:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 801528a:	2300      	movs	r3, #0
}
 801528c:	4618      	mov	r0, r3
 801528e:	3708      	adds	r7, #8
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <HAL_SRAM_WriteOperation_Disable>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_WriteOperation_Disable(SRAM_HandleTypeDef *hsram)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b082      	sub	sp, #8
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsram);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d101      	bne.n	80152aa <HAL_SRAM_WriteOperation_Disable+0x16>
 80152a6:	2302      	movs	r3, #2
 80152a8:	e018      	b.n	80152dc <HAL_SRAM_WriteOperation_Disable+0x48>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	2201      	movs	r2, #1
 80152ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_BUSY;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	2202      	movs	r2, #2
 80152b6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    
  /* Disable write operation */
  FMC_NORSRAM_WriteOperation_Disable(hsram->Instance, hsram->Init.NSBank); 
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	681a      	ldr	r2, [r3, #0]
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	689b      	ldr	r3, [r3, #8]
 80152c2:	4619      	mov	r1, r3
 80152c4:	4610      	mov	r0, r2
 80152c6:	f003 f849 	bl	801835c <FSMC_NORSRAM_WriteOperation_Disable>
  
  /* Update the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_PROTECTED;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2204      	movs	r2, #4
 80152ce:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  
  /* Process unlocked */
  __HAL_UNLOCK(hsram); 
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2200      	movs	r2, #0
 80152d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  return HAL_OK;  
 80152da:	2300      	movs	r3, #0
}
 80152dc:	4618      	mov	r0, r3
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <HAL_SRAM_GetState>:
  * @param  hsram pointer to a SRAM_HandleTypeDef structure that contains
  *                the configuration information for SRAM module.
  * @retval HAL state
  */
HAL_SRAM_StateTypeDef HAL_SRAM_GetState(SRAM_HandleTypeDef *hsram)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  return hsram->State;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80152f2:	b2db      	uxtb	r3, r3
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d101      	bne.n	8015312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801530e:	2301      	movs	r3, #1
 8015310:	e03f      	b.n	8015392 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015318:	b2db      	uxtb	r3, r3
 801531a:	2b00      	cmp	r3, #0
 801531c:	d106      	bne.n	801532c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	2200      	movs	r2, #0
 8015322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f7f0 fc9e 	bl	8005c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	2224      	movs	r2, #36	; 0x24
 8015330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	68da      	ldr	r2, [r3, #12]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8015344:	6878      	ldr	r0, [r7, #4]
 8015346:	f002 fc7e 	bl	8017c46 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	691a      	ldr	r2, [r3, #16]
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	695a      	ldr	r2, [r3, #20]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	681b      	ldr	r3, [r3, #0]
 801536e:	68da      	ldr	r2, [r3, #12]
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	2200      	movs	r2, #0
 801537e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2220      	movs	r2, #32
 8015384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	2220      	movs	r2, #32
 801538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015390:	2300      	movs	r3, #0
}
 8015392:	4618      	mov	r0, r3
 8015394:	3708      	adds	r7, #8
 8015396:	46bd      	mov	sp, r7
 8015398:	bd80      	pop	{r7, pc}

0801539a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 801539a:	b580      	push	{r7, lr}
 801539c:	b082      	sub	sp, #8
 801539e:	af00      	add	r7, sp, #0
 80153a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d101      	bne.n	80153ac <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80153a8:	2301      	movs	r3, #1
 80153aa:	e047      	b.n	801543c <HAL_HalfDuplex_Init+0xa2>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d106      	bne.n	80153c6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2200      	movs	r2, #0
 80153bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80153c0:	6878      	ldr	r0, [r7, #4]
 80153c2:	f7f0 fc51 	bl	8005c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2224      	movs	r2, #36	; 0x24
 80153ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	68da      	ldr	r2, [r3, #12]
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80153dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80153de:	6878      	ldr	r0, [r7, #4]
 80153e0:	f002 fc31 	bl	8017c46 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	691a      	ldr	r2, [r3, #16]
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80153f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	695a      	ldr	r2, [r3, #20]
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	681b      	ldr	r3, [r3, #0]
 80153fe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8015402:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	695a      	ldr	r2, [r3, #20]
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	681b      	ldr	r3, [r3, #0]
 801540e:	f042 0208 	orr.w	r2, r2, #8
 8015412:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	68da      	ldr	r2, [r3, #12]
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8015422:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	2200      	movs	r2, #0
 8015428:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	2220      	movs	r2, #32
 801542e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2220      	movs	r2, #32
 8015436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801543a:	2300      	movs	r3, #0
}
 801543c:	4618      	mov	r0, r3
 801543e:	3708      	adds	r7, #8
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <HAL_LIN_Init>:
  *            @arg UART_LINBREAKDETECTLENGTH_10B: 10-bit break detection
  *            @arg UART_LINBREAKDETECTLENGTH_11B: 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b082      	sub	sp, #8
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d101      	bne.n	8015458 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 8015454:	2301      	movs	r3, #1
 8015456:	e057      	b.n	8015508 <HAL_LIN_Init+0xc4>
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
  assert_param(IS_UART_LIN_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_LIN_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801545e:	b2db      	uxtb	r3, r3
 8015460:	2b00      	cmp	r3, #0
 8015462:	d106      	bne.n	8015472 <HAL_LIN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2200      	movs	r2, #0
 8015468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7f0 fbfb 	bl	8005c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	2224      	movs	r2, #36	; 0x24
 8015476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	68da      	ldr	r2, [r3, #12]
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015488:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801548a:	6878      	ldr	r0, [r7, #4]
 801548c:	f002 fbdb 	bl	8017c46 <UART_SetConfig>

  /* In LIN mode, the following bits must be kept cleared:
     - CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_CLKEN));
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	691a      	ldr	r2, [r3, #16]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801549e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	695a      	ldr	r2, [r3, #20]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80154ae:	615a      	str	r2, [r3, #20]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	691a      	ldr	r2, [r3, #16]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681b      	ldr	r3, [r3, #0]
 80154ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80154be:	611a      	str	r2, [r3, #16]

  /* Set the USART LIN Break detection length. */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_LBDL);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	691a      	ldr	r2, [r3, #16]
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	f022 0220 	bic.w	r2, r2, #32
 80154ce:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, BreakDetectLength);
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	6919      	ldr	r1, [r3, #16]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	683a      	ldr	r2, [r7, #0]
 80154dc:	430a      	orrs	r2, r1
 80154de:	611a      	str	r2, [r3, #16]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	68da      	ldr	r2, [r3, #12]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80154ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2220      	movs	r2, #32
 80154fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2220      	movs	r2, #32
 8015502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	4618      	mov	r0, r3
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	460b      	mov	r3, r1
 801551a:	607a      	str	r2, [r7, #4]
 801551c:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2b00      	cmp	r3, #0
 8015522:	d101      	bne.n	8015528 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8015524:	2301      	movs	r3, #1
 8015526:	e05f      	b.n	80155e8 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	d106      	bne.n	8015542 <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	2200      	movs	r2, #0
 8015538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801553c:	68f8      	ldr	r0, [r7, #12]
 801553e:	f7f0 fb93 	bl	8005c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015542:	68fb      	ldr	r3, [r7, #12]
 8015544:	2224      	movs	r2, #36	; 0x24
 8015546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	68da      	ldr	r2, [r3, #12]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	681b      	ldr	r3, [r3, #0]
 8015554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015558:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f002 fb73 	bl	8017c46 <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	691a      	ldr	r2, [r3, #16]
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801556e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	695a      	ldr	r2, [r3, #20]
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801557e:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	691a      	ldr	r2, [r3, #16]
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	681b      	ldr	r3, [r3, #0]
 801558a:	f022 020f 	bic.w	r2, r2, #15
 801558e:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	6919      	ldr	r1, [r3, #16]
 8015596:	7afa      	ldrb	r2, [r7, #11]
 8015598:	68fb      	ldr	r3, [r7, #12]
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	430a      	orrs	r2, r1
 801559e:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	68da      	ldr	r2, [r3, #12]
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80155ae:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	68d9      	ldr	r1, [r3, #12]
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	687a      	ldr	r2, [r7, #4]
 80155bc:	430a      	orrs	r2, r1
 80155be:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	68da      	ldr	r2, [r3, #12]
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80155ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	2200      	movs	r2, #0
 80155d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	2220      	movs	r2, #32
 80155da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	2220      	movs	r2, #32
 80155e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80155e6:	2300      	movs	r3, #0
}
 80155e8:	4618      	mov	r0, r3
 80155ea:	3710      	adds	r7, #16
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}

080155f0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b082      	sub	sp, #8
 80155f4:	af00      	add	r7, sp, #0
 80155f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d101      	bne.n	8015602 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80155fe:	2301      	movs	r3, #1
 8015600:	e021      	b.n	8015646 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	2224      	movs	r2, #36	; 0x24
 8015606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	68da      	ldr	r2, [r3, #12]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8015618:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f7f0 fb74 	bl	8005d08 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	2200      	movs	r2, #0
 8015624:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2200      	movs	r2, #0
 8015632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2200      	movs	r2, #0
 801563a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2200      	movs	r2, #0
 8015640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015644:	2300      	movs	r3, #0
}
 8015646:	4618      	mov	r0, r3
 8015648:	3708      	adds	r7, #8
 801564a:	46bd      	mov	sp, r7
 801564c:	bd80      	pop	{r7, pc}

0801564e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801564e:	b580      	push	{r7, lr}
 8015650:	b08a      	sub	sp, #40	; 0x28
 8015652:	af02      	add	r7, sp, #8
 8015654:	60f8      	str	r0, [r7, #12]
 8015656:	60b9      	str	r1, [r7, #8]
 8015658:	603b      	str	r3, [r7, #0]
 801565a:	4613      	mov	r3, r2
 801565c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 801565e:	2300      	movs	r3, #0
 8015660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015668:	b2db      	uxtb	r3, r3
 801566a:	2b20      	cmp	r3, #32
 801566c:	d17c      	bne.n	8015768 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 801566e:	68bb      	ldr	r3, [r7, #8]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d002      	beq.n	801567a <HAL_UART_Transmit+0x2c>
 8015674:	88fb      	ldrh	r3, [r7, #6]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d101      	bne.n	801567e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 801567a:	2301      	movs	r3, #1
 801567c:	e075      	b.n	801576a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015684:	2b01      	cmp	r3, #1
 8015686:	d101      	bne.n	801568c <HAL_UART_Transmit+0x3e>
 8015688:	2302      	movs	r3, #2
 801568a:	e06e      	b.n	801576a <HAL_UART_Transmit+0x11c>
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	2201      	movs	r2, #1
 8015690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	2200      	movs	r2, #0
 8015698:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2221      	movs	r2, #33	; 0x21
 801569e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80156a2:	f7f0 ffc3 	bl	800662c <HAL_GetTick>
 80156a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	88fa      	ldrh	r2, [r7, #6]
 80156ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	88fa      	ldrh	r2, [r7, #6]
 80156b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	689b      	ldr	r3, [r3, #8]
 80156b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80156bc:	d108      	bne.n	80156d0 <HAL_UART_Transmit+0x82>
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	691b      	ldr	r3, [r3, #16]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d104      	bne.n	80156d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80156c6:	2300      	movs	r3, #0
 80156c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80156ca:	68bb      	ldr	r3, [r7, #8]
 80156cc:	61bb      	str	r3, [r7, #24]
 80156ce:	e003      	b.n	80156d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80156d0:	68bb      	ldr	r3, [r7, #8]
 80156d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80156d4:	2300      	movs	r3, #0
 80156d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2200      	movs	r2, #0
 80156dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80156e0:	e02a      	b.n	8015738 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	9300      	str	r3, [sp, #0]
 80156e6:	697b      	ldr	r3, [r7, #20]
 80156e8:	2200      	movs	r2, #0
 80156ea:	2180      	movs	r1, #128	; 0x80
 80156ec:	68f8      	ldr	r0, [r7, #12]
 80156ee:	f001 ff19 	bl	8017524 <UART_WaitOnFlagUntilTimeout>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80156f8:	2303      	movs	r3, #3
 80156fa:	e036      	b.n	801576a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80156fc:	69fb      	ldr	r3, [r7, #28]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d10b      	bne.n	801571a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015702:	69bb      	ldr	r3, [r7, #24]
 8015704:	881b      	ldrh	r3, [r3, #0]
 8015706:	461a      	mov	r2, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8015712:	69bb      	ldr	r3, [r7, #24]
 8015714:	3302      	adds	r3, #2
 8015716:	61bb      	str	r3, [r7, #24]
 8015718:	e007      	b.n	801572a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 801571a:	69fb      	ldr	r3, [r7, #28]
 801571c:	781a      	ldrb	r2, [r3, #0]
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8015724:	69fb      	ldr	r3, [r7, #28]
 8015726:	3301      	adds	r3, #1
 8015728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801572e:	b29b      	uxth	r3, r3
 8015730:	3b01      	subs	r3, #1
 8015732:	b29a      	uxth	r2, r3
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801573c:	b29b      	uxth	r3, r3
 801573e:	2b00      	cmp	r3, #0
 8015740:	d1cf      	bne.n	80156e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	9300      	str	r3, [sp, #0]
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	2200      	movs	r2, #0
 801574a:	2140      	movs	r1, #64	; 0x40
 801574c:	68f8      	ldr	r0, [r7, #12]
 801574e:	f001 fee9 	bl	8017524 <UART_WaitOnFlagUntilTimeout>
 8015752:	4603      	mov	r3, r0
 8015754:	2b00      	cmp	r3, #0
 8015756:	d001      	beq.n	801575c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8015758:	2303      	movs	r3, #3
 801575a:	e006      	b.n	801576a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	2220      	movs	r2, #32
 8015760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8015764:	2300      	movs	r3, #0
 8015766:	e000      	b.n	801576a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8015768:	2302      	movs	r3, #2
  }
}
 801576a:	4618      	mov	r0, r3
 801576c:	3720      	adds	r7, #32
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015772:	b580      	push	{r7, lr}
 8015774:	b08a      	sub	sp, #40	; 0x28
 8015776:	af02      	add	r7, sp, #8
 8015778:	60f8      	str	r0, [r7, #12]
 801577a:	60b9      	str	r1, [r7, #8]
 801577c:	603b      	str	r3, [r7, #0]
 801577e:	4613      	mov	r3, r2
 8015780:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8015782:	2300      	movs	r3, #0
 8015784:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801578c:	b2db      	uxtb	r3, r3
 801578e:	2b20      	cmp	r3, #32
 8015790:	f040 808c 	bne.w	80158ac <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8015794:	68bb      	ldr	r3, [r7, #8]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d002      	beq.n	80157a0 <HAL_UART_Receive+0x2e>
 801579a:	88fb      	ldrh	r3, [r7, #6]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d101      	bne.n	80157a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80157a0:	2301      	movs	r3, #1
 80157a2:	e084      	b.n	80158ae <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	d101      	bne.n	80157b2 <HAL_UART_Receive+0x40>
 80157ae:	2302      	movs	r3, #2
 80157b0:	e07d      	b.n	80158ae <HAL_UART_Receive+0x13c>
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	2201      	movs	r2, #1
 80157b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	2200      	movs	r2, #0
 80157be:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	2222      	movs	r2, #34	; 0x22
 80157c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	2200      	movs	r2, #0
 80157cc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80157ce:	f7f0 ff2d 	bl	800662c <HAL_GetTick>
 80157d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	88fa      	ldrh	r2, [r7, #6]
 80157d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	88fa      	ldrh	r2, [r7, #6]
 80157de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	689b      	ldr	r3, [r3, #8]
 80157e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80157e8:	d108      	bne.n	80157fc <HAL_UART_Receive+0x8a>
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	691b      	ldr	r3, [r3, #16]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d104      	bne.n	80157fc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80157f2:	2300      	movs	r3, #0
 80157f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	61bb      	str	r3, [r7, #24]
 80157fa:	e003      	b.n	8015804 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015800:	2300      	movs	r3, #0
 8015802:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2200      	movs	r2, #0
 8015808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 801580c:	e043      	b.n	8015896 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801580e:	683b      	ldr	r3, [r7, #0]
 8015810:	9300      	str	r3, [sp, #0]
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	2200      	movs	r2, #0
 8015816:	2120      	movs	r1, #32
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f001 fe83 	bl	8017524 <UART_WaitOnFlagUntilTimeout>
 801581e:	4603      	mov	r3, r0
 8015820:	2b00      	cmp	r3, #0
 8015822:	d001      	beq.n	8015828 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8015824:	2303      	movs	r3, #3
 8015826:	e042      	b.n	80158ae <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8015828:	69fb      	ldr	r3, [r7, #28]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d10c      	bne.n	8015848 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	685b      	ldr	r3, [r3, #4]
 8015834:	b29b      	uxth	r3, r3
 8015836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801583a:	b29a      	uxth	r2, r3
 801583c:	69bb      	ldr	r3, [r7, #24]
 801583e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8015840:	69bb      	ldr	r3, [r7, #24]
 8015842:	3302      	adds	r3, #2
 8015844:	61bb      	str	r3, [r7, #24]
 8015846:	e01f      	b.n	8015888 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	689b      	ldr	r3, [r3, #8]
 801584c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015850:	d007      	beq.n	8015862 <HAL_UART_Receive+0xf0>
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d10a      	bne.n	8015870 <HAL_UART_Receive+0xfe>
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d106      	bne.n	8015870 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	685b      	ldr	r3, [r3, #4]
 8015868:	b2da      	uxtb	r2, r3
 801586a:	69fb      	ldr	r3, [r7, #28]
 801586c:	701a      	strb	r2, [r3, #0]
 801586e:	e008      	b.n	8015882 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	685b      	ldr	r3, [r3, #4]
 8015876:	b2db      	uxtb	r3, r3
 8015878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801587c:	b2da      	uxtb	r2, r3
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	3301      	adds	r3, #1
 8015886:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801588c:	b29b      	uxth	r3, r3
 801588e:	3b01      	subs	r3, #1
 8015890:	b29a      	uxth	r2, r3
 8015892:	68fb      	ldr	r3, [r7, #12]
 8015894:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801589a:	b29b      	uxth	r3, r3
 801589c:	2b00      	cmp	r3, #0
 801589e:	d1b6      	bne.n	801580e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2220      	movs	r2, #32
 80158a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80158a8:	2300      	movs	r3, #0
 80158aa:	e000      	b.n	80158ae <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80158ac:	2302      	movs	r3, #2
  }
}
 80158ae:	4618      	mov	r0, r3
 80158b0:	3720      	adds	r7, #32
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80158b6:	b480      	push	{r7}
 80158b8:	b085      	sub	sp, #20
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	60f8      	str	r0, [r7, #12]
 80158be:	60b9      	str	r1, [r7, #8]
 80158c0:	4613      	mov	r3, r2
 80158c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	2b20      	cmp	r3, #32
 80158ce:	d130      	bne.n	8015932 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d002      	beq.n	80158dc <HAL_UART_Transmit_IT+0x26>
 80158d6:	88fb      	ldrh	r3, [r7, #6]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d101      	bne.n	80158e0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80158dc:	2301      	movs	r3, #1
 80158de:	e029      	b.n	8015934 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d101      	bne.n	80158ee <HAL_UART_Transmit_IT+0x38>
 80158ea:	2302      	movs	r3, #2
 80158ec:	e022      	b.n	8015934 <HAL_UART_Transmit_IT+0x7e>
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	2201      	movs	r2, #1
 80158f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	68ba      	ldr	r2, [r7, #8]
 80158fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	88fa      	ldrh	r2, [r7, #6]
 8015900:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	88fa      	ldrh	r2, [r7, #6]
 8015906:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	2200      	movs	r2, #0
 801590c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	2221      	movs	r2, #33	; 0x21
 8015912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	2200      	movs	r2, #0
 801591a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	68da      	ldr	r2, [r3, #12]
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801592c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 801592e:	2300      	movs	r3, #0
 8015930:	e000      	b.n	8015934 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8015932:	2302      	movs	r3, #2
  }
}
 8015934:	4618      	mov	r0, r3
 8015936:	3714      	adds	r7, #20
 8015938:	46bd      	mov	sp, r7
 801593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801593e:	4770      	bx	lr

08015940 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015940:	b580      	push	{r7, lr}
 8015942:	b084      	sub	sp, #16
 8015944:	af00      	add	r7, sp, #0
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	60b9      	str	r1, [r7, #8]
 801594a:	4613      	mov	r3, r2
 801594c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015954:	b2db      	uxtb	r3, r3
 8015956:	2b20      	cmp	r3, #32
 8015958:	d11d      	bne.n	8015996 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 801595a:	68bb      	ldr	r3, [r7, #8]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d002      	beq.n	8015966 <HAL_UART_Receive_IT+0x26>
 8015960:	88fb      	ldrh	r3, [r7, #6]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d101      	bne.n	801596a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8015966:	2301      	movs	r3, #1
 8015968:	e016      	b.n	8015998 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015970:	2b01      	cmp	r3, #1
 8015972:	d101      	bne.n	8015978 <HAL_UART_Receive_IT+0x38>
 8015974:	2302      	movs	r3, #2
 8015976:	e00f      	b.n	8015998 <HAL_UART_Receive_IT+0x58>
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	2201      	movs	r2, #1
 801597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	2200      	movs	r2, #0
 8015984:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015986:	88fb      	ldrh	r3, [r7, #6]
 8015988:	461a      	mov	r2, r3
 801598a:	68b9      	ldr	r1, [r7, #8]
 801598c:	68f8      	ldr	r0, [r7, #12]
 801598e:	f001 fe37 	bl	8017600 <UART_Start_Receive_IT>
 8015992:	4603      	mov	r3, r0
 8015994:	e000      	b.n	8015998 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015996:	2302      	movs	r3, #2
  }
}
 8015998:	4618      	mov	r0, r3
 801599a:	3710      	adds	r7, #16
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}

080159a0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b08c      	sub	sp, #48	; 0x30
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	60f8      	str	r0, [r7, #12]
 80159a8:	60b9      	str	r1, [r7, #8]
 80159aa:	4613      	mov	r3, r2
 80159ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80159b4:	b2db      	uxtb	r3, r3
 80159b6:	2b20      	cmp	r3, #32
 80159b8:	d165      	bne.n	8015a86 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80159ba:	68bb      	ldr	r3, [r7, #8]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d002      	beq.n	80159c6 <HAL_UART_Transmit_DMA+0x26>
 80159c0:	88fb      	ldrh	r3, [r7, #6]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d101      	bne.n	80159ca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80159c6:	2301      	movs	r3, #1
 80159c8:	e05e      	b.n	8015a88 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80159d0:	2b01      	cmp	r3, #1
 80159d2:	d101      	bne.n	80159d8 <HAL_UART_Transmit_DMA+0x38>
 80159d4:	2302      	movs	r3, #2
 80159d6:	e057      	b.n	8015a88 <HAL_UART_Transmit_DMA+0xe8>
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	2201      	movs	r2, #1
 80159dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80159e0:	68ba      	ldr	r2, [r7, #8]
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	88fa      	ldrh	r2, [r7, #6]
 80159ea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80159ec:	68fb      	ldr	r3, [r7, #12]
 80159ee:	88fa      	ldrh	r2, [r7, #6]
 80159f0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2200      	movs	r2, #0
 80159f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80159f8:	68fb      	ldr	r3, [r7, #12]
 80159fa:	2221      	movs	r2, #33	; 0x21
 80159fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a04:	4a22      	ldr	r2, [pc, #136]	; (8015a90 <HAL_UART_Transmit_DMA+0xf0>)
 8015a06:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a0c:	4a21      	ldr	r2, [pc, #132]	; (8015a94 <HAL_UART_Transmit_DMA+0xf4>)
 8015a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a14:	4a20      	ldr	r2, [pc, #128]	; (8015a98 <HAL_UART_Transmit_DMA+0xf8>)
 8015a16:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8015a20:	f107 0308 	add.w	r3, r7, #8
 8015a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2c:	6819      	ldr	r1, [r3, #0]
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	3304      	adds	r3, #4
 8015a34:	461a      	mov	r2, r3
 8015a36:	88fb      	ldrh	r3, [r7, #6]
 8015a38:	f7f2 f861 	bl	8007afe <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8015a44:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	3314      	adds	r3, #20
 8015a54:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015a56:	69bb      	ldr	r3, [r7, #24]
 8015a58:	e853 3f00 	ldrex	r3, [r3]
 8015a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8015a5e:	697b      	ldr	r3, [r7, #20]
 8015a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	3314      	adds	r3, #20
 8015a6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a6e:	627a      	str	r2, [r7, #36]	; 0x24
 8015a70:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015a72:	6a39      	ldr	r1, [r7, #32]
 8015a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a76:	e841 2300 	strex	r3, r2, [r1]
 8015a7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8015a7c:	69fb      	ldr	r3, [r7, #28]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d1e5      	bne.n	8015a4e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8015a82:	2300      	movs	r3, #0
 8015a84:	e000      	b.n	8015a88 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8015a86:	2302      	movs	r3, #2
  }
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3730      	adds	r7, #48	; 0x30
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}
 8015a90:	0801727f 	.word	0x0801727f
 8015a94:	08017319 	.word	0x08017319
 8015a98:	08017491 	.word	0x08017491

08015a9c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b084      	sub	sp, #16
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	60f8      	str	r0, [r7, #12]
 8015aa4:	60b9      	str	r1, [r7, #8]
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	2b20      	cmp	r3, #32
 8015ab4:	d11d      	bne.n	8015af2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d002      	beq.n	8015ac2 <HAL_UART_Receive_DMA+0x26>
 8015abc:	88fb      	ldrh	r3, [r7, #6]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d101      	bne.n	8015ac6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	e016      	b.n	8015af4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015acc:	2b01      	cmp	r3, #1
 8015ace:	d101      	bne.n	8015ad4 <HAL_UART_Receive_DMA+0x38>
 8015ad0:	2302      	movs	r3, #2
 8015ad2:	e00f      	b.n	8015af4 <HAL_UART_Receive_DMA+0x58>
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2201      	movs	r2, #1
 8015ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8015ae2:	88fb      	ldrh	r3, [r7, #6]
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	68b9      	ldr	r1, [r7, #8]
 8015ae8:	68f8      	ldr	r0, [r7, #12]
 8015aea:	f001 fdc3 	bl	8017674 <UART_Start_Receive_DMA>
 8015aee:	4603      	mov	r3, r0
 8015af0:	e000      	b.n	8015af4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8015af2:	2302      	movs	r3, #2
  }
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	3710      	adds	r7, #16
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <HAL_UART_DMAPause>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 8015afc:	b480      	push	{r7}
 8015afe:	b09d      	sub	sp, #116	; 0x74
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015b04:	2300      	movs	r3, #0
 8015b06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Process Locked */
  __HAL_LOCK(huart);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	d101      	bne.n	8015b16 <HAL_UART_DMAPause+0x1a>
 8015b12:	2302      	movs	r3, #2
 8015b14:	e098      	b.n	8015c48 <HAL_UART_DMAPause+0x14c>
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2201      	movs	r2, #1
 8015b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	695b      	ldr	r3, [r3, #20]
 8015b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015b28:	2b80      	cmp	r3, #128	; 0x80
 8015b2a:	bf0c      	ite	eq
 8015b2c:	2301      	moveq	r3, #1
 8015b2e:	2300      	movne	r3, #0
 8015b30:	b2db      	uxtb	r3, r3
 8015b32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	2b21      	cmp	r3, #33	; 0x21
 8015b3e:	d11c      	bne.n	8015b7a <HAL_UART_DMAPause+0x7e>
 8015b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d019      	beq.n	8015b7a <HAL_UART_DMAPause+0x7e>
  {
    /* Disable the UART DMA Tx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	3314      	adds	r3, #20
 8015b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b50:	e853 3f00 	ldrex	r3, [r3]
 8015b54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015b5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	3314      	adds	r3, #20
 8015b64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b66:	65ba      	str	r2, [r7, #88]	; 0x58
 8015b68:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015b6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015b6e:	e841 2300 	strex	r3, r2, [r1]
 8015b72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d1e5      	bne.n	8015b46 <HAL_UART_DMAPause+0x4a>
  }

  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	695b      	ldr	r3, [r3, #20]
 8015b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b84:	2b40      	cmp	r3, #64	; 0x40
 8015b86:	bf0c      	ite	eq
 8015b88:	2301      	moveq	r3, #1
 8015b8a:	2300      	movne	r3, #0
 8015b8c:	b2db      	uxtb	r3, r3
 8015b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015b96:	b2db      	uxtb	r3, r3
 8015b98:	2b22      	cmp	r3, #34	; 0x22
 8015b9a:	d150      	bne.n	8015c3e <HAL_UART_DMAPause+0x142>
 8015b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015b9e:	2b00      	cmp	r3, #0
 8015ba0:	d04d      	beq.n	8015c3e <HAL_UART_DMAPause+0x142>
  {
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	330c      	adds	r3, #12
 8015ba8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bac:	e853 3f00 	ldrex	r3, [r3]
 8015bb0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8015bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	330c      	adds	r3, #12
 8015bc0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015bc2:	647a      	str	r2, [r7, #68]	; 0x44
 8015bc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015bc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bca:	e841 2300 	strex	r3, r2, [r1]
 8015bce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8015bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d1e5      	bne.n	8015ba2 <HAL_UART_DMAPause+0xa6>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	3314      	adds	r3, #20
 8015bdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	e853 3f00 	ldrex	r3, [r3]
 8015be4:	623b      	str	r3, [r7, #32]
   return(result);
 8015be6:	6a3b      	ldr	r3, [r7, #32]
 8015be8:	f023 0301 	bic.w	r3, r3, #1
 8015bec:	663b      	str	r3, [r7, #96]	; 0x60
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	3314      	adds	r3, #20
 8015bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015bf6:	633a      	str	r2, [r7, #48]	; 0x30
 8015bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015bfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015bfe:	e841 2300 	strex	r3, r2, [r1]
 8015c02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d1e5      	bne.n	8015bd6 <HAL_UART_DMAPause+0xda>

    /* Disable the UART DMA Rx request */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	3314      	adds	r3, #20
 8015c10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	e853 3f00 	ldrex	r3, [r3]
 8015c18:	60fb      	str	r3, [r7, #12]
   return(result);
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	3314      	adds	r3, #20
 8015c28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015c2a:	61fa      	str	r2, [r7, #28]
 8015c2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c2e:	69b9      	ldr	r1, [r7, #24]
 8015c30:	69fa      	ldr	r2, [r7, #28]
 8015c32:	e841 2300 	strex	r3, r2, [r1]
 8015c36:	617b      	str	r3, [r7, #20]
   return(result);
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	d1e5      	bne.n	8015c0a <HAL_UART_DMAPause+0x10e>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2200      	movs	r2, #0
 8015c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015c46:	2300      	movs	r3, #0
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3774      	adds	r7, #116	; 0x74
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <HAL_UART_DMAResume>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 8015c54:	b480      	push	{r7}
 8015c56:	b09d      	sub	sp, #116	; 0x74
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015c62:	2b01      	cmp	r3, #1
 8015c64:	d101      	bne.n	8015c6a <HAL_UART_DMAResume+0x16>
 8015c66:	2302      	movs	r3, #2
 8015c68:	e087      	b.n	8015d7a <HAL_UART_DMAResume+0x126>
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015c78:	b2db      	uxtb	r3, r3
 8015c7a:	2b21      	cmp	r3, #33	; 0x21
 8015c7c:	d119      	bne.n	8015cb2 <HAL_UART_DMAResume+0x5e>
  {
    /* Enable the UART DMA Tx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3314      	adds	r3, #20
 8015c84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c88:	e853 3f00 	ldrex	r3, [r3]
 8015c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	3314      	adds	r3, #20
 8015c9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015c9e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015ca0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ca2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015ca4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ca6:	e841 2300 	strex	r3, r2, [r1]
 8015caa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d1e5      	bne.n	8015c7e <HAL_UART_DMAResume+0x2a>
  }

  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	2b22      	cmp	r3, #34	; 0x22
 8015cbc:	d158      	bne.n	8015d70 <HAL_UART_DMAResume+0x11c>
  {
    /* Clear the Overrun flag before resuming the Rx transfer*/
    __HAL_UART_CLEAR_OREFLAG(huart);
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	60fb      	str	r3, [r7, #12]
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	60fb      	str	r3, [r7, #12]
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	60fb      	str	r3, [r7, #12]
 8015cd2:	68fb      	ldr	r3, [r7, #12]

    /* Re-enable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	330c      	adds	r3, #12
 8015cda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cde:	e853 3f00 	ldrex	r3, [r3]
 8015ce2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	330c      	adds	r3, #12
 8015cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015cf4:	64ba      	str	r2, [r7, #72]	; 0x48
 8015cf6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cf8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cfc:	e841 2300 	strex	r3, r2, [r1]
 8015d00:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d1e5      	bne.n	8015cd4 <HAL_UART_DMAResume+0x80>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	3314      	adds	r3, #20
 8015d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d12:	e853 3f00 	ldrex	r3, [r3]
 8015d16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8015d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1a:	f043 0301 	orr.w	r3, r3, #1
 8015d1e:	667b      	str	r3, [r7, #100]	; 0x64
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	3314      	adds	r3, #20
 8015d26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015d28:	637a      	str	r2, [r7, #52]	; 0x34
 8015d2a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015d30:	e841 2300 	strex	r3, r2, [r1]
 8015d34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8015d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d1e5      	bne.n	8015d08 <HAL_UART_DMAResume+0xb4>

    /* Enable the UART DMA Rx request */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	3314      	adds	r3, #20
 8015d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d44:	697b      	ldr	r3, [r7, #20]
 8015d46:	e853 3f00 	ldrex	r3, [r3]
 8015d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d52:	663b      	str	r3, [r7, #96]	; 0x60
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	3314      	adds	r3, #20
 8015d5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015d5c:	623a      	str	r2, [r7, #32]
 8015d5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d60:	69f9      	ldr	r1, [r7, #28]
 8015d62:	6a3a      	ldr	r2, [r7, #32]
 8015d64:	e841 2300 	strex	r3, r2, [r1]
 8015d68:	61bb      	str	r3, [r7, #24]
   return(result);
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d1e5      	bne.n	8015d3c <HAL_UART_DMAResume+0xe8>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	2200      	movs	r2, #0
 8015d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015d78:	2300      	movs	r3, #0
}
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	3774      	adds	r7, #116	; 0x74
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr

08015d86 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8015d86:	b580      	push	{r7, lr}
 8015d88:	b090      	sub	sp, #64	; 0x40
 8015d8a:	af00      	add	r7, sp, #0
 8015d8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	695b      	ldr	r3, [r3, #20]
 8015d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015d9c:	2b80      	cmp	r3, #128	; 0x80
 8015d9e:	bf0c      	ite	eq
 8015da0:	2301      	moveq	r3, #1
 8015da2:	2300      	movne	r3, #0
 8015da4:	b2db      	uxtb	r3, r3
 8015da6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	2b21      	cmp	r3, #33	; 0x21
 8015db2:	d128      	bne.n	8015e06 <HAL_UART_DMAStop+0x80>
 8015db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d025      	beq.n	8015e06 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	3314      	adds	r3, #20
 8015dc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc4:	e853 3f00 	ldrex	r3, [r3]
 8015dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8015dca:	6a3b      	ldr	r3, [r7, #32]
 8015dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015dd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	3314      	adds	r3, #20
 8015dd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015dda:	633a      	str	r2, [r7, #48]	; 0x30
 8015ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015dde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015de0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015de2:	e841 2300 	strex	r3, r2, [r1]
 8015de6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8015de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d1e5      	bne.n	8015dba <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d004      	beq.n	8015e00 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7f1 fed7 	bl	8007bae <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f001 fcd1 	bl	80177a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	695b      	ldr	r3, [r3, #20]
 8015e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e10:	2b40      	cmp	r3, #64	; 0x40
 8015e12:	bf0c      	ite	eq
 8015e14:	2301      	moveq	r3, #1
 8015e16:	2300      	movne	r3, #0
 8015e18:	b2db      	uxtb	r3, r3
 8015e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015e22:	b2db      	uxtb	r3, r3
 8015e24:	2b22      	cmp	r3, #34	; 0x22
 8015e26:	d128      	bne.n	8015e7a <HAL_UART_DMAStop+0xf4>
 8015e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d025      	beq.n	8015e7a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	3314      	adds	r3, #20
 8015e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	e853 3f00 	ldrex	r3, [r3]
 8015e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8015e3e:	68fb      	ldr	r3, [r7, #12]
 8015e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015e44:	637b      	str	r3, [r7, #52]	; 0x34
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	3314      	adds	r3, #20
 8015e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e4e:	61fa      	str	r2, [r7, #28]
 8015e50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e52:	69b9      	ldr	r1, [r7, #24]
 8015e54:	69fa      	ldr	r2, [r7, #28]
 8015e56:	e841 2300 	strex	r3, r2, [r1]
 8015e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d1e5      	bne.n	8015e2e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d004      	beq.n	8015e74 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7f1 fe9d 	bl	8007bae <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8015e74:	6878      	ldr	r0, [r7, #4]
 8015e76:	f001 fcbf 	bl	80177f8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8015e7a:	2300      	movs	r3, #0
}
 8015e7c:	4618      	mov	r0, r3
 8015e7e:	3740      	adds	r7, #64	; 0x40
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}

08015e84 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b088      	sub	sp, #32
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	603b      	str	r3, [r7, #0]
 8015e90:	4613      	mov	r3, r2
 8015e92:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015e9a:	b2db      	uxtb	r3, r3
 8015e9c:	2b20      	cmp	r3, #32
 8015e9e:	f040 80c9 	bne.w	8016034 <HAL_UARTEx_ReceiveToIdle+0x1b0>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d002      	beq.n	8015eae <HAL_UARTEx_ReceiveToIdle+0x2a>
 8015ea8:	88fb      	ldrh	r3, [r7, #6]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d101      	bne.n	8015eb2 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e0c1      	b.n	8016036 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    }

    __HAL_LOCK(huart);
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015eb8:	2b01      	cmp	r3, #1
 8015eba:	d101      	bne.n	8015ec0 <HAL_UARTEx_ReceiveToIdle+0x3c>
 8015ebc:	2302      	movs	r3, #2
 8015ebe:	e0ba      	b.n	8016036 <HAL_UARTEx_ReceiveToIdle+0x1b2>
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ec8:	68fb      	ldr	r3, [r7, #12]
 8015eca:	2200      	movs	r2, #0
 8015ecc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	2222      	movs	r2, #34	; 0x22
 8015ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	2201      	movs	r2, #1
 8015eda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015edc:	f7f0 fba6 	bl	800662c <HAL_GetTick>
 8015ee0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	88fa      	ldrh	r2, [r7, #6]
 8015ee6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	88fa      	ldrh	r2, [r7, #6]
 8015eec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	689b      	ldr	r3, [r3, #8]
 8015ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ef6:	d108      	bne.n	8015f0a <HAL_UARTEx_ReceiveToIdle+0x86>
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	691b      	ldr	r3, [r3, #16]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d104      	bne.n	8015f0a <HAL_UARTEx_ReceiveToIdle+0x86>
    {
      pdata8bits  = NULL;
 8015f00:	2300      	movs	r3, #0
 8015f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015f04:	68bb      	ldr	r3, [r7, #8]
 8015f06:	61bb      	str	r3, [r7, #24]
 8015f08:	e003      	b.n	8015f12 <HAL_UARTEx_ReceiveToIdle+0x8e>
    }
    else
    {
      pdata8bits  = pData;
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015f0e:	2300      	movs	r3, #0
 8015f10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	2200      	movs	r2, #0
 8015f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8015f1a:	683b      	ldr	r3, [r7, #0]
 8015f1c:	2200      	movs	r2, #0
 8015f1e:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8015f20:	e074      	b.n	801600c <HAL_UARTEx_ReceiveToIdle+0x188>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	f003 0310 	and.w	r3, r3, #16
 8015f2c:	2b10      	cmp	r3, #16
 8015f2e:	d114      	bne.n	8015f5a <HAL_UARTEx_ReceiveToIdle+0xd6>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8015f30:	2300      	movs	r3, #0
 8015f32:	613b      	str	r3, [r7, #16]
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	613b      	str	r3, [r7, #16]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	685b      	ldr	r3, [r3, #4]
 8015f42:	613b      	str	r3, [r7, #16]
 8015f44:	693b      	ldr	r3, [r7, #16]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8015f46:	683b      	ldr	r3, [r7, #0]
 8015f48:	881b      	ldrh	r3, [r3, #0]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d005      	beq.n	8015f5a <HAL_UARTEx_ReceiveToIdle+0xd6>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	2220      	movs	r2, #32
 8015f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_OK;
 8015f56:	2300      	movs	r3, #0
 8015f58:	e06d      	b.n	8016036 <HAL_UARTEx_ReceiveToIdle+0x1b2>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	f003 0320 	and.w	r3, r3, #32
 8015f64:	2b20      	cmp	r3, #32
 8015f66:	d13c      	bne.n	8015fe2 <HAL_UARTEx_ReceiveToIdle+0x15e>
      {
        if (pdata8bits == NULL)
 8015f68:	69fb      	ldr	r3, [r7, #28]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d10c      	bne.n	8015f88 <HAL_UARTEx_ReceiveToIdle+0x104>
        {
          *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	685b      	ldr	r3, [r3, #4]
 8015f74:	b29b      	uxth	r3, r3
 8015f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015f7a:	b29a      	uxth	r2, r3
 8015f7c:	69bb      	ldr	r3, [r7, #24]
 8015f7e:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8015f80:	69bb      	ldr	r3, [r7, #24]
 8015f82:	3302      	adds	r3, #2
 8015f84:	61bb      	str	r3, [r7, #24]
 8015f86:	e01f      	b.n	8015fc8 <HAL_UARTEx_ReceiveToIdle+0x144>
        }
        else
        {
          if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8015f88:	68fb      	ldr	r3, [r7, #12]
 8015f8a:	689b      	ldr	r3, [r3, #8]
 8015f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015f90:	d007      	beq.n	8015fa2 <HAL_UARTEx_ReceiveToIdle+0x11e>
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	689b      	ldr	r3, [r3, #8]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d10a      	bne.n	8015fb0 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	691b      	ldr	r3, [r3, #16]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d106      	bne.n	8015fb0 <HAL_UARTEx_ReceiveToIdle+0x12c>
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	b2da      	uxtb	r2, r3
 8015faa:	69fb      	ldr	r3, [r7, #28]
 8015fac:	701a      	strb	r2, [r3, #0]
 8015fae:	e008      	b.n	8015fc2 <HAL_UARTEx_ReceiveToIdle+0x13e>
          }
          else
          {
            *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	685b      	ldr	r3, [r3, #4]
 8015fb6:	b2db      	uxtb	r3, r3
 8015fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fbc:	b2da      	uxtb	r2, r3
 8015fbe:	69fb      	ldr	r3, [r7, #28]
 8015fc0:	701a      	strb	r2, [r3, #0]
          }

          pdata8bits++;
 8015fc2:	69fb      	ldr	r3, [r7, #28]
 8015fc4:	3301      	adds	r3, #1
 8015fc6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	881b      	ldrh	r3, [r3, #0]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	683b      	ldr	r3, [r7, #0]
 8015fd2:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8015fd8:	b29b      	uxth	r3, r3
 8015fda:	3b01      	subs	r3, #1
 8015fdc:	b29a      	uxth	r2, r3
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015fe8:	d010      	beq.n	801600c <HAL_UARTEx_ReceiveToIdle+0x188>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015fea:	f7f0 fb1f 	bl	800662c <HAL_GetTick>
 8015fee:	4602      	mov	r2, r0
 8015ff0:	697b      	ldr	r3, [r7, #20]
 8015ff2:	1ad3      	subs	r3, r2, r3
 8015ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d302      	bcc.n	8016000 <HAL_UARTEx_ReceiveToIdle+0x17c>
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d105      	bne.n	801600c <HAL_UARTEx_ReceiveToIdle+0x188>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	2220      	movs	r2, #32
 8016004:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

          return HAL_TIMEOUT;
 8016008:	2303      	movs	r3, #3
 801600a:	e014      	b.n	8016036 <HAL_UARTEx_ReceiveToIdle+0x1b2>
    while (huart->RxXferCount > 0U)
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016010:	b29b      	uxth	r3, r3
 8016012:	2b00      	cmp	r3, #0
 8016014:	d185      	bne.n	8015f22 <HAL_UARTEx_ReceiveToIdle+0x9e>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801601e:	b29b      	uxth	r3, r3
 8016020:	1ad3      	subs	r3, r2, r3
 8016022:	b29a      	uxth	r2, r3
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	2220      	movs	r2, #32
 801602c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8016030:	2300      	movs	r3, #0
 8016032:	e000      	b.n	8016036 <HAL_UARTEx_ReceiveToIdle+0x1b2>
  }
  else
  {
    return HAL_BUSY;
 8016034:	2302      	movs	r3, #2
  }
}
 8016036:	4618      	mov	r0, r3
 8016038:	3720      	adds	r7, #32
 801603a:	46bd      	mov	sp, r7
 801603c:	bd80      	pop	{r7, pc}

0801603e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801603e:	b580      	push	{r7, lr}
 8016040:	b08c      	sub	sp, #48	; 0x30
 8016042:	af00      	add	r7, sp, #0
 8016044:	60f8      	str	r0, [r7, #12]
 8016046:	60b9      	str	r1, [r7, #8]
 8016048:	4613      	mov	r3, r2
 801604a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8016052:	b2db      	uxtb	r3, r3
 8016054:	2b20      	cmp	r3, #32
 8016056:	d152      	bne.n	80160fe <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d002      	beq.n	8016064 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 801605e:	88fb      	ldrh	r3, [r7, #6]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d101      	bne.n	8016068 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8016064:	2301      	movs	r3, #1
 8016066:	e04b      	b.n	8016100 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801606e:	2b01      	cmp	r3, #1
 8016070:	d101      	bne.n	8016076 <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 8016072:	2302      	movs	r3, #2
 8016074:	e044      	b.n	8016100 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	2201      	movs	r2, #1
 801607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	2201      	movs	r2, #1
 8016082:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8016084:	88fb      	ldrh	r3, [r7, #6]
 8016086:	461a      	mov	r2, r3
 8016088:	68b9      	ldr	r1, [r7, #8]
 801608a:	68f8      	ldr	r0, [r7, #12]
 801608c:	f001 fab8 	bl	8017600 <UART_Start_Receive_IT>
 8016090:	4603      	mov	r3, r0
 8016092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801609a:	2b00      	cmp	r3, #0
 801609c:	d12c      	bne.n	80160f8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d125      	bne.n	80160f2 <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80160a6:	2300      	movs	r3, #0
 80160a8:	613b      	str	r3, [r7, #16]
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	613b      	str	r3, [r7, #16]
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	613b      	str	r3, [r7, #16]
 80160ba:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	330c      	adds	r3, #12
 80160c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80160c4:	69bb      	ldr	r3, [r7, #24]
 80160c6:	e853 3f00 	ldrex	r3, [r3]
 80160ca:	617b      	str	r3, [r7, #20]
   return(result);
 80160cc:	697b      	ldr	r3, [r7, #20]
 80160ce:	f043 0310 	orr.w	r3, r3, #16
 80160d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	330c      	adds	r3, #12
 80160da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80160dc:	627a      	str	r2, [r7, #36]	; 0x24
 80160de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160e0:	6a39      	ldr	r1, [r7, #32]
 80160e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160e4:	e841 2300 	strex	r3, r2, [r1]
 80160e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80160ea:	69fb      	ldr	r3, [r7, #28]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1e5      	bne.n	80160bc <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 80160f0:	e002      	b.n	80160f8 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80160f2:	2301      	movs	r3, #1
 80160f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80160f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80160fc:	e000      	b.n	8016100 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80160fe:	2302      	movs	r3, #2
  }
}
 8016100:	4618      	mov	r0, r3
 8016102:	3730      	adds	r7, #48	; 0x30
 8016104:	46bd      	mov	sp, r7
 8016106:	bd80      	pop	{r7, pc}

08016108 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8016108:	b580      	push	{r7, lr}
 801610a:	b08c      	sub	sp, #48	; 0x30
 801610c:	af00      	add	r7, sp, #0
 801610e:	60f8      	str	r0, [r7, #12]
 8016110:	60b9      	str	r1, [r7, #8]
 8016112:	4613      	mov	r3, r2
 8016114:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801611c:	b2db      	uxtb	r3, r3
 801611e:	2b20      	cmp	r3, #32
 8016120:	d152      	bne.n	80161c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d002      	beq.n	801612e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8016128:	88fb      	ldrh	r3, [r7, #6]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d101      	bne.n	8016132 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 801612e:	2301      	movs	r3, #1
 8016130:	e04b      	b.n	80161ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016138:	2b01      	cmp	r3, #1
 801613a:	d101      	bne.n	8016140 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 801613c:	2302      	movs	r3, #2
 801613e:	e044      	b.n	80161ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2201      	movs	r2, #1
 8016144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2201      	movs	r2, #1
 801614c:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801614e:	88fb      	ldrh	r3, [r7, #6]
 8016150:	461a      	mov	r2, r3
 8016152:	68b9      	ldr	r1, [r7, #8]
 8016154:	68f8      	ldr	r0, [r7, #12]
 8016156:	f001 fa8d 	bl	8017674 <UART_Start_Receive_DMA>
 801615a:	4603      	mov	r3, r0
 801615c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8016160:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016164:	2b00      	cmp	r3, #0
 8016166:	d12c      	bne.n	80161c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801616c:	2b01      	cmp	r3, #1
 801616e:	d125      	bne.n	80161bc <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016170:	2300      	movs	r3, #0
 8016172:	613b      	str	r3, [r7, #16]
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	681b      	ldr	r3, [r3, #0]
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	613b      	str	r3, [r7, #16]
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	613b      	str	r3, [r7, #16]
 8016184:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	330c      	adds	r3, #12
 801618c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	e853 3f00 	ldrex	r3, [r3]
 8016194:	617b      	str	r3, [r7, #20]
   return(result);
 8016196:	697b      	ldr	r3, [r7, #20]
 8016198:	f043 0310 	orr.w	r3, r3, #16
 801619c:	62bb      	str	r3, [r7, #40]	; 0x28
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	330c      	adds	r3, #12
 80161a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161a6:	627a      	str	r2, [r7, #36]	; 0x24
 80161a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161aa:	6a39      	ldr	r1, [r7, #32]
 80161ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161ae:	e841 2300 	strex	r3, r2, [r1]
 80161b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d1e5      	bne.n	8016186 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 80161ba:	e002      	b.n	80161c2 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80161bc:	2301      	movs	r3, #1
 80161be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80161c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80161c6:	e000      	b.n	80161ca <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80161c8:	2302      	movs	r3, #2
  }
}
 80161ca:	4618      	mov	r0, r3
 80161cc:	3730      	adds	r7, #48	; 0x30
 80161ce:	46bd      	mov	sp, r7
 80161d0:	bd80      	pop	{r7, pc}

080161d2 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80161d2:	b580      	push	{r7, lr}
 80161d4:	b0a0      	sub	sp, #128	; 0x80
 80161d6:	af00      	add	r7, sp, #0
 80161d8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	681b      	ldr	r3, [r3, #0]
 80161de:	330c      	adds	r3, #12
 80161e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80161e4:	e853 3f00 	ldrex	r3, [r3]
 80161e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80161ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80161ec:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80161f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	330c      	adds	r3, #12
 80161f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80161fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80161fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016200:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016202:	e841 2300 	strex	r3, r2, [r1]
 8016206:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016208:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801620a:	2b00      	cmp	r3, #0
 801620c:	d1e5      	bne.n	80161da <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	3314      	adds	r3, #20
 8016214:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016218:	e853 3f00 	ldrex	r3, [r3]
 801621c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 801621e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016220:	f023 0301 	bic.w	r3, r3, #1
 8016224:	67bb      	str	r3, [r7, #120]	; 0x78
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	3314      	adds	r3, #20
 801622c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801622e:	657a      	str	r2, [r7, #84]	; 0x54
 8016230:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016234:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016236:	e841 2300 	strex	r3, r2, [r1]
 801623a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801623c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1e5      	bne.n	801620e <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016246:	2b01      	cmp	r3, #1
 8016248:	d119      	bne.n	801627e <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	330c      	adds	r3, #12
 8016250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016254:	e853 3f00 	ldrex	r3, [r3]
 8016258:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625c:	f023 0310 	bic.w	r3, r3, #16
 8016260:	677b      	str	r3, [r7, #116]	; 0x74
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	330c      	adds	r3, #12
 8016268:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801626a:	643a      	str	r2, [r7, #64]	; 0x40
 801626c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801626e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016272:	e841 2300 	strex	r3, r2, [r1]
 8016276:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801627a:	2b00      	cmp	r3, #0
 801627c:	d1e5      	bne.n	801624a <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	695b      	ldr	r3, [r3, #20]
 8016284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016288:	2b80      	cmp	r3, #128	; 0x80
 801628a:	d136      	bne.n	80162fa <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	3314      	adds	r3, #20
 8016292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016294:	6a3b      	ldr	r3, [r7, #32]
 8016296:	e853 3f00 	ldrex	r3, [r3]
 801629a:	61fb      	str	r3, [r7, #28]
   return(result);
 801629c:	69fb      	ldr	r3, [r7, #28]
 801629e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80162a2:	673b      	str	r3, [r7, #112]	; 0x70
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	3314      	adds	r3, #20
 80162aa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80162ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80162ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80162b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162b4:	e841 2300 	strex	r3, r2, [r1]
 80162b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80162ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d1e5      	bne.n	801628c <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d018      	beq.n	80162fa <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162cc:	2200      	movs	r2, #0
 80162ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f1 fc6a 	bl	8007bae <HAL_DMA_Abort>
 80162da:	4603      	mov	r3, r0
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d00c      	beq.n	80162fa <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162e4:	4618      	mov	r0, r3
 80162e6:	f7f2 f826 	bl	8008336 <HAL_DMA_GetError>
 80162ea:	4603      	mov	r3, r0
 80162ec:	2b20      	cmp	r3, #32
 80162ee:	d104      	bne.n	80162fa <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2210      	movs	r2, #16
 80162f4:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80162f6:	2303      	movs	r3, #3
 80162f8:	e052      	b.n	80163a0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	695b      	ldr	r3, [r3, #20]
 8016300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016304:	2b40      	cmp	r3, #64	; 0x40
 8016306:	d136      	bne.n	8016376 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	3314      	adds	r3, #20
 801630e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	e853 3f00 	ldrex	r3, [r3]
 8016316:	60bb      	str	r3, [r7, #8]
   return(result);
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801631e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	3314      	adds	r3, #20
 8016326:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016328:	61ba      	str	r2, [r7, #24]
 801632a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801632c:	6979      	ldr	r1, [r7, #20]
 801632e:	69ba      	ldr	r2, [r7, #24]
 8016330:	e841 2300 	strex	r3, r2, [r1]
 8016334:	613b      	str	r3, [r7, #16]
   return(result);
 8016336:	693b      	ldr	r3, [r7, #16]
 8016338:	2b00      	cmp	r3, #0
 801633a:	d1e5      	bne.n	8016308 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016340:	2b00      	cmp	r3, #0
 8016342:	d018      	beq.n	8016376 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016348:	2200      	movs	r2, #0
 801634a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016350:	4618      	mov	r0, r3
 8016352:	f7f1 fc2c 	bl	8007bae <HAL_DMA_Abort>
 8016356:	4603      	mov	r3, r0
 8016358:	2b00      	cmp	r3, #0
 801635a:	d00c      	beq.n	8016376 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016360:	4618      	mov	r0, r3
 8016362:	f7f1 ffe8 	bl	8008336 <HAL_DMA_GetError>
 8016366:	4603      	mov	r3, r0
 8016368:	2b20      	cmp	r3, #32
 801636a:	d104      	bne.n	8016376 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	2210      	movs	r2, #16
 8016370:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8016372:	2303      	movs	r3, #3
 8016374:	e014      	b.n	80163a0 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	2200      	movs	r2, #0
 801637a:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	2200      	movs	r2, #0
 8016380:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	2200      	movs	r2, #0
 8016386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	2220      	movs	r2, #32
 801638c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	2220      	movs	r2, #32
 8016394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2200      	movs	r2, #0
 801639c:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 801639e:	2300      	movs	r3, #0
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3780      	adds	r7, #128	; 0x80
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}

080163a8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80163a8:	b580      	push	{r7, lr}
 80163aa:	b08e      	sub	sp, #56	; 0x38
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	330c      	adds	r3, #12
 80163b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163b8:	6a3b      	ldr	r3, [r7, #32]
 80163ba:	e853 3f00 	ldrex	r3, [r3]
 80163be:	61fb      	str	r3, [r7, #28]
   return(result);
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80163c6:	637b      	str	r3, [r7, #52]	; 0x34
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	330c      	adds	r3, #12
 80163ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80163d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80163d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163d8:	e841 2300 	strex	r3, r2, [r1]
 80163dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80163de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d1e5      	bne.n	80163b0 <HAL_UART_AbortTransmit+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	695b      	ldr	r3, [r3, #20]
 80163ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80163ee:	2b80      	cmp	r3, #128	; 0x80
 80163f0:	d136      	bne.n	8016460 <HAL_UART_AbortTransmit+0xb8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	3314      	adds	r3, #20
 80163f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	e853 3f00 	ldrex	r3, [r3]
 8016400:	60bb      	str	r3, [r7, #8]
   return(result);
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016408:	633b      	str	r3, [r7, #48]	; 0x30
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	3314      	adds	r3, #20
 8016410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016412:	61ba      	str	r2, [r7, #24]
 8016414:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016416:	6979      	ldr	r1, [r7, #20]
 8016418:	69ba      	ldr	r2, [r7, #24]
 801641a:	e841 2300 	strex	r3, r2, [r1]
 801641e:	613b      	str	r3, [r7, #16]
   return(result);
 8016420:	693b      	ldr	r3, [r7, #16]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d1e5      	bne.n	80163f2 <HAL_UART_AbortTransmit+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801642a:	2b00      	cmp	r3, #0
 801642c:	d018      	beq.n	8016460 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016432:	2200      	movs	r2, #0
 8016434:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801643a:	4618      	mov	r0, r3
 801643c:	f7f1 fbb7 	bl	8007bae <HAL_DMA_Abort>
 8016440:	4603      	mov	r3, r0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d00c      	beq.n	8016460 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801644a:	4618      	mov	r0, r3
 801644c:	f7f1 ff73 	bl	8008336 <HAL_DMA_GetError>
 8016450:	4603      	mov	r3, r0
 8016452:	2b20      	cmp	r3, #32
 8016454:	d104      	bne.n	8016460 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	2210      	movs	r2, #16
 801645a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801645c:	2303      	movs	r3, #3
 801645e:	e007      	b.n	8016470 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0x00U;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2200      	movs	r2, #0
 8016464:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	2220      	movs	r2, #32
 801646a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801646e:	2300      	movs	r3, #0
}
 8016470:	4618      	mov	r0, r3
 8016472:	3738      	adds	r7, #56	; 0x38
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8016478:	b580      	push	{r7, lr}
 801647a:	b09a      	sub	sp, #104	; 0x68
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	330c      	adds	r3, #12
 8016486:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801648a:	e853 3f00 	ldrex	r3, [r3]
 801648e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016490:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016496:	667b      	str	r3, [r7, #100]	; 0x64
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	330c      	adds	r3, #12
 801649e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80164a0:	657a      	str	r2, [r7, #84]	; 0x54
 80164a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80164a8:	e841 2300 	strex	r3, r2, [r1]
 80164ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80164ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1e5      	bne.n	8016480 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	3314      	adds	r3, #20
 80164ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164be:	e853 3f00 	ldrex	r3, [r3]
 80164c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80164c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c6:	f023 0301 	bic.w	r3, r3, #1
 80164ca:	663b      	str	r3, [r7, #96]	; 0x60
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	3314      	adds	r3, #20
 80164d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80164d4:	643a      	str	r2, [r7, #64]	; 0x40
 80164d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80164da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80164dc:	e841 2300 	strex	r3, r2, [r1]
 80164e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80164e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d1e5      	bne.n	80164b4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80164ec:	2b01      	cmp	r3, #1
 80164ee:	d119      	bne.n	8016524 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	330c      	adds	r3, #12
 80164f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80164f8:	6a3b      	ldr	r3, [r7, #32]
 80164fa:	e853 3f00 	ldrex	r3, [r3]
 80164fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016500:	69fb      	ldr	r3, [r7, #28]
 8016502:	f023 0310 	bic.w	r3, r3, #16
 8016506:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	330c      	adds	r3, #12
 801650e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016518:	e841 2300 	strex	r3, r2, [r1]
 801651c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1e5      	bne.n	80164f0 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	695b      	ldr	r3, [r3, #20]
 801652a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801652e:	2b40      	cmp	r3, #64	; 0x40
 8016530:	d136      	bne.n	80165a0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	3314      	adds	r3, #20
 8016538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	e853 3f00 	ldrex	r3, [r3]
 8016540:	60bb      	str	r3, [r7, #8]
   return(result);
 8016542:	68bb      	ldr	r3, [r7, #8]
 8016544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016548:	65bb      	str	r3, [r7, #88]	; 0x58
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	3314      	adds	r3, #20
 8016550:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016552:	61ba      	str	r2, [r7, #24]
 8016554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016556:	6979      	ldr	r1, [r7, #20]
 8016558:	69ba      	ldr	r2, [r7, #24]
 801655a:	e841 2300 	strex	r3, r2, [r1]
 801655e:	613b      	str	r3, [r7, #16]
   return(result);
 8016560:	693b      	ldr	r3, [r7, #16]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1e5      	bne.n	8016532 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801656a:	2b00      	cmp	r3, #0
 801656c:	d018      	beq.n	80165a0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016572:	2200      	movs	r2, #0
 8016574:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801657a:	4618      	mov	r0, r3
 801657c:	f7f1 fb17 	bl	8007bae <HAL_DMA_Abort>
 8016580:	4603      	mov	r3, r0
 8016582:	2b00      	cmp	r3, #0
 8016584:	d00c      	beq.n	80165a0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801658a:	4618      	mov	r0, r3
 801658c:	f7f1 fed3 	bl	8008336 <HAL_DMA_GetError>
 8016590:	4603      	mov	r3, r0
 8016592:	2b20      	cmp	r3, #32
 8016594:	d104      	bne.n	80165a0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	2210      	movs	r2, #16
 801659a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 801659c:	2303      	movs	r3, #3
 801659e:	e00a      	b.n	80165b6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	2200      	movs	r2, #0
 80165a4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2220      	movs	r2, #32
 80165aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2200      	movs	r2, #0
 80165b2:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80165b4:	2300      	movs	r3, #0
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3768      	adds	r7, #104	; 0x68
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}

080165be <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80165be:	b580      	push	{r7, lr}
 80165c0:	b0a2      	sub	sp, #136	; 0x88
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80165c6:	2301      	movs	r3, #1
 80165c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	330c      	adds	r3, #12
 80165d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80165d6:	e853 3f00 	ldrex	r3, [r3]
 80165da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80165dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80165de:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80165e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	330c      	adds	r3, #12
 80165ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80165f0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80165f2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80165f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80165f8:	e841 2300 	strex	r3, r2, [r1]
 80165fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80165fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016600:	2b00      	cmp	r3, #0
 8016602:	d1e3      	bne.n	80165cc <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	681b      	ldr	r3, [r3, #0]
 8016608:	3314      	adds	r3, #20
 801660a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801660c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801660e:	e853 3f00 	ldrex	r3, [r3]
 8016612:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016616:	f023 0301 	bic.w	r3, r3, #1
 801661a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	3314      	adds	r3, #20
 8016622:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016624:	65ba      	str	r2, [r7, #88]	; 0x58
 8016626:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016628:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801662a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801662c:	e841 2300 	strex	r3, r2, [r1]
 8016630:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016634:	2b00      	cmp	r3, #0
 8016636:	d1e5      	bne.n	8016604 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801663c:	2b01      	cmp	r3, #1
 801663e:	d119      	bne.n	8016674 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	330c      	adds	r3, #12
 8016646:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801664a:	e853 3f00 	ldrex	r3, [r3]
 801664e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016652:	f023 0310 	bic.w	r3, r3, #16
 8016656:	67bb      	str	r3, [r7, #120]	; 0x78
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	681b      	ldr	r3, [r3, #0]
 801665c:	330c      	adds	r3, #12
 801665e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8016660:	647a      	str	r2, [r7, #68]	; 0x44
 8016662:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016664:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016668:	e841 2300 	strex	r3, r2, [r1]
 801666c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801666e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016670:	2b00      	cmp	r3, #0
 8016672:	d1e5      	bne.n	8016640 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016678:	2b00      	cmp	r3, #0
 801667a:	d00f      	beq.n	801669c <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	695b      	ldr	r3, [r3, #20]
 8016682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016686:	2b80      	cmp	r3, #128	; 0x80
 8016688:	d104      	bne.n	8016694 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801668e:	4a54      	ldr	r2, [pc, #336]	; (80167e0 <HAL_UART_Abort_IT+0x222>)
 8016690:	651a      	str	r2, [r3, #80]	; 0x50
 8016692:	e003      	b.n	801669c <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016698:	2200      	movs	r2, #0
 801669a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d00f      	beq.n	80166c4 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	695b      	ldr	r3, [r3, #20]
 80166aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80166ae:	2b40      	cmp	r3, #64	; 0x40
 80166b0:	d104      	bne.n	80166bc <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166b6:	4a4b      	ldr	r2, [pc, #300]	; (80167e4 <HAL_UART_Abort_IT+0x226>)
 80166b8:	651a      	str	r2, [r3, #80]	; 0x50
 80166ba:	e003      	b.n	80166c4 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166c0:	2200      	movs	r2, #0
 80166c2:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	695b      	ldr	r3, [r3, #20]
 80166ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166ce:	2b80      	cmp	r3, #128	; 0x80
 80166d0:	d12d      	bne.n	801672e <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	3314      	adds	r3, #20
 80166d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166dc:	e853 3f00 	ldrex	r3, [r3]
 80166e0:	623b      	str	r3, [r7, #32]
   return(result);
 80166e2:	6a3b      	ldr	r3, [r7, #32]
 80166e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80166e8:	677b      	str	r3, [r7, #116]	; 0x74
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	3314      	adds	r3, #20
 80166f0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80166f2:	633a      	str	r2, [r7, #48]	; 0x30
 80166f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80166f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80166fa:	e841 2300 	strex	r3, r2, [r1]
 80166fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016702:	2b00      	cmp	r3, #0
 8016704:	d1e5      	bne.n	80166d2 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801670a:	2b00      	cmp	r3, #0
 801670c:	d00f      	beq.n	801672e <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016712:	4618      	mov	r0, r3
 8016714:	f7f1 fabb 	bl	8007c8e <HAL_DMA_Abort_IT>
 8016718:	4603      	mov	r3, r0
 801671a:	2b00      	cmp	r3, #0
 801671c:	d004      	beq.n	8016728 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016722:	2200      	movs	r2, #0
 8016724:	651a      	str	r2, [r3, #80]	; 0x50
 8016726:	e002      	b.n	801672e <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8016728:	2300      	movs	r3, #0
 801672a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	695b      	ldr	r3, [r3, #20]
 8016734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016738:	2b40      	cmp	r3, #64	; 0x40
 801673a:	d130      	bne.n	801679e <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	3314      	adds	r3, #20
 8016742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	e853 3f00 	ldrex	r3, [r3]
 801674a:	60fb      	str	r3, [r7, #12]
   return(result);
 801674c:	68fb      	ldr	r3, [r7, #12]
 801674e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016752:	673b      	str	r3, [r7, #112]	; 0x70
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	3314      	adds	r3, #20
 801675a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801675c:	61fa      	str	r2, [r7, #28]
 801675e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016760:	69b9      	ldr	r1, [r7, #24]
 8016762:	69fa      	ldr	r2, [r7, #28]
 8016764:	e841 2300 	strex	r3, r2, [r1]
 8016768:	617b      	str	r3, [r7, #20]
   return(result);
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d1e5      	bne.n	801673c <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016774:	2b00      	cmp	r3, #0
 8016776:	d012      	beq.n	801679e <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801677c:	4618      	mov	r0, r3
 801677e:	f7f1 fa86 	bl	8007c8e <HAL_DMA_Abort_IT>
 8016782:	4603      	mov	r3, r0
 8016784:	2b00      	cmp	r3, #0
 8016786:	d007      	beq.n	8016798 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678c:	2200      	movs	r2, #0
 801678e:	651a      	str	r2, [r3, #80]	; 0x50
        AbortCplt = 0x01U;
 8016790:	2301      	movs	r3, #1
 8016792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016796:	e002      	b.n	801679e <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 8016798:	2300      	movs	r3, #0
 801679a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 801679e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80167a2:	2b01      	cmp	r3, #1
 80167a4:	d116      	bne.n	80167d4 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	2200      	movs	r2, #0
 80167aa:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	2200      	movs	r2, #0
 80167b0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2200      	movs	r2, #0
 80167b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	2220      	movs	r2, #32
 80167bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    huart->RxState = HAL_UART_STATE_READY;
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	2220      	movs	r2, #32
 80167c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	2200      	movs	r2, #0
 80167cc:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 fbe5 	bl	8016f9e <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80167d4:	2300      	movs	r3, #0
}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3788      	adds	r7, #136	; 0x88
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}
 80167de:	bf00      	nop
 80167e0:	080178e7 	.word	0x080178e7
 80167e4:	08017947 	.word	0x08017947

080167e8 <HAL_UART_AbortTransmit_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
{
 80167e8:	b580      	push	{r7, lr}
 80167ea:	b08e      	sub	sp, #56	; 0x38
 80167ec:	af00      	add	r7, sp, #0
 80167ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	681b      	ldr	r3, [r3, #0]
 80167f4:	330c      	adds	r3, #12
 80167f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80167f8:	6a3b      	ldr	r3, [r7, #32]
 80167fa:	e853 3f00 	ldrex	r3, [r3]
 80167fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8016806:	637b      	str	r3, [r7, #52]	; 0x34
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	330c      	adds	r3, #12
 801680e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016810:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016812:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016818:	e841 2300 	strex	r3, r2, [r1]
 801681c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1e5      	bne.n	80167f0 <HAL_UART_AbortTransmit_IT+0x8>

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	695b      	ldr	r3, [r3, #20]
 801682a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801682e:	2b80      	cmp	r3, #128	; 0x80
 8016830:	d13c      	bne.n	80168ac <HAL_UART_AbortTransmit_IT+0xc4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	3314      	adds	r3, #20
 8016838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801683a:	68fb      	ldr	r3, [r7, #12]
 801683c:	e853 3f00 	ldrex	r3, [r3]
 8016840:	60bb      	str	r3, [r7, #8]
   return(result);
 8016842:	68bb      	ldr	r3, [r7, #8]
 8016844:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016848:	633b      	str	r3, [r7, #48]	; 0x30
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	3314      	adds	r3, #20
 8016850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016852:	61ba      	str	r2, [r7, #24]
 8016854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016856:	6979      	ldr	r1, [r7, #20]
 8016858:	69ba      	ldr	r2, [r7, #24]
 801685a:	e841 2300 	strex	r3, r2, [r1]
 801685e:	613b      	str	r3, [r7, #16]
   return(result);
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d1e5      	bne.n	8016832 <HAL_UART_AbortTransmit_IT+0x4a>

    /* Abort the UART DMA Tx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801686a:	2b00      	cmp	r3, #0
 801686c:	d013      	beq.n	8016896 <HAL_UART_AbortTransmit_IT+0xae>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016872:	4a16      	ldr	r2, [pc, #88]	; (80168cc <HAL_UART_AbortTransmit_IT+0xe4>)
 8016874:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801687a:	4618      	mov	r0, r3
 801687c:	f7f1 fa07 	bl	8007c8e <HAL_DMA_Abort_IT>
 8016880:	4603      	mov	r3, r0
 8016882:	2b00      	cmp	r3, #0
 8016884:	d01c      	beq.n	80168c0 <HAL_UART_AbortTransmit_IT+0xd8>
      {
        /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
        huart->hdmatx->XferAbortCallback(huart->hdmatx);
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801688a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801688c:	687a      	ldr	r2, [r7, #4]
 801688e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8016890:	4610      	mov	r0, r2
 8016892:	4798      	blx	r3
 8016894:	e014      	b.n	80168c0 <HAL_UART_AbortTransmit_IT+0xd8>
      }
    }
    else
    {
      /* Reset Tx transfer counter */
      huart->TxXferCount = 0x00U;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2200      	movs	r2, #0
 801689a:	84da      	strh	r2, [r3, #38]	; 0x26

      /* Restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2220      	movs	r2, #32
 80168a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Transmit Complete Callback */
      huart->AbortTransmitCpltCallback(huart);
#else
      /* Call legacy weak Abort Transmit Complete Callback */
      HAL_UART_AbortTransmitCpltCallback(huart);
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 fb84 	bl	8016fb2 <HAL_UART_AbortTransmitCpltCallback>
 80168aa:	e009      	b.n	80168c0 <HAL_UART_AbortTransmit_IT+0xd8>
    }
  }
  else
  {
    /* Reset Tx transfer counter */
    huart->TxXferCount = 0x00U;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2220      	movs	r2, #32
 80168b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Transmit Complete Callback */
    huart->AbortTransmitCpltCallback(huart);
#else
    /* Call legacy weak Abort Transmit Complete Callback */
    HAL_UART_AbortTransmitCpltCallback(huart);
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 fb79 	bl	8016fb2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80168c0:	2300      	movs	r3, #0
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3738      	adds	r7, #56	; 0x38
 80168c6:	46bd      	mov	sp, r7
 80168c8:	bd80      	pop	{r7, pc}
 80168ca:	bf00      	nop
 80168cc:	080179a7 	.word	0x080179a7

080168d0 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b09a      	sub	sp, #104	; 0x68
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	330c      	adds	r3, #12
 80168de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168e2:	e853 3f00 	ldrex	r3, [r3]
 80168e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80168e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80168ee:	667b      	str	r3, [r7, #100]	; 0x64
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	330c      	adds	r3, #12
 80168f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80168f8:	657a      	str	r2, [r7, #84]	; 0x54
 80168fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80168fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016900:	e841 2300 	strex	r3, r2, [r1]
 8016904:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016908:	2b00      	cmp	r3, #0
 801690a:	d1e5      	bne.n	80168d8 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	3314      	adds	r3, #20
 8016912:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016916:	e853 3f00 	ldrex	r3, [r3]
 801691a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691e:	f023 0301 	bic.w	r3, r3, #1
 8016922:	663b      	str	r3, [r7, #96]	; 0x60
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	3314      	adds	r3, #20
 801692a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801692c:	643a      	str	r2, [r7, #64]	; 0x40
 801692e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016932:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016934:	e841 2300 	strex	r3, r2, [r1]
 8016938:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801693a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801693c:	2b00      	cmp	r3, #0
 801693e:	d1e5      	bne.n	801690c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016944:	2b01      	cmp	r3, #1
 8016946:	d119      	bne.n	801697c <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	330c      	adds	r3, #12
 801694e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016950:	6a3b      	ldr	r3, [r7, #32]
 8016952:	e853 3f00 	ldrex	r3, [r3]
 8016956:	61fb      	str	r3, [r7, #28]
   return(result);
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	f023 0310 	bic.w	r3, r3, #16
 801695e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	330c      	adds	r3, #12
 8016966:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016968:	62fa      	str	r2, [r7, #44]	; 0x2c
 801696a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801696c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016970:	e841 2300 	strex	r3, r2, [r1]
 8016974:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	2b00      	cmp	r3, #0
 801697a:	d1e5      	bne.n	8016948 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	695b      	ldr	r3, [r3, #20]
 8016982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016986:	2b40      	cmp	r3, #64	; 0x40
 8016988:	d13f      	bne.n	8016a0a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	3314      	adds	r3, #20
 8016990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	e853 3f00 	ldrex	r3, [r3]
 8016998:	60bb      	str	r3, [r7, #8]
   return(result);
 801699a:	68bb      	ldr	r3, [r7, #8]
 801699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80169a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	3314      	adds	r3, #20
 80169a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80169aa:	61ba      	str	r2, [r7, #24]
 80169ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169ae:	6979      	ldr	r1, [r7, #20]
 80169b0:	69ba      	ldr	r2, [r7, #24]
 80169b2:	e841 2300 	strex	r3, r2, [r1]
 80169b6:	613b      	str	r3, [r7, #16]
   return(result);
 80169b8:	693b      	ldr	r3, [r7, #16]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d1e5      	bne.n	801698a <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d013      	beq.n	80169ee <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169ca:	4a19      	ldr	r2, [pc, #100]	; (8016a30 <HAL_UART_AbortReceive_IT+0x160>)
 80169cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7f1 f95b 	bl	8007c8e <HAL_DMA_Abort_IT>
 80169d8:	4603      	mov	r3, r0
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d022      	beq.n	8016a24 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169e4:	687a      	ldr	r2, [r7, #4]
 80169e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80169e8:	4610      	mov	r0, r2
 80169ea:	4798      	blx	r3
 80169ec:	e01a      	b.n	8016a24 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2200      	movs	r2, #0
 80169f2:	85da      	strh	r2, [r3, #46]	; 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2220      	movs	r2, #32
 80169f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 fadf 	bl	8016fc6 <HAL_UART_AbortReceiveCpltCallback>
 8016a08:	e00c      	b.n	8016a24 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2220      	movs	r2, #32
 8016a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8016a1e:	6878      	ldr	r0, [r7, #4]
 8016a20:	f000 fad1 	bl	8016fc6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8016a24:	2300      	movs	r3, #0
}
 8016a26:	4618      	mov	r0, r3
 8016a28:	3768      	adds	r7, #104	; 0x68
 8016a2a:	46bd      	mov	sp, r7
 8016a2c:	bd80      	pop	{r7, pc}
 8016a2e:	bf00      	nop
 8016a30:	080179d1 	.word	0x080179d1

08016a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	b0ba      	sub	sp, #232	; 0xe8
 8016a38:	af00      	add	r7, sp, #0
 8016a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	68db      	ldr	r3, [r3, #12]
 8016a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	695b      	ldr	r3, [r3, #20]
 8016a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8016a5a:	2300      	movs	r3, #0
 8016a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8016a60:	2300      	movs	r3, #0
 8016a62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8016a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a6a:	f003 030f 	and.w	r3, r3, #15
 8016a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8016a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d10f      	bne.n	8016a9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016a7e:	f003 0320 	and.w	r3, r3, #32
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d009      	beq.n	8016a9a <HAL_UART_IRQHandler+0x66>
 8016a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016a8a:	f003 0320 	and.w	r3, r3, #32
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d003      	beq.n	8016a9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f001 f81c 	bl	8017ad0 <UART_Receive_IT>
      return;
 8016a98:	e256      	b.n	8016f48 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8016a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	f000 80de 	beq.w	8016c60 <HAL_UART_IRQHandler+0x22c>
 8016aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016aa8:	f003 0301 	and.w	r3, r3, #1
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d106      	bne.n	8016abe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8016ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ab4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	f000 80d1 	beq.w	8016c60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8016abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ac2:	f003 0301 	and.w	r3, r3, #1
 8016ac6:	2b00      	cmp	r3, #0
 8016ac8:	d00b      	beq.n	8016ae2 <HAL_UART_IRQHandler+0xae>
 8016aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d005      	beq.n	8016ae2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ada:	f043 0201 	orr.w	r2, r3, #1
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016ae6:	f003 0304 	and.w	r3, r3, #4
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d00b      	beq.n	8016b06 <HAL_UART_IRQHandler+0xd2>
 8016aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016af2:	f003 0301 	and.w	r3, r3, #1
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d005      	beq.n	8016b06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016afe:	f043 0202 	orr.w	r2, r3, #2
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8016b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b0a:	f003 0302 	and.w	r3, r3, #2
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d00b      	beq.n	8016b2a <HAL_UART_IRQHandler+0xf6>
 8016b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b16:	f003 0301 	and.w	r3, r3, #1
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d005      	beq.n	8016b2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b22:	f043 0204 	orr.w	r2, r3, #4
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8016b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b2e:	f003 0308 	and.w	r3, r3, #8
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d011      	beq.n	8016b5a <HAL_UART_IRQHandler+0x126>
 8016b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b3a:	f003 0320 	and.w	r3, r3, #32
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d105      	bne.n	8016b4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8016b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016b46:	f003 0301 	and.w	r3, r3, #1
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d005      	beq.n	8016b5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b52:	f043 0208 	orr.w	r2, r3, #8
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	f000 81ed 	beq.w	8016f3e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8016b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016b68:	f003 0320 	and.w	r3, r3, #32
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d008      	beq.n	8016b82 <HAL_UART_IRQHandler+0x14e>
 8016b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016b74:	f003 0320 	and.w	r3, r3, #32
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d002      	beq.n	8016b82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f000 ffa7 	bl	8017ad0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	695b      	ldr	r3, [r3, #20]
 8016b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b8c:	2b40      	cmp	r3, #64	; 0x40
 8016b8e:	bf0c      	ite	eq
 8016b90:	2301      	moveq	r3, #1
 8016b92:	2300      	movne	r3, #0
 8016b94:	b2db      	uxtb	r3, r3
 8016b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b9e:	f003 0308 	and.w	r3, r3, #8
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d103      	bne.n	8016bae <HAL_UART_IRQHandler+0x17a>
 8016ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d04f      	beq.n	8016c4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8016bae:	6878      	ldr	r0, [r7, #4]
 8016bb0:	f000 fe22 	bl	80177f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	695b      	ldr	r3, [r3, #20]
 8016bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016bbe:	2b40      	cmp	r3, #64	; 0x40
 8016bc0:	d141      	bne.n	8016c46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	681b      	ldr	r3, [r3, #0]
 8016bc6:	3314      	adds	r3, #20
 8016bc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016bd0:	e853 3f00 	ldrex	r3, [r3]
 8016bd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8016bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	3314      	adds	r3, #20
 8016bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8016bee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8016bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8016bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8016bfe:	e841 2300 	strex	r3, r2, [r1]
 8016c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8016c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d1d9      	bne.n	8016bc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d013      	beq.n	8016c3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c1a:	4a7d      	ldr	r2, [pc, #500]	; (8016e10 <HAL_UART_IRQHandler+0x3dc>)
 8016c1c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c22:	4618      	mov	r0, r3
 8016c24:	f7f1 f833 	bl	8007c8e <HAL_DMA_Abort_IT>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d016      	beq.n	8016c5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016c34:	687a      	ldr	r2, [r7, #4]
 8016c36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8016c38:	4610      	mov	r0, r2
 8016c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c3c:	e00e      	b.n	8016c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 f9a3 	bl	8016f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c44:	e00a      	b.n	8016c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f000 f99f 	bl	8016f8a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c4c:	e006      	b.n	8016c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016c4e:	6878      	ldr	r0, [r7, #4]
 8016c50:	f000 f99b 	bl	8016f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	2200      	movs	r2, #0
 8016c58:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8016c5a:	e170      	b.n	8016f3e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c5c:	bf00      	nop
    return;
 8016c5e:	e16e      	b.n	8016f3e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016c64:	2b01      	cmp	r3, #1
 8016c66:	f040 814a 	bne.w	8016efe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8016c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016c6e:	f003 0310 	and.w	r3, r3, #16
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	f000 8143 	beq.w	8016efe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8016c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016c7c:	f003 0310 	and.w	r3, r3, #16
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f000 813c 	beq.w	8016efe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8016c86:	2300      	movs	r3, #0
 8016c88:	60bb      	str	r3, [r7, #8]
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	681b      	ldr	r3, [r3, #0]
 8016c90:	60bb      	str	r3, [r7, #8]
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	685b      	ldr	r3, [r3, #4]
 8016c98:	60bb      	str	r3, [r7, #8]
 8016c9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	695b      	ldr	r3, [r3, #20]
 8016ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016ca6:	2b40      	cmp	r3, #64	; 0x40
 8016ca8:	f040 80b4 	bne.w	8016e14 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	685b      	ldr	r3, [r3, #4]
 8016cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	f000 8140 	beq.w	8016f42 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8016cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	f080 8139 	bcs.w	8016f42 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8016cd6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cdc:	69db      	ldr	r3, [r3, #28]
 8016cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016ce2:	f000 8088 	beq.w	8016df6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	681b      	ldr	r3, [r3, #0]
 8016cea:	330c      	adds	r3, #12
 8016cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016cf4:	e853 3f00 	ldrex	r3, [r3]
 8016cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8016cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016d04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	330c      	adds	r3, #12
 8016d0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8016d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8016d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8016d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8016d22:	e841 2300 	strex	r3, r2, [r1]
 8016d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8016d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d1d9      	bne.n	8016ce6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	3314      	adds	r3, #20
 8016d38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016d3c:	e853 3f00 	ldrex	r3, [r3]
 8016d40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8016d42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016d44:	f023 0301 	bic.w	r3, r3, #1
 8016d48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	3314      	adds	r3, #20
 8016d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8016d56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8016d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016d62:	e841 2300 	strex	r3, r2, [r1]
 8016d66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8016d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d1e1      	bne.n	8016d32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	3314      	adds	r3, #20
 8016d74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016d78:	e853 3f00 	ldrex	r3, [r3]
 8016d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8016d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	3314      	adds	r3, #20
 8016d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8016d92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8016d94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016d98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016d9a:	e841 2300 	strex	r3, r2, [r1]
 8016d9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d1e3      	bne.n	8016d6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2220      	movs	r2, #32
 8016daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	2200      	movs	r2, #0
 8016db2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	330c      	adds	r3, #12
 8016dba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dbe:	e853 3f00 	ldrex	r3, [r3]
 8016dc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dc6:	f023 0310 	bic.w	r3, r3, #16
 8016dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	330c      	adds	r3, #12
 8016dd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8016dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 8016dda:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016dde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016de0:	e841 2300 	strex	r3, r2, [r1]
 8016de4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d1e3      	bne.n	8016db4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016df0:	4618      	mov	r0, r3
 8016df2:	f7f0 fedc 	bl	8007bae <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	1ad3      	subs	r3, r2, r3
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	4619      	mov	r1, r3
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f000 f8e7 	bl	8016fda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016e0c:	e099      	b.n	8016f42 <HAL_UART_IRQHandler+0x50e>
 8016e0e:	bf00      	nop
 8016e10:	080178bf 	.word	0x080178bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016e1c:	b29b      	uxth	r3, r3
 8016e1e:	1ad3      	subs	r3, r2, r3
 8016e20:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	f000 808b 	beq.w	8016f46 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8016e30:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	f000 8086 	beq.w	8016f46 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	330c      	adds	r3, #12
 8016e40:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e44:	e853 3f00 	ldrex	r3, [r3]
 8016e48:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	330c      	adds	r3, #12
 8016e5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8016e5e:	647a      	str	r2, [r7, #68]	; 0x44
 8016e60:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e66:	e841 2300 	strex	r3, r2, [r1]
 8016e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016e6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d1e3      	bne.n	8016e3a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	3314      	adds	r3, #20
 8016e78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7c:	e853 3f00 	ldrex	r3, [r3]
 8016e80:	623b      	str	r3, [r7, #32]
   return(result);
 8016e82:	6a3b      	ldr	r3, [r7, #32]
 8016e84:	f023 0301 	bic.w	r3, r3, #1
 8016e88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	3314      	adds	r3, #20
 8016e92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8016e96:	633a      	str	r2, [r7, #48]	; 0x30
 8016e98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016e9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e9e:	e841 2300 	strex	r3, r2, [r1]
 8016ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d1e3      	bne.n	8016e72 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2220      	movs	r2, #32
 8016eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	330c      	adds	r3, #12
 8016ebe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ec0:	693b      	ldr	r3, [r7, #16]
 8016ec2:	e853 3f00 	ldrex	r3, [r3]
 8016ec6:	60fb      	str	r3, [r7, #12]
   return(result);
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	f023 0310 	bic.w	r3, r3, #16
 8016ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	330c      	adds	r3, #12
 8016ed8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8016edc:	61fa      	str	r2, [r7, #28]
 8016ede:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ee0:	69b9      	ldr	r1, [r7, #24]
 8016ee2:	69fa      	ldr	r2, [r7, #28]
 8016ee4:	e841 2300 	strex	r3, r2, [r1]
 8016ee8:	617b      	str	r3, [r7, #20]
   return(result);
 8016eea:	697b      	ldr	r3, [r7, #20]
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d1e3      	bne.n	8016eb8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8016ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	6878      	ldr	r0, [r7, #4]
 8016ef8:	f000 f86f 	bl	8016fda <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8016efc:	e023      	b.n	8016f46 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8016efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d009      	beq.n	8016f1e <HAL_UART_IRQHandler+0x4ea>
 8016f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d003      	beq.n	8016f1e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8016f16:	6878      	ldr	r0, [r7, #4]
 8016f18:	f000 fd72 	bl	8017a00 <UART_Transmit_IT>
    return;
 8016f1c:	e014      	b.n	8016f48 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8016f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	d00e      	beq.n	8016f48 <HAL_UART_IRQHandler+0x514>
 8016f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d008      	beq.n	8016f48 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f000 fdb2 	bl	8017aa0 <UART_EndTransmit_IT>
    return;
 8016f3c:	e004      	b.n	8016f48 <HAL_UART_IRQHandler+0x514>
    return;
 8016f3e:	bf00      	nop
 8016f40:	e002      	b.n	8016f48 <HAL_UART_IRQHandler+0x514>
      return;
 8016f42:	bf00      	nop
 8016f44:	e000      	b.n	8016f48 <HAL_UART_IRQHandler+0x514>
      return;
 8016f46:	bf00      	nop
  }
}
 8016f48:	37e8      	adds	r7, #232	; 0xe8
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}

08016f4e <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016f4e:	b480      	push	{r7}
 8016f50:	b083      	sub	sp, #12
 8016f52:	af00      	add	r7, sp, #0
 8016f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8016f56:	bf00      	nop
 8016f58:	370c      	adds	r7, #12
 8016f5a:	46bd      	mov	sp, r7
 8016f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f60:	4770      	bx	lr

08016f62 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016f62:	b480      	push	{r7}
 8016f64:	b083      	sub	sp, #12
 8016f66:	af00      	add	r7, sp, #0
 8016f68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8016f6a:	bf00      	nop
 8016f6c:	370c      	adds	r7, #12
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f74:	4770      	bx	lr

08016f76 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8016f76:	b480      	push	{r7}
 8016f78:	b083      	sub	sp, #12
 8016f7a:	af00      	add	r7, sp, #0
 8016f7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8016f7e:	bf00      	nop
 8016f80:	370c      	adds	r7, #12
 8016f82:	46bd      	mov	sp, r7
 8016f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f88:	4770      	bx	lr

08016f8a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8016f8a:	b480      	push	{r7}
 8016f8c:	b083      	sub	sp, #12
 8016f8e:	af00      	add	r7, sp, #0
 8016f90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8016f92:	bf00      	nop
 8016f94:	370c      	adds	r7, #12
 8016f96:	46bd      	mov	sp, r7
 8016f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9c:	4770      	bx	lr

08016f9e <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8016f9e:	b480      	push	{r7}
 8016fa0:	b083      	sub	sp, #12
 8016fa2:	af00      	add	r7, sp, #0
 8016fa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8016fa6:	bf00      	nop
 8016fa8:	370c      	adds	r7, #12
 8016faa:	46bd      	mov	sp, r7
 8016fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb0:	4770      	bx	lr

08016fb2 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8016fb2:	b480      	push	{r7}
 8016fb4:	b083      	sub	sp, #12
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8016fba:	bf00      	nop
 8016fbc:	370c      	adds	r7, #12
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc4:	4770      	bx	lr

08016fc6 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8016fc6:	b480      	push	{r7}
 8016fc8:	b083      	sub	sp, #12
 8016fca:	af00      	add	r7, sp, #0
 8016fcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8016fce:	bf00      	nop
 8016fd0:	370c      	adds	r7, #12
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd8:	4770      	bx	lr

08016fda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8016fda:	b480      	push	{r7}
 8016fdc:	b083      	sub	sp, #12
 8016fde:	af00      	add	r7, sp, #0
 8016fe0:	6078      	str	r0, [r7, #4]
 8016fe2:	460b      	mov	r3, r1
 8016fe4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8016fe6:	bf00      	nop
 8016fe8:	370c      	adds	r7, #12
 8016fea:	46bd      	mov	sp, r7
 8016fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff0:	4770      	bx	lr

08016ff2 <HAL_LIN_SendBreak>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
{
 8016ff2:	b480      	push	{r7}
 8016ff4:	b089      	sub	sp, #36	; 0x24
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017000:	2b01      	cmp	r3, #1
 8017002:	d101      	bne.n	8017008 <HAL_LIN_SendBreak+0x16>
 8017004:	2302      	movs	r3, #2
 8017006:	e02a      	b.n	801705e <HAL_LIN_SendBreak+0x6c>
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2201      	movs	r2, #1
 801700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	2224      	movs	r2, #36	; 0x24
 8017014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Send break characters */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_SBK);
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	330c      	adds	r3, #12
 801701e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	e853 3f00 	ldrex	r3, [r3]
 8017026:	60bb      	str	r3, [r7, #8]
   return(result);
 8017028:	68bb      	ldr	r3, [r7, #8]
 801702a:	f043 0301 	orr.w	r3, r3, #1
 801702e:	61fb      	str	r3, [r7, #28]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	330c      	adds	r3, #12
 8017036:	69fa      	ldr	r2, [r7, #28]
 8017038:	61ba      	str	r2, [r7, #24]
 801703a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801703c:	6979      	ldr	r1, [r7, #20]
 801703e:	69ba      	ldr	r2, [r7, #24]
 8017040:	e841 2300 	strex	r3, r2, [r1]
 8017044:	613b      	str	r3, [r7, #16]
   return(result);
 8017046:	693b      	ldr	r3, [r7, #16]
 8017048:	2b00      	cmp	r3, #0
 801704a:	d1e5      	bne.n	8017018 <HAL_LIN_SendBreak+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	2220      	movs	r2, #32
 8017050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	2200      	movs	r2, #0
 8017058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801705c:	2300      	movs	r3, #0
}
 801705e:	4618      	mov	r0, r3
 8017060:	3724      	adds	r7, #36	; 0x24
 8017062:	46bd      	mov	sp, r7
 8017064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017068:	4770      	bx	lr

0801706a <HAL_MultiProcessor_EnterMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
{
 801706a:	b480      	push	{r7}
 801706c:	b089      	sub	sp, #36	; 0x24
 801706e:	af00      	add	r7, sp, #0
 8017070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017078:	2b01      	cmp	r3, #1
 801707a:	d101      	bne.n	8017080 <HAL_MultiProcessor_EnterMuteMode+0x16>
 801707c:	2302      	movs	r3, #2
 801707e:	e02a      	b.n	80170d6 <HAL_MultiProcessor_EnterMuteMode+0x6c>
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2201      	movs	r2, #1
 8017084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2224      	movs	r2, #36	; 0x24
 801708c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	330c      	adds	r3, #12
 8017096:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	e853 3f00 	ldrex	r3, [r3]
 801709e:	60bb      	str	r3, [r7, #8]
   return(result);
 80170a0:	68bb      	ldr	r3, [r7, #8]
 80170a2:	f043 0302 	orr.w	r3, r3, #2
 80170a6:	61fb      	str	r3, [r7, #28]
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	330c      	adds	r3, #12
 80170ae:	69fa      	ldr	r2, [r7, #28]
 80170b0:	61ba      	str	r2, [r7, #24]
 80170b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170b4:	6979      	ldr	r1, [r7, #20]
 80170b6:	69ba      	ldr	r2, [r7, #24]
 80170b8:	e841 2300 	strex	r3, r2, [r1]
 80170bc:	613b      	str	r3, [r7, #16]
   return(result);
 80170be:	693b      	ldr	r3, [r7, #16]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	d1e5      	bne.n	8017090 <HAL_MultiProcessor_EnterMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	2220      	movs	r2, #32
 80170c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	2200      	movs	r2, #0
 80170d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80170d4:	2300      	movs	r3, #0
}
 80170d6:	4618      	mov	r0, r3
 80170d8:	3724      	adds	r7, #36	; 0x24
 80170da:	46bd      	mov	sp, r7
 80170dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e0:	4770      	bx	lr

080170e2 <HAL_MultiProcessor_ExitMuteMode>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_ExitMuteMode(UART_HandleTypeDef *huart)
{
 80170e2:	b480      	push	{r7}
 80170e4:	b089      	sub	sp, #36	; 0x24
 80170e6:	af00      	add	r7, sp, #0
 80170e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80170f0:	2b01      	cmp	r3, #1
 80170f2:	d101      	bne.n	80170f8 <HAL_MultiProcessor_ExitMuteMode+0x16>
 80170f4:	2302      	movs	r3, #2
 80170f6:	e02a      	b.n	801714e <HAL_MultiProcessor_ExitMuteMode+0x6c>
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	2201      	movs	r2, #1
 80170fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	2224      	movs	r2, #36	; 0x24
 8017104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RWU);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	330c      	adds	r3, #12
 801710e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	e853 3f00 	ldrex	r3, [r3]
 8017116:	60bb      	str	r3, [r7, #8]
   return(result);
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	f023 0302 	bic.w	r3, r3, #2
 801711e:	61fb      	str	r3, [r7, #28]
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	330c      	adds	r3, #12
 8017126:	69fa      	ldr	r2, [r7, #28]
 8017128:	61ba      	str	r2, [r7, #24]
 801712a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801712c:	6979      	ldr	r1, [r7, #20]
 801712e:	69ba      	ldr	r2, [r7, #24]
 8017130:	e841 2300 	strex	r3, r2, [r1]
 8017134:	613b      	str	r3, [r7, #16]
   return(result);
 8017136:	693b      	ldr	r3, [r7, #16]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d1e5      	bne.n	8017108 <HAL_MultiProcessor_ExitMuteMode+0x26>

  huart->gState = HAL_UART_STATE_READY;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	2220      	movs	r2, #32
 8017140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	2200      	movs	r2, #0
 8017148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801714c:	2300      	movs	r3, #0
}
 801714e:	4618      	mov	r0, r3
 8017150:	3724      	adds	r7, #36	; 0x24
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr

0801715a <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 801715a:	b480      	push	{r7}
 801715c:	b085      	sub	sp, #20
 801715e:	af00      	add	r7, sp, #0
 8017160:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8017162:	2300      	movs	r3, #0
 8017164:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801716c:	2b01      	cmp	r3, #1
 801716e:	d101      	bne.n	8017174 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8017170:	2302      	movs	r3, #2
 8017172:	e020      	b.n	80171b6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	2201      	movs	r2, #1
 8017178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2224      	movs	r2, #36	; 0x24
 8017180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	68db      	ldr	r3, [r3, #12]
 801718a:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	f023 030c 	bic.w	r3, r3, #12
 8017192:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	f043 0308 	orr.w	r3, r3, #8
 801719a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	68fa      	ldr	r2, [r7, #12]
 80171a2:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	2220      	movs	r2, #32
 80171a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	2200      	movs	r2, #0
 80171b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80171b4:	2300      	movs	r3, #0
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3714      	adds	r7, #20
 80171ba:	46bd      	mov	sp, r7
 80171bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c0:	4770      	bx	lr

080171c2 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 80171c2:	b480      	push	{r7}
 80171c4:	b085      	sub	sp, #20
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80171ca:	2300      	movs	r3, #0
 80171cc:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80171d4:	2b01      	cmp	r3, #1
 80171d6:	d101      	bne.n	80171dc <HAL_HalfDuplex_EnableReceiver+0x1a>
 80171d8:	2302      	movs	r3, #2
 80171da:	e020      	b.n	801721e <HAL_HalfDuplex_EnableReceiver+0x5c>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	2201      	movs	r2, #1
 80171e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  huart->gState = HAL_UART_STATE_BUSY;
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	2224      	movs	r2, #36	; 0x24
 80171e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	68db      	ldr	r3, [r3, #12]
 80171f2:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	f023 030c 	bic.w	r3, r3, #12
 80171fa:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	f043 0304 	orr.w	r3, r3, #4
 8017202:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	68fa      	ldr	r2, [r7, #12]
 801720a:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2220      	movs	r2, #32
 8017210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	3714      	adds	r7, #20
 8017222:	46bd      	mov	sp, r7
 8017224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017228:	4770      	bx	lr

0801722a <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 801722a:	b480      	push	{r7}
 801722c:	b085      	sub	sp, #20
 801722e:	af00      	add	r7, sp, #0
 8017230:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8017232:	2300      	movs	r3, #0
 8017234:	60fb      	str	r3, [r7, #12]
 8017236:	2300      	movs	r3, #0
 8017238:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017240:	b2db      	uxtb	r3, r3
 8017242:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801724a:	b2db      	uxtb	r3, r3
 801724c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 801724e:	68fb      	ldr	r3, [r7, #12]
 8017250:	b2da      	uxtb	r2, r3
 8017252:	68bb      	ldr	r3, [r7, #8]
 8017254:	b2db      	uxtb	r3, r3
 8017256:	4313      	orrs	r3, r2
 8017258:	b2db      	uxtb	r3, r3
}
 801725a:	4618      	mov	r0, r3
 801725c:	3714      	adds	r7, #20
 801725e:	46bd      	mov	sp, r7
 8017260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017264:	4770      	bx	lr

08017266 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8017266:	b480      	push	{r7}
 8017268:	b083      	sub	sp, #12
 801726a:	af00      	add	r7, sp, #0
 801726c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8017272:	4618      	mov	r0, r3
 8017274:	370c      	adds	r7, #12
 8017276:	46bd      	mov	sp, r7
 8017278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727c:	4770      	bx	lr

0801727e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801727e:	b580      	push	{r7, lr}
 8017280:	b090      	sub	sp, #64	; 0x40
 8017282:	af00      	add	r7, sp, #0
 8017284:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801728a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017296:	2b00      	cmp	r3, #0
 8017298:	d137      	bne.n	801730a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 801729a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801729c:	2200      	movs	r2, #0
 801729e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80172a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3314      	adds	r3, #20
 80172a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172aa:	e853 3f00 	ldrex	r3, [r3]
 80172ae:	623b      	str	r3, [r7, #32]
   return(result);
 80172b0:	6a3b      	ldr	r3, [r7, #32]
 80172b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80172b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80172b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	3314      	adds	r3, #20
 80172be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80172c0:	633a      	str	r2, [r7, #48]	; 0x30
 80172c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172c8:	e841 2300 	strex	r3, r2, [r1]
 80172cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80172ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d1e5      	bne.n	80172a0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80172d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172d6:	681b      	ldr	r3, [r3, #0]
 80172d8:	330c      	adds	r3, #12
 80172da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172dc:	693b      	ldr	r3, [r7, #16]
 80172de:	e853 3f00 	ldrex	r3, [r3]
 80172e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172ea:	637b      	str	r3, [r7, #52]	; 0x34
 80172ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	330c      	adds	r3, #12
 80172f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80172f4:	61fa      	str	r2, [r7, #28]
 80172f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172f8:	69b9      	ldr	r1, [r7, #24]
 80172fa:	69fa      	ldr	r2, [r7, #28]
 80172fc:	e841 2300 	strex	r3, r2, [r1]
 8017300:	617b      	str	r3, [r7, #20]
   return(result);
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d1e5      	bne.n	80172d4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017308:	e002      	b.n	8017310 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801730a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801730c:	f7ff fe1f 	bl	8016f4e <HAL_UART_TxCpltCallback>
}
 8017310:	bf00      	nop
 8017312:	3740      	adds	r7, #64	; 0x40
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017324:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8017326:	68f8      	ldr	r0, [r7, #12]
 8017328:	f7ff fe1b 	bl	8016f62 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801732c:	bf00      	nop
 801732e:	3710      	adds	r7, #16
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}

08017334 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b09c      	sub	sp, #112	; 0x70
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017340:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801734c:	2b00      	cmp	r3, #0
 801734e:	d172      	bne.n	8017436 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8017350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017352:	2200      	movs	r2, #0
 8017354:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	330c      	adds	r3, #12
 801735c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801735e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017360:	e853 3f00 	ldrex	r3, [r3]
 8017364:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801736c:	66bb      	str	r3, [r7, #104]	; 0x68
 801736e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017370:	681b      	ldr	r3, [r3, #0]
 8017372:	330c      	adds	r3, #12
 8017374:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8017376:	65ba      	str	r2, [r7, #88]	; 0x58
 8017378:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801737a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801737c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801737e:	e841 2300 	strex	r3, r2, [r1]
 8017382:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017384:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017386:	2b00      	cmp	r3, #0
 8017388:	d1e5      	bne.n	8017356 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801738a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	3314      	adds	r3, #20
 8017390:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017394:	e853 3f00 	ldrex	r3, [r3]
 8017398:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801739c:	f023 0301 	bic.w	r3, r3, #1
 80173a0:	667b      	str	r3, [r7, #100]	; 0x64
 80173a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	3314      	adds	r3, #20
 80173a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80173aa:	647a      	str	r2, [r7, #68]	; 0x44
 80173ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80173b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173b2:	e841 2300 	strex	r3, r2, [r1]
 80173b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80173b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d1e5      	bne.n	801738a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80173be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	3314      	adds	r3, #20
 80173c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c8:	e853 3f00 	ldrex	r3, [r3]
 80173cc:	623b      	str	r3, [r7, #32]
   return(result);
 80173ce:	6a3b      	ldr	r3, [r7, #32]
 80173d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80173d4:	663b      	str	r3, [r7, #96]	; 0x60
 80173d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	3314      	adds	r3, #20
 80173dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80173de:	633a      	str	r2, [r7, #48]	; 0x30
 80173e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80173e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173e6:	e841 2300 	strex	r3, r2, [r1]
 80173ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80173ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d1e5      	bne.n	80173be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80173f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173f4:	2220      	movs	r2, #32
 80173f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80173fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80173fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d119      	bne.n	8017436 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	330c      	adds	r3, #12
 8017408:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801740a:	693b      	ldr	r3, [r7, #16]
 801740c:	e853 3f00 	ldrex	r3, [r3]
 8017410:	60fb      	str	r3, [r7, #12]
   return(result);
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	f023 0310 	bic.w	r3, r3, #16
 8017418:	65fb      	str	r3, [r7, #92]	; 0x5c
 801741a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	330c      	adds	r3, #12
 8017420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017422:	61fa      	str	r2, [r7, #28]
 8017424:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017426:	69b9      	ldr	r1, [r7, #24]
 8017428:	69fa      	ldr	r2, [r7, #28]
 801742a:	e841 2300 	strex	r3, r2, [r1]
 801742e:	617b      	str	r3, [r7, #20]
   return(result);
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d1e5      	bne.n	8017402 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801743a:	2b01      	cmp	r3, #1
 801743c:	d106      	bne.n	801744c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801743e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017440:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017442:	4619      	mov	r1, r3
 8017444:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8017446:	f7ff fdc8 	bl	8016fda <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801744a:	e002      	b.n	8017452 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 801744c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801744e:	f7ea fba5 	bl	8001b9c <HAL_UART_RxCpltCallback>
}
 8017452:	bf00      	nop
 8017454:	3770      	adds	r7, #112	; 0x70
 8017456:	46bd      	mov	sp, r7
 8017458:	bd80      	pop	{r7, pc}

0801745a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801745a:	b580      	push	{r7, lr}
 801745c:	b084      	sub	sp, #16
 801745e:	af00      	add	r7, sp, #0
 8017460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017466:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801746c:	2b01      	cmp	r3, #1
 801746e:	d108      	bne.n	8017482 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017474:	085b      	lsrs	r3, r3, #1
 8017476:	b29b      	uxth	r3, r3
 8017478:	4619      	mov	r1, r3
 801747a:	68f8      	ldr	r0, [r7, #12]
 801747c:	f7ff fdad 	bl	8016fda <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8017480:	e002      	b.n	8017488 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8017482:	68f8      	ldr	r0, [r7, #12]
 8017484:	f7ff fd77 	bl	8016f76 <HAL_UART_RxHalfCpltCallback>
}
 8017488:	bf00      	nop
 801748a:	3710      	adds	r7, #16
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b084      	sub	sp, #16
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8017498:	2300      	movs	r3, #0
 801749a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80174a2:	68bb      	ldr	r3, [r7, #8]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	695b      	ldr	r3, [r3, #20]
 80174a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174ac:	2b80      	cmp	r3, #128	; 0x80
 80174ae:	bf0c      	ite	eq
 80174b0:	2301      	moveq	r3, #1
 80174b2:	2300      	movne	r3, #0
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80174be:	b2db      	uxtb	r3, r3
 80174c0:	2b21      	cmp	r3, #33	; 0x21
 80174c2:	d108      	bne.n	80174d6 <UART_DMAError+0x46>
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d005      	beq.n	80174d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	2200      	movs	r2, #0
 80174ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80174d0:	68b8      	ldr	r0, [r7, #8]
 80174d2:	f000 f969 	bl	80177a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80174d6:	68bb      	ldr	r3, [r7, #8]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	695b      	ldr	r3, [r3, #20]
 80174dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80174e0:	2b40      	cmp	r3, #64	; 0x40
 80174e2:	bf0c      	ite	eq
 80174e4:	2301      	moveq	r3, #1
 80174e6:	2300      	movne	r3, #0
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80174f2:	b2db      	uxtb	r3, r3
 80174f4:	2b22      	cmp	r3, #34	; 0x22
 80174f6:	d108      	bne.n	801750a <UART_DMAError+0x7a>
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d005      	beq.n	801750a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	2200      	movs	r2, #0
 8017502:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8017504:	68b8      	ldr	r0, [r7, #8]
 8017506:	f000 f977 	bl	80177f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801750e:	f043 0210 	orr.w	r2, r3, #16
 8017512:	68bb      	ldr	r3, [r7, #8]
 8017514:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017516:	68b8      	ldr	r0, [r7, #8]
 8017518:	f7ff fd37 	bl	8016f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801751c:	bf00      	nop
 801751e:	3710      	adds	r7, #16
 8017520:	46bd      	mov	sp, r7
 8017522:	bd80      	pop	{r7, pc}

08017524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b090      	sub	sp, #64	; 0x40
 8017528:	af00      	add	r7, sp, #0
 801752a:	60f8      	str	r0, [r7, #12]
 801752c:	60b9      	str	r1, [r7, #8]
 801752e:	603b      	str	r3, [r7, #0]
 8017530:	4613      	mov	r3, r2
 8017532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017534:	e050      	b.n	80175d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8017536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801753c:	d04c      	beq.n	80175d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801753e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017540:	2b00      	cmp	r3, #0
 8017542:	d007      	beq.n	8017554 <UART_WaitOnFlagUntilTimeout+0x30>
 8017544:	f7ef f872 	bl	800662c <HAL_GetTick>
 8017548:	4602      	mov	r2, r0
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	1ad3      	subs	r3, r2, r3
 801754e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017550:	429a      	cmp	r2, r3
 8017552:	d241      	bcs.n	80175d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	330c      	adds	r3, #12
 801755a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801755e:	e853 3f00 	ldrex	r3, [r3]
 8017562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801756a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	330c      	adds	r3, #12
 8017572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017574:	637a      	str	r2, [r7, #52]	; 0x34
 8017576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801757a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801757c:	e841 2300 	strex	r3, r2, [r1]
 8017580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017584:	2b00      	cmp	r3, #0
 8017586:	d1e5      	bne.n	8017554 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	3314      	adds	r3, #20
 801758e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	e853 3f00 	ldrex	r3, [r3]
 8017596:	613b      	str	r3, [r7, #16]
   return(result);
 8017598:	693b      	ldr	r3, [r7, #16]
 801759a:	f023 0301 	bic.w	r3, r3, #1
 801759e:	63bb      	str	r3, [r7, #56]	; 0x38
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	3314      	adds	r3, #20
 80175a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80175a8:	623a      	str	r2, [r7, #32]
 80175aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175ac:	69f9      	ldr	r1, [r7, #28]
 80175ae:	6a3a      	ldr	r2, [r7, #32]
 80175b0:	e841 2300 	strex	r3, r2, [r1]
 80175b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80175b6:	69bb      	ldr	r3, [r7, #24]
 80175b8:	2b00      	cmp	r3, #0
 80175ba:	d1e5      	bne.n	8017588 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	2220      	movs	r2, #32
 80175c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80175c4:	68fb      	ldr	r3, [r7, #12]
 80175c6:	2220      	movs	r2, #32
 80175c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	2200      	movs	r2, #0
 80175d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80175d4:	2303      	movs	r3, #3
 80175d6:	e00f      	b.n	80175f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	681a      	ldr	r2, [r3, #0]
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	4013      	ands	r3, r2
 80175e2:	68ba      	ldr	r2, [r7, #8]
 80175e4:	429a      	cmp	r2, r3
 80175e6:	bf0c      	ite	eq
 80175e8:	2301      	moveq	r3, #1
 80175ea:	2300      	movne	r3, #0
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	461a      	mov	r2, r3
 80175f0:	79fb      	ldrb	r3, [r7, #7]
 80175f2:	429a      	cmp	r2, r3
 80175f4:	d09f      	beq.n	8017536 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80175f6:	2300      	movs	r3, #0
}
 80175f8:	4618      	mov	r0, r3
 80175fa:	3740      	adds	r7, #64	; 0x40
 80175fc:	46bd      	mov	sp, r7
 80175fe:	bd80      	pop	{r7, pc}

08017600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017600:	b480      	push	{r7}
 8017602:	b085      	sub	sp, #20
 8017604:	af00      	add	r7, sp, #0
 8017606:	60f8      	str	r0, [r7, #12]
 8017608:	60b9      	str	r1, [r7, #8]
 801760a:	4613      	mov	r3, r2
 801760c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801760e:	68fb      	ldr	r3, [r7, #12]
 8017610:	68ba      	ldr	r2, [r7, #8]
 8017612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017614:	68fb      	ldr	r3, [r7, #12]
 8017616:	88fa      	ldrh	r2, [r7, #6]
 8017618:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	88fa      	ldrh	r2, [r7, #6]
 801761e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	2200      	movs	r2, #0
 8017624:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	2222      	movs	r2, #34	; 0x22
 801762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801762e:	68fb      	ldr	r3, [r7, #12]
 8017630:	2200      	movs	r2, #0
 8017632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8017636:	68fb      	ldr	r3, [r7, #12]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	68da      	ldr	r2, [r3, #12]
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017644:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	695a      	ldr	r2, [r3, #20]
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	f042 0201 	orr.w	r2, r2, #1
 8017654:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	68da      	ldr	r2, [r3, #12]
 801765c:	68fb      	ldr	r3, [r7, #12]
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	f042 0220 	orr.w	r2, r2, #32
 8017664:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8017666:	2300      	movs	r3, #0
}
 8017668:	4618      	mov	r0, r3
 801766a:	3714      	adds	r7, #20
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr

08017674 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017674:	b580      	push	{r7, lr}
 8017676:	b098      	sub	sp, #96	; 0x60
 8017678:	af00      	add	r7, sp, #0
 801767a:	60f8      	str	r0, [r7, #12]
 801767c:	60b9      	str	r1, [r7, #8]
 801767e:	4613      	mov	r3, r2
 8017680:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8017682:	68ba      	ldr	r2, [r7, #8]
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	88fa      	ldrh	r2, [r7, #6]
 801768c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	2200      	movs	r2, #0
 8017692:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	2222      	movs	r2, #34	; 0x22
 8017698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801769c:	68fb      	ldr	r3, [r7, #12]
 801769e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a0:	4a3e      	ldr	r2, [pc, #248]	; (801779c <UART_Start_Receive_DMA+0x128>)
 80176a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176a8:	4a3d      	ldr	r2, [pc, #244]	; (80177a0 <UART_Start_Receive_DMA+0x12c>)
 80176aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176b0:	4a3c      	ldr	r2, [pc, #240]	; (80177a4 <UART_Start_Receive_DMA+0x130>)
 80176b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176b8:	2200      	movs	r2, #0
 80176ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80176bc:	f107 0308 	add.w	r3, r7, #8
 80176c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	3304      	adds	r3, #4
 80176cc:	4619      	mov	r1, r3
 80176ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80176d0:	681a      	ldr	r2, [r3, #0]
 80176d2:	88fb      	ldrh	r3, [r7, #6]
 80176d4:	f7f0 fa13 	bl	8007afe <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80176d8:	2300      	movs	r3, #0
 80176da:	613b      	str	r3, [r7, #16]
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	613b      	str	r3, [r7, #16]
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	685b      	ldr	r3, [r3, #4]
 80176ea:	613b      	str	r3, [r7, #16]
 80176ec:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80176ee:	68fb      	ldr	r3, [r7, #12]
 80176f0:	2200      	movs	r2, #0
 80176f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	330c      	adds	r3, #12
 80176fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017700:	e853 3f00 	ldrex	r3, [r3]
 8017704:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801770c:	65bb      	str	r3, [r7, #88]	; 0x58
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	330c      	adds	r3, #12
 8017714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017716:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017718:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801771a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801771c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801771e:	e841 2300 	strex	r3, r2, [r1]
 8017722:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017726:	2b00      	cmp	r3, #0
 8017728:	d1e5      	bne.n	80176f6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	3314      	adds	r3, #20
 8017730:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017734:	e853 3f00 	ldrex	r3, [r3]
 8017738:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773c:	f043 0301 	orr.w	r3, r3, #1
 8017740:	657b      	str	r3, [r7, #84]	; 0x54
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	3314      	adds	r3, #20
 8017748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801774a:	63ba      	str	r2, [r7, #56]	; 0x38
 801774c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801774e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017752:	e841 2300 	strex	r3, r2, [r1]
 8017756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801775a:	2b00      	cmp	r3, #0
 801775c:	d1e5      	bne.n	801772a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	3314      	adds	r3, #20
 8017764:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017766:	69bb      	ldr	r3, [r7, #24]
 8017768:	e853 3f00 	ldrex	r3, [r3]
 801776c:	617b      	str	r3, [r7, #20]
   return(result);
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017774:	653b      	str	r3, [r7, #80]	; 0x50
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	3314      	adds	r3, #20
 801777c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801777e:	627a      	str	r2, [r7, #36]	; 0x24
 8017780:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017782:	6a39      	ldr	r1, [r7, #32]
 8017784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017786:	e841 2300 	strex	r3, r2, [r1]
 801778a:	61fb      	str	r3, [r7, #28]
   return(result);
 801778c:	69fb      	ldr	r3, [r7, #28]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d1e5      	bne.n	801775e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8017792:	2300      	movs	r3, #0
}
 8017794:	4618      	mov	r0, r3
 8017796:	3760      	adds	r7, #96	; 0x60
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	08017335 	.word	0x08017335
 80177a0:	0801745b 	.word	0x0801745b
 80177a4:	08017491 	.word	0x08017491

080177a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80177a8:	b480      	push	{r7}
 80177aa:	b089      	sub	sp, #36	; 0x24
 80177ac:	af00      	add	r7, sp, #0
 80177ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	330c      	adds	r3, #12
 80177b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	e853 3f00 	ldrex	r3, [r3]
 80177be:	60bb      	str	r3, [r7, #8]
   return(result);
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80177c6:	61fb      	str	r3, [r7, #28]
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	330c      	adds	r3, #12
 80177ce:	69fa      	ldr	r2, [r7, #28]
 80177d0:	61ba      	str	r2, [r7, #24]
 80177d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177d4:	6979      	ldr	r1, [r7, #20]
 80177d6:	69ba      	ldr	r2, [r7, #24]
 80177d8:	e841 2300 	strex	r3, r2, [r1]
 80177dc:	613b      	str	r3, [r7, #16]
   return(result);
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d1e5      	bne.n	80177b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2220      	movs	r2, #32
 80177e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80177ec:	bf00      	nop
 80177ee:	3724      	adds	r7, #36	; 0x24
 80177f0:	46bd      	mov	sp, r7
 80177f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f6:	4770      	bx	lr

080177f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80177f8:	b480      	push	{r7}
 80177fa:	b095      	sub	sp, #84	; 0x54
 80177fc:	af00      	add	r7, sp, #0
 80177fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	681b      	ldr	r3, [r3, #0]
 8017804:	330c      	adds	r3, #12
 8017806:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801780a:	e853 3f00 	ldrex	r3, [r3]
 801780e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017812:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8017816:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	330c      	adds	r3, #12
 801781e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017820:	643a      	str	r2, [r7, #64]	; 0x40
 8017822:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017826:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017828:	e841 2300 	strex	r3, r2, [r1]
 801782c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801782e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1e5      	bne.n	8017800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	3314      	adds	r3, #20
 801783a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801783c:	6a3b      	ldr	r3, [r7, #32]
 801783e:	e853 3f00 	ldrex	r3, [r3]
 8017842:	61fb      	str	r3, [r7, #28]
   return(result);
 8017844:	69fb      	ldr	r3, [r7, #28]
 8017846:	f023 0301 	bic.w	r3, r3, #1
 801784a:	64bb      	str	r3, [r7, #72]	; 0x48
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	3314      	adds	r3, #20
 8017852:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017854:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801785a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801785c:	e841 2300 	strex	r3, r2, [r1]
 8017860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1e5      	bne.n	8017834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801786c:	2b01      	cmp	r3, #1
 801786e:	d119      	bne.n	80178a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	330c      	adds	r3, #12
 8017876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	e853 3f00 	ldrex	r3, [r3]
 801787e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	f023 0310 	bic.w	r3, r3, #16
 8017886:	647b      	str	r3, [r7, #68]	; 0x44
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	330c      	adds	r3, #12
 801788e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017890:	61ba      	str	r2, [r7, #24]
 8017892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017894:	6979      	ldr	r1, [r7, #20]
 8017896:	69ba      	ldr	r2, [r7, #24]
 8017898:	e841 2300 	strex	r3, r2, [r1]
 801789c:	613b      	str	r3, [r7, #16]
   return(result);
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1e5      	bne.n	8017870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2220      	movs	r2, #32
 80178a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	2200      	movs	r2, #0
 80178b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80178b2:	bf00      	nop
 80178b4:	3754      	adds	r7, #84	; 0x54
 80178b6:	46bd      	mov	sp, r7
 80178b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178bc:	4770      	bx	lr

080178be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80178be:	b580      	push	{r7, lr}
 80178c0:	b084      	sub	sp, #16
 80178c2:	af00      	add	r7, sp, #0
 80178c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80178cc:	68fb      	ldr	r3, [r7, #12]
 80178ce:	2200      	movs	r2, #0
 80178d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	2200      	movs	r2, #0
 80178d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80178d8:	68f8      	ldr	r0, [r7, #12]
 80178da:	f7ff fb56 	bl	8016f8a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80178de:	bf00      	nop
 80178e0:	3710      	adds	r7, #16
 80178e2:	46bd      	mov	sp, r7
 80178e4:	bd80      	pop	{r7, pc}

080178e6 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80178e6:	b580      	push	{r7, lr}
 80178e8:	b084      	sub	sp, #16
 80178ea:	af00      	add	r7, sp, #0
 80178ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80178f2:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80178f8:	2200      	movs	r2, #0
 80178fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017900:	2b00      	cmp	r3, #0
 8017902:	d004      	beq.n	801790e <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801790a:	2b00      	cmp	r3, #0
 801790c:	d117      	bne.n	801793e <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	2200      	movs	r2, #0
 8017912:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	2200      	movs	r2, #0
 8017918:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	2200      	movs	r2, #0
 801791e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	2220      	movs	r2, #32
 8017924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	2220      	movs	r2, #32
 801792c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	2200      	movs	r2, #0
 8017934:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017936:	68f8      	ldr	r0, [r7, #12]
 8017938:	f7ff fb31 	bl	8016f9e <HAL_UART_AbortCpltCallback>
 801793c:	e000      	b.n	8017940 <UART_DMATxAbortCallback+0x5a>
      return;
 801793e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017940:	3710      	adds	r7, #16
 8017942:	46bd      	mov	sp, r7
 8017944:	bd80      	pop	{r7, pc}

08017946 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8017946:	b580      	push	{r7, lr}
 8017948:	b084      	sub	sp, #16
 801794a:	af00      	add	r7, sp, #0
 801794c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017952:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017958:	2200      	movs	r2, #0
 801795a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017960:	2b00      	cmp	r3, #0
 8017962:	d004      	beq.n	801796e <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801796a:	2b00      	cmp	r3, #0
 801796c:	d117      	bne.n	801799e <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	2200      	movs	r2, #0
 8017972:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	2200      	movs	r2, #0
 8017978:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	2200      	movs	r2, #0
 801797e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2220      	movs	r2, #32
 8017984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	2220      	movs	r2, #32
 801798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	2200      	movs	r2, #0
 8017994:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8017996:	68f8      	ldr	r0, [r7, #12]
 8017998:	f7ff fb01 	bl	8016f9e <HAL_UART_AbortCpltCallback>
 801799c:	e000      	b.n	80179a0 <UART_DMARxAbortCallback+0x5a>
      return;
 801799e:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179a0:	3710      	adds	r7, #16
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <UART_DMATxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b084      	sub	sp, #16
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179b2:	60fb      	str	r3, [r7, #12]

  huart->TxXferCount = 0x00U;
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	2200      	movs	r2, #0
 80179b8:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	2220      	movs	r2, #32
 80179be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Transmit Complete Callback */
  huart->AbortTransmitCpltCallback(huart);
#else
  /* Call legacy weak Abort Transmit Complete Callback */
  HAL_UART_AbortTransmitCpltCallback(huart);
 80179c2:	68f8      	ldr	r0, [r7, #12]
 80179c4:	f7ff faf5 	bl	8016fb2 <HAL_UART_AbortTransmitCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179c8:	bf00      	nop
 80179ca:	3710      	adds	r7, #16
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}

080179d0 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179dc:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 80179de:	68fb      	ldr	r3, [r7, #12]
 80179e0:	2200      	movs	r2, #0
 80179e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	2220      	movs	r2, #32
 80179e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80179ec:	68fb      	ldr	r3, [r7, #12]
 80179ee:	2200      	movs	r2, #0
 80179f0:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80179f2:	68f8      	ldr	r0, [r7, #12]
 80179f4:	f7ff fae7 	bl	8016fc6 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80179f8:	bf00      	nop
 80179fa:	3710      	adds	r7, #16
 80179fc:	46bd      	mov	sp, r7
 80179fe:	bd80      	pop	{r7, pc}

08017a00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8017a00:	b480      	push	{r7}
 8017a02:	b085      	sub	sp, #20
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017a0e:	b2db      	uxtb	r3, r3
 8017a10:	2b21      	cmp	r3, #33	; 0x21
 8017a12:	d13e      	bne.n	8017a92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	689b      	ldr	r3, [r3, #8]
 8017a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017a1c:	d114      	bne.n	8017a48 <UART_Transmit_IT+0x48>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	691b      	ldr	r3, [r3, #16]
 8017a22:	2b00      	cmp	r3, #0
 8017a24:	d110      	bne.n	8017a48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	6a1b      	ldr	r3, [r3, #32]
 8017a2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	881b      	ldrh	r3, [r3, #0]
 8017a30:	461a      	mov	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8017a3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	6a1b      	ldr	r3, [r3, #32]
 8017a40:	1c9a      	adds	r2, r3, #2
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	621a      	str	r2, [r3, #32]
 8017a46:	e008      	b.n	8017a5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	6a1b      	ldr	r3, [r3, #32]
 8017a4c:	1c59      	adds	r1, r3, #1
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	6211      	str	r1, [r2, #32]
 8017a52:	781a      	ldrb	r2, [r3, #0]
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017a5e:	b29b      	uxth	r3, r3
 8017a60:	3b01      	subs	r3, #1
 8017a62:	b29b      	uxth	r3, r3
 8017a64:	687a      	ldr	r2, [r7, #4]
 8017a66:	4619      	mov	r1, r3
 8017a68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d10f      	bne.n	8017a8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	681b      	ldr	r3, [r3, #0]
 8017a72:	68da      	ldr	r2, [r3, #12]
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017a7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	681b      	ldr	r3, [r3, #0]
 8017a82:	68da      	ldr	r2, [r3, #12]
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017a8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e000      	b.n	8017a94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8017a92:	2302      	movs	r3, #2
  }
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3714      	adds	r7, #20
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a9e:	4770      	bx	lr

08017aa0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017aa0:	b580      	push	{r7, lr}
 8017aa2:	b082      	sub	sp, #8
 8017aa4:	af00      	add	r7, sp, #0
 8017aa6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	681b      	ldr	r3, [r3, #0]
 8017aac:	68da      	ldr	r2, [r3, #12]
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017ab6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2220      	movs	r2, #32
 8017abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8017ac0:	6878      	ldr	r0, [r7, #4]
 8017ac2:	f7ff fa44 	bl	8016f4e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8017ac6:	2300      	movs	r3, #0
}
 8017ac8:	4618      	mov	r0, r3
 8017aca:	3708      	adds	r7, #8
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}

08017ad0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8017ad0:	b580      	push	{r7, lr}
 8017ad2:	b08c      	sub	sp, #48	; 0x30
 8017ad4:	af00      	add	r7, sp, #0
 8017ad6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8017ade:	b2db      	uxtb	r3, r3
 8017ae0:	2b22      	cmp	r3, #34	; 0x22
 8017ae2:	f040 80ab 	bne.w	8017c3c <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	689b      	ldr	r3, [r3, #8]
 8017aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017aee:	d117      	bne.n	8017b20 <UART_Receive_IT+0x50>
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	691b      	ldr	r3, [r3, #16]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d113      	bne.n	8017b20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8017af8:	2300      	movs	r3, #0
 8017afa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b00:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	681b      	ldr	r3, [r3, #0]
 8017b06:	685b      	ldr	r3, [r3, #4]
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017b0e:	b29a      	uxth	r2, r3
 8017b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b18:	1c9a      	adds	r2, r3, #2
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	629a      	str	r2, [r3, #40]	; 0x28
 8017b1e:	e026      	b.n	8017b6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8017b26:	2300      	movs	r3, #0
 8017b28:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	689b      	ldr	r3, [r3, #8]
 8017b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017b32:	d007      	beq.n	8017b44 <UART_Receive_IT+0x74>
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	689b      	ldr	r3, [r3, #8]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10a      	bne.n	8017b52 <UART_Receive_IT+0x82>
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	691b      	ldr	r3, [r3, #16]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d106      	bne.n	8017b52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	685b      	ldr	r3, [r3, #4]
 8017b4a:	b2da      	uxtb	r2, r3
 8017b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4e:	701a      	strb	r2, [r3, #0]
 8017b50:	e008      	b.n	8017b64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	685b      	ldr	r3, [r3, #4]
 8017b58:	b2db      	uxtb	r3, r3
 8017b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017b5e:	b2da      	uxtb	r2, r3
 8017b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b68:	1c5a      	adds	r2, r3, #1
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8017b72:	b29b      	uxth	r3, r3
 8017b74:	3b01      	subs	r3, #1
 8017b76:	b29b      	uxth	r3, r3
 8017b78:	687a      	ldr	r2, [r7, #4]
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d15a      	bne.n	8017c38 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	681b      	ldr	r3, [r3, #0]
 8017b86:	68da      	ldr	r2, [r3, #12]
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	f022 0220 	bic.w	r2, r2, #32
 8017b90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	68da      	ldr	r2, [r3, #12]
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017ba0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	695a      	ldr	r2, [r3, #20]
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	f022 0201 	bic.w	r2, r2, #1
 8017bb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017bb2:	687b      	ldr	r3, [r7, #4]
 8017bb4:	2220      	movs	r2, #32
 8017bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017bbe:	2b01      	cmp	r3, #1
 8017bc0:	d135      	bne.n	8017c2e <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017bc2:	687b      	ldr	r3, [r7, #4]
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	330c      	adds	r3, #12
 8017bce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bd0:	697b      	ldr	r3, [r7, #20]
 8017bd2:	e853 3f00 	ldrex	r3, [r3]
 8017bd6:	613b      	str	r3, [r7, #16]
   return(result);
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	f023 0310 	bic.w	r3, r3, #16
 8017bde:	627b      	str	r3, [r7, #36]	; 0x24
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	681b      	ldr	r3, [r3, #0]
 8017be4:	330c      	adds	r3, #12
 8017be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017be8:	623a      	str	r2, [r7, #32]
 8017bea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bec:	69f9      	ldr	r1, [r7, #28]
 8017bee:	6a3a      	ldr	r2, [r7, #32]
 8017bf0:	e841 2300 	strex	r3, r2, [r1]
 8017bf4:	61bb      	str	r3, [r7, #24]
   return(result);
 8017bf6:	69bb      	ldr	r3, [r7, #24]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d1e5      	bne.n	8017bc8 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	681b      	ldr	r3, [r3, #0]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	f003 0310 	and.w	r3, r3, #16
 8017c06:	2b10      	cmp	r3, #16
 8017c08:	d10a      	bne.n	8017c20 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	60fb      	str	r3, [r7, #12]
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	60fb      	str	r3, [r7, #12]
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	60fb      	str	r3, [r7, #12]
 8017c1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8017c24:	4619      	mov	r1, r3
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f7ff f9d7 	bl	8016fda <HAL_UARTEx_RxEventCallback>
 8017c2c:	e002      	b.n	8017c34 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8017c2e:	6878      	ldr	r0, [r7, #4]
 8017c30:	f7e9 ffb4 	bl	8001b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8017c34:	2300      	movs	r3, #0
 8017c36:	e002      	b.n	8017c3e <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8017c38:	2300      	movs	r3, #0
 8017c3a:	e000      	b.n	8017c3e <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8017c3c:	2302      	movs	r3, #2
  }
}
 8017c3e:	4618      	mov	r0, r3
 8017c40:	3730      	adds	r7, #48	; 0x30
 8017c42:	46bd      	mov	sp, r7
 8017c44:	bd80      	pop	{r7, pc}

08017c46 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017c46:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8017c4a:	b0c0      	sub	sp, #256	; 0x100
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c56:	681b      	ldr	r3, [r3, #0]
 8017c58:	691b      	ldr	r3, [r3, #16]
 8017c5a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8017c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c62:	68d9      	ldr	r1, [r3, #12]
 8017c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c68:	681a      	ldr	r2, [r3, #0]
 8017c6a:	ea40 0301 	orr.w	r3, r0, r1
 8017c6e:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c74:	689a      	ldr	r2, [r3, #8]
 8017c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c7a:	691b      	ldr	r3, [r3, #16]
 8017c7c:	431a      	orrs	r2, r3
 8017c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c82:	695b      	ldr	r3, [r3, #20]
 8017c84:	431a      	orrs	r2, r3
 8017c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c8a:	69db      	ldr	r3, [r3, #28]
 8017c8c:	4313      	orrs	r3, r2
 8017c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8017c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017c96:	681b      	ldr	r3, [r3, #0]
 8017c98:	68db      	ldr	r3, [r3, #12]
 8017c9a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8017c9e:	f021 010c 	bic.w	r1, r1, #12
 8017ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017cac:	430b      	orrs	r3, r1
 8017cae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	695b      	ldr	r3, [r3, #20]
 8017cb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8017cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cc0:	6999      	ldr	r1, [r3, #24]
 8017cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cc6:	681a      	ldr	r2, [r3, #0]
 8017cc8:	ea40 0301 	orr.w	r3, r0, r1
 8017ccc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cd2:	681a      	ldr	r2, [r3, #0]
 8017cd4:	4b8e      	ldr	r3, [pc, #568]	; (8017f10 <UART_SetConfig+0x2ca>)
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d005      	beq.n	8017ce6 <UART_SetConfig+0xa0>
 8017cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cde:	681a      	ldr	r2, [r3, #0]
 8017ce0:	4b8c      	ldr	r3, [pc, #560]	; (8017f14 <UART_SetConfig+0x2ce>)
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d104      	bne.n	8017cf0 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8017ce6:	f7fa fa11 	bl	801210c <HAL_RCC_GetPCLK2Freq>
 8017cea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8017cee:	e003      	b.n	8017cf8 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8017cf0:	f7fa f9f8 	bl	80120e4 <HAL_RCC_GetPCLK1Freq>
 8017cf4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cfc:	69db      	ldr	r3, [r3, #28]
 8017cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017d02:	f040 810b 	bne.w	8017f1c <UART_SetConfig+0x2d6>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8017d10:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8017d14:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8017d18:	4622      	mov	r2, r4
 8017d1a:	462b      	mov	r3, r5
 8017d1c:	1891      	adds	r1, r2, r2
 8017d1e:	65b9      	str	r1, [r7, #88]	; 0x58
 8017d20:	415b      	adcs	r3, r3
 8017d22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017d24:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8017d28:	4621      	mov	r1, r4
 8017d2a:	eb12 0801 	adds.w	r8, r2, r1
 8017d2e:	4629      	mov	r1, r5
 8017d30:	eb43 0901 	adc.w	r9, r3, r1
 8017d34:	f04f 0200 	mov.w	r2, #0
 8017d38:	f04f 0300 	mov.w	r3, #0
 8017d3c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8017d40:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8017d44:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8017d48:	4690      	mov	r8, r2
 8017d4a:	4699      	mov	r9, r3
 8017d4c:	4623      	mov	r3, r4
 8017d4e:	eb18 0303 	adds.w	r3, r8, r3
 8017d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8017d56:	462b      	mov	r3, r5
 8017d58:	eb49 0303 	adc.w	r3, r9, r3
 8017d5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8017d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	2200      	movs	r2, #0
 8017d68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8017d6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8017d70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8017d74:	460b      	mov	r3, r1
 8017d76:	18db      	adds	r3, r3, r3
 8017d78:	653b      	str	r3, [r7, #80]	; 0x50
 8017d7a:	4613      	mov	r3, r2
 8017d7c:	eb42 0303 	adc.w	r3, r2, r3
 8017d80:	657b      	str	r3, [r7, #84]	; 0x54
 8017d82:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8017d86:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8017d8a:	f001 fabb 	bl	8019304 <__aeabi_uldivmod>
 8017d8e:	4602      	mov	r2, r0
 8017d90:	460b      	mov	r3, r1
 8017d92:	4b61      	ldr	r3, [pc, #388]	; (8017f18 <UART_SetConfig+0x2d2>)
 8017d94:	fba3 2302 	umull	r2, r3, r3, r2
 8017d98:	095b      	lsrs	r3, r3, #5
 8017d9a:	011c      	lsls	r4, r3, #4
 8017d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017da0:	2200      	movs	r2, #0
 8017da2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8017da6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8017daa:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8017dae:	4642      	mov	r2, r8
 8017db0:	464b      	mov	r3, r9
 8017db2:	1891      	adds	r1, r2, r2
 8017db4:	64b9      	str	r1, [r7, #72]	; 0x48
 8017db6:	415b      	adcs	r3, r3
 8017db8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017dba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8017dbe:	4641      	mov	r1, r8
 8017dc0:	eb12 0a01 	adds.w	sl, r2, r1
 8017dc4:	4649      	mov	r1, r9
 8017dc6:	eb43 0b01 	adc.w	fp, r3, r1
 8017dca:	f04f 0200 	mov.w	r2, #0
 8017dce:	f04f 0300 	mov.w	r3, #0
 8017dd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017dd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8017dda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8017dde:	4692      	mov	sl, r2
 8017de0:	469b      	mov	fp, r3
 8017de2:	4643      	mov	r3, r8
 8017de4:	eb1a 0303 	adds.w	r3, sl, r3
 8017de8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8017dec:	464b      	mov	r3, r9
 8017dee:	eb4b 0303 	adc.w	r3, fp, r3
 8017df2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8017df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017dfa:	685b      	ldr	r3, [r3, #4]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8017e02:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8017e06:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8017e0a:	460b      	mov	r3, r1
 8017e0c:	18db      	adds	r3, r3, r3
 8017e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8017e10:	4613      	mov	r3, r2
 8017e12:	eb42 0303 	adc.w	r3, r2, r3
 8017e16:	647b      	str	r3, [r7, #68]	; 0x44
 8017e18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8017e1c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8017e20:	f001 fa70 	bl	8019304 <__aeabi_uldivmod>
 8017e24:	4602      	mov	r2, r0
 8017e26:	460b      	mov	r3, r1
 8017e28:	4611      	mov	r1, r2
 8017e2a:	4b3b      	ldr	r3, [pc, #236]	; (8017f18 <UART_SetConfig+0x2d2>)
 8017e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8017e30:	095b      	lsrs	r3, r3, #5
 8017e32:	2264      	movs	r2, #100	; 0x64
 8017e34:	fb02 f303 	mul.w	r3, r2, r3
 8017e38:	1acb      	subs	r3, r1, r3
 8017e3a:	00db      	lsls	r3, r3, #3
 8017e3c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8017e40:	4b35      	ldr	r3, [pc, #212]	; (8017f18 <UART_SetConfig+0x2d2>)
 8017e42:	fba3 2302 	umull	r2, r3, r3, r2
 8017e46:	095b      	lsrs	r3, r3, #5
 8017e48:	005b      	lsls	r3, r3, #1
 8017e4a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8017e4e:	441c      	add	r4, r3
 8017e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017e54:	2200      	movs	r2, #0
 8017e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8017e5a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8017e5e:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8017e62:	4642      	mov	r2, r8
 8017e64:	464b      	mov	r3, r9
 8017e66:	1891      	adds	r1, r2, r2
 8017e68:	63b9      	str	r1, [r7, #56]	; 0x38
 8017e6a:	415b      	adcs	r3, r3
 8017e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017e6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8017e72:	4641      	mov	r1, r8
 8017e74:	1851      	adds	r1, r2, r1
 8017e76:	6339      	str	r1, [r7, #48]	; 0x30
 8017e78:	4649      	mov	r1, r9
 8017e7a:	414b      	adcs	r3, r1
 8017e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8017e7e:	f04f 0200 	mov.w	r2, #0
 8017e82:	f04f 0300 	mov.w	r3, #0
 8017e86:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8017e8a:	4659      	mov	r1, fp
 8017e8c:	00cb      	lsls	r3, r1, #3
 8017e8e:	4651      	mov	r1, sl
 8017e90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017e94:	4651      	mov	r1, sl
 8017e96:	00ca      	lsls	r2, r1, #3
 8017e98:	4610      	mov	r0, r2
 8017e9a:	4619      	mov	r1, r3
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	4642      	mov	r2, r8
 8017ea0:	189b      	adds	r3, r3, r2
 8017ea2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8017ea6:	464b      	mov	r3, r9
 8017ea8:	460a      	mov	r2, r1
 8017eaa:	eb42 0303 	adc.w	r3, r2, r3
 8017eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8017eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017eb6:	685b      	ldr	r3, [r3, #4]
 8017eb8:	2200      	movs	r2, #0
 8017eba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8017ebe:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8017ec2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8017ec6:	460b      	mov	r3, r1
 8017ec8:	18db      	adds	r3, r3, r3
 8017eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8017ecc:	4613      	mov	r3, r2
 8017ece:	eb42 0303 	adc.w	r3, r2, r3
 8017ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ed4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8017ed8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8017edc:	f001 fa12 	bl	8019304 <__aeabi_uldivmod>
 8017ee0:	4602      	mov	r2, r0
 8017ee2:	460b      	mov	r3, r1
 8017ee4:	4b0c      	ldr	r3, [pc, #48]	; (8017f18 <UART_SetConfig+0x2d2>)
 8017ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8017eea:	095b      	lsrs	r3, r3, #5
 8017eec:	2164      	movs	r1, #100	; 0x64
 8017eee:	fb01 f303 	mul.w	r3, r1, r3
 8017ef2:	1ad3      	subs	r3, r2, r3
 8017ef4:	00db      	lsls	r3, r3, #3
 8017ef6:	3332      	adds	r3, #50	; 0x32
 8017ef8:	4a07      	ldr	r2, [pc, #28]	; (8017f18 <UART_SetConfig+0x2d2>)
 8017efa:	fba2 2303 	umull	r2, r3, r2, r3
 8017efe:	095b      	lsrs	r3, r3, #5
 8017f00:	f003 0207 	and.w	r2, r3, #7
 8017f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	4422      	add	r2, r4
 8017f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8017f0e:	e104      	b.n	801811a <UART_SetConfig+0x4d4>
 8017f10:	40011000 	.word	0x40011000
 8017f14:	40011400 	.word	0x40011400
 8017f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8017f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017f20:	2200      	movs	r2, #0
 8017f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8017f26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8017f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8017f2e:	4642      	mov	r2, r8
 8017f30:	464b      	mov	r3, r9
 8017f32:	1891      	adds	r1, r2, r2
 8017f34:	6239      	str	r1, [r7, #32]
 8017f36:	415b      	adcs	r3, r3
 8017f38:	627b      	str	r3, [r7, #36]	; 0x24
 8017f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8017f3e:	4641      	mov	r1, r8
 8017f40:	1854      	adds	r4, r2, r1
 8017f42:	4649      	mov	r1, r9
 8017f44:	eb43 0501 	adc.w	r5, r3, r1
 8017f48:	f04f 0200 	mov.w	r2, #0
 8017f4c:	f04f 0300 	mov.w	r3, #0
 8017f50:	00eb      	lsls	r3, r5, #3
 8017f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8017f56:	00e2      	lsls	r2, r4, #3
 8017f58:	4614      	mov	r4, r2
 8017f5a:	461d      	mov	r5, r3
 8017f5c:	4643      	mov	r3, r8
 8017f5e:	18e3      	adds	r3, r4, r3
 8017f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017f64:	464b      	mov	r3, r9
 8017f66:	eb45 0303 	adc.w	r3, r5, r3
 8017f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017f72:	685b      	ldr	r3, [r3, #4]
 8017f74:	2200      	movs	r2, #0
 8017f76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017f7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8017f7e:	f04f 0200 	mov.w	r2, #0
 8017f82:	f04f 0300 	mov.w	r3, #0
 8017f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8017f8a:	4629      	mov	r1, r5
 8017f8c:	008b      	lsls	r3, r1, #2
 8017f8e:	4621      	mov	r1, r4
 8017f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8017f94:	4621      	mov	r1, r4
 8017f96:	008a      	lsls	r2, r1, #2
 8017f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8017f9c:	f001 f9b2 	bl	8019304 <__aeabi_uldivmod>
 8017fa0:	4602      	mov	r2, r0
 8017fa2:	460b      	mov	r3, r1
 8017fa4:	4b60      	ldr	r3, [pc, #384]	; (8018128 <UART_SetConfig+0x4e2>)
 8017fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8017faa:	095b      	lsrs	r3, r3, #5
 8017fac:	011c      	lsls	r4, r3, #4
 8017fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017fb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8017fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8017fc0:	4642      	mov	r2, r8
 8017fc2:	464b      	mov	r3, r9
 8017fc4:	1891      	adds	r1, r2, r2
 8017fc6:	61b9      	str	r1, [r7, #24]
 8017fc8:	415b      	adcs	r3, r3
 8017fca:	61fb      	str	r3, [r7, #28]
 8017fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8017fd0:	4641      	mov	r1, r8
 8017fd2:	1851      	adds	r1, r2, r1
 8017fd4:	6139      	str	r1, [r7, #16]
 8017fd6:	4649      	mov	r1, r9
 8017fd8:	414b      	adcs	r3, r1
 8017fda:	617b      	str	r3, [r7, #20]
 8017fdc:	f04f 0200 	mov.w	r2, #0
 8017fe0:	f04f 0300 	mov.w	r3, #0
 8017fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8017fe8:	4659      	mov	r1, fp
 8017fea:	00cb      	lsls	r3, r1, #3
 8017fec:	4651      	mov	r1, sl
 8017fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8017ff2:	4651      	mov	r1, sl
 8017ff4:	00ca      	lsls	r2, r1, #3
 8017ff6:	4610      	mov	r0, r2
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	4642      	mov	r2, r8
 8017ffe:	189b      	adds	r3, r3, r2
 8018000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8018004:	464b      	mov	r3, r9
 8018006:	460a      	mov	r2, r1
 8018008:	eb42 0303 	adc.w	r3, r2, r3
 801800c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8018010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018014:	685b      	ldr	r3, [r3, #4]
 8018016:	2200      	movs	r2, #0
 8018018:	67bb      	str	r3, [r7, #120]	; 0x78
 801801a:	67fa      	str	r2, [r7, #124]	; 0x7c
 801801c:	f04f 0200 	mov.w	r2, #0
 8018020:	f04f 0300 	mov.w	r3, #0
 8018024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8018028:	4649      	mov	r1, r9
 801802a:	008b      	lsls	r3, r1, #2
 801802c:	4641      	mov	r1, r8
 801802e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8018032:	4641      	mov	r1, r8
 8018034:	008a      	lsls	r2, r1, #2
 8018036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 801803a:	f001 f963 	bl	8019304 <__aeabi_uldivmod>
 801803e:	4602      	mov	r2, r0
 8018040:	460b      	mov	r3, r1
 8018042:	4b39      	ldr	r3, [pc, #228]	; (8018128 <UART_SetConfig+0x4e2>)
 8018044:	fba3 1302 	umull	r1, r3, r3, r2
 8018048:	095b      	lsrs	r3, r3, #5
 801804a:	2164      	movs	r1, #100	; 0x64
 801804c:	fb01 f303 	mul.w	r3, r1, r3
 8018050:	1ad3      	subs	r3, r2, r3
 8018052:	011b      	lsls	r3, r3, #4
 8018054:	3332      	adds	r3, #50	; 0x32
 8018056:	4a34      	ldr	r2, [pc, #208]	; (8018128 <UART_SetConfig+0x4e2>)
 8018058:	fba2 2303 	umull	r2, r3, r2, r3
 801805c:	095b      	lsrs	r3, r3, #5
 801805e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018062:	441c      	add	r4, r3
 8018064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018068:	2200      	movs	r2, #0
 801806a:	673b      	str	r3, [r7, #112]	; 0x70
 801806c:	677a      	str	r2, [r7, #116]	; 0x74
 801806e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8018072:	4642      	mov	r2, r8
 8018074:	464b      	mov	r3, r9
 8018076:	1891      	adds	r1, r2, r2
 8018078:	60b9      	str	r1, [r7, #8]
 801807a:	415b      	adcs	r3, r3
 801807c:	60fb      	str	r3, [r7, #12]
 801807e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8018082:	4641      	mov	r1, r8
 8018084:	1851      	adds	r1, r2, r1
 8018086:	6039      	str	r1, [r7, #0]
 8018088:	4649      	mov	r1, r9
 801808a:	414b      	adcs	r3, r1
 801808c:	607b      	str	r3, [r7, #4]
 801808e:	f04f 0200 	mov.w	r2, #0
 8018092:	f04f 0300 	mov.w	r3, #0
 8018096:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801809a:	4659      	mov	r1, fp
 801809c:	00cb      	lsls	r3, r1, #3
 801809e:	4651      	mov	r1, sl
 80180a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80180a4:	4651      	mov	r1, sl
 80180a6:	00ca      	lsls	r2, r1, #3
 80180a8:	4610      	mov	r0, r2
 80180aa:	4619      	mov	r1, r3
 80180ac:	4603      	mov	r3, r0
 80180ae:	4642      	mov	r2, r8
 80180b0:	189b      	adds	r3, r3, r2
 80180b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80180b4:	464b      	mov	r3, r9
 80180b6:	460a      	mov	r2, r1
 80180b8:	eb42 0303 	adc.w	r3, r2, r3
 80180bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80180be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180c2:	685b      	ldr	r3, [r3, #4]
 80180c4:	2200      	movs	r2, #0
 80180c6:	663b      	str	r3, [r7, #96]	; 0x60
 80180c8:	667a      	str	r2, [r7, #100]	; 0x64
 80180ca:	f04f 0200 	mov.w	r2, #0
 80180ce:	f04f 0300 	mov.w	r3, #0
 80180d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80180d6:	4649      	mov	r1, r9
 80180d8:	008b      	lsls	r3, r1, #2
 80180da:	4641      	mov	r1, r8
 80180dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80180e0:	4641      	mov	r1, r8
 80180e2:	008a      	lsls	r2, r1, #2
 80180e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80180e8:	f001 f90c 	bl	8019304 <__aeabi_uldivmod>
 80180ec:	4602      	mov	r2, r0
 80180ee:	460b      	mov	r3, r1
 80180f0:	4b0d      	ldr	r3, [pc, #52]	; (8018128 <UART_SetConfig+0x4e2>)
 80180f2:	fba3 1302 	umull	r1, r3, r3, r2
 80180f6:	095b      	lsrs	r3, r3, #5
 80180f8:	2164      	movs	r1, #100	; 0x64
 80180fa:	fb01 f303 	mul.w	r3, r1, r3
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	011b      	lsls	r3, r3, #4
 8018102:	3332      	adds	r3, #50	; 0x32
 8018104:	4a08      	ldr	r2, [pc, #32]	; (8018128 <UART_SetConfig+0x4e2>)
 8018106:	fba2 2303 	umull	r2, r3, r2, r3
 801810a:	095b      	lsrs	r3, r3, #5
 801810c:	f003 020f 	and.w	r2, r3, #15
 8018110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	4422      	add	r2, r4
 8018118:	609a      	str	r2, [r3, #8]
}
 801811a:	bf00      	nop
 801811c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8018120:	46bd      	mov	sp, r7
 8018122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8018126:	bf00      	nop
 8018128:	51eb851f 	.word	0x51eb851f

0801812c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 801812c:	b480      	push	{r7}
 801812e:	b085      	sub	sp, #20
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018136:	2300      	movs	r3, #0
 8018138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 801813a:	683b      	ldr	r3, [r7, #0]
 801813c:	681a      	ldr	r2, [r3, #0]
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018144:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8018146:	68fa      	ldr	r2, [r7, #12]
 8018148:	4b20      	ldr	r3, [pc, #128]	; (80181cc <FSMC_NORSRAM_Init+0xa0>)
 801814a:	4013      	ands	r3, r2
 801814c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8018156:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8018158:	683b      	ldr	r3, [r7, #0]
 801815a:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 801815c:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8018162:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8018168:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 801816e:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8018170:	683b      	ldr	r3, [r7, #0]
 8018172:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8018174:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8018176:	683b      	ldr	r3, [r7, #0]
 8018178:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 801817a:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8018180:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8018186:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 801818c:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8018192:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8018194:	683b      	ldr	r3, [r7, #0]
 8018196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8018198:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 801819a:	68fa      	ldr	r2, [r7, #12]
 801819c:	4313      	orrs	r3, r2
 801819e:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	689b      	ldr	r3, [r3, #8]
 80181a4:	2b08      	cmp	r3, #8
 80181a6:	d103      	bne.n	80181b0 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181ae:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80181b0:	683b      	ldr	r3, [r7, #0]
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	68f9      	ldr	r1, [r7, #12]
 80181b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80181bc:	2300      	movs	r3, #0
}
 80181be:	4618      	mov	r0, r3
 80181c0:	3714      	adds	r7, #20
 80181c2:	46bd      	mov	sp, r7
 80181c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c8:	4770      	bx	lr
 80181ca:	bf00      	nop
 80181cc:	fff00080 	.word	0xfff00080

080181d0 <FSMC_NORSRAM_DeInit>:
  * @param  ExDevice Pointer to NORSRAM extended mode device instance  
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_DeInit(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_EXTENDED_TypeDef *ExDevice, uint32_t Bank)
{
 80181d0:	b480      	push	{r7}
 80181d2:	b085      	sub	sp, #20
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	60f8      	str	r0, [r7, #12]
 80181d8:	60b9      	str	r1, [r7, #8]
 80181da:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_EXTENDED_DEVICE(ExDevice));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Disable the FSMC_NORSRAM device */
  __FSMC_NORSRAM_DISABLE(Device, Bank);
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	687a      	ldr	r2, [r7, #4]
 80181e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181e4:	f023 0101 	bic.w	r1, r3, #1
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	687a      	ldr	r2, [r7, #4]
 80181ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* De-initialize the FSMC_NORSRAM device */
  /* FSMC_NORSRAM_BANK1 */
  if(Bank == FSMC_NORSRAM_BANK1)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d106      	bne.n	8018204 <FSMC_NORSRAM_DeInit+0x34>
  {
    Device->BTCR[Bank] = 0x000030DBU;    
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	f243 01db 	movw	r1, #12507	; 0x30db
 80181fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018202:	e005      	b.n	8018210 <FSMC_NORSRAM_DeInit+0x40>
  }
  /* FSMC_NORSRAM_BANK2, FSMC_NORSRAM_BANK3 or FSMC_NORSRAM_BANK4 */
  else
  {   
    Device->BTCR[Bank] = 0x000030D2U; 
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	f243 01d2 	movw	r1, #12498	; 0x30d2
 801820c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  
  Device->BTCR[Bank + 1U] = 0x0FFFFFFFU;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	1c5a      	adds	r2, r3, #1
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801821a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  ExDevice->BWTR[Bank]    = 0x0FFFFFFFU;
 801821e:	68bb      	ldr	r3, [r7, #8]
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8018226:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   
  return HAL_OK;
 801822a:	2300      	movs	r3, #0
}
 801822c:	4618      	mov	r0, r3
 801822e:	3714      	adds	r7, #20
 8018230:	46bd      	mov	sp, r7
 8018232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018236:	4770      	bx	lr

08018238 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8018238:	b480      	push	{r7}
 801823a:	b087      	sub	sp, #28
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8018244:	2300      	movs	r3, #0
 8018246:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	1c5a      	adds	r2, r3, #1
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018252:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801825a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	685b      	ldr	r3, [r3, #4]
 8018264:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018266:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	689b      	ldr	r3, [r3, #8]
 801826c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 801826e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	68db      	ldr	r3, [r3, #12]
 8018274:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8018276:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	691b      	ldr	r3, [r3, #16]
 801827c:	3b01      	subs	r3, #1
 801827e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8018280:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8018282:	68bb      	ldr	r3, [r7, #8]
 8018284:	695b      	ldr	r3, [r3, #20]
 8018286:	3b02      	subs	r3, #2
 8018288:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 801828a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018290:	4313      	orrs	r3, r2
 8018292:	697a      	ldr	r2, [r7, #20]
 8018294:	4313      	orrs	r3, r2
 8018296:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	1c5a      	adds	r2, r3, #1
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	6979      	ldr	r1, [r7, #20]
 80182a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80182a4:	2300      	movs	r3, #0
}
 80182a6:	4618      	mov	r0, r3
 80182a8:	371c      	adds	r7, #28
 80182aa:	46bd      	mov	sp, r7
 80182ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b0:	4770      	bx	lr

080182b2 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80182b2:	b480      	push	{r7}
 80182b4:	b087      	sub	sp, #28
 80182b6:	af00      	add	r7, sp, #0
 80182b8:	60f8      	str	r0, [r7, #12]
 80182ba:	60b9      	str	r1, [r7, #8]
 80182bc:	607a      	str	r2, [r7, #4]
 80182be:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80182c0:	2300      	movs	r3, #0
 80182c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80182c4:	683b      	ldr	r3, [r7, #0]
 80182c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80182ca:	d122      	bne.n	8018312 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	687a      	ldr	r2, [r7, #4]
 80182d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80182d4:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80182d6:	697a      	ldr	r2, [r7, #20]
 80182d8:	4b14      	ldr	r3, [pc, #80]	; (801832c <FSMC_NORSRAM_Extended_Timing_Init+0x7a>)
 80182da:	4013      	ands	r3, r2
 80182dc:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	685b      	ldr	r3, [r3, #4]
 80182e6:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80182e8:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	689b      	ldr	r3, [r3, #8]
 80182ee:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80182f0:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80182f2:	68bb      	ldr	r3, [r7, #8]
 80182f4:	68db      	ldr	r3, [r3, #12]
 80182f6:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80182f8:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80182fa:	68bb      	ldr	r3, [r7, #8]
 80182fc:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80182fe:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8018300:	697a      	ldr	r2, [r7, #20]
 8018302:	4313      	orrs	r3, r2
 8018304:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	687a      	ldr	r2, [r7, #4]
 801830a:	6979      	ldr	r1, [r7, #20]
 801830c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018310:	e005      	b.n	801831e <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	687a      	ldr	r2, [r7, #4]
 8018316:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 801831a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 801831e:	2300      	movs	r3, #0
}
 8018320:	4618      	mov	r0, r3
 8018322:	371c      	adds	r7, #28
 8018324:	46bd      	mov	sp, r7
 8018326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801832a:	4770      	bx	lr
 801832c:	cff00000 	.word	0xcff00000

08018330 <FSMC_NORSRAM_WriteOperation_Enable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Enable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 8018330:	b480      	push	{r7}
 8018332:	b083      	sub	sp, #12
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Enable write operation */
  Device->BTCR[Bank] |= FSMC_WRITE_OPERATION_ENABLE; 
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	683a      	ldr	r2, [r7, #0]
 801833e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018342:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	683a      	ldr	r2, [r7, #0]
 801834a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801834e:	2300      	movs	r3, #0
}
 8018350:	4618      	mov	r0, r3
 8018352:	370c      	adds	r7, #12
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr

0801835c <FSMC_NORSRAM_WriteOperation_Disable>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Bank NORSRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_WriteOperation_Disable(FSMC_NORSRAM_TypeDef *Device, uint32_t Bank)
{
 801835c:	b480      	push	{r7}
 801835e:	b083      	sub	sp, #12
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Disable write operation */
  Device->BTCR[Bank] &= ~FSMC_WRITE_OPERATION_ENABLE; 
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	683a      	ldr	r2, [r7, #0]
 801836a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801836e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	683a      	ldr	r2, [r7, #0]
 8018376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;  
 801837a:	2300      	movs	r3, #0
}
 801837c:	4618      	mov	r0, r3
 801837e:	370c      	adds	r7, #12
 8018380:	46bd      	mov	sp, r7
 8018382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018386:	4770      	bx	lr

08018388 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8018388:	b480      	push	{r7}
 801838a:	b085      	sub	sp, #20
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
 8018390:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8018392:	2300      	movs	r3, #0
 8018394:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8018396:	683b      	ldr	r3, [r7, #0]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	2b10      	cmp	r3, #16
 801839c:	d103      	bne.n	80183a6 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	60fb      	str	r3, [r7, #12]
 80183a4:	e002      	b.n	80183ac <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	6a1b      	ldr	r3, [r3, #32]
 80183aa:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 80183ac:	68fa      	ldr	r2, [r7, #12]
 80183ae:	4b16      	ldr	r3, [pc, #88]	; (8018408 <FSMC_NAND_Init+0x80>)
 80183b0:	4013      	ands	r3, r2
 80183b2:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 80183bc:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 80183be:	683b      	ldr	r3, [r7, #0]
 80183c0:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 80183c2:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 80183c4:	683b      	ldr	r3, [r7, #0]
 80183c6:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 80183c8:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 80183ca:	683b      	ldr	r3, [r7, #0]
 80183cc:	695b      	ldr	r3, [r3, #20]
 80183ce:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 80183d0:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 80183d2:	683b      	ldr	r3, [r7, #0]
 80183d4:	699b      	ldr	r3, [r3, #24]
 80183d6:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 80183d8:	431a      	orrs	r2, r3
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	4313      	orrs	r3, r2
 80183de:	f043 0308 	orr.w	r3, r3, #8
 80183e2:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	2b10      	cmp	r3, #16
 80183ea:	d103      	bne.n	80183f4 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	68fa      	ldr	r2, [r7, #12]
 80183f0:	601a      	str	r2, [r3, #0]
 80183f2:	e002      	b.n	80183fa <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	68fa      	ldr	r2, [r7, #12]
 80183f8:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80183fa:	2300      	movs	r3, #0
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3714      	adds	r7, #20
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr
 8018408:	fff00181 	.word	0xfff00181

0801840c <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 801840c:	b480      	push	{r7}
 801840e:	b087      	sub	sp, #28
 8018410:	af00      	add	r7, sp, #0
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018418:	2300      	movs	r3, #0
 801841a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	2b10      	cmp	r3, #16
 8018420:	d103      	bne.n	801842a <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	689b      	ldr	r3, [r3, #8]
 8018426:	617b      	str	r3, [r7, #20]
 8018428:	e002      	b.n	8018430 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 801842a:	68fb      	ldr	r3, [r7, #12]
 801842c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801842e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8018430:	2300      	movs	r3, #0
 8018432:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 801843e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	689b      	ldr	r3, [r3, #8]
 8018444:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8018446:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	68db      	ldr	r3, [r3, #12]
 801844c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 801844e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8018450:	697a      	ldr	r2, [r7, #20]
 8018452:	4313      	orrs	r3, r2
 8018454:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	2b10      	cmp	r3, #16
 801845a:	d103      	bne.n	8018464 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	697a      	ldr	r2, [r7, #20]
 8018460:	609a      	str	r2, [r3, #8]
 8018462:	e002      	b.n	801846a <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	697a      	ldr	r2, [r7, #20]
 8018468:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 801846a:	2300      	movs	r3, #0
}
 801846c:	4618      	mov	r0, r3
 801846e:	371c      	adds	r7, #28
 8018470:	46bd      	mov	sp, r7
 8018472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018476:	4770      	bx	lr

08018478 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8018478:	b480      	push	{r7}
 801847a:	b087      	sub	sp, #28
 801847c:	af00      	add	r7, sp, #0
 801847e:	60f8      	str	r0, [r7, #12]
 8018480:	60b9      	str	r1, [r7, #8]
 8018482:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8018484:	2300      	movs	r3, #0
 8018486:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2b10      	cmp	r3, #16
 801848c:	d103      	bne.n	8018496 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	68db      	ldr	r3, [r3, #12]
 8018492:	617b      	str	r3, [r7, #20]
 8018494:	e002      	b.n	801849c <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801849a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 801849c:	2300      	movs	r3, #0
 801849e:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	685b      	ldr	r3, [r3, #4]
 80184a8:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80184aa:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80184ac:	68bb      	ldr	r3, [r7, #8]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80184b2:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80184b4:	68bb      	ldr	r3, [r7, #8]
 80184b6:	68db      	ldr	r3, [r3, #12]
 80184b8:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80184ba:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80184bc:	697a      	ldr	r2, [r7, #20]
 80184be:	4313      	orrs	r3, r2
 80184c0:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	2b10      	cmp	r3, #16
 80184c6:	d103      	bne.n	80184d0 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	697a      	ldr	r2, [r7, #20]
 80184cc:	60da      	str	r2, [r3, #12]
 80184ce:	e002      	b.n	80184d6 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	697a      	ldr	r2, [r7, #20]
 80184d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 80184d6:	2300      	movs	r3, #0
}
 80184d8:	4618      	mov	r0, r3
 80184da:	371c      	adds	r7, #28
 80184dc:	46bd      	mov	sp, r7
 80184de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e2:	4770      	bx	lr

080184e4 <FSMC_NAND_DeInit>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_DeInit(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 80184e4:	b480      	push	{r7}
 80184e6:	b083      	sub	sp, #12
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
 80184ec:	6039      	str	r1, [r7, #0]
  /* Disable the NAND Bank */
  __FSMC_NAND_DISABLE(Device, Bank);
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	2b10      	cmp	r3, #16
 80184f2:	d106      	bne.n	8018502 <FSMC_NAND_DeInit+0x1e>
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	f023 0204 	bic.w	r2, r3, #4
 80184fc:	687b      	ldr	r3, [r7, #4]
 80184fe:	601a      	str	r2, [r3, #0]
 8018500:	e005      	b.n	801850e <FSMC_NAND_DeInit+0x2a>
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	6a1b      	ldr	r3, [r3, #32]
 8018506:	f023 0204 	bic.w	r2, r3, #4
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	621a      	str	r2, [r3, #32]
 
  /* De-initialize the NAND Bank */
  if(Bank == FSMC_NAND_BANK2)
 801850e:	683b      	ldr	r3, [r7, #0]
 8018510:	2b10      	cmp	r3, #16
 8018512:	d10e      	bne.n	8018532 <FSMC_NAND_DeInit+0x4e>
  {
    /* Set the FSMC_NAND_BANK2 registers to their reset values */
    Device->PCR2  = 0x00000018U;
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	2218      	movs	r2, #24
 8018518:	601a      	str	r2, [r3, #0]
    Device->SR2   = 0x00000040U;
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	2240      	movs	r2, #64	; 0x40
 801851e:	605a      	str	r2, [r3, #4]
    Device->PMEM2 = 0xFCFCFCFCU;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018526:	609a      	str	r2, [r3, #8]
    Device->PATT2 = 0xFCFCFCFCU;  
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801852e:	60da      	str	r2, [r3, #12]
 8018530:	e00d      	b.n	801854e <FSMC_NAND_DeInit+0x6a>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_NAND_BANK3 registers to their reset values */
    Device->PCR3  = 0x00000018U;
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	2218      	movs	r2, #24
 8018536:	621a      	str	r2, [r3, #32]
    Device->SR3   = 0x00000040U;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	2240      	movs	r2, #64	; 0x40
 801853c:	625a      	str	r2, [r3, #36]	; 0x24
    Device->PMEM3 = 0xFCFCFCFCU;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8018544:	629a      	str	r2, [r3, #40]	; 0x28
    Device->PATT3 = 0xFCFCFCFCU; 
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 801854c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;
 801854e:	2300      	movs	r3, #0
}
 8018550:	4618      	mov	r0, r3
 8018552:	370c      	adds	r7, #12
 8018554:	46bd      	mov	sp, r7
 8018556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855a:	4770      	bx	lr

0801855c <FSMC_NAND_ECC_Enable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */    
HAL_StatusTypeDef  FSMC_NAND_ECC_Enable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 801855c:	b480      	push	{r7}
 801855e:	b083      	sub	sp, #12
 8018560:	af00      	add	r7, sp, #0
 8018562:	6078      	str	r0, [r7, #4]
 8018564:	6039      	str	r1, [r7, #0]
  /* Enable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 8018566:	683b      	ldr	r3, [r7, #0]
 8018568:	2b10      	cmp	r3, #16
 801856a:	d106      	bne.n	801857a <FSMC_NAND_ECC_Enable+0x1e>
  {
    Device->PCR2 |= FSMC_PCR2_ECCEN;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	601a      	str	r2, [r3, #0]
 8018578:	e005      	b.n	8018586 <FSMC_NAND_ECC_Enable+0x2a>
  }
  else
  {
    Device->PCR3 |= FSMC_PCR3_ECCEN;
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	6a1b      	ldr	r3, [r3, #32]
 801857e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	621a      	str	r2, [r3, #32]
  } 
  
  return HAL_OK;  
 8018586:	2300      	movs	r3, #0
}
 8018588:	4618      	mov	r0, r3
 801858a:	370c      	adds	r7, #12
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr

08018594 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */  
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)  
{  
 8018594:	b480      	push	{r7}
 8018596:	b083      	sub	sp, #12
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
 801859c:	6039      	str	r1, [r7, #0]
  /* Disable ECC feature */
  if(Bank == FSMC_NAND_BANK2)
 801859e:	683b      	ldr	r3, [r7, #0]
 80185a0:	2b10      	cmp	r3, #16
 80185a2:	d106      	bne.n	80185b2 <FSMC_NAND_ECC_Disable+0x1e>
  {
    Device->PCR2 &= ~FSMC_PCR2_ECCEN;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	601a      	str	r2, [r3, #0]
 80185b0:	e005      	b.n	80185be <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    Device->PCR3 &= ~FSMC_PCR3_ECCEN;
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	6a1b      	ldr	r3, [r3, #32]
 80185b6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	621a      	str	r2, [r3, #32]
  } 

  return HAL_OK;  
 80185be:	2300      	movs	r3, #0
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	370c      	adds	r7, #12
 80185c4:	46bd      	mov	sp, r7
 80185c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ca:	4770      	bx	lr

080185cc <FSMC_NAND_GetECC>:
  * @param  Bank NAND bank number
  * @param  Timeout Timeout wait value  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_GetECC(FSMC_NAND_TypeDef *Device, uint32_t *ECCval, uint32_t Bank, uint32_t Timeout)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b086      	sub	sp, #24
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	60f8      	str	r0, [r7, #12]
 80185d4:	60b9      	str	r1, [r7, #8]
 80185d6:	607a      	str	r2, [r7, #4]
 80185d8:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 80185da:	2300      	movs	r3, #0
 80185dc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */ 
  assert_param(IS_FSMC_NAND_DEVICE(Device)); 
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80185de:	f7ee f825 	bl	800662c <HAL_GetTick>
 80185e2:	6178      	str	r0, [r7, #20]

  /* Wait until FIFO is empty */
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 80185e4:	e010      	b.n	8018608 <FSMC_NAND_GetECC+0x3c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80185e6:	683b      	ldr	r3, [r7, #0]
 80185e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185ec:	d00c      	beq.n	8018608 <FSMC_NAND_GetECC+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80185ee:	683b      	ldr	r3, [r7, #0]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d007      	beq.n	8018604 <FSMC_NAND_GetECC+0x38>
 80185f4:	f7ee f81a 	bl	800662c <HAL_GetTick>
 80185f8:	4602      	mov	r2, r0
 80185fa:	697b      	ldr	r3, [r7, #20]
 80185fc:	1ad3      	subs	r3, r2, r3
 80185fe:	683a      	ldr	r2, [r7, #0]
 8018600:	429a      	cmp	r2, r3
 8018602:	d201      	bcs.n	8018608 <FSMC_NAND_GetECC+0x3c>
      {
        return HAL_TIMEOUT;
 8018604:	2303      	movs	r3, #3
 8018606:	e024      	b.n	8018652 <FSMC_NAND_GetECC+0x86>
  while(__FSMC_NAND_GET_FLAG(Device, Bank, FSMC_FLAG_FEMPT) == RESET)
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	2b10      	cmp	r3, #16
 801860c:	d109      	bne.n	8018622 <FSMC_NAND_GetECC+0x56>
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	685b      	ldr	r3, [r3, #4]
 8018612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018616:	2b40      	cmp	r3, #64	; 0x40
 8018618:	bf14      	ite	ne
 801861a:	2301      	movne	r3, #1
 801861c:	2300      	moveq	r3, #0
 801861e:	b2db      	uxtb	r3, r3
 8018620:	e008      	b.n	8018634 <FSMC_NAND_GetECC+0x68>
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801862a:	2b40      	cmp	r3, #64	; 0x40
 801862c:	bf14      	ite	ne
 801862e:	2301      	movne	r3, #1
 8018630:	2300      	moveq	r3, #0
 8018632:	b2db      	uxtb	r3, r3
 8018634:	2b00      	cmp	r3, #0
 8018636:	d1d6      	bne.n	80185e6 <FSMC_NAND_GetECC+0x1a>
      }
    }   
  }
     
  if(Bank == FSMC_NAND_BANK2)
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	2b10      	cmp	r3, #16
 801863c:	d104      	bne.n	8018648 <FSMC_NAND_GetECC+0x7c>
  {    
    /* Get the ECCR2 register value */
    *ECCval = (uint32_t)Device->ECCR2;
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	695a      	ldr	r2, [r3, #20]
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	601a      	str	r2, [r3, #0]
 8018646:	e003      	b.n	8018650 <FSMC_NAND_GetECC+0x84>
  }
  else
  {    
    /* Get the ECCR3 register value */
    *ECCval = (uint32_t)Device->ECCR3;
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;  
 8018650:	2300      	movs	r3, #0
}
 8018652:	4618      	mov	r0, r3
 8018654:	3718      	adds	r7, #24
 8018656:	46bd      	mov	sp, r7
 8018658:	bd80      	pop	{r7, pc}

0801865a <FSMC_PCCARD_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Init Pointer to PCCARD Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_Init(FSMC_PCCARD_TypeDef *Device, FSMC_PCCARD_InitTypeDef *Init)
{
 801865a:	b480      	push	{r7}
 801865c:	b085      	sub	sp, #20
 801865e:	af00      	add	r7, sp, #0
 8018660:	6078      	str	r0, [r7, #4]
 8018662:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018664:	2300      	movs	r3, #0
 8018666:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_FEATURE(Init->Waitfeature));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));     
  
  /* Get PCCARD control register value */
  tmpr = Device->PCR4;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	60fb      	str	r3, [r7, #12]
  
  /* Clear TAR, TCLR, PWAITEN and PWID bits */
  tmpr &= ((uint32_t)~(FSMC_PCR4_TAR  | FSMC_PCR4_TCLR | FSMC_PCR4_PWAITEN | \
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8018674:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8018678:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR4_PWID | FSMC_PCR4_PTYP));
  
  /* Set FSMC_PCCARD device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 801867a:	683b      	ldr	r3, [r7, #0]
 801867c:	681a      	ldr	r2, [r3, #0]
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
                     (Init->TCLRSetupTime << 9U)     |\
 801867e:	683b      	ldr	r3, [r7, #0]
 8018680:	685b      	ldr	r3, [r3, #4]
 8018682:	025b      	lsls	r3, r3, #9
                     FSMC_NAND_PCC_MEM_BUS_WIDTH_16  |\
 8018684:	431a      	orrs	r2, r3
                     (Init->TARSetupTime << 13U));
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	689b      	ldr	r3, [r3, #8]
 801868a:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature               |\
 801868c:	431a      	orrs	r2, r3
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	4313      	orrs	r3, r2
 8018692:	f043 0310 	orr.w	r3, r3, #16
 8018696:	60fb      	str	r3, [r7, #12]
  
  Device->PCR4 = tmpr;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	68fa      	ldr	r2, [r7, #12]
 801869c:	601a      	str	r2, [r3, #0]
  
  return HAL_OK;
 801869e:	2300      	movs	r3, #0
}
 80186a0:	4618      	mov	r0, r3
 80186a2:	3714      	adds	r7, #20
 80186a4:	46bd      	mov	sp, r7
 80186a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186aa:	4770      	bx	lr

080186ac <FSMC_PCCARD_CommonSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_CommonSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80186ac:	b480      	push	{r7}
 80186ae:	b085      	sub	sp, #20
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]
 80186b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80186b6:	2300      	movs	r3, #0
 80186b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD common space timing register value */
  tmpr = Device->PMEM4;
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	689b      	ldr	r3, [r3, #8]
 80186be:	60fb      	str	r3, [r7, #12]
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM4_MEMSET4  | FSMC_PMEM4_MEMWAIT4 | FSMC_PMEM4_MEMHOLD4 | \
 80186c0:	2300      	movs	r3, #0
 80186c2:	60fb      	str	r3, [r7, #12]
                       FSMC_PMEM4_MEMHIZ4));
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	681a      	ldr	r2, [r3, #0]
                    ((Timing->WaitSetupTime) << 8U)     |\
 80186c8:	683b      	ldr	r3, [r7, #0]
 80186ca:	685b      	ldr	r3, [r3, #4]
 80186cc:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80186ce:	431a      	orrs	r2, r3
                    (Timing->HoldSetupTime) << 16U)     |\
 80186d0:	683b      	ldr	r3, [r7, #0]
 80186d2:	689b      	ldr	r3, [r3, #8]
 80186d4:	041b      	lsls	r3, r3, #16
                    ((Timing->WaitSetupTime) << 8U)     |\
 80186d6:	431a      	orrs	r2, r3
                    ((Timing->HiZSetupTime) << 24U));
 80186d8:	683b      	ldr	r3, [r7, #0]
 80186da:	68db      	ldr	r3, [r3, #12]
 80186dc:	061b      	lsls	r3, r3, #24
                    (Timing->HoldSetupTime) << 16U)     |\
 80186de:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)((Timing->SetupTime                 |\
 80186e0:	68fa      	ldr	r2, [r7, #12]
 80186e2:	4313      	orrs	r3, r2
 80186e4:	60fb      	str	r3, [r7, #12]
  
  Device->PMEM4 = tmpr;
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	68fa      	ldr	r2, [r7, #12]
 80186ea:	609a      	str	r2, [r3, #8]
  
  return HAL_OK;  
 80186ec:	2300      	movs	r3, #0
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3714      	adds	r7, #20
 80186f2:	46bd      	mov	sp, r7
 80186f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186f8:	4770      	bx	lr

080186fa <FSMC_PCCARD_AttributeSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_AttributeSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 80186fa:	b480      	push	{r7}
 80186fc:	b085      	sub	sp, #20
 80186fe:	af00      	add	r7, sp, #0
 8018700:	6078      	str	r0, [r7, #4]
 8018702:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018704:	2300      	movs	r3, #0
 8018706:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get PCCARD timing parameters */
  tmpr = Device->PATT4;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	68db      	ldr	r3, [r3, #12]
 801870c:	60fb      	str	r3, [r7, #12]

  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT4_ATTSET4  | FSMC_PATT4_ATTWAIT4 | FSMC_PATT4_ATTHOLD4 | \
 801870e:	2300      	movs	r3, #0
 8018710:	60fb      	str	r3, [r7, #12]
                       FSMC_PATT4_ATTHIZ4));
  
  /* Set PCCARD timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 8018712:	683b      	ldr	r3, [r7, #0]
 8018714:	681a      	ldr	r2, [r3, #0]
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018716:	683b      	ldr	r3, [r7, #0]
 8018718:	685b      	ldr	r3, [r3, #4]
 801871a:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801871c:	431a      	orrs	r2, r3
                   ((Timing->HoldSetupTime) << 16U)    |\
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	689b      	ldr	r3, [r3, #8]
 8018722:	041b      	lsls	r3, r3, #16
                   ((Timing->WaitSetupTime) << 8U)     |\
 8018724:	431a      	orrs	r2, r3
                   ((Timing->HiZSetupTime) << 24U));
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	68db      	ldr	r3, [r3, #12]
 801872a:	061b      	lsls	r3, r3, #24
                   ((Timing->HoldSetupTime) << 16U)    |\
 801872c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                 |\
 801872e:	68fa      	ldr	r2, [r7, #12]
 8018730:	4313      	orrs	r3, r2
 8018732:	60fb      	str	r3, [r7, #12]
  Device->PATT4 = tmpr; 
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	68fa      	ldr	r2, [r7, #12]
 8018738:	60da      	str	r2, [r3, #12]
                                        
  return HAL_OK;
 801873a:	2300      	movs	r3, #0
}
 801873c:	4618      	mov	r0, r3
 801873e:	3714      	adds	r7, #20
 8018740:	46bd      	mov	sp, r7
 8018742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018746:	4770      	bx	lr

08018748 <FSMC_PCCARD_IOSpace_Timing_Init>:
  * @param  Device Pointer to PCCARD device instance
  * @param  Timing Pointer to PCCARD timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_IOSpace_Timing_Init(FSMC_PCCARD_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing)
{
 8018748:	b480      	push	{r7}
 801874a:	b085      	sub	sp, #20
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8018752:	2300      	movs	r3, #0
 8018754:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));

  /* Get FSMC_PCCARD device timing parameters */
  tmpr = Device->PIO4;
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	691b      	ldr	r3, [r3, #16]
 801875a:	60fb      	str	r3, [r7, #12]

  /* Clear IOSET4, IOWAIT4, IOHOLD4 and IOHIZ4 bits */
  tmpr &= ((uint32_t)~(FSMC_PIO4_IOSET4  | FSMC_PIO4_IOWAIT4 | FSMC_PIO4_IOHOLD4 | \
 801875c:	2300      	movs	r3, #0
 801875e:	60fb      	str	r3, [r7, #12]
                       FSMC_PIO4_IOHIZ4));
  
  /* Set FSMC_PCCARD device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	685b      	ldr	r3, [r3, #4]
 8018768:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 801876a:	431a      	orrs	r2, r3
                     ((Timing->HoldSetupTime) << 16U)    |\
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	689b      	ldr	r3, [r3, #8]
 8018770:	041b      	lsls	r3, r3, #16
                     ((Timing->WaitSetupTime) << 8U)     |\
 8018772:	431a      	orrs	r2, r3
                     ((Timing->HiZSetupTime) << 24U));   
 8018774:	683b      	ldr	r3, [r7, #0]
 8018776:	68db      	ldr	r3, [r3, #12]
 8018778:	061b      	lsls	r3, r3, #24
                     ((Timing->HoldSetupTime) << 16U)    |\
 801877a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                   |\
 801877c:	68fa      	ldr	r2, [r7, #12]
 801877e:	4313      	orrs	r3, r2
 8018780:	60fb      	str	r3, [r7, #12]
  
  Device->PIO4 = tmpr;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	68fa      	ldr	r2, [r7, #12]
 8018786:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 8018788:	2300      	movs	r3, #0
}
 801878a:	4618      	mov	r0, r3
 801878c:	3714      	adds	r7, #20
 801878e:	46bd      	mov	sp, r7
 8018790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018794:	4770      	bx	lr

08018796 <FSMC_PCCARD_DeInit>:
  * @brief  DeInitializes the FSMC_PCCARD device 
  * @param  Device Pointer to PCCARD device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_PCCARD_DeInit(FSMC_PCCARD_TypeDef *Device)
{
 8018796:	b480      	push	{r7}
 8018798:	b083      	sub	sp, #12
 801879a:	af00      	add	r7, sp, #0
 801879c:	6078      	str	r0, [r7, #4]
  /* Disable the FSMC_PCCARD device */
  __FSMC_PCCARD_DISABLE(Device);
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	f023 0204 	bic.w	r2, r3, #4
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	601a      	str	r2, [r3, #0]
  
  /* De-initialize the FSMC_PCCARD device */
  Device->PCR4    = 0x00000018U; 
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2218      	movs	r2, #24
 80187ae:	601a      	str	r2, [r3, #0]
  Device->SR4     = 0x00000000U;	
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	2200      	movs	r2, #0
 80187b4:	605a      	str	r2, [r3, #4]
  Device->PMEM4   = 0xFCFCFCFCU;
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80187bc:	609a      	str	r2, [r3, #8]
  Device->PATT4   = 0xFCFCFCFCU;
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80187c4:	60da      	str	r2, [r3, #12]
  Device->PIO4    = 0xFCFCFCFCU;
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80187cc:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;
 80187ce:	2300      	movs	r3, #0
}
 80187d0:	4618      	mov	r0, r3
 80187d2:	370c      	adds	r7, #12
 80187d4:	46bd      	mov	sp, r7
 80187d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187da:	4770      	bx	lr

080187dc <strlen>:
 80187dc:	4603      	mov	r3, r0
 80187de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80187e2:	2a00      	cmp	r2, #0
 80187e4:	d1fb      	bne.n	80187de <strlen+0x2>
 80187e6:	1a18      	subs	r0, r3, r0
 80187e8:	3801      	subs	r0, #1
 80187ea:	4770      	bx	lr
 80187ec:	0000      	movs	r0, r0
	...

080187f0 <memchr>:
 80187f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80187f4:	2a10      	cmp	r2, #16
 80187f6:	db2b      	blt.n	8018850 <memchr+0x60>
 80187f8:	f010 0f07 	tst.w	r0, #7
 80187fc:	d008      	beq.n	8018810 <memchr+0x20>
 80187fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018802:	3a01      	subs	r2, #1
 8018804:	428b      	cmp	r3, r1
 8018806:	d02d      	beq.n	8018864 <memchr+0x74>
 8018808:	f010 0f07 	tst.w	r0, #7
 801880c:	b342      	cbz	r2, 8018860 <memchr+0x70>
 801880e:	d1f6      	bne.n	80187fe <memchr+0xe>
 8018810:	b4f0      	push	{r4, r5, r6, r7}
 8018812:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8018816:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801881a:	f022 0407 	bic.w	r4, r2, #7
 801881e:	f07f 0700 	mvns.w	r7, #0
 8018822:	2300      	movs	r3, #0
 8018824:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8018828:	3c08      	subs	r4, #8
 801882a:	ea85 0501 	eor.w	r5, r5, r1
 801882e:	ea86 0601 	eor.w	r6, r6, r1
 8018832:	fa85 f547 	uadd8	r5, r5, r7
 8018836:	faa3 f587 	sel	r5, r3, r7
 801883a:	fa86 f647 	uadd8	r6, r6, r7
 801883e:	faa5 f687 	sel	r6, r5, r7
 8018842:	b98e      	cbnz	r6, 8018868 <memchr+0x78>
 8018844:	d1ee      	bne.n	8018824 <memchr+0x34>
 8018846:	bcf0      	pop	{r4, r5, r6, r7}
 8018848:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 801884c:	f002 0207 	and.w	r2, r2, #7
 8018850:	b132      	cbz	r2, 8018860 <memchr+0x70>
 8018852:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018856:	3a01      	subs	r2, #1
 8018858:	ea83 0301 	eor.w	r3, r3, r1
 801885c:	b113      	cbz	r3, 8018864 <memchr+0x74>
 801885e:	d1f8      	bne.n	8018852 <memchr+0x62>
 8018860:	2000      	movs	r0, #0
 8018862:	4770      	bx	lr
 8018864:	3801      	subs	r0, #1
 8018866:	4770      	bx	lr
 8018868:	2d00      	cmp	r5, #0
 801886a:	bf06      	itte	eq
 801886c:	4635      	moveq	r5, r6
 801886e:	3803      	subeq	r0, #3
 8018870:	3807      	subne	r0, #7
 8018872:	f015 0f01 	tst.w	r5, #1
 8018876:	d107      	bne.n	8018888 <memchr+0x98>
 8018878:	3001      	adds	r0, #1
 801887a:	f415 7f80 	tst.w	r5, #256	; 0x100
 801887e:	bf02      	ittt	eq
 8018880:	3001      	addeq	r0, #1
 8018882:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8018886:	3001      	addeq	r0, #1
 8018888:	bcf0      	pop	{r4, r5, r6, r7}
 801888a:	3801      	subs	r0, #1
 801888c:	4770      	bx	lr
 801888e:	bf00      	nop

08018890 <__aeabi_drsub>:
 8018890:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8018894:	e002      	b.n	801889c <__adddf3>
 8018896:	bf00      	nop

08018898 <__aeabi_dsub>:
 8018898:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801889c <__adddf3>:
 801889c:	b530      	push	{r4, r5, lr}
 801889e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80188a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80188a6:	ea94 0f05 	teq	r4, r5
 80188aa:	bf08      	it	eq
 80188ac:	ea90 0f02 	teqeq	r0, r2
 80188b0:	bf1f      	itttt	ne
 80188b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80188b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80188ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80188be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80188c2:	f000 80e2 	beq.w	8018a8a <__adddf3+0x1ee>
 80188c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80188ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80188ce:	bfb8      	it	lt
 80188d0:	426d      	neglt	r5, r5
 80188d2:	dd0c      	ble.n	80188ee <__adddf3+0x52>
 80188d4:	442c      	add	r4, r5
 80188d6:	ea80 0202 	eor.w	r2, r0, r2
 80188da:	ea81 0303 	eor.w	r3, r1, r3
 80188de:	ea82 0000 	eor.w	r0, r2, r0
 80188e2:	ea83 0101 	eor.w	r1, r3, r1
 80188e6:	ea80 0202 	eor.w	r2, r0, r2
 80188ea:	ea81 0303 	eor.w	r3, r1, r3
 80188ee:	2d36      	cmp	r5, #54	; 0x36
 80188f0:	bf88      	it	hi
 80188f2:	bd30      	pophi	{r4, r5, pc}
 80188f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80188f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80188fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8018900:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8018904:	d002      	beq.n	801890c <__adddf3+0x70>
 8018906:	4240      	negs	r0, r0
 8018908:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801890c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8018910:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018914:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8018918:	d002      	beq.n	8018920 <__adddf3+0x84>
 801891a:	4252      	negs	r2, r2
 801891c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8018920:	ea94 0f05 	teq	r4, r5
 8018924:	f000 80a7 	beq.w	8018a76 <__adddf3+0x1da>
 8018928:	f1a4 0401 	sub.w	r4, r4, #1
 801892c:	f1d5 0e20 	rsbs	lr, r5, #32
 8018930:	db0d      	blt.n	801894e <__adddf3+0xb2>
 8018932:	fa02 fc0e 	lsl.w	ip, r2, lr
 8018936:	fa22 f205 	lsr.w	r2, r2, r5
 801893a:	1880      	adds	r0, r0, r2
 801893c:	f141 0100 	adc.w	r1, r1, #0
 8018940:	fa03 f20e 	lsl.w	r2, r3, lr
 8018944:	1880      	adds	r0, r0, r2
 8018946:	fa43 f305 	asr.w	r3, r3, r5
 801894a:	4159      	adcs	r1, r3
 801894c:	e00e      	b.n	801896c <__adddf3+0xd0>
 801894e:	f1a5 0520 	sub.w	r5, r5, #32
 8018952:	f10e 0e20 	add.w	lr, lr, #32
 8018956:	2a01      	cmp	r2, #1
 8018958:	fa03 fc0e 	lsl.w	ip, r3, lr
 801895c:	bf28      	it	cs
 801895e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8018962:	fa43 f305 	asr.w	r3, r3, r5
 8018966:	18c0      	adds	r0, r0, r3
 8018968:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801896c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018970:	d507      	bpl.n	8018982 <__adddf3+0xe6>
 8018972:	f04f 0e00 	mov.w	lr, #0
 8018976:	f1dc 0c00 	rsbs	ip, ip, #0
 801897a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801897e:	eb6e 0101 	sbc.w	r1, lr, r1
 8018982:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8018986:	d31b      	bcc.n	80189c0 <__adddf3+0x124>
 8018988:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801898c:	d30c      	bcc.n	80189a8 <__adddf3+0x10c>
 801898e:	0849      	lsrs	r1, r1, #1
 8018990:	ea5f 0030 	movs.w	r0, r0, rrx
 8018994:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8018998:	f104 0401 	add.w	r4, r4, #1
 801899c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80189a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80189a4:	f080 809a 	bcs.w	8018adc <__adddf3+0x240>
 80189a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80189ac:	bf08      	it	eq
 80189ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80189b2:	f150 0000 	adcs.w	r0, r0, #0
 80189b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80189ba:	ea41 0105 	orr.w	r1, r1, r5
 80189be:	bd30      	pop	{r4, r5, pc}
 80189c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80189c4:	4140      	adcs	r0, r0
 80189c6:	eb41 0101 	adc.w	r1, r1, r1
 80189ca:	3c01      	subs	r4, #1
 80189cc:	bf28      	it	cs
 80189ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80189d2:	d2e9      	bcs.n	80189a8 <__adddf3+0x10c>
 80189d4:	f091 0f00 	teq	r1, #0
 80189d8:	bf04      	itt	eq
 80189da:	4601      	moveq	r1, r0
 80189dc:	2000      	moveq	r0, #0
 80189de:	fab1 f381 	clz	r3, r1
 80189e2:	bf08      	it	eq
 80189e4:	3320      	addeq	r3, #32
 80189e6:	f1a3 030b 	sub.w	r3, r3, #11
 80189ea:	f1b3 0220 	subs.w	r2, r3, #32
 80189ee:	da0c      	bge.n	8018a0a <__adddf3+0x16e>
 80189f0:	320c      	adds	r2, #12
 80189f2:	dd08      	ble.n	8018a06 <__adddf3+0x16a>
 80189f4:	f102 0c14 	add.w	ip, r2, #20
 80189f8:	f1c2 020c 	rsb	r2, r2, #12
 80189fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8018a00:	fa21 f102 	lsr.w	r1, r1, r2
 8018a04:	e00c      	b.n	8018a20 <__adddf3+0x184>
 8018a06:	f102 0214 	add.w	r2, r2, #20
 8018a0a:	bfd8      	it	le
 8018a0c:	f1c2 0c20 	rsble	ip, r2, #32
 8018a10:	fa01 f102 	lsl.w	r1, r1, r2
 8018a14:	fa20 fc0c 	lsr.w	ip, r0, ip
 8018a18:	bfdc      	itt	le
 8018a1a:	ea41 010c 	orrle.w	r1, r1, ip
 8018a1e:	4090      	lslle	r0, r2
 8018a20:	1ae4      	subs	r4, r4, r3
 8018a22:	bfa2      	ittt	ge
 8018a24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8018a28:	4329      	orrge	r1, r5
 8018a2a:	bd30      	popge	{r4, r5, pc}
 8018a2c:	ea6f 0404 	mvn.w	r4, r4
 8018a30:	3c1f      	subs	r4, #31
 8018a32:	da1c      	bge.n	8018a6e <__adddf3+0x1d2>
 8018a34:	340c      	adds	r4, #12
 8018a36:	dc0e      	bgt.n	8018a56 <__adddf3+0x1ba>
 8018a38:	f104 0414 	add.w	r4, r4, #20
 8018a3c:	f1c4 0220 	rsb	r2, r4, #32
 8018a40:	fa20 f004 	lsr.w	r0, r0, r4
 8018a44:	fa01 f302 	lsl.w	r3, r1, r2
 8018a48:	ea40 0003 	orr.w	r0, r0, r3
 8018a4c:	fa21 f304 	lsr.w	r3, r1, r4
 8018a50:	ea45 0103 	orr.w	r1, r5, r3
 8018a54:	bd30      	pop	{r4, r5, pc}
 8018a56:	f1c4 040c 	rsb	r4, r4, #12
 8018a5a:	f1c4 0220 	rsb	r2, r4, #32
 8018a5e:	fa20 f002 	lsr.w	r0, r0, r2
 8018a62:	fa01 f304 	lsl.w	r3, r1, r4
 8018a66:	ea40 0003 	orr.w	r0, r0, r3
 8018a6a:	4629      	mov	r1, r5
 8018a6c:	bd30      	pop	{r4, r5, pc}
 8018a6e:	fa21 f004 	lsr.w	r0, r1, r4
 8018a72:	4629      	mov	r1, r5
 8018a74:	bd30      	pop	{r4, r5, pc}
 8018a76:	f094 0f00 	teq	r4, #0
 8018a7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8018a7e:	bf06      	itte	eq
 8018a80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8018a84:	3401      	addeq	r4, #1
 8018a86:	3d01      	subne	r5, #1
 8018a88:	e74e      	b.n	8018928 <__adddf3+0x8c>
 8018a8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018a8e:	bf18      	it	ne
 8018a90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8018a94:	d029      	beq.n	8018aea <__adddf3+0x24e>
 8018a96:	ea94 0f05 	teq	r4, r5
 8018a9a:	bf08      	it	eq
 8018a9c:	ea90 0f02 	teqeq	r0, r2
 8018aa0:	d005      	beq.n	8018aae <__adddf3+0x212>
 8018aa2:	ea54 0c00 	orrs.w	ip, r4, r0
 8018aa6:	bf04      	itt	eq
 8018aa8:	4619      	moveq	r1, r3
 8018aaa:	4610      	moveq	r0, r2
 8018aac:	bd30      	pop	{r4, r5, pc}
 8018aae:	ea91 0f03 	teq	r1, r3
 8018ab2:	bf1e      	ittt	ne
 8018ab4:	2100      	movne	r1, #0
 8018ab6:	2000      	movne	r0, #0
 8018ab8:	bd30      	popne	{r4, r5, pc}
 8018aba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8018abe:	d105      	bne.n	8018acc <__adddf3+0x230>
 8018ac0:	0040      	lsls	r0, r0, #1
 8018ac2:	4149      	adcs	r1, r1
 8018ac4:	bf28      	it	cs
 8018ac6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8018aca:	bd30      	pop	{r4, r5, pc}
 8018acc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8018ad0:	bf3c      	itt	cc
 8018ad2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8018ad6:	bd30      	popcc	{r4, r5, pc}
 8018ad8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018adc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8018ae0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018ae4:	f04f 0000 	mov.w	r0, #0
 8018ae8:	bd30      	pop	{r4, r5, pc}
 8018aea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8018aee:	bf1a      	itte	ne
 8018af0:	4619      	movne	r1, r3
 8018af2:	4610      	movne	r0, r2
 8018af4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8018af8:	bf1c      	itt	ne
 8018afa:	460b      	movne	r3, r1
 8018afc:	4602      	movne	r2, r0
 8018afe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018b02:	bf06      	itte	eq
 8018b04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8018b08:	ea91 0f03 	teqeq	r1, r3
 8018b0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8018b10:	bd30      	pop	{r4, r5, pc}
 8018b12:	bf00      	nop

08018b14 <__aeabi_ui2d>:
 8018b14:	f090 0f00 	teq	r0, #0
 8018b18:	bf04      	itt	eq
 8018b1a:	2100      	moveq	r1, #0
 8018b1c:	4770      	bxeq	lr
 8018b1e:	b530      	push	{r4, r5, lr}
 8018b20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018b24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018b28:	f04f 0500 	mov.w	r5, #0
 8018b2c:	f04f 0100 	mov.w	r1, #0
 8018b30:	e750      	b.n	80189d4 <__adddf3+0x138>
 8018b32:	bf00      	nop

08018b34 <__aeabi_i2d>:
 8018b34:	f090 0f00 	teq	r0, #0
 8018b38:	bf04      	itt	eq
 8018b3a:	2100      	moveq	r1, #0
 8018b3c:	4770      	bxeq	lr
 8018b3e:	b530      	push	{r4, r5, lr}
 8018b40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018b44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018b48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8018b4c:	bf48      	it	mi
 8018b4e:	4240      	negmi	r0, r0
 8018b50:	f04f 0100 	mov.w	r1, #0
 8018b54:	e73e      	b.n	80189d4 <__adddf3+0x138>
 8018b56:	bf00      	nop

08018b58 <__aeabi_f2d>:
 8018b58:	0042      	lsls	r2, r0, #1
 8018b5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8018b5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8018b62:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8018b66:	bf1f      	itttt	ne
 8018b68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8018b6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8018b70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8018b74:	4770      	bxne	lr
 8018b76:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8018b7a:	bf08      	it	eq
 8018b7c:	4770      	bxeq	lr
 8018b7e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8018b82:	bf04      	itt	eq
 8018b84:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8018b88:	4770      	bxeq	lr
 8018b8a:	b530      	push	{r4, r5, lr}
 8018b8c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8018b90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018b94:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018b98:	e71c      	b.n	80189d4 <__adddf3+0x138>
 8018b9a:	bf00      	nop

08018b9c <__aeabi_ul2d>:
 8018b9c:	ea50 0201 	orrs.w	r2, r0, r1
 8018ba0:	bf08      	it	eq
 8018ba2:	4770      	bxeq	lr
 8018ba4:	b530      	push	{r4, r5, lr}
 8018ba6:	f04f 0500 	mov.w	r5, #0
 8018baa:	e00a      	b.n	8018bc2 <__aeabi_l2d+0x16>

08018bac <__aeabi_l2d>:
 8018bac:	ea50 0201 	orrs.w	r2, r0, r1
 8018bb0:	bf08      	it	eq
 8018bb2:	4770      	bxeq	lr
 8018bb4:	b530      	push	{r4, r5, lr}
 8018bb6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8018bba:	d502      	bpl.n	8018bc2 <__aeabi_l2d+0x16>
 8018bbc:	4240      	negs	r0, r0
 8018bbe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8018bc2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8018bc6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8018bca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8018bce:	f43f aed8 	beq.w	8018982 <__adddf3+0xe6>
 8018bd2:	f04f 0203 	mov.w	r2, #3
 8018bd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018bda:	bf18      	it	ne
 8018bdc:	3203      	addne	r2, #3
 8018bde:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8018be2:	bf18      	it	ne
 8018be4:	3203      	addne	r2, #3
 8018be6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8018bea:	f1c2 0320 	rsb	r3, r2, #32
 8018bee:	fa00 fc03 	lsl.w	ip, r0, r3
 8018bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8018bf6:	fa01 fe03 	lsl.w	lr, r1, r3
 8018bfa:	ea40 000e 	orr.w	r0, r0, lr
 8018bfe:	fa21 f102 	lsr.w	r1, r1, r2
 8018c02:	4414      	add	r4, r2
 8018c04:	e6bd      	b.n	8018982 <__adddf3+0xe6>
 8018c06:	bf00      	nop

08018c08 <__aeabi_dmul>:
 8018c08:	b570      	push	{r4, r5, r6, lr}
 8018c0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018c0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018c12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018c16:	bf1d      	ittte	ne
 8018c18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018c1c:	ea94 0f0c 	teqne	r4, ip
 8018c20:	ea95 0f0c 	teqne	r5, ip
 8018c24:	f000 f8de 	bleq	8018de4 <__aeabi_dmul+0x1dc>
 8018c28:	442c      	add	r4, r5
 8018c2a:	ea81 0603 	eor.w	r6, r1, r3
 8018c2e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8018c32:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8018c36:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8018c3a:	bf18      	it	ne
 8018c3c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8018c40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018c44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018c48:	d038      	beq.n	8018cbc <__aeabi_dmul+0xb4>
 8018c4a:	fba0 ce02 	umull	ip, lr, r0, r2
 8018c4e:	f04f 0500 	mov.w	r5, #0
 8018c52:	fbe1 e502 	umlal	lr, r5, r1, r2
 8018c56:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8018c5a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8018c5e:	f04f 0600 	mov.w	r6, #0
 8018c62:	fbe1 5603 	umlal	r5, r6, r1, r3
 8018c66:	f09c 0f00 	teq	ip, #0
 8018c6a:	bf18      	it	ne
 8018c6c:	f04e 0e01 	orrne.w	lr, lr, #1
 8018c70:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8018c74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8018c78:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8018c7c:	d204      	bcs.n	8018c88 <__aeabi_dmul+0x80>
 8018c7e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8018c82:	416d      	adcs	r5, r5
 8018c84:	eb46 0606 	adc.w	r6, r6, r6
 8018c88:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8018c8c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8018c90:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8018c94:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8018c98:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8018c9c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018ca0:	bf88      	it	hi
 8018ca2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018ca6:	d81e      	bhi.n	8018ce6 <__aeabi_dmul+0xde>
 8018ca8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8018cac:	bf08      	it	eq
 8018cae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8018cb2:	f150 0000 	adcs.w	r0, r0, #0
 8018cb6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018cba:	bd70      	pop	{r4, r5, r6, pc}
 8018cbc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8018cc0:	ea46 0101 	orr.w	r1, r6, r1
 8018cc4:	ea40 0002 	orr.w	r0, r0, r2
 8018cc8:	ea81 0103 	eor.w	r1, r1, r3
 8018ccc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8018cd0:	bfc2      	ittt	gt
 8018cd2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018cd6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018cda:	bd70      	popgt	{r4, r5, r6, pc}
 8018cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018ce0:	f04f 0e00 	mov.w	lr, #0
 8018ce4:	3c01      	subs	r4, #1
 8018ce6:	f300 80ab 	bgt.w	8018e40 <__aeabi_dmul+0x238>
 8018cea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8018cee:	bfde      	ittt	le
 8018cf0:	2000      	movle	r0, #0
 8018cf2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8018cf6:	bd70      	pople	{r4, r5, r6, pc}
 8018cf8:	f1c4 0400 	rsb	r4, r4, #0
 8018cfc:	3c20      	subs	r4, #32
 8018cfe:	da35      	bge.n	8018d6c <__aeabi_dmul+0x164>
 8018d00:	340c      	adds	r4, #12
 8018d02:	dc1b      	bgt.n	8018d3c <__aeabi_dmul+0x134>
 8018d04:	f104 0414 	add.w	r4, r4, #20
 8018d08:	f1c4 0520 	rsb	r5, r4, #32
 8018d0c:	fa00 f305 	lsl.w	r3, r0, r5
 8018d10:	fa20 f004 	lsr.w	r0, r0, r4
 8018d14:	fa01 f205 	lsl.w	r2, r1, r5
 8018d18:	ea40 0002 	orr.w	r0, r0, r2
 8018d1c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8018d20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018d24:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018d28:	fa21 f604 	lsr.w	r6, r1, r4
 8018d2c:	eb42 0106 	adc.w	r1, r2, r6
 8018d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018d34:	bf08      	it	eq
 8018d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018d3a:	bd70      	pop	{r4, r5, r6, pc}
 8018d3c:	f1c4 040c 	rsb	r4, r4, #12
 8018d40:	f1c4 0520 	rsb	r5, r4, #32
 8018d44:	fa00 f304 	lsl.w	r3, r0, r4
 8018d48:	fa20 f005 	lsr.w	r0, r0, r5
 8018d4c:	fa01 f204 	lsl.w	r2, r1, r4
 8018d50:	ea40 0002 	orr.w	r0, r0, r2
 8018d54:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018d58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8018d5c:	f141 0100 	adc.w	r1, r1, #0
 8018d60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018d64:	bf08      	it	eq
 8018d66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018d6a:	bd70      	pop	{r4, r5, r6, pc}
 8018d6c:	f1c4 0520 	rsb	r5, r4, #32
 8018d70:	fa00 f205 	lsl.w	r2, r0, r5
 8018d74:	ea4e 0e02 	orr.w	lr, lr, r2
 8018d78:	fa20 f304 	lsr.w	r3, r0, r4
 8018d7c:	fa01 f205 	lsl.w	r2, r1, r5
 8018d80:	ea43 0302 	orr.w	r3, r3, r2
 8018d84:	fa21 f004 	lsr.w	r0, r1, r4
 8018d88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018d8c:	fa21 f204 	lsr.w	r2, r1, r4
 8018d90:	ea20 0002 	bic.w	r0, r0, r2
 8018d94:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8018d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8018d9c:	bf08      	it	eq
 8018d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8018da2:	bd70      	pop	{r4, r5, r6, pc}
 8018da4:	f094 0f00 	teq	r4, #0
 8018da8:	d10f      	bne.n	8018dca <__aeabi_dmul+0x1c2>
 8018daa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8018dae:	0040      	lsls	r0, r0, #1
 8018db0:	eb41 0101 	adc.w	r1, r1, r1
 8018db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018db8:	bf08      	it	eq
 8018dba:	3c01      	subeq	r4, #1
 8018dbc:	d0f7      	beq.n	8018dae <__aeabi_dmul+0x1a6>
 8018dbe:	ea41 0106 	orr.w	r1, r1, r6
 8018dc2:	f095 0f00 	teq	r5, #0
 8018dc6:	bf18      	it	ne
 8018dc8:	4770      	bxne	lr
 8018dca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8018dce:	0052      	lsls	r2, r2, #1
 8018dd0:	eb43 0303 	adc.w	r3, r3, r3
 8018dd4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8018dd8:	bf08      	it	eq
 8018dda:	3d01      	subeq	r5, #1
 8018ddc:	d0f7      	beq.n	8018dce <__aeabi_dmul+0x1c6>
 8018dde:	ea43 0306 	orr.w	r3, r3, r6
 8018de2:	4770      	bx	lr
 8018de4:	ea94 0f0c 	teq	r4, ip
 8018de8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018dec:	bf18      	it	ne
 8018dee:	ea95 0f0c 	teqne	r5, ip
 8018df2:	d00c      	beq.n	8018e0e <__aeabi_dmul+0x206>
 8018df4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018df8:	bf18      	it	ne
 8018dfa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018dfe:	d1d1      	bne.n	8018da4 <__aeabi_dmul+0x19c>
 8018e00:	ea81 0103 	eor.w	r1, r1, r3
 8018e04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018e08:	f04f 0000 	mov.w	r0, #0
 8018e0c:	bd70      	pop	{r4, r5, r6, pc}
 8018e0e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8018e12:	bf06      	itte	eq
 8018e14:	4610      	moveq	r0, r2
 8018e16:	4619      	moveq	r1, r3
 8018e18:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8018e1c:	d019      	beq.n	8018e52 <__aeabi_dmul+0x24a>
 8018e1e:	ea94 0f0c 	teq	r4, ip
 8018e22:	d102      	bne.n	8018e2a <__aeabi_dmul+0x222>
 8018e24:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8018e28:	d113      	bne.n	8018e52 <__aeabi_dmul+0x24a>
 8018e2a:	ea95 0f0c 	teq	r5, ip
 8018e2e:	d105      	bne.n	8018e3c <__aeabi_dmul+0x234>
 8018e30:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8018e34:	bf1c      	itt	ne
 8018e36:	4610      	movne	r0, r2
 8018e38:	4619      	movne	r1, r3
 8018e3a:	d10a      	bne.n	8018e52 <__aeabi_dmul+0x24a>
 8018e3c:	ea81 0103 	eor.w	r1, r1, r3
 8018e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8018e44:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018e48:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018e4c:	f04f 0000 	mov.w	r0, #0
 8018e50:	bd70      	pop	{r4, r5, r6, pc}
 8018e52:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8018e56:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8018e5a:	bd70      	pop	{r4, r5, r6, pc}

08018e5c <__aeabi_ddiv>:
 8018e5c:	b570      	push	{r4, r5, r6, lr}
 8018e5e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8018e62:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8018e66:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8018e6a:	bf1d      	ittte	ne
 8018e6c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8018e70:	ea94 0f0c 	teqne	r4, ip
 8018e74:	ea95 0f0c 	teqne	r5, ip
 8018e78:	f000 f8a7 	bleq	8018fca <__aeabi_ddiv+0x16e>
 8018e7c:	eba4 0405 	sub.w	r4, r4, r5
 8018e80:	ea81 0e03 	eor.w	lr, r1, r3
 8018e84:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8018e88:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8018e8c:	f000 8088 	beq.w	8018fa0 <__aeabi_ddiv+0x144>
 8018e90:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8018e94:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8018e98:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8018e9c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8018ea0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8018ea4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8018ea8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8018eac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8018eb0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8018eb4:	429d      	cmp	r5, r3
 8018eb6:	bf08      	it	eq
 8018eb8:	4296      	cmpeq	r6, r2
 8018eba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8018ebe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8018ec2:	d202      	bcs.n	8018eca <__aeabi_ddiv+0x6e>
 8018ec4:	085b      	lsrs	r3, r3, #1
 8018ec6:	ea4f 0232 	mov.w	r2, r2, rrx
 8018eca:	1ab6      	subs	r6, r6, r2
 8018ecc:	eb65 0503 	sbc.w	r5, r5, r3
 8018ed0:	085b      	lsrs	r3, r3, #1
 8018ed2:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ed6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8018eda:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8018ede:	ebb6 0e02 	subs.w	lr, r6, r2
 8018ee2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018ee6:	bf22      	ittt	cs
 8018ee8:	1ab6      	subcs	r6, r6, r2
 8018eea:	4675      	movcs	r5, lr
 8018eec:	ea40 000c 	orrcs.w	r0, r0, ip
 8018ef0:	085b      	lsrs	r3, r3, #1
 8018ef2:	ea4f 0232 	mov.w	r2, r2, rrx
 8018ef6:	ebb6 0e02 	subs.w	lr, r6, r2
 8018efa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018efe:	bf22      	ittt	cs
 8018f00:	1ab6      	subcs	r6, r6, r2
 8018f02:	4675      	movcs	r5, lr
 8018f04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8018f08:	085b      	lsrs	r3, r3, #1
 8018f0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8018f0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8018f12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018f16:	bf22      	ittt	cs
 8018f18:	1ab6      	subcs	r6, r6, r2
 8018f1a:	4675      	movcs	r5, lr
 8018f1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8018f20:	085b      	lsrs	r3, r3, #1
 8018f22:	ea4f 0232 	mov.w	r2, r2, rrx
 8018f26:	ebb6 0e02 	subs.w	lr, r6, r2
 8018f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8018f2e:	bf22      	ittt	cs
 8018f30:	1ab6      	subcs	r6, r6, r2
 8018f32:	4675      	movcs	r5, lr
 8018f34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8018f38:	ea55 0e06 	orrs.w	lr, r5, r6
 8018f3c:	d018      	beq.n	8018f70 <__aeabi_ddiv+0x114>
 8018f3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8018f42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8018f46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8018f4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8018f4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8018f52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8018f56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8018f5a:	d1c0      	bne.n	8018ede <__aeabi_ddiv+0x82>
 8018f5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018f60:	d10b      	bne.n	8018f7a <__aeabi_ddiv+0x11e>
 8018f62:	ea41 0100 	orr.w	r1, r1, r0
 8018f66:	f04f 0000 	mov.w	r0, #0
 8018f6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8018f6e:	e7b6      	b.n	8018ede <__aeabi_ddiv+0x82>
 8018f70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8018f74:	bf04      	itt	eq
 8018f76:	4301      	orreq	r1, r0
 8018f78:	2000      	moveq	r0, #0
 8018f7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8018f7e:	bf88      	it	hi
 8018f80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8018f84:	f63f aeaf 	bhi.w	8018ce6 <__aeabi_dmul+0xde>
 8018f88:	ebb5 0c03 	subs.w	ip, r5, r3
 8018f8c:	bf04      	itt	eq
 8018f8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8018f92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8018f96:	f150 0000 	adcs.w	r0, r0, #0
 8018f9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8018f9e:	bd70      	pop	{r4, r5, r6, pc}
 8018fa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8018fa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8018fa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8018fac:	bfc2      	ittt	gt
 8018fae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8018fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8018fb6:	bd70      	popgt	{r4, r5, r6, pc}
 8018fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8018fbc:	f04f 0e00 	mov.w	lr, #0
 8018fc0:	3c01      	subs	r4, #1
 8018fc2:	e690      	b.n	8018ce6 <__aeabi_dmul+0xde>
 8018fc4:	ea45 0e06 	orr.w	lr, r5, r6
 8018fc8:	e68d      	b.n	8018ce6 <__aeabi_dmul+0xde>
 8018fca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8018fce:	ea94 0f0c 	teq	r4, ip
 8018fd2:	bf08      	it	eq
 8018fd4:	ea95 0f0c 	teqeq	r5, ip
 8018fd8:	f43f af3b 	beq.w	8018e52 <__aeabi_dmul+0x24a>
 8018fdc:	ea94 0f0c 	teq	r4, ip
 8018fe0:	d10a      	bne.n	8018ff8 <__aeabi_ddiv+0x19c>
 8018fe2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8018fe6:	f47f af34 	bne.w	8018e52 <__aeabi_dmul+0x24a>
 8018fea:	ea95 0f0c 	teq	r5, ip
 8018fee:	f47f af25 	bne.w	8018e3c <__aeabi_dmul+0x234>
 8018ff2:	4610      	mov	r0, r2
 8018ff4:	4619      	mov	r1, r3
 8018ff6:	e72c      	b.n	8018e52 <__aeabi_dmul+0x24a>
 8018ff8:	ea95 0f0c 	teq	r5, ip
 8018ffc:	d106      	bne.n	801900c <__aeabi_ddiv+0x1b0>
 8018ffe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8019002:	f43f aefd 	beq.w	8018e00 <__aeabi_dmul+0x1f8>
 8019006:	4610      	mov	r0, r2
 8019008:	4619      	mov	r1, r3
 801900a:	e722      	b.n	8018e52 <__aeabi_dmul+0x24a>
 801900c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8019010:	bf18      	it	ne
 8019012:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8019016:	f47f aec5 	bne.w	8018da4 <__aeabi_dmul+0x19c>
 801901a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801901e:	f47f af0d 	bne.w	8018e3c <__aeabi_dmul+0x234>
 8019022:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8019026:	f47f aeeb 	bne.w	8018e00 <__aeabi_dmul+0x1f8>
 801902a:	e712      	b.n	8018e52 <__aeabi_dmul+0x24a>

0801902c <__gedf2>:
 801902c:	f04f 3cff 	mov.w	ip, #4294967295
 8019030:	e006      	b.n	8019040 <__cmpdf2+0x4>
 8019032:	bf00      	nop

08019034 <__ledf2>:
 8019034:	f04f 0c01 	mov.w	ip, #1
 8019038:	e002      	b.n	8019040 <__cmpdf2+0x4>
 801903a:	bf00      	nop

0801903c <__cmpdf2>:
 801903c:	f04f 0c01 	mov.w	ip, #1
 8019040:	f84d cd04 	str.w	ip, [sp, #-4]!
 8019044:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019048:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801904c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019050:	bf18      	it	ne
 8019052:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8019056:	d01b      	beq.n	8019090 <__cmpdf2+0x54>
 8019058:	b001      	add	sp, #4
 801905a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801905e:	bf0c      	ite	eq
 8019060:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8019064:	ea91 0f03 	teqne	r1, r3
 8019068:	bf02      	ittt	eq
 801906a:	ea90 0f02 	teqeq	r0, r2
 801906e:	2000      	moveq	r0, #0
 8019070:	4770      	bxeq	lr
 8019072:	f110 0f00 	cmn.w	r0, #0
 8019076:	ea91 0f03 	teq	r1, r3
 801907a:	bf58      	it	pl
 801907c:	4299      	cmppl	r1, r3
 801907e:	bf08      	it	eq
 8019080:	4290      	cmpeq	r0, r2
 8019082:	bf2c      	ite	cs
 8019084:	17d8      	asrcs	r0, r3, #31
 8019086:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801908a:	f040 0001 	orr.w	r0, r0, #1
 801908e:	4770      	bx	lr
 8019090:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019098:	d102      	bne.n	80190a0 <__cmpdf2+0x64>
 801909a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801909e:	d107      	bne.n	80190b0 <__cmpdf2+0x74>
 80190a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80190a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80190a8:	d1d6      	bne.n	8019058 <__cmpdf2+0x1c>
 80190aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80190ae:	d0d3      	beq.n	8019058 <__cmpdf2+0x1c>
 80190b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80190b4:	4770      	bx	lr
 80190b6:	bf00      	nop

080190b8 <__aeabi_cdrcmple>:
 80190b8:	4684      	mov	ip, r0
 80190ba:	4610      	mov	r0, r2
 80190bc:	4662      	mov	r2, ip
 80190be:	468c      	mov	ip, r1
 80190c0:	4619      	mov	r1, r3
 80190c2:	4663      	mov	r3, ip
 80190c4:	e000      	b.n	80190c8 <__aeabi_cdcmpeq>
 80190c6:	bf00      	nop

080190c8 <__aeabi_cdcmpeq>:
 80190c8:	b501      	push	{r0, lr}
 80190ca:	f7ff ffb7 	bl	801903c <__cmpdf2>
 80190ce:	2800      	cmp	r0, #0
 80190d0:	bf48      	it	mi
 80190d2:	f110 0f00 	cmnmi.w	r0, #0
 80190d6:	bd01      	pop	{r0, pc}

080190d8 <__aeabi_dcmpeq>:
 80190d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80190dc:	f7ff fff4 	bl	80190c8 <__aeabi_cdcmpeq>
 80190e0:	bf0c      	ite	eq
 80190e2:	2001      	moveq	r0, #1
 80190e4:	2000      	movne	r0, #0
 80190e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80190ea:	bf00      	nop

080190ec <__aeabi_dcmplt>:
 80190ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80190f0:	f7ff ffea 	bl	80190c8 <__aeabi_cdcmpeq>
 80190f4:	bf34      	ite	cc
 80190f6:	2001      	movcc	r0, #1
 80190f8:	2000      	movcs	r0, #0
 80190fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80190fe:	bf00      	nop

08019100 <__aeabi_dcmple>:
 8019100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019104:	f7ff ffe0 	bl	80190c8 <__aeabi_cdcmpeq>
 8019108:	bf94      	ite	ls
 801910a:	2001      	movls	r0, #1
 801910c:	2000      	movhi	r0, #0
 801910e:	f85d fb08 	ldr.w	pc, [sp], #8
 8019112:	bf00      	nop

08019114 <__aeabi_dcmpge>:
 8019114:	f84d ed08 	str.w	lr, [sp, #-8]!
 8019118:	f7ff ffce 	bl	80190b8 <__aeabi_cdrcmple>
 801911c:	bf94      	ite	ls
 801911e:	2001      	movls	r0, #1
 8019120:	2000      	movhi	r0, #0
 8019122:	f85d fb08 	ldr.w	pc, [sp], #8
 8019126:	bf00      	nop

08019128 <__aeabi_dcmpgt>:
 8019128:	f84d ed08 	str.w	lr, [sp, #-8]!
 801912c:	f7ff ffc4 	bl	80190b8 <__aeabi_cdrcmple>
 8019130:	bf34      	ite	cc
 8019132:	2001      	movcc	r0, #1
 8019134:	2000      	movcs	r0, #0
 8019136:	f85d fb08 	ldr.w	pc, [sp], #8
 801913a:	bf00      	nop

0801913c <__aeabi_dcmpun>:
 801913c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8019140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019144:	d102      	bne.n	801914c <__aeabi_dcmpun+0x10>
 8019146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801914a:	d10a      	bne.n	8019162 <__aeabi_dcmpun+0x26>
 801914c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8019150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8019154:	d102      	bne.n	801915c <__aeabi_dcmpun+0x20>
 8019156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801915a:	d102      	bne.n	8019162 <__aeabi_dcmpun+0x26>
 801915c:	f04f 0000 	mov.w	r0, #0
 8019160:	4770      	bx	lr
 8019162:	f04f 0001 	mov.w	r0, #1
 8019166:	4770      	bx	lr

08019168 <__aeabi_d2iz>:
 8019168:	ea4f 0241 	mov.w	r2, r1, lsl #1
 801916c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8019170:	d215      	bcs.n	801919e <__aeabi_d2iz+0x36>
 8019172:	d511      	bpl.n	8019198 <__aeabi_d2iz+0x30>
 8019174:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8019178:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 801917c:	d912      	bls.n	80191a4 <__aeabi_d2iz+0x3c>
 801917e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8019182:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8019186:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801918a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801918e:	fa23 f002 	lsr.w	r0, r3, r2
 8019192:	bf18      	it	ne
 8019194:	4240      	negne	r0, r0
 8019196:	4770      	bx	lr
 8019198:	f04f 0000 	mov.w	r0, #0
 801919c:	4770      	bx	lr
 801919e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80191a2:	d105      	bne.n	80191b0 <__aeabi_d2iz+0x48>
 80191a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80191a8:	bf08      	it	eq
 80191aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80191ae:	4770      	bx	lr
 80191b0:	f04f 0000 	mov.w	r0, #0
 80191b4:	4770      	bx	lr
 80191b6:	bf00      	nop

080191b8 <__aeabi_d2uiz>:
 80191b8:	004a      	lsls	r2, r1, #1
 80191ba:	d211      	bcs.n	80191e0 <__aeabi_d2uiz+0x28>
 80191bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80191c0:	d211      	bcs.n	80191e6 <__aeabi_d2uiz+0x2e>
 80191c2:	d50d      	bpl.n	80191e0 <__aeabi_d2uiz+0x28>
 80191c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80191c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80191cc:	d40e      	bmi.n	80191ec <__aeabi_d2uiz+0x34>
 80191ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80191d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80191d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80191da:	fa23 f002 	lsr.w	r0, r3, r2
 80191de:	4770      	bx	lr
 80191e0:	f04f 0000 	mov.w	r0, #0
 80191e4:	4770      	bx	lr
 80191e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80191ea:	d102      	bne.n	80191f2 <__aeabi_d2uiz+0x3a>
 80191ec:	f04f 30ff 	mov.w	r0, #4294967295
 80191f0:	4770      	bx	lr
 80191f2:	f04f 0000 	mov.w	r0, #0
 80191f6:	4770      	bx	lr

080191f8 <__aeabi_d2f>:
 80191f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80191fc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8019200:	bf24      	itt	cs
 8019202:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8019206:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801920a:	d90d      	bls.n	8019228 <__aeabi_d2f+0x30>
 801920c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8019210:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8019214:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8019218:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801921c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8019220:	bf08      	it	eq
 8019222:	f020 0001 	biceq.w	r0, r0, #1
 8019226:	4770      	bx	lr
 8019228:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 801922c:	d121      	bne.n	8019272 <__aeabi_d2f+0x7a>
 801922e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8019232:	bfbc      	itt	lt
 8019234:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8019238:	4770      	bxlt	lr
 801923a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801923e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8019242:	f1c2 0218 	rsb	r2, r2, #24
 8019246:	f1c2 0c20 	rsb	ip, r2, #32
 801924a:	fa10 f30c 	lsls.w	r3, r0, ip
 801924e:	fa20 f002 	lsr.w	r0, r0, r2
 8019252:	bf18      	it	ne
 8019254:	f040 0001 	orrne.w	r0, r0, #1
 8019258:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801925c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8019260:	fa03 fc0c 	lsl.w	ip, r3, ip
 8019264:	ea40 000c 	orr.w	r0, r0, ip
 8019268:	fa23 f302 	lsr.w	r3, r3, r2
 801926c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019270:	e7cc      	b.n	801920c <__aeabi_d2f+0x14>
 8019272:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8019276:	d107      	bne.n	8019288 <__aeabi_d2f+0x90>
 8019278:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 801927c:	bf1e      	ittt	ne
 801927e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8019282:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8019286:	4770      	bxne	lr
 8019288:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 801928c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8019290:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8019294:	4770      	bx	lr
 8019296:	bf00      	nop

08019298 <__aeabi_d2lz>:
 8019298:	b538      	push	{r3, r4, r5, lr}
 801929a:	2200      	movs	r2, #0
 801929c:	2300      	movs	r3, #0
 801929e:	4604      	mov	r4, r0
 80192a0:	460d      	mov	r5, r1
 80192a2:	f7ff ff23 	bl	80190ec <__aeabi_dcmplt>
 80192a6:	b928      	cbnz	r0, 80192b4 <__aeabi_d2lz+0x1c>
 80192a8:	4620      	mov	r0, r4
 80192aa:	4629      	mov	r1, r5
 80192ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192b0:	f000 b80a 	b.w	80192c8 <__aeabi_d2ulz>
 80192b4:	4620      	mov	r0, r4
 80192b6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 80192ba:	f000 f805 	bl	80192c8 <__aeabi_d2ulz>
 80192be:	4240      	negs	r0, r0
 80192c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80192c4:	bd38      	pop	{r3, r4, r5, pc}
 80192c6:	bf00      	nop

080192c8 <__aeabi_d2ulz>:
 80192c8:	b5d0      	push	{r4, r6, r7, lr}
 80192ca:	4b0c      	ldr	r3, [pc, #48]	; (80192fc <__aeabi_d2ulz+0x34>)
 80192cc:	2200      	movs	r2, #0
 80192ce:	4606      	mov	r6, r0
 80192d0:	460f      	mov	r7, r1
 80192d2:	f7ff fc99 	bl	8018c08 <__aeabi_dmul>
 80192d6:	f7ff ff6f 	bl	80191b8 <__aeabi_d2uiz>
 80192da:	4604      	mov	r4, r0
 80192dc:	f7ff fc1a 	bl	8018b14 <__aeabi_ui2d>
 80192e0:	4b07      	ldr	r3, [pc, #28]	; (8019300 <__aeabi_d2ulz+0x38>)
 80192e2:	2200      	movs	r2, #0
 80192e4:	f7ff fc90 	bl	8018c08 <__aeabi_dmul>
 80192e8:	4602      	mov	r2, r0
 80192ea:	460b      	mov	r3, r1
 80192ec:	4630      	mov	r0, r6
 80192ee:	4639      	mov	r1, r7
 80192f0:	f7ff fad2 	bl	8018898 <__aeabi_dsub>
 80192f4:	f7ff ff60 	bl	80191b8 <__aeabi_d2uiz>
 80192f8:	4621      	mov	r1, r4
 80192fa:	bdd0      	pop	{r4, r6, r7, pc}
 80192fc:	3df00000 	.word	0x3df00000
 8019300:	41f00000 	.word	0x41f00000

08019304 <__aeabi_uldivmod>:
 8019304:	b953      	cbnz	r3, 801931c <__aeabi_uldivmod+0x18>
 8019306:	b94a      	cbnz	r2, 801931c <__aeabi_uldivmod+0x18>
 8019308:	2900      	cmp	r1, #0
 801930a:	bf08      	it	eq
 801930c:	2800      	cmpeq	r0, #0
 801930e:	bf1c      	itt	ne
 8019310:	f04f 31ff 	movne.w	r1, #4294967295
 8019314:	f04f 30ff 	movne.w	r0, #4294967295
 8019318:	f000 b974 	b.w	8019604 <__aeabi_idiv0>
 801931c:	f1ad 0c08 	sub.w	ip, sp, #8
 8019320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8019324:	f000 f806 	bl	8019334 <__udivmoddi4>
 8019328:	f8dd e004 	ldr.w	lr, [sp, #4]
 801932c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019330:	b004      	add	sp, #16
 8019332:	4770      	bx	lr

08019334 <__udivmoddi4>:
 8019334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019338:	9d08      	ldr	r5, [sp, #32]
 801933a:	4604      	mov	r4, r0
 801933c:	468e      	mov	lr, r1
 801933e:	2b00      	cmp	r3, #0
 8019340:	d14d      	bne.n	80193de <__udivmoddi4+0xaa>
 8019342:	428a      	cmp	r2, r1
 8019344:	4694      	mov	ip, r2
 8019346:	d969      	bls.n	801941c <__udivmoddi4+0xe8>
 8019348:	fab2 f282 	clz	r2, r2
 801934c:	b152      	cbz	r2, 8019364 <__udivmoddi4+0x30>
 801934e:	fa01 f302 	lsl.w	r3, r1, r2
 8019352:	f1c2 0120 	rsb	r1, r2, #32
 8019356:	fa20 f101 	lsr.w	r1, r0, r1
 801935a:	fa0c fc02 	lsl.w	ip, ip, r2
 801935e:	ea41 0e03 	orr.w	lr, r1, r3
 8019362:	4094      	lsls	r4, r2
 8019364:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8019368:	0c21      	lsrs	r1, r4, #16
 801936a:	fbbe f6f8 	udiv	r6, lr, r8
 801936e:	fa1f f78c 	uxth.w	r7, ip
 8019372:	fb08 e316 	mls	r3, r8, r6, lr
 8019376:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801937a:	fb06 f107 	mul.w	r1, r6, r7
 801937e:	4299      	cmp	r1, r3
 8019380:	d90a      	bls.n	8019398 <__udivmoddi4+0x64>
 8019382:	eb1c 0303 	adds.w	r3, ip, r3
 8019386:	f106 30ff 	add.w	r0, r6, #4294967295
 801938a:	f080 811f 	bcs.w	80195cc <__udivmoddi4+0x298>
 801938e:	4299      	cmp	r1, r3
 8019390:	f240 811c 	bls.w	80195cc <__udivmoddi4+0x298>
 8019394:	3e02      	subs	r6, #2
 8019396:	4463      	add	r3, ip
 8019398:	1a5b      	subs	r3, r3, r1
 801939a:	b2a4      	uxth	r4, r4
 801939c:	fbb3 f0f8 	udiv	r0, r3, r8
 80193a0:	fb08 3310 	mls	r3, r8, r0, r3
 80193a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80193a8:	fb00 f707 	mul.w	r7, r0, r7
 80193ac:	42a7      	cmp	r7, r4
 80193ae:	d90a      	bls.n	80193c6 <__udivmoddi4+0x92>
 80193b0:	eb1c 0404 	adds.w	r4, ip, r4
 80193b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80193b8:	f080 810a 	bcs.w	80195d0 <__udivmoddi4+0x29c>
 80193bc:	42a7      	cmp	r7, r4
 80193be:	f240 8107 	bls.w	80195d0 <__udivmoddi4+0x29c>
 80193c2:	4464      	add	r4, ip
 80193c4:	3802      	subs	r0, #2
 80193c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80193ca:	1be4      	subs	r4, r4, r7
 80193cc:	2600      	movs	r6, #0
 80193ce:	b11d      	cbz	r5, 80193d8 <__udivmoddi4+0xa4>
 80193d0:	40d4      	lsrs	r4, r2
 80193d2:	2300      	movs	r3, #0
 80193d4:	e9c5 4300 	strd	r4, r3, [r5]
 80193d8:	4631      	mov	r1, r6
 80193da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193de:	428b      	cmp	r3, r1
 80193e0:	d909      	bls.n	80193f6 <__udivmoddi4+0xc2>
 80193e2:	2d00      	cmp	r5, #0
 80193e4:	f000 80ef 	beq.w	80195c6 <__udivmoddi4+0x292>
 80193e8:	2600      	movs	r6, #0
 80193ea:	e9c5 0100 	strd	r0, r1, [r5]
 80193ee:	4630      	mov	r0, r6
 80193f0:	4631      	mov	r1, r6
 80193f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193f6:	fab3 f683 	clz	r6, r3
 80193fa:	2e00      	cmp	r6, #0
 80193fc:	d14a      	bne.n	8019494 <__udivmoddi4+0x160>
 80193fe:	428b      	cmp	r3, r1
 8019400:	d302      	bcc.n	8019408 <__udivmoddi4+0xd4>
 8019402:	4282      	cmp	r2, r0
 8019404:	f200 80f9 	bhi.w	80195fa <__udivmoddi4+0x2c6>
 8019408:	1a84      	subs	r4, r0, r2
 801940a:	eb61 0303 	sbc.w	r3, r1, r3
 801940e:	2001      	movs	r0, #1
 8019410:	469e      	mov	lr, r3
 8019412:	2d00      	cmp	r5, #0
 8019414:	d0e0      	beq.n	80193d8 <__udivmoddi4+0xa4>
 8019416:	e9c5 4e00 	strd	r4, lr, [r5]
 801941a:	e7dd      	b.n	80193d8 <__udivmoddi4+0xa4>
 801941c:	b902      	cbnz	r2, 8019420 <__udivmoddi4+0xec>
 801941e:	deff      	udf	#255	; 0xff
 8019420:	fab2 f282 	clz	r2, r2
 8019424:	2a00      	cmp	r2, #0
 8019426:	f040 8092 	bne.w	801954e <__udivmoddi4+0x21a>
 801942a:	eba1 010c 	sub.w	r1, r1, ip
 801942e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019432:	fa1f fe8c 	uxth.w	lr, ip
 8019436:	2601      	movs	r6, #1
 8019438:	0c20      	lsrs	r0, r4, #16
 801943a:	fbb1 f3f7 	udiv	r3, r1, r7
 801943e:	fb07 1113 	mls	r1, r7, r3, r1
 8019442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8019446:	fb0e f003 	mul.w	r0, lr, r3
 801944a:	4288      	cmp	r0, r1
 801944c:	d908      	bls.n	8019460 <__udivmoddi4+0x12c>
 801944e:	eb1c 0101 	adds.w	r1, ip, r1
 8019452:	f103 38ff 	add.w	r8, r3, #4294967295
 8019456:	d202      	bcs.n	801945e <__udivmoddi4+0x12a>
 8019458:	4288      	cmp	r0, r1
 801945a:	f200 80cb 	bhi.w	80195f4 <__udivmoddi4+0x2c0>
 801945e:	4643      	mov	r3, r8
 8019460:	1a09      	subs	r1, r1, r0
 8019462:	b2a4      	uxth	r4, r4
 8019464:	fbb1 f0f7 	udiv	r0, r1, r7
 8019468:	fb07 1110 	mls	r1, r7, r0, r1
 801946c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8019470:	fb0e fe00 	mul.w	lr, lr, r0
 8019474:	45a6      	cmp	lr, r4
 8019476:	d908      	bls.n	801948a <__udivmoddi4+0x156>
 8019478:	eb1c 0404 	adds.w	r4, ip, r4
 801947c:	f100 31ff 	add.w	r1, r0, #4294967295
 8019480:	d202      	bcs.n	8019488 <__udivmoddi4+0x154>
 8019482:	45a6      	cmp	lr, r4
 8019484:	f200 80bb 	bhi.w	80195fe <__udivmoddi4+0x2ca>
 8019488:	4608      	mov	r0, r1
 801948a:	eba4 040e 	sub.w	r4, r4, lr
 801948e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8019492:	e79c      	b.n	80193ce <__udivmoddi4+0x9a>
 8019494:	f1c6 0720 	rsb	r7, r6, #32
 8019498:	40b3      	lsls	r3, r6
 801949a:	fa22 fc07 	lsr.w	ip, r2, r7
 801949e:	ea4c 0c03 	orr.w	ip, ip, r3
 80194a2:	fa20 f407 	lsr.w	r4, r0, r7
 80194a6:	fa01 f306 	lsl.w	r3, r1, r6
 80194aa:	431c      	orrs	r4, r3
 80194ac:	40f9      	lsrs	r1, r7
 80194ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80194b2:	fa00 f306 	lsl.w	r3, r0, r6
 80194b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80194ba:	0c20      	lsrs	r0, r4, #16
 80194bc:	fa1f fe8c 	uxth.w	lr, ip
 80194c0:	fb09 1118 	mls	r1, r9, r8, r1
 80194c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80194c8:	fb08 f00e 	mul.w	r0, r8, lr
 80194cc:	4288      	cmp	r0, r1
 80194ce:	fa02 f206 	lsl.w	r2, r2, r6
 80194d2:	d90b      	bls.n	80194ec <__udivmoddi4+0x1b8>
 80194d4:	eb1c 0101 	adds.w	r1, ip, r1
 80194d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80194dc:	f080 8088 	bcs.w	80195f0 <__udivmoddi4+0x2bc>
 80194e0:	4288      	cmp	r0, r1
 80194e2:	f240 8085 	bls.w	80195f0 <__udivmoddi4+0x2bc>
 80194e6:	f1a8 0802 	sub.w	r8, r8, #2
 80194ea:	4461      	add	r1, ip
 80194ec:	1a09      	subs	r1, r1, r0
 80194ee:	b2a4      	uxth	r4, r4
 80194f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80194f4:	fb09 1110 	mls	r1, r9, r0, r1
 80194f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80194fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8019500:	458e      	cmp	lr, r1
 8019502:	d908      	bls.n	8019516 <__udivmoddi4+0x1e2>
 8019504:	eb1c 0101 	adds.w	r1, ip, r1
 8019508:	f100 34ff 	add.w	r4, r0, #4294967295
 801950c:	d26c      	bcs.n	80195e8 <__udivmoddi4+0x2b4>
 801950e:	458e      	cmp	lr, r1
 8019510:	d96a      	bls.n	80195e8 <__udivmoddi4+0x2b4>
 8019512:	3802      	subs	r0, #2
 8019514:	4461      	add	r1, ip
 8019516:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801951a:	fba0 9402 	umull	r9, r4, r0, r2
 801951e:	eba1 010e 	sub.w	r1, r1, lr
 8019522:	42a1      	cmp	r1, r4
 8019524:	46c8      	mov	r8, r9
 8019526:	46a6      	mov	lr, r4
 8019528:	d356      	bcc.n	80195d8 <__udivmoddi4+0x2a4>
 801952a:	d053      	beq.n	80195d4 <__udivmoddi4+0x2a0>
 801952c:	b15d      	cbz	r5, 8019546 <__udivmoddi4+0x212>
 801952e:	ebb3 0208 	subs.w	r2, r3, r8
 8019532:	eb61 010e 	sbc.w	r1, r1, lr
 8019536:	fa01 f707 	lsl.w	r7, r1, r7
 801953a:	fa22 f306 	lsr.w	r3, r2, r6
 801953e:	40f1      	lsrs	r1, r6
 8019540:	431f      	orrs	r7, r3
 8019542:	e9c5 7100 	strd	r7, r1, [r5]
 8019546:	2600      	movs	r6, #0
 8019548:	4631      	mov	r1, r6
 801954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801954e:	f1c2 0320 	rsb	r3, r2, #32
 8019552:	40d8      	lsrs	r0, r3
 8019554:	fa0c fc02 	lsl.w	ip, ip, r2
 8019558:	fa21 f303 	lsr.w	r3, r1, r3
 801955c:	4091      	lsls	r1, r2
 801955e:	4301      	orrs	r1, r0
 8019560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8019564:	fa1f fe8c 	uxth.w	lr, ip
 8019568:	fbb3 f0f7 	udiv	r0, r3, r7
 801956c:	fb07 3610 	mls	r6, r7, r0, r3
 8019570:	0c0b      	lsrs	r3, r1, #16
 8019572:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8019576:	fb00 f60e 	mul.w	r6, r0, lr
 801957a:	429e      	cmp	r6, r3
 801957c:	fa04 f402 	lsl.w	r4, r4, r2
 8019580:	d908      	bls.n	8019594 <__udivmoddi4+0x260>
 8019582:	eb1c 0303 	adds.w	r3, ip, r3
 8019586:	f100 38ff 	add.w	r8, r0, #4294967295
 801958a:	d22f      	bcs.n	80195ec <__udivmoddi4+0x2b8>
 801958c:	429e      	cmp	r6, r3
 801958e:	d92d      	bls.n	80195ec <__udivmoddi4+0x2b8>
 8019590:	3802      	subs	r0, #2
 8019592:	4463      	add	r3, ip
 8019594:	1b9b      	subs	r3, r3, r6
 8019596:	b289      	uxth	r1, r1
 8019598:	fbb3 f6f7 	udiv	r6, r3, r7
 801959c:	fb07 3316 	mls	r3, r7, r6, r3
 80195a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80195a4:	fb06 f30e 	mul.w	r3, r6, lr
 80195a8:	428b      	cmp	r3, r1
 80195aa:	d908      	bls.n	80195be <__udivmoddi4+0x28a>
 80195ac:	eb1c 0101 	adds.w	r1, ip, r1
 80195b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80195b4:	d216      	bcs.n	80195e4 <__udivmoddi4+0x2b0>
 80195b6:	428b      	cmp	r3, r1
 80195b8:	d914      	bls.n	80195e4 <__udivmoddi4+0x2b0>
 80195ba:	3e02      	subs	r6, #2
 80195bc:	4461      	add	r1, ip
 80195be:	1ac9      	subs	r1, r1, r3
 80195c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80195c4:	e738      	b.n	8019438 <__udivmoddi4+0x104>
 80195c6:	462e      	mov	r6, r5
 80195c8:	4628      	mov	r0, r5
 80195ca:	e705      	b.n	80193d8 <__udivmoddi4+0xa4>
 80195cc:	4606      	mov	r6, r0
 80195ce:	e6e3      	b.n	8019398 <__udivmoddi4+0x64>
 80195d0:	4618      	mov	r0, r3
 80195d2:	e6f8      	b.n	80193c6 <__udivmoddi4+0x92>
 80195d4:	454b      	cmp	r3, r9
 80195d6:	d2a9      	bcs.n	801952c <__udivmoddi4+0x1f8>
 80195d8:	ebb9 0802 	subs.w	r8, r9, r2
 80195dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80195e0:	3801      	subs	r0, #1
 80195e2:	e7a3      	b.n	801952c <__udivmoddi4+0x1f8>
 80195e4:	4646      	mov	r6, r8
 80195e6:	e7ea      	b.n	80195be <__udivmoddi4+0x28a>
 80195e8:	4620      	mov	r0, r4
 80195ea:	e794      	b.n	8019516 <__udivmoddi4+0x1e2>
 80195ec:	4640      	mov	r0, r8
 80195ee:	e7d1      	b.n	8019594 <__udivmoddi4+0x260>
 80195f0:	46d0      	mov	r8, sl
 80195f2:	e77b      	b.n	80194ec <__udivmoddi4+0x1b8>
 80195f4:	3b02      	subs	r3, #2
 80195f6:	4461      	add	r1, ip
 80195f8:	e732      	b.n	8019460 <__udivmoddi4+0x12c>
 80195fa:	4630      	mov	r0, r6
 80195fc:	e709      	b.n	8019412 <__udivmoddi4+0xde>
 80195fe:	4464      	add	r4, ip
 8019600:	3802      	subs	r0, #2
 8019602:	e742      	b.n	801948a <__udivmoddi4+0x156>

08019604 <__aeabi_idiv0>:
 8019604:	4770      	bx	lr
 8019606:	bf00      	nop

08019608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8019608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 801960c:	480d      	ldr	r0, [pc, #52]	; (8019644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801960e:	490e      	ldr	r1, [pc, #56]	; (8019648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8019610:	4a0e      	ldr	r2, [pc, #56]	; (801964c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8019612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8019614:	e002      	b.n	801961c <LoopCopyDataInit>

08019616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8019616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8019618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801961a:	3304      	adds	r3, #4

0801961c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801961c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801961e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019620:	d3f9      	bcc.n	8019616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019622:	4a0b      	ldr	r2, [pc, #44]	; (8019650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8019624:	4c0b      	ldr	r4, [pc, #44]	; (8019654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8019626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8019628:	e001      	b.n	801962e <LoopFillZerobss>

0801962a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801962a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801962c:	3204      	adds	r2, #4

0801962e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801962e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019630:	d3fb      	bcc.n	801962a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8019632:	f7ec fdab 	bl	800618c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019636:	f000 f81b 	bl	8019670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801963a:	f7e8 fad7 	bl	8001bec <main>
  bx  lr    
 801963e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8019640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8019644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8019648:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 801964c:	08052410 	.word	0x08052410
  ldr r2, =_sbss
 8019650:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8019654:	20000e0c 	.word	0x20000e0c

08019658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019658:	e7fe      	b.n	8019658 <ADC_IRQHandler>

0801965a <atoi>:
 801965a:	220a      	movs	r2, #10
 801965c:	2100      	movs	r1, #0
 801965e:	f001 bd7f 	b.w	801b160 <strtol>
	...

08019664 <__errno>:
 8019664:	4b01      	ldr	r3, [pc, #4]	; (801966c <__errno+0x8>)
 8019666:	6818      	ldr	r0, [r3, #0]
 8019668:	4770      	bx	lr
 801966a:	bf00      	nop
 801966c:	20000064 	.word	0x20000064

08019670 <__libc_init_array>:
 8019670:	b570      	push	{r4, r5, r6, lr}
 8019672:	4d0d      	ldr	r5, [pc, #52]	; (80196a8 <__libc_init_array+0x38>)
 8019674:	4c0d      	ldr	r4, [pc, #52]	; (80196ac <__libc_init_array+0x3c>)
 8019676:	1b64      	subs	r4, r4, r5
 8019678:	10a4      	asrs	r4, r4, #2
 801967a:	2600      	movs	r6, #0
 801967c:	42a6      	cmp	r6, r4
 801967e:	d109      	bne.n	8019694 <__libc_init_array+0x24>
 8019680:	4d0b      	ldr	r5, [pc, #44]	; (80196b0 <__libc_init_array+0x40>)
 8019682:	4c0c      	ldr	r4, [pc, #48]	; (80196b4 <__libc_init_array+0x44>)
 8019684:	f005 fc46 	bl	801ef14 <_init>
 8019688:	1b64      	subs	r4, r4, r5
 801968a:	10a4      	asrs	r4, r4, #2
 801968c:	2600      	movs	r6, #0
 801968e:	42a6      	cmp	r6, r4
 8019690:	d105      	bne.n	801969e <__libc_init_array+0x2e>
 8019692:	bd70      	pop	{r4, r5, r6, pc}
 8019694:	f855 3b04 	ldr.w	r3, [r5], #4
 8019698:	4798      	blx	r3
 801969a:	3601      	adds	r6, #1
 801969c:	e7ee      	b.n	801967c <__libc_init_array+0xc>
 801969e:	f855 3b04 	ldr.w	r3, [r5], #4
 80196a2:	4798      	blx	r3
 80196a4:	3601      	adds	r6, #1
 80196a6:	e7f2      	b.n	801968e <__libc_init_array+0x1e>
 80196a8:	08052408 	.word	0x08052408
 80196ac:	08052408 	.word	0x08052408
 80196b0:	08052408 	.word	0x08052408
 80196b4:	0805240c 	.word	0x0805240c

080196b8 <memset>:
 80196b8:	4402      	add	r2, r0
 80196ba:	4603      	mov	r3, r0
 80196bc:	4293      	cmp	r3, r2
 80196be:	d100      	bne.n	80196c2 <memset+0xa>
 80196c0:	4770      	bx	lr
 80196c2:	f803 1b01 	strb.w	r1, [r3], #1
 80196c6:	e7f9      	b.n	80196bc <memset+0x4>

080196c8 <__cvt>:
 80196c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196cc:	ec55 4b10 	vmov	r4, r5, d0
 80196d0:	2d00      	cmp	r5, #0
 80196d2:	460e      	mov	r6, r1
 80196d4:	4619      	mov	r1, r3
 80196d6:	462b      	mov	r3, r5
 80196d8:	bfbb      	ittet	lt
 80196da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80196de:	461d      	movlt	r5, r3
 80196e0:	2300      	movge	r3, #0
 80196e2:	232d      	movlt	r3, #45	; 0x2d
 80196e4:	700b      	strb	r3, [r1, #0]
 80196e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80196ec:	4691      	mov	r9, r2
 80196ee:	f023 0820 	bic.w	r8, r3, #32
 80196f2:	bfbc      	itt	lt
 80196f4:	4622      	movlt	r2, r4
 80196f6:	4614      	movlt	r4, r2
 80196f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80196fc:	d005      	beq.n	801970a <__cvt+0x42>
 80196fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019702:	d100      	bne.n	8019706 <__cvt+0x3e>
 8019704:	3601      	adds	r6, #1
 8019706:	2102      	movs	r1, #2
 8019708:	e000      	b.n	801970c <__cvt+0x44>
 801970a:	2103      	movs	r1, #3
 801970c:	ab03      	add	r3, sp, #12
 801970e:	9301      	str	r3, [sp, #4]
 8019710:	ab02      	add	r3, sp, #8
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	ec45 4b10 	vmov	d0, r4, r5
 8019718:	4653      	mov	r3, sl
 801971a:	4632      	mov	r2, r6
 801971c:	f001 fdb8 	bl	801b290 <_dtoa_r>
 8019720:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019724:	4607      	mov	r7, r0
 8019726:	d102      	bne.n	801972e <__cvt+0x66>
 8019728:	f019 0f01 	tst.w	r9, #1
 801972c:	d022      	beq.n	8019774 <__cvt+0xac>
 801972e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019732:	eb07 0906 	add.w	r9, r7, r6
 8019736:	d110      	bne.n	801975a <__cvt+0x92>
 8019738:	783b      	ldrb	r3, [r7, #0]
 801973a:	2b30      	cmp	r3, #48	; 0x30
 801973c:	d10a      	bne.n	8019754 <__cvt+0x8c>
 801973e:	2200      	movs	r2, #0
 8019740:	2300      	movs	r3, #0
 8019742:	4620      	mov	r0, r4
 8019744:	4629      	mov	r1, r5
 8019746:	f7ff fcc7 	bl	80190d8 <__aeabi_dcmpeq>
 801974a:	b918      	cbnz	r0, 8019754 <__cvt+0x8c>
 801974c:	f1c6 0601 	rsb	r6, r6, #1
 8019750:	f8ca 6000 	str.w	r6, [sl]
 8019754:	f8da 3000 	ldr.w	r3, [sl]
 8019758:	4499      	add	r9, r3
 801975a:	2200      	movs	r2, #0
 801975c:	2300      	movs	r3, #0
 801975e:	4620      	mov	r0, r4
 8019760:	4629      	mov	r1, r5
 8019762:	f7ff fcb9 	bl	80190d8 <__aeabi_dcmpeq>
 8019766:	b108      	cbz	r0, 801976c <__cvt+0xa4>
 8019768:	f8cd 900c 	str.w	r9, [sp, #12]
 801976c:	2230      	movs	r2, #48	; 0x30
 801976e:	9b03      	ldr	r3, [sp, #12]
 8019770:	454b      	cmp	r3, r9
 8019772:	d307      	bcc.n	8019784 <__cvt+0xbc>
 8019774:	9b03      	ldr	r3, [sp, #12]
 8019776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019778:	1bdb      	subs	r3, r3, r7
 801977a:	4638      	mov	r0, r7
 801977c:	6013      	str	r3, [r2, #0]
 801977e:	b004      	add	sp, #16
 8019780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019784:	1c59      	adds	r1, r3, #1
 8019786:	9103      	str	r1, [sp, #12]
 8019788:	701a      	strb	r2, [r3, #0]
 801978a:	e7f0      	b.n	801976e <__cvt+0xa6>

0801978c <__exponent>:
 801978c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801978e:	4603      	mov	r3, r0
 8019790:	2900      	cmp	r1, #0
 8019792:	bfb8      	it	lt
 8019794:	4249      	neglt	r1, r1
 8019796:	f803 2b02 	strb.w	r2, [r3], #2
 801979a:	bfb4      	ite	lt
 801979c:	222d      	movlt	r2, #45	; 0x2d
 801979e:	222b      	movge	r2, #43	; 0x2b
 80197a0:	2909      	cmp	r1, #9
 80197a2:	7042      	strb	r2, [r0, #1]
 80197a4:	dd2a      	ble.n	80197fc <__exponent+0x70>
 80197a6:	f10d 0407 	add.w	r4, sp, #7
 80197aa:	46a4      	mov	ip, r4
 80197ac:	270a      	movs	r7, #10
 80197ae:	46a6      	mov	lr, r4
 80197b0:	460a      	mov	r2, r1
 80197b2:	fb91 f6f7 	sdiv	r6, r1, r7
 80197b6:	fb07 1516 	mls	r5, r7, r6, r1
 80197ba:	3530      	adds	r5, #48	; 0x30
 80197bc:	2a63      	cmp	r2, #99	; 0x63
 80197be:	f104 34ff 	add.w	r4, r4, #4294967295
 80197c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80197c6:	4631      	mov	r1, r6
 80197c8:	dcf1      	bgt.n	80197ae <__exponent+0x22>
 80197ca:	3130      	adds	r1, #48	; 0x30
 80197cc:	f1ae 0502 	sub.w	r5, lr, #2
 80197d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80197d4:	1c44      	adds	r4, r0, #1
 80197d6:	4629      	mov	r1, r5
 80197d8:	4561      	cmp	r1, ip
 80197da:	d30a      	bcc.n	80197f2 <__exponent+0x66>
 80197dc:	f10d 0209 	add.w	r2, sp, #9
 80197e0:	eba2 020e 	sub.w	r2, r2, lr
 80197e4:	4565      	cmp	r5, ip
 80197e6:	bf88      	it	hi
 80197e8:	2200      	movhi	r2, #0
 80197ea:	4413      	add	r3, r2
 80197ec:	1a18      	subs	r0, r3, r0
 80197ee:	b003      	add	sp, #12
 80197f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80197fa:	e7ed      	b.n	80197d8 <__exponent+0x4c>
 80197fc:	2330      	movs	r3, #48	; 0x30
 80197fe:	3130      	adds	r1, #48	; 0x30
 8019800:	7083      	strb	r3, [r0, #2]
 8019802:	70c1      	strb	r1, [r0, #3]
 8019804:	1d03      	adds	r3, r0, #4
 8019806:	e7f1      	b.n	80197ec <__exponent+0x60>

08019808 <_printf_float>:
 8019808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801980c:	ed2d 8b02 	vpush	{d8}
 8019810:	b08d      	sub	sp, #52	; 0x34
 8019812:	460c      	mov	r4, r1
 8019814:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019818:	4616      	mov	r6, r2
 801981a:	461f      	mov	r7, r3
 801981c:	4605      	mov	r5, r0
 801981e:	f002 fe95 	bl	801c54c <_localeconv_r>
 8019822:	f8d0 a000 	ldr.w	sl, [r0]
 8019826:	4650      	mov	r0, sl
 8019828:	f7fe ffd8 	bl	80187dc <strlen>
 801982c:	2300      	movs	r3, #0
 801982e:	930a      	str	r3, [sp, #40]	; 0x28
 8019830:	6823      	ldr	r3, [r4, #0]
 8019832:	9305      	str	r3, [sp, #20]
 8019834:	f8d8 3000 	ldr.w	r3, [r8]
 8019838:	f894 b018 	ldrb.w	fp, [r4, #24]
 801983c:	3307      	adds	r3, #7
 801983e:	f023 0307 	bic.w	r3, r3, #7
 8019842:	f103 0208 	add.w	r2, r3, #8
 8019846:	f8c8 2000 	str.w	r2, [r8]
 801984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801984e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019852:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801985a:	9307      	str	r3, [sp, #28]
 801985c:	f8cd 8018 	str.w	r8, [sp, #24]
 8019860:	ee08 0a10 	vmov	s16, r0
 8019864:	4b9f      	ldr	r3, [pc, #636]	; (8019ae4 <_printf_float+0x2dc>)
 8019866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801986a:	f04f 32ff 	mov.w	r2, #4294967295
 801986e:	f7ff fc65 	bl	801913c <__aeabi_dcmpun>
 8019872:	bb88      	cbnz	r0, 80198d8 <_printf_float+0xd0>
 8019874:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019878:	4b9a      	ldr	r3, [pc, #616]	; (8019ae4 <_printf_float+0x2dc>)
 801987a:	f04f 32ff 	mov.w	r2, #4294967295
 801987e:	f7ff fc3f 	bl	8019100 <__aeabi_dcmple>
 8019882:	bb48      	cbnz	r0, 80198d8 <_printf_float+0xd0>
 8019884:	2200      	movs	r2, #0
 8019886:	2300      	movs	r3, #0
 8019888:	4640      	mov	r0, r8
 801988a:	4649      	mov	r1, r9
 801988c:	f7ff fc2e 	bl	80190ec <__aeabi_dcmplt>
 8019890:	b110      	cbz	r0, 8019898 <_printf_float+0x90>
 8019892:	232d      	movs	r3, #45	; 0x2d
 8019894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019898:	4b93      	ldr	r3, [pc, #588]	; (8019ae8 <_printf_float+0x2e0>)
 801989a:	4894      	ldr	r0, [pc, #592]	; (8019aec <_printf_float+0x2e4>)
 801989c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80198a0:	bf94      	ite	ls
 80198a2:	4698      	movls	r8, r3
 80198a4:	4680      	movhi	r8, r0
 80198a6:	2303      	movs	r3, #3
 80198a8:	6123      	str	r3, [r4, #16]
 80198aa:	9b05      	ldr	r3, [sp, #20]
 80198ac:	f023 0204 	bic.w	r2, r3, #4
 80198b0:	6022      	str	r2, [r4, #0]
 80198b2:	f04f 0900 	mov.w	r9, #0
 80198b6:	9700      	str	r7, [sp, #0]
 80198b8:	4633      	mov	r3, r6
 80198ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80198bc:	4621      	mov	r1, r4
 80198be:	4628      	mov	r0, r5
 80198c0:	f000 f9d8 	bl	8019c74 <_printf_common>
 80198c4:	3001      	adds	r0, #1
 80198c6:	f040 8090 	bne.w	80199ea <_printf_float+0x1e2>
 80198ca:	f04f 30ff 	mov.w	r0, #4294967295
 80198ce:	b00d      	add	sp, #52	; 0x34
 80198d0:	ecbd 8b02 	vpop	{d8}
 80198d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80198d8:	4642      	mov	r2, r8
 80198da:	464b      	mov	r3, r9
 80198dc:	4640      	mov	r0, r8
 80198de:	4649      	mov	r1, r9
 80198e0:	f7ff fc2c 	bl	801913c <__aeabi_dcmpun>
 80198e4:	b140      	cbz	r0, 80198f8 <_printf_float+0xf0>
 80198e6:	464b      	mov	r3, r9
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	bfbc      	itt	lt
 80198ec:	232d      	movlt	r3, #45	; 0x2d
 80198ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80198f2:	487f      	ldr	r0, [pc, #508]	; (8019af0 <_printf_float+0x2e8>)
 80198f4:	4b7f      	ldr	r3, [pc, #508]	; (8019af4 <_printf_float+0x2ec>)
 80198f6:	e7d1      	b.n	801989c <_printf_float+0x94>
 80198f8:	6863      	ldr	r3, [r4, #4]
 80198fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80198fe:	9206      	str	r2, [sp, #24]
 8019900:	1c5a      	adds	r2, r3, #1
 8019902:	d13f      	bne.n	8019984 <_printf_float+0x17c>
 8019904:	2306      	movs	r3, #6
 8019906:	6063      	str	r3, [r4, #4]
 8019908:	9b05      	ldr	r3, [sp, #20]
 801990a:	6861      	ldr	r1, [r4, #4]
 801990c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019910:	2300      	movs	r3, #0
 8019912:	9303      	str	r3, [sp, #12]
 8019914:	ab0a      	add	r3, sp, #40	; 0x28
 8019916:	e9cd b301 	strd	fp, r3, [sp, #4]
 801991a:	ab09      	add	r3, sp, #36	; 0x24
 801991c:	ec49 8b10 	vmov	d0, r8, r9
 8019920:	9300      	str	r3, [sp, #0]
 8019922:	6022      	str	r2, [r4, #0]
 8019924:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8019928:	4628      	mov	r0, r5
 801992a:	f7ff fecd 	bl	80196c8 <__cvt>
 801992e:	9b06      	ldr	r3, [sp, #24]
 8019930:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019932:	2b47      	cmp	r3, #71	; 0x47
 8019934:	4680      	mov	r8, r0
 8019936:	d108      	bne.n	801994a <_printf_float+0x142>
 8019938:	1cc8      	adds	r0, r1, #3
 801993a:	db02      	blt.n	8019942 <_printf_float+0x13a>
 801993c:	6863      	ldr	r3, [r4, #4]
 801993e:	4299      	cmp	r1, r3
 8019940:	dd41      	ble.n	80199c6 <_printf_float+0x1be>
 8019942:	f1ab 0b02 	sub.w	fp, fp, #2
 8019946:	fa5f fb8b 	uxtb.w	fp, fp
 801994a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801994e:	d820      	bhi.n	8019992 <_printf_float+0x18a>
 8019950:	3901      	subs	r1, #1
 8019952:	465a      	mov	r2, fp
 8019954:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019958:	9109      	str	r1, [sp, #36]	; 0x24
 801995a:	f7ff ff17 	bl	801978c <__exponent>
 801995e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019960:	1813      	adds	r3, r2, r0
 8019962:	2a01      	cmp	r2, #1
 8019964:	4681      	mov	r9, r0
 8019966:	6123      	str	r3, [r4, #16]
 8019968:	dc02      	bgt.n	8019970 <_printf_float+0x168>
 801996a:	6822      	ldr	r2, [r4, #0]
 801996c:	07d2      	lsls	r2, r2, #31
 801996e:	d501      	bpl.n	8019974 <_printf_float+0x16c>
 8019970:	3301      	adds	r3, #1
 8019972:	6123      	str	r3, [r4, #16]
 8019974:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019978:	2b00      	cmp	r3, #0
 801997a:	d09c      	beq.n	80198b6 <_printf_float+0xae>
 801997c:	232d      	movs	r3, #45	; 0x2d
 801997e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019982:	e798      	b.n	80198b6 <_printf_float+0xae>
 8019984:	9a06      	ldr	r2, [sp, #24]
 8019986:	2a47      	cmp	r2, #71	; 0x47
 8019988:	d1be      	bne.n	8019908 <_printf_float+0x100>
 801998a:	2b00      	cmp	r3, #0
 801998c:	d1bc      	bne.n	8019908 <_printf_float+0x100>
 801998e:	2301      	movs	r3, #1
 8019990:	e7b9      	b.n	8019906 <_printf_float+0xfe>
 8019992:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8019996:	d118      	bne.n	80199ca <_printf_float+0x1c2>
 8019998:	2900      	cmp	r1, #0
 801999a:	6863      	ldr	r3, [r4, #4]
 801999c:	dd0b      	ble.n	80199b6 <_printf_float+0x1ae>
 801999e:	6121      	str	r1, [r4, #16]
 80199a0:	b913      	cbnz	r3, 80199a8 <_printf_float+0x1a0>
 80199a2:	6822      	ldr	r2, [r4, #0]
 80199a4:	07d0      	lsls	r0, r2, #31
 80199a6:	d502      	bpl.n	80199ae <_printf_float+0x1a6>
 80199a8:	3301      	adds	r3, #1
 80199aa:	440b      	add	r3, r1
 80199ac:	6123      	str	r3, [r4, #16]
 80199ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80199b0:	f04f 0900 	mov.w	r9, #0
 80199b4:	e7de      	b.n	8019974 <_printf_float+0x16c>
 80199b6:	b913      	cbnz	r3, 80199be <_printf_float+0x1b6>
 80199b8:	6822      	ldr	r2, [r4, #0]
 80199ba:	07d2      	lsls	r2, r2, #31
 80199bc:	d501      	bpl.n	80199c2 <_printf_float+0x1ba>
 80199be:	3302      	adds	r3, #2
 80199c0:	e7f4      	b.n	80199ac <_printf_float+0x1a4>
 80199c2:	2301      	movs	r3, #1
 80199c4:	e7f2      	b.n	80199ac <_printf_float+0x1a4>
 80199c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80199ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80199cc:	4299      	cmp	r1, r3
 80199ce:	db05      	blt.n	80199dc <_printf_float+0x1d4>
 80199d0:	6823      	ldr	r3, [r4, #0]
 80199d2:	6121      	str	r1, [r4, #16]
 80199d4:	07d8      	lsls	r0, r3, #31
 80199d6:	d5ea      	bpl.n	80199ae <_printf_float+0x1a6>
 80199d8:	1c4b      	adds	r3, r1, #1
 80199da:	e7e7      	b.n	80199ac <_printf_float+0x1a4>
 80199dc:	2900      	cmp	r1, #0
 80199de:	bfd4      	ite	le
 80199e0:	f1c1 0202 	rsble	r2, r1, #2
 80199e4:	2201      	movgt	r2, #1
 80199e6:	4413      	add	r3, r2
 80199e8:	e7e0      	b.n	80199ac <_printf_float+0x1a4>
 80199ea:	6823      	ldr	r3, [r4, #0]
 80199ec:	055a      	lsls	r2, r3, #21
 80199ee:	d407      	bmi.n	8019a00 <_printf_float+0x1f8>
 80199f0:	6923      	ldr	r3, [r4, #16]
 80199f2:	4642      	mov	r2, r8
 80199f4:	4631      	mov	r1, r6
 80199f6:	4628      	mov	r0, r5
 80199f8:	47b8      	blx	r7
 80199fa:	3001      	adds	r0, #1
 80199fc:	d12c      	bne.n	8019a58 <_printf_float+0x250>
 80199fe:	e764      	b.n	80198ca <_printf_float+0xc2>
 8019a00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8019a04:	f240 80e0 	bls.w	8019bc8 <_printf_float+0x3c0>
 8019a08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019a0c:	2200      	movs	r2, #0
 8019a0e:	2300      	movs	r3, #0
 8019a10:	f7ff fb62 	bl	80190d8 <__aeabi_dcmpeq>
 8019a14:	2800      	cmp	r0, #0
 8019a16:	d034      	beq.n	8019a82 <_printf_float+0x27a>
 8019a18:	4a37      	ldr	r2, [pc, #220]	; (8019af8 <_printf_float+0x2f0>)
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	4631      	mov	r1, r6
 8019a1e:	4628      	mov	r0, r5
 8019a20:	47b8      	blx	r7
 8019a22:	3001      	adds	r0, #1
 8019a24:	f43f af51 	beq.w	80198ca <_printf_float+0xc2>
 8019a28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019a2c:	429a      	cmp	r2, r3
 8019a2e:	db02      	blt.n	8019a36 <_printf_float+0x22e>
 8019a30:	6823      	ldr	r3, [r4, #0]
 8019a32:	07d8      	lsls	r0, r3, #31
 8019a34:	d510      	bpl.n	8019a58 <_printf_float+0x250>
 8019a36:	ee18 3a10 	vmov	r3, s16
 8019a3a:	4652      	mov	r2, sl
 8019a3c:	4631      	mov	r1, r6
 8019a3e:	4628      	mov	r0, r5
 8019a40:	47b8      	blx	r7
 8019a42:	3001      	adds	r0, #1
 8019a44:	f43f af41 	beq.w	80198ca <_printf_float+0xc2>
 8019a48:	f04f 0800 	mov.w	r8, #0
 8019a4c:	f104 091a 	add.w	r9, r4, #26
 8019a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019a52:	3b01      	subs	r3, #1
 8019a54:	4543      	cmp	r3, r8
 8019a56:	dc09      	bgt.n	8019a6c <_printf_float+0x264>
 8019a58:	6823      	ldr	r3, [r4, #0]
 8019a5a:	079b      	lsls	r3, r3, #30
 8019a5c:	f100 8105 	bmi.w	8019c6a <_printf_float+0x462>
 8019a60:	68e0      	ldr	r0, [r4, #12]
 8019a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019a64:	4298      	cmp	r0, r3
 8019a66:	bfb8      	it	lt
 8019a68:	4618      	movlt	r0, r3
 8019a6a:	e730      	b.n	80198ce <_printf_float+0xc6>
 8019a6c:	2301      	movs	r3, #1
 8019a6e:	464a      	mov	r2, r9
 8019a70:	4631      	mov	r1, r6
 8019a72:	4628      	mov	r0, r5
 8019a74:	47b8      	blx	r7
 8019a76:	3001      	adds	r0, #1
 8019a78:	f43f af27 	beq.w	80198ca <_printf_float+0xc2>
 8019a7c:	f108 0801 	add.w	r8, r8, #1
 8019a80:	e7e6      	b.n	8019a50 <_printf_float+0x248>
 8019a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	dc39      	bgt.n	8019afc <_printf_float+0x2f4>
 8019a88:	4a1b      	ldr	r2, [pc, #108]	; (8019af8 <_printf_float+0x2f0>)
 8019a8a:	2301      	movs	r3, #1
 8019a8c:	4631      	mov	r1, r6
 8019a8e:	4628      	mov	r0, r5
 8019a90:	47b8      	blx	r7
 8019a92:	3001      	adds	r0, #1
 8019a94:	f43f af19 	beq.w	80198ca <_printf_float+0xc2>
 8019a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019a9c:	4313      	orrs	r3, r2
 8019a9e:	d102      	bne.n	8019aa6 <_printf_float+0x29e>
 8019aa0:	6823      	ldr	r3, [r4, #0]
 8019aa2:	07d9      	lsls	r1, r3, #31
 8019aa4:	d5d8      	bpl.n	8019a58 <_printf_float+0x250>
 8019aa6:	ee18 3a10 	vmov	r3, s16
 8019aaa:	4652      	mov	r2, sl
 8019aac:	4631      	mov	r1, r6
 8019aae:	4628      	mov	r0, r5
 8019ab0:	47b8      	blx	r7
 8019ab2:	3001      	adds	r0, #1
 8019ab4:	f43f af09 	beq.w	80198ca <_printf_float+0xc2>
 8019ab8:	f04f 0900 	mov.w	r9, #0
 8019abc:	f104 0a1a 	add.w	sl, r4, #26
 8019ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ac2:	425b      	negs	r3, r3
 8019ac4:	454b      	cmp	r3, r9
 8019ac6:	dc01      	bgt.n	8019acc <_printf_float+0x2c4>
 8019ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019aca:	e792      	b.n	80199f2 <_printf_float+0x1ea>
 8019acc:	2301      	movs	r3, #1
 8019ace:	4652      	mov	r2, sl
 8019ad0:	4631      	mov	r1, r6
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	47b8      	blx	r7
 8019ad6:	3001      	adds	r0, #1
 8019ad8:	f43f aef7 	beq.w	80198ca <_printf_float+0xc2>
 8019adc:	f109 0901 	add.w	r9, r9, #1
 8019ae0:	e7ee      	b.n	8019ac0 <_printf_float+0x2b8>
 8019ae2:	bf00      	nop
 8019ae4:	7fefffff 	.word	0x7fefffff
 8019ae8:	08051f2c 	.word	0x08051f2c
 8019aec:	08051f30 	.word	0x08051f30
 8019af0:	08051f38 	.word	0x08051f38
 8019af4:	08051f34 	.word	0x08051f34
 8019af8:	08051f3c 	.word	0x08051f3c
 8019afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019b00:	429a      	cmp	r2, r3
 8019b02:	bfa8      	it	ge
 8019b04:	461a      	movge	r2, r3
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	4691      	mov	r9, r2
 8019b0a:	dc37      	bgt.n	8019b7c <_printf_float+0x374>
 8019b0c:	f04f 0b00 	mov.w	fp, #0
 8019b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019b14:	f104 021a 	add.w	r2, r4, #26
 8019b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019b1a:	9305      	str	r3, [sp, #20]
 8019b1c:	eba3 0309 	sub.w	r3, r3, r9
 8019b20:	455b      	cmp	r3, fp
 8019b22:	dc33      	bgt.n	8019b8c <_printf_float+0x384>
 8019b24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019b28:	429a      	cmp	r2, r3
 8019b2a:	db3b      	blt.n	8019ba4 <_printf_float+0x39c>
 8019b2c:	6823      	ldr	r3, [r4, #0]
 8019b2e:	07da      	lsls	r2, r3, #31
 8019b30:	d438      	bmi.n	8019ba4 <_printf_float+0x39c>
 8019b32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019b34:	9a05      	ldr	r2, [sp, #20]
 8019b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019b38:	1a9a      	subs	r2, r3, r2
 8019b3a:	eba3 0901 	sub.w	r9, r3, r1
 8019b3e:	4591      	cmp	r9, r2
 8019b40:	bfa8      	it	ge
 8019b42:	4691      	movge	r9, r2
 8019b44:	f1b9 0f00 	cmp.w	r9, #0
 8019b48:	dc35      	bgt.n	8019bb6 <_printf_float+0x3ae>
 8019b4a:	f04f 0800 	mov.w	r8, #0
 8019b4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019b52:	f104 0a1a 	add.w	sl, r4, #26
 8019b56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019b5a:	1a9b      	subs	r3, r3, r2
 8019b5c:	eba3 0309 	sub.w	r3, r3, r9
 8019b60:	4543      	cmp	r3, r8
 8019b62:	f77f af79 	ble.w	8019a58 <_printf_float+0x250>
 8019b66:	2301      	movs	r3, #1
 8019b68:	4652      	mov	r2, sl
 8019b6a:	4631      	mov	r1, r6
 8019b6c:	4628      	mov	r0, r5
 8019b6e:	47b8      	blx	r7
 8019b70:	3001      	adds	r0, #1
 8019b72:	f43f aeaa 	beq.w	80198ca <_printf_float+0xc2>
 8019b76:	f108 0801 	add.w	r8, r8, #1
 8019b7a:	e7ec      	b.n	8019b56 <_printf_float+0x34e>
 8019b7c:	4613      	mov	r3, r2
 8019b7e:	4631      	mov	r1, r6
 8019b80:	4642      	mov	r2, r8
 8019b82:	4628      	mov	r0, r5
 8019b84:	47b8      	blx	r7
 8019b86:	3001      	adds	r0, #1
 8019b88:	d1c0      	bne.n	8019b0c <_printf_float+0x304>
 8019b8a:	e69e      	b.n	80198ca <_printf_float+0xc2>
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	4631      	mov	r1, r6
 8019b90:	4628      	mov	r0, r5
 8019b92:	9205      	str	r2, [sp, #20]
 8019b94:	47b8      	blx	r7
 8019b96:	3001      	adds	r0, #1
 8019b98:	f43f ae97 	beq.w	80198ca <_printf_float+0xc2>
 8019b9c:	9a05      	ldr	r2, [sp, #20]
 8019b9e:	f10b 0b01 	add.w	fp, fp, #1
 8019ba2:	e7b9      	b.n	8019b18 <_printf_float+0x310>
 8019ba4:	ee18 3a10 	vmov	r3, s16
 8019ba8:	4652      	mov	r2, sl
 8019baa:	4631      	mov	r1, r6
 8019bac:	4628      	mov	r0, r5
 8019bae:	47b8      	blx	r7
 8019bb0:	3001      	adds	r0, #1
 8019bb2:	d1be      	bne.n	8019b32 <_printf_float+0x32a>
 8019bb4:	e689      	b.n	80198ca <_printf_float+0xc2>
 8019bb6:	9a05      	ldr	r2, [sp, #20]
 8019bb8:	464b      	mov	r3, r9
 8019bba:	4442      	add	r2, r8
 8019bbc:	4631      	mov	r1, r6
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	47b8      	blx	r7
 8019bc2:	3001      	adds	r0, #1
 8019bc4:	d1c1      	bne.n	8019b4a <_printf_float+0x342>
 8019bc6:	e680      	b.n	80198ca <_printf_float+0xc2>
 8019bc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019bca:	2a01      	cmp	r2, #1
 8019bcc:	dc01      	bgt.n	8019bd2 <_printf_float+0x3ca>
 8019bce:	07db      	lsls	r3, r3, #31
 8019bd0:	d538      	bpl.n	8019c44 <_printf_float+0x43c>
 8019bd2:	2301      	movs	r3, #1
 8019bd4:	4642      	mov	r2, r8
 8019bd6:	4631      	mov	r1, r6
 8019bd8:	4628      	mov	r0, r5
 8019bda:	47b8      	blx	r7
 8019bdc:	3001      	adds	r0, #1
 8019bde:	f43f ae74 	beq.w	80198ca <_printf_float+0xc2>
 8019be2:	ee18 3a10 	vmov	r3, s16
 8019be6:	4652      	mov	r2, sl
 8019be8:	4631      	mov	r1, r6
 8019bea:	4628      	mov	r0, r5
 8019bec:	47b8      	blx	r7
 8019bee:	3001      	adds	r0, #1
 8019bf0:	f43f ae6b 	beq.w	80198ca <_printf_float+0xc2>
 8019bf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019bf8:	2200      	movs	r2, #0
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	f7ff fa6c 	bl	80190d8 <__aeabi_dcmpeq>
 8019c00:	b9d8      	cbnz	r0, 8019c3a <_printf_float+0x432>
 8019c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c04:	f108 0201 	add.w	r2, r8, #1
 8019c08:	3b01      	subs	r3, #1
 8019c0a:	4631      	mov	r1, r6
 8019c0c:	4628      	mov	r0, r5
 8019c0e:	47b8      	blx	r7
 8019c10:	3001      	adds	r0, #1
 8019c12:	d10e      	bne.n	8019c32 <_printf_float+0x42a>
 8019c14:	e659      	b.n	80198ca <_printf_float+0xc2>
 8019c16:	2301      	movs	r3, #1
 8019c18:	4652      	mov	r2, sl
 8019c1a:	4631      	mov	r1, r6
 8019c1c:	4628      	mov	r0, r5
 8019c1e:	47b8      	blx	r7
 8019c20:	3001      	adds	r0, #1
 8019c22:	f43f ae52 	beq.w	80198ca <_printf_float+0xc2>
 8019c26:	f108 0801 	add.w	r8, r8, #1
 8019c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019c2c:	3b01      	subs	r3, #1
 8019c2e:	4543      	cmp	r3, r8
 8019c30:	dcf1      	bgt.n	8019c16 <_printf_float+0x40e>
 8019c32:	464b      	mov	r3, r9
 8019c34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019c38:	e6dc      	b.n	80199f4 <_printf_float+0x1ec>
 8019c3a:	f04f 0800 	mov.w	r8, #0
 8019c3e:	f104 0a1a 	add.w	sl, r4, #26
 8019c42:	e7f2      	b.n	8019c2a <_printf_float+0x422>
 8019c44:	2301      	movs	r3, #1
 8019c46:	4642      	mov	r2, r8
 8019c48:	e7df      	b.n	8019c0a <_printf_float+0x402>
 8019c4a:	2301      	movs	r3, #1
 8019c4c:	464a      	mov	r2, r9
 8019c4e:	4631      	mov	r1, r6
 8019c50:	4628      	mov	r0, r5
 8019c52:	47b8      	blx	r7
 8019c54:	3001      	adds	r0, #1
 8019c56:	f43f ae38 	beq.w	80198ca <_printf_float+0xc2>
 8019c5a:	f108 0801 	add.w	r8, r8, #1
 8019c5e:	68e3      	ldr	r3, [r4, #12]
 8019c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019c62:	1a5b      	subs	r3, r3, r1
 8019c64:	4543      	cmp	r3, r8
 8019c66:	dcf0      	bgt.n	8019c4a <_printf_float+0x442>
 8019c68:	e6fa      	b.n	8019a60 <_printf_float+0x258>
 8019c6a:	f04f 0800 	mov.w	r8, #0
 8019c6e:	f104 0919 	add.w	r9, r4, #25
 8019c72:	e7f4      	b.n	8019c5e <_printf_float+0x456>

08019c74 <_printf_common>:
 8019c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c78:	4616      	mov	r6, r2
 8019c7a:	4699      	mov	r9, r3
 8019c7c:	688a      	ldr	r2, [r1, #8]
 8019c7e:	690b      	ldr	r3, [r1, #16]
 8019c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c84:	4293      	cmp	r3, r2
 8019c86:	bfb8      	it	lt
 8019c88:	4613      	movlt	r3, r2
 8019c8a:	6033      	str	r3, [r6, #0]
 8019c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c90:	4607      	mov	r7, r0
 8019c92:	460c      	mov	r4, r1
 8019c94:	b10a      	cbz	r2, 8019c9a <_printf_common+0x26>
 8019c96:	3301      	adds	r3, #1
 8019c98:	6033      	str	r3, [r6, #0]
 8019c9a:	6823      	ldr	r3, [r4, #0]
 8019c9c:	0699      	lsls	r1, r3, #26
 8019c9e:	bf42      	ittt	mi
 8019ca0:	6833      	ldrmi	r3, [r6, #0]
 8019ca2:	3302      	addmi	r3, #2
 8019ca4:	6033      	strmi	r3, [r6, #0]
 8019ca6:	6825      	ldr	r5, [r4, #0]
 8019ca8:	f015 0506 	ands.w	r5, r5, #6
 8019cac:	d106      	bne.n	8019cbc <_printf_common+0x48>
 8019cae:	f104 0a19 	add.w	sl, r4, #25
 8019cb2:	68e3      	ldr	r3, [r4, #12]
 8019cb4:	6832      	ldr	r2, [r6, #0]
 8019cb6:	1a9b      	subs	r3, r3, r2
 8019cb8:	42ab      	cmp	r3, r5
 8019cba:	dc26      	bgt.n	8019d0a <_printf_common+0x96>
 8019cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019cc0:	1e13      	subs	r3, r2, #0
 8019cc2:	6822      	ldr	r2, [r4, #0]
 8019cc4:	bf18      	it	ne
 8019cc6:	2301      	movne	r3, #1
 8019cc8:	0692      	lsls	r2, r2, #26
 8019cca:	d42b      	bmi.n	8019d24 <_printf_common+0xb0>
 8019ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019cd0:	4649      	mov	r1, r9
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	47c0      	blx	r8
 8019cd6:	3001      	adds	r0, #1
 8019cd8:	d01e      	beq.n	8019d18 <_printf_common+0xa4>
 8019cda:	6823      	ldr	r3, [r4, #0]
 8019cdc:	68e5      	ldr	r5, [r4, #12]
 8019cde:	6832      	ldr	r2, [r6, #0]
 8019ce0:	f003 0306 	and.w	r3, r3, #6
 8019ce4:	2b04      	cmp	r3, #4
 8019ce6:	bf08      	it	eq
 8019ce8:	1aad      	subeq	r5, r5, r2
 8019cea:	68a3      	ldr	r3, [r4, #8]
 8019cec:	6922      	ldr	r2, [r4, #16]
 8019cee:	bf0c      	ite	eq
 8019cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019cf4:	2500      	movne	r5, #0
 8019cf6:	4293      	cmp	r3, r2
 8019cf8:	bfc4      	itt	gt
 8019cfa:	1a9b      	subgt	r3, r3, r2
 8019cfc:	18ed      	addgt	r5, r5, r3
 8019cfe:	2600      	movs	r6, #0
 8019d00:	341a      	adds	r4, #26
 8019d02:	42b5      	cmp	r5, r6
 8019d04:	d11a      	bne.n	8019d3c <_printf_common+0xc8>
 8019d06:	2000      	movs	r0, #0
 8019d08:	e008      	b.n	8019d1c <_printf_common+0xa8>
 8019d0a:	2301      	movs	r3, #1
 8019d0c:	4652      	mov	r2, sl
 8019d0e:	4649      	mov	r1, r9
 8019d10:	4638      	mov	r0, r7
 8019d12:	47c0      	blx	r8
 8019d14:	3001      	adds	r0, #1
 8019d16:	d103      	bne.n	8019d20 <_printf_common+0xac>
 8019d18:	f04f 30ff 	mov.w	r0, #4294967295
 8019d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d20:	3501      	adds	r5, #1
 8019d22:	e7c6      	b.n	8019cb2 <_printf_common+0x3e>
 8019d24:	18e1      	adds	r1, r4, r3
 8019d26:	1c5a      	adds	r2, r3, #1
 8019d28:	2030      	movs	r0, #48	; 0x30
 8019d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019d2e:	4422      	add	r2, r4
 8019d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019d38:	3302      	adds	r3, #2
 8019d3a:	e7c7      	b.n	8019ccc <_printf_common+0x58>
 8019d3c:	2301      	movs	r3, #1
 8019d3e:	4622      	mov	r2, r4
 8019d40:	4649      	mov	r1, r9
 8019d42:	4638      	mov	r0, r7
 8019d44:	47c0      	blx	r8
 8019d46:	3001      	adds	r0, #1
 8019d48:	d0e6      	beq.n	8019d18 <_printf_common+0xa4>
 8019d4a:	3601      	adds	r6, #1
 8019d4c:	e7d9      	b.n	8019d02 <_printf_common+0x8e>
	...

08019d50 <_printf_i>:
 8019d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019d54:	7e0f      	ldrb	r7, [r1, #24]
 8019d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019d58:	2f78      	cmp	r7, #120	; 0x78
 8019d5a:	4691      	mov	r9, r2
 8019d5c:	4680      	mov	r8, r0
 8019d5e:	460c      	mov	r4, r1
 8019d60:	469a      	mov	sl, r3
 8019d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019d66:	d807      	bhi.n	8019d78 <_printf_i+0x28>
 8019d68:	2f62      	cmp	r7, #98	; 0x62
 8019d6a:	d80a      	bhi.n	8019d82 <_printf_i+0x32>
 8019d6c:	2f00      	cmp	r7, #0
 8019d6e:	f000 80d8 	beq.w	8019f22 <_printf_i+0x1d2>
 8019d72:	2f58      	cmp	r7, #88	; 0x58
 8019d74:	f000 80a3 	beq.w	8019ebe <_printf_i+0x16e>
 8019d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d80:	e03a      	b.n	8019df8 <_printf_i+0xa8>
 8019d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d86:	2b15      	cmp	r3, #21
 8019d88:	d8f6      	bhi.n	8019d78 <_printf_i+0x28>
 8019d8a:	a101      	add	r1, pc, #4	; (adr r1, 8019d90 <_printf_i+0x40>)
 8019d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019d90:	08019de9 	.word	0x08019de9
 8019d94:	08019dfd 	.word	0x08019dfd
 8019d98:	08019d79 	.word	0x08019d79
 8019d9c:	08019d79 	.word	0x08019d79
 8019da0:	08019d79 	.word	0x08019d79
 8019da4:	08019d79 	.word	0x08019d79
 8019da8:	08019dfd 	.word	0x08019dfd
 8019dac:	08019d79 	.word	0x08019d79
 8019db0:	08019d79 	.word	0x08019d79
 8019db4:	08019d79 	.word	0x08019d79
 8019db8:	08019d79 	.word	0x08019d79
 8019dbc:	08019f09 	.word	0x08019f09
 8019dc0:	08019e2d 	.word	0x08019e2d
 8019dc4:	08019eeb 	.word	0x08019eeb
 8019dc8:	08019d79 	.word	0x08019d79
 8019dcc:	08019d79 	.word	0x08019d79
 8019dd0:	08019f2b 	.word	0x08019f2b
 8019dd4:	08019d79 	.word	0x08019d79
 8019dd8:	08019e2d 	.word	0x08019e2d
 8019ddc:	08019d79 	.word	0x08019d79
 8019de0:	08019d79 	.word	0x08019d79
 8019de4:	08019ef3 	.word	0x08019ef3
 8019de8:	682b      	ldr	r3, [r5, #0]
 8019dea:	1d1a      	adds	r2, r3, #4
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	602a      	str	r2, [r5, #0]
 8019df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e0a3      	b.n	8019f44 <_printf_i+0x1f4>
 8019dfc:	6820      	ldr	r0, [r4, #0]
 8019dfe:	6829      	ldr	r1, [r5, #0]
 8019e00:	0606      	lsls	r6, r0, #24
 8019e02:	f101 0304 	add.w	r3, r1, #4
 8019e06:	d50a      	bpl.n	8019e1e <_printf_i+0xce>
 8019e08:	680e      	ldr	r6, [r1, #0]
 8019e0a:	602b      	str	r3, [r5, #0]
 8019e0c:	2e00      	cmp	r6, #0
 8019e0e:	da03      	bge.n	8019e18 <_printf_i+0xc8>
 8019e10:	232d      	movs	r3, #45	; 0x2d
 8019e12:	4276      	negs	r6, r6
 8019e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019e18:	485e      	ldr	r0, [pc, #376]	; (8019f94 <_printf_i+0x244>)
 8019e1a:	230a      	movs	r3, #10
 8019e1c:	e019      	b.n	8019e52 <_printf_i+0x102>
 8019e1e:	680e      	ldr	r6, [r1, #0]
 8019e20:	602b      	str	r3, [r5, #0]
 8019e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019e26:	bf18      	it	ne
 8019e28:	b236      	sxthne	r6, r6
 8019e2a:	e7ef      	b.n	8019e0c <_printf_i+0xbc>
 8019e2c:	682b      	ldr	r3, [r5, #0]
 8019e2e:	6820      	ldr	r0, [r4, #0]
 8019e30:	1d19      	adds	r1, r3, #4
 8019e32:	6029      	str	r1, [r5, #0]
 8019e34:	0601      	lsls	r1, r0, #24
 8019e36:	d501      	bpl.n	8019e3c <_printf_i+0xec>
 8019e38:	681e      	ldr	r6, [r3, #0]
 8019e3a:	e002      	b.n	8019e42 <_printf_i+0xf2>
 8019e3c:	0646      	lsls	r6, r0, #25
 8019e3e:	d5fb      	bpl.n	8019e38 <_printf_i+0xe8>
 8019e40:	881e      	ldrh	r6, [r3, #0]
 8019e42:	4854      	ldr	r0, [pc, #336]	; (8019f94 <_printf_i+0x244>)
 8019e44:	2f6f      	cmp	r7, #111	; 0x6f
 8019e46:	bf0c      	ite	eq
 8019e48:	2308      	moveq	r3, #8
 8019e4a:	230a      	movne	r3, #10
 8019e4c:	2100      	movs	r1, #0
 8019e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019e52:	6865      	ldr	r5, [r4, #4]
 8019e54:	60a5      	str	r5, [r4, #8]
 8019e56:	2d00      	cmp	r5, #0
 8019e58:	bfa2      	ittt	ge
 8019e5a:	6821      	ldrge	r1, [r4, #0]
 8019e5c:	f021 0104 	bicge.w	r1, r1, #4
 8019e60:	6021      	strge	r1, [r4, #0]
 8019e62:	b90e      	cbnz	r6, 8019e68 <_printf_i+0x118>
 8019e64:	2d00      	cmp	r5, #0
 8019e66:	d04d      	beq.n	8019f04 <_printf_i+0x1b4>
 8019e68:	4615      	mov	r5, r2
 8019e6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8019e6e:	fb03 6711 	mls	r7, r3, r1, r6
 8019e72:	5dc7      	ldrb	r7, [r0, r7]
 8019e74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019e78:	4637      	mov	r7, r6
 8019e7a:	42bb      	cmp	r3, r7
 8019e7c:	460e      	mov	r6, r1
 8019e7e:	d9f4      	bls.n	8019e6a <_printf_i+0x11a>
 8019e80:	2b08      	cmp	r3, #8
 8019e82:	d10b      	bne.n	8019e9c <_printf_i+0x14c>
 8019e84:	6823      	ldr	r3, [r4, #0]
 8019e86:	07de      	lsls	r6, r3, #31
 8019e88:	d508      	bpl.n	8019e9c <_printf_i+0x14c>
 8019e8a:	6923      	ldr	r3, [r4, #16]
 8019e8c:	6861      	ldr	r1, [r4, #4]
 8019e8e:	4299      	cmp	r1, r3
 8019e90:	bfde      	ittt	le
 8019e92:	2330      	movle	r3, #48	; 0x30
 8019e94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019e98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019e9c:	1b52      	subs	r2, r2, r5
 8019e9e:	6122      	str	r2, [r4, #16]
 8019ea0:	f8cd a000 	str.w	sl, [sp]
 8019ea4:	464b      	mov	r3, r9
 8019ea6:	aa03      	add	r2, sp, #12
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	4640      	mov	r0, r8
 8019eac:	f7ff fee2 	bl	8019c74 <_printf_common>
 8019eb0:	3001      	adds	r0, #1
 8019eb2:	d14c      	bne.n	8019f4e <_printf_i+0x1fe>
 8019eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8019eb8:	b004      	add	sp, #16
 8019eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ebe:	4835      	ldr	r0, [pc, #212]	; (8019f94 <_printf_i+0x244>)
 8019ec0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019ec4:	6829      	ldr	r1, [r5, #0]
 8019ec6:	6823      	ldr	r3, [r4, #0]
 8019ec8:	f851 6b04 	ldr.w	r6, [r1], #4
 8019ecc:	6029      	str	r1, [r5, #0]
 8019ece:	061d      	lsls	r5, r3, #24
 8019ed0:	d514      	bpl.n	8019efc <_printf_i+0x1ac>
 8019ed2:	07df      	lsls	r7, r3, #31
 8019ed4:	bf44      	itt	mi
 8019ed6:	f043 0320 	orrmi.w	r3, r3, #32
 8019eda:	6023      	strmi	r3, [r4, #0]
 8019edc:	b91e      	cbnz	r6, 8019ee6 <_printf_i+0x196>
 8019ede:	6823      	ldr	r3, [r4, #0]
 8019ee0:	f023 0320 	bic.w	r3, r3, #32
 8019ee4:	6023      	str	r3, [r4, #0]
 8019ee6:	2310      	movs	r3, #16
 8019ee8:	e7b0      	b.n	8019e4c <_printf_i+0xfc>
 8019eea:	6823      	ldr	r3, [r4, #0]
 8019eec:	f043 0320 	orr.w	r3, r3, #32
 8019ef0:	6023      	str	r3, [r4, #0]
 8019ef2:	2378      	movs	r3, #120	; 0x78
 8019ef4:	4828      	ldr	r0, [pc, #160]	; (8019f98 <_printf_i+0x248>)
 8019ef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019efa:	e7e3      	b.n	8019ec4 <_printf_i+0x174>
 8019efc:	0659      	lsls	r1, r3, #25
 8019efe:	bf48      	it	mi
 8019f00:	b2b6      	uxthmi	r6, r6
 8019f02:	e7e6      	b.n	8019ed2 <_printf_i+0x182>
 8019f04:	4615      	mov	r5, r2
 8019f06:	e7bb      	b.n	8019e80 <_printf_i+0x130>
 8019f08:	682b      	ldr	r3, [r5, #0]
 8019f0a:	6826      	ldr	r6, [r4, #0]
 8019f0c:	6961      	ldr	r1, [r4, #20]
 8019f0e:	1d18      	adds	r0, r3, #4
 8019f10:	6028      	str	r0, [r5, #0]
 8019f12:	0635      	lsls	r5, r6, #24
 8019f14:	681b      	ldr	r3, [r3, #0]
 8019f16:	d501      	bpl.n	8019f1c <_printf_i+0x1cc>
 8019f18:	6019      	str	r1, [r3, #0]
 8019f1a:	e002      	b.n	8019f22 <_printf_i+0x1d2>
 8019f1c:	0670      	lsls	r0, r6, #25
 8019f1e:	d5fb      	bpl.n	8019f18 <_printf_i+0x1c8>
 8019f20:	8019      	strh	r1, [r3, #0]
 8019f22:	2300      	movs	r3, #0
 8019f24:	6123      	str	r3, [r4, #16]
 8019f26:	4615      	mov	r5, r2
 8019f28:	e7ba      	b.n	8019ea0 <_printf_i+0x150>
 8019f2a:	682b      	ldr	r3, [r5, #0]
 8019f2c:	1d1a      	adds	r2, r3, #4
 8019f2e:	602a      	str	r2, [r5, #0]
 8019f30:	681d      	ldr	r5, [r3, #0]
 8019f32:	6862      	ldr	r2, [r4, #4]
 8019f34:	2100      	movs	r1, #0
 8019f36:	4628      	mov	r0, r5
 8019f38:	f7fe fc5a 	bl	80187f0 <memchr>
 8019f3c:	b108      	cbz	r0, 8019f42 <_printf_i+0x1f2>
 8019f3e:	1b40      	subs	r0, r0, r5
 8019f40:	6060      	str	r0, [r4, #4]
 8019f42:	6863      	ldr	r3, [r4, #4]
 8019f44:	6123      	str	r3, [r4, #16]
 8019f46:	2300      	movs	r3, #0
 8019f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019f4c:	e7a8      	b.n	8019ea0 <_printf_i+0x150>
 8019f4e:	6923      	ldr	r3, [r4, #16]
 8019f50:	462a      	mov	r2, r5
 8019f52:	4649      	mov	r1, r9
 8019f54:	4640      	mov	r0, r8
 8019f56:	47d0      	blx	sl
 8019f58:	3001      	adds	r0, #1
 8019f5a:	d0ab      	beq.n	8019eb4 <_printf_i+0x164>
 8019f5c:	6823      	ldr	r3, [r4, #0]
 8019f5e:	079b      	lsls	r3, r3, #30
 8019f60:	d413      	bmi.n	8019f8a <_printf_i+0x23a>
 8019f62:	68e0      	ldr	r0, [r4, #12]
 8019f64:	9b03      	ldr	r3, [sp, #12]
 8019f66:	4298      	cmp	r0, r3
 8019f68:	bfb8      	it	lt
 8019f6a:	4618      	movlt	r0, r3
 8019f6c:	e7a4      	b.n	8019eb8 <_printf_i+0x168>
 8019f6e:	2301      	movs	r3, #1
 8019f70:	4632      	mov	r2, r6
 8019f72:	4649      	mov	r1, r9
 8019f74:	4640      	mov	r0, r8
 8019f76:	47d0      	blx	sl
 8019f78:	3001      	adds	r0, #1
 8019f7a:	d09b      	beq.n	8019eb4 <_printf_i+0x164>
 8019f7c:	3501      	adds	r5, #1
 8019f7e:	68e3      	ldr	r3, [r4, #12]
 8019f80:	9903      	ldr	r1, [sp, #12]
 8019f82:	1a5b      	subs	r3, r3, r1
 8019f84:	42ab      	cmp	r3, r5
 8019f86:	dcf2      	bgt.n	8019f6e <_printf_i+0x21e>
 8019f88:	e7eb      	b.n	8019f62 <_printf_i+0x212>
 8019f8a:	2500      	movs	r5, #0
 8019f8c:	f104 0619 	add.w	r6, r4, #25
 8019f90:	e7f5      	b.n	8019f7e <_printf_i+0x22e>
 8019f92:	bf00      	nop
 8019f94:	08051f3e 	.word	0x08051f3e
 8019f98:	08051f4f 	.word	0x08051f4f

08019f9c <_scanf_float>:
 8019f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fa0:	b087      	sub	sp, #28
 8019fa2:	4617      	mov	r7, r2
 8019fa4:	9303      	str	r3, [sp, #12]
 8019fa6:	688b      	ldr	r3, [r1, #8]
 8019fa8:	1e5a      	subs	r2, r3, #1
 8019faa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019fae:	bf83      	ittte	hi
 8019fb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019fb4:	195b      	addhi	r3, r3, r5
 8019fb6:	9302      	strhi	r3, [sp, #8]
 8019fb8:	2300      	movls	r3, #0
 8019fba:	bf86      	itte	hi
 8019fbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019fc0:	608b      	strhi	r3, [r1, #8]
 8019fc2:	9302      	strls	r3, [sp, #8]
 8019fc4:	680b      	ldr	r3, [r1, #0]
 8019fc6:	468b      	mov	fp, r1
 8019fc8:	2500      	movs	r5, #0
 8019fca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8019fce:	f84b 3b1c 	str.w	r3, [fp], #28
 8019fd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019fd6:	4680      	mov	r8, r0
 8019fd8:	460c      	mov	r4, r1
 8019fda:	465e      	mov	r6, fp
 8019fdc:	46aa      	mov	sl, r5
 8019fde:	46a9      	mov	r9, r5
 8019fe0:	9501      	str	r5, [sp, #4]
 8019fe2:	68a2      	ldr	r2, [r4, #8]
 8019fe4:	b152      	cbz	r2, 8019ffc <_scanf_float+0x60>
 8019fe6:	683b      	ldr	r3, [r7, #0]
 8019fe8:	781b      	ldrb	r3, [r3, #0]
 8019fea:	2b4e      	cmp	r3, #78	; 0x4e
 8019fec:	d864      	bhi.n	801a0b8 <_scanf_float+0x11c>
 8019fee:	2b40      	cmp	r3, #64	; 0x40
 8019ff0:	d83c      	bhi.n	801a06c <_scanf_float+0xd0>
 8019ff2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8019ff6:	b2c8      	uxtb	r0, r1
 8019ff8:	280e      	cmp	r0, #14
 8019ffa:	d93a      	bls.n	801a072 <_scanf_float+0xd6>
 8019ffc:	f1b9 0f00 	cmp.w	r9, #0
 801a000:	d003      	beq.n	801a00a <_scanf_float+0x6e>
 801a002:	6823      	ldr	r3, [r4, #0]
 801a004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a008:	6023      	str	r3, [r4, #0]
 801a00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a00e:	f1ba 0f01 	cmp.w	sl, #1
 801a012:	f200 8113 	bhi.w	801a23c <_scanf_float+0x2a0>
 801a016:	455e      	cmp	r6, fp
 801a018:	f200 8105 	bhi.w	801a226 <_scanf_float+0x28a>
 801a01c:	2501      	movs	r5, #1
 801a01e:	4628      	mov	r0, r5
 801a020:	b007      	add	sp, #28
 801a022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a026:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a02a:	2a0d      	cmp	r2, #13
 801a02c:	d8e6      	bhi.n	8019ffc <_scanf_float+0x60>
 801a02e:	a101      	add	r1, pc, #4	; (adr r1, 801a034 <_scanf_float+0x98>)
 801a030:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a034:	0801a173 	.word	0x0801a173
 801a038:	08019ffd 	.word	0x08019ffd
 801a03c:	08019ffd 	.word	0x08019ffd
 801a040:	08019ffd 	.word	0x08019ffd
 801a044:	0801a1d3 	.word	0x0801a1d3
 801a048:	0801a1ab 	.word	0x0801a1ab
 801a04c:	08019ffd 	.word	0x08019ffd
 801a050:	08019ffd 	.word	0x08019ffd
 801a054:	0801a181 	.word	0x0801a181
 801a058:	08019ffd 	.word	0x08019ffd
 801a05c:	08019ffd 	.word	0x08019ffd
 801a060:	08019ffd 	.word	0x08019ffd
 801a064:	08019ffd 	.word	0x08019ffd
 801a068:	0801a139 	.word	0x0801a139
 801a06c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a070:	e7db      	b.n	801a02a <_scanf_float+0x8e>
 801a072:	290e      	cmp	r1, #14
 801a074:	d8c2      	bhi.n	8019ffc <_scanf_float+0x60>
 801a076:	a001      	add	r0, pc, #4	; (adr r0, 801a07c <_scanf_float+0xe0>)
 801a078:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a07c:	0801a12b 	.word	0x0801a12b
 801a080:	08019ffd 	.word	0x08019ffd
 801a084:	0801a12b 	.word	0x0801a12b
 801a088:	0801a1bf 	.word	0x0801a1bf
 801a08c:	08019ffd 	.word	0x08019ffd
 801a090:	0801a0d9 	.word	0x0801a0d9
 801a094:	0801a115 	.word	0x0801a115
 801a098:	0801a115 	.word	0x0801a115
 801a09c:	0801a115 	.word	0x0801a115
 801a0a0:	0801a115 	.word	0x0801a115
 801a0a4:	0801a115 	.word	0x0801a115
 801a0a8:	0801a115 	.word	0x0801a115
 801a0ac:	0801a115 	.word	0x0801a115
 801a0b0:	0801a115 	.word	0x0801a115
 801a0b4:	0801a115 	.word	0x0801a115
 801a0b8:	2b6e      	cmp	r3, #110	; 0x6e
 801a0ba:	d809      	bhi.n	801a0d0 <_scanf_float+0x134>
 801a0bc:	2b60      	cmp	r3, #96	; 0x60
 801a0be:	d8b2      	bhi.n	801a026 <_scanf_float+0x8a>
 801a0c0:	2b54      	cmp	r3, #84	; 0x54
 801a0c2:	d077      	beq.n	801a1b4 <_scanf_float+0x218>
 801a0c4:	2b59      	cmp	r3, #89	; 0x59
 801a0c6:	d199      	bne.n	8019ffc <_scanf_float+0x60>
 801a0c8:	2d07      	cmp	r5, #7
 801a0ca:	d197      	bne.n	8019ffc <_scanf_float+0x60>
 801a0cc:	2508      	movs	r5, #8
 801a0ce:	e029      	b.n	801a124 <_scanf_float+0x188>
 801a0d0:	2b74      	cmp	r3, #116	; 0x74
 801a0d2:	d06f      	beq.n	801a1b4 <_scanf_float+0x218>
 801a0d4:	2b79      	cmp	r3, #121	; 0x79
 801a0d6:	e7f6      	b.n	801a0c6 <_scanf_float+0x12a>
 801a0d8:	6821      	ldr	r1, [r4, #0]
 801a0da:	05c8      	lsls	r0, r1, #23
 801a0dc:	d51a      	bpl.n	801a114 <_scanf_float+0x178>
 801a0de:	9b02      	ldr	r3, [sp, #8]
 801a0e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a0e4:	6021      	str	r1, [r4, #0]
 801a0e6:	f109 0901 	add.w	r9, r9, #1
 801a0ea:	b11b      	cbz	r3, 801a0f4 <_scanf_float+0x158>
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	3201      	adds	r2, #1
 801a0f0:	9302      	str	r3, [sp, #8]
 801a0f2:	60a2      	str	r2, [r4, #8]
 801a0f4:	68a3      	ldr	r3, [r4, #8]
 801a0f6:	3b01      	subs	r3, #1
 801a0f8:	60a3      	str	r3, [r4, #8]
 801a0fa:	6923      	ldr	r3, [r4, #16]
 801a0fc:	3301      	adds	r3, #1
 801a0fe:	6123      	str	r3, [r4, #16]
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	3b01      	subs	r3, #1
 801a104:	2b00      	cmp	r3, #0
 801a106:	607b      	str	r3, [r7, #4]
 801a108:	f340 8084 	ble.w	801a214 <_scanf_float+0x278>
 801a10c:	683b      	ldr	r3, [r7, #0]
 801a10e:	3301      	adds	r3, #1
 801a110:	603b      	str	r3, [r7, #0]
 801a112:	e766      	b.n	8019fe2 <_scanf_float+0x46>
 801a114:	eb1a 0f05 	cmn.w	sl, r5
 801a118:	f47f af70 	bne.w	8019ffc <_scanf_float+0x60>
 801a11c:	6822      	ldr	r2, [r4, #0]
 801a11e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a122:	6022      	str	r2, [r4, #0]
 801a124:	f806 3b01 	strb.w	r3, [r6], #1
 801a128:	e7e4      	b.n	801a0f4 <_scanf_float+0x158>
 801a12a:	6822      	ldr	r2, [r4, #0]
 801a12c:	0610      	lsls	r0, r2, #24
 801a12e:	f57f af65 	bpl.w	8019ffc <_scanf_float+0x60>
 801a132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a136:	e7f4      	b.n	801a122 <_scanf_float+0x186>
 801a138:	f1ba 0f00 	cmp.w	sl, #0
 801a13c:	d10e      	bne.n	801a15c <_scanf_float+0x1c0>
 801a13e:	f1b9 0f00 	cmp.w	r9, #0
 801a142:	d10e      	bne.n	801a162 <_scanf_float+0x1c6>
 801a144:	6822      	ldr	r2, [r4, #0]
 801a146:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a14a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a14e:	d108      	bne.n	801a162 <_scanf_float+0x1c6>
 801a150:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a154:	6022      	str	r2, [r4, #0]
 801a156:	f04f 0a01 	mov.w	sl, #1
 801a15a:	e7e3      	b.n	801a124 <_scanf_float+0x188>
 801a15c:	f1ba 0f02 	cmp.w	sl, #2
 801a160:	d055      	beq.n	801a20e <_scanf_float+0x272>
 801a162:	2d01      	cmp	r5, #1
 801a164:	d002      	beq.n	801a16c <_scanf_float+0x1d0>
 801a166:	2d04      	cmp	r5, #4
 801a168:	f47f af48 	bne.w	8019ffc <_scanf_float+0x60>
 801a16c:	3501      	adds	r5, #1
 801a16e:	b2ed      	uxtb	r5, r5
 801a170:	e7d8      	b.n	801a124 <_scanf_float+0x188>
 801a172:	f1ba 0f01 	cmp.w	sl, #1
 801a176:	f47f af41 	bne.w	8019ffc <_scanf_float+0x60>
 801a17a:	f04f 0a02 	mov.w	sl, #2
 801a17e:	e7d1      	b.n	801a124 <_scanf_float+0x188>
 801a180:	b97d      	cbnz	r5, 801a1a2 <_scanf_float+0x206>
 801a182:	f1b9 0f00 	cmp.w	r9, #0
 801a186:	f47f af3c 	bne.w	801a002 <_scanf_float+0x66>
 801a18a:	6822      	ldr	r2, [r4, #0]
 801a18c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a190:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a194:	f47f af39 	bne.w	801a00a <_scanf_float+0x6e>
 801a198:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a19c:	6022      	str	r2, [r4, #0]
 801a19e:	2501      	movs	r5, #1
 801a1a0:	e7c0      	b.n	801a124 <_scanf_float+0x188>
 801a1a2:	2d03      	cmp	r5, #3
 801a1a4:	d0e2      	beq.n	801a16c <_scanf_float+0x1d0>
 801a1a6:	2d05      	cmp	r5, #5
 801a1a8:	e7de      	b.n	801a168 <_scanf_float+0x1cc>
 801a1aa:	2d02      	cmp	r5, #2
 801a1ac:	f47f af26 	bne.w	8019ffc <_scanf_float+0x60>
 801a1b0:	2503      	movs	r5, #3
 801a1b2:	e7b7      	b.n	801a124 <_scanf_float+0x188>
 801a1b4:	2d06      	cmp	r5, #6
 801a1b6:	f47f af21 	bne.w	8019ffc <_scanf_float+0x60>
 801a1ba:	2507      	movs	r5, #7
 801a1bc:	e7b2      	b.n	801a124 <_scanf_float+0x188>
 801a1be:	6822      	ldr	r2, [r4, #0]
 801a1c0:	0591      	lsls	r1, r2, #22
 801a1c2:	f57f af1b 	bpl.w	8019ffc <_scanf_float+0x60>
 801a1c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a1ca:	6022      	str	r2, [r4, #0]
 801a1cc:	f8cd 9004 	str.w	r9, [sp, #4]
 801a1d0:	e7a8      	b.n	801a124 <_scanf_float+0x188>
 801a1d2:	6822      	ldr	r2, [r4, #0]
 801a1d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a1d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a1dc:	d006      	beq.n	801a1ec <_scanf_float+0x250>
 801a1de:	0550      	lsls	r0, r2, #21
 801a1e0:	f57f af0c 	bpl.w	8019ffc <_scanf_float+0x60>
 801a1e4:	f1b9 0f00 	cmp.w	r9, #0
 801a1e8:	f43f af0f 	beq.w	801a00a <_scanf_float+0x6e>
 801a1ec:	0591      	lsls	r1, r2, #22
 801a1ee:	bf58      	it	pl
 801a1f0:	9901      	ldrpl	r1, [sp, #4]
 801a1f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a1f6:	bf58      	it	pl
 801a1f8:	eba9 0101 	subpl.w	r1, r9, r1
 801a1fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a200:	bf58      	it	pl
 801a202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a206:	6022      	str	r2, [r4, #0]
 801a208:	f04f 0900 	mov.w	r9, #0
 801a20c:	e78a      	b.n	801a124 <_scanf_float+0x188>
 801a20e:	f04f 0a03 	mov.w	sl, #3
 801a212:	e787      	b.n	801a124 <_scanf_float+0x188>
 801a214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a218:	4639      	mov	r1, r7
 801a21a:	4640      	mov	r0, r8
 801a21c:	4798      	blx	r3
 801a21e:	2800      	cmp	r0, #0
 801a220:	f43f aedf 	beq.w	8019fe2 <_scanf_float+0x46>
 801a224:	e6ea      	b.n	8019ffc <_scanf_float+0x60>
 801a226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a22a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a22e:	463a      	mov	r2, r7
 801a230:	4640      	mov	r0, r8
 801a232:	4798      	blx	r3
 801a234:	6923      	ldr	r3, [r4, #16]
 801a236:	3b01      	subs	r3, #1
 801a238:	6123      	str	r3, [r4, #16]
 801a23a:	e6ec      	b.n	801a016 <_scanf_float+0x7a>
 801a23c:	1e6b      	subs	r3, r5, #1
 801a23e:	2b06      	cmp	r3, #6
 801a240:	d825      	bhi.n	801a28e <_scanf_float+0x2f2>
 801a242:	2d02      	cmp	r5, #2
 801a244:	d836      	bhi.n	801a2b4 <_scanf_float+0x318>
 801a246:	455e      	cmp	r6, fp
 801a248:	f67f aee8 	bls.w	801a01c <_scanf_float+0x80>
 801a24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a250:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a254:	463a      	mov	r2, r7
 801a256:	4640      	mov	r0, r8
 801a258:	4798      	blx	r3
 801a25a:	6923      	ldr	r3, [r4, #16]
 801a25c:	3b01      	subs	r3, #1
 801a25e:	6123      	str	r3, [r4, #16]
 801a260:	e7f1      	b.n	801a246 <_scanf_float+0x2aa>
 801a262:	9802      	ldr	r0, [sp, #8]
 801a264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a268:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a26c:	9002      	str	r0, [sp, #8]
 801a26e:	463a      	mov	r2, r7
 801a270:	4640      	mov	r0, r8
 801a272:	4798      	blx	r3
 801a274:	6923      	ldr	r3, [r4, #16]
 801a276:	3b01      	subs	r3, #1
 801a278:	6123      	str	r3, [r4, #16]
 801a27a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a27e:	fa5f fa8a 	uxtb.w	sl, sl
 801a282:	f1ba 0f02 	cmp.w	sl, #2
 801a286:	d1ec      	bne.n	801a262 <_scanf_float+0x2c6>
 801a288:	3d03      	subs	r5, #3
 801a28a:	b2ed      	uxtb	r5, r5
 801a28c:	1b76      	subs	r6, r6, r5
 801a28e:	6823      	ldr	r3, [r4, #0]
 801a290:	05da      	lsls	r2, r3, #23
 801a292:	d52f      	bpl.n	801a2f4 <_scanf_float+0x358>
 801a294:	055b      	lsls	r3, r3, #21
 801a296:	d510      	bpl.n	801a2ba <_scanf_float+0x31e>
 801a298:	455e      	cmp	r6, fp
 801a29a:	f67f aebf 	bls.w	801a01c <_scanf_float+0x80>
 801a29e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a2a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a2a6:	463a      	mov	r2, r7
 801a2a8:	4640      	mov	r0, r8
 801a2aa:	4798      	blx	r3
 801a2ac:	6923      	ldr	r3, [r4, #16]
 801a2ae:	3b01      	subs	r3, #1
 801a2b0:	6123      	str	r3, [r4, #16]
 801a2b2:	e7f1      	b.n	801a298 <_scanf_float+0x2fc>
 801a2b4:	46aa      	mov	sl, r5
 801a2b6:	9602      	str	r6, [sp, #8]
 801a2b8:	e7df      	b.n	801a27a <_scanf_float+0x2de>
 801a2ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a2be:	6923      	ldr	r3, [r4, #16]
 801a2c0:	2965      	cmp	r1, #101	; 0x65
 801a2c2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a2c6:	f106 35ff 	add.w	r5, r6, #4294967295
 801a2ca:	6123      	str	r3, [r4, #16]
 801a2cc:	d00c      	beq.n	801a2e8 <_scanf_float+0x34c>
 801a2ce:	2945      	cmp	r1, #69	; 0x45
 801a2d0:	d00a      	beq.n	801a2e8 <_scanf_float+0x34c>
 801a2d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a2d6:	463a      	mov	r2, r7
 801a2d8:	4640      	mov	r0, r8
 801a2da:	4798      	blx	r3
 801a2dc:	6923      	ldr	r3, [r4, #16]
 801a2de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a2e2:	3b01      	subs	r3, #1
 801a2e4:	1eb5      	subs	r5, r6, #2
 801a2e6:	6123      	str	r3, [r4, #16]
 801a2e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a2ec:	463a      	mov	r2, r7
 801a2ee:	4640      	mov	r0, r8
 801a2f0:	4798      	blx	r3
 801a2f2:	462e      	mov	r6, r5
 801a2f4:	6825      	ldr	r5, [r4, #0]
 801a2f6:	f015 0510 	ands.w	r5, r5, #16
 801a2fa:	d159      	bne.n	801a3b0 <_scanf_float+0x414>
 801a2fc:	7035      	strb	r5, [r6, #0]
 801a2fe:	6823      	ldr	r3, [r4, #0]
 801a300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a308:	d11b      	bne.n	801a342 <_scanf_float+0x3a6>
 801a30a:	9b01      	ldr	r3, [sp, #4]
 801a30c:	454b      	cmp	r3, r9
 801a30e:	eba3 0209 	sub.w	r2, r3, r9
 801a312:	d123      	bne.n	801a35c <_scanf_float+0x3c0>
 801a314:	2200      	movs	r2, #0
 801a316:	4659      	mov	r1, fp
 801a318:	4640      	mov	r0, r8
 801a31a:	f000 fe97 	bl	801b04c <_strtod_r>
 801a31e:	6822      	ldr	r2, [r4, #0]
 801a320:	9b03      	ldr	r3, [sp, #12]
 801a322:	f012 0f02 	tst.w	r2, #2
 801a326:	ec57 6b10 	vmov	r6, r7, d0
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	d021      	beq.n	801a372 <_scanf_float+0x3d6>
 801a32e:	9903      	ldr	r1, [sp, #12]
 801a330:	1d1a      	adds	r2, r3, #4
 801a332:	600a      	str	r2, [r1, #0]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	e9c3 6700 	strd	r6, r7, [r3]
 801a33a:	68e3      	ldr	r3, [r4, #12]
 801a33c:	3301      	adds	r3, #1
 801a33e:	60e3      	str	r3, [r4, #12]
 801a340:	e66d      	b.n	801a01e <_scanf_float+0x82>
 801a342:	9b04      	ldr	r3, [sp, #16]
 801a344:	2b00      	cmp	r3, #0
 801a346:	d0e5      	beq.n	801a314 <_scanf_float+0x378>
 801a348:	9905      	ldr	r1, [sp, #20]
 801a34a:	230a      	movs	r3, #10
 801a34c:	462a      	mov	r2, r5
 801a34e:	3101      	adds	r1, #1
 801a350:	4640      	mov	r0, r8
 801a352:	f000 ff03 	bl	801b15c <_strtol_r>
 801a356:	9b04      	ldr	r3, [sp, #16]
 801a358:	9e05      	ldr	r6, [sp, #20]
 801a35a:	1ac2      	subs	r2, r0, r3
 801a35c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a360:	429e      	cmp	r6, r3
 801a362:	bf28      	it	cs
 801a364:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a368:	4912      	ldr	r1, [pc, #72]	; (801a3b4 <_scanf_float+0x418>)
 801a36a:	4630      	mov	r0, r6
 801a36c:	f000 f82c 	bl	801a3c8 <siprintf>
 801a370:	e7d0      	b.n	801a314 <_scanf_float+0x378>
 801a372:	9903      	ldr	r1, [sp, #12]
 801a374:	f012 0f04 	tst.w	r2, #4
 801a378:	f103 0204 	add.w	r2, r3, #4
 801a37c:	600a      	str	r2, [r1, #0]
 801a37e:	d1d9      	bne.n	801a334 <_scanf_float+0x398>
 801a380:	f8d3 8000 	ldr.w	r8, [r3]
 801a384:	ee10 2a10 	vmov	r2, s0
 801a388:	ee10 0a10 	vmov	r0, s0
 801a38c:	463b      	mov	r3, r7
 801a38e:	4639      	mov	r1, r7
 801a390:	f7fe fed4 	bl	801913c <__aeabi_dcmpun>
 801a394:	b128      	cbz	r0, 801a3a2 <_scanf_float+0x406>
 801a396:	4808      	ldr	r0, [pc, #32]	; (801a3b8 <_scanf_float+0x41c>)
 801a398:	f000 f810 	bl	801a3bc <nanf>
 801a39c:	ed88 0a00 	vstr	s0, [r8]
 801a3a0:	e7cb      	b.n	801a33a <_scanf_float+0x39e>
 801a3a2:	4630      	mov	r0, r6
 801a3a4:	4639      	mov	r1, r7
 801a3a6:	f7fe ff27 	bl	80191f8 <__aeabi_d2f>
 801a3aa:	f8c8 0000 	str.w	r0, [r8]
 801a3ae:	e7c4      	b.n	801a33a <_scanf_float+0x39e>
 801a3b0:	2500      	movs	r5, #0
 801a3b2:	e634      	b.n	801a01e <_scanf_float+0x82>
 801a3b4:	08051f60 	.word	0x08051f60
 801a3b8:	08052368 	.word	0x08052368

0801a3bc <nanf>:
 801a3bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a3c4 <nanf+0x8>
 801a3c0:	4770      	bx	lr
 801a3c2:	bf00      	nop
 801a3c4:	7fc00000 	.word	0x7fc00000

0801a3c8 <siprintf>:
 801a3c8:	b40e      	push	{r1, r2, r3}
 801a3ca:	b500      	push	{lr}
 801a3cc:	b09c      	sub	sp, #112	; 0x70
 801a3ce:	ab1d      	add	r3, sp, #116	; 0x74
 801a3d0:	9002      	str	r0, [sp, #8]
 801a3d2:	9006      	str	r0, [sp, #24]
 801a3d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a3d8:	4809      	ldr	r0, [pc, #36]	; (801a400 <siprintf+0x38>)
 801a3da:	9107      	str	r1, [sp, #28]
 801a3dc:	9104      	str	r1, [sp, #16]
 801a3de:	4909      	ldr	r1, [pc, #36]	; (801a404 <siprintf+0x3c>)
 801a3e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a3e4:	9105      	str	r1, [sp, #20]
 801a3e6:	6800      	ldr	r0, [r0, #0]
 801a3e8:	9301      	str	r3, [sp, #4]
 801a3ea:	a902      	add	r1, sp, #8
 801a3ec:	f002 feee 	bl	801d1cc <_svfiprintf_r>
 801a3f0:	9b02      	ldr	r3, [sp, #8]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	701a      	strb	r2, [r3, #0]
 801a3f6:	b01c      	add	sp, #112	; 0x70
 801a3f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3fc:	b003      	add	sp, #12
 801a3fe:	4770      	bx	lr
 801a400:	20000064 	.word	0x20000064
 801a404:	ffff0208 	.word	0xffff0208

0801a408 <sulp>:
 801a408:	b570      	push	{r4, r5, r6, lr}
 801a40a:	4604      	mov	r4, r0
 801a40c:	460d      	mov	r5, r1
 801a40e:	ec45 4b10 	vmov	d0, r4, r5
 801a412:	4616      	mov	r6, r2
 801a414:	f002 fc38 	bl	801cc88 <__ulp>
 801a418:	ec51 0b10 	vmov	r0, r1, d0
 801a41c:	b17e      	cbz	r6, 801a43e <sulp+0x36>
 801a41e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a426:	2b00      	cmp	r3, #0
 801a428:	dd09      	ble.n	801a43e <sulp+0x36>
 801a42a:	051b      	lsls	r3, r3, #20
 801a42c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a430:	2400      	movs	r4, #0
 801a432:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a436:	4622      	mov	r2, r4
 801a438:	462b      	mov	r3, r5
 801a43a:	f7fe fbe5 	bl	8018c08 <__aeabi_dmul>
 801a43e:	bd70      	pop	{r4, r5, r6, pc}

0801a440 <_strtod_l>:
 801a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a444:	ed2d 8b02 	vpush	{d8}
 801a448:	b09d      	sub	sp, #116	; 0x74
 801a44a:	461f      	mov	r7, r3
 801a44c:	2300      	movs	r3, #0
 801a44e:	9318      	str	r3, [sp, #96]	; 0x60
 801a450:	4ba2      	ldr	r3, [pc, #648]	; (801a6dc <_strtod_l+0x29c>)
 801a452:	9213      	str	r2, [sp, #76]	; 0x4c
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	9305      	str	r3, [sp, #20]
 801a458:	4604      	mov	r4, r0
 801a45a:	4618      	mov	r0, r3
 801a45c:	4688      	mov	r8, r1
 801a45e:	f7fe f9bd 	bl	80187dc <strlen>
 801a462:	f04f 0a00 	mov.w	sl, #0
 801a466:	4605      	mov	r5, r0
 801a468:	f04f 0b00 	mov.w	fp, #0
 801a46c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a472:	781a      	ldrb	r2, [r3, #0]
 801a474:	2a2b      	cmp	r2, #43	; 0x2b
 801a476:	d04e      	beq.n	801a516 <_strtod_l+0xd6>
 801a478:	d83b      	bhi.n	801a4f2 <_strtod_l+0xb2>
 801a47a:	2a0d      	cmp	r2, #13
 801a47c:	d834      	bhi.n	801a4e8 <_strtod_l+0xa8>
 801a47e:	2a08      	cmp	r2, #8
 801a480:	d834      	bhi.n	801a4ec <_strtod_l+0xac>
 801a482:	2a00      	cmp	r2, #0
 801a484:	d03e      	beq.n	801a504 <_strtod_l+0xc4>
 801a486:	2300      	movs	r3, #0
 801a488:	930a      	str	r3, [sp, #40]	; 0x28
 801a48a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801a48c:	7833      	ldrb	r3, [r6, #0]
 801a48e:	2b30      	cmp	r3, #48	; 0x30
 801a490:	f040 80b0 	bne.w	801a5f4 <_strtod_l+0x1b4>
 801a494:	7873      	ldrb	r3, [r6, #1]
 801a496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a49a:	2b58      	cmp	r3, #88	; 0x58
 801a49c:	d168      	bne.n	801a570 <_strtod_l+0x130>
 801a49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4a0:	9301      	str	r3, [sp, #4]
 801a4a2:	ab18      	add	r3, sp, #96	; 0x60
 801a4a4:	9702      	str	r7, [sp, #8]
 801a4a6:	9300      	str	r3, [sp, #0]
 801a4a8:	4a8d      	ldr	r2, [pc, #564]	; (801a6e0 <_strtod_l+0x2a0>)
 801a4aa:	ab19      	add	r3, sp, #100	; 0x64
 801a4ac:	a917      	add	r1, sp, #92	; 0x5c
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f001 fd44 	bl	801bf3c <__gethex>
 801a4b4:	f010 0707 	ands.w	r7, r0, #7
 801a4b8:	4605      	mov	r5, r0
 801a4ba:	d005      	beq.n	801a4c8 <_strtod_l+0x88>
 801a4bc:	2f06      	cmp	r7, #6
 801a4be:	d12c      	bne.n	801a51a <_strtod_l+0xda>
 801a4c0:	3601      	adds	r6, #1
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	9617      	str	r6, [sp, #92]	; 0x5c
 801a4c6:	930a      	str	r3, [sp, #40]	; 0x28
 801a4c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	f040 8590 	bne.w	801aff0 <_strtod_l+0xbb0>
 801a4d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4d2:	b1eb      	cbz	r3, 801a510 <_strtod_l+0xd0>
 801a4d4:	4652      	mov	r2, sl
 801a4d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801a4da:	ec43 2b10 	vmov	d0, r2, r3
 801a4de:	b01d      	add	sp, #116	; 0x74
 801a4e0:	ecbd 8b02 	vpop	{d8}
 801a4e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e8:	2a20      	cmp	r2, #32
 801a4ea:	d1cc      	bne.n	801a486 <_strtod_l+0x46>
 801a4ec:	3301      	adds	r3, #1
 801a4ee:	9317      	str	r3, [sp, #92]	; 0x5c
 801a4f0:	e7be      	b.n	801a470 <_strtod_l+0x30>
 801a4f2:	2a2d      	cmp	r2, #45	; 0x2d
 801a4f4:	d1c7      	bne.n	801a486 <_strtod_l+0x46>
 801a4f6:	2201      	movs	r2, #1
 801a4f8:	920a      	str	r2, [sp, #40]	; 0x28
 801a4fa:	1c5a      	adds	r2, r3, #1
 801a4fc:	9217      	str	r2, [sp, #92]	; 0x5c
 801a4fe:	785b      	ldrb	r3, [r3, #1]
 801a500:	2b00      	cmp	r3, #0
 801a502:	d1c2      	bne.n	801a48a <_strtod_l+0x4a>
 801a504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a506:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	f040 856e 	bne.w	801afec <_strtod_l+0xbac>
 801a510:	4652      	mov	r2, sl
 801a512:	465b      	mov	r3, fp
 801a514:	e7e1      	b.n	801a4da <_strtod_l+0x9a>
 801a516:	2200      	movs	r2, #0
 801a518:	e7ee      	b.n	801a4f8 <_strtod_l+0xb8>
 801a51a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a51c:	b13a      	cbz	r2, 801a52e <_strtod_l+0xee>
 801a51e:	2135      	movs	r1, #53	; 0x35
 801a520:	a81a      	add	r0, sp, #104	; 0x68
 801a522:	f002 fcbc 	bl	801ce9e <__copybits>
 801a526:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a528:	4620      	mov	r0, r4
 801a52a:	f002 f87b 	bl	801c624 <_Bfree>
 801a52e:	3f01      	subs	r7, #1
 801a530:	2f04      	cmp	r7, #4
 801a532:	d806      	bhi.n	801a542 <_strtod_l+0x102>
 801a534:	e8df f007 	tbb	[pc, r7]
 801a538:	1714030a 	.word	0x1714030a
 801a53c:	0a          	.byte	0x0a
 801a53d:	00          	.byte	0x00
 801a53e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801a542:	0728      	lsls	r0, r5, #28
 801a544:	d5c0      	bpl.n	801a4c8 <_strtod_l+0x88>
 801a546:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801a54a:	e7bd      	b.n	801a4c8 <_strtod_l+0x88>
 801a54c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 801a550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801a552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a556:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a55a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801a55e:	e7f0      	b.n	801a542 <_strtod_l+0x102>
 801a560:	f8df b180 	ldr.w	fp, [pc, #384]	; 801a6e4 <_strtod_l+0x2a4>
 801a564:	e7ed      	b.n	801a542 <_strtod_l+0x102>
 801a566:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801a56a:	f04f 3aff 	mov.w	sl, #4294967295
 801a56e:	e7e8      	b.n	801a542 <_strtod_l+0x102>
 801a570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a572:	1c5a      	adds	r2, r3, #1
 801a574:	9217      	str	r2, [sp, #92]	; 0x5c
 801a576:	785b      	ldrb	r3, [r3, #1]
 801a578:	2b30      	cmp	r3, #48	; 0x30
 801a57a:	d0f9      	beq.n	801a570 <_strtod_l+0x130>
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d0a3      	beq.n	801a4c8 <_strtod_l+0x88>
 801a580:	2301      	movs	r3, #1
 801a582:	f04f 0900 	mov.w	r9, #0
 801a586:	9304      	str	r3, [sp, #16]
 801a588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a58a:	9308      	str	r3, [sp, #32]
 801a58c:	f8cd 901c 	str.w	r9, [sp, #28]
 801a590:	464f      	mov	r7, r9
 801a592:	220a      	movs	r2, #10
 801a594:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801a596:	7806      	ldrb	r6, [r0, #0]
 801a598:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801a59c:	b2d9      	uxtb	r1, r3
 801a59e:	2909      	cmp	r1, #9
 801a5a0:	d92a      	bls.n	801a5f8 <_strtod_l+0x1b8>
 801a5a2:	9905      	ldr	r1, [sp, #20]
 801a5a4:	462a      	mov	r2, r5
 801a5a6:	f002 ff2b 	bl	801d400 <strncmp>
 801a5aa:	b398      	cbz	r0, 801a614 <_strtod_l+0x1d4>
 801a5ac:	2000      	movs	r0, #0
 801a5ae:	4632      	mov	r2, r6
 801a5b0:	463d      	mov	r5, r7
 801a5b2:	9005      	str	r0, [sp, #20]
 801a5b4:	4603      	mov	r3, r0
 801a5b6:	2a65      	cmp	r2, #101	; 0x65
 801a5b8:	d001      	beq.n	801a5be <_strtod_l+0x17e>
 801a5ba:	2a45      	cmp	r2, #69	; 0x45
 801a5bc:	d118      	bne.n	801a5f0 <_strtod_l+0x1b0>
 801a5be:	b91d      	cbnz	r5, 801a5c8 <_strtod_l+0x188>
 801a5c0:	9a04      	ldr	r2, [sp, #16]
 801a5c2:	4302      	orrs	r2, r0
 801a5c4:	d09e      	beq.n	801a504 <_strtod_l+0xc4>
 801a5c6:	2500      	movs	r5, #0
 801a5c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 801a5cc:	f108 0201 	add.w	r2, r8, #1
 801a5d0:	9217      	str	r2, [sp, #92]	; 0x5c
 801a5d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a5d6:	2a2b      	cmp	r2, #43	; 0x2b
 801a5d8:	d075      	beq.n	801a6c6 <_strtod_l+0x286>
 801a5da:	2a2d      	cmp	r2, #45	; 0x2d
 801a5dc:	d07b      	beq.n	801a6d6 <_strtod_l+0x296>
 801a5de:	f04f 0c00 	mov.w	ip, #0
 801a5e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a5e6:	2909      	cmp	r1, #9
 801a5e8:	f240 8082 	bls.w	801a6f0 <_strtod_l+0x2b0>
 801a5ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801a5f0:	2600      	movs	r6, #0
 801a5f2:	e09d      	b.n	801a730 <_strtod_l+0x2f0>
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	e7c4      	b.n	801a582 <_strtod_l+0x142>
 801a5f8:	2f08      	cmp	r7, #8
 801a5fa:	bfd8      	it	le
 801a5fc:	9907      	ldrle	r1, [sp, #28]
 801a5fe:	f100 0001 	add.w	r0, r0, #1
 801a602:	bfda      	itte	le
 801a604:	fb02 3301 	mlale	r3, r2, r1, r3
 801a608:	9307      	strle	r3, [sp, #28]
 801a60a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801a60e:	3701      	adds	r7, #1
 801a610:	9017      	str	r0, [sp, #92]	; 0x5c
 801a612:	e7bf      	b.n	801a594 <_strtod_l+0x154>
 801a614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a616:	195a      	adds	r2, r3, r5
 801a618:	9217      	str	r2, [sp, #92]	; 0x5c
 801a61a:	5d5a      	ldrb	r2, [r3, r5]
 801a61c:	2f00      	cmp	r7, #0
 801a61e:	d037      	beq.n	801a690 <_strtod_l+0x250>
 801a620:	9005      	str	r0, [sp, #20]
 801a622:	463d      	mov	r5, r7
 801a624:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801a628:	2b09      	cmp	r3, #9
 801a62a:	d912      	bls.n	801a652 <_strtod_l+0x212>
 801a62c:	2301      	movs	r3, #1
 801a62e:	e7c2      	b.n	801a5b6 <_strtod_l+0x176>
 801a630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a632:	1c5a      	adds	r2, r3, #1
 801a634:	9217      	str	r2, [sp, #92]	; 0x5c
 801a636:	785a      	ldrb	r2, [r3, #1]
 801a638:	3001      	adds	r0, #1
 801a63a:	2a30      	cmp	r2, #48	; 0x30
 801a63c:	d0f8      	beq.n	801a630 <_strtod_l+0x1f0>
 801a63e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a642:	2b08      	cmp	r3, #8
 801a644:	f200 84d9 	bhi.w	801affa <_strtod_l+0xbba>
 801a648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a64a:	9005      	str	r0, [sp, #20]
 801a64c:	2000      	movs	r0, #0
 801a64e:	9308      	str	r3, [sp, #32]
 801a650:	4605      	mov	r5, r0
 801a652:	3a30      	subs	r2, #48	; 0x30
 801a654:	f100 0301 	add.w	r3, r0, #1
 801a658:	d014      	beq.n	801a684 <_strtod_l+0x244>
 801a65a:	9905      	ldr	r1, [sp, #20]
 801a65c:	4419      	add	r1, r3
 801a65e:	9105      	str	r1, [sp, #20]
 801a660:	462b      	mov	r3, r5
 801a662:	eb00 0e05 	add.w	lr, r0, r5
 801a666:	210a      	movs	r1, #10
 801a668:	4573      	cmp	r3, lr
 801a66a:	d113      	bne.n	801a694 <_strtod_l+0x254>
 801a66c:	182b      	adds	r3, r5, r0
 801a66e:	2b08      	cmp	r3, #8
 801a670:	f105 0501 	add.w	r5, r5, #1
 801a674:	4405      	add	r5, r0
 801a676:	dc1c      	bgt.n	801a6b2 <_strtod_l+0x272>
 801a678:	9907      	ldr	r1, [sp, #28]
 801a67a:	230a      	movs	r3, #10
 801a67c:	fb03 2301 	mla	r3, r3, r1, r2
 801a680:	9307      	str	r3, [sp, #28]
 801a682:	2300      	movs	r3, #0
 801a684:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a686:	1c51      	adds	r1, r2, #1
 801a688:	9117      	str	r1, [sp, #92]	; 0x5c
 801a68a:	7852      	ldrb	r2, [r2, #1]
 801a68c:	4618      	mov	r0, r3
 801a68e:	e7c9      	b.n	801a624 <_strtod_l+0x1e4>
 801a690:	4638      	mov	r0, r7
 801a692:	e7d2      	b.n	801a63a <_strtod_l+0x1fa>
 801a694:	2b08      	cmp	r3, #8
 801a696:	dc04      	bgt.n	801a6a2 <_strtod_l+0x262>
 801a698:	9e07      	ldr	r6, [sp, #28]
 801a69a:	434e      	muls	r6, r1
 801a69c:	9607      	str	r6, [sp, #28]
 801a69e:	3301      	adds	r3, #1
 801a6a0:	e7e2      	b.n	801a668 <_strtod_l+0x228>
 801a6a2:	f103 0c01 	add.w	ip, r3, #1
 801a6a6:	f1bc 0f10 	cmp.w	ip, #16
 801a6aa:	bfd8      	it	le
 801a6ac:	fb01 f909 	mulle.w	r9, r1, r9
 801a6b0:	e7f5      	b.n	801a69e <_strtod_l+0x25e>
 801a6b2:	2d10      	cmp	r5, #16
 801a6b4:	bfdc      	itt	le
 801a6b6:	230a      	movle	r3, #10
 801a6b8:	fb03 2909 	mlale	r9, r3, r9, r2
 801a6bc:	e7e1      	b.n	801a682 <_strtod_l+0x242>
 801a6be:	2300      	movs	r3, #0
 801a6c0:	9305      	str	r3, [sp, #20]
 801a6c2:	2301      	movs	r3, #1
 801a6c4:	e77c      	b.n	801a5c0 <_strtod_l+0x180>
 801a6c6:	f04f 0c00 	mov.w	ip, #0
 801a6ca:	f108 0202 	add.w	r2, r8, #2
 801a6ce:	9217      	str	r2, [sp, #92]	; 0x5c
 801a6d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 801a6d4:	e785      	b.n	801a5e2 <_strtod_l+0x1a2>
 801a6d6:	f04f 0c01 	mov.w	ip, #1
 801a6da:	e7f6      	b.n	801a6ca <_strtod_l+0x28a>
 801a6dc:	080521b0 	.word	0x080521b0
 801a6e0:	08051f68 	.word	0x08051f68
 801a6e4:	7ff00000 	.word	0x7ff00000
 801a6e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a6ea:	1c51      	adds	r1, r2, #1
 801a6ec:	9117      	str	r1, [sp, #92]	; 0x5c
 801a6ee:	7852      	ldrb	r2, [r2, #1]
 801a6f0:	2a30      	cmp	r2, #48	; 0x30
 801a6f2:	d0f9      	beq.n	801a6e8 <_strtod_l+0x2a8>
 801a6f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801a6f8:	2908      	cmp	r1, #8
 801a6fa:	f63f af79 	bhi.w	801a5f0 <_strtod_l+0x1b0>
 801a6fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801a702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a704:	9206      	str	r2, [sp, #24]
 801a706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a708:	1c51      	adds	r1, r2, #1
 801a70a:	9117      	str	r1, [sp, #92]	; 0x5c
 801a70c:	7852      	ldrb	r2, [r2, #1]
 801a70e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a712:	2e09      	cmp	r6, #9
 801a714:	d937      	bls.n	801a786 <_strtod_l+0x346>
 801a716:	9e06      	ldr	r6, [sp, #24]
 801a718:	1b89      	subs	r1, r1, r6
 801a71a:	2908      	cmp	r1, #8
 801a71c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801a720:	dc02      	bgt.n	801a728 <_strtod_l+0x2e8>
 801a722:	4576      	cmp	r6, lr
 801a724:	bfa8      	it	ge
 801a726:	4676      	movge	r6, lr
 801a728:	f1bc 0f00 	cmp.w	ip, #0
 801a72c:	d000      	beq.n	801a730 <_strtod_l+0x2f0>
 801a72e:	4276      	negs	r6, r6
 801a730:	2d00      	cmp	r5, #0
 801a732:	d14d      	bne.n	801a7d0 <_strtod_l+0x390>
 801a734:	9904      	ldr	r1, [sp, #16]
 801a736:	4301      	orrs	r1, r0
 801a738:	f47f aec6 	bne.w	801a4c8 <_strtod_l+0x88>
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	f47f aee1 	bne.w	801a504 <_strtod_l+0xc4>
 801a742:	2a69      	cmp	r2, #105	; 0x69
 801a744:	d027      	beq.n	801a796 <_strtod_l+0x356>
 801a746:	dc24      	bgt.n	801a792 <_strtod_l+0x352>
 801a748:	2a49      	cmp	r2, #73	; 0x49
 801a74a:	d024      	beq.n	801a796 <_strtod_l+0x356>
 801a74c:	2a4e      	cmp	r2, #78	; 0x4e
 801a74e:	f47f aed9 	bne.w	801a504 <_strtod_l+0xc4>
 801a752:	499f      	ldr	r1, [pc, #636]	; (801a9d0 <_strtod_l+0x590>)
 801a754:	a817      	add	r0, sp, #92	; 0x5c
 801a756:	f001 fe49 	bl	801c3ec <__match>
 801a75a:	2800      	cmp	r0, #0
 801a75c:	f43f aed2 	beq.w	801a504 <_strtod_l+0xc4>
 801a760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a762:	781b      	ldrb	r3, [r3, #0]
 801a764:	2b28      	cmp	r3, #40	; 0x28
 801a766:	d12d      	bne.n	801a7c4 <_strtod_l+0x384>
 801a768:	499a      	ldr	r1, [pc, #616]	; (801a9d4 <_strtod_l+0x594>)
 801a76a:	aa1a      	add	r2, sp, #104	; 0x68
 801a76c:	a817      	add	r0, sp, #92	; 0x5c
 801a76e:	f001 fe51 	bl	801c414 <__hexnan>
 801a772:	2805      	cmp	r0, #5
 801a774:	d126      	bne.n	801a7c4 <_strtod_l+0x384>
 801a776:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a778:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801a77c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801a780:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801a784:	e6a0      	b.n	801a4c8 <_strtod_l+0x88>
 801a786:	210a      	movs	r1, #10
 801a788:	fb01 2e0e 	mla	lr, r1, lr, r2
 801a78c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801a790:	e7b9      	b.n	801a706 <_strtod_l+0x2c6>
 801a792:	2a6e      	cmp	r2, #110	; 0x6e
 801a794:	e7db      	b.n	801a74e <_strtod_l+0x30e>
 801a796:	4990      	ldr	r1, [pc, #576]	; (801a9d8 <_strtod_l+0x598>)
 801a798:	a817      	add	r0, sp, #92	; 0x5c
 801a79a:	f001 fe27 	bl	801c3ec <__match>
 801a79e:	2800      	cmp	r0, #0
 801a7a0:	f43f aeb0 	beq.w	801a504 <_strtod_l+0xc4>
 801a7a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7a6:	498d      	ldr	r1, [pc, #564]	; (801a9dc <_strtod_l+0x59c>)
 801a7a8:	3b01      	subs	r3, #1
 801a7aa:	a817      	add	r0, sp, #92	; 0x5c
 801a7ac:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7ae:	f001 fe1d 	bl	801c3ec <__match>
 801a7b2:	b910      	cbnz	r0, 801a7ba <_strtod_l+0x37a>
 801a7b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a7b6:	3301      	adds	r3, #1
 801a7b8:	9317      	str	r3, [sp, #92]	; 0x5c
 801a7ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 801a9ec <_strtod_l+0x5ac>
 801a7be:	f04f 0a00 	mov.w	sl, #0
 801a7c2:	e681      	b.n	801a4c8 <_strtod_l+0x88>
 801a7c4:	4886      	ldr	r0, [pc, #536]	; (801a9e0 <_strtod_l+0x5a0>)
 801a7c6:	f002 fe03 	bl	801d3d0 <nan>
 801a7ca:	ec5b ab10 	vmov	sl, fp, d0
 801a7ce:	e67b      	b.n	801a4c8 <_strtod_l+0x88>
 801a7d0:	9b05      	ldr	r3, [sp, #20]
 801a7d2:	9807      	ldr	r0, [sp, #28]
 801a7d4:	1af3      	subs	r3, r6, r3
 801a7d6:	2f00      	cmp	r7, #0
 801a7d8:	bf08      	it	eq
 801a7da:	462f      	moveq	r7, r5
 801a7dc:	2d10      	cmp	r5, #16
 801a7de:	9306      	str	r3, [sp, #24]
 801a7e0:	46a8      	mov	r8, r5
 801a7e2:	bfa8      	it	ge
 801a7e4:	f04f 0810 	movge.w	r8, #16
 801a7e8:	f7fe f994 	bl	8018b14 <__aeabi_ui2d>
 801a7ec:	2d09      	cmp	r5, #9
 801a7ee:	4682      	mov	sl, r0
 801a7f0:	468b      	mov	fp, r1
 801a7f2:	dd13      	ble.n	801a81c <_strtod_l+0x3dc>
 801a7f4:	4b7b      	ldr	r3, [pc, #492]	; (801a9e4 <_strtod_l+0x5a4>)
 801a7f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a7fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801a7fe:	f7fe fa03 	bl	8018c08 <__aeabi_dmul>
 801a802:	4682      	mov	sl, r0
 801a804:	4648      	mov	r0, r9
 801a806:	468b      	mov	fp, r1
 801a808:	f7fe f984 	bl	8018b14 <__aeabi_ui2d>
 801a80c:	4602      	mov	r2, r0
 801a80e:	460b      	mov	r3, r1
 801a810:	4650      	mov	r0, sl
 801a812:	4659      	mov	r1, fp
 801a814:	f7fe f842 	bl	801889c <__adddf3>
 801a818:	4682      	mov	sl, r0
 801a81a:	468b      	mov	fp, r1
 801a81c:	2d0f      	cmp	r5, #15
 801a81e:	dc38      	bgt.n	801a892 <_strtod_l+0x452>
 801a820:	9b06      	ldr	r3, [sp, #24]
 801a822:	2b00      	cmp	r3, #0
 801a824:	f43f ae50 	beq.w	801a4c8 <_strtod_l+0x88>
 801a828:	dd24      	ble.n	801a874 <_strtod_l+0x434>
 801a82a:	2b16      	cmp	r3, #22
 801a82c:	dc0b      	bgt.n	801a846 <_strtod_l+0x406>
 801a82e:	496d      	ldr	r1, [pc, #436]	; (801a9e4 <_strtod_l+0x5a4>)
 801a830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a834:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a838:	4652      	mov	r2, sl
 801a83a:	465b      	mov	r3, fp
 801a83c:	f7fe f9e4 	bl	8018c08 <__aeabi_dmul>
 801a840:	4682      	mov	sl, r0
 801a842:	468b      	mov	fp, r1
 801a844:	e640      	b.n	801a4c8 <_strtod_l+0x88>
 801a846:	9a06      	ldr	r2, [sp, #24]
 801a848:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801a84c:	4293      	cmp	r3, r2
 801a84e:	db20      	blt.n	801a892 <_strtod_l+0x452>
 801a850:	4c64      	ldr	r4, [pc, #400]	; (801a9e4 <_strtod_l+0x5a4>)
 801a852:	f1c5 050f 	rsb	r5, r5, #15
 801a856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801a85a:	4652      	mov	r2, sl
 801a85c:	465b      	mov	r3, fp
 801a85e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a862:	f7fe f9d1 	bl	8018c08 <__aeabi_dmul>
 801a866:	9b06      	ldr	r3, [sp, #24]
 801a868:	1b5d      	subs	r5, r3, r5
 801a86a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801a86e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801a872:	e7e3      	b.n	801a83c <_strtod_l+0x3fc>
 801a874:	9b06      	ldr	r3, [sp, #24]
 801a876:	3316      	adds	r3, #22
 801a878:	db0b      	blt.n	801a892 <_strtod_l+0x452>
 801a87a:	9b05      	ldr	r3, [sp, #20]
 801a87c:	1b9e      	subs	r6, r3, r6
 801a87e:	4b59      	ldr	r3, [pc, #356]	; (801a9e4 <_strtod_l+0x5a4>)
 801a880:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a884:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a888:	4650      	mov	r0, sl
 801a88a:	4659      	mov	r1, fp
 801a88c:	f7fe fae6 	bl	8018e5c <__aeabi_ddiv>
 801a890:	e7d6      	b.n	801a840 <_strtod_l+0x400>
 801a892:	9b06      	ldr	r3, [sp, #24]
 801a894:	eba5 0808 	sub.w	r8, r5, r8
 801a898:	4498      	add	r8, r3
 801a89a:	f1b8 0f00 	cmp.w	r8, #0
 801a89e:	dd74      	ble.n	801a98a <_strtod_l+0x54a>
 801a8a0:	f018 030f 	ands.w	r3, r8, #15
 801a8a4:	d00a      	beq.n	801a8bc <_strtod_l+0x47c>
 801a8a6:	494f      	ldr	r1, [pc, #316]	; (801a9e4 <_strtod_l+0x5a4>)
 801a8a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801a8ac:	4652      	mov	r2, sl
 801a8ae:	465b      	mov	r3, fp
 801a8b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a8b4:	f7fe f9a8 	bl	8018c08 <__aeabi_dmul>
 801a8b8:	4682      	mov	sl, r0
 801a8ba:	468b      	mov	fp, r1
 801a8bc:	f038 080f 	bics.w	r8, r8, #15
 801a8c0:	d04f      	beq.n	801a962 <_strtod_l+0x522>
 801a8c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801a8c6:	dd22      	ble.n	801a90e <_strtod_l+0x4ce>
 801a8c8:	2500      	movs	r5, #0
 801a8ca:	462e      	mov	r6, r5
 801a8cc:	9507      	str	r5, [sp, #28]
 801a8ce:	9505      	str	r5, [sp, #20]
 801a8d0:	2322      	movs	r3, #34	; 0x22
 801a8d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a9ec <_strtod_l+0x5ac>
 801a8d6:	6023      	str	r3, [r4, #0]
 801a8d8:	f04f 0a00 	mov.w	sl, #0
 801a8dc:	9b07      	ldr	r3, [sp, #28]
 801a8de:	2b00      	cmp	r3, #0
 801a8e0:	f43f adf2 	beq.w	801a4c8 <_strtod_l+0x88>
 801a8e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 801a8e6:	4620      	mov	r0, r4
 801a8e8:	f001 fe9c 	bl	801c624 <_Bfree>
 801a8ec:	9905      	ldr	r1, [sp, #20]
 801a8ee:	4620      	mov	r0, r4
 801a8f0:	f001 fe98 	bl	801c624 <_Bfree>
 801a8f4:	4631      	mov	r1, r6
 801a8f6:	4620      	mov	r0, r4
 801a8f8:	f001 fe94 	bl	801c624 <_Bfree>
 801a8fc:	9907      	ldr	r1, [sp, #28]
 801a8fe:	4620      	mov	r0, r4
 801a900:	f001 fe90 	bl	801c624 <_Bfree>
 801a904:	4629      	mov	r1, r5
 801a906:	4620      	mov	r0, r4
 801a908:	f001 fe8c 	bl	801c624 <_Bfree>
 801a90c:	e5dc      	b.n	801a4c8 <_strtod_l+0x88>
 801a90e:	4b36      	ldr	r3, [pc, #216]	; (801a9e8 <_strtod_l+0x5a8>)
 801a910:	9304      	str	r3, [sp, #16]
 801a912:	2300      	movs	r3, #0
 801a914:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a918:	4650      	mov	r0, sl
 801a91a:	4659      	mov	r1, fp
 801a91c:	4699      	mov	r9, r3
 801a91e:	f1b8 0f01 	cmp.w	r8, #1
 801a922:	dc21      	bgt.n	801a968 <_strtod_l+0x528>
 801a924:	b10b      	cbz	r3, 801a92a <_strtod_l+0x4ea>
 801a926:	4682      	mov	sl, r0
 801a928:	468b      	mov	fp, r1
 801a92a:	4b2f      	ldr	r3, [pc, #188]	; (801a9e8 <_strtod_l+0x5a8>)
 801a92c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a930:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801a934:	4652      	mov	r2, sl
 801a936:	465b      	mov	r3, fp
 801a938:	e9d9 0100 	ldrd	r0, r1, [r9]
 801a93c:	f7fe f964 	bl	8018c08 <__aeabi_dmul>
 801a940:	4b2a      	ldr	r3, [pc, #168]	; (801a9ec <_strtod_l+0x5ac>)
 801a942:	460a      	mov	r2, r1
 801a944:	400b      	ands	r3, r1
 801a946:	492a      	ldr	r1, [pc, #168]	; (801a9f0 <_strtod_l+0x5b0>)
 801a948:	428b      	cmp	r3, r1
 801a94a:	4682      	mov	sl, r0
 801a94c:	d8bc      	bhi.n	801a8c8 <_strtod_l+0x488>
 801a94e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a952:	428b      	cmp	r3, r1
 801a954:	bf86      	itte	hi
 801a956:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801a9f4 <_strtod_l+0x5b4>
 801a95a:	f04f 3aff 	movhi.w	sl, #4294967295
 801a95e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a962:	2300      	movs	r3, #0
 801a964:	9304      	str	r3, [sp, #16]
 801a966:	e084      	b.n	801aa72 <_strtod_l+0x632>
 801a968:	f018 0f01 	tst.w	r8, #1
 801a96c:	d005      	beq.n	801a97a <_strtod_l+0x53a>
 801a96e:	9b04      	ldr	r3, [sp, #16]
 801a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a974:	f7fe f948 	bl	8018c08 <__aeabi_dmul>
 801a978:	2301      	movs	r3, #1
 801a97a:	9a04      	ldr	r2, [sp, #16]
 801a97c:	3208      	adds	r2, #8
 801a97e:	f109 0901 	add.w	r9, r9, #1
 801a982:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a986:	9204      	str	r2, [sp, #16]
 801a988:	e7c9      	b.n	801a91e <_strtod_l+0x4de>
 801a98a:	d0ea      	beq.n	801a962 <_strtod_l+0x522>
 801a98c:	f1c8 0800 	rsb	r8, r8, #0
 801a990:	f018 020f 	ands.w	r2, r8, #15
 801a994:	d00a      	beq.n	801a9ac <_strtod_l+0x56c>
 801a996:	4b13      	ldr	r3, [pc, #76]	; (801a9e4 <_strtod_l+0x5a4>)
 801a998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a99c:	4650      	mov	r0, sl
 801a99e:	4659      	mov	r1, fp
 801a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a4:	f7fe fa5a 	bl	8018e5c <__aeabi_ddiv>
 801a9a8:	4682      	mov	sl, r0
 801a9aa:	468b      	mov	fp, r1
 801a9ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a9b0:	d0d7      	beq.n	801a962 <_strtod_l+0x522>
 801a9b2:	f1b8 0f1f 	cmp.w	r8, #31
 801a9b6:	dd1f      	ble.n	801a9f8 <_strtod_l+0x5b8>
 801a9b8:	2500      	movs	r5, #0
 801a9ba:	462e      	mov	r6, r5
 801a9bc:	9507      	str	r5, [sp, #28]
 801a9be:	9505      	str	r5, [sp, #20]
 801a9c0:	2322      	movs	r3, #34	; 0x22
 801a9c2:	f04f 0a00 	mov.w	sl, #0
 801a9c6:	f04f 0b00 	mov.w	fp, #0
 801a9ca:	6023      	str	r3, [r4, #0]
 801a9cc:	e786      	b.n	801a8dc <_strtod_l+0x49c>
 801a9ce:	bf00      	nop
 801a9d0:	08051f39 	.word	0x08051f39
 801a9d4:	08051f7c 	.word	0x08051f7c
 801a9d8:	08051f31 	.word	0x08051f31
 801a9dc:	080520bc 	.word	0x080520bc
 801a9e0:	08052368 	.word	0x08052368
 801a9e4:	08052248 	.word	0x08052248
 801a9e8:	08052220 	.word	0x08052220
 801a9ec:	7ff00000 	.word	0x7ff00000
 801a9f0:	7ca00000 	.word	0x7ca00000
 801a9f4:	7fefffff 	.word	0x7fefffff
 801a9f8:	f018 0310 	ands.w	r3, r8, #16
 801a9fc:	bf18      	it	ne
 801a9fe:	236a      	movne	r3, #106	; 0x6a
 801aa00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 801adb0 <_strtod_l+0x970>
 801aa04:	9304      	str	r3, [sp, #16]
 801aa06:	4650      	mov	r0, sl
 801aa08:	4659      	mov	r1, fp
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	f018 0f01 	tst.w	r8, #1
 801aa10:	d004      	beq.n	801aa1c <_strtod_l+0x5dc>
 801aa12:	e9d9 2300 	ldrd	r2, r3, [r9]
 801aa16:	f7fe f8f7 	bl	8018c08 <__aeabi_dmul>
 801aa1a:	2301      	movs	r3, #1
 801aa1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 801aa20:	f109 0908 	add.w	r9, r9, #8
 801aa24:	d1f2      	bne.n	801aa0c <_strtod_l+0x5cc>
 801aa26:	b10b      	cbz	r3, 801aa2c <_strtod_l+0x5ec>
 801aa28:	4682      	mov	sl, r0
 801aa2a:	468b      	mov	fp, r1
 801aa2c:	9b04      	ldr	r3, [sp, #16]
 801aa2e:	b1c3      	cbz	r3, 801aa62 <_strtod_l+0x622>
 801aa30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801aa34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	4659      	mov	r1, fp
 801aa3c:	dd11      	ble.n	801aa62 <_strtod_l+0x622>
 801aa3e:	2b1f      	cmp	r3, #31
 801aa40:	f340 8124 	ble.w	801ac8c <_strtod_l+0x84c>
 801aa44:	2b34      	cmp	r3, #52	; 0x34
 801aa46:	bfde      	ittt	le
 801aa48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801aa4c:	f04f 33ff 	movle.w	r3, #4294967295
 801aa50:	fa03 f202 	lslle.w	r2, r3, r2
 801aa54:	f04f 0a00 	mov.w	sl, #0
 801aa58:	bfcc      	ite	gt
 801aa5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801aa5e:	ea02 0b01 	andle.w	fp, r2, r1
 801aa62:	2200      	movs	r2, #0
 801aa64:	2300      	movs	r3, #0
 801aa66:	4650      	mov	r0, sl
 801aa68:	4659      	mov	r1, fp
 801aa6a:	f7fe fb35 	bl	80190d8 <__aeabi_dcmpeq>
 801aa6e:	2800      	cmp	r0, #0
 801aa70:	d1a2      	bne.n	801a9b8 <_strtod_l+0x578>
 801aa72:	9b07      	ldr	r3, [sp, #28]
 801aa74:	9300      	str	r3, [sp, #0]
 801aa76:	9908      	ldr	r1, [sp, #32]
 801aa78:	462b      	mov	r3, r5
 801aa7a:	463a      	mov	r2, r7
 801aa7c:	4620      	mov	r0, r4
 801aa7e:	f001 fe39 	bl	801c6f4 <__s2b>
 801aa82:	9007      	str	r0, [sp, #28]
 801aa84:	2800      	cmp	r0, #0
 801aa86:	f43f af1f 	beq.w	801a8c8 <_strtod_l+0x488>
 801aa8a:	9b05      	ldr	r3, [sp, #20]
 801aa8c:	1b9e      	subs	r6, r3, r6
 801aa8e:	9b06      	ldr	r3, [sp, #24]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	bfb4      	ite	lt
 801aa94:	4633      	movlt	r3, r6
 801aa96:	2300      	movge	r3, #0
 801aa98:	930c      	str	r3, [sp, #48]	; 0x30
 801aa9a:	9b06      	ldr	r3, [sp, #24]
 801aa9c:	2500      	movs	r5, #0
 801aa9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aaa2:	9312      	str	r3, [sp, #72]	; 0x48
 801aaa4:	462e      	mov	r6, r5
 801aaa6:	9b07      	ldr	r3, [sp, #28]
 801aaa8:	4620      	mov	r0, r4
 801aaaa:	6859      	ldr	r1, [r3, #4]
 801aaac:	f001 fd7a 	bl	801c5a4 <_Balloc>
 801aab0:	9005      	str	r0, [sp, #20]
 801aab2:	2800      	cmp	r0, #0
 801aab4:	f43f af0c 	beq.w	801a8d0 <_strtod_l+0x490>
 801aab8:	9b07      	ldr	r3, [sp, #28]
 801aaba:	691a      	ldr	r2, [r3, #16]
 801aabc:	3202      	adds	r2, #2
 801aabe:	f103 010c 	add.w	r1, r3, #12
 801aac2:	0092      	lsls	r2, r2, #2
 801aac4:	300c      	adds	r0, #12
 801aac6:	f001 fd5f 	bl	801c588 <memcpy>
 801aaca:	ec4b ab10 	vmov	d0, sl, fp
 801aace:	aa1a      	add	r2, sp, #104	; 0x68
 801aad0:	a919      	add	r1, sp, #100	; 0x64
 801aad2:	4620      	mov	r0, r4
 801aad4:	f002 f954 	bl	801cd80 <__d2b>
 801aad8:	ec4b ab18 	vmov	d8, sl, fp
 801aadc:	9018      	str	r0, [sp, #96]	; 0x60
 801aade:	2800      	cmp	r0, #0
 801aae0:	f43f aef6 	beq.w	801a8d0 <_strtod_l+0x490>
 801aae4:	2101      	movs	r1, #1
 801aae6:	4620      	mov	r0, r4
 801aae8:	f001 fe9e 	bl	801c828 <__i2b>
 801aaec:	4606      	mov	r6, r0
 801aaee:	2800      	cmp	r0, #0
 801aaf0:	f43f aeee 	beq.w	801a8d0 <_strtod_l+0x490>
 801aaf4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801aaf6:	9904      	ldr	r1, [sp, #16]
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	bfab      	itete	ge
 801aafc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 801aafe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 801ab00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801ab02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801ab06:	bfac      	ite	ge
 801ab08:	eb03 0902 	addge.w	r9, r3, r2
 801ab0c:	1ad7      	sublt	r7, r2, r3
 801ab0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801ab10:	eba3 0801 	sub.w	r8, r3, r1
 801ab14:	4490      	add	r8, r2
 801ab16:	4ba1      	ldr	r3, [pc, #644]	; (801ad9c <_strtod_l+0x95c>)
 801ab18:	f108 38ff 	add.w	r8, r8, #4294967295
 801ab1c:	4598      	cmp	r8, r3
 801ab1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ab22:	f280 80c7 	bge.w	801acb4 <_strtod_l+0x874>
 801ab26:	eba3 0308 	sub.w	r3, r3, r8
 801ab2a:	2b1f      	cmp	r3, #31
 801ab2c:	eba2 0203 	sub.w	r2, r2, r3
 801ab30:	f04f 0101 	mov.w	r1, #1
 801ab34:	f300 80b1 	bgt.w	801ac9a <_strtod_l+0x85a>
 801ab38:	fa01 f303 	lsl.w	r3, r1, r3
 801ab3c:	930d      	str	r3, [sp, #52]	; 0x34
 801ab3e:	2300      	movs	r3, #0
 801ab40:	9308      	str	r3, [sp, #32]
 801ab42:	eb09 0802 	add.w	r8, r9, r2
 801ab46:	9b04      	ldr	r3, [sp, #16]
 801ab48:	45c1      	cmp	r9, r8
 801ab4a:	4417      	add	r7, r2
 801ab4c:	441f      	add	r7, r3
 801ab4e:	464b      	mov	r3, r9
 801ab50:	bfa8      	it	ge
 801ab52:	4643      	movge	r3, r8
 801ab54:	42bb      	cmp	r3, r7
 801ab56:	bfa8      	it	ge
 801ab58:	463b      	movge	r3, r7
 801ab5a:	2b00      	cmp	r3, #0
 801ab5c:	bfc2      	ittt	gt
 801ab5e:	eba8 0803 	subgt.w	r8, r8, r3
 801ab62:	1aff      	subgt	r7, r7, r3
 801ab64:	eba9 0903 	subgt.w	r9, r9, r3
 801ab68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	dd17      	ble.n	801ab9e <_strtod_l+0x75e>
 801ab6e:	4631      	mov	r1, r6
 801ab70:	461a      	mov	r2, r3
 801ab72:	4620      	mov	r0, r4
 801ab74:	f001 ff18 	bl	801c9a8 <__pow5mult>
 801ab78:	4606      	mov	r6, r0
 801ab7a:	2800      	cmp	r0, #0
 801ab7c:	f43f aea8 	beq.w	801a8d0 <_strtod_l+0x490>
 801ab80:	4601      	mov	r1, r0
 801ab82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ab84:	4620      	mov	r0, r4
 801ab86:	f001 fe65 	bl	801c854 <__multiply>
 801ab8a:	900b      	str	r0, [sp, #44]	; 0x2c
 801ab8c:	2800      	cmp	r0, #0
 801ab8e:	f43f ae9f 	beq.w	801a8d0 <_strtod_l+0x490>
 801ab92:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ab94:	4620      	mov	r0, r4
 801ab96:	f001 fd45 	bl	801c624 <_Bfree>
 801ab9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab9c:	9318      	str	r3, [sp, #96]	; 0x60
 801ab9e:	f1b8 0f00 	cmp.w	r8, #0
 801aba2:	f300 808c 	bgt.w	801acbe <_strtod_l+0x87e>
 801aba6:	9b06      	ldr	r3, [sp, #24]
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	dd08      	ble.n	801abbe <_strtod_l+0x77e>
 801abac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801abae:	9905      	ldr	r1, [sp, #20]
 801abb0:	4620      	mov	r0, r4
 801abb2:	f001 fef9 	bl	801c9a8 <__pow5mult>
 801abb6:	9005      	str	r0, [sp, #20]
 801abb8:	2800      	cmp	r0, #0
 801abba:	f43f ae89 	beq.w	801a8d0 <_strtod_l+0x490>
 801abbe:	2f00      	cmp	r7, #0
 801abc0:	dd08      	ble.n	801abd4 <_strtod_l+0x794>
 801abc2:	9905      	ldr	r1, [sp, #20]
 801abc4:	463a      	mov	r2, r7
 801abc6:	4620      	mov	r0, r4
 801abc8:	f001 ff48 	bl	801ca5c <__lshift>
 801abcc:	9005      	str	r0, [sp, #20]
 801abce:	2800      	cmp	r0, #0
 801abd0:	f43f ae7e 	beq.w	801a8d0 <_strtod_l+0x490>
 801abd4:	f1b9 0f00 	cmp.w	r9, #0
 801abd8:	dd08      	ble.n	801abec <_strtod_l+0x7ac>
 801abda:	4631      	mov	r1, r6
 801abdc:	464a      	mov	r2, r9
 801abde:	4620      	mov	r0, r4
 801abe0:	f001 ff3c 	bl	801ca5c <__lshift>
 801abe4:	4606      	mov	r6, r0
 801abe6:	2800      	cmp	r0, #0
 801abe8:	f43f ae72 	beq.w	801a8d0 <_strtod_l+0x490>
 801abec:	9a05      	ldr	r2, [sp, #20]
 801abee:	9918      	ldr	r1, [sp, #96]	; 0x60
 801abf0:	4620      	mov	r0, r4
 801abf2:	f001 ffbf 	bl	801cb74 <__mdiff>
 801abf6:	4605      	mov	r5, r0
 801abf8:	2800      	cmp	r0, #0
 801abfa:	f43f ae69 	beq.w	801a8d0 <_strtod_l+0x490>
 801abfe:	68c3      	ldr	r3, [r0, #12]
 801ac00:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac02:	2300      	movs	r3, #0
 801ac04:	60c3      	str	r3, [r0, #12]
 801ac06:	4631      	mov	r1, r6
 801ac08:	f001 ff98 	bl	801cb3c <__mcmp>
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	da60      	bge.n	801acd2 <_strtod_l+0x892>
 801ac10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ac12:	ea53 030a 	orrs.w	r3, r3, sl
 801ac16:	f040 8082 	bne.w	801ad1e <_strtod_l+0x8de>
 801ac1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d17d      	bne.n	801ad1e <_strtod_l+0x8de>
 801ac22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ac26:	0d1b      	lsrs	r3, r3, #20
 801ac28:	051b      	lsls	r3, r3, #20
 801ac2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ac2e:	d976      	bls.n	801ad1e <_strtod_l+0x8de>
 801ac30:	696b      	ldr	r3, [r5, #20]
 801ac32:	b913      	cbnz	r3, 801ac3a <_strtod_l+0x7fa>
 801ac34:	692b      	ldr	r3, [r5, #16]
 801ac36:	2b01      	cmp	r3, #1
 801ac38:	dd71      	ble.n	801ad1e <_strtod_l+0x8de>
 801ac3a:	4629      	mov	r1, r5
 801ac3c:	2201      	movs	r2, #1
 801ac3e:	4620      	mov	r0, r4
 801ac40:	f001 ff0c 	bl	801ca5c <__lshift>
 801ac44:	4631      	mov	r1, r6
 801ac46:	4605      	mov	r5, r0
 801ac48:	f001 ff78 	bl	801cb3c <__mcmp>
 801ac4c:	2800      	cmp	r0, #0
 801ac4e:	dd66      	ble.n	801ad1e <_strtod_l+0x8de>
 801ac50:	9904      	ldr	r1, [sp, #16]
 801ac52:	4a53      	ldr	r2, [pc, #332]	; (801ada0 <_strtod_l+0x960>)
 801ac54:	465b      	mov	r3, fp
 801ac56:	2900      	cmp	r1, #0
 801ac58:	f000 8081 	beq.w	801ad5e <_strtod_l+0x91e>
 801ac5c:	ea02 010b 	and.w	r1, r2, fp
 801ac60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ac64:	dc7b      	bgt.n	801ad5e <_strtod_l+0x91e>
 801ac66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ac6a:	f77f aea9 	ble.w	801a9c0 <_strtod_l+0x580>
 801ac6e:	4b4d      	ldr	r3, [pc, #308]	; (801ada4 <_strtod_l+0x964>)
 801ac70:	4650      	mov	r0, sl
 801ac72:	4659      	mov	r1, fp
 801ac74:	2200      	movs	r2, #0
 801ac76:	f7fd ffc7 	bl	8018c08 <__aeabi_dmul>
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	4303      	orrs	r3, r0
 801ac7e:	bf08      	it	eq
 801ac80:	2322      	moveq	r3, #34	; 0x22
 801ac82:	4682      	mov	sl, r0
 801ac84:	468b      	mov	fp, r1
 801ac86:	bf08      	it	eq
 801ac88:	6023      	streq	r3, [r4, #0]
 801ac8a:	e62b      	b.n	801a8e4 <_strtod_l+0x4a4>
 801ac8c:	f04f 32ff 	mov.w	r2, #4294967295
 801ac90:	fa02 f303 	lsl.w	r3, r2, r3
 801ac94:	ea03 0a0a 	and.w	sl, r3, sl
 801ac98:	e6e3      	b.n	801aa62 <_strtod_l+0x622>
 801ac9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801ac9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801aca2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801aca6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801acaa:	fa01 f308 	lsl.w	r3, r1, r8
 801acae:	9308      	str	r3, [sp, #32]
 801acb0:	910d      	str	r1, [sp, #52]	; 0x34
 801acb2:	e746      	b.n	801ab42 <_strtod_l+0x702>
 801acb4:	2300      	movs	r3, #0
 801acb6:	9308      	str	r3, [sp, #32]
 801acb8:	2301      	movs	r3, #1
 801acba:	930d      	str	r3, [sp, #52]	; 0x34
 801acbc:	e741      	b.n	801ab42 <_strtod_l+0x702>
 801acbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 801acc0:	4642      	mov	r2, r8
 801acc2:	4620      	mov	r0, r4
 801acc4:	f001 feca 	bl	801ca5c <__lshift>
 801acc8:	9018      	str	r0, [sp, #96]	; 0x60
 801acca:	2800      	cmp	r0, #0
 801accc:	f47f af6b 	bne.w	801aba6 <_strtod_l+0x766>
 801acd0:	e5fe      	b.n	801a8d0 <_strtod_l+0x490>
 801acd2:	465f      	mov	r7, fp
 801acd4:	d16e      	bne.n	801adb4 <_strtod_l+0x974>
 801acd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801acd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801acdc:	b342      	cbz	r2, 801ad30 <_strtod_l+0x8f0>
 801acde:	4a32      	ldr	r2, [pc, #200]	; (801ada8 <_strtod_l+0x968>)
 801ace0:	4293      	cmp	r3, r2
 801ace2:	d128      	bne.n	801ad36 <_strtod_l+0x8f6>
 801ace4:	9b04      	ldr	r3, [sp, #16]
 801ace6:	4651      	mov	r1, sl
 801ace8:	b1eb      	cbz	r3, 801ad26 <_strtod_l+0x8e6>
 801acea:	4b2d      	ldr	r3, [pc, #180]	; (801ada0 <_strtod_l+0x960>)
 801acec:	403b      	ands	r3, r7
 801acee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801acf2:	f04f 32ff 	mov.w	r2, #4294967295
 801acf6:	d819      	bhi.n	801ad2c <_strtod_l+0x8ec>
 801acf8:	0d1b      	lsrs	r3, r3, #20
 801acfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801acfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ad02:	4299      	cmp	r1, r3
 801ad04:	d117      	bne.n	801ad36 <_strtod_l+0x8f6>
 801ad06:	4b29      	ldr	r3, [pc, #164]	; (801adac <_strtod_l+0x96c>)
 801ad08:	429f      	cmp	r7, r3
 801ad0a:	d102      	bne.n	801ad12 <_strtod_l+0x8d2>
 801ad0c:	3101      	adds	r1, #1
 801ad0e:	f43f addf 	beq.w	801a8d0 <_strtod_l+0x490>
 801ad12:	4b23      	ldr	r3, [pc, #140]	; (801ada0 <_strtod_l+0x960>)
 801ad14:	403b      	ands	r3, r7
 801ad16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801ad1a:	f04f 0a00 	mov.w	sl, #0
 801ad1e:	9b04      	ldr	r3, [sp, #16]
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d1a4      	bne.n	801ac6e <_strtod_l+0x82e>
 801ad24:	e5de      	b.n	801a8e4 <_strtod_l+0x4a4>
 801ad26:	f04f 33ff 	mov.w	r3, #4294967295
 801ad2a:	e7ea      	b.n	801ad02 <_strtod_l+0x8c2>
 801ad2c:	4613      	mov	r3, r2
 801ad2e:	e7e8      	b.n	801ad02 <_strtod_l+0x8c2>
 801ad30:	ea53 030a 	orrs.w	r3, r3, sl
 801ad34:	d08c      	beq.n	801ac50 <_strtod_l+0x810>
 801ad36:	9b08      	ldr	r3, [sp, #32]
 801ad38:	b1db      	cbz	r3, 801ad72 <_strtod_l+0x932>
 801ad3a:	423b      	tst	r3, r7
 801ad3c:	d0ef      	beq.n	801ad1e <_strtod_l+0x8de>
 801ad3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ad40:	9a04      	ldr	r2, [sp, #16]
 801ad42:	4650      	mov	r0, sl
 801ad44:	4659      	mov	r1, fp
 801ad46:	b1c3      	cbz	r3, 801ad7a <_strtod_l+0x93a>
 801ad48:	f7ff fb5e 	bl	801a408 <sulp>
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	ec51 0b18 	vmov	r0, r1, d8
 801ad54:	f7fd fda2 	bl	801889c <__adddf3>
 801ad58:	4682      	mov	sl, r0
 801ad5a:	468b      	mov	fp, r1
 801ad5c:	e7df      	b.n	801ad1e <_strtod_l+0x8de>
 801ad5e:	4013      	ands	r3, r2
 801ad60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801ad64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ad68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ad6c:	f04f 3aff 	mov.w	sl, #4294967295
 801ad70:	e7d5      	b.n	801ad1e <_strtod_l+0x8de>
 801ad72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ad74:	ea13 0f0a 	tst.w	r3, sl
 801ad78:	e7e0      	b.n	801ad3c <_strtod_l+0x8fc>
 801ad7a:	f7ff fb45 	bl	801a408 <sulp>
 801ad7e:	4602      	mov	r2, r0
 801ad80:	460b      	mov	r3, r1
 801ad82:	ec51 0b18 	vmov	r0, r1, d8
 801ad86:	f7fd fd87 	bl	8018898 <__aeabi_dsub>
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	2300      	movs	r3, #0
 801ad8e:	4682      	mov	sl, r0
 801ad90:	468b      	mov	fp, r1
 801ad92:	f7fe f9a1 	bl	80190d8 <__aeabi_dcmpeq>
 801ad96:	2800      	cmp	r0, #0
 801ad98:	d0c1      	beq.n	801ad1e <_strtod_l+0x8de>
 801ad9a:	e611      	b.n	801a9c0 <_strtod_l+0x580>
 801ad9c:	fffffc02 	.word	0xfffffc02
 801ada0:	7ff00000 	.word	0x7ff00000
 801ada4:	39500000 	.word	0x39500000
 801ada8:	000fffff 	.word	0x000fffff
 801adac:	7fefffff 	.word	0x7fefffff
 801adb0:	08051f90 	.word	0x08051f90
 801adb4:	4631      	mov	r1, r6
 801adb6:	4628      	mov	r0, r5
 801adb8:	f002 f83e 	bl	801ce38 <__ratio>
 801adbc:	ec59 8b10 	vmov	r8, r9, d0
 801adc0:	ee10 0a10 	vmov	r0, s0
 801adc4:	2200      	movs	r2, #0
 801adc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801adca:	4649      	mov	r1, r9
 801adcc:	f7fe f998 	bl	8019100 <__aeabi_dcmple>
 801add0:	2800      	cmp	r0, #0
 801add2:	d07a      	beq.n	801aeca <_strtod_l+0xa8a>
 801add4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801add6:	2b00      	cmp	r3, #0
 801add8:	d04a      	beq.n	801ae70 <_strtod_l+0xa30>
 801adda:	4b95      	ldr	r3, [pc, #596]	; (801b030 <_strtod_l+0xbf0>)
 801addc:	2200      	movs	r2, #0
 801adde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ade2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 801b030 <_strtod_l+0xbf0>
 801ade6:	f04f 0800 	mov.w	r8, #0
 801adea:	4b92      	ldr	r3, [pc, #584]	; (801b034 <_strtod_l+0xbf4>)
 801adec:	403b      	ands	r3, r7
 801adee:	930d      	str	r3, [sp, #52]	; 0x34
 801adf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801adf2:	4b91      	ldr	r3, [pc, #580]	; (801b038 <_strtod_l+0xbf8>)
 801adf4:	429a      	cmp	r2, r3
 801adf6:	f040 80b0 	bne.w	801af5a <_strtod_l+0xb1a>
 801adfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801adfe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801ae02:	ec4b ab10 	vmov	d0, sl, fp
 801ae06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801ae0a:	f001 ff3d 	bl	801cc88 <__ulp>
 801ae0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801ae12:	ec53 2b10 	vmov	r2, r3, d0
 801ae16:	f7fd fef7 	bl	8018c08 <__aeabi_dmul>
 801ae1a:	4652      	mov	r2, sl
 801ae1c:	465b      	mov	r3, fp
 801ae1e:	f7fd fd3d 	bl	801889c <__adddf3>
 801ae22:	460b      	mov	r3, r1
 801ae24:	4983      	ldr	r1, [pc, #524]	; (801b034 <_strtod_l+0xbf4>)
 801ae26:	4a85      	ldr	r2, [pc, #532]	; (801b03c <_strtod_l+0xbfc>)
 801ae28:	4019      	ands	r1, r3
 801ae2a:	4291      	cmp	r1, r2
 801ae2c:	4682      	mov	sl, r0
 801ae2e:	d960      	bls.n	801aef2 <_strtod_l+0xab2>
 801ae30:	ee18 3a90 	vmov	r3, s17
 801ae34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ae38:	4293      	cmp	r3, r2
 801ae3a:	d104      	bne.n	801ae46 <_strtod_l+0xa06>
 801ae3c:	ee18 3a10 	vmov	r3, s16
 801ae40:	3301      	adds	r3, #1
 801ae42:	f43f ad45 	beq.w	801a8d0 <_strtod_l+0x490>
 801ae46:	f8df b200 	ldr.w	fp, [pc, #512]	; 801b048 <_strtod_l+0xc08>
 801ae4a:	f04f 3aff 	mov.w	sl, #4294967295
 801ae4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 801ae50:	4620      	mov	r0, r4
 801ae52:	f001 fbe7 	bl	801c624 <_Bfree>
 801ae56:	9905      	ldr	r1, [sp, #20]
 801ae58:	4620      	mov	r0, r4
 801ae5a:	f001 fbe3 	bl	801c624 <_Bfree>
 801ae5e:	4631      	mov	r1, r6
 801ae60:	4620      	mov	r0, r4
 801ae62:	f001 fbdf 	bl	801c624 <_Bfree>
 801ae66:	4629      	mov	r1, r5
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f001 fbdb 	bl	801c624 <_Bfree>
 801ae6e:	e61a      	b.n	801aaa6 <_strtod_l+0x666>
 801ae70:	f1ba 0f00 	cmp.w	sl, #0
 801ae74:	d11b      	bne.n	801aeae <_strtod_l+0xa6e>
 801ae76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ae7a:	b9f3      	cbnz	r3, 801aeba <_strtod_l+0xa7a>
 801ae7c:	4b6c      	ldr	r3, [pc, #432]	; (801b030 <_strtod_l+0xbf0>)
 801ae7e:	2200      	movs	r2, #0
 801ae80:	4640      	mov	r0, r8
 801ae82:	4649      	mov	r1, r9
 801ae84:	f7fe f932 	bl	80190ec <__aeabi_dcmplt>
 801ae88:	b9d0      	cbnz	r0, 801aec0 <_strtod_l+0xa80>
 801ae8a:	4640      	mov	r0, r8
 801ae8c:	4649      	mov	r1, r9
 801ae8e:	4b6c      	ldr	r3, [pc, #432]	; (801b040 <_strtod_l+0xc00>)
 801ae90:	2200      	movs	r2, #0
 801ae92:	f7fd feb9 	bl	8018c08 <__aeabi_dmul>
 801ae96:	4680      	mov	r8, r0
 801ae98:	4689      	mov	r9, r1
 801ae9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ae9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801aea2:	9315      	str	r3, [sp, #84]	; 0x54
 801aea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801aea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aeac:	e79d      	b.n	801adea <_strtod_l+0x9aa>
 801aeae:	f1ba 0f01 	cmp.w	sl, #1
 801aeb2:	d102      	bne.n	801aeba <_strtod_l+0xa7a>
 801aeb4:	2f00      	cmp	r7, #0
 801aeb6:	f43f ad83 	beq.w	801a9c0 <_strtod_l+0x580>
 801aeba:	4b62      	ldr	r3, [pc, #392]	; (801b044 <_strtod_l+0xc04>)
 801aebc:	2200      	movs	r2, #0
 801aebe:	e78e      	b.n	801adde <_strtod_l+0x99e>
 801aec0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 801b040 <_strtod_l+0xc00>
 801aec4:	f04f 0800 	mov.w	r8, #0
 801aec8:	e7e7      	b.n	801ae9a <_strtod_l+0xa5a>
 801aeca:	4b5d      	ldr	r3, [pc, #372]	; (801b040 <_strtod_l+0xc00>)
 801aecc:	4640      	mov	r0, r8
 801aece:	4649      	mov	r1, r9
 801aed0:	2200      	movs	r2, #0
 801aed2:	f7fd fe99 	bl	8018c08 <__aeabi_dmul>
 801aed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aed8:	4680      	mov	r8, r0
 801aeda:	4689      	mov	r9, r1
 801aedc:	b933      	cbnz	r3, 801aeec <_strtod_l+0xaac>
 801aede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801aee2:	900e      	str	r0, [sp, #56]	; 0x38
 801aee4:	930f      	str	r3, [sp, #60]	; 0x3c
 801aee6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801aeea:	e7dd      	b.n	801aea8 <_strtod_l+0xa68>
 801aeec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 801aef0:	e7f9      	b.n	801aee6 <_strtod_l+0xaa6>
 801aef2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801aef6:	9b04      	ldr	r3, [sp, #16]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d1a8      	bne.n	801ae4e <_strtod_l+0xa0e>
 801aefc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801af00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af02:	0d1b      	lsrs	r3, r3, #20
 801af04:	051b      	lsls	r3, r3, #20
 801af06:	429a      	cmp	r2, r3
 801af08:	d1a1      	bne.n	801ae4e <_strtod_l+0xa0e>
 801af0a:	4640      	mov	r0, r8
 801af0c:	4649      	mov	r1, r9
 801af0e:	f7fe f9c3 	bl	8019298 <__aeabi_d2lz>
 801af12:	f7fd fe4b 	bl	8018bac <__aeabi_l2d>
 801af16:	4602      	mov	r2, r0
 801af18:	460b      	mov	r3, r1
 801af1a:	4640      	mov	r0, r8
 801af1c:	4649      	mov	r1, r9
 801af1e:	f7fd fcbb 	bl	8018898 <__aeabi_dsub>
 801af22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801af24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801af28:	ea43 030a 	orr.w	r3, r3, sl
 801af2c:	4313      	orrs	r3, r2
 801af2e:	4680      	mov	r8, r0
 801af30:	4689      	mov	r9, r1
 801af32:	d055      	beq.n	801afe0 <_strtod_l+0xba0>
 801af34:	a336      	add	r3, pc, #216	; (adr r3, 801b010 <_strtod_l+0xbd0>)
 801af36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af3a:	f7fe f8d7 	bl	80190ec <__aeabi_dcmplt>
 801af3e:	2800      	cmp	r0, #0
 801af40:	f47f acd0 	bne.w	801a8e4 <_strtod_l+0x4a4>
 801af44:	a334      	add	r3, pc, #208	; (adr r3, 801b018 <_strtod_l+0xbd8>)
 801af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af4a:	4640      	mov	r0, r8
 801af4c:	4649      	mov	r1, r9
 801af4e:	f7fe f8eb 	bl	8019128 <__aeabi_dcmpgt>
 801af52:	2800      	cmp	r0, #0
 801af54:	f43f af7b 	beq.w	801ae4e <_strtod_l+0xa0e>
 801af58:	e4c4      	b.n	801a8e4 <_strtod_l+0x4a4>
 801af5a:	9b04      	ldr	r3, [sp, #16]
 801af5c:	b333      	cbz	r3, 801afac <_strtod_l+0xb6c>
 801af5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801af64:	d822      	bhi.n	801afac <_strtod_l+0xb6c>
 801af66:	a32e      	add	r3, pc, #184	; (adr r3, 801b020 <_strtod_l+0xbe0>)
 801af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af6c:	4640      	mov	r0, r8
 801af6e:	4649      	mov	r1, r9
 801af70:	f7fe f8c6 	bl	8019100 <__aeabi_dcmple>
 801af74:	b1a0      	cbz	r0, 801afa0 <_strtod_l+0xb60>
 801af76:	4649      	mov	r1, r9
 801af78:	4640      	mov	r0, r8
 801af7a:	f7fe f91d 	bl	80191b8 <__aeabi_d2uiz>
 801af7e:	2801      	cmp	r0, #1
 801af80:	bf38      	it	cc
 801af82:	2001      	movcc	r0, #1
 801af84:	f7fd fdc6 	bl	8018b14 <__aeabi_ui2d>
 801af88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801af8a:	4680      	mov	r8, r0
 801af8c:	4689      	mov	r9, r1
 801af8e:	bb23      	cbnz	r3, 801afda <_strtod_l+0xb9a>
 801af90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801af94:	9010      	str	r0, [sp, #64]	; 0x40
 801af96:	9311      	str	r3, [sp, #68]	; 0x44
 801af98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801af9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801afa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801afa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801afa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801afa8:	1a9b      	subs	r3, r3, r2
 801afaa:	9309      	str	r3, [sp, #36]	; 0x24
 801afac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801afb0:	eeb0 0a48 	vmov.f32	s0, s16
 801afb4:	eef0 0a68 	vmov.f32	s1, s17
 801afb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801afbc:	f001 fe64 	bl	801cc88 <__ulp>
 801afc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801afc4:	ec53 2b10 	vmov	r2, r3, d0
 801afc8:	f7fd fe1e 	bl	8018c08 <__aeabi_dmul>
 801afcc:	ec53 2b18 	vmov	r2, r3, d8
 801afd0:	f7fd fc64 	bl	801889c <__adddf3>
 801afd4:	4682      	mov	sl, r0
 801afd6:	468b      	mov	fp, r1
 801afd8:	e78d      	b.n	801aef6 <_strtod_l+0xab6>
 801afda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 801afde:	e7db      	b.n	801af98 <_strtod_l+0xb58>
 801afe0:	a311      	add	r3, pc, #68	; (adr r3, 801b028 <_strtod_l+0xbe8>)
 801afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afe6:	f7fe f881 	bl	80190ec <__aeabi_dcmplt>
 801afea:	e7b2      	b.n	801af52 <_strtod_l+0xb12>
 801afec:	2300      	movs	r3, #0
 801afee:	930a      	str	r3, [sp, #40]	; 0x28
 801aff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801aff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aff4:	6013      	str	r3, [r2, #0]
 801aff6:	f7ff ba6b 	b.w	801a4d0 <_strtod_l+0x90>
 801affa:	2a65      	cmp	r2, #101	; 0x65
 801affc:	f43f ab5f 	beq.w	801a6be <_strtod_l+0x27e>
 801b000:	2a45      	cmp	r2, #69	; 0x45
 801b002:	f43f ab5c 	beq.w	801a6be <_strtod_l+0x27e>
 801b006:	2301      	movs	r3, #1
 801b008:	f7ff bb94 	b.w	801a734 <_strtod_l+0x2f4>
 801b00c:	f3af 8000 	nop.w
 801b010:	94a03595 	.word	0x94a03595
 801b014:	3fdfffff 	.word	0x3fdfffff
 801b018:	35afe535 	.word	0x35afe535
 801b01c:	3fe00000 	.word	0x3fe00000
 801b020:	ffc00000 	.word	0xffc00000
 801b024:	41dfffff 	.word	0x41dfffff
 801b028:	94a03595 	.word	0x94a03595
 801b02c:	3fcfffff 	.word	0x3fcfffff
 801b030:	3ff00000 	.word	0x3ff00000
 801b034:	7ff00000 	.word	0x7ff00000
 801b038:	7fe00000 	.word	0x7fe00000
 801b03c:	7c9fffff 	.word	0x7c9fffff
 801b040:	3fe00000 	.word	0x3fe00000
 801b044:	bff00000 	.word	0xbff00000
 801b048:	7fefffff 	.word	0x7fefffff

0801b04c <_strtod_r>:
 801b04c:	4b01      	ldr	r3, [pc, #4]	; (801b054 <_strtod_r+0x8>)
 801b04e:	f7ff b9f7 	b.w	801a440 <_strtod_l>
 801b052:	bf00      	nop
 801b054:	200000cc 	.word	0x200000cc

0801b058 <_strtol_l.constprop.0>:
 801b058:	2b01      	cmp	r3, #1
 801b05a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b05e:	d001      	beq.n	801b064 <_strtol_l.constprop.0+0xc>
 801b060:	2b24      	cmp	r3, #36	; 0x24
 801b062:	d906      	bls.n	801b072 <_strtol_l.constprop.0+0x1a>
 801b064:	f7fe fafe 	bl	8019664 <__errno>
 801b068:	2316      	movs	r3, #22
 801b06a:	6003      	str	r3, [r0, #0]
 801b06c:	2000      	movs	r0, #0
 801b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b158 <_strtol_l.constprop.0+0x100>
 801b076:	460d      	mov	r5, r1
 801b078:	462e      	mov	r6, r5
 801b07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b07e:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b082:	f017 0708 	ands.w	r7, r7, #8
 801b086:	d1f7      	bne.n	801b078 <_strtol_l.constprop.0+0x20>
 801b088:	2c2d      	cmp	r4, #45	; 0x2d
 801b08a:	d132      	bne.n	801b0f2 <_strtol_l.constprop.0+0x9a>
 801b08c:	782c      	ldrb	r4, [r5, #0]
 801b08e:	2701      	movs	r7, #1
 801b090:	1cb5      	adds	r5, r6, #2
 801b092:	2b00      	cmp	r3, #0
 801b094:	d05b      	beq.n	801b14e <_strtol_l.constprop.0+0xf6>
 801b096:	2b10      	cmp	r3, #16
 801b098:	d109      	bne.n	801b0ae <_strtol_l.constprop.0+0x56>
 801b09a:	2c30      	cmp	r4, #48	; 0x30
 801b09c:	d107      	bne.n	801b0ae <_strtol_l.constprop.0+0x56>
 801b09e:	782c      	ldrb	r4, [r5, #0]
 801b0a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b0a4:	2c58      	cmp	r4, #88	; 0x58
 801b0a6:	d14d      	bne.n	801b144 <_strtol_l.constprop.0+0xec>
 801b0a8:	786c      	ldrb	r4, [r5, #1]
 801b0aa:	2310      	movs	r3, #16
 801b0ac:	3502      	adds	r5, #2
 801b0ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b0b2:	f108 38ff 	add.w	r8, r8, #4294967295
 801b0b6:	f04f 0c00 	mov.w	ip, #0
 801b0ba:	fbb8 f9f3 	udiv	r9, r8, r3
 801b0be:	4666      	mov	r6, ip
 801b0c0:	fb03 8a19 	mls	sl, r3, r9, r8
 801b0c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b0c8:	f1be 0f09 	cmp.w	lr, #9
 801b0cc:	d816      	bhi.n	801b0fc <_strtol_l.constprop.0+0xa4>
 801b0ce:	4674      	mov	r4, lr
 801b0d0:	42a3      	cmp	r3, r4
 801b0d2:	dd24      	ble.n	801b11e <_strtol_l.constprop.0+0xc6>
 801b0d4:	f1bc 0f00 	cmp.w	ip, #0
 801b0d8:	db1e      	blt.n	801b118 <_strtol_l.constprop.0+0xc0>
 801b0da:	45b1      	cmp	r9, r6
 801b0dc:	d31c      	bcc.n	801b118 <_strtol_l.constprop.0+0xc0>
 801b0de:	d101      	bne.n	801b0e4 <_strtol_l.constprop.0+0x8c>
 801b0e0:	45a2      	cmp	sl, r4
 801b0e2:	db19      	blt.n	801b118 <_strtol_l.constprop.0+0xc0>
 801b0e4:	fb06 4603 	mla	r6, r6, r3, r4
 801b0e8:	f04f 0c01 	mov.w	ip, #1
 801b0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b0f0:	e7e8      	b.n	801b0c4 <_strtol_l.constprop.0+0x6c>
 801b0f2:	2c2b      	cmp	r4, #43	; 0x2b
 801b0f4:	bf04      	itt	eq
 801b0f6:	782c      	ldrbeq	r4, [r5, #0]
 801b0f8:	1cb5      	addeq	r5, r6, #2
 801b0fa:	e7ca      	b.n	801b092 <_strtol_l.constprop.0+0x3a>
 801b0fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b100:	f1be 0f19 	cmp.w	lr, #25
 801b104:	d801      	bhi.n	801b10a <_strtol_l.constprop.0+0xb2>
 801b106:	3c37      	subs	r4, #55	; 0x37
 801b108:	e7e2      	b.n	801b0d0 <_strtol_l.constprop.0+0x78>
 801b10a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b10e:	f1be 0f19 	cmp.w	lr, #25
 801b112:	d804      	bhi.n	801b11e <_strtol_l.constprop.0+0xc6>
 801b114:	3c57      	subs	r4, #87	; 0x57
 801b116:	e7db      	b.n	801b0d0 <_strtol_l.constprop.0+0x78>
 801b118:	f04f 3cff 	mov.w	ip, #4294967295
 801b11c:	e7e6      	b.n	801b0ec <_strtol_l.constprop.0+0x94>
 801b11e:	f1bc 0f00 	cmp.w	ip, #0
 801b122:	da05      	bge.n	801b130 <_strtol_l.constprop.0+0xd8>
 801b124:	2322      	movs	r3, #34	; 0x22
 801b126:	6003      	str	r3, [r0, #0]
 801b128:	4646      	mov	r6, r8
 801b12a:	b942      	cbnz	r2, 801b13e <_strtol_l.constprop.0+0xe6>
 801b12c:	4630      	mov	r0, r6
 801b12e:	e79e      	b.n	801b06e <_strtol_l.constprop.0+0x16>
 801b130:	b107      	cbz	r7, 801b134 <_strtol_l.constprop.0+0xdc>
 801b132:	4276      	negs	r6, r6
 801b134:	2a00      	cmp	r2, #0
 801b136:	d0f9      	beq.n	801b12c <_strtol_l.constprop.0+0xd4>
 801b138:	f1bc 0f00 	cmp.w	ip, #0
 801b13c:	d000      	beq.n	801b140 <_strtol_l.constprop.0+0xe8>
 801b13e:	1e69      	subs	r1, r5, #1
 801b140:	6011      	str	r1, [r2, #0]
 801b142:	e7f3      	b.n	801b12c <_strtol_l.constprop.0+0xd4>
 801b144:	2430      	movs	r4, #48	; 0x30
 801b146:	2b00      	cmp	r3, #0
 801b148:	d1b1      	bne.n	801b0ae <_strtol_l.constprop.0+0x56>
 801b14a:	2308      	movs	r3, #8
 801b14c:	e7af      	b.n	801b0ae <_strtol_l.constprop.0+0x56>
 801b14e:	2c30      	cmp	r4, #48	; 0x30
 801b150:	d0a5      	beq.n	801b09e <_strtol_l.constprop.0+0x46>
 801b152:	230a      	movs	r3, #10
 801b154:	e7ab      	b.n	801b0ae <_strtol_l.constprop.0+0x56>
 801b156:	bf00      	nop
 801b158:	08051fb9 	.word	0x08051fb9

0801b15c <_strtol_r>:
 801b15c:	f7ff bf7c 	b.w	801b058 <_strtol_l.constprop.0>

0801b160 <strtol>:
 801b160:	4613      	mov	r3, r2
 801b162:	460a      	mov	r2, r1
 801b164:	4601      	mov	r1, r0
 801b166:	4802      	ldr	r0, [pc, #8]	; (801b170 <strtol+0x10>)
 801b168:	6800      	ldr	r0, [r0, #0]
 801b16a:	f7ff bf75 	b.w	801b058 <_strtol_l.constprop.0>
 801b16e:	bf00      	nop
 801b170:	20000064 	.word	0x20000064

0801b174 <quorem>:
 801b174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b178:	6903      	ldr	r3, [r0, #16]
 801b17a:	690c      	ldr	r4, [r1, #16]
 801b17c:	42a3      	cmp	r3, r4
 801b17e:	4607      	mov	r7, r0
 801b180:	f2c0 8081 	blt.w	801b286 <quorem+0x112>
 801b184:	3c01      	subs	r4, #1
 801b186:	f101 0814 	add.w	r8, r1, #20
 801b18a:	f100 0514 	add.w	r5, r0, #20
 801b18e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b192:	9301      	str	r3, [sp, #4]
 801b194:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b198:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b19c:	3301      	adds	r3, #1
 801b19e:	429a      	cmp	r2, r3
 801b1a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b1a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b1a8:	fbb2 f6f3 	udiv	r6, r2, r3
 801b1ac:	d331      	bcc.n	801b212 <quorem+0x9e>
 801b1ae:	f04f 0e00 	mov.w	lr, #0
 801b1b2:	4640      	mov	r0, r8
 801b1b4:	46ac      	mov	ip, r5
 801b1b6:	46f2      	mov	sl, lr
 801b1b8:	f850 2b04 	ldr.w	r2, [r0], #4
 801b1bc:	b293      	uxth	r3, r2
 801b1be:	fb06 e303 	mla	r3, r6, r3, lr
 801b1c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b1c6:	b29b      	uxth	r3, r3
 801b1c8:	ebaa 0303 	sub.w	r3, sl, r3
 801b1cc:	f8dc a000 	ldr.w	sl, [ip]
 801b1d0:	0c12      	lsrs	r2, r2, #16
 801b1d2:	fa13 f38a 	uxtah	r3, r3, sl
 801b1d6:	fb06 e202 	mla	r2, r6, r2, lr
 801b1da:	9300      	str	r3, [sp, #0]
 801b1dc:	9b00      	ldr	r3, [sp, #0]
 801b1de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b1e2:	b292      	uxth	r2, r2
 801b1e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b1e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b1ec:	f8bd 3000 	ldrh.w	r3, [sp]
 801b1f0:	4581      	cmp	r9, r0
 801b1f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b1f6:	f84c 3b04 	str.w	r3, [ip], #4
 801b1fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b1fe:	d2db      	bcs.n	801b1b8 <quorem+0x44>
 801b200:	f855 300b 	ldr.w	r3, [r5, fp]
 801b204:	b92b      	cbnz	r3, 801b212 <quorem+0x9e>
 801b206:	9b01      	ldr	r3, [sp, #4]
 801b208:	3b04      	subs	r3, #4
 801b20a:	429d      	cmp	r5, r3
 801b20c:	461a      	mov	r2, r3
 801b20e:	d32e      	bcc.n	801b26e <quorem+0xfa>
 801b210:	613c      	str	r4, [r7, #16]
 801b212:	4638      	mov	r0, r7
 801b214:	f001 fc92 	bl	801cb3c <__mcmp>
 801b218:	2800      	cmp	r0, #0
 801b21a:	db24      	blt.n	801b266 <quorem+0xf2>
 801b21c:	3601      	adds	r6, #1
 801b21e:	4628      	mov	r0, r5
 801b220:	f04f 0c00 	mov.w	ip, #0
 801b224:	f858 2b04 	ldr.w	r2, [r8], #4
 801b228:	f8d0 e000 	ldr.w	lr, [r0]
 801b22c:	b293      	uxth	r3, r2
 801b22e:	ebac 0303 	sub.w	r3, ip, r3
 801b232:	0c12      	lsrs	r2, r2, #16
 801b234:	fa13 f38e 	uxtah	r3, r3, lr
 801b238:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b23c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b240:	b29b      	uxth	r3, r3
 801b242:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b246:	45c1      	cmp	r9, r8
 801b248:	f840 3b04 	str.w	r3, [r0], #4
 801b24c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b250:	d2e8      	bcs.n	801b224 <quorem+0xb0>
 801b252:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b25a:	b922      	cbnz	r2, 801b266 <quorem+0xf2>
 801b25c:	3b04      	subs	r3, #4
 801b25e:	429d      	cmp	r5, r3
 801b260:	461a      	mov	r2, r3
 801b262:	d30a      	bcc.n	801b27a <quorem+0x106>
 801b264:	613c      	str	r4, [r7, #16]
 801b266:	4630      	mov	r0, r6
 801b268:	b003      	add	sp, #12
 801b26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b26e:	6812      	ldr	r2, [r2, #0]
 801b270:	3b04      	subs	r3, #4
 801b272:	2a00      	cmp	r2, #0
 801b274:	d1cc      	bne.n	801b210 <quorem+0x9c>
 801b276:	3c01      	subs	r4, #1
 801b278:	e7c7      	b.n	801b20a <quorem+0x96>
 801b27a:	6812      	ldr	r2, [r2, #0]
 801b27c:	3b04      	subs	r3, #4
 801b27e:	2a00      	cmp	r2, #0
 801b280:	d1f0      	bne.n	801b264 <quorem+0xf0>
 801b282:	3c01      	subs	r4, #1
 801b284:	e7eb      	b.n	801b25e <quorem+0xea>
 801b286:	2000      	movs	r0, #0
 801b288:	e7ee      	b.n	801b268 <quorem+0xf4>
 801b28a:	0000      	movs	r0, r0
 801b28c:	0000      	movs	r0, r0
	...

0801b290 <_dtoa_r>:
 801b290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b294:	ed2d 8b04 	vpush	{d8-d9}
 801b298:	ec57 6b10 	vmov	r6, r7, d0
 801b29c:	b093      	sub	sp, #76	; 0x4c
 801b29e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b2a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801b2a4:	9106      	str	r1, [sp, #24]
 801b2a6:	ee10 aa10 	vmov	sl, s0
 801b2aa:	4604      	mov	r4, r0
 801b2ac:	9209      	str	r2, [sp, #36]	; 0x24
 801b2ae:	930c      	str	r3, [sp, #48]	; 0x30
 801b2b0:	46bb      	mov	fp, r7
 801b2b2:	b975      	cbnz	r5, 801b2d2 <_dtoa_r+0x42>
 801b2b4:	2010      	movs	r0, #16
 801b2b6:	f001 f94d 	bl	801c554 <malloc>
 801b2ba:	4602      	mov	r2, r0
 801b2bc:	6260      	str	r0, [r4, #36]	; 0x24
 801b2be:	b920      	cbnz	r0, 801b2ca <_dtoa_r+0x3a>
 801b2c0:	4ba7      	ldr	r3, [pc, #668]	; (801b560 <_dtoa_r+0x2d0>)
 801b2c2:	21ea      	movs	r1, #234	; 0xea
 801b2c4:	48a7      	ldr	r0, [pc, #668]	; (801b564 <_dtoa_r+0x2d4>)
 801b2c6:	f002 f8bd 	bl	801d444 <__assert_func>
 801b2ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b2ce:	6005      	str	r5, [r0, #0]
 801b2d0:	60c5      	str	r5, [r0, #12]
 801b2d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b2d4:	6819      	ldr	r1, [r3, #0]
 801b2d6:	b151      	cbz	r1, 801b2ee <_dtoa_r+0x5e>
 801b2d8:	685a      	ldr	r2, [r3, #4]
 801b2da:	604a      	str	r2, [r1, #4]
 801b2dc:	2301      	movs	r3, #1
 801b2de:	4093      	lsls	r3, r2
 801b2e0:	608b      	str	r3, [r1, #8]
 801b2e2:	4620      	mov	r0, r4
 801b2e4:	f001 f99e 	bl	801c624 <_Bfree>
 801b2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b2ea:	2200      	movs	r2, #0
 801b2ec:	601a      	str	r2, [r3, #0]
 801b2ee:	1e3b      	subs	r3, r7, #0
 801b2f0:	bfaa      	itet	ge
 801b2f2:	2300      	movge	r3, #0
 801b2f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801b2f8:	f8c8 3000 	strge.w	r3, [r8]
 801b2fc:	4b9a      	ldr	r3, [pc, #616]	; (801b568 <_dtoa_r+0x2d8>)
 801b2fe:	bfbc      	itt	lt
 801b300:	2201      	movlt	r2, #1
 801b302:	f8c8 2000 	strlt.w	r2, [r8]
 801b306:	ea33 030b 	bics.w	r3, r3, fp
 801b30a:	d11b      	bne.n	801b344 <_dtoa_r+0xb4>
 801b30c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b30e:	f242 730f 	movw	r3, #9999	; 0x270f
 801b312:	6013      	str	r3, [r2, #0]
 801b314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b318:	4333      	orrs	r3, r6
 801b31a:	f000 8592 	beq.w	801be42 <_dtoa_r+0xbb2>
 801b31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b320:	b963      	cbnz	r3, 801b33c <_dtoa_r+0xac>
 801b322:	4b92      	ldr	r3, [pc, #584]	; (801b56c <_dtoa_r+0x2dc>)
 801b324:	e022      	b.n	801b36c <_dtoa_r+0xdc>
 801b326:	4b92      	ldr	r3, [pc, #584]	; (801b570 <_dtoa_r+0x2e0>)
 801b328:	9301      	str	r3, [sp, #4]
 801b32a:	3308      	adds	r3, #8
 801b32c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b32e:	6013      	str	r3, [r2, #0]
 801b330:	9801      	ldr	r0, [sp, #4]
 801b332:	b013      	add	sp, #76	; 0x4c
 801b334:	ecbd 8b04 	vpop	{d8-d9}
 801b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b33c:	4b8b      	ldr	r3, [pc, #556]	; (801b56c <_dtoa_r+0x2dc>)
 801b33e:	9301      	str	r3, [sp, #4]
 801b340:	3303      	adds	r3, #3
 801b342:	e7f3      	b.n	801b32c <_dtoa_r+0x9c>
 801b344:	2200      	movs	r2, #0
 801b346:	2300      	movs	r3, #0
 801b348:	4650      	mov	r0, sl
 801b34a:	4659      	mov	r1, fp
 801b34c:	f7fd fec4 	bl	80190d8 <__aeabi_dcmpeq>
 801b350:	ec4b ab19 	vmov	d9, sl, fp
 801b354:	4680      	mov	r8, r0
 801b356:	b158      	cbz	r0, 801b370 <_dtoa_r+0xe0>
 801b358:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b35a:	2301      	movs	r3, #1
 801b35c:	6013      	str	r3, [r2, #0]
 801b35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b360:	2b00      	cmp	r3, #0
 801b362:	f000 856b 	beq.w	801be3c <_dtoa_r+0xbac>
 801b366:	4883      	ldr	r0, [pc, #524]	; (801b574 <_dtoa_r+0x2e4>)
 801b368:	6018      	str	r0, [r3, #0]
 801b36a:	1e43      	subs	r3, r0, #1
 801b36c:	9301      	str	r3, [sp, #4]
 801b36e:	e7df      	b.n	801b330 <_dtoa_r+0xa0>
 801b370:	ec4b ab10 	vmov	d0, sl, fp
 801b374:	aa10      	add	r2, sp, #64	; 0x40
 801b376:	a911      	add	r1, sp, #68	; 0x44
 801b378:	4620      	mov	r0, r4
 801b37a:	f001 fd01 	bl	801cd80 <__d2b>
 801b37e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801b382:	ee08 0a10 	vmov	s16, r0
 801b386:	2d00      	cmp	r5, #0
 801b388:	f000 8084 	beq.w	801b494 <_dtoa_r+0x204>
 801b38c:	ee19 3a90 	vmov	r3, s19
 801b390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b394:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b398:	4656      	mov	r6, sl
 801b39a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b39e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b3a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b3a6:	4b74      	ldr	r3, [pc, #464]	; (801b578 <_dtoa_r+0x2e8>)
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	4630      	mov	r0, r6
 801b3ac:	4639      	mov	r1, r7
 801b3ae:	f7fd fa73 	bl	8018898 <__aeabi_dsub>
 801b3b2:	a365      	add	r3, pc, #404	; (adr r3, 801b548 <_dtoa_r+0x2b8>)
 801b3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3b8:	f7fd fc26 	bl	8018c08 <__aeabi_dmul>
 801b3bc:	a364      	add	r3, pc, #400	; (adr r3, 801b550 <_dtoa_r+0x2c0>)
 801b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3c2:	f7fd fa6b 	bl	801889c <__adddf3>
 801b3c6:	4606      	mov	r6, r0
 801b3c8:	4628      	mov	r0, r5
 801b3ca:	460f      	mov	r7, r1
 801b3cc:	f7fd fbb2 	bl	8018b34 <__aeabi_i2d>
 801b3d0:	a361      	add	r3, pc, #388	; (adr r3, 801b558 <_dtoa_r+0x2c8>)
 801b3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b3d6:	f7fd fc17 	bl	8018c08 <__aeabi_dmul>
 801b3da:	4602      	mov	r2, r0
 801b3dc:	460b      	mov	r3, r1
 801b3de:	4630      	mov	r0, r6
 801b3e0:	4639      	mov	r1, r7
 801b3e2:	f7fd fa5b 	bl	801889c <__adddf3>
 801b3e6:	4606      	mov	r6, r0
 801b3e8:	460f      	mov	r7, r1
 801b3ea:	f7fd febd 	bl	8019168 <__aeabi_d2iz>
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	9000      	str	r0, [sp, #0]
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	4630      	mov	r0, r6
 801b3f6:	4639      	mov	r1, r7
 801b3f8:	f7fd fe78 	bl	80190ec <__aeabi_dcmplt>
 801b3fc:	b150      	cbz	r0, 801b414 <_dtoa_r+0x184>
 801b3fe:	9800      	ldr	r0, [sp, #0]
 801b400:	f7fd fb98 	bl	8018b34 <__aeabi_i2d>
 801b404:	4632      	mov	r2, r6
 801b406:	463b      	mov	r3, r7
 801b408:	f7fd fe66 	bl	80190d8 <__aeabi_dcmpeq>
 801b40c:	b910      	cbnz	r0, 801b414 <_dtoa_r+0x184>
 801b40e:	9b00      	ldr	r3, [sp, #0]
 801b410:	3b01      	subs	r3, #1
 801b412:	9300      	str	r3, [sp, #0]
 801b414:	9b00      	ldr	r3, [sp, #0]
 801b416:	2b16      	cmp	r3, #22
 801b418:	d85a      	bhi.n	801b4d0 <_dtoa_r+0x240>
 801b41a:	9a00      	ldr	r2, [sp, #0]
 801b41c:	4b57      	ldr	r3, [pc, #348]	; (801b57c <_dtoa_r+0x2ec>)
 801b41e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b422:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b426:	ec51 0b19 	vmov	r0, r1, d9
 801b42a:	f7fd fe5f 	bl	80190ec <__aeabi_dcmplt>
 801b42e:	2800      	cmp	r0, #0
 801b430:	d050      	beq.n	801b4d4 <_dtoa_r+0x244>
 801b432:	9b00      	ldr	r3, [sp, #0]
 801b434:	3b01      	subs	r3, #1
 801b436:	9300      	str	r3, [sp, #0]
 801b438:	2300      	movs	r3, #0
 801b43a:	930b      	str	r3, [sp, #44]	; 0x2c
 801b43c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b43e:	1b5d      	subs	r5, r3, r5
 801b440:	1e6b      	subs	r3, r5, #1
 801b442:	9305      	str	r3, [sp, #20]
 801b444:	bf45      	ittet	mi
 801b446:	f1c5 0301 	rsbmi	r3, r5, #1
 801b44a:	9304      	strmi	r3, [sp, #16]
 801b44c:	2300      	movpl	r3, #0
 801b44e:	2300      	movmi	r3, #0
 801b450:	bf4c      	ite	mi
 801b452:	9305      	strmi	r3, [sp, #20]
 801b454:	9304      	strpl	r3, [sp, #16]
 801b456:	9b00      	ldr	r3, [sp, #0]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	db3d      	blt.n	801b4d8 <_dtoa_r+0x248>
 801b45c:	9b05      	ldr	r3, [sp, #20]
 801b45e:	9a00      	ldr	r2, [sp, #0]
 801b460:	920a      	str	r2, [sp, #40]	; 0x28
 801b462:	4413      	add	r3, r2
 801b464:	9305      	str	r3, [sp, #20]
 801b466:	2300      	movs	r3, #0
 801b468:	9307      	str	r3, [sp, #28]
 801b46a:	9b06      	ldr	r3, [sp, #24]
 801b46c:	2b09      	cmp	r3, #9
 801b46e:	f200 8089 	bhi.w	801b584 <_dtoa_r+0x2f4>
 801b472:	2b05      	cmp	r3, #5
 801b474:	bfc4      	itt	gt
 801b476:	3b04      	subgt	r3, #4
 801b478:	9306      	strgt	r3, [sp, #24]
 801b47a:	9b06      	ldr	r3, [sp, #24]
 801b47c:	f1a3 0302 	sub.w	r3, r3, #2
 801b480:	bfcc      	ite	gt
 801b482:	2500      	movgt	r5, #0
 801b484:	2501      	movle	r5, #1
 801b486:	2b03      	cmp	r3, #3
 801b488:	f200 8087 	bhi.w	801b59a <_dtoa_r+0x30a>
 801b48c:	e8df f003 	tbb	[pc, r3]
 801b490:	59383a2d 	.word	0x59383a2d
 801b494:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801b498:	441d      	add	r5, r3
 801b49a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b49e:	2b20      	cmp	r3, #32
 801b4a0:	bfc1      	itttt	gt
 801b4a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b4a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b4aa:	fa0b f303 	lslgt.w	r3, fp, r3
 801b4ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b4b2:	bfda      	itte	le
 801b4b4:	f1c3 0320 	rsble	r3, r3, #32
 801b4b8:	fa06 f003 	lslle.w	r0, r6, r3
 801b4bc:	4318      	orrgt	r0, r3
 801b4be:	f7fd fb29 	bl	8018b14 <__aeabi_ui2d>
 801b4c2:	2301      	movs	r3, #1
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b4ca:	3d01      	subs	r5, #1
 801b4cc:	930e      	str	r3, [sp, #56]	; 0x38
 801b4ce:	e76a      	b.n	801b3a6 <_dtoa_r+0x116>
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	e7b2      	b.n	801b43a <_dtoa_r+0x1aa>
 801b4d4:	900b      	str	r0, [sp, #44]	; 0x2c
 801b4d6:	e7b1      	b.n	801b43c <_dtoa_r+0x1ac>
 801b4d8:	9b04      	ldr	r3, [sp, #16]
 801b4da:	9a00      	ldr	r2, [sp, #0]
 801b4dc:	1a9b      	subs	r3, r3, r2
 801b4de:	9304      	str	r3, [sp, #16]
 801b4e0:	4253      	negs	r3, r2
 801b4e2:	9307      	str	r3, [sp, #28]
 801b4e4:	2300      	movs	r3, #0
 801b4e6:	930a      	str	r3, [sp, #40]	; 0x28
 801b4e8:	e7bf      	b.n	801b46a <_dtoa_r+0x1da>
 801b4ea:	2300      	movs	r3, #0
 801b4ec:	9308      	str	r3, [sp, #32]
 801b4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	dc55      	bgt.n	801b5a0 <_dtoa_r+0x310>
 801b4f4:	2301      	movs	r3, #1
 801b4f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b4fa:	461a      	mov	r2, r3
 801b4fc:	9209      	str	r2, [sp, #36]	; 0x24
 801b4fe:	e00c      	b.n	801b51a <_dtoa_r+0x28a>
 801b500:	2301      	movs	r3, #1
 801b502:	e7f3      	b.n	801b4ec <_dtoa_r+0x25c>
 801b504:	2300      	movs	r3, #0
 801b506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b508:	9308      	str	r3, [sp, #32]
 801b50a:	9b00      	ldr	r3, [sp, #0]
 801b50c:	4413      	add	r3, r2
 801b50e:	9302      	str	r3, [sp, #8]
 801b510:	3301      	adds	r3, #1
 801b512:	2b01      	cmp	r3, #1
 801b514:	9303      	str	r3, [sp, #12]
 801b516:	bfb8      	it	lt
 801b518:	2301      	movlt	r3, #1
 801b51a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b51c:	2200      	movs	r2, #0
 801b51e:	6042      	str	r2, [r0, #4]
 801b520:	2204      	movs	r2, #4
 801b522:	f102 0614 	add.w	r6, r2, #20
 801b526:	429e      	cmp	r6, r3
 801b528:	6841      	ldr	r1, [r0, #4]
 801b52a:	d93d      	bls.n	801b5a8 <_dtoa_r+0x318>
 801b52c:	4620      	mov	r0, r4
 801b52e:	f001 f839 	bl	801c5a4 <_Balloc>
 801b532:	9001      	str	r0, [sp, #4]
 801b534:	2800      	cmp	r0, #0
 801b536:	d13b      	bne.n	801b5b0 <_dtoa_r+0x320>
 801b538:	4b11      	ldr	r3, [pc, #68]	; (801b580 <_dtoa_r+0x2f0>)
 801b53a:	4602      	mov	r2, r0
 801b53c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b540:	e6c0      	b.n	801b2c4 <_dtoa_r+0x34>
 801b542:	2301      	movs	r3, #1
 801b544:	e7df      	b.n	801b506 <_dtoa_r+0x276>
 801b546:	bf00      	nop
 801b548:	636f4361 	.word	0x636f4361
 801b54c:	3fd287a7 	.word	0x3fd287a7
 801b550:	8b60c8b3 	.word	0x8b60c8b3
 801b554:	3fc68a28 	.word	0x3fc68a28
 801b558:	509f79fb 	.word	0x509f79fb
 801b55c:	3fd34413 	.word	0x3fd34413
 801b560:	080520c6 	.word	0x080520c6
 801b564:	080520dd 	.word	0x080520dd
 801b568:	7ff00000 	.word	0x7ff00000
 801b56c:	080520c2 	.word	0x080520c2
 801b570:	080520b9 	.word	0x080520b9
 801b574:	08051f3d 	.word	0x08051f3d
 801b578:	3ff80000 	.word	0x3ff80000
 801b57c:	08052248 	.word	0x08052248
 801b580:	08052138 	.word	0x08052138
 801b584:	2501      	movs	r5, #1
 801b586:	2300      	movs	r3, #0
 801b588:	9306      	str	r3, [sp, #24]
 801b58a:	9508      	str	r5, [sp, #32]
 801b58c:	f04f 33ff 	mov.w	r3, #4294967295
 801b590:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b594:	2200      	movs	r2, #0
 801b596:	2312      	movs	r3, #18
 801b598:	e7b0      	b.n	801b4fc <_dtoa_r+0x26c>
 801b59a:	2301      	movs	r3, #1
 801b59c:	9308      	str	r3, [sp, #32]
 801b59e:	e7f5      	b.n	801b58c <_dtoa_r+0x2fc>
 801b5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801b5a6:	e7b8      	b.n	801b51a <_dtoa_r+0x28a>
 801b5a8:	3101      	adds	r1, #1
 801b5aa:	6041      	str	r1, [r0, #4]
 801b5ac:	0052      	lsls	r2, r2, #1
 801b5ae:	e7b8      	b.n	801b522 <_dtoa_r+0x292>
 801b5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b5b2:	9a01      	ldr	r2, [sp, #4]
 801b5b4:	601a      	str	r2, [r3, #0]
 801b5b6:	9b03      	ldr	r3, [sp, #12]
 801b5b8:	2b0e      	cmp	r3, #14
 801b5ba:	f200 809d 	bhi.w	801b6f8 <_dtoa_r+0x468>
 801b5be:	2d00      	cmp	r5, #0
 801b5c0:	f000 809a 	beq.w	801b6f8 <_dtoa_r+0x468>
 801b5c4:	9b00      	ldr	r3, [sp, #0]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	dd32      	ble.n	801b630 <_dtoa_r+0x3a0>
 801b5ca:	4ab7      	ldr	r2, [pc, #732]	; (801b8a8 <_dtoa_r+0x618>)
 801b5cc:	f003 030f 	and.w	r3, r3, #15
 801b5d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b5d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b5d8:	9b00      	ldr	r3, [sp, #0]
 801b5da:	05d8      	lsls	r0, r3, #23
 801b5dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801b5e0:	d516      	bpl.n	801b610 <_dtoa_r+0x380>
 801b5e2:	4bb2      	ldr	r3, [pc, #712]	; (801b8ac <_dtoa_r+0x61c>)
 801b5e4:	ec51 0b19 	vmov	r0, r1, d9
 801b5e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b5ec:	f7fd fc36 	bl	8018e5c <__aeabi_ddiv>
 801b5f0:	f007 070f 	and.w	r7, r7, #15
 801b5f4:	4682      	mov	sl, r0
 801b5f6:	468b      	mov	fp, r1
 801b5f8:	2503      	movs	r5, #3
 801b5fa:	4eac      	ldr	r6, [pc, #688]	; (801b8ac <_dtoa_r+0x61c>)
 801b5fc:	b957      	cbnz	r7, 801b614 <_dtoa_r+0x384>
 801b5fe:	4642      	mov	r2, r8
 801b600:	464b      	mov	r3, r9
 801b602:	4650      	mov	r0, sl
 801b604:	4659      	mov	r1, fp
 801b606:	f7fd fc29 	bl	8018e5c <__aeabi_ddiv>
 801b60a:	4682      	mov	sl, r0
 801b60c:	468b      	mov	fp, r1
 801b60e:	e028      	b.n	801b662 <_dtoa_r+0x3d2>
 801b610:	2502      	movs	r5, #2
 801b612:	e7f2      	b.n	801b5fa <_dtoa_r+0x36a>
 801b614:	07f9      	lsls	r1, r7, #31
 801b616:	d508      	bpl.n	801b62a <_dtoa_r+0x39a>
 801b618:	4640      	mov	r0, r8
 801b61a:	4649      	mov	r1, r9
 801b61c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b620:	f7fd faf2 	bl	8018c08 <__aeabi_dmul>
 801b624:	3501      	adds	r5, #1
 801b626:	4680      	mov	r8, r0
 801b628:	4689      	mov	r9, r1
 801b62a:	107f      	asrs	r7, r7, #1
 801b62c:	3608      	adds	r6, #8
 801b62e:	e7e5      	b.n	801b5fc <_dtoa_r+0x36c>
 801b630:	f000 809b 	beq.w	801b76a <_dtoa_r+0x4da>
 801b634:	9b00      	ldr	r3, [sp, #0]
 801b636:	4f9d      	ldr	r7, [pc, #628]	; (801b8ac <_dtoa_r+0x61c>)
 801b638:	425e      	negs	r6, r3
 801b63a:	4b9b      	ldr	r3, [pc, #620]	; (801b8a8 <_dtoa_r+0x618>)
 801b63c:	f006 020f 	and.w	r2, r6, #15
 801b640:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b648:	ec51 0b19 	vmov	r0, r1, d9
 801b64c:	f7fd fadc 	bl	8018c08 <__aeabi_dmul>
 801b650:	1136      	asrs	r6, r6, #4
 801b652:	4682      	mov	sl, r0
 801b654:	468b      	mov	fp, r1
 801b656:	2300      	movs	r3, #0
 801b658:	2502      	movs	r5, #2
 801b65a:	2e00      	cmp	r6, #0
 801b65c:	d17a      	bne.n	801b754 <_dtoa_r+0x4c4>
 801b65e:	2b00      	cmp	r3, #0
 801b660:	d1d3      	bne.n	801b60a <_dtoa_r+0x37a>
 801b662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b664:	2b00      	cmp	r3, #0
 801b666:	f000 8082 	beq.w	801b76e <_dtoa_r+0x4de>
 801b66a:	4b91      	ldr	r3, [pc, #580]	; (801b8b0 <_dtoa_r+0x620>)
 801b66c:	2200      	movs	r2, #0
 801b66e:	4650      	mov	r0, sl
 801b670:	4659      	mov	r1, fp
 801b672:	f7fd fd3b 	bl	80190ec <__aeabi_dcmplt>
 801b676:	2800      	cmp	r0, #0
 801b678:	d079      	beq.n	801b76e <_dtoa_r+0x4de>
 801b67a:	9b03      	ldr	r3, [sp, #12]
 801b67c:	2b00      	cmp	r3, #0
 801b67e:	d076      	beq.n	801b76e <_dtoa_r+0x4de>
 801b680:	9b02      	ldr	r3, [sp, #8]
 801b682:	2b00      	cmp	r3, #0
 801b684:	dd36      	ble.n	801b6f4 <_dtoa_r+0x464>
 801b686:	9b00      	ldr	r3, [sp, #0]
 801b688:	4650      	mov	r0, sl
 801b68a:	4659      	mov	r1, fp
 801b68c:	1e5f      	subs	r7, r3, #1
 801b68e:	2200      	movs	r2, #0
 801b690:	4b88      	ldr	r3, [pc, #544]	; (801b8b4 <_dtoa_r+0x624>)
 801b692:	f7fd fab9 	bl	8018c08 <__aeabi_dmul>
 801b696:	9e02      	ldr	r6, [sp, #8]
 801b698:	4682      	mov	sl, r0
 801b69a:	468b      	mov	fp, r1
 801b69c:	3501      	adds	r5, #1
 801b69e:	4628      	mov	r0, r5
 801b6a0:	f7fd fa48 	bl	8018b34 <__aeabi_i2d>
 801b6a4:	4652      	mov	r2, sl
 801b6a6:	465b      	mov	r3, fp
 801b6a8:	f7fd faae 	bl	8018c08 <__aeabi_dmul>
 801b6ac:	4b82      	ldr	r3, [pc, #520]	; (801b8b8 <_dtoa_r+0x628>)
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	f7fd f8f4 	bl	801889c <__adddf3>
 801b6b4:	46d0      	mov	r8, sl
 801b6b6:	46d9      	mov	r9, fp
 801b6b8:	4682      	mov	sl, r0
 801b6ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801b6be:	2e00      	cmp	r6, #0
 801b6c0:	d158      	bne.n	801b774 <_dtoa_r+0x4e4>
 801b6c2:	4b7e      	ldr	r3, [pc, #504]	; (801b8bc <_dtoa_r+0x62c>)
 801b6c4:	2200      	movs	r2, #0
 801b6c6:	4640      	mov	r0, r8
 801b6c8:	4649      	mov	r1, r9
 801b6ca:	f7fd f8e5 	bl	8018898 <__aeabi_dsub>
 801b6ce:	4652      	mov	r2, sl
 801b6d0:	465b      	mov	r3, fp
 801b6d2:	4680      	mov	r8, r0
 801b6d4:	4689      	mov	r9, r1
 801b6d6:	f7fd fd27 	bl	8019128 <__aeabi_dcmpgt>
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	f040 8295 	bne.w	801bc0a <_dtoa_r+0x97a>
 801b6e0:	4652      	mov	r2, sl
 801b6e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801b6e6:	4640      	mov	r0, r8
 801b6e8:	4649      	mov	r1, r9
 801b6ea:	f7fd fcff 	bl	80190ec <__aeabi_dcmplt>
 801b6ee:	2800      	cmp	r0, #0
 801b6f0:	f040 8289 	bne.w	801bc06 <_dtoa_r+0x976>
 801b6f4:	ec5b ab19 	vmov	sl, fp, d9
 801b6f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	f2c0 8148 	blt.w	801b990 <_dtoa_r+0x700>
 801b700:	9a00      	ldr	r2, [sp, #0]
 801b702:	2a0e      	cmp	r2, #14
 801b704:	f300 8144 	bgt.w	801b990 <_dtoa_r+0x700>
 801b708:	4b67      	ldr	r3, [pc, #412]	; (801b8a8 <_dtoa_r+0x618>)
 801b70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b70e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b714:	2b00      	cmp	r3, #0
 801b716:	f280 80d5 	bge.w	801b8c4 <_dtoa_r+0x634>
 801b71a:	9b03      	ldr	r3, [sp, #12]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	f300 80d1 	bgt.w	801b8c4 <_dtoa_r+0x634>
 801b722:	f040 826f 	bne.w	801bc04 <_dtoa_r+0x974>
 801b726:	4b65      	ldr	r3, [pc, #404]	; (801b8bc <_dtoa_r+0x62c>)
 801b728:	2200      	movs	r2, #0
 801b72a:	4640      	mov	r0, r8
 801b72c:	4649      	mov	r1, r9
 801b72e:	f7fd fa6b 	bl	8018c08 <__aeabi_dmul>
 801b732:	4652      	mov	r2, sl
 801b734:	465b      	mov	r3, fp
 801b736:	f7fd fced 	bl	8019114 <__aeabi_dcmpge>
 801b73a:	9e03      	ldr	r6, [sp, #12]
 801b73c:	4637      	mov	r7, r6
 801b73e:	2800      	cmp	r0, #0
 801b740:	f040 8245 	bne.w	801bbce <_dtoa_r+0x93e>
 801b744:	9d01      	ldr	r5, [sp, #4]
 801b746:	2331      	movs	r3, #49	; 0x31
 801b748:	f805 3b01 	strb.w	r3, [r5], #1
 801b74c:	9b00      	ldr	r3, [sp, #0]
 801b74e:	3301      	adds	r3, #1
 801b750:	9300      	str	r3, [sp, #0]
 801b752:	e240      	b.n	801bbd6 <_dtoa_r+0x946>
 801b754:	07f2      	lsls	r2, r6, #31
 801b756:	d505      	bpl.n	801b764 <_dtoa_r+0x4d4>
 801b758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b75c:	f7fd fa54 	bl	8018c08 <__aeabi_dmul>
 801b760:	3501      	adds	r5, #1
 801b762:	2301      	movs	r3, #1
 801b764:	1076      	asrs	r6, r6, #1
 801b766:	3708      	adds	r7, #8
 801b768:	e777      	b.n	801b65a <_dtoa_r+0x3ca>
 801b76a:	2502      	movs	r5, #2
 801b76c:	e779      	b.n	801b662 <_dtoa_r+0x3d2>
 801b76e:	9f00      	ldr	r7, [sp, #0]
 801b770:	9e03      	ldr	r6, [sp, #12]
 801b772:	e794      	b.n	801b69e <_dtoa_r+0x40e>
 801b774:	9901      	ldr	r1, [sp, #4]
 801b776:	4b4c      	ldr	r3, [pc, #304]	; (801b8a8 <_dtoa_r+0x618>)
 801b778:	4431      	add	r1, r6
 801b77a:	910d      	str	r1, [sp, #52]	; 0x34
 801b77c:	9908      	ldr	r1, [sp, #32]
 801b77e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b782:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b786:	2900      	cmp	r1, #0
 801b788:	d043      	beq.n	801b812 <_dtoa_r+0x582>
 801b78a:	494d      	ldr	r1, [pc, #308]	; (801b8c0 <_dtoa_r+0x630>)
 801b78c:	2000      	movs	r0, #0
 801b78e:	f7fd fb65 	bl	8018e5c <__aeabi_ddiv>
 801b792:	4652      	mov	r2, sl
 801b794:	465b      	mov	r3, fp
 801b796:	f7fd f87f 	bl	8018898 <__aeabi_dsub>
 801b79a:	9d01      	ldr	r5, [sp, #4]
 801b79c:	4682      	mov	sl, r0
 801b79e:	468b      	mov	fp, r1
 801b7a0:	4649      	mov	r1, r9
 801b7a2:	4640      	mov	r0, r8
 801b7a4:	f7fd fce0 	bl	8019168 <__aeabi_d2iz>
 801b7a8:	4606      	mov	r6, r0
 801b7aa:	f7fd f9c3 	bl	8018b34 <__aeabi_i2d>
 801b7ae:	4602      	mov	r2, r0
 801b7b0:	460b      	mov	r3, r1
 801b7b2:	4640      	mov	r0, r8
 801b7b4:	4649      	mov	r1, r9
 801b7b6:	f7fd f86f 	bl	8018898 <__aeabi_dsub>
 801b7ba:	3630      	adds	r6, #48	; 0x30
 801b7bc:	f805 6b01 	strb.w	r6, [r5], #1
 801b7c0:	4652      	mov	r2, sl
 801b7c2:	465b      	mov	r3, fp
 801b7c4:	4680      	mov	r8, r0
 801b7c6:	4689      	mov	r9, r1
 801b7c8:	f7fd fc90 	bl	80190ec <__aeabi_dcmplt>
 801b7cc:	2800      	cmp	r0, #0
 801b7ce:	d163      	bne.n	801b898 <_dtoa_r+0x608>
 801b7d0:	4642      	mov	r2, r8
 801b7d2:	464b      	mov	r3, r9
 801b7d4:	4936      	ldr	r1, [pc, #216]	; (801b8b0 <_dtoa_r+0x620>)
 801b7d6:	2000      	movs	r0, #0
 801b7d8:	f7fd f85e 	bl	8018898 <__aeabi_dsub>
 801b7dc:	4652      	mov	r2, sl
 801b7de:	465b      	mov	r3, fp
 801b7e0:	f7fd fc84 	bl	80190ec <__aeabi_dcmplt>
 801b7e4:	2800      	cmp	r0, #0
 801b7e6:	f040 80b5 	bne.w	801b954 <_dtoa_r+0x6c4>
 801b7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b7ec:	429d      	cmp	r5, r3
 801b7ee:	d081      	beq.n	801b6f4 <_dtoa_r+0x464>
 801b7f0:	4b30      	ldr	r3, [pc, #192]	; (801b8b4 <_dtoa_r+0x624>)
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	4650      	mov	r0, sl
 801b7f6:	4659      	mov	r1, fp
 801b7f8:	f7fd fa06 	bl	8018c08 <__aeabi_dmul>
 801b7fc:	4b2d      	ldr	r3, [pc, #180]	; (801b8b4 <_dtoa_r+0x624>)
 801b7fe:	4682      	mov	sl, r0
 801b800:	468b      	mov	fp, r1
 801b802:	4640      	mov	r0, r8
 801b804:	4649      	mov	r1, r9
 801b806:	2200      	movs	r2, #0
 801b808:	f7fd f9fe 	bl	8018c08 <__aeabi_dmul>
 801b80c:	4680      	mov	r8, r0
 801b80e:	4689      	mov	r9, r1
 801b810:	e7c6      	b.n	801b7a0 <_dtoa_r+0x510>
 801b812:	4650      	mov	r0, sl
 801b814:	4659      	mov	r1, fp
 801b816:	f7fd f9f7 	bl	8018c08 <__aeabi_dmul>
 801b81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b81c:	9d01      	ldr	r5, [sp, #4]
 801b81e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b820:	4682      	mov	sl, r0
 801b822:	468b      	mov	fp, r1
 801b824:	4649      	mov	r1, r9
 801b826:	4640      	mov	r0, r8
 801b828:	f7fd fc9e 	bl	8019168 <__aeabi_d2iz>
 801b82c:	4606      	mov	r6, r0
 801b82e:	f7fd f981 	bl	8018b34 <__aeabi_i2d>
 801b832:	3630      	adds	r6, #48	; 0x30
 801b834:	4602      	mov	r2, r0
 801b836:	460b      	mov	r3, r1
 801b838:	4640      	mov	r0, r8
 801b83a:	4649      	mov	r1, r9
 801b83c:	f7fd f82c 	bl	8018898 <__aeabi_dsub>
 801b840:	f805 6b01 	strb.w	r6, [r5], #1
 801b844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b846:	429d      	cmp	r5, r3
 801b848:	4680      	mov	r8, r0
 801b84a:	4689      	mov	r9, r1
 801b84c:	f04f 0200 	mov.w	r2, #0
 801b850:	d124      	bne.n	801b89c <_dtoa_r+0x60c>
 801b852:	4b1b      	ldr	r3, [pc, #108]	; (801b8c0 <_dtoa_r+0x630>)
 801b854:	4650      	mov	r0, sl
 801b856:	4659      	mov	r1, fp
 801b858:	f7fd f820 	bl	801889c <__adddf3>
 801b85c:	4602      	mov	r2, r0
 801b85e:	460b      	mov	r3, r1
 801b860:	4640      	mov	r0, r8
 801b862:	4649      	mov	r1, r9
 801b864:	f7fd fc60 	bl	8019128 <__aeabi_dcmpgt>
 801b868:	2800      	cmp	r0, #0
 801b86a:	d173      	bne.n	801b954 <_dtoa_r+0x6c4>
 801b86c:	4652      	mov	r2, sl
 801b86e:	465b      	mov	r3, fp
 801b870:	4913      	ldr	r1, [pc, #76]	; (801b8c0 <_dtoa_r+0x630>)
 801b872:	2000      	movs	r0, #0
 801b874:	f7fd f810 	bl	8018898 <__aeabi_dsub>
 801b878:	4602      	mov	r2, r0
 801b87a:	460b      	mov	r3, r1
 801b87c:	4640      	mov	r0, r8
 801b87e:	4649      	mov	r1, r9
 801b880:	f7fd fc34 	bl	80190ec <__aeabi_dcmplt>
 801b884:	2800      	cmp	r0, #0
 801b886:	f43f af35 	beq.w	801b6f4 <_dtoa_r+0x464>
 801b88a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b88c:	1e6b      	subs	r3, r5, #1
 801b88e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b890:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b894:	2b30      	cmp	r3, #48	; 0x30
 801b896:	d0f8      	beq.n	801b88a <_dtoa_r+0x5fa>
 801b898:	9700      	str	r7, [sp, #0]
 801b89a:	e049      	b.n	801b930 <_dtoa_r+0x6a0>
 801b89c:	4b05      	ldr	r3, [pc, #20]	; (801b8b4 <_dtoa_r+0x624>)
 801b89e:	f7fd f9b3 	bl	8018c08 <__aeabi_dmul>
 801b8a2:	4680      	mov	r8, r0
 801b8a4:	4689      	mov	r9, r1
 801b8a6:	e7bd      	b.n	801b824 <_dtoa_r+0x594>
 801b8a8:	08052248 	.word	0x08052248
 801b8ac:	08052220 	.word	0x08052220
 801b8b0:	3ff00000 	.word	0x3ff00000
 801b8b4:	40240000 	.word	0x40240000
 801b8b8:	401c0000 	.word	0x401c0000
 801b8bc:	40140000 	.word	0x40140000
 801b8c0:	3fe00000 	.word	0x3fe00000
 801b8c4:	9d01      	ldr	r5, [sp, #4]
 801b8c6:	4656      	mov	r6, sl
 801b8c8:	465f      	mov	r7, fp
 801b8ca:	4642      	mov	r2, r8
 801b8cc:	464b      	mov	r3, r9
 801b8ce:	4630      	mov	r0, r6
 801b8d0:	4639      	mov	r1, r7
 801b8d2:	f7fd fac3 	bl	8018e5c <__aeabi_ddiv>
 801b8d6:	f7fd fc47 	bl	8019168 <__aeabi_d2iz>
 801b8da:	4682      	mov	sl, r0
 801b8dc:	f7fd f92a 	bl	8018b34 <__aeabi_i2d>
 801b8e0:	4642      	mov	r2, r8
 801b8e2:	464b      	mov	r3, r9
 801b8e4:	f7fd f990 	bl	8018c08 <__aeabi_dmul>
 801b8e8:	4602      	mov	r2, r0
 801b8ea:	460b      	mov	r3, r1
 801b8ec:	4630      	mov	r0, r6
 801b8ee:	4639      	mov	r1, r7
 801b8f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b8f4:	f7fc ffd0 	bl	8018898 <__aeabi_dsub>
 801b8f8:	f805 6b01 	strb.w	r6, [r5], #1
 801b8fc:	9e01      	ldr	r6, [sp, #4]
 801b8fe:	9f03      	ldr	r7, [sp, #12]
 801b900:	1bae      	subs	r6, r5, r6
 801b902:	42b7      	cmp	r7, r6
 801b904:	4602      	mov	r2, r0
 801b906:	460b      	mov	r3, r1
 801b908:	d135      	bne.n	801b976 <_dtoa_r+0x6e6>
 801b90a:	f7fc ffc7 	bl	801889c <__adddf3>
 801b90e:	4642      	mov	r2, r8
 801b910:	464b      	mov	r3, r9
 801b912:	4606      	mov	r6, r0
 801b914:	460f      	mov	r7, r1
 801b916:	f7fd fc07 	bl	8019128 <__aeabi_dcmpgt>
 801b91a:	b9d0      	cbnz	r0, 801b952 <_dtoa_r+0x6c2>
 801b91c:	4642      	mov	r2, r8
 801b91e:	464b      	mov	r3, r9
 801b920:	4630      	mov	r0, r6
 801b922:	4639      	mov	r1, r7
 801b924:	f7fd fbd8 	bl	80190d8 <__aeabi_dcmpeq>
 801b928:	b110      	cbz	r0, 801b930 <_dtoa_r+0x6a0>
 801b92a:	f01a 0f01 	tst.w	sl, #1
 801b92e:	d110      	bne.n	801b952 <_dtoa_r+0x6c2>
 801b930:	4620      	mov	r0, r4
 801b932:	ee18 1a10 	vmov	r1, s16
 801b936:	f000 fe75 	bl	801c624 <_Bfree>
 801b93a:	2300      	movs	r3, #0
 801b93c:	9800      	ldr	r0, [sp, #0]
 801b93e:	702b      	strb	r3, [r5, #0]
 801b940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b942:	3001      	adds	r0, #1
 801b944:	6018      	str	r0, [r3, #0]
 801b946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b948:	2b00      	cmp	r3, #0
 801b94a:	f43f acf1 	beq.w	801b330 <_dtoa_r+0xa0>
 801b94e:	601d      	str	r5, [r3, #0]
 801b950:	e4ee      	b.n	801b330 <_dtoa_r+0xa0>
 801b952:	9f00      	ldr	r7, [sp, #0]
 801b954:	462b      	mov	r3, r5
 801b956:	461d      	mov	r5, r3
 801b958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b95c:	2a39      	cmp	r2, #57	; 0x39
 801b95e:	d106      	bne.n	801b96e <_dtoa_r+0x6de>
 801b960:	9a01      	ldr	r2, [sp, #4]
 801b962:	429a      	cmp	r2, r3
 801b964:	d1f7      	bne.n	801b956 <_dtoa_r+0x6c6>
 801b966:	9901      	ldr	r1, [sp, #4]
 801b968:	2230      	movs	r2, #48	; 0x30
 801b96a:	3701      	adds	r7, #1
 801b96c:	700a      	strb	r2, [r1, #0]
 801b96e:	781a      	ldrb	r2, [r3, #0]
 801b970:	3201      	adds	r2, #1
 801b972:	701a      	strb	r2, [r3, #0]
 801b974:	e790      	b.n	801b898 <_dtoa_r+0x608>
 801b976:	4ba6      	ldr	r3, [pc, #664]	; (801bc10 <_dtoa_r+0x980>)
 801b978:	2200      	movs	r2, #0
 801b97a:	f7fd f945 	bl	8018c08 <__aeabi_dmul>
 801b97e:	2200      	movs	r2, #0
 801b980:	2300      	movs	r3, #0
 801b982:	4606      	mov	r6, r0
 801b984:	460f      	mov	r7, r1
 801b986:	f7fd fba7 	bl	80190d8 <__aeabi_dcmpeq>
 801b98a:	2800      	cmp	r0, #0
 801b98c:	d09d      	beq.n	801b8ca <_dtoa_r+0x63a>
 801b98e:	e7cf      	b.n	801b930 <_dtoa_r+0x6a0>
 801b990:	9a08      	ldr	r2, [sp, #32]
 801b992:	2a00      	cmp	r2, #0
 801b994:	f000 80d7 	beq.w	801bb46 <_dtoa_r+0x8b6>
 801b998:	9a06      	ldr	r2, [sp, #24]
 801b99a:	2a01      	cmp	r2, #1
 801b99c:	f300 80ba 	bgt.w	801bb14 <_dtoa_r+0x884>
 801b9a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b9a2:	2a00      	cmp	r2, #0
 801b9a4:	f000 80b2 	beq.w	801bb0c <_dtoa_r+0x87c>
 801b9a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b9ac:	9e07      	ldr	r6, [sp, #28]
 801b9ae:	9d04      	ldr	r5, [sp, #16]
 801b9b0:	9a04      	ldr	r2, [sp, #16]
 801b9b2:	441a      	add	r2, r3
 801b9b4:	9204      	str	r2, [sp, #16]
 801b9b6:	9a05      	ldr	r2, [sp, #20]
 801b9b8:	2101      	movs	r1, #1
 801b9ba:	441a      	add	r2, r3
 801b9bc:	4620      	mov	r0, r4
 801b9be:	9205      	str	r2, [sp, #20]
 801b9c0:	f000 ff32 	bl	801c828 <__i2b>
 801b9c4:	4607      	mov	r7, r0
 801b9c6:	2d00      	cmp	r5, #0
 801b9c8:	dd0c      	ble.n	801b9e4 <_dtoa_r+0x754>
 801b9ca:	9b05      	ldr	r3, [sp, #20]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	dd09      	ble.n	801b9e4 <_dtoa_r+0x754>
 801b9d0:	42ab      	cmp	r3, r5
 801b9d2:	9a04      	ldr	r2, [sp, #16]
 801b9d4:	bfa8      	it	ge
 801b9d6:	462b      	movge	r3, r5
 801b9d8:	1ad2      	subs	r2, r2, r3
 801b9da:	9204      	str	r2, [sp, #16]
 801b9dc:	9a05      	ldr	r2, [sp, #20]
 801b9de:	1aed      	subs	r5, r5, r3
 801b9e0:	1ad3      	subs	r3, r2, r3
 801b9e2:	9305      	str	r3, [sp, #20]
 801b9e4:	9b07      	ldr	r3, [sp, #28]
 801b9e6:	b31b      	cbz	r3, 801ba30 <_dtoa_r+0x7a0>
 801b9e8:	9b08      	ldr	r3, [sp, #32]
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	f000 80af 	beq.w	801bb4e <_dtoa_r+0x8be>
 801b9f0:	2e00      	cmp	r6, #0
 801b9f2:	dd13      	ble.n	801ba1c <_dtoa_r+0x78c>
 801b9f4:	4639      	mov	r1, r7
 801b9f6:	4632      	mov	r2, r6
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	f000 ffd5 	bl	801c9a8 <__pow5mult>
 801b9fe:	ee18 2a10 	vmov	r2, s16
 801ba02:	4601      	mov	r1, r0
 801ba04:	4607      	mov	r7, r0
 801ba06:	4620      	mov	r0, r4
 801ba08:	f000 ff24 	bl	801c854 <__multiply>
 801ba0c:	ee18 1a10 	vmov	r1, s16
 801ba10:	4680      	mov	r8, r0
 801ba12:	4620      	mov	r0, r4
 801ba14:	f000 fe06 	bl	801c624 <_Bfree>
 801ba18:	ee08 8a10 	vmov	s16, r8
 801ba1c:	9b07      	ldr	r3, [sp, #28]
 801ba1e:	1b9a      	subs	r2, r3, r6
 801ba20:	d006      	beq.n	801ba30 <_dtoa_r+0x7a0>
 801ba22:	ee18 1a10 	vmov	r1, s16
 801ba26:	4620      	mov	r0, r4
 801ba28:	f000 ffbe 	bl	801c9a8 <__pow5mult>
 801ba2c:	ee08 0a10 	vmov	s16, r0
 801ba30:	2101      	movs	r1, #1
 801ba32:	4620      	mov	r0, r4
 801ba34:	f000 fef8 	bl	801c828 <__i2b>
 801ba38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	4606      	mov	r6, r0
 801ba3e:	f340 8088 	ble.w	801bb52 <_dtoa_r+0x8c2>
 801ba42:	461a      	mov	r2, r3
 801ba44:	4601      	mov	r1, r0
 801ba46:	4620      	mov	r0, r4
 801ba48:	f000 ffae 	bl	801c9a8 <__pow5mult>
 801ba4c:	9b06      	ldr	r3, [sp, #24]
 801ba4e:	2b01      	cmp	r3, #1
 801ba50:	4606      	mov	r6, r0
 801ba52:	f340 8081 	ble.w	801bb58 <_dtoa_r+0x8c8>
 801ba56:	f04f 0800 	mov.w	r8, #0
 801ba5a:	6933      	ldr	r3, [r6, #16]
 801ba5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801ba60:	6918      	ldr	r0, [r3, #16]
 801ba62:	f000 fe91 	bl	801c788 <__hi0bits>
 801ba66:	f1c0 0020 	rsb	r0, r0, #32
 801ba6a:	9b05      	ldr	r3, [sp, #20]
 801ba6c:	4418      	add	r0, r3
 801ba6e:	f010 001f 	ands.w	r0, r0, #31
 801ba72:	f000 8092 	beq.w	801bb9a <_dtoa_r+0x90a>
 801ba76:	f1c0 0320 	rsb	r3, r0, #32
 801ba7a:	2b04      	cmp	r3, #4
 801ba7c:	f340 808a 	ble.w	801bb94 <_dtoa_r+0x904>
 801ba80:	f1c0 001c 	rsb	r0, r0, #28
 801ba84:	9b04      	ldr	r3, [sp, #16]
 801ba86:	4403      	add	r3, r0
 801ba88:	9304      	str	r3, [sp, #16]
 801ba8a:	9b05      	ldr	r3, [sp, #20]
 801ba8c:	4403      	add	r3, r0
 801ba8e:	4405      	add	r5, r0
 801ba90:	9305      	str	r3, [sp, #20]
 801ba92:	9b04      	ldr	r3, [sp, #16]
 801ba94:	2b00      	cmp	r3, #0
 801ba96:	dd07      	ble.n	801baa8 <_dtoa_r+0x818>
 801ba98:	ee18 1a10 	vmov	r1, s16
 801ba9c:	461a      	mov	r2, r3
 801ba9e:	4620      	mov	r0, r4
 801baa0:	f000 ffdc 	bl	801ca5c <__lshift>
 801baa4:	ee08 0a10 	vmov	s16, r0
 801baa8:	9b05      	ldr	r3, [sp, #20]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	dd05      	ble.n	801baba <_dtoa_r+0x82a>
 801baae:	4631      	mov	r1, r6
 801bab0:	461a      	mov	r2, r3
 801bab2:	4620      	mov	r0, r4
 801bab4:	f000 ffd2 	bl	801ca5c <__lshift>
 801bab8:	4606      	mov	r6, r0
 801baba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801babc:	2b00      	cmp	r3, #0
 801babe:	d06e      	beq.n	801bb9e <_dtoa_r+0x90e>
 801bac0:	ee18 0a10 	vmov	r0, s16
 801bac4:	4631      	mov	r1, r6
 801bac6:	f001 f839 	bl	801cb3c <__mcmp>
 801baca:	2800      	cmp	r0, #0
 801bacc:	da67      	bge.n	801bb9e <_dtoa_r+0x90e>
 801bace:	9b00      	ldr	r3, [sp, #0]
 801bad0:	3b01      	subs	r3, #1
 801bad2:	ee18 1a10 	vmov	r1, s16
 801bad6:	9300      	str	r3, [sp, #0]
 801bad8:	220a      	movs	r2, #10
 801bada:	2300      	movs	r3, #0
 801badc:	4620      	mov	r0, r4
 801bade:	f000 fdc3 	bl	801c668 <__multadd>
 801bae2:	9b08      	ldr	r3, [sp, #32]
 801bae4:	ee08 0a10 	vmov	s16, r0
 801bae8:	2b00      	cmp	r3, #0
 801baea:	f000 81b1 	beq.w	801be50 <_dtoa_r+0xbc0>
 801baee:	2300      	movs	r3, #0
 801baf0:	4639      	mov	r1, r7
 801baf2:	220a      	movs	r2, #10
 801baf4:	4620      	mov	r0, r4
 801baf6:	f000 fdb7 	bl	801c668 <__multadd>
 801bafa:	9b02      	ldr	r3, [sp, #8]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	4607      	mov	r7, r0
 801bb00:	f300 808e 	bgt.w	801bc20 <_dtoa_r+0x990>
 801bb04:	9b06      	ldr	r3, [sp, #24]
 801bb06:	2b02      	cmp	r3, #2
 801bb08:	dc51      	bgt.n	801bbae <_dtoa_r+0x91e>
 801bb0a:	e089      	b.n	801bc20 <_dtoa_r+0x990>
 801bb0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801bb12:	e74b      	b.n	801b9ac <_dtoa_r+0x71c>
 801bb14:	9b03      	ldr	r3, [sp, #12]
 801bb16:	1e5e      	subs	r6, r3, #1
 801bb18:	9b07      	ldr	r3, [sp, #28]
 801bb1a:	42b3      	cmp	r3, r6
 801bb1c:	bfbf      	itttt	lt
 801bb1e:	9b07      	ldrlt	r3, [sp, #28]
 801bb20:	9607      	strlt	r6, [sp, #28]
 801bb22:	1af2      	sublt	r2, r6, r3
 801bb24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bb26:	bfb6      	itet	lt
 801bb28:	189b      	addlt	r3, r3, r2
 801bb2a:	1b9e      	subge	r6, r3, r6
 801bb2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bb2e:	9b03      	ldr	r3, [sp, #12]
 801bb30:	bfb8      	it	lt
 801bb32:	2600      	movlt	r6, #0
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	bfb7      	itett	lt
 801bb38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801bb3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801bb40:	1a9d      	sublt	r5, r3, r2
 801bb42:	2300      	movlt	r3, #0
 801bb44:	e734      	b.n	801b9b0 <_dtoa_r+0x720>
 801bb46:	9e07      	ldr	r6, [sp, #28]
 801bb48:	9d04      	ldr	r5, [sp, #16]
 801bb4a:	9f08      	ldr	r7, [sp, #32]
 801bb4c:	e73b      	b.n	801b9c6 <_dtoa_r+0x736>
 801bb4e:	9a07      	ldr	r2, [sp, #28]
 801bb50:	e767      	b.n	801ba22 <_dtoa_r+0x792>
 801bb52:	9b06      	ldr	r3, [sp, #24]
 801bb54:	2b01      	cmp	r3, #1
 801bb56:	dc18      	bgt.n	801bb8a <_dtoa_r+0x8fa>
 801bb58:	f1ba 0f00 	cmp.w	sl, #0
 801bb5c:	d115      	bne.n	801bb8a <_dtoa_r+0x8fa>
 801bb5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bb62:	b993      	cbnz	r3, 801bb8a <_dtoa_r+0x8fa>
 801bb64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bb68:	0d1b      	lsrs	r3, r3, #20
 801bb6a:	051b      	lsls	r3, r3, #20
 801bb6c:	b183      	cbz	r3, 801bb90 <_dtoa_r+0x900>
 801bb6e:	9b04      	ldr	r3, [sp, #16]
 801bb70:	3301      	adds	r3, #1
 801bb72:	9304      	str	r3, [sp, #16]
 801bb74:	9b05      	ldr	r3, [sp, #20]
 801bb76:	3301      	adds	r3, #1
 801bb78:	9305      	str	r3, [sp, #20]
 801bb7a:	f04f 0801 	mov.w	r8, #1
 801bb7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	f47f af6a 	bne.w	801ba5a <_dtoa_r+0x7ca>
 801bb86:	2001      	movs	r0, #1
 801bb88:	e76f      	b.n	801ba6a <_dtoa_r+0x7da>
 801bb8a:	f04f 0800 	mov.w	r8, #0
 801bb8e:	e7f6      	b.n	801bb7e <_dtoa_r+0x8ee>
 801bb90:	4698      	mov	r8, r3
 801bb92:	e7f4      	b.n	801bb7e <_dtoa_r+0x8ee>
 801bb94:	f43f af7d 	beq.w	801ba92 <_dtoa_r+0x802>
 801bb98:	4618      	mov	r0, r3
 801bb9a:	301c      	adds	r0, #28
 801bb9c:	e772      	b.n	801ba84 <_dtoa_r+0x7f4>
 801bb9e:	9b03      	ldr	r3, [sp, #12]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	dc37      	bgt.n	801bc14 <_dtoa_r+0x984>
 801bba4:	9b06      	ldr	r3, [sp, #24]
 801bba6:	2b02      	cmp	r3, #2
 801bba8:	dd34      	ble.n	801bc14 <_dtoa_r+0x984>
 801bbaa:	9b03      	ldr	r3, [sp, #12]
 801bbac:	9302      	str	r3, [sp, #8]
 801bbae:	9b02      	ldr	r3, [sp, #8]
 801bbb0:	b96b      	cbnz	r3, 801bbce <_dtoa_r+0x93e>
 801bbb2:	4631      	mov	r1, r6
 801bbb4:	2205      	movs	r2, #5
 801bbb6:	4620      	mov	r0, r4
 801bbb8:	f000 fd56 	bl	801c668 <__multadd>
 801bbbc:	4601      	mov	r1, r0
 801bbbe:	4606      	mov	r6, r0
 801bbc0:	ee18 0a10 	vmov	r0, s16
 801bbc4:	f000 ffba 	bl	801cb3c <__mcmp>
 801bbc8:	2800      	cmp	r0, #0
 801bbca:	f73f adbb 	bgt.w	801b744 <_dtoa_r+0x4b4>
 801bbce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bbd0:	9d01      	ldr	r5, [sp, #4]
 801bbd2:	43db      	mvns	r3, r3
 801bbd4:	9300      	str	r3, [sp, #0]
 801bbd6:	f04f 0800 	mov.w	r8, #0
 801bbda:	4631      	mov	r1, r6
 801bbdc:	4620      	mov	r0, r4
 801bbde:	f000 fd21 	bl	801c624 <_Bfree>
 801bbe2:	2f00      	cmp	r7, #0
 801bbe4:	f43f aea4 	beq.w	801b930 <_dtoa_r+0x6a0>
 801bbe8:	f1b8 0f00 	cmp.w	r8, #0
 801bbec:	d005      	beq.n	801bbfa <_dtoa_r+0x96a>
 801bbee:	45b8      	cmp	r8, r7
 801bbf0:	d003      	beq.n	801bbfa <_dtoa_r+0x96a>
 801bbf2:	4641      	mov	r1, r8
 801bbf4:	4620      	mov	r0, r4
 801bbf6:	f000 fd15 	bl	801c624 <_Bfree>
 801bbfa:	4639      	mov	r1, r7
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	f000 fd11 	bl	801c624 <_Bfree>
 801bc02:	e695      	b.n	801b930 <_dtoa_r+0x6a0>
 801bc04:	2600      	movs	r6, #0
 801bc06:	4637      	mov	r7, r6
 801bc08:	e7e1      	b.n	801bbce <_dtoa_r+0x93e>
 801bc0a:	9700      	str	r7, [sp, #0]
 801bc0c:	4637      	mov	r7, r6
 801bc0e:	e599      	b.n	801b744 <_dtoa_r+0x4b4>
 801bc10:	40240000 	.word	0x40240000
 801bc14:	9b08      	ldr	r3, [sp, #32]
 801bc16:	2b00      	cmp	r3, #0
 801bc18:	f000 80ca 	beq.w	801bdb0 <_dtoa_r+0xb20>
 801bc1c:	9b03      	ldr	r3, [sp, #12]
 801bc1e:	9302      	str	r3, [sp, #8]
 801bc20:	2d00      	cmp	r5, #0
 801bc22:	dd05      	ble.n	801bc30 <_dtoa_r+0x9a0>
 801bc24:	4639      	mov	r1, r7
 801bc26:	462a      	mov	r2, r5
 801bc28:	4620      	mov	r0, r4
 801bc2a:	f000 ff17 	bl	801ca5c <__lshift>
 801bc2e:	4607      	mov	r7, r0
 801bc30:	f1b8 0f00 	cmp.w	r8, #0
 801bc34:	d05b      	beq.n	801bcee <_dtoa_r+0xa5e>
 801bc36:	6879      	ldr	r1, [r7, #4]
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f000 fcb3 	bl	801c5a4 <_Balloc>
 801bc3e:	4605      	mov	r5, r0
 801bc40:	b928      	cbnz	r0, 801bc4e <_dtoa_r+0x9be>
 801bc42:	4b87      	ldr	r3, [pc, #540]	; (801be60 <_dtoa_r+0xbd0>)
 801bc44:	4602      	mov	r2, r0
 801bc46:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bc4a:	f7ff bb3b 	b.w	801b2c4 <_dtoa_r+0x34>
 801bc4e:	693a      	ldr	r2, [r7, #16]
 801bc50:	3202      	adds	r2, #2
 801bc52:	0092      	lsls	r2, r2, #2
 801bc54:	f107 010c 	add.w	r1, r7, #12
 801bc58:	300c      	adds	r0, #12
 801bc5a:	f000 fc95 	bl	801c588 <memcpy>
 801bc5e:	2201      	movs	r2, #1
 801bc60:	4629      	mov	r1, r5
 801bc62:	4620      	mov	r0, r4
 801bc64:	f000 fefa 	bl	801ca5c <__lshift>
 801bc68:	9b01      	ldr	r3, [sp, #4]
 801bc6a:	f103 0901 	add.w	r9, r3, #1
 801bc6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801bc72:	4413      	add	r3, r2
 801bc74:	9305      	str	r3, [sp, #20]
 801bc76:	f00a 0301 	and.w	r3, sl, #1
 801bc7a:	46b8      	mov	r8, r7
 801bc7c:	9304      	str	r3, [sp, #16]
 801bc7e:	4607      	mov	r7, r0
 801bc80:	4631      	mov	r1, r6
 801bc82:	ee18 0a10 	vmov	r0, s16
 801bc86:	f7ff fa75 	bl	801b174 <quorem>
 801bc8a:	4641      	mov	r1, r8
 801bc8c:	9002      	str	r0, [sp, #8]
 801bc8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bc92:	ee18 0a10 	vmov	r0, s16
 801bc96:	f000 ff51 	bl	801cb3c <__mcmp>
 801bc9a:	463a      	mov	r2, r7
 801bc9c:	9003      	str	r0, [sp, #12]
 801bc9e:	4631      	mov	r1, r6
 801bca0:	4620      	mov	r0, r4
 801bca2:	f000 ff67 	bl	801cb74 <__mdiff>
 801bca6:	68c2      	ldr	r2, [r0, #12]
 801bca8:	f109 3bff 	add.w	fp, r9, #4294967295
 801bcac:	4605      	mov	r5, r0
 801bcae:	bb02      	cbnz	r2, 801bcf2 <_dtoa_r+0xa62>
 801bcb0:	4601      	mov	r1, r0
 801bcb2:	ee18 0a10 	vmov	r0, s16
 801bcb6:	f000 ff41 	bl	801cb3c <__mcmp>
 801bcba:	4602      	mov	r2, r0
 801bcbc:	4629      	mov	r1, r5
 801bcbe:	4620      	mov	r0, r4
 801bcc0:	9207      	str	r2, [sp, #28]
 801bcc2:	f000 fcaf 	bl	801c624 <_Bfree>
 801bcc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801bcca:	ea43 0102 	orr.w	r1, r3, r2
 801bcce:	9b04      	ldr	r3, [sp, #16]
 801bcd0:	430b      	orrs	r3, r1
 801bcd2:	464d      	mov	r5, r9
 801bcd4:	d10f      	bne.n	801bcf6 <_dtoa_r+0xa66>
 801bcd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bcda:	d02a      	beq.n	801bd32 <_dtoa_r+0xaa2>
 801bcdc:	9b03      	ldr	r3, [sp, #12]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	dd02      	ble.n	801bce8 <_dtoa_r+0xa58>
 801bce2:	9b02      	ldr	r3, [sp, #8]
 801bce4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801bce8:	f88b a000 	strb.w	sl, [fp]
 801bcec:	e775      	b.n	801bbda <_dtoa_r+0x94a>
 801bcee:	4638      	mov	r0, r7
 801bcf0:	e7ba      	b.n	801bc68 <_dtoa_r+0x9d8>
 801bcf2:	2201      	movs	r2, #1
 801bcf4:	e7e2      	b.n	801bcbc <_dtoa_r+0xa2c>
 801bcf6:	9b03      	ldr	r3, [sp, #12]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	db04      	blt.n	801bd06 <_dtoa_r+0xa76>
 801bcfc:	9906      	ldr	r1, [sp, #24]
 801bcfe:	430b      	orrs	r3, r1
 801bd00:	9904      	ldr	r1, [sp, #16]
 801bd02:	430b      	orrs	r3, r1
 801bd04:	d122      	bne.n	801bd4c <_dtoa_r+0xabc>
 801bd06:	2a00      	cmp	r2, #0
 801bd08:	ddee      	ble.n	801bce8 <_dtoa_r+0xa58>
 801bd0a:	ee18 1a10 	vmov	r1, s16
 801bd0e:	2201      	movs	r2, #1
 801bd10:	4620      	mov	r0, r4
 801bd12:	f000 fea3 	bl	801ca5c <__lshift>
 801bd16:	4631      	mov	r1, r6
 801bd18:	ee08 0a10 	vmov	s16, r0
 801bd1c:	f000 ff0e 	bl	801cb3c <__mcmp>
 801bd20:	2800      	cmp	r0, #0
 801bd22:	dc03      	bgt.n	801bd2c <_dtoa_r+0xa9c>
 801bd24:	d1e0      	bne.n	801bce8 <_dtoa_r+0xa58>
 801bd26:	f01a 0f01 	tst.w	sl, #1
 801bd2a:	d0dd      	beq.n	801bce8 <_dtoa_r+0xa58>
 801bd2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bd30:	d1d7      	bne.n	801bce2 <_dtoa_r+0xa52>
 801bd32:	2339      	movs	r3, #57	; 0x39
 801bd34:	f88b 3000 	strb.w	r3, [fp]
 801bd38:	462b      	mov	r3, r5
 801bd3a:	461d      	mov	r5, r3
 801bd3c:	3b01      	subs	r3, #1
 801bd3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bd42:	2a39      	cmp	r2, #57	; 0x39
 801bd44:	d071      	beq.n	801be2a <_dtoa_r+0xb9a>
 801bd46:	3201      	adds	r2, #1
 801bd48:	701a      	strb	r2, [r3, #0]
 801bd4a:	e746      	b.n	801bbda <_dtoa_r+0x94a>
 801bd4c:	2a00      	cmp	r2, #0
 801bd4e:	dd07      	ble.n	801bd60 <_dtoa_r+0xad0>
 801bd50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801bd54:	d0ed      	beq.n	801bd32 <_dtoa_r+0xaa2>
 801bd56:	f10a 0301 	add.w	r3, sl, #1
 801bd5a:	f88b 3000 	strb.w	r3, [fp]
 801bd5e:	e73c      	b.n	801bbda <_dtoa_r+0x94a>
 801bd60:	9b05      	ldr	r3, [sp, #20]
 801bd62:	f809 ac01 	strb.w	sl, [r9, #-1]
 801bd66:	4599      	cmp	r9, r3
 801bd68:	d047      	beq.n	801bdfa <_dtoa_r+0xb6a>
 801bd6a:	ee18 1a10 	vmov	r1, s16
 801bd6e:	2300      	movs	r3, #0
 801bd70:	220a      	movs	r2, #10
 801bd72:	4620      	mov	r0, r4
 801bd74:	f000 fc78 	bl	801c668 <__multadd>
 801bd78:	45b8      	cmp	r8, r7
 801bd7a:	ee08 0a10 	vmov	s16, r0
 801bd7e:	f04f 0300 	mov.w	r3, #0
 801bd82:	f04f 020a 	mov.w	r2, #10
 801bd86:	4641      	mov	r1, r8
 801bd88:	4620      	mov	r0, r4
 801bd8a:	d106      	bne.n	801bd9a <_dtoa_r+0xb0a>
 801bd8c:	f000 fc6c 	bl	801c668 <__multadd>
 801bd90:	4680      	mov	r8, r0
 801bd92:	4607      	mov	r7, r0
 801bd94:	f109 0901 	add.w	r9, r9, #1
 801bd98:	e772      	b.n	801bc80 <_dtoa_r+0x9f0>
 801bd9a:	f000 fc65 	bl	801c668 <__multadd>
 801bd9e:	4639      	mov	r1, r7
 801bda0:	4680      	mov	r8, r0
 801bda2:	2300      	movs	r3, #0
 801bda4:	220a      	movs	r2, #10
 801bda6:	4620      	mov	r0, r4
 801bda8:	f000 fc5e 	bl	801c668 <__multadd>
 801bdac:	4607      	mov	r7, r0
 801bdae:	e7f1      	b.n	801bd94 <_dtoa_r+0xb04>
 801bdb0:	9b03      	ldr	r3, [sp, #12]
 801bdb2:	9302      	str	r3, [sp, #8]
 801bdb4:	9d01      	ldr	r5, [sp, #4]
 801bdb6:	ee18 0a10 	vmov	r0, s16
 801bdba:	4631      	mov	r1, r6
 801bdbc:	f7ff f9da 	bl	801b174 <quorem>
 801bdc0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801bdc4:	9b01      	ldr	r3, [sp, #4]
 801bdc6:	f805 ab01 	strb.w	sl, [r5], #1
 801bdca:	1aea      	subs	r2, r5, r3
 801bdcc:	9b02      	ldr	r3, [sp, #8]
 801bdce:	4293      	cmp	r3, r2
 801bdd0:	dd09      	ble.n	801bde6 <_dtoa_r+0xb56>
 801bdd2:	ee18 1a10 	vmov	r1, s16
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	220a      	movs	r2, #10
 801bdda:	4620      	mov	r0, r4
 801bddc:	f000 fc44 	bl	801c668 <__multadd>
 801bde0:	ee08 0a10 	vmov	s16, r0
 801bde4:	e7e7      	b.n	801bdb6 <_dtoa_r+0xb26>
 801bde6:	9b02      	ldr	r3, [sp, #8]
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	bfc8      	it	gt
 801bdec:	461d      	movgt	r5, r3
 801bdee:	9b01      	ldr	r3, [sp, #4]
 801bdf0:	bfd8      	it	le
 801bdf2:	2501      	movle	r5, #1
 801bdf4:	441d      	add	r5, r3
 801bdf6:	f04f 0800 	mov.w	r8, #0
 801bdfa:	ee18 1a10 	vmov	r1, s16
 801bdfe:	2201      	movs	r2, #1
 801be00:	4620      	mov	r0, r4
 801be02:	f000 fe2b 	bl	801ca5c <__lshift>
 801be06:	4631      	mov	r1, r6
 801be08:	ee08 0a10 	vmov	s16, r0
 801be0c:	f000 fe96 	bl	801cb3c <__mcmp>
 801be10:	2800      	cmp	r0, #0
 801be12:	dc91      	bgt.n	801bd38 <_dtoa_r+0xaa8>
 801be14:	d102      	bne.n	801be1c <_dtoa_r+0xb8c>
 801be16:	f01a 0f01 	tst.w	sl, #1
 801be1a:	d18d      	bne.n	801bd38 <_dtoa_r+0xaa8>
 801be1c:	462b      	mov	r3, r5
 801be1e:	461d      	mov	r5, r3
 801be20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801be24:	2a30      	cmp	r2, #48	; 0x30
 801be26:	d0fa      	beq.n	801be1e <_dtoa_r+0xb8e>
 801be28:	e6d7      	b.n	801bbda <_dtoa_r+0x94a>
 801be2a:	9a01      	ldr	r2, [sp, #4]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	d184      	bne.n	801bd3a <_dtoa_r+0xaaa>
 801be30:	9b00      	ldr	r3, [sp, #0]
 801be32:	3301      	adds	r3, #1
 801be34:	9300      	str	r3, [sp, #0]
 801be36:	2331      	movs	r3, #49	; 0x31
 801be38:	7013      	strb	r3, [r2, #0]
 801be3a:	e6ce      	b.n	801bbda <_dtoa_r+0x94a>
 801be3c:	4b09      	ldr	r3, [pc, #36]	; (801be64 <_dtoa_r+0xbd4>)
 801be3e:	f7ff ba95 	b.w	801b36c <_dtoa_r+0xdc>
 801be42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801be44:	2b00      	cmp	r3, #0
 801be46:	f47f aa6e 	bne.w	801b326 <_dtoa_r+0x96>
 801be4a:	4b07      	ldr	r3, [pc, #28]	; (801be68 <_dtoa_r+0xbd8>)
 801be4c:	f7ff ba8e 	b.w	801b36c <_dtoa_r+0xdc>
 801be50:	9b02      	ldr	r3, [sp, #8]
 801be52:	2b00      	cmp	r3, #0
 801be54:	dcae      	bgt.n	801bdb4 <_dtoa_r+0xb24>
 801be56:	9b06      	ldr	r3, [sp, #24]
 801be58:	2b02      	cmp	r3, #2
 801be5a:	f73f aea8 	bgt.w	801bbae <_dtoa_r+0x91e>
 801be5e:	e7a9      	b.n	801bdb4 <_dtoa_r+0xb24>
 801be60:	08052138 	.word	0x08052138
 801be64:	08051f3c 	.word	0x08051f3c
 801be68:	080520b9 	.word	0x080520b9

0801be6c <rshift>:
 801be6c:	6903      	ldr	r3, [r0, #16]
 801be6e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801be72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be76:	ea4f 1261 	mov.w	r2, r1, asr #5
 801be7a:	f100 0414 	add.w	r4, r0, #20
 801be7e:	dd45      	ble.n	801bf0c <rshift+0xa0>
 801be80:	f011 011f 	ands.w	r1, r1, #31
 801be84:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801be88:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801be8c:	d10c      	bne.n	801bea8 <rshift+0x3c>
 801be8e:	f100 0710 	add.w	r7, r0, #16
 801be92:	4629      	mov	r1, r5
 801be94:	42b1      	cmp	r1, r6
 801be96:	d334      	bcc.n	801bf02 <rshift+0x96>
 801be98:	1a9b      	subs	r3, r3, r2
 801be9a:	009b      	lsls	r3, r3, #2
 801be9c:	1eea      	subs	r2, r5, #3
 801be9e:	4296      	cmp	r6, r2
 801bea0:	bf38      	it	cc
 801bea2:	2300      	movcc	r3, #0
 801bea4:	4423      	add	r3, r4
 801bea6:	e015      	b.n	801bed4 <rshift+0x68>
 801bea8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801beac:	f1c1 0820 	rsb	r8, r1, #32
 801beb0:	40cf      	lsrs	r7, r1
 801beb2:	f105 0e04 	add.w	lr, r5, #4
 801beb6:	46a1      	mov	r9, r4
 801beb8:	4576      	cmp	r6, lr
 801beba:	46f4      	mov	ip, lr
 801bebc:	d815      	bhi.n	801beea <rshift+0x7e>
 801bebe:	1a9a      	subs	r2, r3, r2
 801bec0:	0092      	lsls	r2, r2, #2
 801bec2:	3a04      	subs	r2, #4
 801bec4:	3501      	adds	r5, #1
 801bec6:	42ae      	cmp	r6, r5
 801bec8:	bf38      	it	cc
 801beca:	2200      	movcc	r2, #0
 801becc:	18a3      	adds	r3, r4, r2
 801bece:	50a7      	str	r7, [r4, r2]
 801bed0:	b107      	cbz	r7, 801bed4 <rshift+0x68>
 801bed2:	3304      	adds	r3, #4
 801bed4:	1b1a      	subs	r2, r3, r4
 801bed6:	42a3      	cmp	r3, r4
 801bed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bedc:	bf08      	it	eq
 801bede:	2300      	moveq	r3, #0
 801bee0:	6102      	str	r2, [r0, #16]
 801bee2:	bf08      	it	eq
 801bee4:	6143      	streq	r3, [r0, #20]
 801bee6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801beea:	f8dc c000 	ldr.w	ip, [ip]
 801beee:	fa0c fc08 	lsl.w	ip, ip, r8
 801bef2:	ea4c 0707 	orr.w	r7, ip, r7
 801bef6:	f849 7b04 	str.w	r7, [r9], #4
 801befa:	f85e 7b04 	ldr.w	r7, [lr], #4
 801befe:	40cf      	lsrs	r7, r1
 801bf00:	e7da      	b.n	801beb8 <rshift+0x4c>
 801bf02:	f851 cb04 	ldr.w	ip, [r1], #4
 801bf06:	f847 cf04 	str.w	ip, [r7, #4]!
 801bf0a:	e7c3      	b.n	801be94 <rshift+0x28>
 801bf0c:	4623      	mov	r3, r4
 801bf0e:	e7e1      	b.n	801bed4 <rshift+0x68>

0801bf10 <__hexdig_fun>:
 801bf10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bf14:	2b09      	cmp	r3, #9
 801bf16:	d802      	bhi.n	801bf1e <__hexdig_fun+0xe>
 801bf18:	3820      	subs	r0, #32
 801bf1a:	b2c0      	uxtb	r0, r0
 801bf1c:	4770      	bx	lr
 801bf1e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801bf22:	2b05      	cmp	r3, #5
 801bf24:	d801      	bhi.n	801bf2a <__hexdig_fun+0x1a>
 801bf26:	3847      	subs	r0, #71	; 0x47
 801bf28:	e7f7      	b.n	801bf1a <__hexdig_fun+0xa>
 801bf2a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bf2e:	2b05      	cmp	r3, #5
 801bf30:	d801      	bhi.n	801bf36 <__hexdig_fun+0x26>
 801bf32:	3827      	subs	r0, #39	; 0x27
 801bf34:	e7f1      	b.n	801bf1a <__hexdig_fun+0xa>
 801bf36:	2000      	movs	r0, #0
 801bf38:	4770      	bx	lr
	...

0801bf3c <__gethex>:
 801bf3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf40:	ed2d 8b02 	vpush	{d8}
 801bf44:	b089      	sub	sp, #36	; 0x24
 801bf46:	ee08 0a10 	vmov	s16, r0
 801bf4a:	9304      	str	r3, [sp, #16]
 801bf4c:	4bb4      	ldr	r3, [pc, #720]	; (801c220 <__gethex+0x2e4>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	9301      	str	r3, [sp, #4]
 801bf52:	4618      	mov	r0, r3
 801bf54:	468b      	mov	fp, r1
 801bf56:	4690      	mov	r8, r2
 801bf58:	f7fc fc40 	bl	80187dc <strlen>
 801bf5c:	9b01      	ldr	r3, [sp, #4]
 801bf5e:	f8db 2000 	ldr.w	r2, [fp]
 801bf62:	4403      	add	r3, r0
 801bf64:	4682      	mov	sl, r0
 801bf66:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bf6a:	9305      	str	r3, [sp, #20]
 801bf6c:	1c93      	adds	r3, r2, #2
 801bf6e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bf72:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bf76:	32fe      	adds	r2, #254	; 0xfe
 801bf78:	18d1      	adds	r1, r2, r3
 801bf7a:	461f      	mov	r7, r3
 801bf7c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bf80:	9100      	str	r1, [sp, #0]
 801bf82:	2830      	cmp	r0, #48	; 0x30
 801bf84:	d0f8      	beq.n	801bf78 <__gethex+0x3c>
 801bf86:	f7ff ffc3 	bl	801bf10 <__hexdig_fun>
 801bf8a:	4604      	mov	r4, r0
 801bf8c:	2800      	cmp	r0, #0
 801bf8e:	d13a      	bne.n	801c006 <__gethex+0xca>
 801bf90:	9901      	ldr	r1, [sp, #4]
 801bf92:	4652      	mov	r2, sl
 801bf94:	4638      	mov	r0, r7
 801bf96:	f001 fa33 	bl	801d400 <strncmp>
 801bf9a:	4605      	mov	r5, r0
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	d168      	bne.n	801c072 <__gethex+0x136>
 801bfa0:	f817 000a 	ldrb.w	r0, [r7, sl]
 801bfa4:	eb07 060a 	add.w	r6, r7, sl
 801bfa8:	f7ff ffb2 	bl	801bf10 <__hexdig_fun>
 801bfac:	2800      	cmp	r0, #0
 801bfae:	d062      	beq.n	801c076 <__gethex+0x13a>
 801bfb0:	4633      	mov	r3, r6
 801bfb2:	7818      	ldrb	r0, [r3, #0]
 801bfb4:	2830      	cmp	r0, #48	; 0x30
 801bfb6:	461f      	mov	r7, r3
 801bfb8:	f103 0301 	add.w	r3, r3, #1
 801bfbc:	d0f9      	beq.n	801bfb2 <__gethex+0x76>
 801bfbe:	f7ff ffa7 	bl	801bf10 <__hexdig_fun>
 801bfc2:	2301      	movs	r3, #1
 801bfc4:	fab0 f480 	clz	r4, r0
 801bfc8:	0964      	lsrs	r4, r4, #5
 801bfca:	4635      	mov	r5, r6
 801bfcc:	9300      	str	r3, [sp, #0]
 801bfce:	463a      	mov	r2, r7
 801bfd0:	4616      	mov	r6, r2
 801bfd2:	3201      	adds	r2, #1
 801bfd4:	7830      	ldrb	r0, [r6, #0]
 801bfd6:	f7ff ff9b 	bl	801bf10 <__hexdig_fun>
 801bfda:	2800      	cmp	r0, #0
 801bfdc:	d1f8      	bne.n	801bfd0 <__gethex+0x94>
 801bfde:	9901      	ldr	r1, [sp, #4]
 801bfe0:	4652      	mov	r2, sl
 801bfe2:	4630      	mov	r0, r6
 801bfe4:	f001 fa0c 	bl	801d400 <strncmp>
 801bfe8:	b980      	cbnz	r0, 801c00c <__gethex+0xd0>
 801bfea:	b94d      	cbnz	r5, 801c000 <__gethex+0xc4>
 801bfec:	eb06 050a 	add.w	r5, r6, sl
 801bff0:	462a      	mov	r2, r5
 801bff2:	4616      	mov	r6, r2
 801bff4:	3201      	adds	r2, #1
 801bff6:	7830      	ldrb	r0, [r6, #0]
 801bff8:	f7ff ff8a 	bl	801bf10 <__hexdig_fun>
 801bffc:	2800      	cmp	r0, #0
 801bffe:	d1f8      	bne.n	801bff2 <__gethex+0xb6>
 801c000:	1bad      	subs	r5, r5, r6
 801c002:	00ad      	lsls	r5, r5, #2
 801c004:	e004      	b.n	801c010 <__gethex+0xd4>
 801c006:	2400      	movs	r4, #0
 801c008:	4625      	mov	r5, r4
 801c00a:	e7e0      	b.n	801bfce <__gethex+0x92>
 801c00c:	2d00      	cmp	r5, #0
 801c00e:	d1f7      	bne.n	801c000 <__gethex+0xc4>
 801c010:	7833      	ldrb	r3, [r6, #0]
 801c012:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801c016:	2b50      	cmp	r3, #80	; 0x50
 801c018:	d13b      	bne.n	801c092 <__gethex+0x156>
 801c01a:	7873      	ldrb	r3, [r6, #1]
 801c01c:	2b2b      	cmp	r3, #43	; 0x2b
 801c01e:	d02c      	beq.n	801c07a <__gethex+0x13e>
 801c020:	2b2d      	cmp	r3, #45	; 0x2d
 801c022:	d02e      	beq.n	801c082 <__gethex+0x146>
 801c024:	1c71      	adds	r1, r6, #1
 801c026:	f04f 0900 	mov.w	r9, #0
 801c02a:	7808      	ldrb	r0, [r1, #0]
 801c02c:	f7ff ff70 	bl	801bf10 <__hexdig_fun>
 801c030:	1e43      	subs	r3, r0, #1
 801c032:	b2db      	uxtb	r3, r3
 801c034:	2b18      	cmp	r3, #24
 801c036:	d82c      	bhi.n	801c092 <__gethex+0x156>
 801c038:	f1a0 0210 	sub.w	r2, r0, #16
 801c03c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c040:	f7ff ff66 	bl	801bf10 <__hexdig_fun>
 801c044:	1e43      	subs	r3, r0, #1
 801c046:	b2db      	uxtb	r3, r3
 801c048:	2b18      	cmp	r3, #24
 801c04a:	d91d      	bls.n	801c088 <__gethex+0x14c>
 801c04c:	f1b9 0f00 	cmp.w	r9, #0
 801c050:	d000      	beq.n	801c054 <__gethex+0x118>
 801c052:	4252      	negs	r2, r2
 801c054:	4415      	add	r5, r2
 801c056:	f8cb 1000 	str.w	r1, [fp]
 801c05a:	b1e4      	cbz	r4, 801c096 <__gethex+0x15a>
 801c05c:	9b00      	ldr	r3, [sp, #0]
 801c05e:	2b00      	cmp	r3, #0
 801c060:	bf14      	ite	ne
 801c062:	2700      	movne	r7, #0
 801c064:	2706      	moveq	r7, #6
 801c066:	4638      	mov	r0, r7
 801c068:	b009      	add	sp, #36	; 0x24
 801c06a:	ecbd 8b02 	vpop	{d8}
 801c06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c072:	463e      	mov	r6, r7
 801c074:	4625      	mov	r5, r4
 801c076:	2401      	movs	r4, #1
 801c078:	e7ca      	b.n	801c010 <__gethex+0xd4>
 801c07a:	f04f 0900 	mov.w	r9, #0
 801c07e:	1cb1      	adds	r1, r6, #2
 801c080:	e7d3      	b.n	801c02a <__gethex+0xee>
 801c082:	f04f 0901 	mov.w	r9, #1
 801c086:	e7fa      	b.n	801c07e <__gethex+0x142>
 801c088:	230a      	movs	r3, #10
 801c08a:	fb03 0202 	mla	r2, r3, r2, r0
 801c08e:	3a10      	subs	r2, #16
 801c090:	e7d4      	b.n	801c03c <__gethex+0x100>
 801c092:	4631      	mov	r1, r6
 801c094:	e7df      	b.n	801c056 <__gethex+0x11a>
 801c096:	1bf3      	subs	r3, r6, r7
 801c098:	3b01      	subs	r3, #1
 801c09a:	4621      	mov	r1, r4
 801c09c:	2b07      	cmp	r3, #7
 801c09e:	dc0b      	bgt.n	801c0b8 <__gethex+0x17c>
 801c0a0:	ee18 0a10 	vmov	r0, s16
 801c0a4:	f000 fa7e 	bl	801c5a4 <_Balloc>
 801c0a8:	4604      	mov	r4, r0
 801c0aa:	b940      	cbnz	r0, 801c0be <__gethex+0x182>
 801c0ac:	4b5d      	ldr	r3, [pc, #372]	; (801c224 <__gethex+0x2e8>)
 801c0ae:	4602      	mov	r2, r0
 801c0b0:	21de      	movs	r1, #222	; 0xde
 801c0b2:	485d      	ldr	r0, [pc, #372]	; (801c228 <__gethex+0x2ec>)
 801c0b4:	f001 f9c6 	bl	801d444 <__assert_func>
 801c0b8:	3101      	adds	r1, #1
 801c0ba:	105b      	asrs	r3, r3, #1
 801c0bc:	e7ee      	b.n	801c09c <__gethex+0x160>
 801c0be:	f100 0914 	add.w	r9, r0, #20
 801c0c2:	f04f 0b00 	mov.w	fp, #0
 801c0c6:	f1ca 0301 	rsb	r3, sl, #1
 801c0ca:	f8cd 9008 	str.w	r9, [sp, #8]
 801c0ce:	f8cd b000 	str.w	fp, [sp]
 801c0d2:	9306      	str	r3, [sp, #24]
 801c0d4:	42b7      	cmp	r7, r6
 801c0d6:	d340      	bcc.n	801c15a <__gethex+0x21e>
 801c0d8:	9802      	ldr	r0, [sp, #8]
 801c0da:	9b00      	ldr	r3, [sp, #0]
 801c0dc:	f840 3b04 	str.w	r3, [r0], #4
 801c0e0:	eba0 0009 	sub.w	r0, r0, r9
 801c0e4:	1080      	asrs	r0, r0, #2
 801c0e6:	0146      	lsls	r6, r0, #5
 801c0e8:	6120      	str	r0, [r4, #16]
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f000 fb4c 	bl	801c788 <__hi0bits>
 801c0f0:	1a30      	subs	r0, r6, r0
 801c0f2:	f8d8 6000 	ldr.w	r6, [r8]
 801c0f6:	42b0      	cmp	r0, r6
 801c0f8:	dd63      	ble.n	801c1c2 <__gethex+0x286>
 801c0fa:	1b87      	subs	r7, r0, r6
 801c0fc:	4639      	mov	r1, r7
 801c0fe:	4620      	mov	r0, r4
 801c100:	f000 fef0 	bl	801cee4 <__any_on>
 801c104:	4682      	mov	sl, r0
 801c106:	b1a8      	cbz	r0, 801c134 <__gethex+0x1f8>
 801c108:	1e7b      	subs	r3, r7, #1
 801c10a:	1159      	asrs	r1, r3, #5
 801c10c:	f003 021f 	and.w	r2, r3, #31
 801c110:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c114:	f04f 0a01 	mov.w	sl, #1
 801c118:	fa0a f202 	lsl.w	r2, sl, r2
 801c11c:	420a      	tst	r2, r1
 801c11e:	d009      	beq.n	801c134 <__gethex+0x1f8>
 801c120:	4553      	cmp	r3, sl
 801c122:	dd05      	ble.n	801c130 <__gethex+0x1f4>
 801c124:	1eb9      	subs	r1, r7, #2
 801c126:	4620      	mov	r0, r4
 801c128:	f000 fedc 	bl	801cee4 <__any_on>
 801c12c:	2800      	cmp	r0, #0
 801c12e:	d145      	bne.n	801c1bc <__gethex+0x280>
 801c130:	f04f 0a02 	mov.w	sl, #2
 801c134:	4639      	mov	r1, r7
 801c136:	4620      	mov	r0, r4
 801c138:	f7ff fe98 	bl	801be6c <rshift>
 801c13c:	443d      	add	r5, r7
 801c13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c142:	42ab      	cmp	r3, r5
 801c144:	da4c      	bge.n	801c1e0 <__gethex+0x2a4>
 801c146:	ee18 0a10 	vmov	r0, s16
 801c14a:	4621      	mov	r1, r4
 801c14c:	f000 fa6a 	bl	801c624 <_Bfree>
 801c150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c152:	2300      	movs	r3, #0
 801c154:	6013      	str	r3, [r2, #0]
 801c156:	27a3      	movs	r7, #163	; 0xa3
 801c158:	e785      	b.n	801c066 <__gethex+0x12a>
 801c15a:	1e73      	subs	r3, r6, #1
 801c15c:	9a05      	ldr	r2, [sp, #20]
 801c15e:	9303      	str	r3, [sp, #12]
 801c160:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c164:	4293      	cmp	r3, r2
 801c166:	d019      	beq.n	801c19c <__gethex+0x260>
 801c168:	f1bb 0f20 	cmp.w	fp, #32
 801c16c:	d107      	bne.n	801c17e <__gethex+0x242>
 801c16e:	9b02      	ldr	r3, [sp, #8]
 801c170:	9a00      	ldr	r2, [sp, #0]
 801c172:	f843 2b04 	str.w	r2, [r3], #4
 801c176:	9302      	str	r3, [sp, #8]
 801c178:	2300      	movs	r3, #0
 801c17a:	9300      	str	r3, [sp, #0]
 801c17c:	469b      	mov	fp, r3
 801c17e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c182:	f7ff fec5 	bl	801bf10 <__hexdig_fun>
 801c186:	9b00      	ldr	r3, [sp, #0]
 801c188:	f000 000f 	and.w	r0, r0, #15
 801c18c:	fa00 f00b 	lsl.w	r0, r0, fp
 801c190:	4303      	orrs	r3, r0
 801c192:	9300      	str	r3, [sp, #0]
 801c194:	f10b 0b04 	add.w	fp, fp, #4
 801c198:	9b03      	ldr	r3, [sp, #12]
 801c19a:	e00d      	b.n	801c1b8 <__gethex+0x27c>
 801c19c:	9b03      	ldr	r3, [sp, #12]
 801c19e:	9a06      	ldr	r2, [sp, #24]
 801c1a0:	4413      	add	r3, r2
 801c1a2:	42bb      	cmp	r3, r7
 801c1a4:	d3e0      	bcc.n	801c168 <__gethex+0x22c>
 801c1a6:	4618      	mov	r0, r3
 801c1a8:	9901      	ldr	r1, [sp, #4]
 801c1aa:	9307      	str	r3, [sp, #28]
 801c1ac:	4652      	mov	r2, sl
 801c1ae:	f001 f927 	bl	801d400 <strncmp>
 801c1b2:	9b07      	ldr	r3, [sp, #28]
 801c1b4:	2800      	cmp	r0, #0
 801c1b6:	d1d7      	bne.n	801c168 <__gethex+0x22c>
 801c1b8:	461e      	mov	r6, r3
 801c1ba:	e78b      	b.n	801c0d4 <__gethex+0x198>
 801c1bc:	f04f 0a03 	mov.w	sl, #3
 801c1c0:	e7b8      	b.n	801c134 <__gethex+0x1f8>
 801c1c2:	da0a      	bge.n	801c1da <__gethex+0x29e>
 801c1c4:	1a37      	subs	r7, r6, r0
 801c1c6:	4621      	mov	r1, r4
 801c1c8:	ee18 0a10 	vmov	r0, s16
 801c1cc:	463a      	mov	r2, r7
 801c1ce:	f000 fc45 	bl	801ca5c <__lshift>
 801c1d2:	1bed      	subs	r5, r5, r7
 801c1d4:	4604      	mov	r4, r0
 801c1d6:	f100 0914 	add.w	r9, r0, #20
 801c1da:	f04f 0a00 	mov.w	sl, #0
 801c1de:	e7ae      	b.n	801c13e <__gethex+0x202>
 801c1e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c1e4:	42a8      	cmp	r0, r5
 801c1e6:	dd72      	ble.n	801c2ce <__gethex+0x392>
 801c1e8:	1b45      	subs	r5, r0, r5
 801c1ea:	42ae      	cmp	r6, r5
 801c1ec:	dc36      	bgt.n	801c25c <__gethex+0x320>
 801c1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c1f2:	2b02      	cmp	r3, #2
 801c1f4:	d02a      	beq.n	801c24c <__gethex+0x310>
 801c1f6:	2b03      	cmp	r3, #3
 801c1f8:	d02c      	beq.n	801c254 <__gethex+0x318>
 801c1fa:	2b01      	cmp	r3, #1
 801c1fc:	d11c      	bne.n	801c238 <__gethex+0x2fc>
 801c1fe:	42ae      	cmp	r6, r5
 801c200:	d11a      	bne.n	801c238 <__gethex+0x2fc>
 801c202:	2e01      	cmp	r6, #1
 801c204:	d112      	bne.n	801c22c <__gethex+0x2f0>
 801c206:	9a04      	ldr	r2, [sp, #16]
 801c208:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c20c:	6013      	str	r3, [r2, #0]
 801c20e:	2301      	movs	r3, #1
 801c210:	6123      	str	r3, [r4, #16]
 801c212:	f8c9 3000 	str.w	r3, [r9]
 801c216:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c218:	2762      	movs	r7, #98	; 0x62
 801c21a:	601c      	str	r4, [r3, #0]
 801c21c:	e723      	b.n	801c066 <__gethex+0x12a>
 801c21e:	bf00      	nop
 801c220:	080521b0 	.word	0x080521b0
 801c224:	08052138 	.word	0x08052138
 801c228:	08052149 	.word	0x08052149
 801c22c:	1e71      	subs	r1, r6, #1
 801c22e:	4620      	mov	r0, r4
 801c230:	f000 fe58 	bl	801cee4 <__any_on>
 801c234:	2800      	cmp	r0, #0
 801c236:	d1e6      	bne.n	801c206 <__gethex+0x2ca>
 801c238:	ee18 0a10 	vmov	r0, s16
 801c23c:	4621      	mov	r1, r4
 801c23e:	f000 f9f1 	bl	801c624 <_Bfree>
 801c242:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c244:	2300      	movs	r3, #0
 801c246:	6013      	str	r3, [r2, #0]
 801c248:	2750      	movs	r7, #80	; 0x50
 801c24a:	e70c      	b.n	801c066 <__gethex+0x12a>
 801c24c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c24e:	2b00      	cmp	r3, #0
 801c250:	d1f2      	bne.n	801c238 <__gethex+0x2fc>
 801c252:	e7d8      	b.n	801c206 <__gethex+0x2ca>
 801c254:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c256:	2b00      	cmp	r3, #0
 801c258:	d1d5      	bne.n	801c206 <__gethex+0x2ca>
 801c25a:	e7ed      	b.n	801c238 <__gethex+0x2fc>
 801c25c:	1e6f      	subs	r7, r5, #1
 801c25e:	f1ba 0f00 	cmp.w	sl, #0
 801c262:	d131      	bne.n	801c2c8 <__gethex+0x38c>
 801c264:	b127      	cbz	r7, 801c270 <__gethex+0x334>
 801c266:	4639      	mov	r1, r7
 801c268:	4620      	mov	r0, r4
 801c26a:	f000 fe3b 	bl	801cee4 <__any_on>
 801c26e:	4682      	mov	sl, r0
 801c270:	117b      	asrs	r3, r7, #5
 801c272:	2101      	movs	r1, #1
 801c274:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c278:	f007 071f 	and.w	r7, r7, #31
 801c27c:	fa01 f707 	lsl.w	r7, r1, r7
 801c280:	421f      	tst	r7, r3
 801c282:	4629      	mov	r1, r5
 801c284:	4620      	mov	r0, r4
 801c286:	bf18      	it	ne
 801c288:	f04a 0a02 	orrne.w	sl, sl, #2
 801c28c:	1b76      	subs	r6, r6, r5
 801c28e:	f7ff fded 	bl	801be6c <rshift>
 801c292:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c296:	2702      	movs	r7, #2
 801c298:	f1ba 0f00 	cmp.w	sl, #0
 801c29c:	d048      	beq.n	801c330 <__gethex+0x3f4>
 801c29e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c2a2:	2b02      	cmp	r3, #2
 801c2a4:	d015      	beq.n	801c2d2 <__gethex+0x396>
 801c2a6:	2b03      	cmp	r3, #3
 801c2a8:	d017      	beq.n	801c2da <__gethex+0x39e>
 801c2aa:	2b01      	cmp	r3, #1
 801c2ac:	d109      	bne.n	801c2c2 <__gethex+0x386>
 801c2ae:	f01a 0f02 	tst.w	sl, #2
 801c2b2:	d006      	beq.n	801c2c2 <__gethex+0x386>
 801c2b4:	f8d9 0000 	ldr.w	r0, [r9]
 801c2b8:	ea4a 0a00 	orr.w	sl, sl, r0
 801c2bc:	f01a 0f01 	tst.w	sl, #1
 801c2c0:	d10e      	bne.n	801c2e0 <__gethex+0x3a4>
 801c2c2:	f047 0710 	orr.w	r7, r7, #16
 801c2c6:	e033      	b.n	801c330 <__gethex+0x3f4>
 801c2c8:	f04f 0a01 	mov.w	sl, #1
 801c2cc:	e7d0      	b.n	801c270 <__gethex+0x334>
 801c2ce:	2701      	movs	r7, #1
 801c2d0:	e7e2      	b.n	801c298 <__gethex+0x35c>
 801c2d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2d4:	f1c3 0301 	rsb	r3, r3, #1
 801c2d8:	9315      	str	r3, [sp, #84]	; 0x54
 801c2da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d0f0      	beq.n	801c2c2 <__gethex+0x386>
 801c2e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c2e4:	f104 0314 	add.w	r3, r4, #20
 801c2e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c2ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c2f0:	f04f 0c00 	mov.w	ip, #0
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c2fe:	d01c      	beq.n	801c33a <__gethex+0x3fe>
 801c300:	3201      	adds	r2, #1
 801c302:	6002      	str	r2, [r0, #0]
 801c304:	2f02      	cmp	r7, #2
 801c306:	f104 0314 	add.w	r3, r4, #20
 801c30a:	d13f      	bne.n	801c38c <__gethex+0x450>
 801c30c:	f8d8 2000 	ldr.w	r2, [r8]
 801c310:	3a01      	subs	r2, #1
 801c312:	42b2      	cmp	r2, r6
 801c314:	d10a      	bne.n	801c32c <__gethex+0x3f0>
 801c316:	1171      	asrs	r1, r6, #5
 801c318:	2201      	movs	r2, #1
 801c31a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c31e:	f006 061f 	and.w	r6, r6, #31
 801c322:	fa02 f606 	lsl.w	r6, r2, r6
 801c326:	421e      	tst	r6, r3
 801c328:	bf18      	it	ne
 801c32a:	4617      	movne	r7, r2
 801c32c:	f047 0720 	orr.w	r7, r7, #32
 801c330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c332:	601c      	str	r4, [r3, #0]
 801c334:	9b04      	ldr	r3, [sp, #16]
 801c336:	601d      	str	r5, [r3, #0]
 801c338:	e695      	b.n	801c066 <__gethex+0x12a>
 801c33a:	4299      	cmp	r1, r3
 801c33c:	f843 cc04 	str.w	ip, [r3, #-4]
 801c340:	d8d8      	bhi.n	801c2f4 <__gethex+0x3b8>
 801c342:	68a3      	ldr	r3, [r4, #8]
 801c344:	459b      	cmp	fp, r3
 801c346:	db19      	blt.n	801c37c <__gethex+0x440>
 801c348:	6861      	ldr	r1, [r4, #4]
 801c34a:	ee18 0a10 	vmov	r0, s16
 801c34e:	3101      	adds	r1, #1
 801c350:	f000 f928 	bl	801c5a4 <_Balloc>
 801c354:	4681      	mov	r9, r0
 801c356:	b918      	cbnz	r0, 801c360 <__gethex+0x424>
 801c358:	4b1a      	ldr	r3, [pc, #104]	; (801c3c4 <__gethex+0x488>)
 801c35a:	4602      	mov	r2, r0
 801c35c:	2184      	movs	r1, #132	; 0x84
 801c35e:	e6a8      	b.n	801c0b2 <__gethex+0x176>
 801c360:	6922      	ldr	r2, [r4, #16]
 801c362:	3202      	adds	r2, #2
 801c364:	f104 010c 	add.w	r1, r4, #12
 801c368:	0092      	lsls	r2, r2, #2
 801c36a:	300c      	adds	r0, #12
 801c36c:	f000 f90c 	bl	801c588 <memcpy>
 801c370:	4621      	mov	r1, r4
 801c372:	ee18 0a10 	vmov	r0, s16
 801c376:	f000 f955 	bl	801c624 <_Bfree>
 801c37a:	464c      	mov	r4, r9
 801c37c:	6923      	ldr	r3, [r4, #16]
 801c37e:	1c5a      	adds	r2, r3, #1
 801c380:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c384:	6122      	str	r2, [r4, #16]
 801c386:	2201      	movs	r2, #1
 801c388:	615a      	str	r2, [r3, #20]
 801c38a:	e7bb      	b.n	801c304 <__gethex+0x3c8>
 801c38c:	6922      	ldr	r2, [r4, #16]
 801c38e:	455a      	cmp	r2, fp
 801c390:	dd0b      	ble.n	801c3aa <__gethex+0x46e>
 801c392:	2101      	movs	r1, #1
 801c394:	4620      	mov	r0, r4
 801c396:	f7ff fd69 	bl	801be6c <rshift>
 801c39a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c39e:	3501      	adds	r5, #1
 801c3a0:	42ab      	cmp	r3, r5
 801c3a2:	f6ff aed0 	blt.w	801c146 <__gethex+0x20a>
 801c3a6:	2701      	movs	r7, #1
 801c3a8:	e7c0      	b.n	801c32c <__gethex+0x3f0>
 801c3aa:	f016 061f 	ands.w	r6, r6, #31
 801c3ae:	d0fa      	beq.n	801c3a6 <__gethex+0x46a>
 801c3b0:	4453      	add	r3, sl
 801c3b2:	f1c6 0620 	rsb	r6, r6, #32
 801c3b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c3ba:	f000 f9e5 	bl	801c788 <__hi0bits>
 801c3be:	42b0      	cmp	r0, r6
 801c3c0:	dbe7      	blt.n	801c392 <__gethex+0x456>
 801c3c2:	e7f0      	b.n	801c3a6 <__gethex+0x46a>
 801c3c4:	08052138 	.word	0x08052138

0801c3c8 <L_shift>:
 801c3c8:	f1c2 0208 	rsb	r2, r2, #8
 801c3cc:	0092      	lsls	r2, r2, #2
 801c3ce:	b570      	push	{r4, r5, r6, lr}
 801c3d0:	f1c2 0620 	rsb	r6, r2, #32
 801c3d4:	6843      	ldr	r3, [r0, #4]
 801c3d6:	6804      	ldr	r4, [r0, #0]
 801c3d8:	fa03 f506 	lsl.w	r5, r3, r6
 801c3dc:	432c      	orrs	r4, r5
 801c3de:	40d3      	lsrs	r3, r2
 801c3e0:	6004      	str	r4, [r0, #0]
 801c3e2:	f840 3f04 	str.w	r3, [r0, #4]!
 801c3e6:	4288      	cmp	r0, r1
 801c3e8:	d3f4      	bcc.n	801c3d4 <L_shift+0xc>
 801c3ea:	bd70      	pop	{r4, r5, r6, pc}

0801c3ec <__match>:
 801c3ec:	b530      	push	{r4, r5, lr}
 801c3ee:	6803      	ldr	r3, [r0, #0]
 801c3f0:	3301      	adds	r3, #1
 801c3f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3f6:	b914      	cbnz	r4, 801c3fe <__match+0x12>
 801c3f8:	6003      	str	r3, [r0, #0]
 801c3fa:	2001      	movs	r0, #1
 801c3fc:	bd30      	pop	{r4, r5, pc}
 801c3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c402:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c406:	2d19      	cmp	r5, #25
 801c408:	bf98      	it	ls
 801c40a:	3220      	addls	r2, #32
 801c40c:	42a2      	cmp	r2, r4
 801c40e:	d0f0      	beq.n	801c3f2 <__match+0x6>
 801c410:	2000      	movs	r0, #0
 801c412:	e7f3      	b.n	801c3fc <__match+0x10>

0801c414 <__hexnan>:
 801c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c418:	680b      	ldr	r3, [r1, #0]
 801c41a:	115e      	asrs	r6, r3, #5
 801c41c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c420:	f013 031f 	ands.w	r3, r3, #31
 801c424:	b087      	sub	sp, #28
 801c426:	bf18      	it	ne
 801c428:	3604      	addne	r6, #4
 801c42a:	2500      	movs	r5, #0
 801c42c:	1f37      	subs	r7, r6, #4
 801c42e:	4690      	mov	r8, r2
 801c430:	6802      	ldr	r2, [r0, #0]
 801c432:	9301      	str	r3, [sp, #4]
 801c434:	4682      	mov	sl, r0
 801c436:	f846 5c04 	str.w	r5, [r6, #-4]
 801c43a:	46b9      	mov	r9, r7
 801c43c:	463c      	mov	r4, r7
 801c43e:	9502      	str	r5, [sp, #8]
 801c440:	46ab      	mov	fp, r5
 801c442:	7851      	ldrb	r1, [r2, #1]
 801c444:	1c53      	adds	r3, r2, #1
 801c446:	9303      	str	r3, [sp, #12]
 801c448:	b341      	cbz	r1, 801c49c <__hexnan+0x88>
 801c44a:	4608      	mov	r0, r1
 801c44c:	9205      	str	r2, [sp, #20]
 801c44e:	9104      	str	r1, [sp, #16]
 801c450:	f7ff fd5e 	bl	801bf10 <__hexdig_fun>
 801c454:	2800      	cmp	r0, #0
 801c456:	d14f      	bne.n	801c4f8 <__hexnan+0xe4>
 801c458:	9904      	ldr	r1, [sp, #16]
 801c45a:	9a05      	ldr	r2, [sp, #20]
 801c45c:	2920      	cmp	r1, #32
 801c45e:	d818      	bhi.n	801c492 <__hexnan+0x7e>
 801c460:	9b02      	ldr	r3, [sp, #8]
 801c462:	459b      	cmp	fp, r3
 801c464:	dd13      	ble.n	801c48e <__hexnan+0x7a>
 801c466:	454c      	cmp	r4, r9
 801c468:	d206      	bcs.n	801c478 <__hexnan+0x64>
 801c46a:	2d07      	cmp	r5, #7
 801c46c:	dc04      	bgt.n	801c478 <__hexnan+0x64>
 801c46e:	462a      	mov	r2, r5
 801c470:	4649      	mov	r1, r9
 801c472:	4620      	mov	r0, r4
 801c474:	f7ff ffa8 	bl	801c3c8 <L_shift>
 801c478:	4544      	cmp	r4, r8
 801c47a:	d950      	bls.n	801c51e <__hexnan+0x10a>
 801c47c:	2300      	movs	r3, #0
 801c47e:	f1a4 0904 	sub.w	r9, r4, #4
 801c482:	f844 3c04 	str.w	r3, [r4, #-4]
 801c486:	f8cd b008 	str.w	fp, [sp, #8]
 801c48a:	464c      	mov	r4, r9
 801c48c:	461d      	mov	r5, r3
 801c48e:	9a03      	ldr	r2, [sp, #12]
 801c490:	e7d7      	b.n	801c442 <__hexnan+0x2e>
 801c492:	2929      	cmp	r1, #41	; 0x29
 801c494:	d156      	bne.n	801c544 <__hexnan+0x130>
 801c496:	3202      	adds	r2, #2
 801c498:	f8ca 2000 	str.w	r2, [sl]
 801c49c:	f1bb 0f00 	cmp.w	fp, #0
 801c4a0:	d050      	beq.n	801c544 <__hexnan+0x130>
 801c4a2:	454c      	cmp	r4, r9
 801c4a4:	d206      	bcs.n	801c4b4 <__hexnan+0xa0>
 801c4a6:	2d07      	cmp	r5, #7
 801c4a8:	dc04      	bgt.n	801c4b4 <__hexnan+0xa0>
 801c4aa:	462a      	mov	r2, r5
 801c4ac:	4649      	mov	r1, r9
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f7ff ff8a 	bl	801c3c8 <L_shift>
 801c4b4:	4544      	cmp	r4, r8
 801c4b6:	d934      	bls.n	801c522 <__hexnan+0x10e>
 801c4b8:	f1a8 0204 	sub.w	r2, r8, #4
 801c4bc:	4623      	mov	r3, r4
 801c4be:	f853 1b04 	ldr.w	r1, [r3], #4
 801c4c2:	f842 1f04 	str.w	r1, [r2, #4]!
 801c4c6:	429f      	cmp	r7, r3
 801c4c8:	d2f9      	bcs.n	801c4be <__hexnan+0xaa>
 801c4ca:	1b3b      	subs	r3, r7, r4
 801c4cc:	f023 0303 	bic.w	r3, r3, #3
 801c4d0:	3304      	adds	r3, #4
 801c4d2:	3401      	adds	r4, #1
 801c4d4:	3e03      	subs	r6, #3
 801c4d6:	42b4      	cmp	r4, r6
 801c4d8:	bf88      	it	hi
 801c4da:	2304      	movhi	r3, #4
 801c4dc:	4443      	add	r3, r8
 801c4de:	2200      	movs	r2, #0
 801c4e0:	f843 2b04 	str.w	r2, [r3], #4
 801c4e4:	429f      	cmp	r7, r3
 801c4e6:	d2fb      	bcs.n	801c4e0 <__hexnan+0xcc>
 801c4e8:	683b      	ldr	r3, [r7, #0]
 801c4ea:	b91b      	cbnz	r3, 801c4f4 <__hexnan+0xe0>
 801c4ec:	4547      	cmp	r7, r8
 801c4ee:	d127      	bne.n	801c540 <__hexnan+0x12c>
 801c4f0:	2301      	movs	r3, #1
 801c4f2:	603b      	str	r3, [r7, #0]
 801c4f4:	2005      	movs	r0, #5
 801c4f6:	e026      	b.n	801c546 <__hexnan+0x132>
 801c4f8:	3501      	adds	r5, #1
 801c4fa:	2d08      	cmp	r5, #8
 801c4fc:	f10b 0b01 	add.w	fp, fp, #1
 801c500:	dd06      	ble.n	801c510 <__hexnan+0xfc>
 801c502:	4544      	cmp	r4, r8
 801c504:	d9c3      	bls.n	801c48e <__hexnan+0x7a>
 801c506:	2300      	movs	r3, #0
 801c508:	f844 3c04 	str.w	r3, [r4, #-4]
 801c50c:	2501      	movs	r5, #1
 801c50e:	3c04      	subs	r4, #4
 801c510:	6822      	ldr	r2, [r4, #0]
 801c512:	f000 000f 	and.w	r0, r0, #15
 801c516:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c51a:	6022      	str	r2, [r4, #0]
 801c51c:	e7b7      	b.n	801c48e <__hexnan+0x7a>
 801c51e:	2508      	movs	r5, #8
 801c520:	e7b5      	b.n	801c48e <__hexnan+0x7a>
 801c522:	9b01      	ldr	r3, [sp, #4]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d0df      	beq.n	801c4e8 <__hexnan+0xd4>
 801c528:	f04f 32ff 	mov.w	r2, #4294967295
 801c52c:	f1c3 0320 	rsb	r3, r3, #32
 801c530:	fa22 f303 	lsr.w	r3, r2, r3
 801c534:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c538:	401a      	ands	r2, r3
 801c53a:	f846 2c04 	str.w	r2, [r6, #-4]
 801c53e:	e7d3      	b.n	801c4e8 <__hexnan+0xd4>
 801c540:	3f04      	subs	r7, #4
 801c542:	e7d1      	b.n	801c4e8 <__hexnan+0xd4>
 801c544:	2004      	movs	r0, #4
 801c546:	b007      	add	sp, #28
 801c548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c54c <_localeconv_r>:
 801c54c:	4800      	ldr	r0, [pc, #0]	; (801c550 <_localeconv_r+0x4>)
 801c54e:	4770      	bx	lr
 801c550:	200001bc 	.word	0x200001bc

0801c554 <malloc>:
 801c554:	4b02      	ldr	r3, [pc, #8]	; (801c560 <malloc+0xc>)
 801c556:	4601      	mov	r1, r0
 801c558:	6818      	ldr	r0, [r3, #0]
 801c55a:	f000 bd67 	b.w	801d02c <_malloc_r>
 801c55e:	bf00      	nop
 801c560:	20000064 	.word	0x20000064

0801c564 <__ascii_mbtowc>:
 801c564:	b082      	sub	sp, #8
 801c566:	b901      	cbnz	r1, 801c56a <__ascii_mbtowc+0x6>
 801c568:	a901      	add	r1, sp, #4
 801c56a:	b142      	cbz	r2, 801c57e <__ascii_mbtowc+0x1a>
 801c56c:	b14b      	cbz	r3, 801c582 <__ascii_mbtowc+0x1e>
 801c56e:	7813      	ldrb	r3, [r2, #0]
 801c570:	600b      	str	r3, [r1, #0]
 801c572:	7812      	ldrb	r2, [r2, #0]
 801c574:	1e10      	subs	r0, r2, #0
 801c576:	bf18      	it	ne
 801c578:	2001      	movne	r0, #1
 801c57a:	b002      	add	sp, #8
 801c57c:	4770      	bx	lr
 801c57e:	4610      	mov	r0, r2
 801c580:	e7fb      	b.n	801c57a <__ascii_mbtowc+0x16>
 801c582:	f06f 0001 	mvn.w	r0, #1
 801c586:	e7f8      	b.n	801c57a <__ascii_mbtowc+0x16>

0801c588 <memcpy>:
 801c588:	440a      	add	r2, r1
 801c58a:	4291      	cmp	r1, r2
 801c58c:	f100 33ff 	add.w	r3, r0, #4294967295
 801c590:	d100      	bne.n	801c594 <memcpy+0xc>
 801c592:	4770      	bx	lr
 801c594:	b510      	push	{r4, lr}
 801c596:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c59a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c59e:	4291      	cmp	r1, r2
 801c5a0:	d1f9      	bne.n	801c596 <memcpy+0xe>
 801c5a2:	bd10      	pop	{r4, pc}

0801c5a4 <_Balloc>:
 801c5a4:	b570      	push	{r4, r5, r6, lr}
 801c5a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c5a8:	4604      	mov	r4, r0
 801c5aa:	460d      	mov	r5, r1
 801c5ac:	b976      	cbnz	r6, 801c5cc <_Balloc+0x28>
 801c5ae:	2010      	movs	r0, #16
 801c5b0:	f7ff ffd0 	bl	801c554 <malloc>
 801c5b4:	4602      	mov	r2, r0
 801c5b6:	6260      	str	r0, [r4, #36]	; 0x24
 801c5b8:	b920      	cbnz	r0, 801c5c4 <_Balloc+0x20>
 801c5ba:	4b18      	ldr	r3, [pc, #96]	; (801c61c <_Balloc+0x78>)
 801c5bc:	4818      	ldr	r0, [pc, #96]	; (801c620 <_Balloc+0x7c>)
 801c5be:	2166      	movs	r1, #102	; 0x66
 801c5c0:	f000 ff40 	bl	801d444 <__assert_func>
 801c5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c5c8:	6006      	str	r6, [r0, #0]
 801c5ca:	60c6      	str	r6, [r0, #12]
 801c5cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c5ce:	68f3      	ldr	r3, [r6, #12]
 801c5d0:	b183      	cbz	r3, 801c5f4 <_Balloc+0x50>
 801c5d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5d4:	68db      	ldr	r3, [r3, #12]
 801c5d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c5da:	b9b8      	cbnz	r0, 801c60c <_Balloc+0x68>
 801c5dc:	2101      	movs	r1, #1
 801c5de:	fa01 f605 	lsl.w	r6, r1, r5
 801c5e2:	1d72      	adds	r2, r6, #5
 801c5e4:	0092      	lsls	r2, r2, #2
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	f000 fc9d 	bl	801cf26 <_calloc_r>
 801c5ec:	b160      	cbz	r0, 801c608 <_Balloc+0x64>
 801c5ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c5f2:	e00e      	b.n	801c612 <_Balloc+0x6e>
 801c5f4:	2221      	movs	r2, #33	; 0x21
 801c5f6:	2104      	movs	r1, #4
 801c5f8:	4620      	mov	r0, r4
 801c5fa:	f000 fc94 	bl	801cf26 <_calloc_r>
 801c5fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c600:	60f0      	str	r0, [r6, #12]
 801c602:	68db      	ldr	r3, [r3, #12]
 801c604:	2b00      	cmp	r3, #0
 801c606:	d1e4      	bne.n	801c5d2 <_Balloc+0x2e>
 801c608:	2000      	movs	r0, #0
 801c60a:	bd70      	pop	{r4, r5, r6, pc}
 801c60c:	6802      	ldr	r2, [r0, #0]
 801c60e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c612:	2300      	movs	r3, #0
 801c614:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c618:	e7f7      	b.n	801c60a <_Balloc+0x66>
 801c61a:	bf00      	nop
 801c61c:	080520c6 	.word	0x080520c6
 801c620:	080521c4 	.word	0x080521c4

0801c624 <_Bfree>:
 801c624:	b570      	push	{r4, r5, r6, lr}
 801c626:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c628:	4605      	mov	r5, r0
 801c62a:	460c      	mov	r4, r1
 801c62c:	b976      	cbnz	r6, 801c64c <_Bfree+0x28>
 801c62e:	2010      	movs	r0, #16
 801c630:	f7ff ff90 	bl	801c554 <malloc>
 801c634:	4602      	mov	r2, r0
 801c636:	6268      	str	r0, [r5, #36]	; 0x24
 801c638:	b920      	cbnz	r0, 801c644 <_Bfree+0x20>
 801c63a:	4b09      	ldr	r3, [pc, #36]	; (801c660 <_Bfree+0x3c>)
 801c63c:	4809      	ldr	r0, [pc, #36]	; (801c664 <_Bfree+0x40>)
 801c63e:	218a      	movs	r1, #138	; 0x8a
 801c640:	f000 ff00 	bl	801d444 <__assert_func>
 801c644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c648:	6006      	str	r6, [r0, #0]
 801c64a:	60c6      	str	r6, [r0, #12]
 801c64c:	b13c      	cbz	r4, 801c65e <_Bfree+0x3a>
 801c64e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c650:	6862      	ldr	r2, [r4, #4]
 801c652:	68db      	ldr	r3, [r3, #12]
 801c654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c658:	6021      	str	r1, [r4, #0]
 801c65a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c65e:	bd70      	pop	{r4, r5, r6, pc}
 801c660:	080520c6 	.word	0x080520c6
 801c664:	080521c4 	.word	0x080521c4

0801c668 <__multadd>:
 801c668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c66c:	690d      	ldr	r5, [r1, #16]
 801c66e:	4607      	mov	r7, r0
 801c670:	460c      	mov	r4, r1
 801c672:	461e      	mov	r6, r3
 801c674:	f101 0c14 	add.w	ip, r1, #20
 801c678:	2000      	movs	r0, #0
 801c67a:	f8dc 3000 	ldr.w	r3, [ip]
 801c67e:	b299      	uxth	r1, r3
 801c680:	fb02 6101 	mla	r1, r2, r1, r6
 801c684:	0c1e      	lsrs	r6, r3, #16
 801c686:	0c0b      	lsrs	r3, r1, #16
 801c688:	fb02 3306 	mla	r3, r2, r6, r3
 801c68c:	b289      	uxth	r1, r1
 801c68e:	3001      	adds	r0, #1
 801c690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c694:	4285      	cmp	r5, r0
 801c696:	f84c 1b04 	str.w	r1, [ip], #4
 801c69a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c69e:	dcec      	bgt.n	801c67a <__multadd+0x12>
 801c6a0:	b30e      	cbz	r6, 801c6e6 <__multadd+0x7e>
 801c6a2:	68a3      	ldr	r3, [r4, #8]
 801c6a4:	42ab      	cmp	r3, r5
 801c6a6:	dc19      	bgt.n	801c6dc <__multadd+0x74>
 801c6a8:	6861      	ldr	r1, [r4, #4]
 801c6aa:	4638      	mov	r0, r7
 801c6ac:	3101      	adds	r1, #1
 801c6ae:	f7ff ff79 	bl	801c5a4 <_Balloc>
 801c6b2:	4680      	mov	r8, r0
 801c6b4:	b928      	cbnz	r0, 801c6c2 <__multadd+0x5a>
 801c6b6:	4602      	mov	r2, r0
 801c6b8:	4b0c      	ldr	r3, [pc, #48]	; (801c6ec <__multadd+0x84>)
 801c6ba:	480d      	ldr	r0, [pc, #52]	; (801c6f0 <__multadd+0x88>)
 801c6bc:	21b5      	movs	r1, #181	; 0xb5
 801c6be:	f000 fec1 	bl	801d444 <__assert_func>
 801c6c2:	6922      	ldr	r2, [r4, #16]
 801c6c4:	3202      	adds	r2, #2
 801c6c6:	f104 010c 	add.w	r1, r4, #12
 801c6ca:	0092      	lsls	r2, r2, #2
 801c6cc:	300c      	adds	r0, #12
 801c6ce:	f7ff ff5b 	bl	801c588 <memcpy>
 801c6d2:	4621      	mov	r1, r4
 801c6d4:	4638      	mov	r0, r7
 801c6d6:	f7ff ffa5 	bl	801c624 <_Bfree>
 801c6da:	4644      	mov	r4, r8
 801c6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c6e0:	3501      	adds	r5, #1
 801c6e2:	615e      	str	r6, [r3, #20]
 801c6e4:	6125      	str	r5, [r4, #16]
 801c6e6:	4620      	mov	r0, r4
 801c6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6ec:	08052138 	.word	0x08052138
 801c6f0:	080521c4 	.word	0x080521c4

0801c6f4 <__s2b>:
 801c6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6f8:	460c      	mov	r4, r1
 801c6fa:	4615      	mov	r5, r2
 801c6fc:	461f      	mov	r7, r3
 801c6fe:	2209      	movs	r2, #9
 801c700:	3308      	adds	r3, #8
 801c702:	4606      	mov	r6, r0
 801c704:	fb93 f3f2 	sdiv	r3, r3, r2
 801c708:	2100      	movs	r1, #0
 801c70a:	2201      	movs	r2, #1
 801c70c:	429a      	cmp	r2, r3
 801c70e:	db09      	blt.n	801c724 <__s2b+0x30>
 801c710:	4630      	mov	r0, r6
 801c712:	f7ff ff47 	bl	801c5a4 <_Balloc>
 801c716:	b940      	cbnz	r0, 801c72a <__s2b+0x36>
 801c718:	4602      	mov	r2, r0
 801c71a:	4b19      	ldr	r3, [pc, #100]	; (801c780 <__s2b+0x8c>)
 801c71c:	4819      	ldr	r0, [pc, #100]	; (801c784 <__s2b+0x90>)
 801c71e:	21ce      	movs	r1, #206	; 0xce
 801c720:	f000 fe90 	bl	801d444 <__assert_func>
 801c724:	0052      	lsls	r2, r2, #1
 801c726:	3101      	adds	r1, #1
 801c728:	e7f0      	b.n	801c70c <__s2b+0x18>
 801c72a:	9b08      	ldr	r3, [sp, #32]
 801c72c:	6143      	str	r3, [r0, #20]
 801c72e:	2d09      	cmp	r5, #9
 801c730:	f04f 0301 	mov.w	r3, #1
 801c734:	6103      	str	r3, [r0, #16]
 801c736:	dd16      	ble.n	801c766 <__s2b+0x72>
 801c738:	f104 0909 	add.w	r9, r4, #9
 801c73c:	46c8      	mov	r8, r9
 801c73e:	442c      	add	r4, r5
 801c740:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c744:	4601      	mov	r1, r0
 801c746:	3b30      	subs	r3, #48	; 0x30
 801c748:	220a      	movs	r2, #10
 801c74a:	4630      	mov	r0, r6
 801c74c:	f7ff ff8c 	bl	801c668 <__multadd>
 801c750:	45a0      	cmp	r8, r4
 801c752:	d1f5      	bne.n	801c740 <__s2b+0x4c>
 801c754:	f1a5 0408 	sub.w	r4, r5, #8
 801c758:	444c      	add	r4, r9
 801c75a:	1b2d      	subs	r5, r5, r4
 801c75c:	1963      	adds	r3, r4, r5
 801c75e:	42bb      	cmp	r3, r7
 801c760:	db04      	blt.n	801c76c <__s2b+0x78>
 801c762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c766:	340a      	adds	r4, #10
 801c768:	2509      	movs	r5, #9
 801c76a:	e7f6      	b.n	801c75a <__s2b+0x66>
 801c76c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c770:	4601      	mov	r1, r0
 801c772:	3b30      	subs	r3, #48	; 0x30
 801c774:	220a      	movs	r2, #10
 801c776:	4630      	mov	r0, r6
 801c778:	f7ff ff76 	bl	801c668 <__multadd>
 801c77c:	e7ee      	b.n	801c75c <__s2b+0x68>
 801c77e:	bf00      	nop
 801c780:	08052138 	.word	0x08052138
 801c784:	080521c4 	.word	0x080521c4

0801c788 <__hi0bits>:
 801c788:	0c03      	lsrs	r3, r0, #16
 801c78a:	041b      	lsls	r3, r3, #16
 801c78c:	b9d3      	cbnz	r3, 801c7c4 <__hi0bits+0x3c>
 801c78e:	0400      	lsls	r0, r0, #16
 801c790:	2310      	movs	r3, #16
 801c792:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c796:	bf04      	itt	eq
 801c798:	0200      	lsleq	r0, r0, #8
 801c79a:	3308      	addeq	r3, #8
 801c79c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c7a0:	bf04      	itt	eq
 801c7a2:	0100      	lsleq	r0, r0, #4
 801c7a4:	3304      	addeq	r3, #4
 801c7a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c7aa:	bf04      	itt	eq
 801c7ac:	0080      	lsleq	r0, r0, #2
 801c7ae:	3302      	addeq	r3, #2
 801c7b0:	2800      	cmp	r0, #0
 801c7b2:	db05      	blt.n	801c7c0 <__hi0bits+0x38>
 801c7b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c7b8:	f103 0301 	add.w	r3, r3, #1
 801c7bc:	bf08      	it	eq
 801c7be:	2320      	moveq	r3, #32
 801c7c0:	4618      	mov	r0, r3
 801c7c2:	4770      	bx	lr
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	e7e4      	b.n	801c792 <__hi0bits+0xa>

0801c7c8 <__lo0bits>:
 801c7c8:	6803      	ldr	r3, [r0, #0]
 801c7ca:	f013 0207 	ands.w	r2, r3, #7
 801c7ce:	4601      	mov	r1, r0
 801c7d0:	d00b      	beq.n	801c7ea <__lo0bits+0x22>
 801c7d2:	07da      	lsls	r2, r3, #31
 801c7d4:	d423      	bmi.n	801c81e <__lo0bits+0x56>
 801c7d6:	0798      	lsls	r0, r3, #30
 801c7d8:	bf49      	itett	mi
 801c7da:	085b      	lsrmi	r3, r3, #1
 801c7dc:	089b      	lsrpl	r3, r3, #2
 801c7de:	2001      	movmi	r0, #1
 801c7e0:	600b      	strmi	r3, [r1, #0]
 801c7e2:	bf5c      	itt	pl
 801c7e4:	600b      	strpl	r3, [r1, #0]
 801c7e6:	2002      	movpl	r0, #2
 801c7e8:	4770      	bx	lr
 801c7ea:	b298      	uxth	r0, r3
 801c7ec:	b9a8      	cbnz	r0, 801c81a <__lo0bits+0x52>
 801c7ee:	0c1b      	lsrs	r3, r3, #16
 801c7f0:	2010      	movs	r0, #16
 801c7f2:	b2da      	uxtb	r2, r3
 801c7f4:	b90a      	cbnz	r2, 801c7fa <__lo0bits+0x32>
 801c7f6:	3008      	adds	r0, #8
 801c7f8:	0a1b      	lsrs	r3, r3, #8
 801c7fa:	071a      	lsls	r2, r3, #28
 801c7fc:	bf04      	itt	eq
 801c7fe:	091b      	lsreq	r3, r3, #4
 801c800:	3004      	addeq	r0, #4
 801c802:	079a      	lsls	r2, r3, #30
 801c804:	bf04      	itt	eq
 801c806:	089b      	lsreq	r3, r3, #2
 801c808:	3002      	addeq	r0, #2
 801c80a:	07da      	lsls	r2, r3, #31
 801c80c:	d403      	bmi.n	801c816 <__lo0bits+0x4e>
 801c80e:	085b      	lsrs	r3, r3, #1
 801c810:	f100 0001 	add.w	r0, r0, #1
 801c814:	d005      	beq.n	801c822 <__lo0bits+0x5a>
 801c816:	600b      	str	r3, [r1, #0]
 801c818:	4770      	bx	lr
 801c81a:	4610      	mov	r0, r2
 801c81c:	e7e9      	b.n	801c7f2 <__lo0bits+0x2a>
 801c81e:	2000      	movs	r0, #0
 801c820:	4770      	bx	lr
 801c822:	2020      	movs	r0, #32
 801c824:	4770      	bx	lr
	...

0801c828 <__i2b>:
 801c828:	b510      	push	{r4, lr}
 801c82a:	460c      	mov	r4, r1
 801c82c:	2101      	movs	r1, #1
 801c82e:	f7ff feb9 	bl	801c5a4 <_Balloc>
 801c832:	4602      	mov	r2, r0
 801c834:	b928      	cbnz	r0, 801c842 <__i2b+0x1a>
 801c836:	4b05      	ldr	r3, [pc, #20]	; (801c84c <__i2b+0x24>)
 801c838:	4805      	ldr	r0, [pc, #20]	; (801c850 <__i2b+0x28>)
 801c83a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c83e:	f000 fe01 	bl	801d444 <__assert_func>
 801c842:	2301      	movs	r3, #1
 801c844:	6144      	str	r4, [r0, #20]
 801c846:	6103      	str	r3, [r0, #16]
 801c848:	bd10      	pop	{r4, pc}
 801c84a:	bf00      	nop
 801c84c:	08052138 	.word	0x08052138
 801c850:	080521c4 	.word	0x080521c4

0801c854 <__multiply>:
 801c854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c858:	4691      	mov	r9, r2
 801c85a:	690a      	ldr	r2, [r1, #16]
 801c85c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c860:	429a      	cmp	r2, r3
 801c862:	bfb8      	it	lt
 801c864:	460b      	movlt	r3, r1
 801c866:	460c      	mov	r4, r1
 801c868:	bfbc      	itt	lt
 801c86a:	464c      	movlt	r4, r9
 801c86c:	4699      	movlt	r9, r3
 801c86e:	6927      	ldr	r7, [r4, #16]
 801c870:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c874:	68a3      	ldr	r3, [r4, #8]
 801c876:	6861      	ldr	r1, [r4, #4]
 801c878:	eb07 060a 	add.w	r6, r7, sl
 801c87c:	42b3      	cmp	r3, r6
 801c87e:	b085      	sub	sp, #20
 801c880:	bfb8      	it	lt
 801c882:	3101      	addlt	r1, #1
 801c884:	f7ff fe8e 	bl	801c5a4 <_Balloc>
 801c888:	b930      	cbnz	r0, 801c898 <__multiply+0x44>
 801c88a:	4602      	mov	r2, r0
 801c88c:	4b44      	ldr	r3, [pc, #272]	; (801c9a0 <__multiply+0x14c>)
 801c88e:	4845      	ldr	r0, [pc, #276]	; (801c9a4 <__multiply+0x150>)
 801c890:	f240 115d 	movw	r1, #349	; 0x15d
 801c894:	f000 fdd6 	bl	801d444 <__assert_func>
 801c898:	f100 0514 	add.w	r5, r0, #20
 801c89c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c8a0:	462b      	mov	r3, r5
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	4543      	cmp	r3, r8
 801c8a6:	d321      	bcc.n	801c8ec <__multiply+0x98>
 801c8a8:	f104 0314 	add.w	r3, r4, #20
 801c8ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c8b0:	f109 0314 	add.w	r3, r9, #20
 801c8b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c8b8:	9202      	str	r2, [sp, #8]
 801c8ba:	1b3a      	subs	r2, r7, r4
 801c8bc:	3a15      	subs	r2, #21
 801c8be:	f022 0203 	bic.w	r2, r2, #3
 801c8c2:	3204      	adds	r2, #4
 801c8c4:	f104 0115 	add.w	r1, r4, #21
 801c8c8:	428f      	cmp	r7, r1
 801c8ca:	bf38      	it	cc
 801c8cc:	2204      	movcc	r2, #4
 801c8ce:	9201      	str	r2, [sp, #4]
 801c8d0:	9a02      	ldr	r2, [sp, #8]
 801c8d2:	9303      	str	r3, [sp, #12]
 801c8d4:	429a      	cmp	r2, r3
 801c8d6:	d80c      	bhi.n	801c8f2 <__multiply+0x9e>
 801c8d8:	2e00      	cmp	r6, #0
 801c8da:	dd03      	ble.n	801c8e4 <__multiply+0x90>
 801c8dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d05a      	beq.n	801c99a <__multiply+0x146>
 801c8e4:	6106      	str	r6, [r0, #16]
 801c8e6:	b005      	add	sp, #20
 801c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8ec:	f843 2b04 	str.w	r2, [r3], #4
 801c8f0:	e7d8      	b.n	801c8a4 <__multiply+0x50>
 801c8f2:	f8b3 a000 	ldrh.w	sl, [r3]
 801c8f6:	f1ba 0f00 	cmp.w	sl, #0
 801c8fa:	d024      	beq.n	801c946 <__multiply+0xf2>
 801c8fc:	f104 0e14 	add.w	lr, r4, #20
 801c900:	46a9      	mov	r9, r5
 801c902:	f04f 0c00 	mov.w	ip, #0
 801c906:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c90a:	f8d9 1000 	ldr.w	r1, [r9]
 801c90e:	fa1f fb82 	uxth.w	fp, r2
 801c912:	b289      	uxth	r1, r1
 801c914:	fb0a 110b 	mla	r1, sl, fp, r1
 801c918:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c91c:	f8d9 2000 	ldr.w	r2, [r9]
 801c920:	4461      	add	r1, ip
 801c922:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c926:	fb0a c20b 	mla	r2, sl, fp, ip
 801c92a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c92e:	b289      	uxth	r1, r1
 801c930:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c934:	4577      	cmp	r7, lr
 801c936:	f849 1b04 	str.w	r1, [r9], #4
 801c93a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c93e:	d8e2      	bhi.n	801c906 <__multiply+0xb2>
 801c940:	9a01      	ldr	r2, [sp, #4]
 801c942:	f845 c002 	str.w	ip, [r5, r2]
 801c946:	9a03      	ldr	r2, [sp, #12]
 801c948:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c94c:	3304      	adds	r3, #4
 801c94e:	f1b9 0f00 	cmp.w	r9, #0
 801c952:	d020      	beq.n	801c996 <__multiply+0x142>
 801c954:	6829      	ldr	r1, [r5, #0]
 801c956:	f104 0c14 	add.w	ip, r4, #20
 801c95a:	46ae      	mov	lr, r5
 801c95c:	f04f 0a00 	mov.w	sl, #0
 801c960:	f8bc b000 	ldrh.w	fp, [ip]
 801c964:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c968:	fb09 220b 	mla	r2, r9, fp, r2
 801c96c:	4492      	add	sl, r2
 801c96e:	b289      	uxth	r1, r1
 801c970:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c974:	f84e 1b04 	str.w	r1, [lr], #4
 801c978:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c97c:	f8be 1000 	ldrh.w	r1, [lr]
 801c980:	0c12      	lsrs	r2, r2, #16
 801c982:	fb09 1102 	mla	r1, r9, r2, r1
 801c986:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c98a:	4567      	cmp	r7, ip
 801c98c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c990:	d8e6      	bhi.n	801c960 <__multiply+0x10c>
 801c992:	9a01      	ldr	r2, [sp, #4]
 801c994:	50a9      	str	r1, [r5, r2]
 801c996:	3504      	adds	r5, #4
 801c998:	e79a      	b.n	801c8d0 <__multiply+0x7c>
 801c99a:	3e01      	subs	r6, #1
 801c99c:	e79c      	b.n	801c8d8 <__multiply+0x84>
 801c99e:	bf00      	nop
 801c9a0:	08052138 	.word	0x08052138
 801c9a4:	080521c4 	.word	0x080521c4

0801c9a8 <__pow5mult>:
 801c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9ac:	4615      	mov	r5, r2
 801c9ae:	f012 0203 	ands.w	r2, r2, #3
 801c9b2:	4606      	mov	r6, r0
 801c9b4:	460f      	mov	r7, r1
 801c9b6:	d007      	beq.n	801c9c8 <__pow5mult+0x20>
 801c9b8:	4c25      	ldr	r4, [pc, #148]	; (801ca50 <__pow5mult+0xa8>)
 801c9ba:	3a01      	subs	r2, #1
 801c9bc:	2300      	movs	r3, #0
 801c9be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c9c2:	f7ff fe51 	bl	801c668 <__multadd>
 801c9c6:	4607      	mov	r7, r0
 801c9c8:	10ad      	asrs	r5, r5, #2
 801c9ca:	d03d      	beq.n	801ca48 <__pow5mult+0xa0>
 801c9cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c9ce:	b97c      	cbnz	r4, 801c9f0 <__pow5mult+0x48>
 801c9d0:	2010      	movs	r0, #16
 801c9d2:	f7ff fdbf 	bl	801c554 <malloc>
 801c9d6:	4602      	mov	r2, r0
 801c9d8:	6270      	str	r0, [r6, #36]	; 0x24
 801c9da:	b928      	cbnz	r0, 801c9e8 <__pow5mult+0x40>
 801c9dc:	4b1d      	ldr	r3, [pc, #116]	; (801ca54 <__pow5mult+0xac>)
 801c9de:	481e      	ldr	r0, [pc, #120]	; (801ca58 <__pow5mult+0xb0>)
 801c9e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c9e4:	f000 fd2e 	bl	801d444 <__assert_func>
 801c9e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c9ec:	6004      	str	r4, [r0, #0]
 801c9ee:	60c4      	str	r4, [r0, #12]
 801c9f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c9f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c9f8:	b94c      	cbnz	r4, 801ca0e <__pow5mult+0x66>
 801c9fa:	f240 2171 	movw	r1, #625	; 0x271
 801c9fe:	4630      	mov	r0, r6
 801ca00:	f7ff ff12 	bl	801c828 <__i2b>
 801ca04:	2300      	movs	r3, #0
 801ca06:	f8c8 0008 	str.w	r0, [r8, #8]
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	6003      	str	r3, [r0, #0]
 801ca0e:	f04f 0900 	mov.w	r9, #0
 801ca12:	07eb      	lsls	r3, r5, #31
 801ca14:	d50a      	bpl.n	801ca2c <__pow5mult+0x84>
 801ca16:	4639      	mov	r1, r7
 801ca18:	4622      	mov	r2, r4
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	f7ff ff1a 	bl	801c854 <__multiply>
 801ca20:	4639      	mov	r1, r7
 801ca22:	4680      	mov	r8, r0
 801ca24:	4630      	mov	r0, r6
 801ca26:	f7ff fdfd 	bl	801c624 <_Bfree>
 801ca2a:	4647      	mov	r7, r8
 801ca2c:	106d      	asrs	r5, r5, #1
 801ca2e:	d00b      	beq.n	801ca48 <__pow5mult+0xa0>
 801ca30:	6820      	ldr	r0, [r4, #0]
 801ca32:	b938      	cbnz	r0, 801ca44 <__pow5mult+0x9c>
 801ca34:	4622      	mov	r2, r4
 801ca36:	4621      	mov	r1, r4
 801ca38:	4630      	mov	r0, r6
 801ca3a:	f7ff ff0b 	bl	801c854 <__multiply>
 801ca3e:	6020      	str	r0, [r4, #0]
 801ca40:	f8c0 9000 	str.w	r9, [r0]
 801ca44:	4604      	mov	r4, r0
 801ca46:	e7e4      	b.n	801ca12 <__pow5mult+0x6a>
 801ca48:	4638      	mov	r0, r7
 801ca4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca4e:	bf00      	nop
 801ca50:	08052310 	.word	0x08052310
 801ca54:	080520c6 	.word	0x080520c6
 801ca58:	080521c4 	.word	0x080521c4

0801ca5c <__lshift>:
 801ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca60:	460c      	mov	r4, r1
 801ca62:	6849      	ldr	r1, [r1, #4]
 801ca64:	6923      	ldr	r3, [r4, #16]
 801ca66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ca6a:	68a3      	ldr	r3, [r4, #8]
 801ca6c:	4607      	mov	r7, r0
 801ca6e:	4691      	mov	r9, r2
 801ca70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ca74:	f108 0601 	add.w	r6, r8, #1
 801ca78:	42b3      	cmp	r3, r6
 801ca7a:	db0b      	blt.n	801ca94 <__lshift+0x38>
 801ca7c:	4638      	mov	r0, r7
 801ca7e:	f7ff fd91 	bl	801c5a4 <_Balloc>
 801ca82:	4605      	mov	r5, r0
 801ca84:	b948      	cbnz	r0, 801ca9a <__lshift+0x3e>
 801ca86:	4602      	mov	r2, r0
 801ca88:	4b2a      	ldr	r3, [pc, #168]	; (801cb34 <__lshift+0xd8>)
 801ca8a:	482b      	ldr	r0, [pc, #172]	; (801cb38 <__lshift+0xdc>)
 801ca8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ca90:	f000 fcd8 	bl	801d444 <__assert_func>
 801ca94:	3101      	adds	r1, #1
 801ca96:	005b      	lsls	r3, r3, #1
 801ca98:	e7ee      	b.n	801ca78 <__lshift+0x1c>
 801ca9a:	2300      	movs	r3, #0
 801ca9c:	f100 0114 	add.w	r1, r0, #20
 801caa0:	f100 0210 	add.w	r2, r0, #16
 801caa4:	4618      	mov	r0, r3
 801caa6:	4553      	cmp	r3, sl
 801caa8:	db37      	blt.n	801cb1a <__lshift+0xbe>
 801caaa:	6920      	ldr	r0, [r4, #16]
 801caac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cab0:	f104 0314 	add.w	r3, r4, #20
 801cab4:	f019 091f 	ands.w	r9, r9, #31
 801cab8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cabc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cac0:	d02f      	beq.n	801cb22 <__lshift+0xc6>
 801cac2:	f1c9 0e20 	rsb	lr, r9, #32
 801cac6:	468a      	mov	sl, r1
 801cac8:	f04f 0c00 	mov.w	ip, #0
 801cacc:	681a      	ldr	r2, [r3, #0]
 801cace:	fa02 f209 	lsl.w	r2, r2, r9
 801cad2:	ea42 020c 	orr.w	r2, r2, ip
 801cad6:	f84a 2b04 	str.w	r2, [sl], #4
 801cada:	f853 2b04 	ldr.w	r2, [r3], #4
 801cade:	4298      	cmp	r0, r3
 801cae0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cae4:	d8f2      	bhi.n	801cacc <__lshift+0x70>
 801cae6:	1b03      	subs	r3, r0, r4
 801cae8:	3b15      	subs	r3, #21
 801caea:	f023 0303 	bic.w	r3, r3, #3
 801caee:	3304      	adds	r3, #4
 801caf0:	f104 0215 	add.w	r2, r4, #21
 801caf4:	4290      	cmp	r0, r2
 801caf6:	bf38      	it	cc
 801caf8:	2304      	movcc	r3, #4
 801cafa:	f841 c003 	str.w	ip, [r1, r3]
 801cafe:	f1bc 0f00 	cmp.w	ip, #0
 801cb02:	d001      	beq.n	801cb08 <__lshift+0xac>
 801cb04:	f108 0602 	add.w	r6, r8, #2
 801cb08:	3e01      	subs	r6, #1
 801cb0a:	4638      	mov	r0, r7
 801cb0c:	612e      	str	r6, [r5, #16]
 801cb0e:	4621      	mov	r1, r4
 801cb10:	f7ff fd88 	bl	801c624 <_Bfree>
 801cb14:	4628      	mov	r0, r5
 801cb16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801cb1e:	3301      	adds	r3, #1
 801cb20:	e7c1      	b.n	801caa6 <__lshift+0x4a>
 801cb22:	3904      	subs	r1, #4
 801cb24:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb28:	f841 2f04 	str.w	r2, [r1, #4]!
 801cb2c:	4298      	cmp	r0, r3
 801cb2e:	d8f9      	bhi.n	801cb24 <__lshift+0xc8>
 801cb30:	e7ea      	b.n	801cb08 <__lshift+0xac>
 801cb32:	bf00      	nop
 801cb34:	08052138 	.word	0x08052138
 801cb38:	080521c4 	.word	0x080521c4

0801cb3c <__mcmp>:
 801cb3c:	b530      	push	{r4, r5, lr}
 801cb3e:	6902      	ldr	r2, [r0, #16]
 801cb40:	690c      	ldr	r4, [r1, #16]
 801cb42:	1b12      	subs	r2, r2, r4
 801cb44:	d10e      	bne.n	801cb64 <__mcmp+0x28>
 801cb46:	f100 0314 	add.w	r3, r0, #20
 801cb4a:	3114      	adds	r1, #20
 801cb4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cb50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cb54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cb58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cb5c:	42a5      	cmp	r5, r4
 801cb5e:	d003      	beq.n	801cb68 <__mcmp+0x2c>
 801cb60:	d305      	bcc.n	801cb6e <__mcmp+0x32>
 801cb62:	2201      	movs	r2, #1
 801cb64:	4610      	mov	r0, r2
 801cb66:	bd30      	pop	{r4, r5, pc}
 801cb68:	4283      	cmp	r3, r0
 801cb6a:	d3f3      	bcc.n	801cb54 <__mcmp+0x18>
 801cb6c:	e7fa      	b.n	801cb64 <__mcmp+0x28>
 801cb6e:	f04f 32ff 	mov.w	r2, #4294967295
 801cb72:	e7f7      	b.n	801cb64 <__mcmp+0x28>

0801cb74 <__mdiff>:
 801cb74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb78:	460c      	mov	r4, r1
 801cb7a:	4606      	mov	r6, r0
 801cb7c:	4611      	mov	r1, r2
 801cb7e:	4620      	mov	r0, r4
 801cb80:	4690      	mov	r8, r2
 801cb82:	f7ff ffdb 	bl	801cb3c <__mcmp>
 801cb86:	1e05      	subs	r5, r0, #0
 801cb88:	d110      	bne.n	801cbac <__mdiff+0x38>
 801cb8a:	4629      	mov	r1, r5
 801cb8c:	4630      	mov	r0, r6
 801cb8e:	f7ff fd09 	bl	801c5a4 <_Balloc>
 801cb92:	b930      	cbnz	r0, 801cba2 <__mdiff+0x2e>
 801cb94:	4b3a      	ldr	r3, [pc, #232]	; (801cc80 <__mdiff+0x10c>)
 801cb96:	4602      	mov	r2, r0
 801cb98:	f240 2132 	movw	r1, #562	; 0x232
 801cb9c:	4839      	ldr	r0, [pc, #228]	; (801cc84 <__mdiff+0x110>)
 801cb9e:	f000 fc51 	bl	801d444 <__assert_func>
 801cba2:	2301      	movs	r3, #1
 801cba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbac:	bfa4      	itt	ge
 801cbae:	4643      	movge	r3, r8
 801cbb0:	46a0      	movge	r8, r4
 801cbb2:	4630      	mov	r0, r6
 801cbb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cbb8:	bfa6      	itte	ge
 801cbba:	461c      	movge	r4, r3
 801cbbc:	2500      	movge	r5, #0
 801cbbe:	2501      	movlt	r5, #1
 801cbc0:	f7ff fcf0 	bl	801c5a4 <_Balloc>
 801cbc4:	b920      	cbnz	r0, 801cbd0 <__mdiff+0x5c>
 801cbc6:	4b2e      	ldr	r3, [pc, #184]	; (801cc80 <__mdiff+0x10c>)
 801cbc8:	4602      	mov	r2, r0
 801cbca:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cbce:	e7e5      	b.n	801cb9c <__mdiff+0x28>
 801cbd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cbd4:	6926      	ldr	r6, [r4, #16]
 801cbd6:	60c5      	str	r5, [r0, #12]
 801cbd8:	f104 0914 	add.w	r9, r4, #20
 801cbdc:	f108 0514 	add.w	r5, r8, #20
 801cbe0:	f100 0e14 	add.w	lr, r0, #20
 801cbe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cbe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cbec:	f108 0210 	add.w	r2, r8, #16
 801cbf0:	46f2      	mov	sl, lr
 801cbf2:	2100      	movs	r1, #0
 801cbf4:	f859 3b04 	ldr.w	r3, [r9], #4
 801cbf8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cbfc:	fa1f f883 	uxth.w	r8, r3
 801cc00:	fa11 f18b 	uxtah	r1, r1, fp
 801cc04:	0c1b      	lsrs	r3, r3, #16
 801cc06:	eba1 0808 	sub.w	r8, r1, r8
 801cc0a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cc0e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cc12:	fa1f f888 	uxth.w	r8, r8
 801cc16:	1419      	asrs	r1, r3, #16
 801cc18:	454e      	cmp	r6, r9
 801cc1a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cc1e:	f84a 3b04 	str.w	r3, [sl], #4
 801cc22:	d8e7      	bhi.n	801cbf4 <__mdiff+0x80>
 801cc24:	1b33      	subs	r3, r6, r4
 801cc26:	3b15      	subs	r3, #21
 801cc28:	f023 0303 	bic.w	r3, r3, #3
 801cc2c:	3304      	adds	r3, #4
 801cc2e:	3415      	adds	r4, #21
 801cc30:	42a6      	cmp	r6, r4
 801cc32:	bf38      	it	cc
 801cc34:	2304      	movcc	r3, #4
 801cc36:	441d      	add	r5, r3
 801cc38:	4473      	add	r3, lr
 801cc3a:	469e      	mov	lr, r3
 801cc3c:	462e      	mov	r6, r5
 801cc3e:	4566      	cmp	r6, ip
 801cc40:	d30e      	bcc.n	801cc60 <__mdiff+0xec>
 801cc42:	f10c 0203 	add.w	r2, ip, #3
 801cc46:	1b52      	subs	r2, r2, r5
 801cc48:	f022 0203 	bic.w	r2, r2, #3
 801cc4c:	3d03      	subs	r5, #3
 801cc4e:	45ac      	cmp	ip, r5
 801cc50:	bf38      	it	cc
 801cc52:	2200      	movcc	r2, #0
 801cc54:	441a      	add	r2, r3
 801cc56:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cc5a:	b17b      	cbz	r3, 801cc7c <__mdiff+0x108>
 801cc5c:	6107      	str	r7, [r0, #16]
 801cc5e:	e7a3      	b.n	801cba8 <__mdiff+0x34>
 801cc60:	f856 8b04 	ldr.w	r8, [r6], #4
 801cc64:	fa11 f288 	uxtah	r2, r1, r8
 801cc68:	1414      	asrs	r4, r2, #16
 801cc6a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cc6e:	b292      	uxth	r2, r2
 801cc70:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cc74:	f84e 2b04 	str.w	r2, [lr], #4
 801cc78:	1421      	asrs	r1, r4, #16
 801cc7a:	e7e0      	b.n	801cc3e <__mdiff+0xca>
 801cc7c:	3f01      	subs	r7, #1
 801cc7e:	e7ea      	b.n	801cc56 <__mdiff+0xe2>
 801cc80:	08052138 	.word	0x08052138
 801cc84:	080521c4 	.word	0x080521c4

0801cc88 <__ulp>:
 801cc88:	b082      	sub	sp, #8
 801cc8a:	ed8d 0b00 	vstr	d0, [sp]
 801cc8e:	9b01      	ldr	r3, [sp, #4]
 801cc90:	4912      	ldr	r1, [pc, #72]	; (801ccdc <__ulp+0x54>)
 801cc92:	4019      	ands	r1, r3
 801cc94:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cc98:	2900      	cmp	r1, #0
 801cc9a:	dd05      	ble.n	801cca8 <__ulp+0x20>
 801cc9c:	2200      	movs	r2, #0
 801cc9e:	460b      	mov	r3, r1
 801cca0:	ec43 2b10 	vmov	d0, r2, r3
 801cca4:	b002      	add	sp, #8
 801cca6:	4770      	bx	lr
 801cca8:	4249      	negs	r1, r1
 801ccaa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801ccae:	ea4f 5021 	mov.w	r0, r1, asr #20
 801ccb2:	f04f 0200 	mov.w	r2, #0
 801ccb6:	f04f 0300 	mov.w	r3, #0
 801ccba:	da04      	bge.n	801ccc6 <__ulp+0x3e>
 801ccbc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801ccc0:	fa41 f300 	asr.w	r3, r1, r0
 801ccc4:	e7ec      	b.n	801cca0 <__ulp+0x18>
 801ccc6:	f1a0 0114 	sub.w	r1, r0, #20
 801ccca:	291e      	cmp	r1, #30
 801cccc:	bfda      	itte	le
 801ccce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801ccd2:	fa20 f101 	lsrle.w	r1, r0, r1
 801ccd6:	2101      	movgt	r1, #1
 801ccd8:	460a      	mov	r2, r1
 801ccda:	e7e1      	b.n	801cca0 <__ulp+0x18>
 801ccdc:	7ff00000 	.word	0x7ff00000

0801cce0 <__b2d>:
 801cce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cce2:	6905      	ldr	r5, [r0, #16]
 801cce4:	f100 0714 	add.w	r7, r0, #20
 801cce8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ccec:	1f2e      	subs	r6, r5, #4
 801ccee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	f7ff fd48 	bl	801c788 <__hi0bits>
 801ccf8:	f1c0 0320 	rsb	r3, r0, #32
 801ccfc:	280a      	cmp	r0, #10
 801ccfe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cd7c <__b2d+0x9c>
 801cd02:	600b      	str	r3, [r1, #0]
 801cd04:	dc14      	bgt.n	801cd30 <__b2d+0x50>
 801cd06:	f1c0 0e0b 	rsb	lr, r0, #11
 801cd0a:	fa24 f10e 	lsr.w	r1, r4, lr
 801cd0e:	42b7      	cmp	r7, r6
 801cd10:	ea41 030c 	orr.w	r3, r1, ip
 801cd14:	bf34      	ite	cc
 801cd16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cd1a:	2100      	movcs	r1, #0
 801cd1c:	3015      	adds	r0, #21
 801cd1e:	fa04 f000 	lsl.w	r0, r4, r0
 801cd22:	fa21 f10e 	lsr.w	r1, r1, lr
 801cd26:	ea40 0201 	orr.w	r2, r0, r1
 801cd2a:	ec43 2b10 	vmov	d0, r2, r3
 801cd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd30:	42b7      	cmp	r7, r6
 801cd32:	bf3a      	itte	cc
 801cd34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cd38:	f1a5 0608 	subcc.w	r6, r5, #8
 801cd3c:	2100      	movcs	r1, #0
 801cd3e:	380b      	subs	r0, #11
 801cd40:	d017      	beq.n	801cd72 <__b2d+0x92>
 801cd42:	f1c0 0c20 	rsb	ip, r0, #32
 801cd46:	fa04 f500 	lsl.w	r5, r4, r0
 801cd4a:	42be      	cmp	r6, r7
 801cd4c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cd50:	ea45 0504 	orr.w	r5, r5, r4
 801cd54:	bf8c      	ite	hi
 801cd56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cd5a:	2400      	movls	r4, #0
 801cd5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cd60:	fa01 f000 	lsl.w	r0, r1, r0
 801cd64:	fa24 f40c 	lsr.w	r4, r4, ip
 801cd68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cd6c:	ea40 0204 	orr.w	r2, r0, r4
 801cd70:	e7db      	b.n	801cd2a <__b2d+0x4a>
 801cd72:	ea44 030c 	orr.w	r3, r4, ip
 801cd76:	460a      	mov	r2, r1
 801cd78:	e7d7      	b.n	801cd2a <__b2d+0x4a>
 801cd7a:	bf00      	nop
 801cd7c:	3ff00000 	.word	0x3ff00000

0801cd80 <__d2b>:
 801cd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd84:	4689      	mov	r9, r1
 801cd86:	2101      	movs	r1, #1
 801cd88:	ec57 6b10 	vmov	r6, r7, d0
 801cd8c:	4690      	mov	r8, r2
 801cd8e:	f7ff fc09 	bl	801c5a4 <_Balloc>
 801cd92:	4604      	mov	r4, r0
 801cd94:	b930      	cbnz	r0, 801cda4 <__d2b+0x24>
 801cd96:	4602      	mov	r2, r0
 801cd98:	4b25      	ldr	r3, [pc, #148]	; (801ce30 <__d2b+0xb0>)
 801cd9a:	4826      	ldr	r0, [pc, #152]	; (801ce34 <__d2b+0xb4>)
 801cd9c:	f240 310a 	movw	r1, #778	; 0x30a
 801cda0:	f000 fb50 	bl	801d444 <__assert_func>
 801cda4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cda8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cdac:	bb35      	cbnz	r5, 801cdfc <__d2b+0x7c>
 801cdae:	2e00      	cmp	r6, #0
 801cdb0:	9301      	str	r3, [sp, #4]
 801cdb2:	d028      	beq.n	801ce06 <__d2b+0x86>
 801cdb4:	4668      	mov	r0, sp
 801cdb6:	9600      	str	r6, [sp, #0]
 801cdb8:	f7ff fd06 	bl	801c7c8 <__lo0bits>
 801cdbc:	9900      	ldr	r1, [sp, #0]
 801cdbe:	b300      	cbz	r0, 801ce02 <__d2b+0x82>
 801cdc0:	9a01      	ldr	r2, [sp, #4]
 801cdc2:	f1c0 0320 	rsb	r3, r0, #32
 801cdc6:	fa02 f303 	lsl.w	r3, r2, r3
 801cdca:	430b      	orrs	r3, r1
 801cdcc:	40c2      	lsrs	r2, r0
 801cdce:	6163      	str	r3, [r4, #20]
 801cdd0:	9201      	str	r2, [sp, #4]
 801cdd2:	9b01      	ldr	r3, [sp, #4]
 801cdd4:	61a3      	str	r3, [r4, #24]
 801cdd6:	2b00      	cmp	r3, #0
 801cdd8:	bf14      	ite	ne
 801cdda:	2202      	movne	r2, #2
 801cddc:	2201      	moveq	r2, #1
 801cdde:	6122      	str	r2, [r4, #16]
 801cde0:	b1d5      	cbz	r5, 801ce18 <__d2b+0x98>
 801cde2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cde6:	4405      	add	r5, r0
 801cde8:	f8c9 5000 	str.w	r5, [r9]
 801cdec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cdf0:	f8c8 0000 	str.w	r0, [r8]
 801cdf4:	4620      	mov	r0, r4
 801cdf6:	b003      	add	sp, #12
 801cdf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce00:	e7d5      	b.n	801cdae <__d2b+0x2e>
 801ce02:	6161      	str	r1, [r4, #20]
 801ce04:	e7e5      	b.n	801cdd2 <__d2b+0x52>
 801ce06:	a801      	add	r0, sp, #4
 801ce08:	f7ff fcde 	bl	801c7c8 <__lo0bits>
 801ce0c:	9b01      	ldr	r3, [sp, #4]
 801ce0e:	6163      	str	r3, [r4, #20]
 801ce10:	2201      	movs	r2, #1
 801ce12:	6122      	str	r2, [r4, #16]
 801ce14:	3020      	adds	r0, #32
 801ce16:	e7e3      	b.n	801cde0 <__d2b+0x60>
 801ce18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ce1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ce20:	f8c9 0000 	str.w	r0, [r9]
 801ce24:	6918      	ldr	r0, [r3, #16]
 801ce26:	f7ff fcaf 	bl	801c788 <__hi0bits>
 801ce2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ce2e:	e7df      	b.n	801cdf0 <__d2b+0x70>
 801ce30:	08052138 	.word	0x08052138
 801ce34:	080521c4 	.word	0x080521c4

0801ce38 <__ratio>:
 801ce38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce3c:	4688      	mov	r8, r1
 801ce3e:	4669      	mov	r1, sp
 801ce40:	4681      	mov	r9, r0
 801ce42:	f7ff ff4d 	bl	801cce0 <__b2d>
 801ce46:	a901      	add	r1, sp, #4
 801ce48:	4640      	mov	r0, r8
 801ce4a:	ec55 4b10 	vmov	r4, r5, d0
 801ce4e:	f7ff ff47 	bl	801cce0 <__b2d>
 801ce52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ce56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801ce5a:	eba3 0c02 	sub.w	ip, r3, r2
 801ce5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 801ce62:	1a9b      	subs	r3, r3, r2
 801ce64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801ce68:	ec51 0b10 	vmov	r0, r1, d0
 801ce6c:	2b00      	cmp	r3, #0
 801ce6e:	bfd6      	itet	le
 801ce70:	460a      	movle	r2, r1
 801ce72:	462a      	movgt	r2, r5
 801ce74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ce78:	468b      	mov	fp, r1
 801ce7a:	462f      	mov	r7, r5
 801ce7c:	bfd4      	ite	le
 801ce7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801ce82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ce86:	4620      	mov	r0, r4
 801ce88:	ee10 2a10 	vmov	r2, s0
 801ce8c:	465b      	mov	r3, fp
 801ce8e:	4639      	mov	r1, r7
 801ce90:	f7fb ffe4 	bl	8018e5c <__aeabi_ddiv>
 801ce94:	ec41 0b10 	vmov	d0, r0, r1
 801ce98:	b003      	add	sp, #12
 801ce9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce9e <__copybits>:
 801ce9e:	3901      	subs	r1, #1
 801cea0:	b570      	push	{r4, r5, r6, lr}
 801cea2:	1149      	asrs	r1, r1, #5
 801cea4:	6914      	ldr	r4, [r2, #16]
 801cea6:	3101      	adds	r1, #1
 801cea8:	f102 0314 	add.w	r3, r2, #20
 801ceac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ceb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ceb4:	1f05      	subs	r5, r0, #4
 801ceb6:	42a3      	cmp	r3, r4
 801ceb8:	d30c      	bcc.n	801ced4 <__copybits+0x36>
 801ceba:	1aa3      	subs	r3, r4, r2
 801cebc:	3b11      	subs	r3, #17
 801cebe:	f023 0303 	bic.w	r3, r3, #3
 801cec2:	3211      	adds	r2, #17
 801cec4:	42a2      	cmp	r2, r4
 801cec6:	bf88      	it	hi
 801cec8:	2300      	movhi	r3, #0
 801ceca:	4418      	add	r0, r3
 801cecc:	2300      	movs	r3, #0
 801cece:	4288      	cmp	r0, r1
 801ced0:	d305      	bcc.n	801cede <__copybits+0x40>
 801ced2:	bd70      	pop	{r4, r5, r6, pc}
 801ced4:	f853 6b04 	ldr.w	r6, [r3], #4
 801ced8:	f845 6f04 	str.w	r6, [r5, #4]!
 801cedc:	e7eb      	b.n	801ceb6 <__copybits+0x18>
 801cede:	f840 3b04 	str.w	r3, [r0], #4
 801cee2:	e7f4      	b.n	801cece <__copybits+0x30>

0801cee4 <__any_on>:
 801cee4:	f100 0214 	add.w	r2, r0, #20
 801cee8:	6900      	ldr	r0, [r0, #16]
 801ceea:	114b      	asrs	r3, r1, #5
 801ceec:	4298      	cmp	r0, r3
 801ceee:	b510      	push	{r4, lr}
 801cef0:	db11      	blt.n	801cf16 <__any_on+0x32>
 801cef2:	dd0a      	ble.n	801cf0a <__any_on+0x26>
 801cef4:	f011 011f 	ands.w	r1, r1, #31
 801cef8:	d007      	beq.n	801cf0a <__any_on+0x26>
 801cefa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cefe:	fa24 f001 	lsr.w	r0, r4, r1
 801cf02:	fa00 f101 	lsl.w	r1, r0, r1
 801cf06:	428c      	cmp	r4, r1
 801cf08:	d10b      	bne.n	801cf22 <__any_on+0x3e>
 801cf0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cf0e:	4293      	cmp	r3, r2
 801cf10:	d803      	bhi.n	801cf1a <__any_on+0x36>
 801cf12:	2000      	movs	r0, #0
 801cf14:	bd10      	pop	{r4, pc}
 801cf16:	4603      	mov	r3, r0
 801cf18:	e7f7      	b.n	801cf0a <__any_on+0x26>
 801cf1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cf1e:	2900      	cmp	r1, #0
 801cf20:	d0f5      	beq.n	801cf0e <__any_on+0x2a>
 801cf22:	2001      	movs	r0, #1
 801cf24:	e7f6      	b.n	801cf14 <__any_on+0x30>

0801cf26 <_calloc_r>:
 801cf26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf28:	fba1 2402 	umull	r2, r4, r1, r2
 801cf2c:	b94c      	cbnz	r4, 801cf42 <_calloc_r+0x1c>
 801cf2e:	4611      	mov	r1, r2
 801cf30:	9201      	str	r2, [sp, #4]
 801cf32:	f000 f87b 	bl	801d02c <_malloc_r>
 801cf36:	9a01      	ldr	r2, [sp, #4]
 801cf38:	4605      	mov	r5, r0
 801cf3a:	b930      	cbnz	r0, 801cf4a <_calloc_r+0x24>
 801cf3c:	4628      	mov	r0, r5
 801cf3e:	b003      	add	sp, #12
 801cf40:	bd30      	pop	{r4, r5, pc}
 801cf42:	220c      	movs	r2, #12
 801cf44:	6002      	str	r2, [r0, #0]
 801cf46:	2500      	movs	r5, #0
 801cf48:	e7f8      	b.n	801cf3c <_calloc_r+0x16>
 801cf4a:	4621      	mov	r1, r4
 801cf4c:	f7fc fbb4 	bl	80196b8 <memset>
 801cf50:	e7f4      	b.n	801cf3c <_calloc_r+0x16>
	...

0801cf54 <_free_r>:
 801cf54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf56:	2900      	cmp	r1, #0
 801cf58:	d044      	beq.n	801cfe4 <_free_r+0x90>
 801cf5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf5e:	9001      	str	r0, [sp, #4]
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	f1a1 0404 	sub.w	r4, r1, #4
 801cf66:	bfb8      	it	lt
 801cf68:	18e4      	addlt	r4, r4, r3
 801cf6a:	f000 fab5 	bl	801d4d8 <__malloc_lock>
 801cf6e:	4a1e      	ldr	r2, [pc, #120]	; (801cfe8 <_free_r+0x94>)
 801cf70:	9801      	ldr	r0, [sp, #4]
 801cf72:	6813      	ldr	r3, [r2, #0]
 801cf74:	b933      	cbnz	r3, 801cf84 <_free_r+0x30>
 801cf76:	6063      	str	r3, [r4, #4]
 801cf78:	6014      	str	r4, [r2, #0]
 801cf7a:	b003      	add	sp, #12
 801cf7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cf80:	f000 bab0 	b.w	801d4e4 <__malloc_unlock>
 801cf84:	42a3      	cmp	r3, r4
 801cf86:	d908      	bls.n	801cf9a <_free_r+0x46>
 801cf88:	6825      	ldr	r5, [r4, #0]
 801cf8a:	1961      	adds	r1, r4, r5
 801cf8c:	428b      	cmp	r3, r1
 801cf8e:	bf01      	itttt	eq
 801cf90:	6819      	ldreq	r1, [r3, #0]
 801cf92:	685b      	ldreq	r3, [r3, #4]
 801cf94:	1949      	addeq	r1, r1, r5
 801cf96:	6021      	streq	r1, [r4, #0]
 801cf98:	e7ed      	b.n	801cf76 <_free_r+0x22>
 801cf9a:	461a      	mov	r2, r3
 801cf9c:	685b      	ldr	r3, [r3, #4]
 801cf9e:	b10b      	cbz	r3, 801cfa4 <_free_r+0x50>
 801cfa0:	42a3      	cmp	r3, r4
 801cfa2:	d9fa      	bls.n	801cf9a <_free_r+0x46>
 801cfa4:	6811      	ldr	r1, [r2, #0]
 801cfa6:	1855      	adds	r5, r2, r1
 801cfa8:	42a5      	cmp	r5, r4
 801cfaa:	d10b      	bne.n	801cfc4 <_free_r+0x70>
 801cfac:	6824      	ldr	r4, [r4, #0]
 801cfae:	4421      	add	r1, r4
 801cfb0:	1854      	adds	r4, r2, r1
 801cfb2:	42a3      	cmp	r3, r4
 801cfb4:	6011      	str	r1, [r2, #0]
 801cfb6:	d1e0      	bne.n	801cf7a <_free_r+0x26>
 801cfb8:	681c      	ldr	r4, [r3, #0]
 801cfba:	685b      	ldr	r3, [r3, #4]
 801cfbc:	6053      	str	r3, [r2, #4]
 801cfbe:	4421      	add	r1, r4
 801cfc0:	6011      	str	r1, [r2, #0]
 801cfc2:	e7da      	b.n	801cf7a <_free_r+0x26>
 801cfc4:	d902      	bls.n	801cfcc <_free_r+0x78>
 801cfc6:	230c      	movs	r3, #12
 801cfc8:	6003      	str	r3, [r0, #0]
 801cfca:	e7d6      	b.n	801cf7a <_free_r+0x26>
 801cfcc:	6825      	ldr	r5, [r4, #0]
 801cfce:	1961      	adds	r1, r4, r5
 801cfd0:	428b      	cmp	r3, r1
 801cfd2:	bf04      	itt	eq
 801cfd4:	6819      	ldreq	r1, [r3, #0]
 801cfd6:	685b      	ldreq	r3, [r3, #4]
 801cfd8:	6063      	str	r3, [r4, #4]
 801cfda:	bf04      	itt	eq
 801cfdc:	1949      	addeq	r1, r1, r5
 801cfde:	6021      	streq	r1, [r4, #0]
 801cfe0:	6054      	str	r4, [r2, #4]
 801cfe2:	e7ca      	b.n	801cf7a <_free_r+0x26>
 801cfe4:	b003      	add	sp, #12
 801cfe6:	bd30      	pop	{r4, r5, pc}
 801cfe8:	20000dfc 	.word	0x20000dfc

0801cfec <sbrk_aligned>:
 801cfec:	b570      	push	{r4, r5, r6, lr}
 801cfee:	4e0e      	ldr	r6, [pc, #56]	; (801d028 <sbrk_aligned+0x3c>)
 801cff0:	460c      	mov	r4, r1
 801cff2:	6831      	ldr	r1, [r6, #0]
 801cff4:	4605      	mov	r5, r0
 801cff6:	b911      	cbnz	r1, 801cffe <sbrk_aligned+0x12>
 801cff8:	f000 f9f2 	bl	801d3e0 <_sbrk_r>
 801cffc:	6030      	str	r0, [r6, #0]
 801cffe:	4621      	mov	r1, r4
 801d000:	4628      	mov	r0, r5
 801d002:	f000 f9ed 	bl	801d3e0 <_sbrk_r>
 801d006:	1c43      	adds	r3, r0, #1
 801d008:	d00a      	beq.n	801d020 <sbrk_aligned+0x34>
 801d00a:	1cc4      	adds	r4, r0, #3
 801d00c:	f024 0403 	bic.w	r4, r4, #3
 801d010:	42a0      	cmp	r0, r4
 801d012:	d007      	beq.n	801d024 <sbrk_aligned+0x38>
 801d014:	1a21      	subs	r1, r4, r0
 801d016:	4628      	mov	r0, r5
 801d018:	f000 f9e2 	bl	801d3e0 <_sbrk_r>
 801d01c:	3001      	adds	r0, #1
 801d01e:	d101      	bne.n	801d024 <sbrk_aligned+0x38>
 801d020:	f04f 34ff 	mov.w	r4, #4294967295
 801d024:	4620      	mov	r0, r4
 801d026:	bd70      	pop	{r4, r5, r6, pc}
 801d028:	20000e00 	.word	0x20000e00

0801d02c <_malloc_r>:
 801d02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d030:	1ccd      	adds	r5, r1, #3
 801d032:	f025 0503 	bic.w	r5, r5, #3
 801d036:	3508      	adds	r5, #8
 801d038:	2d0c      	cmp	r5, #12
 801d03a:	bf38      	it	cc
 801d03c:	250c      	movcc	r5, #12
 801d03e:	2d00      	cmp	r5, #0
 801d040:	4607      	mov	r7, r0
 801d042:	db01      	blt.n	801d048 <_malloc_r+0x1c>
 801d044:	42a9      	cmp	r1, r5
 801d046:	d905      	bls.n	801d054 <_malloc_r+0x28>
 801d048:	230c      	movs	r3, #12
 801d04a:	603b      	str	r3, [r7, #0]
 801d04c:	2600      	movs	r6, #0
 801d04e:	4630      	mov	r0, r6
 801d050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d054:	4e2e      	ldr	r6, [pc, #184]	; (801d110 <_malloc_r+0xe4>)
 801d056:	f000 fa3f 	bl	801d4d8 <__malloc_lock>
 801d05a:	6833      	ldr	r3, [r6, #0]
 801d05c:	461c      	mov	r4, r3
 801d05e:	bb34      	cbnz	r4, 801d0ae <_malloc_r+0x82>
 801d060:	4629      	mov	r1, r5
 801d062:	4638      	mov	r0, r7
 801d064:	f7ff ffc2 	bl	801cfec <sbrk_aligned>
 801d068:	1c43      	adds	r3, r0, #1
 801d06a:	4604      	mov	r4, r0
 801d06c:	d14d      	bne.n	801d10a <_malloc_r+0xde>
 801d06e:	6834      	ldr	r4, [r6, #0]
 801d070:	4626      	mov	r6, r4
 801d072:	2e00      	cmp	r6, #0
 801d074:	d140      	bne.n	801d0f8 <_malloc_r+0xcc>
 801d076:	6823      	ldr	r3, [r4, #0]
 801d078:	4631      	mov	r1, r6
 801d07a:	4638      	mov	r0, r7
 801d07c:	eb04 0803 	add.w	r8, r4, r3
 801d080:	f000 f9ae 	bl	801d3e0 <_sbrk_r>
 801d084:	4580      	cmp	r8, r0
 801d086:	d13a      	bne.n	801d0fe <_malloc_r+0xd2>
 801d088:	6821      	ldr	r1, [r4, #0]
 801d08a:	3503      	adds	r5, #3
 801d08c:	1a6d      	subs	r5, r5, r1
 801d08e:	f025 0503 	bic.w	r5, r5, #3
 801d092:	3508      	adds	r5, #8
 801d094:	2d0c      	cmp	r5, #12
 801d096:	bf38      	it	cc
 801d098:	250c      	movcc	r5, #12
 801d09a:	4629      	mov	r1, r5
 801d09c:	4638      	mov	r0, r7
 801d09e:	f7ff ffa5 	bl	801cfec <sbrk_aligned>
 801d0a2:	3001      	adds	r0, #1
 801d0a4:	d02b      	beq.n	801d0fe <_malloc_r+0xd2>
 801d0a6:	6823      	ldr	r3, [r4, #0]
 801d0a8:	442b      	add	r3, r5
 801d0aa:	6023      	str	r3, [r4, #0]
 801d0ac:	e00e      	b.n	801d0cc <_malloc_r+0xa0>
 801d0ae:	6822      	ldr	r2, [r4, #0]
 801d0b0:	1b52      	subs	r2, r2, r5
 801d0b2:	d41e      	bmi.n	801d0f2 <_malloc_r+0xc6>
 801d0b4:	2a0b      	cmp	r2, #11
 801d0b6:	d916      	bls.n	801d0e6 <_malloc_r+0xba>
 801d0b8:	1961      	adds	r1, r4, r5
 801d0ba:	42a3      	cmp	r3, r4
 801d0bc:	6025      	str	r5, [r4, #0]
 801d0be:	bf18      	it	ne
 801d0c0:	6059      	strne	r1, [r3, #4]
 801d0c2:	6863      	ldr	r3, [r4, #4]
 801d0c4:	bf08      	it	eq
 801d0c6:	6031      	streq	r1, [r6, #0]
 801d0c8:	5162      	str	r2, [r4, r5]
 801d0ca:	604b      	str	r3, [r1, #4]
 801d0cc:	4638      	mov	r0, r7
 801d0ce:	f104 060b 	add.w	r6, r4, #11
 801d0d2:	f000 fa07 	bl	801d4e4 <__malloc_unlock>
 801d0d6:	f026 0607 	bic.w	r6, r6, #7
 801d0da:	1d23      	adds	r3, r4, #4
 801d0dc:	1af2      	subs	r2, r6, r3
 801d0de:	d0b6      	beq.n	801d04e <_malloc_r+0x22>
 801d0e0:	1b9b      	subs	r3, r3, r6
 801d0e2:	50a3      	str	r3, [r4, r2]
 801d0e4:	e7b3      	b.n	801d04e <_malloc_r+0x22>
 801d0e6:	6862      	ldr	r2, [r4, #4]
 801d0e8:	42a3      	cmp	r3, r4
 801d0ea:	bf0c      	ite	eq
 801d0ec:	6032      	streq	r2, [r6, #0]
 801d0ee:	605a      	strne	r2, [r3, #4]
 801d0f0:	e7ec      	b.n	801d0cc <_malloc_r+0xa0>
 801d0f2:	4623      	mov	r3, r4
 801d0f4:	6864      	ldr	r4, [r4, #4]
 801d0f6:	e7b2      	b.n	801d05e <_malloc_r+0x32>
 801d0f8:	4634      	mov	r4, r6
 801d0fa:	6876      	ldr	r6, [r6, #4]
 801d0fc:	e7b9      	b.n	801d072 <_malloc_r+0x46>
 801d0fe:	230c      	movs	r3, #12
 801d100:	603b      	str	r3, [r7, #0]
 801d102:	4638      	mov	r0, r7
 801d104:	f000 f9ee 	bl	801d4e4 <__malloc_unlock>
 801d108:	e7a1      	b.n	801d04e <_malloc_r+0x22>
 801d10a:	6025      	str	r5, [r4, #0]
 801d10c:	e7de      	b.n	801d0cc <_malloc_r+0xa0>
 801d10e:	bf00      	nop
 801d110:	20000dfc 	.word	0x20000dfc

0801d114 <__ssputs_r>:
 801d114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d118:	688e      	ldr	r6, [r1, #8]
 801d11a:	429e      	cmp	r6, r3
 801d11c:	4682      	mov	sl, r0
 801d11e:	460c      	mov	r4, r1
 801d120:	4690      	mov	r8, r2
 801d122:	461f      	mov	r7, r3
 801d124:	d838      	bhi.n	801d198 <__ssputs_r+0x84>
 801d126:	898a      	ldrh	r2, [r1, #12]
 801d128:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d12c:	d032      	beq.n	801d194 <__ssputs_r+0x80>
 801d12e:	6825      	ldr	r5, [r4, #0]
 801d130:	6909      	ldr	r1, [r1, #16]
 801d132:	eba5 0901 	sub.w	r9, r5, r1
 801d136:	6965      	ldr	r5, [r4, #20]
 801d138:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d13c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d140:	3301      	adds	r3, #1
 801d142:	444b      	add	r3, r9
 801d144:	106d      	asrs	r5, r5, #1
 801d146:	429d      	cmp	r5, r3
 801d148:	bf38      	it	cc
 801d14a:	461d      	movcc	r5, r3
 801d14c:	0553      	lsls	r3, r2, #21
 801d14e:	d531      	bpl.n	801d1b4 <__ssputs_r+0xa0>
 801d150:	4629      	mov	r1, r5
 801d152:	f7ff ff6b 	bl	801d02c <_malloc_r>
 801d156:	4606      	mov	r6, r0
 801d158:	b950      	cbnz	r0, 801d170 <__ssputs_r+0x5c>
 801d15a:	230c      	movs	r3, #12
 801d15c:	f8ca 3000 	str.w	r3, [sl]
 801d160:	89a3      	ldrh	r3, [r4, #12]
 801d162:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d166:	81a3      	strh	r3, [r4, #12]
 801d168:	f04f 30ff 	mov.w	r0, #4294967295
 801d16c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d170:	6921      	ldr	r1, [r4, #16]
 801d172:	464a      	mov	r2, r9
 801d174:	f7ff fa08 	bl	801c588 <memcpy>
 801d178:	89a3      	ldrh	r3, [r4, #12]
 801d17a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d17e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d182:	81a3      	strh	r3, [r4, #12]
 801d184:	6126      	str	r6, [r4, #16]
 801d186:	6165      	str	r5, [r4, #20]
 801d188:	444e      	add	r6, r9
 801d18a:	eba5 0509 	sub.w	r5, r5, r9
 801d18e:	6026      	str	r6, [r4, #0]
 801d190:	60a5      	str	r5, [r4, #8]
 801d192:	463e      	mov	r6, r7
 801d194:	42be      	cmp	r6, r7
 801d196:	d900      	bls.n	801d19a <__ssputs_r+0x86>
 801d198:	463e      	mov	r6, r7
 801d19a:	6820      	ldr	r0, [r4, #0]
 801d19c:	4632      	mov	r2, r6
 801d19e:	4641      	mov	r1, r8
 801d1a0:	f000 f980 	bl	801d4a4 <memmove>
 801d1a4:	68a3      	ldr	r3, [r4, #8]
 801d1a6:	1b9b      	subs	r3, r3, r6
 801d1a8:	60a3      	str	r3, [r4, #8]
 801d1aa:	6823      	ldr	r3, [r4, #0]
 801d1ac:	4433      	add	r3, r6
 801d1ae:	6023      	str	r3, [r4, #0]
 801d1b0:	2000      	movs	r0, #0
 801d1b2:	e7db      	b.n	801d16c <__ssputs_r+0x58>
 801d1b4:	462a      	mov	r2, r5
 801d1b6:	f000 f99b 	bl	801d4f0 <_realloc_r>
 801d1ba:	4606      	mov	r6, r0
 801d1bc:	2800      	cmp	r0, #0
 801d1be:	d1e1      	bne.n	801d184 <__ssputs_r+0x70>
 801d1c0:	6921      	ldr	r1, [r4, #16]
 801d1c2:	4650      	mov	r0, sl
 801d1c4:	f7ff fec6 	bl	801cf54 <_free_r>
 801d1c8:	e7c7      	b.n	801d15a <__ssputs_r+0x46>
	...

0801d1cc <_svfiprintf_r>:
 801d1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1d0:	4698      	mov	r8, r3
 801d1d2:	898b      	ldrh	r3, [r1, #12]
 801d1d4:	061b      	lsls	r3, r3, #24
 801d1d6:	b09d      	sub	sp, #116	; 0x74
 801d1d8:	4607      	mov	r7, r0
 801d1da:	460d      	mov	r5, r1
 801d1dc:	4614      	mov	r4, r2
 801d1de:	d50e      	bpl.n	801d1fe <_svfiprintf_r+0x32>
 801d1e0:	690b      	ldr	r3, [r1, #16]
 801d1e2:	b963      	cbnz	r3, 801d1fe <_svfiprintf_r+0x32>
 801d1e4:	2140      	movs	r1, #64	; 0x40
 801d1e6:	f7ff ff21 	bl	801d02c <_malloc_r>
 801d1ea:	6028      	str	r0, [r5, #0]
 801d1ec:	6128      	str	r0, [r5, #16]
 801d1ee:	b920      	cbnz	r0, 801d1fa <_svfiprintf_r+0x2e>
 801d1f0:	230c      	movs	r3, #12
 801d1f2:	603b      	str	r3, [r7, #0]
 801d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1f8:	e0d1      	b.n	801d39e <_svfiprintf_r+0x1d2>
 801d1fa:	2340      	movs	r3, #64	; 0x40
 801d1fc:	616b      	str	r3, [r5, #20]
 801d1fe:	2300      	movs	r3, #0
 801d200:	9309      	str	r3, [sp, #36]	; 0x24
 801d202:	2320      	movs	r3, #32
 801d204:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d208:	f8cd 800c 	str.w	r8, [sp, #12]
 801d20c:	2330      	movs	r3, #48	; 0x30
 801d20e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d3b8 <_svfiprintf_r+0x1ec>
 801d212:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d216:	f04f 0901 	mov.w	r9, #1
 801d21a:	4623      	mov	r3, r4
 801d21c:	469a      	mov	sl, r3
 801d21e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d222:	b10a      	cbz	r2, 801d228 <_svfiprintf_r+0x5c>
 801d224:	2a25      	cmp	r2, #37	; 0x25
 801d226:	d1f9      	bne.n	801d21c <_svfiprintf_r+0x50>
 801d228:	ebba 0b04 	subs.w	fp, sl, r4
 801d22c:	d00b      	beq.n	801d246 <_svfiprintf_r+0x7a>
 801d22e:	465b      	mov	r3, fp
 801d230:	4622      	mov	r2, r4
 801d232:	4629      	mov	r1, r5
 801d234:	4638      	mov	r0, r7
 801d236:	f7ff ff6d 	bl	801d114 <__ssputs_r>
 801d23a:	3001      	adds	r0, #1
 801d23c:	f000 80aa 	beq.w	801d394 <_svfiprintf_r+0x1c8>
 801d240:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d242:	445a      	add	r2, fp
 801d244:	9209      	str	r2, [sp, #36]	; 0x24
 801d246:	f89a 3000 	ldrb.w	r3, [sl]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f000 80a2 	beq.w	801d394 <_svfiprintf_r+0x1c8>
 801d250:	2300      	movs	r3, #0
 801d252:	f04f 32ff 	mov.w	r2, #4294967295
 801d256:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d25a:	f10a 0a01 	add.w	sl, sl, #1
 801d25e:	9304      	str	r3, [sp, #16]
 801d260:	9307      	str	r3, [sp, #28]
 801d262:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d266:	931a      	str	r3, [sp, #104]	; 0x68
 801d268:	4654      	mov	r4, sl
 801d26a:	2205      	movs	r2, #5
 801d26c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d270:	4851      	ldr	r0, [pc, #324]	; (801d3b8 <_svfiprintf_r+0x1ec>)
 801d272:	f7fb fabd 	bl	80187f0 <memchr>
 801d276:	9a04      	ldr	r2, [sp, #16]
 801d278:	b9d8      	cbnz	r0, 801d2b2 <_svfiprintf_r+0xe6>
 801d27a:	06d0      	lsls	r0, r2, #27
 801d27c:	bf44      	itt	mi
 801d27e:	2320      	movmi	r3, #32
 801d280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d284:	0711      	lsls	r1, r2, #28
 801d286:	bf44      	itt	mi
 801d288:	232b      	movmi	r3, #43	; 0x2b
 801d28a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d28e:	f89a 3000 	ldrb.w	r3, [sl]
 801d292:	2b2a      	cmp	r3, #42	; 0x2a
 801d294:	d015      	beq.n	801d2c2 <_svfiprintf_r+0xf6>
 801d296:	9a07      	ldr	r2, [sp, #28]
 801d298:	4654      	mov	r4, sl
 801d29a:	2000      	movs	r0, #0
 801d29c:	f04f 0c0a 	mov.w	ip, #10
 801d2a0:	4621      	mov	r1, r4
 801d2a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2a6:	3b30      	subs	r3, #48	; 0x30
 801d2a8:	2b09      	cmp	r3, #9
 801d2aa:	d94e      	bls.n	801d34a <_svfiprintf_r+0x17e>
 801d2ac:	b1b0      	cbz	r0, 801d2dc <_svfiprintf_r+0x110>
 801d2ae:	9207      	str	r2, [sp, #28]
 801d2b0:	e014      	b.n	801d2dc <_svfiprintf_r+0x110>
 801d2b2:	eba0 0308 	sub.w	r3, r0, r8
 801d2b6:	fa09 f303 	lsl.w	r3, r9, r3
 801d2ba:	4313      	orrs	r3, r2
 801d2bc:	9304      	str	r3, [sp, #16]
 801d2be:	46a2      	mov	sl, r4
 801d2c0:	e7d2      	b.n	801d268 <_svfiprintf_r+0x9c>
 801d2c2:	9b03      	ldr	r3, [sp, #12]
 801d2c4:	1d19      	adds	r1, r3, #4
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	9103      	str	r1, [sp, #12]
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	bfbb      	ittet	lt
 801d2ce:	425b      	neglt	r3, r3
 801d2d0:	f042 0202 	orrlt.w	r2, r2, #2
 801d2d4:	9307      	strge	r3, [sp, #28]
 801d2d6:	9307      	strlt	r3, [sp, #28]
 801d2d8:	bfb8      	it	lt
 801d2da:	9204      	strlt	r2, [sp, #16]
 801d2dc:	7823      	ldrb	r3, [r4, #0]
 801d2de:	2b2e      	cmp	r3, #46	; 0x2e
 801d2e0:	d10c      	bne.n	801d2fc <_svfiprintf_r+0x130>
 801d2e2:	7863      	ldrb	r3, [r4, #1]
 801d2e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d2e6:	d135      	bne.n	801d354 <_svfiprintf_r+0x188>
 801d2e8:	9b03      	ldr	r3, [sp, #12]
 801d2ea:	1d1a      	adds	r2, r3, #4
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	9203      	str	r2, [sp, #12]
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	bfb8      	it	lt
 801d2f4:	f04f 33ff 	movlt.w	r3, #4294967295
 801d2f8:	3402      	adds	r4, #2
 801d2fa:	9305      	str	r3, [sp, #20]
 801d2fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d3c8 <_svfiprintf_r+0x1fc>
 801d300:	7821      	ldrb	r1, [r4, #0]
 801d302:	2203      	movs	r2, #3
 801d304:	4650      	mov	r0, sl
 801d306:	f7fb fa73 	bl	80187f0 <memchr>
 801d30a:	b140      	cbz	r0, 801d31e <_svfiprintf_r+0x152>
 801d30c:	2340      	movs	r3, #64	; 0x40
 801d30e:	eba0 000a 	sub.w	r0, r0, sl
 801d312:	fa03 f000 	lsl.w	r0, r3, r0
 801d316:	9b04      	ldr	r3, [sp, #16]
 801d318:	4303      	orrs	r3, r0
 801d31a:	3401      	adds	r4, #1
 801d31c:	9304      	str	r3, [sp, #16]
 801d31e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d322:	4826      	ldr	r0, [pc, #152]	; (801d3bc <_svfiprintf_r+0x1f0>)
 801d324:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d328:	2206      	movs	r2, #6
 801d32a:	f7fb fa61 	bl	80187f0 <memchr>
 801d32e:	2800      	cmp	r0, #0
 801d330:	d038      	beq.n	801d3a4 <_svfiprintf_r+0x1d8>
 801d332:	4b23      	ldr	r3, [pc, #140]	; (801d3c0 <_svfiprintf_r+0x1f4>)
 801d334:	bb1b      	cbnz	r3, 801d37e <_svfiprintf_r+0x1b2>
 801d336:	9b03      	ldr	r3, [sp, #12]
 801d338:	3307      	adds	r3, #7
 801d33a:	f023 0307 	bic.w	r3, r3, #7
 801d33e:	3308      	adds	r3, #8
 801d340:	9303      	str	r3, [sp, #12]
 801d342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d344:	4433      	add	r3, r6
 801d346:	9309      	str	r3, [sp, #36]	; 0x24
 801d348:	e767      	b.n	801d21a <_svfiprintf_r+0x4e>
 801d34a:	fb0c 3202 	mla	r2, ip, r2, r3
 801d34e:	460c      	mov	r4, r1
 801d350:	2001      	movs	r0, #1
 801d352:	e7a5      	b.n	801d2a0 <_svfiprintf_r+0xd4>
 801d354:	2300      	movs	r3, #0
 801d356:	3401      	adds	r4, #1
 801d358:	9305      	str	r3, [sp, #20]
 801d35a:	4619      	mov	r1, r3
 801d35c:	f04f 0c0a 	mov.w	ip, #10
 801d360:	4620      	mov	r0, r4
 801d362:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d366:	3a30      	subs	r2, #48	; 0x30
 801d368:	2a09      	cmp	r2, #9
 801d36a:	d903      	bls.n	801d374 <_svfiprintf_r+0x1a8>
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d0c5      	beq.n	801d2fc <_svfiprintf_r+0x130>
 801d370:	9105      	str	r1, [sp, #20]
 801d372:	e7c3      	b.n	801d2fc <_svfiprintf_r+0x130>
 801d374:	fb0c 2101 	mla	r1, ip, r1, r2
 801d378:	4604      	mov	r4, r0
 801d37a:	2301      	movs	r3, #1
 801d37c:	e7f0      	b.n	801d360 <_svfiprintf_r+0x194>
 801d37e:	ab03      	add	r3, sp, #12
 801d380:	9300      	str	r3, [sp, #0]
 801d382:	462a      	mov	r2, r5
 801d384:	4b0f      	ldr	r3, [pc, #60]	; (801d3c4 <_svfiprintf_r+0x1f8>)
 801d386:	a904      	add	r1, sp, #16
 801d388:	4638      	mov	r0, r7
 801d38a:	f7fc fa3d 	bl	8019808 <_printf_float>
 801d38e:	1c42      	adds	r2, r0, #1
 801d390:	4606      	mov	r6, r0
 801d392:	d1d6      	bne.n	801d342 <_svfiprintf_r+0x176>
 801d394:	89ab      	ldrh	r3, [r5, #12]
 801d396:	065b      	lsls	r3, r3, #25
 801d398:	f53f af2c 	bmi.w	801d1f4 <_svfiprintf_r+0x28>
 801d39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d39e:	b01d      	add	sp, #116	; 0x74
 801d3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3a4:	ab03      	add	r3, sp, #12
 801d3a6:	9300      	str	r3, [sp, #0]
 801d3a8:	462a      	mov	r2, r5
 801d3aa:	4b06      	ldr	r3, [pc, #24]	; (801d3c4 <_svfiprintf_r+0x1f8>)
 801d3ac:	a904      	add	r1, sp, #16
 801d3ae:	4638      	mov	r0, r7
 801d3b0:	f7fc fcce 	bl	8019d50 <_printf_i>
 801d3b4:	e7eb      	b.n	801d38e <_svfiprintf_r+0x1c2>
 801d3b6:	bf00      	nop
 801d3b8:	0805231c 	.word	0x0805231c
 801d3bc:	08052326 	.word	0x08052326
 801d3c0:	08019809 	.word	0x08019809
 801d3c4:	0801d115 	.word	0x0801d115
 801d3c8:	08052322 	.word	0x08052322
 801d3cc:	00000000 	.word	0x00000000

0801d3d0 <nan>:
 801d3d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d3d8 <nan+0x8>
 801d3d4:	4770      	bx	lr
 801d3d6:	bf00      	nop
 801d3d8:	00000000 	.word	0x00000000
 801d3dc:	7ff80000 	.word	0x7ff80000

0801d3e0 <_sbrk_r>:
 801d3e0:	b538      	push	{r3, r4, r5, lr}
 801d3e2:	4d06      	ldr	r5, [pc, #24]	; (801d3fc <_sbrk_r+0x1c>)
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	4604      	mov	r4, r0
 801d3e8:	4608      	mov	r0, r1
 801d3ea:	602b      	str	r3, [r5, #0]
 801d3ec:	f7e8 fe98 	bl	8006120 <_sbrk>
 801d3f0:	1c43      	adds	r3, r0, #1
 801d3f2:	d102      	bne.n	801d3fa <_sbrk_r+0x1a>
 801d3f4:	682b      	ldr	r3, [r5, #0]
 801d3f6:	b103      	cbz	r3, 801d3fa <_sbrk_r+0x1a>
 801d3f8:	6023      	str	r3, [r4, #0]
 801d3fa:	bd38      	pop	{r3, r4, r5, pc}
 801d3fc:	20000e04 	.word	0x20000e04

0801d400 <strncmp>:
 801d400:	b510      	push	{r4, lr}
 801d402:	b17a      	cbz	r2, 801d424 <strncmp+0x24>
 801d404:	4603      	mov	r3, r0
 801d406:	3901      	subs	r1, #1
 801d408:	1884      	adds	r4, r0, r2
 801d40a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d40e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d412:	4290      	cmp	r0, r2
 801d414:	d101      	bne.n	801d41a <strncmp+0x1a>
 801d416:	42a3      	cmp	r3, r4
 801d418:	d101      	bne.n	801d41e <strncmp+0x1e>
 801d41a:	1a80      	subs	r0, r0, r2
 801d41c:	bd10      	pop	{r4, pc}
 801d41e:	2800      	cmp	r0, #0
 801d420:	d1f3      	bne.n	801d40a <strncmp+0xa>
 801d422:	e7fa      	b.n	801d41a <strncmp+0x1a>
 801d424:	4610      	mov	r0, r2
 801d426:	e7f9      	b.n	801d41c <strncmp+0x1c>

0801d428 <__ascii_wctomb>:
 801d428:	b149      	cbz	r1, 801d43e <__ascii_wctomb+0x16>
 801d42a:	2aff      	cmp	r2, #255	; 0xff
 801d42c:	bf85      	ittet	hi
 801d42e:	238a      	movhi	r3, #138	; 0x8a
 801d430:	6003      	strhi	r3, [r0, #0]
 801d432:	700a      	strbls	r2, [r1, #0]
 801d434:	f04f 30ff 	movhi.w	r0, #4294967295
 801d438:	bf98      	it	ls
 801d43a:	2001      	movls	r0, #1
 801d43c:	4770      	bx	lr
 801d43e:	4608      	mov	r0, r1
 801d440:	4770      	bx	lr
	...

0801d444 <__assert_func>:
 801d444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d446:	4614      	mov	r4, r2
 801d448:	461a      	mov	r2, r3
 801d44a:	4b09      	ldr	r3, [pc, #36]	; (801d470 <__assert_func+0x2c>)
 801d44c:	681b      	ldr	r3, [r3, #0]
 801d44e:	4605      	mov	r5, r0
 801d450:	68d8      	ldr	r0, [r3, #12]
 801d452:	b14c      	cbz	r4, 801d468 <__assert_func+0x24>
 801d454:	4b07      	ldr	r3, [pc, #28]	; (801d474 <__assert_func+0x30>)
 801d456:	9100      	str	r1, [sp, #0]
 801d458:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d45c:	4906      	ldr	r1, [pc, #24]	; (801d478 <__assert_func+0x34>)
 801d45e:	462b      	mov	r3, r5
 801d460:	f000 f80e 	bl	801d480 <fiprintf>
 801d464:	f000 fa8c 	bl	801d980 <abort>
 801d468:	4b04      	ldr	r3, [pc, #16]	; (801d47c <__assert_func+0x38>)
 801d46a:	461c      	mov	r4, r3
 801d46c:	e7f3      	b.n	801d456 <__assert_func+0x12>
 801d46e:	bf00      	nop
 801d470:	20000064 	.word	0x20000064
 801d474:	0805232d 	.word	0x0805232d
 801d478:	0805233a 	.word	0x0805233a
 801d47c:	08052368 	.word	0x08052368

0801d480 <fiprintf>:
 801d480:	b40e      	push	{r1, r2, r3}
 801d482:	b503      	push	{r0, r1, lr}
 801d484:	4601      	mov	r1, r0
 801d486:	ab03      	add	r3, sp, #12
 801d488:	4805      	ldr	r0, [pc, #20]	; (801d4a0 <fiprintf+0x20>)
 801d48a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d48e:	6800      	ldr	r0, [r0, #0]
 801d490:	9301      	str	r3, [sp, #4]
 801d492:	f000 f885 	bl	801d5a0 <_vfiprintf_r>
 801d496:	b002      	add	sp, #8
 801d498:	f85d eb04 	ldr.w	lr, [sp], #4
 801d49c:	b003      	add	sp, #12
 801d49e:	4770      	bx	lr
 801d4a0:	20000064 	.word	0x20000064

0801d4a4 <memmove>:
 801d4a4:	4288      	cmp	r0, r1
 801d4a6:	b510      	push	{r4, lr}
 801d4a8:	eb01 0402 	add.w	r4, r1, r2
 801d4ac:	d902      	bls.n	801d4b4 <memmove+0x10>
 801d4ae:	4284      	cmp	r4, r0
 801d4b0:	4623      	mov	r3, r4
 801d4b2:	d807      	bhi.n	801d4c4 <memmove+0x20>
 801d4b4:	1e43      	subs	r3, r0, #1
 801d4b6:	42a1      	cmp	r1, r4
 801d4b8:	d008      	beq.n	801d4cc <memmove+0x28>
 801d4ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d4be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d4c2:	e7f8      	b.n	801d4b6 <memmove+0x12>
 801d4c4:	4402      	add	r2, r0
 801d4c6:	4601      	mov	r1, r0
 801d4c8:	428a      	cmp	r2, r1
 801d4ca:	d100      	bne.n	801d4ce <memmove+0x2a>
 801d4cc:	bd10      	pop	{r4, pc}
 801d4ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d4d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d4d6:	e7f7      	b.n	801d4c8 <memmove+0x24>

0801d4d8 <__malloc_lock>:
 801d4d8:	4801      	ldr	r0, [pc, #4]	; (801d4e0 <__malloc_lock+0x8>)
 801d4da:	f000 bc11 	b.w	801dd00 <__retarget_lock_acquire_recursive>
 801d4de:	bf00      	nop
 801d4e0:	20000e08 	.word	0x20000e08

0801d4e4 <__malloc_unlock>:
 801d4e4:	4801      	ldr	r0, [pc, #4]	; (801d4ec <__malloc_unlock+0x8>)
 801d4e6:	f000 bc0c 	b.w	801dd02 <__retarget_lock_release_recursive>
 801d4ea:	bf00      	nop
 801d4ec:	20000e08 	.word	0x20000e08

0801d4f0 <_realloc_r>:
 801d4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4f4:	4680      	mov	r8, r0
 801d4f6:	4614      	mov	r4, r2
 801d4f8:	460e      	mov	r6, r1
 801d4fa:	b921      	cbnz	r1, 801d506 <_realloc_r+0x16>
 801d4fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d500:	4611      	mov	r1, r2
 801d502:	f7ff bd93 	b.w	801d02c <_malloc_r>
 801d506:	b92a      	cbnz	r2, 801d514 <_realloc_r+0x24>
 801d508:	f7ff fd24 	bl	801cf54 <_free_r>
 801d50c:	4625      	mov	r5, r4
 801d50e:	4628      	mov	r0, r5
 801d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d514:	f000 fc5c 	bl	801ddd0 <_malloc_usable_size_r>
 801d518:	4284      	cmp	r4, r0
 801d51a:	4607      	mov	r7, r0
 801d51c:	d802      	bhi.n	801d524 <_realloc_r+0x34>
 801d51e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d522:	d812      	bhi.n	801d54a <_realloc_r+0x5a>
 801d524:	4621      	mov	r1, r4
 801d526:	4640      	mov	r0, r8
 801d528:	f7ff fd80 	bl	801d02c <_malloc_r>
 801d52c:	4605      	mov	r5, r0
 801d52e:	2800      	cmp	r0, #0
 801d530:	d0ed      	beq.n	801d50e <_realloc_r+0x1e>
 801d532:	42bc      	cmp	r4, r7
 801d534:	4622      	mov	r2, r4
 801d536:	4631      	mov	r1, r6
 801d538:	bf28      	it	cs
 801d53a:	463a      	movcs	r2, r7
 801d53c:	f7ff f824 	bl	801c588 <memcpy>
 801d540:	4631      	mov	r1, r6
 801d542:	4640      	mov	r0, r8
 801d544:	f7ff fd06 	bl	801cf54 <_free_r>
 801d548:	e7e1      	b.n	801d50e <_realloc_r+0x1e>
 801d54a:	4635      	mov	r5, r6
 801d54c:	e7df      	b.n	801d50e <_realloc_r+0x1e>

0801d54e <__sfputc_r>:
 801d54e:	6893      	ldr	r3, [r2, #8]
 801d550:	3b01      	subs	r3, #1
 801d552:	2b00      	cmp	r3, #0
 801d554:	b410      	push	{r4}
 801d556:	6093      	str	r3, [r2, #8]
 801d558:	da08      	bge.n	801d56c <__sfputc_r+0x1e>
 801d55a:	6994      	ldr	r4, [r2, #24]
 801d55c:	42a3      	cmp	r3, r4
 801d55e:	db01      	blt.n	801d564 <__sfputc_r+0x16>
 801d560:	290a      	cmp	r1, #10
 801d562:	d103      	bne.n	801d56c <__sfputc_r+0x1e>
 801d564:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d568:	f000 b94a 	b.w	801d800 <__swbuf_r>
 801d56c:	6813      	ldr	r3, [r2, #0]
 801d56e:	1c58      	adds	r0, r3, #1
 801d570:	6010      	str	r0, [r2, #0]
 801d572:	7019      	strb	r1, [r3, #0]
 801d574:	4608      	mov	r0, r1
 801d576:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d57a:	4770      	bx	lr

0801d57c <__sfputs_r>:
 801d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d57e:	4606      	mov	r6, r0
 801d580:	460f      	mov	r7, r1
 801d582:	4614      	mov	r4, r2
 801d584:	18d5      	adds	r5, r2, r3
 801d586:	42ac      	cmp	r4, r5
 801d588:	d101      	bne.n	801d58e <__sfputs_r+0x12>
 801d58a:	2000      	movs	r0, #0
 801d58c:	e007      	b.n	801d59e <__sfputs_r+0x22>
 801d58e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d592:	463a      	mov	r2, r7
 801d594:	4630      	mov	r0, r6
 801d596:	f7ff ffda 	bl	801d54e <__sfputc_r>
 801d59a:	1c43      	adds	r3, r0, #1
 801d59c:	d1f3      	bne.n	801d586 <__sfputs_r+0xa>
 801d59e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d5a0 <_vfiprintf_r>:
 801d5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d5a4:	460d      	mov	r5, r1
 801d5a6:	b09d      	sub	sp, #116	; 0x74
 801d5a8:	4614      	mov	r4, r2
 801d5aa:	4698      	mov	r8, r3
 801d5ac:	4606      	mov	r6, r0
 801d5ae:	b118      	cbz	r0, 801d5b8 <_vfiprintf_r+0x18>
 801d5b0:	6983      	ldr	r3, [r0, #24]
 801d5b2:	b90b      	cbnz	r3, 801d5b8 <_vfiprintf_r+0x18>
 801d5b4:	f000 fb06 	bl	801dbc4 <__sinit>
 801d5b8:	4b89      	ldr	r3, [pc, #548]	; (801d7e0 <_vfiprintf_r+0x240>)
 801d5ba:	429d      	cmp	r5, r3
 801d5bc:	d11b      	bne.n	801d5f6 <_vfiprintf_r+0x56>
 801d5be:	6875      	ldr	r5, [r6, #4]
 801d5c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d5c2:	07d9      	lsls	r1, r3, #31
 801d5c4:	d405      	bmi.n	801d5d2 <_vfiprintf_r+0x32>
 801d5c6:	89ab      	ldrh	r3, [r5, #12]
 801d5c8:	059a      	lsls	r2, r3, #22
 801d5ca:	d402      	bmi.n	801d5d2 <_vfiprintf_r+0x32>
 801d5cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d5ce:	f000 fb97 	bl	801dd00 <__retarget_lock_acquire_recursive>
 801d5d2:	89ab      	ldrh	r3, [r5, #12]
 801d5d4:	071b      	lsls	r3, r3, #28
 801d5d6:	d501      	bpl.n	801d5dc <_vfiprintf_r+0x3c>
 801d5d8:	692b      	ldr	r3, [r5, #16]
 801d5da:	b9eb      	cbnz	r3, 801d618 <_vfiprintf_r+0x78>
 801d5dc:	4629      	mov	r1, r5
 801d5de:	4630      	mov	r0, r6
 801d5e0:	f000 f960 	bl	801d8a4 <__swsetup_r>
 801d5e4:	b1c0      	cbz	r0, 801d618 <_vfiprintf_r+0x78>
 801d5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d5e8:	07dc      	lsls	r4, r3, #31
 801d5ea:	d50e      	bpl.n	801d60a <_vfiprintf_r+0x6a>
 801d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d5f0:	b01d      	add	sp, #116	; 0x74
 801d5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5f6:	4b7b      	ldr	r3, [pc, #492]	; (801d7e4 <_vfiprintf_r+0x244>)
 801d5f8:	429d      	cmp	r5, r3
 801d5fa:	d101      	bne.n	801d600 <_vfiprintf_r+0x60>
 801d5fc:	68b5      	ldr	r5, [r6, #8]
 801d5fe:	e7df      	b.n	801d5c0 <_vfiprintf_r+0x20>
 801d600:	4b79      	ldr	r3, [pc, #484]	; (801d7e8 <_vfiprintf_r+0x248>)
 801d602:	429d      	cmp	r5, r3
 801d604:	bf08      	it	eq
 801d606:	68f5      	ldreq	r5, [r6, #12]
 801d608:	e7da      	b.n	801d5c0 <_vfiprintf_r+0x20>
 801d60a:	89ab      	ldrh	r3, [r5, #12]
 801d60c:	0598      	lsls	r0, r3, #22
 801d60e:	d4ed      	bmi.n	801d5ec <_vfiprintf_r+0x4c>
 801d610:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d612:	f000 fb76 	bl	801dd02 <__retarget_lock_release_recursive>
 801d616:	e7e9      	b.n	801d5ec <_vfiprintf_r+0x4c>
 801d618:	2300      	movs	r3, #0
 801d61a:	9309      	str	r3, [sp, #36]	; 0x24
 801d61c:	2320      	movs	r3, #32
 801d61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d622:	f8cd 800c 	str.w	r8, [sp, #12]
 801d626:	2330      	movs	r3, #48	; 0x30
 801d628:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d7ec <_vfiprintf_r+0x24c>
 801d62c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d630:	f04f 0901 	mov.w	r9, #1
 801d634:	4623      	mov	r3, r4
 801d636:	469a      	mov	sl, r3
 801d638:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d63c:	b10a      	cbz	r2, 801d642 <_vfiprintf_r+0xa2>
 801d63e:	2a25      	cmp	r2, #37	; 0x25
 801d640:	d1f9      	bne.n	801d636 <_vfiprintf_r+0x96>
 801d642:	ebba 0b04 	subs.w	fp, sl, r4
 801d646:	d00b      	beq.n	801d660 <_vfiprintf_r+0xc0>
 801d648:	465b      	mov	r3, fp
 801d64a:	4622      	mov	r2, r4
 801d64c:	4629      	mov	r1, r5
 801d64e:	4630      	mov	r0, r6
 801d650:	f7ff ff94 	bl	801d57c <__sfputs_r>
 801d654:	3001      	adds	r0, #1
 801d656:	f000 80aa 	beq.w	801d7ae <_vfiprintf_r+0x20e>
 801d65a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d65c:	445a      	add	r2, fp
 801d65e:	9209      	str	r2, [sp, #36]	; 0x24
 801d660:	f89a 3000 	ldrb.w	r3, [sl]
 801d664:	2b00      	cmp	r3, #0
 801d666:	f000 80a2 	beq.w	801d7ae <_vfiprintf_r+0x20e>
 801d66a:	2300      	movs	r3, #0
 801d66c:	f04f 32ff 	mov.w	r2, #4294967295
 801d670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d674:	f10a 0a01 	add.w	sl, sl, #1
 801d678:	9304      	str	r3, [sp, #16]
 801d67a:	9307      	str	r3, [sp, #28]
 801d67c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d680:	931a      	str	r3, [sp, #104]	; 0x68
 801d682:	4654      	mov	r4, sl
 801d684:	2205      	movs	r2, #5
 801d686:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d68a:	4858      	ldr	r0, [pc, #352]	; (801d7ec <_vfiprintf_r+0x24c>)
 801d68c:	f7fb f8b0 	bl	80187f0 <memchr>
 801d690:	9a04      	ldr	r2, [sp, #16]
 801d692:	b9d8      	cbnz	r0, 801d6cc <_vfiprintf_r+0x12c>
 801d694:	06d1      	lsls	r1, r2, #27
 801d696:	bf44      	itt	mi
 801d698:	2320      	movmi	r3, #32
 801d69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d69e:	0713      	lsls	r3, r2, #28
 801d6a0:	bf44      	itt	mi
 801d6a2:	232b      	movmi	r3, #43	; 0x2b
 801d6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d6a8:	f89a 3000 	ldrb.w	r3, [sl]
 801d6ac:	2b2a      	cmp	r3, #42	; 0x2a
 801d6ae:	d015      	beq.n	801d6dc <_vfiprintf_r+0x13c>
 801d6b0:	9a07      	ldr	r2, [sp, #28]
 801d6b2:	4654      	mov	r4, sl
 801d6b4:	2000      	movs	r0, #0
 801d6b6:	f04f 0c0a 	mov.w	ip, #10
 801d6ba:	4621      	mov	r1, r4
 801d6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d6c0:	3b30      	subs	r3, #48	; 0x30
 801d6c2:	2b09      	cmp	r3, #9
 801d6c4:	d94e      	bls.n	801d764 <_vfiprintf_r+0x1c4>
 801d6c6:	b1b0      	cbz	r0, 801d6f6 <_vfiprintf_r+0x156>
 801d6c8:	9207      	str	r2, [sp, #28]
 801d6ca:	e014      	b.n	801d6f6 <_vfiprintf_r+0x156>
 801d6cc:	eba0 0308 	sub.w	r3, r0, r8
 801d6d0:	fa09 f303 	lsl.w	r3, r9, r3
 801d6d4:	4313      	orrs	r3, r2
 801d6d6:	9304      	str	r3, [sp, #16]
 801d6d8:	46a2      	mov	sl, r4
 801d6da:	e7d2      	b.n	801d682 <_vfiprintf_r+0xe2>
 801d6dc:	9b03      	ldr	r3, [sp, #12]
 801d6de:	1d19      	adds	r1, r3, #4
 801d6e0:	681b      	ldr	r3, [r3, #0]
 801d6e2:	9103      	str	r1, [sp, #12]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	bfbb      	ittet	lt
 801d6e8:	425b      	neglt	r3, r3
 801d6ea:	f042 0202 	orrlt.w	r2, r2, #2
 801d6ee:	9307      	strge	r3, [sp, #28]
 801d6f0:	9307      	strlt	r3, [sp, #28]
 801d6f2:	bfb8      	it	lt
 801d6f4:	9204      	strlt	r2, [sp, #16]
 801d6f6:	7823      	ldrb	r3, [r4, #0]
 801d6f8:	2b2e      	cmp	r3, #46	; 0x2e
 801d6fa:	d10c      	bne.n	801d716 <_vfiprintf_r+0x176>
 801d6fc:	7863      	ldrb	r3, [r4, #1]
 801d6fe:	2b2a      	cmp	r3, #42	; 0x2a
 801d700:	d135      	bne.n	801d76e <_vfiprintf_r+0x1ce>
 801d702:	9b03      	ldr	r3, [sp, #12]
 801d704:	1d1a      	adds	r2, r3, #4
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	9203      	str	r2, [sp, #12]
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	bfb8      	it	lt
 801d70e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d712:	3402      	adds	r4, #2
 801d714:	9305      	str	r3, [sp, #20]
 801d716:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d7fc <_vfiprintf_r+0x25c>
 801d71a:	7821      	ldrb	r1, [r4, #0]
 801d71c:	2203      	movs	r2, #3
 801d71e:	4650      	mov	r0, sl
 801d720:	f7fb f866 	bl	80187f0 <memchr>
 801d724:	b140      	cbz	r0, 801d738 <_vfiprintf_r+0x198>
 801d726:	2340      	movs	r3, #64	; 0x40
 801d728:	eba0 000a 	sub.w	r0, r0, sl
 801d72c:	fa03 f000 	lsl.w	r0, r3, r0
 801d730:	9b04      	ldr	r3, [sp, #16]
 801d732:	4303      	orrs	r3, r0
 801d734:	3401      	adds	r4, #1
 801d736:	9304      	str	r3, [sp, #16]
 801d738:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d73c:	482c      	ldr	r0, [pc, #176]	; (801d7f0 <_vfiprintf_r+0x250>)
 801d73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d742:	2206      	movs	r2, #6
 801d744:	f7fb f854 	bl	80187f0 <memchr>
 801d748:	2800      	cmp	r0, #0
 801d74a:	d03f      	beq.n	801d7cc <_vfiprintf_r+0x22c>
 801d74c:	4b29      	ldr	r3, [pc, #164]	; (801d7f4 <_vfiprintf_r+0x254>)
 801d74e:	bb1b      	cbnz	r3, 801d798 <_vfiprintf_r+0x1f8>
 801d750:	9b03      	ldr	r3, [sp, #12]
 801d752:	3307      	adds	r3, #7
 801d754:	f023 0307 	bic.w	r3, r3, #7
 801d758:	3308      	adds	r3, #8
 801d75a:	9303      	str	r3, [sp, #12]
 801d75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d75e:	443b      	add	r3, r7
 801d760:	9309      	str	r3, [sp, #36]	; 0x24
 801d762:	e767      	b.n	801d634 <_vfiprintf_r+0x94>
 801d764:	fb0c 3202 	mla	r2, ip, r2, r3
 801d768:	460c      	mov	r4, r1
 801d76a:	2001      	movs	r0, #1
 801d76c:	e7a5      	b.n	801d6ba <_vfiprintf_r+0x11a>
 801d76e:	2300      	movs	r3, #0
 801d770:	3401      	adds	r4, #1
 801d772:	9305      	str	r3, [sp, #20]
 801d774:	4619      	mov	r1, r3
 801d776:	f04f 0c0a 	mov.w	ip, #10
 801d77a:	4620      	mov	r0, r4
 801d77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d780:	3a30      	subs	r2, #48	; 0x30
 801d782:	2a09      	cmp	r2, #9
 801d784:	d903      	bls.n	801d78e <_vfiprintf_r+0x1ee>
 801d786:	2b00      	cmp	r3, #0
 801d788:	d0c5      	beq.n	801d716 <_vfiprintf_r+0x176>
 801d78a:	9105      	str	r1, [sp, #20]
 801d78c:	e7c3      	b.n	801d716 <_vfiprintf_r+0x176>
 801d78e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d792:	4604      	mov	r4, r0
 801d794:	2301      	movs	r3, #1
 801d796:	e7f0      	b.n	801d77a <_vfiprintf_r+0x1da>
 801d798:	ab03      	add	r3, sp, #12
 801d79a:	9300      	str	r3, [sp, #0]
 801d79c:	462a      	mov	r2, r5
 801d79e:	4b16      	ldr	r3, [pc, #88]	; (801d7f8 <_vfiprintf_r+0x258>)
 801d7a0:	a904      	add	r1, sp, #16
 801d7a2:	4630      	mov	r0, r6
 801d7a4:	f7fc f830 	bl	8019808 <_printf_float>
 801d7a8:	4607      	mov	r7, r0
 801d7aa:	1c78      	adds	r0, r7, #1
 801d7ac:	d1d6      	bne.n	801d75c <_vfiprintf_r+0x1bc>
 801d7ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d7b0:	07d9      	lsls	r1, r3, #31
 801d7b2:	d405      	bmi.n	801d7c0 <_vfiprintf_r+0x220>
 801d7b4:	89ab      	ldrh	r3, [r5, #12]
 801d7b6:	059a      	lsls	r2, r3, #22
 801d7b8:	d402      	bmi.n	801d7c0 <_vfiprintf_r+0x220>
 801d7ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d7bc:	f000 faa1 	bl	801dd02 <__retarget_lock_release_recursive>
 801d7c0:	89ab      	ldrh	r3, [r5, #12]
 801d7c2:	065b      	lsls	r3, r3, #25
 801d7c4:	f53f af12 	bmi.w	801d5ec <_vfiprintf_r+0x4c>
 801d7c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d7ca:	e711      	b.n	801d5f0 <_vfiprintf_r+0x50>
 801d7cc:	ab03      	add	r3, sp, #12
 801d7ce:	9300      	str	r3, [sp, #0]
 801d7d0:	462a      	mov	r2, r5
 801d7d2:	4b09      	ldr	r3, [pc, #36]	; (801d7f8 <_vfiprintf_r+0x258>)
 801d7d4:	a904      	add	r1, sp, #16
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	f7fc faba 	bl	8019d50 <_printf_i>
 801d7dc:	e7e4      	b.n	801d7a8 <_vfiprintf_r+0x208>
 801d7de:	bf00      	nop
 801d7e0:	0805238c 	.word	0x0805238c
 801d7e4:	080523ac 	.word	0x080523ac
 801d7e8:	0805236c 	.word	0x0805236c
 801d7ec:	0805231c 	.word	0x0805231c
 801d7f0:	08052326 	.word	0x08052326
 801d7f4:	08019809 	.word	0x08019809
 801d7f8:	0801d57d 	.word	0x0801d57d
 801d7fc:	08052322 	.word	0x08052322

0801d800 <__swbuf_r>:
 801d800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d802:	460e      	mov	r6, r1
 801d804:	4614      	mov	r4, r2
 801d806:	4605      	mov	r5, r0
 801d808:	b118      	cbz	r0, 801d812 <__swbuf_r+0x12>
 801d80a:	6983      	ldr	r3, [r0, #24]
 801d80c:	b90b      	cbnz	r3, 801d812 <__swbuf_r+0x12>
 801d80e:	f000 f9d9 	bl	801dbc4 <__sinit>
 801d812:	4b21      	ldr	r3, [pc, #132]	; (801d898 <__swbuf_r+0x98>)
 801d814:	429c      	cmp	r4, r3
 801d816:	d12b      	bne.n	801d870 <__swbuf_r+0x70>
 801d818:	686c      	ldr	r4, [r5, #4]
 801d81a:	69a3      	ldr	r3, [r4, #24]
 801d81c:	60a3      	str	r3, [r4, #8]
 801d81e:	89a3      	ldrh	r3, [r4, #12]
 801d820:	071a      	lsls	r2, r3, #28
 801d822:	d52f      	bpl.n	801d884 <__swbuf_r+0x84>
 801d824:	6923      	ldr	r3, [r4, #16]
 801d826:	b36b      	cbz	r3, 801d884 <__swbuf_r+0x84>
 801d828:	6923      	ldr	r3, [r4, #16]
 801d82a:	6820      	ldr	r0, [r4, #0]
 801d82c:	1ac0      	subs	r0, r0, r3
 801d82e:	6963      	ldr	r3, [r4, #20]
 801d830:	b2f6      	uxtb	r6, r6
 801d832:	4283      	cmp	r3, r0
 801d834:	4637      	mov	r7, r6
 801d836:	dc04      	bgt.n	801d842 <__swbuf_r+0x42>
 801d838:	4621      	mov	r1, r4
 801d83a:	4628      	mov	r0, r5
 801d83c:	f000 f92e 	bl	801da9c <_fflush_r>
 801d840:	bb30      	cbnz	r0, 801d890 <__swbuf_r+0x90>
 801d842:	68a3      	ldr	r3, [r4, #8]
 801d844:	3b01      	subs	r3, #1
 801d846:	60a3      	str	r3, [r4, #8]
 801d848:	6823      	ldr	r3, [r4, #0]
 801d84a:	1c5a      	adds	r2, r3, #1
 801d84c:	6022      	str	r2, [r4, #0]
 801d84e:	701e      	strb	r6, [r3, #0]
 801d850:	6963      	ldr	r3, [r4, #20]
 801d852:	3001      	adds	r0, #1
 801d854:	4283      	cmp	r3, r0
 801d856:	d004      	beq.n	801d862 <__swbuf_r+0x62>
 801d858:	89a3      	ldrh	r3, [r4, #12]
 801d85a:	07db      	lsls	r3, r3, #31
 801d85c:	d506      	bpl.n	801d86c <__swbuf_r+0x6c>
 801d85e:	2e0a      	cmp	r6, #10
 801d860:	d104      	bne.n	801d86c <__swbuf_r+0x6c>
 801d862:	4621      	mov	r1, r4
 801d864:	4628      	mov	r0, r5
 801d866:	f000 f919 	bl	801da9c <_fflush_r>
 801d86a:	b988      	cbnz	r0, 801d890 <__swbuf_r+0x90>
 801d86c:	4638      	mov	r0, r7
 801d86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d870:	4b0a      	ldr	r3, [pc, #40]	; (801d89c <__swbuf_r+0x9c>)
 801d872:	429c      	cmp	r4, r3
 801d874:	d101      	bne.n	801d87a <__swbuf_r+0x7a>
 801d876:	68ac      	ldr	r4, [r5, #8]
 801d878:	e7cf      	b.n	801d81a <__swbuf_r+0x1a>
 801d87a:	4b09      	ldr	r3, [pc, #36]	; (801d8a0 <__swbuf_r+0xa0>)
 801d87c:	429c      	cmp	r4, r3
 801d87e:	bf08      	it	eq
 801d880:	68ec      	ldreq	r4, [r5, #12]
 801d882:	e7ca      	b.n	801d81a <__swbuf_r+0x1a>
 801d884:	4621      	mov	r1, r4
 801d886:	4628      	mov	r0, r5
 801d888:	f000 f80c 	bl	801d8a4 <__swsetup_r>
 801d88c:	2800      	cmp	r0, #0
 801d88e:	d0cb      	beq.n	801d828 <__swbuf_r+0x28>
 801d890:	f04f 37ff 	mov.w	r7, #4294967295
 801d894:	e7ea      	b.n	801d86c <__swbuf_r+0x6c>
 801d896:	bf00      	nop
 801d898:	0805238c 	.word	0x0805238c
 801d89c:	080523ac 	.word	0x080523ac
 801d8a0:	0805236c 	.word	0x0805236c

0801d8a4 <__swsetup_r>:
 801d8a4:	4b32      	ldr	r3, [pc, #200]	; (801d970 <__swsetup_r+0xcc>)
 801d8a6:	b570      	push	{r4, r5, r6, lr}
 801d8a8:	681d      	ldr	r5, [r3, #0]
 801d8aa:	4606      	mov	r6, r0
 801d8ac:	460c      	mov	r4, r1
 801d8ae:	b125      	cbz	r5, 801d8ba <__swsetup_r+0x16>
 801d8b0:	69ab      	ldr	r3, [r5, #24]
 801d8b2:	b913      	cbnz	r3, 801d8ba <__swsetup_r+0x16>
 801d8b4:	4628      	mov	r0, r5
 801d8b6:	f000 f985 	bl	801dbc4 <__sinit>
 801d8ba:	4b2e      	ldr	r3, [pc, #184]	; (801d974 <__swsetup_r+0xd0>)
 801d8bc:	429c      	cmp	r4, r3
 801d8be:	d10f      	bne.n	801d8e0 <__swsetup_r+0x3c>
 801d8c0:	686c      	ldr	r4, [r5, #4]
 801d8c2:	89a3      	ldrh	r3, [r4, #12]
 801d8c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d8c8:	0719      	lsls	r1, r3, #28
 801d8ca:	d42c      	bmi.n	801d926 <__swsetup_r+0x82>
 801d8cc:	06dd      	lsls	r5, r3, #27
 801d8ce:	d411      	bmi.n	801d8f4 <__swsetup_r+0x50>
 801d8d0:	2309      	movs	r3, #9
 801d8d2:	6033      	str	r3, [r6, #0]
 801d8d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d8d8:	81a3      	strh	r3, [r4, #12]
 801d8da:	f04f 30ff 	mov.w	r0, #4294967295
 801d8de:	e03e      	b.n	801d95e <__swsetup_r+0xba>
 801d8e0:	4b25      	ldr	r3, [pc, #148]	; (801d978 <__swsetup_r+0xd4>)
 801d8e2:	429c      	cmp	r4, r3
 801d8e4:	d101      	bne.n	801d8ea <__swsetup_r+0x46>
 801d8e6:	68ac      	ldr	r4, [r5, #8]
 801d8e8:	e7eb      	b.n	801d8c2 <__swsetup_r+0x1e>
 801d8ea:	4b24      	ldr	r3, [pc, #144]	; (801d97c <__swsetup_r+0xd8>)
 801d8ec:	429c      	cmp	r4, r3
 801d8ee:	bf08      	it	eq
 801d8f0:	68ec      	ldreq	r4, [r5, #12]
 801d8f2:	e7e6      	b.n	801d8c2 <__swsetup_r+0x1e>
 801d8f4:	0758      	lsls	r0, r3, #29
 801d8f6:	d512      	bpl.n	801d91e <__swsetup_r+0x7a>
 801d8f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d8fa:	b141      	cbz	r1, 801d90e <__swsetup_r+0x6a>
 801d8fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d900:	4299      	cmp	r1, r3
 801d902:	d002      	beq.n	801d90a <__swsetup_r+0x66>
 801d904:	4630      	mov	r0, r6
 801d906:	f7ff fb25 	bl	801cf54 <_free_r>
 801d90a:	2300      	movs	r3, #0
 801d90c:	6363      	str	r3, [r4, #52]	; 0x34
 801d90e:	89a3      	ldrh	r3, [r4, #12]
 801d910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d914:	81a3      	strh	r3, [r4, #12]
 801d916:	2300      	movs	r3, #0
 801d918:	6063      	str	r3, [r4, #4]
 801d91a:	6923      	ldr	r3, [r4, #16]
 801d91c:	6023      	str	r3, [r4, #0]
 801d91e:	89a3      	ldrh	r3, [r4, #12]
 801d920:	f043 0308 	orr.w	r3, r3, #8
 801d924:	81a3      	strh	r3, [r4, #12]
 801d926:	6923      	ldr	r3, [r4, #16]
 801d928:	b94b      	cbnz	r3, 801d93e <__swsetup_r+0x9a>
 801d92a:	89a3      	ldrh	r3, [r4, #12]
 801d92c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d934:	d003      	beq.n	801d93e <__swsetup_r+0x9a>
 801d936:	4621      	mov	r1, r4
 801d938:	4630      	mov	r0, r6
 801d93a:	f000 fa09 	bl	801dd50 <__smakebuf_r>
 801d93e:	89a0      	ldrh	r0, [r4, #12]
 801d940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d944:	f010 0301 	ands.w	r3, r0, #1
 801d948:	d00a      	beq.n	801d960 <__swsetup_r+0xbc>
 801d94a:	2300      	movs	r3, #0
 801d94c:	60a3      	str	r3, [r4, #8]
 801d94e:	6963      	ldr	r3, [r4, #20]
 801d950:	425b      	negs	r3, r3
 801d952:	61a3      	str	r3, [r4, #24]
 801d954:	6923      	ldr	r3, [r4, #16]
 801d956:	b943      	cbnz	r3, 801d96a <__swsetup_r+0xc6>
 801d958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d95c:	d1ba      	bne.n	801d8d4 <__swsetup_r+0x30>
 801d95e:	bd70      	pop	{r4, r5, r6, pc}
 801d960:	0781      	lsls	r1, r0, #30
 801d962:	bf58      	it	pl
 801d964:	6963      	ldrpl	r3, [r4, #20]
 801d966:	60a3      	str	r3, [r4, #8]
 801d968:	e7f4      	b.n	801d954 <__swsetup_r+0xb0>
 801d96a:	2000      	movs	r0, #0
 801d96c:	e7f7      	b.n	801d95e <__swsetup_r+0xba>
 801d96e:	bf00      	nop
 801d970:	20000064 	.word	0x20000064
 801d974:	0805238c 	.word	0x0805238c
 801d978:	080523ac 	.word	0x080523ac
 801d97c:	0805236c 	.word	0x0805236c

0801d980 <abort>:
 801d980:	b508      	push	{r3, lr}
 801d982:	2006      	movs	r0, #6
 801d984:	f000 fa54 	bl	801de30 <raise>
 801d988:	2001      	movs	r0, #1
 801d98a:	f7e8 fade 	bl	8005f4a <_exit>
	...

0801d990 <__sflush_r>:
 801d990:	898a      	ldrh	r2, [r1, #12]
 801d992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d996:	4605      	mov	r5, r0
 801d998:	0710      	lsls	r0, r2, #28
 801d99a:	460c      	mov	r4, r1
 801d99c:	d458      	bmi.n	801da50 <__sflush_r+0xc0>
 801d99e:	684b      	ldr	r3, [r1, #4]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	dc05      	bgt.n	801d9b0 <__sflush_r+0x20>
 801d9a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	dc02      	bgt.n	801d9b0 <__sflush_r+0x20>
 801d9aa:	2000      	movs	r0, #0
 801d9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9b2:	2e00      	cmp	r6, #0
 801d9b4:	d0f9      	beq.n	801d9aa <__sflush_r+0x1a>
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d9bc:	682f      	ldr	r7, [r5, #0]
 801d9be:	602b      	str	r3, [r5, #0]
 801d9c0:	d032      	beq.n	801da28 <__sflush_r+0x98>
 801d9c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d9c4:	89a3      	ldrh	r3, [r4, #12]
 801d9c6:	075a      	lsls	r2, r3, #29
 801d9c8:	d505      	bpl.n	801d9d6 <__sflush_r+0x46>
 801d9ca:	6863      	ldr	r3, [r4, #4]
 801d9cc:	1ac0      	subs	r0, r0, r3
 801d9ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d9d0:	b10b      	cbz	r3, 801d9d6 <__sflush_r+0x46>
 801d9d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d9d4:	1ac0      	subs	r0, r0, r3
 801d9d6:	2300      	movs	r3, #0
 801d9d8:	4602      	mov	r2, r0
 801d9da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d9dc:	6a21      	ldr	r1, [r4, #32]
 801d9de:	4628      	mov	r0, r5
 801d9e0:	47b0      	blx	r6
 801d9e2:	1c43      	adds	r3, r0, #1
 801d9e4:	89a3      	ldrh	r3, [r4, #12]
 801d9e6:	d106      	bne.n	801d9f6 <__sflush_r+0x66>
 801d9e8:	6829      	ldr	r1, [r5, #0]
 801d9ea:	291d      	cmp	r1, #29
 801d9ec:	d82c      	bhi.n	801da48 <__sflush_r+0xb8>
 801d9ee:	4a2a      	ldr	r2, [pc, #168]	; (801da98 <__sflush_r+0x108>)
 801d9f0:	40ca      	lsrs	r2, r1
 801d9f2:	07d6      	lsls	r6, r2, #31
 801d9f4:	d528      	bpl.n	801da48 <__sflush_r+0xb8>
 801d9f6:	2200      	movs	r2, #0
 801d9f8:	6062      	str	r2, [r4, #4]
 801d9fa:	04d9      	lsls	r1, r3, #19
 801d9fc:	6922      	ldr	r2, [r4, #16]
 801d9fe:	6022      	str	r2, [r4, #0]
 801da00:	d504      	bpl.n	801da0c <__sflush_r+0x7c>
 801da02:	1c42      	adds	r2, r0, #1
 801da04:	d101      	bne.n	801da0a <__sflush_r+0x7a>
 801da06:	682b      	ldr	r3, [r5, #0]
 801da08:	b903      	cbnz	r3, 801da0c <__sflush_r+0x7c>
 801da0a:	6560      	str	r0, [r4, #84]	; 0x54
 801da0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801da0e:	602f      	str	r7, [r5, #0]
 801da10:	2900      	cmp	r1, #0
 801da12:	d0ca      	beq.n	801d9aa <__sflush_r+0x1a>
 801da14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801da18:	4299      	cmp	r1, r3
 801da1a:	d002      	beq.n	801da22 <__sflush_r+0x92>
 801da1c:	4628      	mov	r0, r5
 801da1e:	f7ff fa99 	bl	801cf54 <_free_r>
 801da22:	2000      	movs	r0, #0
 801da24:	6360      	str	r0, [r4, #52]	; 0x34
 801da26:	e7c1      	b.n	801d9ac <__sflush_r+0x1c>
 801da28:	6a21      	ldr	r1, [r4, #32]
 801da2a:	2301      	movs	r3, #1
 801da2c:	4628      	mov	r0, r5
 801da2e:	47b0      	blx	r6
 801da30:	1c41      	adds	r1, r0, #1
 801da32:	d1c7      	bne.n	801d9c4 <__sflush_r+0x34>
 801da34:	682b      	ldr	r3, [r5, #0]
 801da36:	2b00      	cmp	r3, #0
 801da38:	d0c4      	beq.n	801d9c4 <__sflush_r+0x34>
 801da3a:	2b1d      	cmp	r3, #29
 801da3c:	d001      	beq.n	801da42 <__sflush_r+0xb2>
 801da3e:	2b16      	cmp	r3, #22
 801da40:	d101      	bne.n	801da46 <__sflush_r+0xb6>
 801da42:	602f      	str	r7, [r5, #0]
 801da44:	e7b1      	b.n	801d9aa <__sflush_r+0x1a>
 801da46:	89a3      	ldrh	r3, [r4, #12]
 801da48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da4c:	81a3      	strh	r3, [r4, #12]
 801da4e:	e7ad      	b.n	801d9ac <__sflush_r+0x1c>
 801da50:	690f      	ldr	r7, [r1, #16]
 801da52:	2f00      	cmp	r7, #0
 801da54:	d0a9      	beq.n	801d9aa <__sflush_r+0x1a>
 801da56:	0793      	lsls	r3, r2, #30
 801da58:	680e      	ldr	r6, [r1, #0]
 801da5a:	bf08      	it	eq
 801da5c:	694b      	ldreq	r3, [r1, #20]
 801da5e:	600f      	str	r7, [r1, #0]
 801da60:	bf18      	it	ne
 801da62:	2300      	movne	r3, #0
 801da64:	eba6 0807 	sub.w	r8, r6, r7
 801da68:	608b      	str	r3, [r1, #8]
 801da6a:	f1b8 0f00 	cmp.w	r8, #0
 801da6e:	dd9c      	ble.n	801d9aa <__sflush_r+0x1a>
 801da70:	6a21      	ldr	r1, [r4, #32]
 801da72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801da74:	4643      	mov	r3, r8
 801da76:	463a      	mov	r2, r7
 801da78:	4628      	mov	r0, r5
 801da7a:	47b0      	blx	r6
 801da7c:	2800      	cmp	r0, #0
 801da7e:	dc06      	bgt.n	801da8e <__sflush_r+0xfe>
 801da80:	89a3      	ldrh	r3, [r4, #12]
 801da82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801da86:	81a3      	strh	r3, [r4, #12]
 801da88:	f04f 30ff 	mov.w	r0, #4294967295
 801da8c:	e78e      	b.n	801d9ac <__sflush_r+0x1c>
 801da8e:	4407      	add	r7, r0
 801da90:	eba8 0800 	sub.w	r8, r8, r0
 801da94:	e7e9      	b.n	801da6a <__sflush_r+0xda>
 801da96:	bf00      	nop
 801da98:	20400001 	.word	0x20400001

0801da9c <_fflush_r>:
 801da9c:	b538      	push	{r3, r4, r5, lr}
 801da9e:	690b      	ldr	r3, [r1, #16]
 801daa0:	4605      	mov	r5, r0
 801daa2:	460c      	mov	r4, r1
 801daa4:	b913      	cbnz	r3, 801daac <_fflush_r+0x10>
 801daa6:	2500      	movs	r5, #0
 801daa8:	4628      	mov	r0, r5
 801daaa:	bd38      	pop	{r3, r4, r5, pc}
 801daac:	b118      	cbz	r0, 801dab6 <_fflush_r+0x1a>
 801daae:	6983      	ldr	r3, [r0, #24]
 801dab0:	b90b      	cbnz	r3, 801dab6 <_fflush_r+0x1a>
 801dab2:	f000 f887 	bl	801dbc4 <__sinit>
 801dab6:	4b14      	ldr	r3, [pc, #80]	; (801db08 <_fflush_r+0x6c>)
 801dab8:	429c      	cmp	r4, r3
 801daba:	d11b      	bne.n	801daf4 <_fflush_r+0x58>
 801dabc:	686c      	ldr	r4, [r5, #4]
 801dabe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dac2:	2b00      	cmp	r3, #0
 801dac4:	d0ef      	beq.n	801daa6 <_fflush_r+0xa>
 801dac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dac8:	07d0      	lsls	r0, r2, #31
 801daca:	d404      	bmi.n	801dad6 <_fflush_r+0x3a>
 801dacc:	0599      	lsls	r1, r3, #22
 801dace:	d402      	bmi.n	801dad6 <_fflush_r+0x3a>
 801dad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dad2:	f000 f915 	bl	801dd00 <__retarget_lock_acquire_recursive>
 801dad6:	4628      	mov	r0, r5
 801dad8:	4621      	mov	r1, r4
 801dada:	f7ff ff59 	bl	801d990 <__sflush_r>
 801dade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dae0:	07da      	lsls	r2, r3, #31
 801dae2:	4605      	mov	r5, r0
 801dae4:	d4e0      	bmi.n	801daa8 <_fflush_r+0xc>
 801dae6:	89a3      	ldrh	r3, [r4, #12]
 801dae8:	059b      	lsls	r3, r3, #22
 801daea:	d4dd      	bmi.n	801daa8 <_fflush_r+0xc>
 801daec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801daee:	f000 f908 	bl	801dd02 <__retarget_lock_release_recursive>
 801daf2:	e7d9      	b.n	801daa8 <_fflush_r+0xc>
 801daf4:	4b05      	ldr	r3, [pc, #20]	; (801db0c <_fflush_r+0x70>)
 801daf6:	429c      	cmp	r4, r3
 801daf8:	d101      	bne.n	801dafe <_fflush_r+0x62>
 801dafa:	68ac      	ldr	r4, [r5, #8]
 801dafc:	e7df      	b.n	801dabe <_fflush_r+0x22>
 801dafe:	4b04      	ldr	r3, [pc, #16]	; (801db10 <_fflush_r+0x74>)
 801db00:	429c      	cmp	r4, r3
 801db02:	bf08      	it	eq
 801db04:	68ec      	ldreq	r4, [r5, #12]
 801db06:	e7da      	b.n	801dabe <_fflush_r+0x22>
 801db08:	0805238c 	.word	0x0805238c
 801db0c:	080523ac 	.word	0x080523ac
 801db10:	0805236c 	.word	0x0805236c

0801db14 <std>:
 801db14:	2300      	movs	r3, #0
 801db16:	b510      	push	{r4, lr}
 801db18:	4604      	mov	r4, r0
 801db1a:	e9c0 3300 	strd	r3, r3, [r0]
 801db1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801db22:	6083      	str	r3, [r0, #8]
 801db24:	8181      	strh	r1, [r0, #12]
 801db26:	6643      	str	r3, [r0, #100]	; 0x64
 801db28:	81c2      	strh	r2, [r0, #14]
 801db2a:	6183      	str	r3, [r0, #24]
 801db2c:	4619      	mov	r1, r3
 801db2e:	2208      	movs	r2, #8
 801db30:	305c      	adds	r0, #92	; 0x5c
 801db32:	f7fb fdc1 	bl	80196b8 <memset>
 801db36:	4b05      	ldr	r3, [pc, #20]	; (801db4c <std+0x38>)
 801db38:	6263      	str	r3, [r4, #36]	; 0x24
 801db3a:	4b05      	ldr	r3, [pc, #20]	; (801db50 <std+0x3c>)
 801db3c:	62a3      	str	r3, [r4, #40]	; 0x28
 801db3e:	4b05      	ldr	r3, [pc, #20]	; (801db54 <std+0x40>)
 801db40:	62e3      	str	r3, [r4, #44]	; 0x2c
 801db42:	4b05      	ldr	r3, [pc, #20]	; (801db58 <std+0x44>)
 801db44:	6224      	str	r4, [r4, #32]
 801db46:	6323      	str	r3, [r4, #48]	; 0x30
 801db48:	bd10      	pop	{r4, pc}
 801db4a:	bf00      	nop
 801db4c:	0801de69 	.word	0x0801de69
 801db50:	0801de8b 	.word	0x0801de8b
 801db54:	0801dec3 	.word	0x0801dec3
 801db58:	0801dee7 	.word	0x0801dee7

0801db5c <_cleanup_r>:
 801db5c:	4901      	ldr	r1, [pc, #4]	; (801db64 <_cleanup_r+0x8>)
 801db5e:	f000 b8af 	b.w	801dcc0 <_fwalk_reent>
 801db62:	bf00      	nop
 801db64:	0801da9d 	.word	0x0801da9d

0801db68 <__sfmoreglue>:
 801db68:	b570      	push	{r4, r5, r6, lr}
 801db6a:	2268      	movs	r2, #104	; 0x68
 801db6c:	1e4d      	subs	r5, r1, #1
 801db6e:	4355      	muls	r5, r2
 801db70:	460e      	mov	r6, r1
 801db72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801db76:	f7ff fa59 	bl	801d02c <_malloc_r>
 801db7a:	4604      	mov	r4, r0
 801db7c:	b140      	cbz	r0, 801db90 <__sfmoreglue+0x28>
 801db7e:	2100      	movs	r1, #0
 801db80:	e9c0 1600 	strd	r1, r6, [r0]
 801db84:	300c      	adds	r0, #12
 801db86:	60a0      	str	r0, [r4, #8]
 801db88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801db8c:	f7fb fd94 	bl	80196b8 <memset>
 801db90:	4620      	mov	r0, r4
 801db92:	bd70      	pop	{r4, r5, r6, pc}

0801db94 <__sfp_lock_acquire>:
 801db94:	4801      	ldr	r0, [pc, #4]	; (801db9c <__sfp_lock_acquire+0x8>)
 801db96:	f000 b8b3 	b.w	801dd00 <__retarget_lock_acquire_recursive>
 801db9a:	bf00      	nop
 801db9c:	20000e09 	.word	0x20000e09

0801dba0 <__sfp_lock_release>:
 801dba0:	4801      	ldr	r0, [pc, #4]	; (801dba8 <__sfp_lock_release+0x8>)
 801dba2:	f000 b8ae 	b.w	801dd02 <__retarget_lock_release_recursive>
 801dba6:	bf00      	nop
 801dba8:	20000e09 	.word	0x20000e09

0801dbac <__sinit_lock_acquire>:
 801dbac:	4801      	ldr	r0, [pc, #4]	; (801dbb4 <__sinit_lock_acquire+0x8>)
 801dbae:	f000 b8a7 	b.w	801dd00 <__retarget_lock_acquire_recursive>
 801dbb2:	bf00      	nop
 801dbb4:	20000e0a 	.word	0x20000e0a

0801dbb8 <__sinit_lock_release>:
 801dbb8:	4801      	ldr	r0, [pc, #4]	; (801dbc0 <__sinit_lock_release+0x8>)
 801dbba:	f000 b8a2 	b.w	801dd02 <__retarget_lock_release_recursive>
 801dbbe:	bf00      	nop
 801dbc0:	20000e0a 	.word	0x20000e0a

0801dbc4 <__sinit>:
 801dbc4:	b510      	push	{r4, lr}
 801dbc6:	4604      	mov	r4, r0
 801dbc8:	f7ff fff0 	bl	801dbac <__sinit_lock_acquire>
 801dbcc:	69a3      	ldr	r3, [r4, #24]
 801dbce:	b11b      	cbz	r3, 801dbd8 <__sinit+0x14>
 801dbd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dbd4:	f7ff bff0 	b.w	801dbb8 <__sinit_lock_release>
 801dbd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801dbdc:	6523      	str	r3, [r4, #80]	; 0x50
 801dbde:	4b13      	ldr	r3, [pc, #76]	; (801dc2c <__sinit+0x68>)
 801dbe0:	4a13      	ldr	r2, [pc, #76]	; (801dc30 <__sinit+0x6c>)
 801dbe2:	681b      	ldr	r3, [r3, #0]
 801dbe4:	62a2      	str	r2, [r4, #40]	; 0x28
 801dbe6:	42a3      	cmp	r3, r4
 801dbe8:	bf04      	itt	eq
 801dbea:	2301      	moveq	r3, #1
 801dbec:	61a3      	streq	r3, [r4, #24]
 801dbee:	4620      	mov	r0, r4
 801dbf0:	f000 f820 	bl	801dc34 <__sfp>
 801dbf4:	6060      	str	r0, [r4, #4]
 801dbf6:	4620      	mov	r0, r4
 801dbf8:	f000 f81c 	bl	801dc34 <__sfp>
 801dbfc:	60a0      	str	r0, [r4, #8]
 801dbfe:	4620      	mov	r0, r4
 801dc00:	f000 f818 	bl	801dc34 <__sfp>
 801dc04:	2200      	movs	r2, #0
 801dc06:	60e0      	str	r0, [r4, #12]
 801dc08:	2104      	movs	r1, #4
 801dc0a:	6860      	ldr	r0, [r4, #4]
 801dc0c:	f7ff ff82 	bl	801db14 <std>
 801dc10:	68a0      	ldr	r0, [r4, #8]
 801dc12:	2201      	movs	r2, #1
 801dc14:	2109      	movs	r1, #9
 801dc16:	f7ff ff7d 	bl	801db14 <std>
 801dc1a:	68e0      	ldr	r0, [r4, #12]
 801dc1c:	2202      	movs	r2, #2
 801dc1e:	2112      	movs	r1, #18
 801dc20:	f7ff ff78 	bl	801db14 <std>
 801dc24:	2301      	movs	r3, #1
 801dc26:	61a3      	str	r3, [r4, #24]
 801dc28:	e7d2      	b.n	801dbd0 <__sinit+0xc>
 801dc2a:	bf00      	nop
 801dc2c:	08051f28 	.word	0x08051f28
 801dc30:	0801db5d 	.word	0x0801db5d

0801dc34 <__sfp>:
 801dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc36:	4607      	mov	r7, r0
 801dc38:	f7ff ffac 	bl	801db94 <__sfp_lock_acquire>
 801dc3c:	4b1e      	ldr	r3, [pc, #120]	; (801dcb8 <__sfp+0x84>)
 801dc3e:	681e      	ldr	r6, [r3, #0]
 801dc40:	69b3      	ldr	r3, [r6, #24]
 801dc42:	b913      	cbnz	r3, 801dc4a <__sfp+0x16>
 801dc44:	4630      	mov	r0, r6
 801dc46:	f7ff ffbd 	bl	801dbc4 <__sinit>
 801dc4a:	3648      	adds	r6, #72	; 0x48
 801dc4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dc50:	3b01      	subs	r3, #1
 801dc52:	d503      	bpl.n	801dc5c <__sfp+0x28>
 801dc54:	6833      	ldr	r3, [r6, #0]
 801dc56:	b30b      	cbz	r3, 801dc9c <__sfp+0x68>
 801dc58:	6836      	ldr	r6, [r6, #0]
 801dc5a:	e7f7      	b.n	801dc4c <__sfp+0x18>
 801dc5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dc60:	b9d5      	cbnz	r5, 801dc98 <__sfp+0x64>
 801dc62:	4b16      	ldr	r3, [pc, #88]	; (801dcbc <__sfp+0x88>)
 801dc64:	60e3      	str	r3, [r4, #12]
 801dc66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc6a:	6665      	str	r5, [r4, #100]	; 0x64
 801dc6c:	f000 f847 	bl	801dcfe <__retarget_lock_init_recursive>
 801dc70:	f7ff ff96 	bl	801dba0 <__sfp_lock_release>
 801dc74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dc78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dc7c:	6025      	str	r5, [r4, #0]
 801dc7e:	61a5      	str	r5, [r4, #24]
 801dc80:	2208      	movs	r2, #8
 801dc82:	4629      	mov	r1, r5
 801dc84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dc88:	f7fb fd16 	bl	80196b8 <memset>
 801dc8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dc90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dc94:	4620      	mov	r0, r4
 801dc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc98:	3468      	adds	r4, #104	; 0x68
 801dc9a:	e7d9      	b.n	801dc50 <__sfp+0x1c>
 801dc9c:	2104      	movs	r1, #4
 801dc9e:	4638      	mov	r0, r7
 801dca0:	f7ff ff62 	bl	801db68 <__sfmoreglue>
 801dca4:	4604      	mov	r4, r0
 801dca6:	6030      	str	r0, [r6, #0]
 801dca8:	2800      	cmp	r0, #0
 801dcaa:	d1d5      	bne.n	801dc58 <__sfp+0x24>
 801dcac:	f7ff ff78 	bl	801dba0 <__sfp_lock_release>
 801dcb0:	230c      	movs	r3, #12
 801dcb2:	603b      	str	r3, [r7, #0]
 801dcb4:	e7ee      	b.n	801dc94 <__sfp+0x60>
 801dcb6:	bf00      	nop
 801dcb8:	08051f28 	.word	0x08051f28
 801dcbc:	ffff0001 	.word	0xffff0001

0801dcc0 <_fwalk_reent>:
 801dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcc4:	4606      	mov	r6, r0
 801dcc6:	4688      	mov	r8, r1
 801dcc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dccc:	2700      	movs	r7, #0
 801dcce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dcd2:	f1b9 0901 	subs.w	r9, r9, #1
 801dcd6:	d505      	bpl.n	801dce4 <_fwalk_reent+0x24>
 801dcd8:	6824      	ldr	r4, [r4, #0]
 801dcda:	2c00      	cmp	r4, #0
 801dcdc:	d1f7      	bne.n	801dcce <_fwalk_reent+0xe>
 801dcde:	4638      	mov	r0, r7
 801dce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dce4:	89ab      	ldrh	r3, [r5, #12]
 801dce6:	2b01      	cmp	r3, #1
 801dce8:	d907      	bls.n	801dcfa <_fwalk_reent+0x3a>
 801dcea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dcee:	3301      	adds	r3, #1
 801dcf0:	d003      	beq.n	801dcfa <_fwalk_reent+0x3a>
 801dcf2:	4629      	mov	r1, r5
 801dcf4:	4630      	mov	r0, r6
 801dcf6:	47c0      	blx	r8
 801dcf8:	4307      	orrs	r7, r0
 801dcfa:	3568      	adds	r5, #104	; 0x68
 801dcfc:	e7e9      	b.n	801dcd2 <_fwalk_reent+0x12>

0801dcfe <__retarget_lock_init_recursive>:
 801dcfe:	4770      	bx	lr

0801dd00 <__retarget_lock_acquire_recursive>:
 801dd00:	4770      	bx	lr

0801dd02 <__retarget_lock_release_recursive>:
 801dd02:	4770      	bx	lr

0801dd04 <__swhatbuf_r>:
 801dd04:	b570      	push	{r4, r5, r6, lr}
 801dd06:	460e      	mov	r6, r1
 801dd08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd0c:	2900      	cmp	r1, #0
 801dd0e:	b096      	sub	sp, #88	; 0x58
 801dd10:	4614      	mov	r4, r2
 801dd12:	461d      	mov	r5, r3
 801dd14:	da08      	bge.n	801dd28 <__swhatbuf_r+0x24>
 801dd16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dd1a:	2200      	movs	r2, #0
 801dd1c:	602a      	str	r2, [r5, #0]
 801dd1e:	061a      	lsls	r2, r3, #24
 801dd20:	d410      	bmi.n	801dd44 <__swhatbuf_r+0x40>
 801dd22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd26:	e00e      	b.n	801dd46 <__swhatbuf_r+0x42>
 801dd28:	466a      	mov	r2, sp
 801dd2a:	f000 f903 	bl	801df34 <_fstat_r>
 801dd2e:	2800      	cmp	r0, #0
 801dd30:	dbf1      	blt.n	801dd16 <__swhatbuf_r+0x12>
 801dd32:	9a01      	ldr	r2, [sp, #4]
 801dd34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd3c:	425a      	negs	r2, r3
 801dd3e:	415a      	adcs	r2, r3
 801dd40:	602a      	str	r2, [r5, #0]
 801dd42:	e7ee      	b.n	801dd22 <__swhatbuf_r+0x1e>
 801dd44:	2340      	movs	r3, #64	; 0x40
 801dd46:	2000      	movs	r0, #0
 801dd48:	6023      	str	r3, [r4, #0]
 801dd4a:	b016      	add	sp, #88	; 0x58
 801dd4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801dd50 <__smakebuf_r>:
 801dd50:	898b      	ldrh	r3, [r1, #12]
 801dd52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dd54:	079d      	lsls	r5, r3, #30
 801dd56:	4606      	mov	r6, r0
 801dd58:	460c      	mov	r4, r1
 801dd5a:	d507      	bpl.n	801dd6c <__smakebuf_r+0x1c>
 801dd5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dd60:	6023      	str	r3, [r4, #0]
 801dd62:	6123      	str	r3, [r4, #16]
 801dd64:	2301      	movs	r3, #1
 801dd66:	6163      	str	r3, [r4, #20]
 801dd68:	b002      	add	sp, #8
 801dd6a:	bd70      	pop	{r4, r5, r6, pc}
 801dd6c:	ab01      	add	r3, sp, #4
 801dd6e:	466a      	mov	r2, sp
 801dd70:	f7ff ffc8 	bl	801dd04 <__swhatbuf_r>
 801dd74:	9900      	ldr	r1, [sp, #0]
 801dd76:	4605      	mov	r5, r0
 801dd78:	4630      	mov	r0, r6
 801dd7a:	f7ff f957 	bl	801d02c <_malloc_r>
 801dd7e:	b948      	cbnz	r0, 801dd94 <__smakebuf_r+0x44>
 801dd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd84:	059a      	lsls	r2, r3, #22
 801dd86:	d4ef      	bmi.n	801dd68 <__smakebuf_r+0x18>
 801dd88:	f023 0303 	bic.w	r3, r3, #3
 801dd8c:	f043 0302 	orr.w	r3, r3, #2
 801dd90:	81a3      	strh	r3, [r4, #12]
 801dd92:	e7e3      	b.n	801dd5c <__smakebuf_r+0xc>
 801dd94:	4b0d      	ldr	r3, [pc, #52]	; (801ddcc <__smakebuf_r+0x7c>)
 801dd96:	62b3      	str	r3, [r6, #40]	; 0x28
 801dd98:	89a3      	ldrh	r3, [r4, #12]
 801dd9a:	6020      	str	r0, [r4, #0]
 801dd9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dda0:	81a3      	strh	r3, [r4, #12]
 801dda2:	9b00      	ldr	r3, [sp, #0]
 801dda4:	6163      	str	r3, [r4, #20]
 801dda6:	9b01      	ldr	r3, [sp, #4]
 801dda8:	6120      	str	r0, [r4, #16]
 801ddaa:	b15b      	cbz	r3, 801ddc4 <__smakebuf_r+0x74>
 801ddac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddb0:	4630      	mov	r0, r6
 801ddb2:	f000 f8d1 	bl	801df58 <_isatty_r>
 801ddb6:	b128      	cbz	r0, 801ddc4 <__smakebuf_r+0x74>
 801ddb8:	89a3      	ldrh	r3, [r4, #12]
 801ddba:	f023 0303 	bic.w	r3, r3, #3
 801ddbe:	f043 0301 	orr.w	r3, r3, #1
 801ddc2:	81a3      	strh	r3, [r4, #12]
 801ddc4:	89a0      	ldrh	r0, [r4, #12]
 801ddc6:	4305      	orrs	r5, r0
 801ddc8:	81a5      	strh	r5, [r4, #12]
 801ddca:	e7cd      	b.n	801dd68 <__smakebuf_r+0x18>
 801ddcc:	0801db5d 	.word	0x0801db5d

0801ddd0 <_malloc_usable_size_r>:
 801ddd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddd4:	1f18      	subs	r0, r3, #4
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	bfbc      	itt	lt
 801ddda:	580b      	ldrlt	r3, [r1, r0]
 801dddc:	18c0      	addlt	r0, r0, r3
 801ddde:	4770      	bx	lr

0801dde0 <_raise_r>:
 801dde0:	291f      	cmp	r1, #31
 801dde2:	b538      	push	{r3, r4, r5, lr}
 801dde4:	4604      	mov	r4, r0
 801dde6:	460d      	mov	r5, r1
 801dde8:	d904      	bls.n	801ddf4 <_raise_r+0x14>
 801ddea:	2316      	movs	r3, #22
 801ddec:	6003      	str	r3, [r0, #0]
 801ddee:	f04f 30ff 	mov.w	r0, #4294967295
 801ddf2:	bd38      	pop	{r3, r4, r5, pc}
 801ddf4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ddf6:	b112      	cbz	r2, 801ddfe <_raise_r+0x1e>
 801ddf8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ddfc:	b94b      	cbnz	r3, 801de12 <_raise_r+0x32>
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 f830 	bl	801de64 <_getpid_r>
 801de04:	462a      	mov	r2, r5
 801de06:	4601      	mov	r1, r0
 801de08:	4620      	mov	r0, r4
 801de0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de0e:	f000 b817 	b.w	801de40 <_kill_r>
 801de12:	2b01      	cmp	r3, #1
 801de14:	d00a      	beq.n	801de2c <_raise_r+0x4c>
 801de16:	1c59      	adds	r1, r3, #1
 801de18:	d103      	bne.n	801de22 <_raise_r+0x42>
 801de1a:	2316      	movs	r3, #22
 801de1c:	6003      	str	r3, [r0, #0]
 801de1e:	2001      	movs	r0, #1
 801de20:	e7e7      	b.n	801ddf2 <_raise_r+0x12>
 801de22:	2400      	movs	r4, #0
 801de24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801de28:	4628      	mov	r0, r5
 801de2a:	4798      	blx	r3
 801de2c:	2000      	movs	r0, #0
 801de2e:	e7e0      	b.n	801ddf2 <_raise_r+0x12>

0801de30 <raise>:
 801de30:	4b02      	ldr	r3, [pc, #8]	; (801de3c <raise+0xc>)
 801de32:	4601      	mov	r1, r0
 801de34:	6818      	ldr	r0, [r3, #0]
 801de36:	f7ff bfd3 	b.w	801dde0 <_raise_r>
 801de3a:	bf00      	nop
 801de3c:	20000064 	.word	0x20000064

0801de40 <_kill_r>:
 801de40:	b538      	push	{r3, r4, r5, lr}
 801de42:	4d07      	ldr	r5, [pc, #28]	; (801de60 <_kill_r+0x20>)
 801de44:	2300      	movs	r3, #0
 801de46:	4604      	mov	r4, r0
 801de48:	4608      	mov	r0, r1
 801de4a:	4611      	mov	r1, r2
 801de4c:	602b      	str	r3, [r5, #0]
 801de4e:	f7e8 f86c 	bl	8005f2a <_kill>
 801de52:	1c43      	adds	r3, r0, #1
 801de54:	d102      	bne.n	801de5c <_kill_r+0x1c>
 801de56:	682b      	ldr	r3, [r5, #0]
 801de58:	b103      	cbz	r3, 801de5c <_kill_r+0x1c>
 801de5a:	6023      	str	r3, [r4, #0]
 801de5c:	bd38      	pop	{r3, r4, r5, pc}
 801de5e:	bf00      	nop
 801de60:	20000e04 	.word	0x20000e04

0801de64 <_getpid_r>:
 801de64:	f7e8 b859 	b.w	8005f1a <_getpid>

0801de68 <__sread>:
 801de68:	b510      	push	{r4, lr}
 801de6a:	460c      	mov	r4, r1
 801de6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de70:	f000 f894 	bl	801df9c <_read_r>
 801de74:	2800      	cmp	r0, #0
 801de76:	bfab      	itete	ge
 801de78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801de7a:	89a3      	ldrhlt	r3, [r4, #12]
 801de7c:	181b      	addge	r3, r3, r0
 801de7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801de82:	bfac      	ite	ge
 801de84:	6563      	strge	r3, [r4, #84]	; 0x54
 801de86:	81a3      	strhlt	r3, [r4, #12]
 801de88:	bd10      	pop	{r4, pc}

0801de8a <__swrite>:
 801de8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de8e:	461f      	mov	r7, r3
 801de90:	898b      	ldrh	r3, [r1, #12]
 801de92:	05db      	lsls	r3, r3, #23
 801de94:	4605      	mov	r5, r0
 801de96:	460c      	mov	r4, r1
 801de98:	4616      	mov	r6, r2
 801de9a:	d505      	bpl.n	801dea8 <__swrite+0x1e>
 801de9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dea0:	2302      	movs	r3, #2
 801dea2:	2200      	movs	r2, #0
 801dea4:	f000 f868 	bl	801df78 <_lseek_r>
 801dea8:	89a3      	ldrh	r3, [r4, #12]
 801deaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801deae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801deb2:	81a3      	strh	r3, [r4, #12]
 801deb4:	4632      	mov	r2, r6
 801deb6:	463b      	mov	r3, r7
 801deb8:	4628      	mov	r0, r5
 801deba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801debe:	f000 b817 	b.w	801def0 <_write_r>

0801dec2 <__sseek>:
 801dec2:	b510      	push	{r4, lr}
 801dec4:	460c      	mov	r4, r1
 801dec6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801deca:	f000 f855 	bl	801df78 <_lseek_r>
 801dece:	1c43      	adds	r3, r0, #1
 801ded0:	89a3      	ldrh	r3, [r4, #12]
 801ded2:	bf15      	itete	ne
 801ded4:	6560      	strne	r0, [r4, #84]	; 0x54
 801ded6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801deda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801dede:	81a3      	strheq	r3, [r4, #12]
 801dee0:	bf18      	it	ne
 801dee2:	81a3      	strhne	r3, [r4, #12]
 801dee4:	bd10      	pop	{r4, pc}

0801dee6 <__sclose>:
 801dee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801deea:	f000 b813 	b.w	801df14 <_close_r>
	...

0801def0 <_write_r>:
 801def0:	b538      	push	{r3, r4, r5, lr}
 801def2:	4d07      	ldr	r5, [pc, #28]	; (801df10 <_write_r+0x20>)
 801def4:	4604      	mov	r4, r0
 801def6:	4608      	mov	r0, r1
 801def8:	4611      	mov	r1, r2
 801defa:	2200      	movs	r2, #0
 801defc:	602a      	str	r2, [r5, #0]
 801defe:	461a      	mov	r2, r3
 801df00:	f7e8 f84a 	bl	8005f98 <_write>
 801df04:	1c43      	adds	r3, r0, #1
 801df06:	d102      	bne.n	801df0e <_write_r+0x1e>
 801df08:	682b      	ldr	r3, [r5, #0]
 801df0a:	b103      	cbz	r3, 801df0e <_write_r+0x1e>
 801df0c:	6023      	str	r3, [r4, #0]
 801df0e:	bd38      	pop	{r3, r4, r5, pc}
 801df10:	20000e04 	.word	0x20000e04

0801df14 <_close_r>:
 801df14:	b538      	push	{r3, r4, r5, lr}
 801df16:	4d06      	ldr	r5, [pc, #24]	; (801df30 <_close_r+0x1c>)
 801df18:	2300      	movs	r3, #0
 801df1a:	4604      	mov	r4, r0
 801df1c:	4608      	mov	r0, r1
 801df1e:	602b      	str	r3, [r5, #0]
 801df20:	f7e8 f856 	bl	8005fd0 <_close>
 801df24:	1c43      	adds	r3, r0, #1
 801df26:	d102      	bne.n	801df2e <_close_r+0x1a>
 801df28:	682b      	ldr	r3, [r5, #0]
 801df2a:	b103      	cbz	r3, 801df2e <_close_r+0x1a>
 801df2c:	6023      	str	r3, [r4, #0]
 801df2e:	bd38      	pop	{r3, r4, r5, pc}
 801df30:	20000e04 	.word	0x20000e04

0801df34 <_fstat_r>:
 801df34:	b538      	push	{r3, r4, r5, lr}
 801df36:	4d07      	ldr	r5, [pc, #28]	; (801df54 <_fstat_r+0x20>)
 801df38:	2300      	movs	r3, #0
 801df3a:	4604      	mov	r4, r0
 801df3c:	4608      	mov	r0, r1
 801df3e:	4611      	mov	r1, r2
 801df40:	602b      	str	r3, [r5, #0]
 801df42:	f7e8 f851 	bl	8005fe8 <_fstat>
 801df46:	1c43      	adds	r3, r0, #1
 801df48:	d102      	bne.n	801df50 <_fstat_r+0x1c>
 801df4a:	682b      	ldr	r3, [r5, #0]
 801df4c:	b103      	cbz	r3, 801df50 <_fstat_r+0x1c>
 801df4e:	6023      	str	r3, [r4, #0]
 801df50:	bd38      	pop	{r3, r4, r5, pc}
 801df52:	bf00      	nop
 801df54:	20000e04 	.word	0x20000e04

0801df58 <_isatty_r>:
 801df58:	b538      	push	{r3, r4, r5, lr}
 801df5a:	4d06      	ldr	r5, [pc, #24]	; (801df74 <_isatty_r+0x1c>)
 801df5c:	2300      	movs	r3, #0
 801df5e:	4604      	mov	r4, r0
 801df60:	4608      	mov	r0, r1
 801df62:	602b      	str	r3, [r5, #0]
 801df64:	f7e8 f850 	bl	8006008 <_isatty>
 801df68:	1c43      	adds	r3, r0, #1
 801df6a:	d102      	bne.n	801df72 <_isatty_r+0x1a>
 801df6c:	682b      	ldr	r3, [r5, #0]
 801df6e:	b103      	cbz	r3, 801df72 <_isatty_r+0x1a>
 801df70:	6023      	str	r3, [r4, #0]
 801df72:	bd38      	pop	{r3, r4, r5, pc}
 801df74:	20000e04 	.word	0x20000e04

0801df78 <_lseek_r>:
 801df78:	b538      	push	{r3, r4, r5, lr}
 801df7a:	4d07      	ldr	r5, [pc, #28]	; (801df98 <_lseek_r+0x20>)
 801df7c:	4604      	mov	r4, r0
 801df7e:	4608      	mov	r0, r1
 801df80:	4611      	mov	r1, r2
 801df82:	2200      	movs	r2, #0
 801df84:	602a      	str	r2, [r5, #0]
 801df86:	461a      	mov	r2, r3
 801df88:	f7e8 f849 	bl	800601e <_lseek>
 801df8c:	1c43      	adds	r3, r0, #1
 801df8e:	d102      	bne.n	801df96 <_lseek_r+0x1e>
 801df90:	682b      	ldr	r3, [r5, #0]
 801df92:	b103      	cbz	r3, 801df96 <_lseek_r+0x1e>
 801df94:	6023      	str	r3, [r4, #0]
 801df96:	bd38      	pop	{r3, r4, r5, pc}
 801df98:	20000e04 	.word	0x20000e04

0801df9c <_read_r>:
 801df9c:	b538      	push	{r3, r4, r5, lr}
 801df9e:	4d07      	ldr	r5, [pc, #28]	; (801dfbc <_read_r+0x20>)
 801dfa0:	4604      	mov	r4, r0
 801dfa2:	4608      	mov	r0, r1
 801dfa4:	4611      	mov	r1, r2
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	602a      	str	r2, [r5, #0]
 801dfaa:	461a      	mov	r2, r3
 801dfac:	f7e7 ffd7 	bl	8005f5e <_read>
 801dfb0:	1c43      	adds	r3, r0, #1
 801dfb2:	d102      	bne.n	801dfba <_read_r+0x1e>
 801dfb4:	682b      	ldr	r3, [r5, #0]
 801dfb6:	b103      	cbz	r3, 801dfba <_read_r+0x1e>
 801dfb8:	6023      	str	r3, [r4, #0]
 801dfba:	bd38      	pop	{r3, r4, r5, pc}
 801dfbc:	20000e04 	.word	0x20000e04

0801dfc0 <memcmp>:
 801dfc0:	b510      	push	{r4, lr}
 801dfc2:	3901      	subs	r1, #1
 801dfc4:	4402      	add	r2, r0
 801dfc6:	4290      	cmp	r0, r2
 801dfc8:	d101      	bne.n	801dfce <memcmp+0xe>
 801dfca:	2000      	movs	r0, #0
 801dfcc:	e005      	b.n	801dfda <memcmp+0x1a>
 801dfce:	7803      	ldrb	r3, [r0, #0]
 801dfd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dfd4:	42a3      	cmp	r3, r4
 801dfd6:	d001      	beq.n	801dfdc <memcmp+0x1c>
 801dfd8:	1b18      	subs	r0, r3, r4
 801dfda:	bd10      	pop	{r4, pc}
 801dfdc:	3001      	adds	r0, #1
 801dfde:	e7f2      	b.n	801dfc6 <memcmp+0x6>

0801dfe0 <floor>:
 801dfe0:	ec51 0b10 	vmov	r0, r1, d0
 801dfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801dfec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801dff0:	2e13      	cmp	r6, #19
 801dff2:	ee10 5a10 	vmov	r5, s0
 801dff6:	ee10 8a10 	vmov	r8, s0
 801dffa:	460c      	mov	r4, r1
 801dffc:	dc32      	bgt.n	801e064 <floor+0x84>
 801dffe:	2e00      	cmp	r6, #0
 801e000:	da14      	bge.n	801e02c <floor+0x4c>
 801e002:	a333      	add	r3, pc, #204	; (adr r3, 801e0d0 <floor+0xf0>)
 801e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e008:	f7fa fc48 	bl	801889c <__adddf3>
 801e00c:	2200      	movs	r2, #0
 801e00e:	2300      	movs	r3, #0
 801e010:	f7fb f88a 	bl	8019128 <__aeabi_dcmpgt>
 801e014:	b138      	cbz	r0, 801e026 <floor+0x46>
 801e016:	2c00      	cmp	r4, #0
 801e018:	da57      	bge.n	801e0ca <floor+0xea>
 801e01a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e01e:	431d      	orrs	r5, r3
 801e020:	d001      	beq.n	801e026 <floor+0x46>
 801e022:	4c2d      	ldr	r4, [pc, #180]	; (801e0d8 <floor+0xf8>)
 801e024:	2500      	movs	r5, #0
 801e026:	4621      	mov	r1, r4
 801e028:	4628      	mov	r0, r5
 801e02a:	e025      	b.n	801e078 <floor+0x98>
 801e02c:	4f2b      	ldr	r7, [pc, #172]	; (801e0dc <floor+0xfc>)
 801e02e:	4137      	asrs	r7, r6
 801e030:	ea01 0307 	and.w	r3, r1, r7
 801e034:	4303      	orrs	r3, r0
 801e036:	d01f      	beq.n	801e078 <floor+0x98>
 801e038:	a325      	add	r3, pc, #148	; (adr r3, 801e0d0 <floor+0xf0>)
 801e03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e03e:	f7fa fc2d 	bl	801889c <__adddf3>
 801e042:	2200      	movs	r2, #0
 801e044:	2300      	movs	r3, #0
 801e046:	f7fb f86f 	bl	8019128 <__aeabi_dcmpgt>
 801e04a:	2800      	cmp	r0, #0
 801e04c:	d0eb      	beq.n	801e026 <floor+0x46>
 801e04e:	2c00      	cmp	r4, #0
 801e050:	bfbe      	ittt	lt
 801e052:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801e056:	fa43 f606 	asrlt.w	r6, r3, r6
 801e05a:	19a4      	addlt	r4, r4, r6
 801e05c:	ea24 0407 	bic.w	r4, r4, r7
 801e060:	2500      	movs	r5, #0
 801e062:	e7e0      	b.n	801e026 <floor+0x46>
 801e064:	2e33      	cmp	r6, #51	; 0x33
 801e066:	dd0b      	ble.n	801e080 <floor+0xa0>
 801e068:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801e06c:	d104      	bne.n	801e078 <floor+0x98>
 801e06e:	ee10 2a10 	vmov	r2, s0
 801e072:	460b      	mov	r3, r1
 801e074:	f7fa fc12 	bl	801889c <__adddf3>
 801e078:	ec41 0b10 	vmov	d0, r0, r1
 801e07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e080:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801e084:	f04f 33ff 	mov.w	r3, #4294967295
 801e088:	fa23 f707 	lsr.w	r7, r3, r7
 801e08c:	4207      	tst	r7, r0
 801e08e:	d0f3      	beq.n	801e078 <floor+0x98>
 801e090:	a30f      	add	r3, pc, #60	; (adr r3, 801e0d0 <floor+0xf0>)
 801e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e096:	f7fa fc01 	bl	801889c <__adddf3>
 801e09a:	2200      	movs	r2, #0
 801e09c:	2300      	movs	r3, #0
 801e09e:	f7fb f843 	bl	8019128 <__aeabi_dcmpgt>
 801e0a2:	2800      	cmp	r0, #0
 801e0a4:	d0bf      	beq.n	801e026 <floor+0x46>
 801e0a6:	2c00      	cmp	r4, #0
 801e0a8:	da02      	bge.n	801e0b0 <floor+0xd0>
 801e0aa:	2e14      	cmp	r6, #20
 801e0ac:	d103      	bne.n	801e0b6 <floor+0xd6>
 801e0ae:	3401      	adds	r4, #1
 801e0b0:	ea25 0507 	bic.w	r5, r5, r7
 801e0b4:	e7b7      	b.n	801e026 <floor+0x46>
 801e0b6:	2301      	movs	r3, #1
 801e0b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801e0bc:	fa03 f606 	lsl.w	r6, r3, r6
 801e0c0:	4435      	add	r5, r6
 801e0c2:	4545      	cmp	r5, r8
 801e0c4:	bf38      	it	cc
 801e0c6:	18e4      	addcc	r4, r4, r3
 801e0c8:	e7f2      	b.n	801e0b0 <floor+0xd0>
 801e0ca:	2500      	movs	r5, #0
 801e0cc:	462c      	mov	r4, r5
 801e0ce:	e7aa      	b.n	801e026 <floor+0x46>
 801e0d0:	8800759c 	.word	0x8800759c
 801e0d4:	7e37e43c 	.word	0x7e37e43c
 801e0d8:	bff00000 	.word	0xbff00000
 801e0dc:	000fffff 	.word	0x000fffff

0801e0e0 <pow>:
 801e0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e0e2:	ed2d 8b02 	vpush	{d8}
 801e0e6:	eeb0 8a40 	vmov.f32	s16, s0
 801e0ea:	eef0 8a60 	vmov.f32	s17, s1
 801e0ee:	ec55 4b11 	vmov	r4, r5, d1
 801e0f2:	f000 f865 	bl	801e1c0 <__ieee754_pow>
 801e0f6:	4622      	mov	r2, r4
 801e0f8:	462b      	mov	r3, r5
 801e0fa:	4620      	mov	r0, r4
 801e0fc:	4629      	mov	r1, r5
 801e0fe:	ec57 6b10 	vmov	r6, r7, d0
 801e102:	f7fb f81b 	bl	801913c <__aeabi_dcmpun>
 801e106:	2800      	cmp	r0, #0
 801e108:	d13b      	bne.n	801e182 <pow+0xa2>
 801e10a:	ec51 0b18 	vmov	r0, r1, d8
 801e10e:	2200      	movs	r2, #0
 801e110:	2300      	movs	r3, #0
 801e112:	f7fa ffe1 	bl	80190d8 <__aeabi_dcmpeq>
 801e116:	b1b8      	cbz	r0, 801e148 <pow+0x68>
 801e118:	2200      	movs	r2, #0
 801e11a:	2300      	movs	r3, #0
 801e11c:	4620      	mov	r0, r4
 801e11e:	4629      	mov	r1, r5
 801e120:	f7fa ffda 	bl	80190d8 <__aeabi_dcmpeq>
 801e124:	2800      	cmp	r0, #0
 801e126:	d146      	bne.n	801e1b6 <pow+0xd6>
 801e128:	ec45 4b10 	vmov	d0, r4, r5
 801e12c:	f000 fe61 	bl	801edf2 <finite>
 801e130:	b338      	cbz	r0, 801e182 <pow+0xa2>
 801e132:	2200      	movs	r2, #0
 801e134:	2300      	movs	r3, #0
 801e136:	4620      	mov	r0, r4
 801e138:	4629      	mov	r1, r5
 801e13a:	f7fa ffd7 	bl	80190ec <__aeabi_dcmplt>
 801e13e:	b300      	cbz	r0, 801e182 <pow+0xa2>
 801e140:	f7fb fa90 	bl	8019664 <__errno>
 801e144:	2322      	movs	r3, #34	; 0x22
 801e146:	e01b      	b.n	801e180 <pow+0xa0>
 801e148:	ec47 6b10 	vmov	d0, r6, r7
 801e14c:	f000 fe51 	bl	801edf2 <finite>
 801e150:	b9e0      	cbnz	r0, 801e18c <pow+0xac>
 801e152:	eeb0 0a48 	vmov.f32	s0, s16
 801e156:	eef0 0a68 	vmov.f32	s1, s17
 801e15a:	f000 fe4a 	bl	801edf2 <finite>
 801e15e:	b1a8      	cbz	r0, 801e18c <pow+0xac>
 801e160:	ec45 4b10 	vmov	d0, r4, r5
 801e164:	f000 fe45 	bl	801edf2 <finite>
 801e168:	b180      	cbz	r0, 801e18c <pow+0xac>
 801e16a:	4632      	mov	r2, r6
 801e16c:	463b      	mov	r3, r7
 801e16e:	4630      	mov	r0, r6
 801e170:	4639      	mov	r1, r7
 801e172:	f7fa ffe3 	bl	801913c <__aeabi_dcmpun>
 801e176:	2800      	cmp	r0, #0
 801e178:	d0e2      	beq.n	801e140 <pow+0x60>
 801e17a:	f7fb fa73 	bl	8019664 <__errno>
 801e17e:	2321      	movs	r3, #33	; 0x21
 801e180:	6003      	str	r3, [r0, #0]
 801e182:	ecbd 8b02 	vpop	{d8}
 801e186:	ec47 6b10 	vmov	d0, r6, r7
 801e18a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e18c:	2200      	movs	r2, #0
 801e18e:	2300      	movs	r3, #0
 801e190:	4630      	mov	r0, r6
 801e192:	4639      	mov	r1, r7
 801e194:	f7fa ffa0 	bl	80190d8 <__aeabi_dcmpeq>
 801e198:	2800      	cmp	r0, #0
 801e19a:	d0f2      	beq.n	801e182 <pow+0xa2>
 801e19c:	eeb0 0a48 	vmov.f32	s0, s16
 801e1a0:	eef0 0a68 	vmov.f32	s1, s17
 801e1a4:	f000 fe25 	bl	801edf2 <finite>
 801e1a8:	2800      	cmp	r0, #0
 801e1aa:	d0ea      	beq.n	801e182 <pow+0xa2>
 801e1ac:	ec45 4b10 	vmov	d0, r4, r5
 801e1b0:	f000 fe1f 	bl	801edf2 <finite>
 801e1b4:	e7c3      	b.n	801e13e <pow+0x5e>
 801e1b6:	4f01      	ldr	r7, [pc, #4]	; (801e1bc <pow+0xdc>)
 801e1b8:	2600      	movs	r6, #0
 801e1ba:	e7e2      	b.n	801e182 <pow+0xa2>
 801e1bc:	3ff00000 	.word	0x3ff00000

0801e1c0 <__ieee754_pow>:
 801e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1c4:	ed2d 8b06 	vpush	{d8-d10}
 801e1c8:	b089      	sub	sp, #36	; 0x24
 801e1ca:	ed8d 1b00 	vstr	d1, [sp]
 801e1ce:	e9dd 2900 	ldrd	r2, r9, [sp]
 801e1d2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801e1d6:	ea58 0102 	orrs.w	r1, r8, r2
 801e1da:	ec57 6b10 	vmov	r6, r7, d0
 801e1de:	d115      	bne.n	801e20c <__ieee754_pow+0x4c>
 801e1e0:	19b3      	adds	r3, r6, r6
 801e1e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801e1e6:	4152      	adcs	r2, r2
 801e1e8:	4299      	cmp	r1, r3
 801e1ea:	4b89      	ldr	r3, [pc, #548]	; (801e410 <__ieee754_pow+0x250>)
 801e1ec:	4193      	sbcs	r3, r2
 801e1ee:	f080 84d2 	bcs.w	801eb96 <__ieee754_pow+0x9d6>
 801e1f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e1f6:	4630      	mov	r0, r6
 801e1f8:	4639      	mov	r1, r7
 801e1fa:	f7fa fb4f 	bl	801889c <__adddf3>
 801e1fe:	ec41 0b10 	vmov	d0, r0, r1
 801e202:	b009      	add	sp, #36	; 0x24
 801e204:	ecbd 8b06 	vpop	{d8-d10}
 801e208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e20c:	4b81      	ldr	r3, [pc, #516]	; (801e414 <__ieee754_pow+0x254>)
 801e20e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801e212:	429c      	cmp	r4, r3
 801e214:	ee10 aa10 	vmov	sl, s0
 801e218:	463d      	mov	r5, r7
 801e21a:	dc06      	bgt.n	801e22a <__ieee754_pow+0x6a>
 801e21c:	d101      	bne.n	801e222 <__ieee754_pow+0x62>
 801e21e:	2e00      	cmp	r6, #0
 801e220:	d1e7      	bne.n	801e1f2 <__ieee754_pow+0x32>
 801e222:	4598      	cmp	r8, r3
 801e224:	dc01      	bgt.n	801e22a <__ieee754_pow+0x6a>
 801e226:	d10f      	bne.n	801e248 <__ieee754_pow+0x88>
 801e228:	b172      	cbz	r2, 801e248 <__ieee754_pow+0x88>
 801e22a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801e22e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801e232:	ea55 050a 	orrs.w	r5, r5, sl
 801e236:	d1dc      	bne.n	801e1f2 <__ieee754_pow+0x32>
 801e238:	e9dd 3200 	ldrd	r3, r2, [sp]
 801e23c:	18db      	adds	r3, r3, r3
 801e23e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801e242:	4152      	adcs	r2, r2
 801e244:	429d      	cmp	r5, r3
 801e246:	e7d0      	b.n	801e1ea <__ieee754_pow+0x2a>
 801e248:	2d00      	cmp	r5, #0
 801e24a:	da3b      	bge.n	801e2c4 <__ieee754_pow+0x104>
 801e24c:	4b72      	ldr	r3, [pc, #456]	; (801e418 <__ieee754_pow+0x258>)
 801e24e:	4598      	cmp	r8, r3
 801e250:	dc51      	bgt.n	801e2f6 <__ieee754_pow+0x136>
 801e252:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801e256:	4598      	cmp	r8, r3
 801e258:	f340 84ac 	ble.w	801ebb4 <__ieee754_pow+0x9f4>
 801e25c:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e260:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e264:	2b14      	cmp	r3, #20
 801e266:	dd0f      	ble.n	801e288 <__ieee754_pow+0xc8>
 801e268:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801e26c:	fa22 f103 	lsr.w	r1, r2, r3
 801e270:	fa01 f303 	lsl.w	r3, r1, r3
 801e274:	4293      	cmp	r3, r2
 801e276:	f040 849d 	bne.w	801ebb4 <__ieee754_pow+0x9f4>
 801e27a:	f001 0101 	and.w	r1, r1, #1
 801e27e:	f1c1 0302 	rsb	r3, r1, #2
 801e282:	9304      	str	r3, [sp, #16]
 801e284:	b182      	cbz	r2, 801e2a8 <__ieee754_pow+0xe8>
 801e286:	e05f      	b.n	801e348 <__ieee754_pow+0x188>
 801e288:	2a00      	cmp	r2, #0
 801e28a:	d15b      	bne.n	801e344 <__ieee754_pow+0x184>
 801e28c:	f1c3 0314 	rsb	r3, r3, #20
 801e290:	fa48 f103 	asr.w	r1, r8, r3
 801e294:	fa01 f303 	lsl.w	r3, r1, r3
 801e298:	4543      	cmp	r3, r8
 801e29a:	f040 8488 	bne.w	801ebae <__ieee754_pow+0x9ee>
 801e29e:	f001 0101 	and.w	r1, r1, #1
 801e2a2:	f1c1 0302 	rsb	r3, r1, #2
 801e2a6:	9304      	str	r3, [sp, #16]
 801e2a8:	4b5c      	ldr	r3, [pc, #368]	; (801e41c <__ieee754_pow+0x25c>)
 801e2aa:	4598      	cmp	r8, r3
 801e2ac:	d132      	bne.n	801e314 <__ieee754_pow+0x154>
 801e2ae:	f1b9 0f00 	cmp.w	r9, #0
 801e2b2:	f280 8478 	bge.w	801eba6 <__ieee754_pow+0x9e6>
 801e2b6:	4959      	ldr	r1, [pc, #356]	; (801e41c <__ieee754_pow+0x25c>)
 801e2b8:	4632      	mov	r2, r6
 801e2ba:	463b      	mov	r3, r7
 801e2bc:	2000      	movs	r0, #0
 801e2be:	f7fa fdcd 	bl	8018e5c <__aeabi_ddiv>
 801e2c2:	e79c      	b.n	801e1fe <__ieee754_pow+0x3e>
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	9304      	str	r3, [sp, #16]
 801e2c8:	2a00      	cmp	r2, #0
 801e2ca:	d13d      	bne.n	801e348 <__ieee754_pow+0x188>
 801e2cc:	4b51      	ldr	r3, [pc, #324]	; (801e414 <__ieee754_pow+0x254>)
 801e2ce:	4598      	cmp	r8, r3
 801e2d0:	d1ea      	bne.n	801e2a8 <__ieee754_pow+0xe8>
 801e2d2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801e2d6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801e2da:	ea53 030a 	orrs.w	r3, r3, sl
 801e2de:	f000 845a 	beq.w	801eb96 <__ieee754_pow+0x9d6>
 801e2e2:	4b4f      	ldr	r3, [pc, #316]	; (801e420 <__ieee754_pow+0x260>)
 801e2e4:	429c      	cmp	r4, r3
 801e2e6:	dd08      	ble.n	801e2fa <__ieee754_pow+0x13a>
 801e2e8:	f1b9 0f00 	cmp.w	r9, #0
 801e2ec:	f2c0 8457 	blt.w	801eb9e <__ieee754_pow+0x9de>
 801e2f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e2f4:	e783      	b.n	801e1fe <__ieee754_pow+0x3e>
 801e2f6:	2302      	movs	r3, #2
 801e2f8:	e7e5      	b.n	801e2c6 <__ieee754_pow+0x106>
 801e2fa:	f1b9 0f00 	cmp.w	r9, #0
 801e2fe:	f04f 0000 	mov.w	r0, #0
 801e302:	f04f 0100 	mov.w	r1, #0
 801e306:	f6bf af7a 	bge.w	801e1fe <__ieee754_pow+0x3e>
 801e30a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801e30e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801e312:	e774      	b.n	801e1fe <__ieee754_pow+0x3e>
 801e314:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801e318:	d106      	bne.n	801e328 <__ieee754_pow+0x168>
 801e31a:	4632      	mov	r2, r6
 801e31c:	463b      	mov	r3, r7
 801e31e:	4630      	mov	r0, r6
 801e320:	4639      	mov	r1, r7
 801e322:	f7fa fc71 	bl	8018c08 <__aeabi_dmul>
 801e326:	e76a      	b.n	801e1fe <__ieee754_pow+0x3e>
 801e328:	4b3e      	ldr	r3, [pc, #248]	; (801e424 <__ieee754_pow+0x264>)
 801e32a:	4599      	cmp	r9, r3
 801e32c:	d10c      	bne.n	801e348 <__ieee754_pow+0x188>
 801e32e:	2d00      	cmp	r5, #0
 801e330:	db0a      	blt.n	801e348 <__ieee754_pow+0x188>
 801e332:	ec47 6b10 	vmov	d0, r6, r7
 801e336:	b009      	add	sp, #36	; 0x24
 801e338:	ecbd 8b06 	vpop	{d8-d10}
 801e33c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e340:	f000 bc6c 	b.w	801ec1c <__ieee754_sqrt>
 801e344:	2300      	movs	r3, #0
 801e346:	9304      	str	r3, [sp, #16]
 801e348:	ec47 6b10 	vmov	d0, r6, r7
 801e34c:	f000 fd48 	bl	801ede0 <fabs>
 801e350:	ec51 0b10 	vmov	r0, r1, d0
 801e354:	f1ba 0f00 	cmp.w	sl, #0
 801e358:	d129      	bne.n	801e3ae <__ieee754_pow+0x1ee>
 801e35a:	b124      	cbz	r4, 801e366 <__ieee754_pow+0x1a6>
 801e35c:	4b2f      	ldr	r3, [pc, #188]	; (801e41c <__ieee754_pow+0x25c>)
 801e35e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801e362:	429a      	cmp	r2, r3
 801e364:	d123      	bne.n	801e3ae <__ieee754_pow+0x1ee>
 801e366:	f1b9 0f00 	cmp.w	r9, #0
 801e36a:	da05      	bge.n	801e378 <__ieee754_pow+0x1b8>
 801e36c:	4602      	mov	r2, r0
 801e36e:	460b      	mov	r3, r1
 801e370:	2000      	movs	r0, #0
 801e372:	492a      	ldr	r1, [pc, #168]	; (801e41c <__ieee754_pow+0x25c>)
 801e374:	f7fa fd72 	bl	8018e5c <__aeabi_ddiv>
 801e378:	2d00      	cmp	r5, #0
 801e37a:	f6bf af40 	bge.w	801e1fe <__ieee754_pow+0x3e>
 801e37e:	9b04      	ldr	r3, [sp, #16]
 801e380:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801e384:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801e388:	4323      	orrs	r3, r4
 801e38a:	d108      	bne.n	801e39e <__ieee754_pow+0x1de>
 801e38c:	4602      	mov	r2, r0
 801e38e:	460b      	mov	r3, r1
 801e390:	4610      	mov	r0, r2
 801e392:	4619      	mov	r1, r3
 801e394:	f7fa fa80 	bl	8018898 <__aeabi_dsub>
 801e398:	4602      	mov	r2, r0
 801e39a:	460b      	mov	r3, r1
 801e39c:	e78f      	b.n	801e2be <__ieee754_pow+0xfe>
 801e39e:	9b04      	ldr	r3, [sp, #16]
 801e3a0:	2b01      	cmp	r3, #1
 801e3a2:	f47f af2c 	bne.w	801e1fe <__ieee754_pow+0x3e>
 801e3a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801e3aa:	4619      	mov	r1, r3
 801e3ac:	e727      	b.n	801e1fe <__ieee754_pow+0x3e>
 801e3ae:	0feb      	lsrs	r3, r5, #31
 801e3b0:	3b01      	subs	r3, #1
 801e3b2:	9306      	str	r3, [sp, #24]
 801e3b4:	9a06      	ldr	r2, [sp, #24]
 801e3b6:	9b04      	ldr	r3, [sp, #16]
 801e3b8:	4313      	orrs	r3, r2
 801e3ba:	d102      	bne.n	801e3c2 <__ieee754_pow+0x202>
 801e3bc:	4632      	mov	r2, r6
 801e3be:	463b      	mov	r3, r7
 801e3c0:	e7e6      	b.n	801e390 <__ieee754_pow+0x1d0>
 801e3c2:	4b19      	ldr	r3, [pc, #100]	; (801e428 <__ieee754_pow+0x268>)
 801e3c4:	4598      	cmp	r8, r3
 801e3c6:	f340 80fb 	ble.w	801e5c0 <__ieee754_pow+0x400>
 801e3ca:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801e3ce:	4598      	cmp	r8, r3
 801e3d0:	4b13      	ldr	r3, [pc, #76]	; (801e420 <__ieee754_pow+0x260>)
 801e3d2:	dd0c      	ble.n	801e3ee <__ieee754_pow+0x22e>
 801e3d4:	429c      	cmp	r4, r3
 801e3d6:	dc0f      	bgt.n	801e3f8 <__ieee754_pow+0x238>
 801e3d8:	f1b9 0f00 	cmp.w	r9, #0
 801e3dc:	da0f      	bge.n	801e3fe <__ieee754_pow+0x23e>
 801e3de:	2000      	movs	r0, #0
 801e3e0:	b009      	add	sp, #36	; 0x24
 801e3e2:	ecbd 8b06 	vpop	{d8-d10}
 801e3e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ea:	f000 bcf0 	b.w	801edce <__math_oflow>
 801e3ee:	429c      	cmp	r4, r3
 801e3f0:	dbf2      	blt.n	801e3d8 <__ieee754_pow+0x218>
 801e3f2:	4b0a      	ldr	r3, [pc, #40]	; (801e41c <__ieee754_pow+0x25c>)
 801e3f4:	429c      	cmp	r4, r3
 801e3f6:	dd19      	ble.n	801e42c <__ieee754_pow+0x26c>
 801e3f8:	f1b9 0f00 	cmp.w	r9, #0
 801e3fc:	dcef      	bgt.n	801e3de <__ieee754_pow+0x21e>
 801e3fe:	2000      	movs	r0, #0
 801e400:	b009      	add	sp, #36	; 0x24
 801e402:	ecbd 8b06 	vpop	{d8-d10}
 801e406:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e40a:	f000 bcd7 	b.w	801edbc <__math_uflow>
 801e40e:	bf00      	nop
 801e410:	fff00000 	.word	0xfff00000
 801e414:	7ff00000 	.word	0x7ff00000
 801e418:	433fffff 	.word	0x433fffff
 801e41c:	3ff00000 	.word	0x3ff00000
 801e420:	3fefffff 	.word	0x3fefffff
 801e424:	3fe00000 	.word	0x3fe00000
 801e428:	41e00000 	.word	0x41e00000
 801e42c:	4b60      	ldr	r3, [pc, #384]	; (801e5b0 <__ieee754_pow+0x3f0>)
 801e42e:	2200      	movs	r2, #0
 801e430:	f7fa fa32 	bl	8018898 <__aeabi_dsub>
 801e434:	a354      	add	r3, pc, #336	; (adr r3, 801e588 <__ieee754_pow+0x3c8>)
 801e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e43a:	4604      	mov	r4, r0
 801e43c:	460d      	mov	r5, r1
 801e43e:	f7fa fbe3 	bl	8018c08 <__aeabi_dmul>
 801e442:	a353      	add	r3, pc, #332	; (adr r3, 801e590 <__ieee754_pow+0x3d0>)
 801e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e448:	4606      	mov	r6, r0
 801e44a:	460f      	mov	r7, r1
 801e44c:	4620      	mov	r0, r4
 801e44e:	4629      	mov	r1, r5
 801e450:	f7fa fbda 	bl	8018c08 <__aeabi_dmul>
 801e454:	4b57      	ldr	r3, [pc, #348]	; (801e5b4 <__ieee754_pow+0x3f4>)
 801e456:	4682      	mov	sl, r0
 801e458:	468b      	mov	fp, r1
 801e45a:	2200      	movs	r2, #0
 801e45c:	4620      	mov	r0, r4
 801e45e:	4629      	mov	r1, r5
 801e460:	f7fa fbd2 	bl	8018c08 <__aeabi_dmul>
 801e464:	4602      	mov	r2, r0
 801e466:	460b      	mov	r3, r1
 801e468:	a14b      	add	r1, pc, #300	; (adr r1, 801e598 <__ieee754_pow+0x3d8>)
 801e46a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801e46e:	f7fa fa13 	bl	8018898 <__aeabi_dsub>
 801e472:	4622      	mov	r2, r4
 801e474:	462b      	mov	r3, r5
 801e476:	f7fa fbc7 	bl	8018c08 <__aeabi_dmul>
 801e47a:	4602      	mov	r2, r0
 801e47c:	460b      	mov	r3, r1
 801e47e:	2000      	movs	r0, #0
 801e480:	494d      	ldr	r1, [pc, #308]	; (801e5b8 <__ieee754_pow+0x3f8>)
 801e482:	f7fa fa09 	bl	8018898 <__aeabi_dsub>
 801e486:	4622      	mov	r2, r4
 801e488:	4680      	mov	r8, r0
 801e48a:	4689      	mov	r9, r1
 801e48c:	462b      	mov	r3, r5
 801e48e:	4620      	mov	r0, r4
 801e490:	4629      	mov	r1, r5
 801e492:	f7fa fbb9 	bl	8018c08 <__aeabi_dmul>
 801e496:	4602      	mov	r2, r0
 801e498:	460b      	mov	r3, r1
 801e49a:	4640      	mov	r0, r8
 801e49c:	4649      	mov	r1, r9
 801e49e:	f7fa fbb3 	bl	8018c08 <__aeabi_dmul>
 801e4a2:	a33f      	add	r3, pc, #252	; (adr r3, 801e5a0 <__ieee754_pow+0x3e0>)
 801e4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4a8:	f7fa fbae 	bl	8018c08 <__aeabi_dmul>
 801e4ac:	4602      	mov	r2, r0
 801e4ae:	460b      	mov	r3, r1
 801e4b0:	4650      	mov	r0, sl
 801e4b2:	4659      	mov	r1, fp
 801e4b4:	f7fa f9f0 	bl	8018898 <__aeabi_dsub>
 801e4b8:	4602      	mov	r2, r0
 801e4ba:	460b      	mov	r3, r1
 801e4bc:	4680      	mov	r8, r0
 801e4be:	4689      	mov	r9, r1
 801e4c0:	4630      	mov	r0, r6
 801e4c2:	4639      	mov	r1, r7
 801e4c4:	f7fa f9ea 	bl	801889c <__adddf3>
 801e4c8:	2000      	movs	r0, #0
 801e4ca:	4632      	mov	r2, r6
 801e4cc:	463b      	mov	r3, r7
 801e4ce:	4604      	mov	r4, r0
 801e4d0:	460d      	mov	r5, r1
 801e4d2:	f7fa f9e1 	bl	8018898 <__aeabi_dsub>
 801e4d6:	4602      	mov	r2, r0
 801e4d8:	460b      	mov	r3, r1
 801e4da:	4640      	mov	r0, r8
 801e4dc:	4649      	mov	r1, r9
 801e4de:	f7fa f9db 	bl	8018898 <__aeabi_dsub>
 801e4e2:	9b04      	ldr	r3, [sp, #16]
 801e4e4:	9a06      	ldr	r2, [sp, #24]
 801e4e6:	3b01      	subs	r3, #1
 801e4e8:	4313      	orrs	r3, r2
 801e4ea:	4682      	mov	sl, r0
 801e4ec:	468b      	mov	fp, r1
 801e4ee:	f040 81e7 	bne.w	801e8c0 <__ieee754_pow+0x700>
 801e4f2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801e5a8 <__ieee754_pow+0x3e8>
 801e4f6:	eeb0 8a47 	vmov.f32	s16, s14
 801e4fa:	eef0 8a67 	vmov.f32	s17, s15
 801e4fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 801e502:	2600      	movs	r6, #0
 801e504:	4632      	mov	r2, r6
 801e506:	463b      	mov	r3, r7
 801e508:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e50c:	f7fa f9c4 	bl	8018898 <__aeabi_dsub>
 801e510:	4622      	mov	r2, r4
 801e512:	462b      	mov	r3, r5
 801e514:	f7fa fb78 	bl	8018c08 <__aeabi_dmul>
 801e518:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e51c:	4680      	mov	r8, r0
 801e51e:	4689      	mov	r9, r1
 801e520:	4650      	mov	r0, sl
 801e522:	4659      	mov	r1, fp
 801e524:	f7fa fb70 	bl	8018c08 <__aeabi_dmul>
 801e528:	4602      	mov	r2, r0
 801e52a:	460b      	mov	r3, r1
 801e52c:	4640      	mov	r0, r8
 801e52e:	4649      	mov	r1, r9
 801e530:	f7fa f9b4 	bl	801889c <__adddf3>
 801e534:	4632      	mov	r2, r6
 801e536:	463b      	mov	r3, r7
 801e538:	4680      	mov	r8, r0
 801e53a:	4689      	mov	r9, r1
 801e53c:	4620      	mov	r0, r4
 801e53e:	4629      	mov	r1, r5
 801e540:	f7fa fb62 	bl	8018c08 <__aeabi_dmul>
 801e544:	460b      	mov	r3, r1
 801e546:	4604      	mov	r4, r0
 801e548:	460d      	mov	r5, r1
 801e54a:	4602      	mov	r2, r0
 801e54c:	4649      	mov	r1, r9
 801e54e:	4640      	mov	r0, r8
 801e550:	f7fa f9a4 	bl	801889c <__adddf3>
 801e554:	4b19      	ldr	r3, [pc, #100]	; (801e5bc <__ieee754_pow+0x3fc>)
 801e556:	4299      	cmp	r1, r3
 801e558:	ec45 4b19 	vmov	d9, r4, r5
 801e55c:	4606      	mov	r6, r0
 801e55e:	460f      	mov	r7, r1
 801e560:	468b      	mov	fp, r1
 801e562:	f340 82f1 	ble.w	801eb48 <__ieee754_pow+0x988>
 801e566:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801e56a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801e56e:	4303      	orrs	r3, r0
 801e570:	f000 81e4 	beq.w	801e93c <__ieee754_pow+0x77c>
 801e574:	ec51 0b18 	vmov	r0, r1, d8
 801e578:	2200      	movs	r2, #0
 801e57a:	2300      	movs	r3, #0
 801e57c:	f7fa fdb6 	bl	80190ec <__aeabi_dcmplt>
 801e580:	3800      	subs	r0, #0
 801e582:	bf18      	it	ne
 801e584:	2001      	movne	r0, #1
 801e586:	e72b      	b.n	801e3e0 <__ieee754_pow+0x220>
 801e588:	60000000 	.word	0x60000000
 801e58c:	3ff71547 	.word	0x3ff71547
 801e590:	f85ddf44 	.word	0xf85ddf44
 801e594:	3e54ae0b 	.word	0x3e54ae0b
 801e598:	55555555 	.word	0x55555555
 801e59c:	3fd55555 	.word	0x3fd55555
 801e5a0:	652b82fe 	.word	0x652b82fe
 801e5a4:	3ff71547 	.word	0x3ff71547
 801e5a8:	00000000 	.word	0x00000000
 801e5ac:	bff00000 	.word	0xbff00000
 801e5b0:	3ff00000 	.word	0x3ff00000
 801e5b4:	3fd00000 	.word	0x3fd00000
 801e5b8:	3fe00000 	.word	0x3fe00000
 801e5bc:	408fffff 	.word	0x408fffff
 801e5c0:	4bd5      	ldr	r3, [pc, #852]	; (801e918 <__ieee754_pow+0x758>)
 801e5c2:	402b      	ands	r3, r5
 801e5c4:	2200      	movs	r2, #0
 801e5c6:	b92b      	cbnz	r3, 801e5d4 <__ieee754_pow+0x414>
 801e5c8:	4bd4      	ldr	r3, [pc, #848]	; (801e91c <__ieee754_pow+0x75c>)
 801e5ca:	f7fa fb1d 	bl	8018c08 <__aeabi_dmul>
 801e5ce:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801e5d2:	460c      	mov	r4, r1
 801e5d4:	1523      	asrs	r3, r4, #20
 801e5d6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801e5da:	4413      	add	r3, r2
 801e5dc:	9305      	str	r3, [sp, #20]
 801e5de:	4bd0      	ldr	r3, [pc, #832]	; (801e920 <__ieee754_pow+0x760>)
 801e5e0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801e5e4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801e5e8:	429c      	cmp	r4, r3
 801e5ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801e5ee:	dd08      	ble.n	801e602 <__ieee754_pow+0x442>
 801e5f0:	4bcc      	ldr	r3, [pc, #816]	; (801e924 <__ieee754_pow+0x764>)
 801e5f2:	429c      	cmp	r4, r3
 801e5f4:	f340 8162 	ble.w	801e8bc <__ieee754_pow+0x6fc>
 801e5f8:	9b05      	ldr	r3, [sp, #20]
 801e5fa:	3301      	adds	r3, #1
 801e5fc:	9305      	str	r3, [sp, #20]
 801e5fe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801e602:	2400      	movs	r4, #0
 801e604:	00e3      	lsls	r3, r4, #3
 801e606:	9307      	str	r3, [sp, #28]
 801e608:	4bc7      	ldr	r3, [pc, #796]	; (801e928 <__ieee754_pow+0x768>)
 801e60a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e60e:	ed93 7b00 	vldr	d7, [r3]
 801e612:	4629      	mov	r1, r5
 801e614:	ec53 2b17 	vmov	r2, r3, d7
 801e618:	eeb0 9a47 	vmov.f32	s18, s14
 801e61c:	eef0 9a67 	vmov.f32	s19, s15
 801e620:	4682      	mov	sl, r0
 801e622:	f7fa f939 	bl	8018898 <__aeabi_dsub>
 801e626:	4652      	mov	r2, sl
 801e628:	4606      	mov	r6, r0
 801e62a:	460f      	mov	r7, r1
 801e62c:	462b      	mov	r3, r5
 801e62e:	ec51 0b19 	vmov	r0, r1, d9
 801e632:	f7fa f933 	bl	801889c <__adddf3>
 801e636:	4602      	mov	r2, r0
 801e638:	460b      	mov	r3, r1
 801e63a:	2000      	movs	r0, #0
 801e63c:	49bb      	ldr	r1, [pc, #748]	; (801e92c <__ieee754_pow+0x76c>)
 801e63e:	f7fa fc0d 	bl	8018e5c <__aeabi_ddiv>
 801e642:	ec41 0b1a 	vmov	d10, r0, r1
 801e646:	4602      	mov	r2, r0
 801e648:	460b      	mov	r3, r1
 801e64a:	4630      	mov	r0, r6
 801e64c:	4639      	mov	r1, r7
 801e64e:	f7fa fadb 	bl	8018c08 <__aeabi_dmul>
 801e652:	2300      	movs	r3, #0
 801e654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e658:	9302      	str	r3, [sp, #8]
 801e65a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801e65e:	46ab      	mov	fp, r5
 801e660:	106d      	asrs	r5, r5, #1
 801e662:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801e666:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801e66a:	ec41 0b18 	vmov	d8, r0, r1
 801e66e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801e672:	2200      	movs	r2, #0
 801e674:	4640      	mov	r0, r8
 801e676:	4649      	mov	r1, r9
 801e678:	4614      	mov	r4, r2
 801e67a:	461d      	mov	r5, r3
 801e67c:	f7fa fac4 	bl	8018c08 <__aeabi_dmul>
 801e680:	4602      	mov	r2, r0
 801e682:	460b      	mov	r3, r1
 801e684:	4630      	mov	r0, r6
 801e686:	4639      	mov	r1, r7
 801e688:	f7fa f906 	bl	8018898 <__aeabi_dsub>
 801e68c:	ec53 2b19 	vmov	r2, r3, d9
 801e690:	4606      	mov	r6, r0
 801e692:	460f      	mov	r7, r1
 801e694:	4620      	mov	r0, r4
 801e696:	4629      	mov	r1, r5
 801e698:	f7fa f8fe 	bl	8018898 <__aeabi_dsub>
 801e69c:	4602      	mov	r2, r0
 801e69e:	460b      	mov	r3, r1
 801e6a0:	4650      	mov	r0, sl
 801e6a2:	4659      	mov	r1, fp
 801e6a4:	f7fa f8f8 	bl	8018898 <__aeabi_dsub>
 801e6a8:	4642      	mov	r2, r8
 801e6aa:	464b      	mov	r3, r9
 801e6ac:	f7fa faac 	bl	8018c08 <__aeabi_dmul>
 801e6b0:	4602      	mov	r2, r0
 801e6b2:	460b      	mov	r3, r1
 801e6b4:	4630      	mov	r0, r6
 801e6b6:	4639      	mov	r1, r7
 801e6b8:	f7fa f8ee 	bl	8018898 <__aeabi_dsub>
 801e6bc:	ec53 2b1a 	vmov	r2, r3, d10
 801e6c0:	f7fa faa2 	bl	8018c08 <__aeabi_dmul>
 801e6c4:	ec53 2b18 	vmov	r2, r3, d8
 801e6c8:	ec41 0b19 	vmov	d9, r0, r1
 801e6cc:	ec51 0b18 	vmov	r0, r1, d8
 801e6d0:	f7fa fa9a 	bl	8018c08 <__aeabi_dmul>
 801e6d4:	a37c      	add	r3, pc, #496	; (adr r3, 801e8c8 <__ieee754_pow+0x708>)
 801e6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6da:	4604      	mov	r4, r0
 801e6dc:	460d      	mov	r5, r1
 801e6de:	f7fa fa93 	bl	8018c08 <__aeabi_dmul>
 801e6e2:	a37b      	add	r3, pc, #492	; (adr r3, 801e8d0 <__ieee754_pow+0x710>)
 801e6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6e8:	f7fa f8d8 	bl	801889c <__adddf3>
 801e6ec:	4622      	mov	r2, r4
 801e6ee:	462b      	mov	r3, r5
 801e6f0:	f7fa fa8a 	bl	8018c08 <__aeabi_dmul>
 801e6f4:	a378      	add	r3, pc, #480	; (adr r3, 801e8d8 <__ieee754_pow+0x718>)
 801e6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6fa:	f7fa f8cf 	bl	801889c <__adddf3>
 801e6fe:	4622      	mov	r2, r4
 801e700:	462b      	mov	r3, r5
 801e702:	f7fa fa81 	bl	8018c08 <__aeabi_dmul>
 801e706:	a376      	add	r3, pc, #472	; (adr r3, 801e8e0 <__ieee754_pow+0x720>)
 801e708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e70c:	f7fa f8c6 	bl	801889c <__adddf3>
 801e710:	4622      	mov	r2, r4
 801e712:	462b      	mov	r3, r5
 801e714:	f7fa fa78 	bl	8018c08 <__aeabi_dmul>
 801e718:	a373      	add	r3, pc, #460	; (adr r3, 801e8e8 <__ieee754_pow+0x728>)
 801e71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e71e:	f7fa f8bd 	bl	801889c <__adddf3>
 801e722:	4622      	mov	r2, r4
 801e724:	462b      	mov	r3, r5
 801e726:	f7fa fa6f 	bl	8018c08 <__aeabi_dmul>
 801e72a:	a371      	add	r3, pc, #452	; (adr r3, 801e8f0 <__ieee754_pow+0x730>)
 801e72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e730:	f7fa f8b4 	bl	801889c <__adddf3>
 801e734:	4622      	mov	r2, r4
 801e736:	4606      	mov	r6, r0
 801e738:	460f      	mov	r7, r1
 801e73a:	462b      	mov	r3, r5
 801e73c:	4620      	mov	r0, r4
 801e73e:	4629      	mov	r1, r5
 801e740:	f7fa fa62 	bl	8018c08 <__aeabi_dmul>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	4630      	mov	r0, r6
 801e74a:	4639      	mov	r1, r7
 801e74c:	f7fa fa5c 	bl	8018c08 <__aeabi_dmul>
 801e750:	4642      	mov	r2, r8
 801e752:	4604      	mov	r4, r0
 801e754:	460d      	mov	r5, r1
 801e756:	464b      	mov	r3, r9
 801e758:	ec51 0b18 	vmov	r0, r1, d8
 801e75c:	f7fa f89e 	bl	801889c <__adddf3>
 801e760:	ec53 2b19 	vmov	r2, r3, d9
 801e764:	f7fa fa50 	bl	8018c08 <__aeabi_dmul>
 801e768:	4622      	mov	r2, r4
 801e76a:	462b      	mov	r3, r5
 801e76c:	f7fa f896 	bl	801889c <__adddf3>
 801e770:	4642      	mov	r2, r8
 801e772:	4682      	mov	sl, r0
 801e774:	468b      	mov	fp, r1
 801e776:	464b      	mov	r3, r9
 801e778:	4640      	mov	r0, r8
 801e77a:	4649      	mov	r1, r9
 801e77c:	f7fa fa44 	bl	8018c08 <__aeabi_dmul>
 801e780:	4b6b      	ldr	r3, [pc, #428]	; (801e930 <__ieee754_pow+0x770>)
 801e782:	2200      	movs	r2, #0
 801e784:	4606      	mov	r6, r0
 801e786:	460f      	mov	r7, r1
 801e788:	f7fa f888 	bl	801889c <__adddf3>
 801e78c:	4652      	mov	r2, sl
 801e78e:	465b      	mov	r3, fp
 801e790:	f7fa f884 	bl	801889c <__adddf3>
 801e794:	2000      	movs	r0, #0
 801e796:	4604      	mov	r4, r0
 801e798:	460d      	mov	r5, r1
 801e79a:	4602      	mov	r2, r0
 801e79c:	460b      	mov	r3, r1
 801e79e:	4640      	mov	r0, r8
 801e7a0:	4649      	mov	r1, r9
 801e7a2:	f7fa fa31 	bl	8018c08 <__aeabi_dmul>
 801e7a6:	4b62      	ldr	r3, [pc, #392]	; (801e930 <__ieee754_pow+0x770>)
 801e7a8:	4680      	mov	r8, r0
 801e7aa:	4689      	mov	r9, r1
 801e7ac:	2200      	movs	r2, #0
 801e7ae:	4620      	mov	r0, r4
 801e7b0:	4629      	mov	r1, r5
 801e7b2:	f7fa f871 	bl	8018898 <__aeabi_dsub>
 801e7b6:	4632      	mov	r2, r6
 801e7b8:	463b      	mov	r3, r7
 801e7ba:	f7fa f86d 	bl	8018898 <__aeabi_dsub>
 801e7be:	4602      	mov	r2, r0
 801e7c0:	460b      	mov	r3, r1
 801e7c2:	4650      	mov	r0, sl
 801e7c4:	4659      	mov	r1, fp
 801e7c6:	f7fa f867 	bl	8018898 <__aeabi_dsub>
 801e7ca:	ec53 2b18 	vmov	r2, r3, d8
 801e7ce:	f7fa fa1b 	bl	8018c08 <__aeabi_dmul>
 801e7d2:	4622      	mov	r2, r4
 801e7d4:	4606      	mov	r6, r0
 801e7d6:	460f      	mov	r7, r1
 801e7d8:	462b      	mov	r3, r5
 801e7da:	ec51 0b19 	vmov	r0, r1, d9
 801e7de:	f7fa fa13 	bl	8018c08 <__aeabi_dmul>
 801e7e2:	4602      	mov	r2, r0
 801e7e4:	460b      	mov	r3, r1
 801e7e6:	4630      	mov	r0, r6
 801e7e8:	4639      	mov	r1, r7
 801e7ea:	f7fa f857 	bl	801889c <__adddf3>
 801e7ee:	4606      	mov	r6, r0
 801e7f0:	460f      	mov	r7, r1
 801e7f2:	4602      	mov	r2, r0
 801e7f4:	460b      	mov	r3, r1
 801e7f6:	4640      	mov	r0, r8
 801e7f8:	4649      	mov	r1, r9
 801e7fa:	f7fa f84f 	bl	801889c <__adddf3>
 801e7fe:	a33e      	add	r3, pc, #248	; (adr r3, 801e8f8 <__ieee754_pow+0x738>)
 801e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e804:	2000      	movs	r0, #0
 801e806:	4604      	mov	r4, r0
 801e808:	460d      	mov	r5, r1
 801e80a:	f7fa f9fd 	bl	8018c08 <__aeabi_dmul>
 801e80e:	4642      	mov	r2, r8
 801e810:	ec41 0b18 	vmov	d8, r0, r1
 801e814:	464b      	mov	r3, r9
 801e816:	4620      	mov	r0, r4
 801e818:	4629      	mov	r1, r5
 801e81a:	f7fa f83d 	bl	8018898 <__aeabi_dsub>
 801e81e:	4602      	mov	r2, r0
 801e820:	460b      	mov	r3, r1
 801e822:	4630      	mov	r0, r6
 801e824:	4639      	mov	r1, r7
 801e826:	f7fa f837 	bl	8018898 <__aeabi_dsub>
 801e82a:	a335      	add	r3, pc, #212	; (adr r3, 801e900 <__ieee754_pow+0x740>)
 801e82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e830:	f7fa f9ea 	bl	8018c08 <__aeabi_dmul>
 801e834:	a334      	add	r3, pc, #208	; (adr r3, 801e908 <__ieee754_pow+0x748>)
 801e836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e83a:	4606      	mov	r6, r0
 801e83c:	460f      	mov	r7, r1
 801e83e:	4620      	mov	r0, r4
 801e840:	4629      	mov	r1, r5
 801e842:	f7fa f9e1 	bl	8018c08 <__aeabi_dmul>
 801e846:	4602      	mov	r2, r0
 801e848:	460b      	mov	r3, r1
 801e84a:	4630      	mov	r0, r6
 801e84c:	4639      	mov	r1, r7
 801e84e:	f7fa f825 	bl	801889c <__adddf3>
 801e852:	9a07      	ldr	r2, [sp, #28]
 801e854:	4b37      	ldr	r3, [pc, #220]	; (801e934 <__ieee754_pow+0x774>)
 801e856:	4413      	add	r3, r2
 801e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85c:	f7fa f81e 	bl	801889c <__adddf3>
 801e860:	4682      	mov	sl, r0
 801e862:	9805      	ldr	r0, [sp, #20]
 801e864:	468b      	mov	fp, r1
 801e866:	f7fa f965 	bl	8018b34 <__aeabi_i2d>
 801e86a:	9a07      	ldr	r2, [sp, #28]
 801e86c:	4b32      	ldr	r3, [pc, #200]	; (801e938 <__ieee754_pow+0x778>)
 801e86e:	4413      	add	r3, r2
 801e870:	e9d3 8900 	ldrd	r8, r9, [r3]
 801e874:	4606      	mov	r6, r0
 801e876:	460f      	mov	r7, r1
 801e878:	4652      	mov	r2, sl
 801e87a:	465b      	mov	r3, fp
 801e87c:	ec51 0b18 	vmov	r0, r1, d8
 801e880:	f7fa f80c 	bl	801889c <__adddf3>
 801e884:	4642      	mov	r2, r8
 801e886:	464b      	mov	r3, r9
 801e888:	f7fa f808 	bl	801889c <__adddf3>
 801e88c:	4632      	mov	r2, r6
 801e88e:	463b      	mov	r3, r7
 801e890:	f7fa f804 	bl	801889c <__adddf3>
 801e894:	2000      	movs	r0, #0
 801e896:	4632      	mov	r2, r6
 801e898:	463b      	mov	r3, r7
 801e89a:	4604      	mov	r4, r0
 801e89c:	460d      	mov	r5, r1
 801e89e:	f7f9 fffb 	bl	8018898 <__aeabi_dsub>
 801e8a2:	4642      	mov	r2, r8
 801e8a4:	464b      	mov	r3, r9
 801e8a6:	f7f9 fff7 	bl	8018898 <__aeabi_dsub>
 801e8aa:	ec53 2b18 	vmov	r2, r3, d8
 801e8ae:	f7f9 fff3 	bl	8018898 <__aeabi_dsub>
 801e8b2:	4602      	mov	r2, r0
 801e8b4:	460b      	mov	r3, r1
 801e8b6:	4650      	mov	r0, sl
 801e8b8:	4659      	mov	r1, fp
 801e8ba:	e610      	b.n	801e4de <__ieee754_pow+0x31e>
 801e8bc:	2401      	movs	r4, #1
 801e8be:	e6a1      	b.n	801e604 <__ieee754_pow+0x444>
 801e8c0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801e910 <__ieee754_pow+0x750>
 801e8c4:	e617      	b.n	801e4f6 <__ieee754_pow+0x336>
 801e8c6:	bf00      	nop
 801e8c8:	4a454eef 	.word	0x4a454eef
 801e8cc:	3fca7e28 	.word	0x3fca7e28
 801e8d0:	93c9db65 	.word	0x93c9db65
 801e8d4:	3fcd864a 	.word	0x3fcd864a
 801e8d8:	a91d4101 	.word	0xa91d4101
 801e8dc:	3fd17460 	.word	0x3fd17460
 801e8e0:	518f264d 	.word	0x518f264d
 801e8e4:	3fd55555 	.word	0x3fd55555
 801e8e8:	db6fabff 	.word	0xdb6fabff
 801e8ec:	3fdb6db6 	.word	0x3fdb6db6
 801e8f0:	33333303 	.word	0x33333303
 801e8f4:	3fe33333 	.word	0x3fe33333
 801e8f8:	e0000000 	.word	0xe0000000
 801e8fc:	3feec709 	.word	0x3feec709
 801e900:	dc3a03fd 	.word	0xdc3a03fd
 801e904:	3feec709 	.word	0x3feec709
 801e908:	145b01f5 	.word	0x145b01f5
 801e90c:	be3e2fe0 	.word	0xbe3e2fe0
 801e910:	00000000 	.word	0x00000000
 801e914:	3ff00000 	.word	0x3ff00000
 801e918:	7ff00000 	.word	0x7ff00000
 801e91c:	43400000 	.word	0x43400000
 801e920:	0003988e 	.word	0x0003988e
 801e924:	000bb679 	.word	0x000bb679
 801e928:	080523d0 	.word	0x080523d0
 801e92c:	3ff00000 	.word	0x3ff00000
 801e930:	40080000 	.word	0x40080000
 801e934:	080523f0 	.word	0x080523f0
 801e938:	080523e0 	.word	0x080523e0
 801e93c:	a3b5      	add	r3, pc, #724	; (adr r3, 801ec14 <__ieee754_pow+0xa54>)
 801e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e942:	4640      	mov	r0, r8
 801e944:	4649      	mov	r1, r9
 801e946:	f7f9 ffa9 	bl	801889c <__adddf3>
 801e94a:	4622      	mov	r2, r4
 801e94c:	ec41 0b1a 	vmov	d10, r0, r1
 801e950:	462b      	mov	r3, r5
 801e952:	4630      	mov	r0, r6
 801e954:	4639      	mov	r1, r7
 801e956:	f7f9 ff9f 	bl	8018898 <__aeabi_dsub>
 801e95a:	4602      	mov	r2, r0
 801e95c:	460b      	mov	r3, r1
 801e95e:	ec51 0b1a 	vmov	r0, r1, d10
 801e962:	f7fa fbe1 	bl	8019128 <__aeabi_dcmpgt>
 801e966:	2800      	cmp	r0, #0
 801e968:	f47f ae04 	bne.w	801e574 <__ieee754_pow+0x3b4>
 801e96c:	4aa4      	ldr	r2, [pc, #656]	; (801ec00 <__ieee754_pow+0xa40>)
 801e96e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801e972:	4293      	cmp	r3, r2
 801e974:	f340 8108 	ble.w	801eb88 <__ieee754_pow+0x9c8>
 801e978:	151b      	asrs	r3, r3, #20
 801e97a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801e97e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801e982:	fa4a f303 	asr.w	r3, sl, r3
 801e986:	445b      	add	r3, fp
 801e988:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801e98c:	4e9d      	ldr	r6, [pc, #628]	; (801ec04 <__ieee754_pow+0xa44>)
 801e98e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801e992:	4116      	asrs	r6, r2
 801e994:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801e998:	2000      	movs	r0, #0
 801e99a:	ea23 0106 	bic.w	r1, r3, r6
 801e99e:	f1c2 0214 	rsb	r2, r2, #20
 801e9a2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801e9a6:	fa4a fa02 	asr.w	sl, sl, r2
 801e9aa:	f1bb 0f00 	cmp.w	fp, #0
 801e9ae:	4602      	mov	r2, r0
 801e9b0:	460b      	mov	r3, r1
 801e9b2:	4620      	mov	r0, r4
 801e9b4:	4629      	mov	r1, r5
 801e9b6:	bfb8      	it	lt
 801e9b8:	f1ca 0a00 	rsblt	sl, sl, #0
 801e9bc:	f7f9 ff6c 	bl	8018898 <__aeabi_dsub>
 801e9c0:	ec41 0b19 	vmov	d9, r0, r1
 801e9c4:	4642      	mov	r2, r8
 801e9c6:	464b      	mov	r3, r9
 801e9c8:	ec51 0b19 	vmov	r0, r1, d9
 801e9cc:	f7f9 ff66 	bl	801889c <__adddf3>
 801e9d0:	a37b      	add	r3, pc, #492	; (adr r3, 801ebc0 <__ieee754_pow+0xa00>)
 801e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d6:	2000      	movs	r0, #0
 801e9d8:	4604      	mov	r4, r0
 801e9da:	460d      	mov	r5, r1
 801e9dc:	f7fa f914 	bl	8018c08 <__aeabi_dmul>
 801e9e0:	ec53 2b19 	vmov	r2, r3, d9
 801e9e4:	4606      	mov	r6, r0
 801e9e6:	460f      	mov	r7, r1
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	4629      	mov	r1, r5
 801e9ec:	f7f9 ff54 	bl	8018898 <__aeabi_dsub>
 801e9f0:	4602      	mov	r2, r0
 801e9f2:	460b      	mov	r3, r1
 801e9f4:	4640      	mov	r0, r8
 801e9f6:	4649      	mov	r1, r9
 801e9f8:	f7f9 ff4e 	bl	8018898 <__aeabi_dsub>
 801e9fc:	a372      	add	r3, pc, #456	; (adr r3, 801ebc8 <__ieee754_pow+0xa08>)
 801e9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea02:	f7fa f901 	bl	8018c08 <__aeabi_dmul>
 801ea06:	a372      	add	r3, pc, #456	; (adr r3, 801ebd0 <__ieee754_pow+0xa10>)
 801ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea0c:	4680      	mov	r8, r0
 801ea0e:	4689      	mov	r9, r1
 801ea10:	4620      	mov	r0, r4
 801ea12:	4629      	mov	r1, r5
 801ea14:	f7fa f8f8 	bl	8018c08 <__aeabi_dmul>
 801ea18:	4602      	mov	r2, r0
 801ea1a:	460b      	mov	r3, r1
 801ea1c:	4640      	mov	r0, r8
 801ea1e:	4649      	mov	r1, r9
 801ea20:	f7f9 ff3c 	bl	801889c <__adddf3>
 801ea24:	4604      	mov	r4, r0
 801ea26:	460d      	mov	r5, r1
 801ea28:	4602      	mov	r2, r0
 801ea2a:	460b      	mov	r3, r1
 801ea2c:	4630      	mov	r0, r6
 801ea2e:	4639      	mov	r1, r7
 801ea30:	f7f9 ff34 	bl	801889c <__adddf3>
 801ea34:	4632      	mov	r2, r6
 801ea36:	463b      	mov	r3, r7
 801ea38:	4680      	mov	r8, r0
 801ea3a:	4689      	mov	r9, r1
 801ea3c:	f7f9 ff2c 	bl	8018898 <__aeabi_dsub>
 801ea40:	4602      	mov	r2, r0
 801ea42:	460b      	mov	r3, r1
 801ea44:	4620      	mov	r0, r4
 801ea46:	4629      	mov	r1, r5
 801ea48:	f7f9 ff26 	bl	8018898 <__aeabi_dsub>
 801ea4c:	4642      	mov	r2, r8
 801ea4e:	4606      	mov	r6, r0
 801ea50:	460f      	mov	r7, r1
 801ea52:	464b      	mov	r3, r9
 801ea54:	4640      	mov	r0, r8
 801ea56:	4649      	mov	r1, r9
 801ea58:	f7fa f8d6 	bl	8018c08 <__aeabi_dmul>
 801ea5c:	a35e      	add	r3, pc, #376	; (adr r3, 801ebd8 <__ieee754_pow+0xa18>)
 801ea5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea62:	4604      	mov	r4, r0
 801ea64:	460d      	mov	r5, r1
 801ea66:	f7fa f8cf 	bl	8018c08 <__aeabi_dmul>
 801ea6a:	a35d      	add	r3, pc, #372	; (adr r3, 801ebe0 <__ieee754_pow+0xa20>)
 801ea6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea70:	f7f9 ff12 	bl	8018898 <__aeabi_dsub>
 801ea74:	4622      	mov	r2, r4
 801ea76:	462b      	mov	r3, r5
 801ea78:	f7fa f8c6 	bl	8018c08 <__aeabi_dmul>
 801ea7c:	a35a      	add	r3, pc, #360	; (adr r3, 801ebe8 <__ieee754_pow+0xa28>)
 801ea7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea82:	f7f9 ff0b 	bl	801889c <__adddf3>
 801ea86:	4622      	mov	r2, r4
 801ea88:	462b      	mov	r3, r5
 801ea8a:	f7fa f8bd 	bl	8018c08 <__aeabi_dmul>
 801ea8e:	a358      	add	r3, pc, #352	; (adr r3, 801ebf0 <__ieee754_pow+0xa30>)
 801ea90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea94:	f7f9 ff00 	bl	8018898 <__aeabi_dsub>
 801ea98:	4622      	mov	r2, r4
 801ea9a:	462b      	mov	r3, r5
 801ea9c:	f7fa f8b4 	bl	8018c08 <__aeabi_dmul>
 801eaa0:	a355      	add	r3, pc, #340	; (adr r3, 801ebf8 <__ieee754_pow+0xa38>)
 801eaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eaa6:	f7f9 fef9 	bl	801889c <__adddf3>
 801eaaa:	4622      	mov	r2, r4
 801eaac:	462b      	mov	r3, r5
 801eaae:	f7fa f8ab 	bl	8018c08 <__aeabi_dmul>
 801eab2:	4602      	mov	r2, r0
 801eab4:	460b      	mov	r3, r1
 801eab6:	4640      	mov	r0, r8
 801eab8:	4649      	mov	r1, r9
 801eaba:	f7f9 feed 	bl	8018898 <__aeabi_dsub>
 801eabe:	4604      	mov	r4, r0
 801eac0:	460d      	mov	r5, r1
 801eac2:	4602      	mov	r2, r0
 801eac4:	460b      	mov	r3, r1
 801eac6:	4640      	mov	r0, r8
 801eac8:	4649      	mov	r1, r9
 801eaca:	f7fa f89d 	bl	8018c08 <__aeabi_dmul>
 801eace:	2200      	movs	r2, #0
 801ead0:	ec41 0b19 	vmov	d9, r0, r1
 801ead4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ead8:	4620      	mov	r0, r4
 801eada:	4629      	mov	r1, r5
 801eadc:	f7f9 fedc 	bl	8018898 <__aeabi_dsub>
 801eae0:	4602      	mov	r2, r0
 801eae2:	460b      	mov	r3, r1
 801eae4:	ec51 0b19 	vmov	r0, r1, d9
 801eae8:	f7fa f9b8 	bl	8018e5c <__aeabi_ddiv>
 801eaec:	4632      	mov	r2, r6
 801eaee:	4604      	mov	r4, r0
 801eaf0:	460d      	mov	r5, r1
 801eaf2:	463b      	mov	r3, r7
 801eaf4:	4640      	mov	r0, r8
 801eaf6:	4649      	mov	r1, r9
 801eaf8:	f7fa f886 	bl	8018c08 <__aeabi_dmul>
 801eafc:	4632      	mov	r2, r6
 801eafe:	463b      	mov	r3, r7
 801eb00:	f7f9 fecc 	bl	801889c <__adddf3>
 801eb04:	4602      	mov	r2, r0
 801eb06:	460b      	mov	r3, r1
 801eb08:	4620      	mov	r0, r4
 801eb0a:	4629      	mov	r1, r5
 801eb0c:	f7f9 fec4 	bl	8018898 <__aeabi_dsub>
 801eb10:	4642      	mov	r2, r8
 801eb12:	464b      	mov	r3, r9
 801eb14:	f7f9 fec0 	bl	8018898 <__aeabi_dsub>
 801eb18:	460b      	mov	r3, r1
 801eb1a:	4602      	mov	r2, r0
 801eb1c:	493a      	ldr	r1, [pc, #232]	; (801ec08 <__ieee754_pow+0xa48>)
 801eb1e:	2000      	movs	r0, #0
 801eb20:	f7f9 feba 	bl	8018898 <__aeabi_dsub>
 801eb24:	ec41 0b10 	vmov	d0, r0, r1
 801eb28:	ee10 3a90 	vmov	r3, s1
 801eb2c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801eb30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801eb34:	da2b      	bge.n	801eb8e <__ieee754_pow+0x9ce>
 801eb36:	4650      	mov	r0, sl
 801eb38:	f000 f966 	bl	801ee08 <scalbn>
 801eb3c:	ec51 0b10 	vmov	r0, r1, d0
 801eb40:	ec53 2b18 	vmov	r2, r3, d8
 801eb44:	f7ff bbed 	b.w	801e322 <__ieee754_pow+0x162>
 801eb48:	4b30      	ldr	r3, [pc, #192]	; (801ec0c <__ieee754_pow+0xa4c>)
 801eb4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801eb4e:	429e      	cmp	r6, r3
 801eb50:	f77f af0c 	ble.w	801e96c <__ieee754_pow+0x7ac>
 801eb54:	4b2e      	ldr	r3, [pc, #184]	; (801ec10 <__ieee754_pow+0xa50>)
 801eb56:	440b      	add	r3, r1
 801eb58:	4303      	orrs	r3, r0
 801eb5a:	d009      	beq.n	801eb70 <__ieee754_pow+0x9b0>
 801eb5c:	ec51 0b18 	vmov	r0, r1, d8
 801eb60:	2200      	movs	r2, #0
 801eb62:	2300      	movs	r3, #0
 801eb64:	f7fa fac2 	bl	80190ec <__aeabi_dcmplt>
 801eb68:	3800      	subs	r0, #0
 801eb6a:	bf18      	it	ne
 801eb6c:	2001      	movne	r0, #1
 801eb6e:	e447      	b.n	801e400 <__ieee754_pow+0x240>
 801eb70:	4622      	mov	r2, r4
 801eb72:	462b      	mov	r3, r5
 801eb74:	f7f9 fe90 	bl	8018898 <__aeabi_dsub>
 801eb78:	4642      	mov	r2, r8
 801eb7a:	464b      	mov	r3, r9
 801eb7c:	f7fa faca 	bl	8019114 <__aeabi_dcmpge>
 801eb80:	2800      	cmp	r0, #0
 801eb82:	f43f aef3 	beq.w	801e96c <__ieee754_pow+0x7ac>
 801eb86:	e7e9      	b.n	801eb5c <__ieee754_pow+0x99c>
 801eb88:	f04f 0a00 	mov.w	sl, #0
 801eb8c:	e71a      	b.n	801e9c4 <__ieee754_pow+0x804>
 801eb8e:	ec51 0b10 	vmov	r0, r1, d0
 801eb92:	4619      	mov	r1, r3
 801eb94:	e7d4      	b.n	801eb40 <__ieee754_pow+0x980>
 801eb96:	491c      	ldr	r1, [pc, #112]	; (801ec08 <__ieee754_pow+0xa48>)
 801eb98:	2000      	movs	r0, #0
 801eb9a:	f7ff bb30 	b.w	801e1fe <__ieee754_pow+0x3e>
 801eb9e:	2000      	movs	r0, #0
 801eba0:	2100      	movs	r1, #0
 801eba2:	f7ff bb2c 	b.w	801e1fe <__ieee754_pow+0x3e>
 801eba6:	4630      	mov	r0, r6
 801eba8:	4639      	mov	r1, r7
 801ebaa:	f7ff bb28 	b.w	801e1fe <__ieee754_pow+0x3e>
 801ebae:	9204      	str	r2, [sp, #16]
 801ebb0:	f7ff bb7a 	b.w	801e2a8 <__ieee754_pow+0xe8>
 801ebb4:	2300      	movs	r3, #0
 801ebb6:	f7ff bb64 	b.w	801e282 <__ieee754_pow+0xc2>
 801ebba:	bf00      	nop
 801ebbc:	f3af 8000 	nop.w
 801ebc0:	00000000 	.word	0x00000000
 801ebc4:	3fe62e43 	.word	0x3fe62e43
 801ebc8:	fefa39ef 	.word	0xfefa39ef
 801ebcc:	3fe62e42 	.word	0x3fe62e42
 801ebd0:	0ca86c39 	.word	0x0ca86c39
 801ebd4:	be205c61 	.word	0xbe205c61
 801ebd8:	72bea4d0 	.word	0x72bea4d0
 801ebdc:	3e663769 	.word	0x3e663769
 801ebe0:	c5d26bf1 	.word	0xc5d26bf1
 801ebe4:	3ebbbd41 	.word	0x3ebbbd41
 801ebe8:	af25de2c 	.word	0xaf25de2c
 801ebec:	3f11566a 	.word	0x3f11566a
 801ebf0:	16bebd93 	.word	0x16bebd93
 801ebf4:	3f66c16c 	.word	0x3f66c16c
 801ebf8:	5555553e 	.word	0x5555553e
 801ebfc:	3fc55555 	.word	0x3fc55555
 801ec00:	3fe00000 	.word	0x3fe00000
 801ec04:	000fffff 	.word	0x000fffff
 801ec08:	3ff00000 	.word	0x3ff00000
 801ec0c:	4090cbff 	.word	0x4090cbff
 801ec10:	3f6f3400 	.word	0x3f6f3400
 801ec14:	652b82fe 	.word	0x652b82fe
 801ec18:	3c971547 	.word	0x3c971547

0801ec1c <__ieee754_sqrt>:
 801ec1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ec20:	ec55 4b10 	vmov	r4, r5, d0
 801ec24:	4e55      	ldr	r6, [pc, #340]	; (801ed7c <__ieee754_sqrt+0x160>)
 801ec26:	43ae      	bics	r6, r5
 801ec28:	ee10 0a10 	vmov	r0, s0
 801ec2c:	ee10 3a10 	vmov	r3, s0
 801ec30:	462a      	mov	r2, r5
 801ec32:	4629      	mov	r1, r5
 801ec34:	d110      	bne.n	801ec58 <__ieee754_sqrt+0x3c>
 801ec36:	ee10 2a10 	vmov	r2, s0
 801ec3a:	462b      	mov	r3, r5
 801ec3c:	f7f9 ffe4 	bl	8018c08 <__aeabi_dmul>
 801ec40:	4602      	mov	r2, r0
 801ec42:	460b      	mov	r3, r1
 801ec44:	4620      	mov	r0, r4
 801ec46:	4629      	mov	r1, r5
 801ec48:	f7f9 fe28 	bl	801889c <__adddf3>
 801ec4c:	4604      	mov	r4, r0
 801ec4e:	460d      	mov	r5, r1
 801ec50:	ec45 4b10 	vmov	d0, r4, r5
 801ec54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec58:	2d00      	cmp	r5, #0
 801ec5a:	dc10      	bgt.n	801ec7e <__ieee754_sqrt+0x62>
 801ec5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ec60:	4330      	orrs	r0, r6
 801ec62:	d0f5      	beq.n	801ec50 <__ieee754_sqrt+0x34>
 801ec64:	b15d      	cbz	r5, 801ec7e <__ieee754_sqrt+0x62>
 801ec66:	ee10 2a10 	vmov	r2, s0
 801ec6a:	462b      	mov	r3, r5
 801ec6c:	ee10 0a10 	vmov	r0, s0
 801ec70:	f7f9 fe12 	bl	8018898 <__aeabi_dsub>
 801ec74:	4602      	mov	r2, r0
 801ec76:	460b      	mov	r3, r1
 801ec78:	f7fa f8f0 	bl	8018e5c <__aeabi_ddiv>
 801ec7c:	e7e6      	b.n	801ec4c <__ieee754_sqrt+0x30>
 801ec7e:	1512      	asrs	r2, r2, #20
 801ec80:	d074      	beq.n	801ed6c <__ieee754_sqrt+0x150>
 801ec82:	07d4      	lsls	r4, r2, #31
 801ec84:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801ec88:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 801ec8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801ec90:	bf5e      	ittt	pl
 801ec92:	0fda      	lsrpl	r2, r3, #31
 801ec94:	005b      	lslpl	r3, r3, #1
 801ec96:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 801ec9a:	2400      	movs	r4, #0
 801ec9c:	0fda      	lsrs	r2, r3, #31
 801ec9e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801eca2:	107f      	asrs	r7, r7, #1
 801eca4:	005b      	lsls	r3, r3, #1
 801eca6:	2516      	movs	r5, #22
 801eca8:	4620      	mov	r0, r4
 801ecaa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801ecae:	1886      	adds	r6, r0, r2
 801ecb0:	428e      	cmp	r6, r1
 801ecb2:	bfde      	ittt	le
 801ecb4:	1b89      	suble	r1, r1, r6
 801ecb6:	18b0      	addle	r0, r6, r2
 801ecb8:	18a4      	addle	r4, r4, r2
 801ecba:	0049      	lsls	r1, r1, #1
 801ecbc:	3d01      	subs	r5, #1
 801ecbe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801ecc2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801ecc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ecca:	d1f0      	bne.n	801ecae <__ieee754_sqrt+0x92>
 801eccc:	462a      	mov	r2, r5
 801ecce:	f04f 0e20 	mov.w	lr, #32
 801ecd2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801ecd6:	4281      	cmp	r1, r0
 801ecd8:	eb06 0c05 	add.w	ip, r6, r5
 801ecdc:	dc02      	bgt.n	801ece4 <__ieee754_sqrt+0xc8>
 801ecde:	d113      	bne.n	801ed08 <__ieee754_sqrt+0xec>
 801ece0:	459c      	cmp	ip, r3
 801ece2:	d811      	bhi.n	801ed08 <__ieee754_sqrt+0xec>
 801ece4:	f1bc 0f00 	cmp.w	ip, #0
 801ece8:	eb0c 0506 	add.w	r5, ip, r6
 801ecec:	da43      	bge.n	801ed76 <__ieee754_sqrt+0x15a>
 801ecee:	2d00      	cmp	r5, #0
 801ecf0:	db41      	blt.n	801ed76 <__ieee754_sqrt+0x15a>
 801ecf2:	f100 0801 	add.w	r8, r0, #1
 801ecf6:	1a09      	subs	r1, r1, r0
 801ecf8:	459c      	cmp	ip, r3
 801ecfa:	bf88      	it	hi
 801ecfc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801ed00:	eba3 030c 	sub.w	r3, r3, ip
 801ed04:	4432      	add	r2, r6
 801ed06:	4640      	mov	r0, r8
 801ed08:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 801ed0c:	f1be 0e01 	subs.w	lr, lr, #1
 801ed10:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 801ed14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ed18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801ed1c:	d1db      	bne.n	801ecd6 <__ieee754_sqrt+0xba>
 801ed1e:	430b      	orrs	r3, r1
 801ed20:	d006      	beq.n	801ed30 <__ieee754_sqrt+0x114>
 801ed22:	1c50      	adds	r0, r2, #1
 801ed24:	bf13      	iteet	ne
 801ed26:	3201      	addne	r2, #1
 801ed28:	3401      	addeq	r4, #1
 801ed2a:	4672      	moveq	r2, lr
 801ed2c:	f022 0201 	bicne.w	r2, r2, #1
 801ed30:	1063      	asrs	r3, r4, #1
 801ed32:	0852      	lsrs	r2, r2, #1
 801ed34:	07e1      	lsls	r1, r4, #31
 801ed36:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ed3a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ed3e:	bf48      	it	mi
 801ed40:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 801ed44:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 801ed48:	4614      	mov	r4, r2
 801ed4a:	e781      	b.n	801ec50 <__ieee754_sqrt+0x34>
 801ed4c:	0ad9      	lsrs	r1, r3, #11
 801ed4e:	3815      	subs	r0, #21
 801ed50:	055b      	lsls	r3, r3, #21
 801ed52:	2900      	cmp	r1, #0
 801ed54:	d0fa      	beq.n	801ed4c <__ieee754_sqrt+0x130>
 801ed56:	02cd      	lsls	r5, r1, #11
 801ed58:	d50a      	bpl.n	801ed70 <__ieee754_sqrt+0x154>
 801ed5a:	f1c2 0420 	rsb	r4, r2, #32
 801ed5e:	fa23 f404 	lsr.w	r4, r3, r4
 801ed62:	1e55      	subs	r5, r2, #1
 801ed64:	4093      	lsls	r3, r2
 801ed66:	4321      	orrs	r1, r4
 801ed68:	1b42      	subs	r2, r0, r5
 801ed6a:	e78a      	b.n	801ec82 <__ieee754_sqrt+0x66>
 801ed6c:	4610      	mov	r0, r2
 801ed6e:	e7f0      	b.n	801ed52 <__ieee754_sqrt+0x136>
 801ed70:	0049      	lsls	r1, r1, #1
 801ed72:	3201      	adds	r2, #1
 801ed74:	e7ef      	b.n	801ed56 <__ieee754_sqrt+0x13a>
 801ed76:	4680      	mov	r8, r0
 801ed78:	e7bd      	b.n	801ecf6 <__ieee754_sqrt+0xda>
 801ed7a:	bf00      	nop
 801ed7c:	7ff00000 	.word	0x7ff00000

0801ed80 <with_errno>:
 801ed80:	b570      	push	{r4, r5, r6, lr}
 801ed82:	4604      	mov	r4, r0
 801ed84:	460d      	mov	r5, r1
 801ed86:	4616      	mov	r6, r2
 801ed88:	f7fa fc6c 	bl	8019664 <__errno>
 801ed8c:	4629      	mov	r1, r5
 801ed8e:	6006      	str	r6, [r0, #0]
 801ed90:	4620      	mov	r0, r4
 801ed92:	bd70      	pop	{r4, r5, r6, pc}

0801ed94 <xflow>:
 801ed94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed96:	4614      	mov	r4, r2
 801ed98:	461d      	mov	r5, r3
 801ed9a:	b108      	cbz	r0, 801eda0 <xflow+0xc>
 801ed9c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801eda0:	e9cd 2300 	strd	r2, r3, [sp]
 801eda4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801eda8:	4620      	mov	r0, r4
 801edaa:	4629      	mov	r1, r5
 801edac:	f7f9 ff2c 	bl	8018c08 <__aeabi_dmul>
 801edb0:	2222      	movs	r2, #34	; 0x22
 801edb2:	b003      	add	sp, #12
 801edb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801edb8:	f7ff bfe2 	b.w	801ed80 <with_errno>

0801edbc <__math_uflow>:
 801edbc:	b508      	push	{r3, lr}
 801edbe:	2200      	movs	r2, #0
 801edc0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801edc4:	f7ff ffe6 	bl	801ed94 <xflow>
 801edc8:	ec41 0b10 	vmov	d0, r0, r1
 801edcc:	bd08      	pop	{r3, pc}

0801edce <__math_oflow>:
 801edce:	b508      	push	{r3, lr}
 801edd0:	2200      	movs	r2, #0
 801edd2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801edd6:	f7ff ffdd 	bl	801ed94 <xflow>
 801edda:	ec41 0b10 	vmov	d0, r0, r1
 801edde:	bd08      	pop	{r3, pc}

0801ede0 <fabs>:
 801ede0:	ec51 0b10 	vmov	r0, r1, d0
 801ede4:	ee10 2a10 	vmov	r2, s0
 801ede8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801edec:	ec43 2b10 	vmov	d0, r2, r3
 801edf0:	4770      	bx	lr

0801edf2 <finite>:
 801edf2:	b082      	sub	sp, #8
 801edf4:	ed8d 0b00 	vstr	d0, [sp]
 801edf8:	9801      	ldr	r0, [sp, #4]
 801edfa:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801edfe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ee02:	0fc0      	lsrs	r0, r0, #31
 801ee04:	b002      	add	sp, #8
 801ee06:	4770      	bx	lr

0801ee08 <scalbn>:
 801ee08:	b570      	push	{r4, r5, r6, lr}
 801ee0a:	ec55 4b10 	vmov	r4, r5, d0
 801ee0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ee12:	4606      	mov	r6, r0
 801ee14:	462b      	mov	r3, r5
 801ee16:	b99a      	cbnz	r2, 801ee40 <scalbn+0x38>
 801ee18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801ee1c:	4323      	orrs	r3, r4
 801ee1e:	d036      	beq.n	801ee8e <scalbn+0x86>
 801ee20:	4b39      	ldr	r3, [pc, #228]	; (801ef08 <scalbn+0x100>)
 801ee22:	4629      	mov	r1, r5
 801ee24:	ee10 0a10 	vmov	r0, s0
 801ee28:	2200      	movs	r2, #0
 801ee2a:	f7f9 feed 	bl	8018c08 <__aeabi_dmul>
 801ee2e:	4b37      	ldr	r3, [pc, #220]	; (801ef0c <scalbn+0x104>)
 801ee30:	429e      	cmp	r6, r3
 801ee32:	4604      	mov	r4, r0
 801ee34:	460d      	mov	r5, r1
 801ee36:	da10      	bge.n	801ee5a <scalbn+0x52>
 801ee38:	a32b      	add	r3, pc, #172	; (adr r3, 801eee8 <scalbn+0xe0>)
 801ee3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee3e:	e03a      	b.n	801eeb6 <scalbn+0xae>
 801ee40:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801ee44:	428a      	cmp	r2, r1
 801ee46:	d10c      	bne.n	801ee62 <scalbn+0x5a>
 801ee48:	ee10 2a10 	vmov	r2, s0
 801ee4c:	4620      	mov	r0, r4
 801ee4e:	4629      	mov	r1, r5
 801ee50:	f7f9 fd24 	bl	801889c <__adddf3>
 801ee54:	4604      	mov	r4, r0
 801ee56:	460d      	mov	r5, r1
 801ee58:	e019      	b.n	801ee8e <scalbn+0x86>
 801ee5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ee5e:	460b      	mov	r3, r1
 801ee60:	3a36      	subs	r2, #54	; 0x36
 801ee62:	4432      	add	r2, r6
 801ee64:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ee68:	428a      	cmp	r2, r1
 801ee6a:	dd08      	ble.n	801ee7e <scalbn+0x76>
 801ee6c:	2d00      	cmp	r5, #0
 801ee6e:	a120      	add	r1, pc, #128	; (adr r1, 801eef0 <scalbn+0xe8>)
 801ee70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee74:	da1c      	bge.n	801eeb0 <scalbn+0xa8>
 801ee76:	a120      	add	r1, pc, #128	; (adr r1, 801eef8 <scalbn+0xf0>)
 801ee78:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ee7c:	e018      	b.n	801eeb0 <scalbn+0xa8>
 801ee7e:	2a00      	cmp	r2, #0
 801ee80:	dd08      	ble.n	801ee94 <scalbn+0x8c>
 801ee82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ee86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ee8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ee8e:	ec45 4b10 	vmov	d0, r4, r5
 801ee92:	bd70      	pop	{r4, r5, r6, pc}
 801ee94:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ee98:	da19      	bge.n	801eece <scalbn+0xc6>
 801ee9a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ee9e:	429e      	cmp	r6, r3
 801eea0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801eea4:	dd0a      	ble.n	801eebc <scalbn+0xb4>
 801eea6:	a112      	add	r1, pc, #72	; (adr r1, 801eef0 <scalbn+0xe8>)
 801eea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d1e2      	bne.n	801ee76 <scalbn+0x6e>
 801eeb0:	a30f      	add	r3, pc, #60	; (adr r3, 801eef0 <scalbn+0xe8>)
 801eeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeb6:	f7f9 fea7 	bl	8018c08 <__aeabi_dmul>
 801eeba:	e7cb      	b.n	801ee54 <scalbn+0x4c>
 801eebc:	a10a      	add	r1, pc, #40	; (adr r1, 801eee8 <scalbn+0xe0>)
 801eebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d0b8      	beq.n	801ee38 <scalbn+0x30>
 801eec6:	a10e      	add	r1, pc, #56	; (adr r1, 801ef00 <scalbn+0xf8>)
 801eec8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801eecc:	e7b4      	b.n	801ee38 <scalbn+0x30>
 801eece:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801eed2:	3236      	adds	r2, #54	; 0x36
 801eed4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801eed8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801eedc:	4620      	mov	r0, r4
 801eede:	4b0c      	ldr	r3, [pc, #48]	; (801ef10 <scalbn+0x108>)
 801eee0:	2200      	movs	r2, #0
 801eee2:	e7e8      	b.n	801eeb6 <scalbn+0xae>
 801eee4:	f3af 8000 	nop.w
 801eee8:	c2f8f359 	.word	0xc2f8f359
 801eeec:	01a56e1f 	.word	0x01a56e1f
 801eef0:	8800759c 	.word	0x8800759c
 801eef4:	7e37e43c 	.word	0x7e37e43c
 801eef8:	8800759c 	.word	0x8800759c
 801eefc:	fe37e43c 	.word	0xfe37e43c
 801ef00:	c2f8f359 	.word	0xc2f8f359
 801ef04:	81a56e1f 	.word	0x81a56e1f
 801ef08:	43500000 	.word	0x43500000
 801ef0c:	ffff3cb0 	.word	0xffff3cb0
 801ef10:	3c900000 	.word	0x3c900000

0801ef14 <_init>:
 801ef14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef16:	bf00      	nop
 801ef18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef1a:	bc08      	pop	{r3}
 801ef1c:	469e      	mov	lr, r3
 801ef1e:	4770      	bx	lr

0801ef20 <_fini>:
 801ef20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef22:	bf00      	nop
 801ef24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ef26:	bc08      	pop	{r3}
 801ef28:	469e      	mov	lr, r3
 801ef2a:	4770      	bx	lr
